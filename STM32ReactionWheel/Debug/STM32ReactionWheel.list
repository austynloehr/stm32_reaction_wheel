
STM32ReactionWheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a74  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08007c18  08007c18  00017c18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008044  08008044  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008044  08008044  00018044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800804c  0800804c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800804c  0800804c  0001804c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008050  08008050  00018050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008054  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  200001e0  08008234  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08008234  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f79d  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024d0  00000000  00000000  0002f9ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  00031e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  000329b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180b9  00000000  00000000  000333d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f29  00000000  00000000  0004b489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a4b5  00000000  00000000  0005c3b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6867  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ecc  00000000  00000000  000e68b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007bfc 	.word	0x08007bfc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08007bfc 	.word	0x08007bfc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <App_Config>:
 */

#include "Application.h"

/* Start global function definition */
Config_Bus_t App_Config(Config_HAL_Bus_t Config_HAL_Bus){
 8000f5c:	b084      	sub	sp, #16
 8000f5e:	b5b0      	push	{r4, r5, r7, lr}
 8000f60:	b0ce      	sub	sp, #312	; 0x138
 8000f62:	af12      	add	r7, sp, #72	; 0x48
 8000f64:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000f66:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8000f6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Config_Bus_t Config_Bus;
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);  // Move this later
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f74:	4818      	ldr	r0, [pc, #96]	; (8000fd8 <App_Config+0x7c>)
 8000f76:	f001 fe09 	bl	8002b8c <HAL_GPIO_WritePin>

	Config_Bus.Config_HAL_Bus = Config_HAL_Bus;
 8000f7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f7e:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8000f82:	2298      	movs	r2, #152	; 0x98
 8000f84:	4618      	mov	r0, r3
 8000f86:	f003 ff4d 	bl	8004e24 <memcpy>
	Config_Bus.Config_MPU6050_Bus = Config_MPU6050(Config_HAL_Bus.hi2c1);
 8000f8a:	463c      	mov	r4, r7
 8000f8c:	4668      	mov	r0, sp
 8000f8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f92:	2248      	movs	r2, #72	; 0x48
 8000f94:	4619      	mov	r1, r3
 8000f96:	f003 ff45 	bl	8004e24 <memcpy>
 8000f9a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000f9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	f000 f87a 	bl	800109a <Config_MPU6050>
 8000fa6:	f107 04cc 	add.w	r4, r7, #204	; 0xcc
 8000faa:	463d      	mov	r5, r7
 8000fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb4:	682b      	ldr	r3, [r5, #0]
 8000fb6:	6023      	str	r3, [r4, #0]

	return Config_Bus;
 8000fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fc0:	22bc      	movs	r2, #188	; 0xbc
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f003 ff2e 	bl	8004e24 <memcpy>
}
 8000fc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000fca:	37f0      	adds	r7, #240	; 0xf0
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000fd2:	b004      	add	sp, #16
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40020800 	.word	0x40020800

08000fdc <App_Main>:

void App_Main(Config_Bus_t Config_Bus){
 8000fdc:	b084      	sub	sp, #16
 8000fde:	b5b0      	push	{r4, r5, r7, lr}
 8000fe0:	b0be      	sub	sp, #248	; 0xf8
 8000fe2:	af30      	add	r7, sp, #192	; 0xc0
 8000fe4:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000fe8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HI_Bus_t HI_Bus;
	IP_Bus_t IP_Bus;
	CT_Bus_t CT_Bus;
	OP_Bus_t OP_Bus;

	HI_Bus = IO_HardwareInputs(Config_Bus);
 8000fec:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000ff0:	4668      	mov	r0, sp
 8000ff2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ff6:	22b0      	movs	r2, #176	; 0xb0
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f003 ff13 	bl	8004e24 <memcpy>
 8000ffe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001002:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001004:	4620      	mov	r0, r4
 8001006:	f000 fb75 	bl	80016f4 <IO_HardwareInputs>
	IP_Bus = PR_InputProcessing(Config_Bus, HI_Bus);
 800100a:	f107 0514 	add.w	r5, r7, #20
 800100e:	ac2c      	add	r4, sp, #176	; 0xb0
 8001010:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001014:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001018:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800101c:	4668      	mov	r0, sp
 800101e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001022:	22b0      	movs	r2, #176	; 0xb0
 8001024:	4619      	mov	r1, r3
 8001026:	f003 fefd 	bl	8004e24 <memcpy>
 800102a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800102e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001030:	4628      	mov	r0, r5
 8001032:	f000 ff07 	bl	8001e44 <PR_InputProcessing>
	CT_Bus = CT_Control(IP_Bus);
 8001036:	f107 050c 	add.w	r5, r7, #12
 800103a:	466c      	mov	r4, sp
 800103c:	f107 0320 	add.w	r3, r7, #32
 8001040:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001044:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800104e:	4628      	mov	r0, r5
 8001050:	f000 fa68 	bl	8001524 <CT_Control>
	OP_Bus = PR_OutputProcessing(CT_Bus);
 8001054:	1d38      	adds	r0, r7, #4
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800105e:	f000 ff24 	bl	8001eaa <PR_OutputProcessing>
	IO_HardwareOutputs(Config_Bus, OP_Bus);
 8001062:	aa2b      	add	r2, sp, #172	; 0xac
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	e893 0003 	ldmia.w	r3, {r0, r1}
 800106a:	e882 0003 	stmia.w	r2, {r0, r1}
 800106e:	4668      	mov	r0, sp
 8001070:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001074:	22ac      	movs	r2, #172	; 0xac
 8001076:	4619      	mov	r1, r3
 8001078:	f003 fed4 	bl	8004e24 <memcpy>
 800107c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001080:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001082:	f000 fb65 	bl	8001750 <IO_HardwareOutputs>

	HAL_Delay(5);
 8001086:	2005      	movs	r0, #5
 8001088:	f001 faf2 	bl	8002670 <HAL_Delay>
}
 800108c:	bf00      	nop
 800108e:	3738      	adds	r7, #56	; 0x38
 8001090:	46bd      	mov	sp, r7
 8001092:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001096:	b004      	add	sp, #16
 8001098:	4770      	bx	lr

0800109a <Config_MPU6050>:
static MPU6050_IMUSensitivityData_t MPU6050_GetSens(const AFS_SEL_enum_t accelRange, const FS_SEL_enum_t gyroRange);
static MPU6050_IMUOffsetData_t MPU6050_CalibrateOffsets(I2C_HandleTypeDef hi2c1, Config_MPU6050_Bus_t Config_MPU6050_Bus);
/* Start static function prototypes */

/* Start global function definitions */
Config_MPU6050_Bus_t Config_MPU6050(I2C_HandleTypeDef hi2c1){
 800109a:	b084      	sub	sp, #16
 800109c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800109e:	b0b7      	sub	sp, #220	; 0xdc
 80010a0:	af1c      	add	r7, sp, #112	; 0x70
 80010a2:	6278      	str	r0, [r7, #36]	; 0x24
 80010a4:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80010a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Config_MPU6050_Bus_t Config_MPU6050_Bus;

	MPU6050_Init(hi2c1);
 80010ac:	4668      	mov	r0, sp
 80010ae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80010b2:	2244      	movs	r2, #68	; 0x44
 80010b4:	4619      	mov	r1, r3
 80010b6:	f003 feb5 	bl	8004e24 <memcpy>
 80010ba:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80010be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010c0:	f000 f84a 	bl	8001158 <MPU6050_Init>

	Config_MPU6050_Bus.Sensitivity = MPU6050_GetSens(accelRange, gyroRange);
 80010c4:	2301      	movs	r3, #1
 80010c6:	2201      	movs	r2, #1
 80010c8:	4611      	mov	r1, r2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f8c4 	bl	8001258 <MPU6050_GetSens>
 80010d0:	eeb0 7a40 	vmov.f32	s14, s0
 80010d4:	eef0 7a60 	vmov.f32	s15, s1
 80010d8:	ed87 7a11 	vstr	s14, [r7, #68]	; 0x44
 80010dc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

	Config_MPU6050_Bus.Offsets = (MPU6050_IMUOffsetData_t) {0, 0, 0, 0, 0, 0, 0};
 80010e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
 80010f0:	615a      	str	r2, [r3, #20]
 80010f2:	619a      	str	r2, [r3, #24]
	Config_MPU6050_Bus.Offsets = MPU6050_CalibrateOffsets(hi2c1, Config_MPU6050_Bus);
 80010f4:	463e      	mov	r6, r7
 80010f6:	ad12      	add	r5, sp, #72	; 0x48
 80010f8:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80010fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001100:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001102:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001104:	6823      	ldr	r3, [r4, #0]
 8001106:	602b      	str	r3, [r5, #0]
 8001108:	4668      	mov	r0, sp
 800110a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800110e:	2248      	movs	r2, #72	; 0x48
 8001110:	4619      	mov	r1, r3
 8001112:	f003 fe87 	bl	8004e24 <memcpy>
 8001116:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800111a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800111c:	4630      	mov	r0, r6
 800111e:	f000 f903 	bl	8001328 <MPU6050_CalibrateOffsets>
 8001122:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001126:	463d      	mov	r5, r7
 8001128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800112a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800112c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001130:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return Config_MPU6050_Bus;
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	461d      	mov	r5, r3
 8001138:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800113c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800113e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001144:	6823      	ldr	r3, [r4, #0]
 8001146:	602b      	str	r3, [r5, #0]
}
 8001148:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800114a:	376c      	adds	r7, #108	; 0x6c
 800114c:	46bd      	mov	sp, r7
 800114e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001152:	b004      	add	sp, #16
 8001154:	4770      	bx	lr
	...

08001158 <MPU6050_Init>:
/* End global function definitions */

/* Start static function definitions */
static void MPU6050_Init(I2C_HandleTypeDef hi2c1){
 8001158:	b084      	sub	sp, #16
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af04      	add	r7, sp, #16
 8001160:	f107 0c10 	add.w	ip, r7, #16
 8001164:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	static uint8_t regData;
	static uint8_t numReg = 1;

	/* I2C device check */
	// Raise error later
	HAL_StatusTypeDef deviceCheck = HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 1, I2C_TIMEOUT);
 8001168:	2332      	movs	r3, #50	; 0x32
 800116a:	2201      	movs	r2, #1
 800116c:	21d0      	movs	r1, #208	; 0xd0
 800116e:	f107 0010 	add.w	r0, r7, #16
 8001172:	f002 f989 	bl	8003488 <HAL_I2C_IsDeviceReady>
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]

	if (deviceCheck != HAL_OK){
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MPU6050_Init+0x2c>
		Error_Handler();
 8001180:	f001 f81a 	bl	80021b8 <Error_Handler>
	}

	/* Wake IMU */
	regData = CLKSEL;
 8001184:	4b32      	ldr	r3, [pc, #200]	; (8001250 <MPU6050_Init+0xf8>)
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT1_REG, REG_LEN, &regData, numReg, I2C_TIMEOUT);
 800118a:	4b32      	ldr	r3, [pc, #200]	; (8001254 <MPU6050_Init+0xfc>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b29b      	uxth	r3, r3
 8001190:	2232      	movs	r2, #50	; 0x32
 8001192:	9202      	str	r2, [sp, #8]
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	4b2e      	ldr	r3, [pc, #184]	; (8001250 <MPU6050_Init+0xf8>)
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2301      	movs	r3, #1
 800119c:	226b      	movs	r2, #107	; 0x6b
 800119e:	21d0      	movs	r1, #208	; 0xd0
 80011a0:	f107 0010 	add.w	r0, r7, #16
 80011a4:	f001 fe50 	bl	8002e48 <HAL_I2C_Mem_Write>

	/* Calculate SMPLRT_DIV from desired sample rate */
	regData = SMPLRT_DIV;
 80011a8:	4b29      	ldr	r3, [pc, #164]	; (8001250 <MPU6050_Init+0xf8>)
 80011aa:	2207      	movs	r2, #7
 80011ac:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPRT_DIV_REG, REG_LEN, &regData, numReg, I2C_TIMEOUT);
 80011ae:	4b29      	ldr	r3, [pc, #164]	; (8001254 <MPU6050_Init+0xfc>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	2232      	movs	r2, #50	; 0x32
 80011b6:	9202      	str	r2, [sp, #8]
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	4b25      	ldr	r3, [pc, #148]	; (8001250 <MPU6050_Init+0xf8>)
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2301      	movs	r3, #1
 80011c0:	2219      	movs	r2, #25
 80011c2:	21d0      	movs	r1, #208	; 0xd0
 80011c4:	f107 0010 	add.w	r0, r7, #16
 80011c8:	f001 fe3e 	bl	8002e48 <HAL_I2C_Mem_Write>

	/* Set gyro config */
	regData = (uint8_t) (gyroRange << 3);
 80011cc:	2301      	movs	r3, #1
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <MPU6050_Init+0xf8>)
 80011d4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, REG_LEN, &regData, numReg, I2C_TIMEOUT);
 80011d6:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <MPU6050_Init+0xfc>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	2232      	movs	r2, #50	; 0x32
 80011de:	9202      	str	r2, [sp, #8]
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <MPU6050_Init+0xf8>)
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2301      	movs	r3, #1
 80011e8:	221b      	movs	r2, #27
 80011ea:	21d0      	movs	r1, #208	; 0xd0
 80011ec:	f107 0010 	add.w	r0, r7, #16
 80011f0:	f001 fe2a 	bl	8002e48 <HAL_I2C_Mem_Write>

	/* Set accel config */
	regData = (uint8_t) (accelRange << 3);
 80011f4:	2301      	movs	r3, #1
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <MPU6050_Init+0xf8>)
 80011fc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, REG_LEN, &regData, numReg, I2C_TIMEOUT);
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <MPU6050_Init+0xfc>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b29b      	uxth	r3, r3
 8001204:	2232      	movs	r2, #50	; 0x32
 8001206:	9202      	str	r2, [sp, #8]
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MPU6050_Init+0xf8>)
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2301      	movs	r3, #1
 8001210:	221c      	movs	r2, #28
 8001212:	21d0      	movs	r1, #208	; 0xd0
 8001214:	f107 0010 	add.w	r0, r7, #16
 8001218:	f001 fe16 	bl	8002e48 <HAL_I2C_Mem_Write>

	/*Configure low pass filter*/
	regData = DLPF_CFG;
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MPU6050_Init+0xf8>)
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG_REG, REG_LEN, &regData, numReg, I2C_TIMEOUT);
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <MPU6050_Init+0xfc>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b29b      	uxth	r3, r3
 8001228:	2232      	movs	r2, #50	; 0x32
 800122a:	9202      	str	r2, [sp, #8]
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <MPU6050_Init+0xf8>)
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2301      	movs	r3, #1
 8001234:	221a      	movs	r2, #26
 8001236:	21d0      	movs	r1, #208	; 0xd0
 8001238:	f107 0010 	add.w	r0, r7, #16
 800123c:	f001 fe04 	bl	8002e48 <HAL_I2C_Mem_Write>
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800124a:	b004      	add	sp, #16
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	200001fc 	.word	0x200001fc
 8001254:	20000000 	.word	0x20000000

08001258 <MPU6050_GetSens>:

static MPU6050_IMUSensitivityData_t MPU6050_GetSens(const AFS_SEL_enum_t accelRange, const FS_SEL_enum_t gyroRange){
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	460a      	mov	r2, r1
 8001262:	73fb      	strb	r3, [r7, #15]
 8001264:	4613      	mov	r3, r2
 8001266:	73bb      	strb	r3, [r7, #14]
	MPU6050_IMUSensitivityData_t IMUSensitivity;

	/* Determine sensor sensitivity based on sensor range */
	switch (accelRange){
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	2b03      	cmp	r3, #3
 800126c:	d81a      	bhi.n	80012a4 <MPU6050_GetSens+0x4c>
 800126e:	a201      	add	r2, pc, #4	; (adr r2, 8001274 <MPU6050_GetSens+0x1c>)
 8001270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001274:	08001285 	.word	0x08001285
 8001278:	0800128d 	.word	0x0800128d
 800127c:	08001295 	.word	0x08001295
 8001280:	0800129d 	.word	0x0800129d
	case g2:
		IMUSensitivity.AccelSens = 16384.0;
 8001284:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 8001288:	613b      	str	r3, [r7, #16]
		break;
 800128a:	e010      	b.n	80012ae <MPU6050_GetSens+0x56>
	case g4:
		IMUSensitivity.AccelSens = 8192.0;
 800128c:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 8001290:	613b      	str	r3, [r7, #16]
		break;
 8001292:	e00c      	b.n	80012ae <MPU6050_GetSens+0x56>
	case g8:
		IMUSensitivity.AccelSens = 4096.0;
 8001294:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8001298:	613b      	str	r3, [r7, #16]
		break;
 800129a:	e008      	b.n	80012ae <MPU6050_GetSens+0x56>
	case g16:
		IMUSensitivity.AccelSens = 2048.0;
 800129c:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 80012a0:	613b      	str	r3, [r7, #16]
		break;
 80012a2:	e004      	b.n	80012ae <MPU6050_GetSens+0x56>
	default:
		IMUSensitivity.AccelSens = 0;
 80012a4:	f04f 0300 	mov.w	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
		Error_Handler();
 80012aa:	f000 ff85 	bl	80021b8 <Error_Handler>
	}

	/* Determine sensor sensitivity based on sensor range */
	switch (gyroRange){
 80012ae:	7bbb      	ldrb	r3, [r7, #14]
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	d817      	bhi.n	80012e4 <MPU6050_GetSens+0x8c>
 80012b4:	a201      	add	r2, pc, #4	; (adr r2, 80012bc <MPU6050_GetSens+0x64>)
 80012b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ba:	bf00      	nop
 80012bc:	080012cd 	.word	0x080012cd
 80012c0:	080012d3 	.word	0x080012d3
 80012c4:	080012d9 	.word	0x080012d9
 80012c8:	080012df 	.word	0x080012df
	case w250:
		IMUSensitivity.GyroSens = 131.0;
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <MPU6050_GetSens+0xc0>)
 80012ce:	617b      	str	r3, [r7, #20]
		break;
 80012d0:	e00d      	b.n	80012ee <MPU6050_GetSens+0x96>
	case w500:
		IMUSensitivity.GyroSens = 65.5;
 80012d2:	4b12      	ldr	r3, [pc, #72]	; (800131c <MPU6050_GetSens+0xc4>)
 80012d4:	617b      	str	r3, [r7, #20]
		break;
 80012d6:	e00a      	b.n	80012ee <MPU6050_GetSens+0x96>
	case w1000:
		IMUSensitivity.GyroSens = 32.8;
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <MPU6050_GetSens+0xc8>)
 80012da:	617b      	str	r3, [r7, #20]
		break;
 80012dc:	e007      	b.n	80012ee <MPU6050_GetSens+0x96>
	case w2000:
		IMUSensitivity.GyroSens = 16.4;
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <MPU6050_GetSens+0xcc>)
 80012e0:	617b      	str	r3, [r7, #20]
		break;
 80012e2:	e004      	b.n	80012ee <MPU6050_GetSens+0x96>
	default:
		IMUSensitivity.GyroSens = 0;
 80012e4:	f04f 0300 	mov.w	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
		Error_Handler();
 80012ea:	f000 ff65 	bl	80021b8 <Error_Handler>
	}

	return IMUSensitivity;
 80012ee:	f107 0318 	add.w	r3, r7, #24
 80012f2:	f107 0210 	add.w	r2, r7, #16
 80012f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012fa:	e883 0003 	stmia.w	r3, {r0, r1}
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	ee07 2a10 	vmov	s14, r2
 8001306:	ee07 3a90 	vmov	s15, r3
}
 800130a:	eeb0 0a47 	vmov.f32	s0, s14
 800130e:	eef0 0a67 	vmov.f32	s1, s15
 8001312:	3720      	adds	r7, #32
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	43030000 	.word	0x43030000
 800131c:	42830000 	.word	0x42830000
 8001320:	42033333 	.word	0x42033333
 8001324:	41833333 	.word	0x41833333

08001328 <MPU6050_CalibrateOffsets>:

static MPU6050_IMUOffsetData_t MPU6050_CalibrateOffsets(I2C_HandleTypeDef hi2c1, Config_MPU6050_Bus_t Config_MPU6050_Bus){
 8001328:	b084      	sub	sp, #16
 800132a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800132c:	b0ad      	sub	sp, #180	; 0xb4
 800132e:	af12      	add	r7, sp, #72	; 0x48
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8001336:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	MPU6050_IMUOffsetData_t IMUOffsets;
	HI_MPU6050_Bus_t HI_MPU6050_Bus;
	IP_MPU6050_Bus_t IP_MPU6050_Bus;

	uint32_t numSamples = 4000;
 800133a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800133e:	64bb      	str	r3, [r7, #72]	; 0x48

	float sumAx = 0;
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	667b      	str	r3, [r7, #100]	; 0x64
	float sumAy = 0;
 8001346:	f04f 0300 	mov.w	r3, #0
 800134a:	663b      	str	r3, [r7, #96]	; 0x60
	float sumAz = 0;
 800134c:	f04f 0300 	mov.w	r3, #0
 8001350:	65fb      	str	r3, [r7, #92]	; 0x5c
	float sumWx = 0;
 8001352:	f04f 0300 	mov.w	r3, #0
 8001356:	65bb      	str	r3, [r7, #88]	; 0x58
	float sumWy = 0;
 8001358:	f04f 0300 	mov.w	r3, #0
 800135c:	657b      	str	r3, [r7, #84]	; 0x54
	float sumWz = 0;
 800135e:	f04f 0300 	mov.w	r3, #0
 8001362:	653b      	str	r3, [r7, #80]	; 0x50

	for(uint32_t i = 0; i < numSamples; i++){
 8001364:	2300      	movs	r3, #0
 8001366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001368:	e055      	b.n	8001416 <MPU6050_CalibrateOffsets+0xee>
		HI_MPU6050_Bus = HI_MPU6050(hi2c1);
 800136a:	f107 0420 	add.w	r4, r7, #32
 800136e:	4668      	mov	r0, sp
 8001370:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001374:	2248      	movs	r2, #72	; 0x48
 8001376:	4619      	mov	r1, r3
 8001378:	f003 fd54 	bl	8004e24 <memcpy>
 800137c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001380:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001382:	4620      	mov	r0, r4
 8001384:	f000 fa25 	bl	80017d2 <HI_MPU6050>
		IP_MPU6050_Bus = IP_MPU6050(HI_MPU6050_Bus, Config_MPU6050_Bus);
 8001388:	f107 0608 	add.w	r6, r7, #8
 800138c:	466d      	mov	r5, sp
 800138e:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8001392:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001394:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001398:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800139a:	6823      	ldr	r3, [r4, #0]
 800139c:	602b      	str	r3, [r5, #0]
 800139e:	f107 0320 	add.w	r3, r7, #32
 80013a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013a4:	4630      	mov	r0, r6
 80013a6:	f000 fb51 	bl	8001a4c <IP_MPU6050>

		sumAx += IP_MPU6050_Bus.accel.XOUT_ms2;
 80013aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80013ae:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80013b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		sumAy += IP_MPU6050_Bus.accel.YOUT_ms2;
 80013ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80013be:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80013c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		sumAz += IP_MPU6050_Bus.accel.ZOUT_ms2;
 80013ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80013ce:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80013d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

		sumWx += IP_MPU6050_Bus.gyro.XOUT_dps;
 80013da:	edd7 7a05 	vldr	s15, [r7, #20]
 80013de:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80013e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		sumWy += IP_MPU6050_Bus.gyro.YOUT_dps;
 80013ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80013ee:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80013f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		sumWz += IP_MPU6050_Bus.gyro.ZOUT_dps;
 80013fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80013fe:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001406:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

		HAL_Delay(5);
 800140a:	2005      	movs	r0, #5
 800140c:	f001 f930 	bl	8002670 <HAL_Delay>
	for(uint32_t i = 0; i < numSamples; i++){
 8001410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001412:	3301      	adds	r3, #1
 8001414:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001416:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800141a:	429a      	cmp	r2, r3
 800141c:	d3a5      	bcc.n	800136a <MPU6050_CalibrateOffsets+0x42>
	}

	IMUOffsets.AxOffset = 0 - (sumAx / numSamples);
 800141e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001420:	ee07 3a90 	vmov	s15, r3
 8001424:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001428:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800142c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001430:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001520 <MPU6050_CalibrateOffsets+0x1f8>
 8001434:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001438:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	IMUOffsets.AyOffset = 0 - (sumAy / numSamples);
 800143c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800143e:	ee07 3a90 	vmov	s15, r3
 8001442:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001446:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800144a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800144e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001520 <MPU6050_CalibrateOffsets+0x1f8>
 8001452:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001456:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	IMUOffsets.AzOffset = 9.80665 - (sumAz / numSamples);
 800145a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800145c:	ee07 3a90 	vmov	s15, r3
 8001460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001464:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001468:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800146c:	ee16 0a90 	vmov	r0, s13
 8001470:	f7ff f872 	bl	8000558 <__aeabi_f2d>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	a127      	add	r1, pc, #156	; (adr r1, 8001518 <MPU6050_CalibrateOffsets+0x1f0>)
 800147a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800147e:	f7fe ff0b 	bl	8000298 <__aeabi_dsub>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4610      	mov	r0, r2
 8001488:	4619      	mov	r1, r3
 800148a:	f7ff fb95 	bl	8000bb8 <__aeabi_d2f>
 800148e:	4603      	mov	r3, r0
 8001490:	637b      	str	r3, [r7, #52]	; 0x34

	IMUOffsets.WxOffset = 0 - (sumWx / numSamples);
 8001492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800149c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80014a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014a4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001520 <MPU6050_CalibrateOffsets+0x1f8>
 80014a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ac:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	IMUOffsets.WyOffset = 0 - (sumWy / numSamples);
 80014b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014b2:	ee07 3a90 	vmov	s15, r3
 80014b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014ba:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80014be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014c2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001520 <MPU6050_CalibrateOffsets+0x1f8>
 80014c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ca:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	IMUOffsets.WzOffset = 0 - (sumWz / numSamples);
 80014ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014d0:	ee07 3a90 	vmov	s15, r3
 80014d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014d8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80014dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014e0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001520 <MPU6050_CalibrateOffsets+0x1f8>
 80014e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	IMUOffsets.SensCalibrated_bool = 1;
 80014ec:	2301      	movs	r3, #1
 80014ee:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	return IMUOffsets;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	461d      	mov	r5, r3
 80014f6:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80014fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014fe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001502:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	376c      	adds	r7, #108	; 0x6c
 800150a:	46bd      	mov	sp, r7
 800150c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001510:	b004      	add	sp, #16
 8001512:	4770      	bx	lr
 8001514:	f3af 8000 	nop.w
 8001518:	3a92a305 	.word	0x3a92a305
 800151c:	40239d01 	.word	0x40239d01
 8001520:	00000000 	.word	0x00000000

08001524 <CT_Control>:
/* Start Static function prototypes */
static CT_Bus_t CT_Controllers(IP_Bus_t IP_Bus);
/* End Static function prototypes */

/* Start global function definitions */
CT_Bus_t CT_Control(IP_Bus_t IP_Bus){
 8001524:	b084      	sub	sp, #16
 8001526:	b5b0      	push	{r4, r5, r7, lr}
 8001528:	b088      	sub	sp, #32
 800152a:	af04      	add	r7, sp, #16
 800152c:	6078      	str	r0, [r7, #4]
 800152e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001532:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	CT_Bus_t CT_Bus;

	CT_Bus = CT_Controllers(IP_Bus);
 8001536:	f107 0508 	add.w	r5, r7, #8
 800153a:	466c      	mov	r4, sp
 800153c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001540:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001544:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800154e:	4628      	mov	r0, r5
 8001550:	f000 f80f 	bl	8001572 <CT_Controllers>

	return CT_Bus;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	461a      	mov	r2, r3
 8001558:	f107 0308 	add.w	r3, r7, #8
 800155c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001560:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800156e:	b004      	add	sp, #16
 8001570:	4770      	bx	lr

08001572 <CT_Controllers>:
/* End global function definitions */

/* Start Static function definitions */
static CT_Bus_t CT_Controllers(IP_Bus_t IP_Bus){
 8001572:	b084      	sub	sp, #16
 8001574:	b5b0      	push	{r4, r5, r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af04      	add	r7, sp, #16
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001580:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	CT_Bus_t CT_Bus;

	CT_Bus.CT_Log_Bus = CT_Logging(IP_Bus.IP_MPU6050_Bus);
 8001584:	463d      	mov	r5, r7
 8001586:	466c      	mov	r4, sp
 8001588:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800158c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001590:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001594:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001598:	cb0e      	ldmia	r3, {r1, r2, r3}
 800159a:	4628      	mov	r0, r5
 800159c:	f000 f816 	bl	80015cc <CT_Logging>
 80015a0:	f107 0310 	add.w	r3, r7, #16
 80015a4:	463a      	mov	r2, r7
 80015a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015aa:	e883 0003 	stmia.w	r3, {r0, r1}

	return CT_Bus;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	461a      	mov	r2, r3
 80015b2:	f107 0310 	add.w	r3, r7, #16
 80015b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015ba:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80015be:	68f8      	ldr	r0, [r7, #12]
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80015c8:	b004      	add	sp, #16
 80015ca:	4770      	bx	lr

080015cc <CT_Logging>:
/* Start Function Prototypes */
static StringPacket_t MakeLogString(uint8_t *msg, uint16_t msgLen, IP_MPU6050_Bus_t IP_MPU6050_Bus);
/* End Function Prototypes */

/* Start Global Function Definitions */
CT_Log_Bus_t CT_Logging(IP_MPU6050_Bus_t IP_MPU6050_Bus){
 80015cc:	b084      	sub	sp, #16
 80015ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015d0:	b08d      	sub	sp, #52	; 0x34
 80015d2:	af06      	add	r7, sp, #24
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80015da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	StringPacket_t StringPacket;
	CT_Log_Bus_t Log_Bus;

	StringPacket = MakeLogString(msg, msgLen, IP_MPU6050_Bus);
 80015de:	4b12      	ldr	r3, [pc, #72]	; (8001628 <CT_Logging+0x5c>)
 80015e0:	f8b3 c000 	ldrh.w	ip, [r3]
 80015e4:	f107 0610 	add.w	r6, r7, #16
 80015e8:	466d      	mov	r5, sp
 80015ea:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80015ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015f2:	6823      	ldr	r3, [r4, #0]
 80015f4:	602b      	str	r3, [r5, #0]
 80015f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015f8:	4662      	mov	r2, ip
 80015fa:	490c      	ldr	r1, [pc, #48]	; (800162c <CT_Logging+0x60>)
 80015fc:	4630      	mov	r0, r6
 80015fe:	f000 f817 	bl	8001630 <MakeLogString>

	Log_Bus.pData = StringPacket.pData;
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	60bb      	str	r3, [r7, #8]
	Log_Bus.Size = StringPacket.Size;
 8001606:	8abb      	ldrh	r3, [r7, #20]
 8001608:	81bb      	strh	r3, [r7, #12]

	return Log_Bus;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	461a      	mov	r2, r3
 800160e:	f107 0308 	add.w	r3, r7, #8
 8001612:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001616:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	371c      	adds	r7, #28
 800161e:	46bd      	mov	sp, r7
 8001620:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001624:	b004      	add	sp, #16
 8001626:	4770      	bx	lr
 8001628:	20000002 	.word	0x20000002
 800162c:	20000200 	.word	0x20000200

08001630 <MakeLogString>:
/* End Global Function Definitions */

/* Start Static Function Definitions */
static StringPacket_t MakeLogString(uint8_t *msg, uint16_t msgLen, IP_MPU6050_Bus_t IP_MPU6050_Bus){
 8001630:	b082      	sub	sp, #8
 8001632:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001636:	b098      	sub	sp, #96	; 0x60
 8001638:	af0c      	add	r7, sp, #48	; 0x30
 800163a:	61f8      	str	r0, [r7, #28]
 800163c:	61b9      	str	r1, [r7, #24]
 800163e:	657b      	str	r3, [r7, #84]	; 0x54
 8001640:	4613      	mov	r3, r2
 8001642:	82fb      	strh	r3, [r7, #22]
	StringPacket_t StringPacket;

	uint32_t tick = HAL_GetTick();
 8001644:	f001 f808 	bl	8002658 <HAL_GetTick>
 8001648:	62f8      	str	r0, [r7, #44]	; 0x2c

	memset(msg, '\0', msgLen);  // Set unused indexes to null char
 800164a:	8afb      	ldrh	r3, [r7, #22]
 800164c:	461a      	mov	r2, r3
 800164e:	2100      	movs	r1, #0
 8001650:	69b8      	ldr	r0, [r7, #24]
 8001652:	f003 fbf5 	bl	8004e40 <memset>
	sprintf((char*) msg, "TK:%lu,AX:%.3f,AY:%.3f,AZ:%.3f,WX:%.3f,WY:%.3f,WZ:%.3f\n\r",
			tick,
			IP_MPU6050_Bus.accel.XOUT_ms2, IP_MPU6050_Bus.accel.YOUT_ms2, IP_MPU6050_Bus.accel.ZOUT_ms2,
 8001656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
	sprintf((char*) msg, "TK:%lu,AX:%.3f,AY:%.3f,AZ:%.3f,WX:%.3f,WY:%.3f,WZ:%.3f\n\r",
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe ff7d 	bl	8000558 <__aeabi_f2d>
 800165e:	4604      	mov	r4, r0
 8001660:	460d      	mov	r5, r1
			IP_MPU6050_Bus.accel.XOUT_ms2, IP_MPU6050_Bus.accel.YOUT_ms2, IP_MPU6050_Bus.accel.ZOUT_ms2,
 8001662:	6dbb      	ldr	r3, [r7, #88]	; 0x58
	sprintf((char*) msg, "TK:%lu,AX:%.3f,AY:%.3f,AZ:%.3f,WX:%.3f,WY:%.3f,WZ:%.3f\n\r",
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe ff77 	bl	8000558 <__aeabi_f2d>
 800166a:	4680      	mov	r8, r0
 800166c:	4689      	mov	r9, r1
			IP_MPU6050_Bus.accel.XOUT_ms2, IP_MPU6050_Bus.accel.YOUT_ms2, IP_MPU6050_Bus.accel.ZOUT_ms2,
 800166e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
	sprintf((char*) msg, "TK:%lu,AX:%.3f,AY:%.3f,AZ:%.3f,WX:%.3f,WY:%.3f,WZ:%.3f\n\r",
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe ff71 	bl	8000558 <__aeabi_f2d>
 8001676:	4682      	mov	sl, r0
 8001678:	468b      	mov	fp, r1
			IP_MPU6050_Bus.gyro.XOUT_dps, IP_MPU6050_Bus.gyro.YOUT_dps, IP_MPU6050_Bus.gyro.ZOUT_dps);
 800167a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
	sprintf((char*) msg, "TK:%lu,AX:%.3f,AY:%.3f,AZ:%.3f,WX:%.3f,WY:%.3f,WZ:%.3f\n\r",
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe ff6b 	bl	8000558 <__aeabi_f2d>
 8001682:	e9c7 0102 	strd	r0, r1, [r7, #8]
			IP_MPU6050_Bus.gyro.XOUT_dps, IP_MPU6050_Bus.gyro.YOUT_dps, IP_MPU6050_Bus.gyro.ZOUT_dps);
 8001686:	6e7b      	ldr	r3, [r7, #100]	; 0x64
	sprintf((char*) msg, "TK:%lu,AX:%.3f,AY:%.3f,AZ:%.3f,WX:%.3f,WY:%.3f,WZ:%.3f\n\r",
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe ff65 	bl	8000558 <__aeabi_f2d>
 800168e:	e9c7 0100 	strd	r0, r1, [r7]
			IP_MPU6050_Bus.gyro.XOUT_dps, IP_MPU6050_Bus.gyro.YOUT_dps, IP_MPU6050_Bus.gyro.ZOUT_dps);
 8001692:	6ebb      	ldr	r3, [r7, #104]	; 0x68
	sprintf((char*) msg, "TK:%lu,AX:%.3f,AY:%.3f,AZ:%.3f,WX:%.3f,WY:%.3f,WZ:%.3f\n\r",
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe ff5f 	bl	8000558 <__aeabi_f2d>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80016a2:	ed97 7b00 	vldr	d7, [r7]
 80016a6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80016aa:	ed97 7b02 	vldr	d7, [r7, #8]
 80016ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80016b2:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80016b6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80016ba:	e9cd 4500 	strd	r4, r5, [sp]
 80016be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016c0:	490b      	ldr	r1, [pc, #44]	; (80016f0 <MakeLogString+0xc0>)
 80016c2:	69b8      	ldr	r0, [r7, #24]
 80016c4:	f004 f82e 	bl	8005724 <siprintf>

	StringPacket.pData = msg;
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
	StringPacket.Size = msgLen;
 80016cc:	8afb      	ldrh	r3, [r7, #22]
 80016ce:	853b      	strh	r3, [r7, #40]	; 0x28

	return StringPacket;
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	461a      	mov	r2, r3
 80016d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016dc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80016e0:	69f8      	ldr	r0, [r7, #28]
 80016e2:	3730      	adds	r7, #48	; 0x30
 80016e4:	46bd      	mov	sp, r7
 80016e6:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016ea:	b002      	add	sp, #8
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	08007c18 	.word	0x08007c18

080016f4 <IO_HardwareInputs>:
 *      Author: aloehr
 */
#include "IO.h"

/* Start global function definitions */
HI_Bus_t IO_HardwareInputs(Config_Bus_t Config_Bus){
 80016f4:	b084      	sub	sp, #16
 80016f6:	b590      	push	{r4, r7, lr}
 80016f8:	b09d      	sub	sp, #116	; 0x74
 80016fa:	af12      	add	r7, sp, #72	; 0x48
 80016fc:	6178      	str	r0, [r7, #20]
 80016fe:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001702:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HI_Bus_t HI_Bus;

	HI_Bus.HI_MPU6050_Bus = HI_MPU6050(Config_Bus.Config_HAL_Bus.hi2c1);
 8001706:	463c      	mov	r4, r7
 8001708:	4668      	mov	r0, sp
 800170a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800170e:	2248      	movs	r2, #72	; 0x48
 8001710:	4619      	mov	r1, r3
 8001712:	f003 fb87 	bl	8004e24 <memcpy>
 8001716:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800171a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800171c:	4620      	mov	r0, r4
 800171e:	f000 f858 	bl	80017d2 <HI_MPU6050>
 8001722:	f107 031c 	add.w	r3, r7, #28
 8001726:	463a      	mov	r2, r7
 8001728:	6810      	ldr	r0, [r2, #0]
 800172a:	6851      	ldr	r1, [r2, #4]
 800172c:	6892      	ldr	r2, [r2, #8]
 800172e:	c307      	stmia	r3!, {r0, r1, r2}

	return HI_Bus;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	461c      	mov	r4, r3
 8001734:	f107 031c 	add.w	r3, r7, #28
 8001738:	cb07      	ldmia	r3!, {r0, r1, r2}
 800173a:	6020      	str	r0, [r4, #0]
 800173c:	6061      	str	r1, [r4, #4]
 800173e:	60a2      	str	r2, [r4, #8]
}
 8001740:	6978      	ldr	r0, [r7, #20]
 8001742:	372c      	adds	r7, #44	; 0x2c
 8001744:	46bd      	mov	sp, r7
 8001746:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800174a:	b004      	add	sp, #16
 800174c:	4770      	bx	lr
	...

08001750 <IO_HardwareOutputs>:

void IO_HardwareOutputs(Config_Bus_t Config_Bus, OP_Bus_t OP_Bus){
 8001750:	b084      	sub	sp, #16
 8001752:	b5b0      	push	{r4, r5, r7, lr}
 8001754:	b090      	sub	sp, #64	; 0x40
 8001756:	af10      	add	r7, sp, #64	; 0x40
 8001758:	f107 0410 	add.w	r4, r7, #16
 800175c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HO_HCO5(Config_Bus.Config_HAL_Bus.huart2, OP_Bus.OP_HC05_Bus.pData, OP_Bus.OP_HC05_Bus.Size);
 8001760:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001764:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8001768:	920e      	str	r2, [sp, #56]	; 0x38
 800176a:	930d      	str	r3, [sp, #52]	; 0x34
 800176c:	466d      	mov	r5, sp
 800176e:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001772:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001774:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001776:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001778:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800177a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800177c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800177e:	6823      	ldr	r3, [r4, #0]
 8001780:	602b      	str	r3, [r5, #0]
 8001782:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001786:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001788:	f000 f80e 	bl	80017a8 <HO_HCO5>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // Move this later
 800178c:	2200      	movs	r2, #0
 800178e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001792:	4804      	ldr	r0, [pc, #16]	; (80017a4 <IO_HardwareOutputs+0x54>)
 8001794:	f001 f9fa 	bl	8002b8c <HAL_GPIO_WritePin>
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80017a0:	b004      	add	sp, #16
 80017a2:	4770      	bx	lr
 80017a4:	40020800 	.word	0x40020800

080017a8 <HO_HCO5>:
/* Start Defines */
#define UART_TIMEOUT 50 //MS
/* End Defines */

/* Start Global Function Definitions */
void HO_HCO5(UART_HandleTypeDef huart, const uint8_t *pData, uint16_t Size){
 80017a8:	b084      	sub	sp, #16
 80017aa:	b580      	push	{r7, lr}
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	f107 0c08 	add.w	ip, r7, #8
 80017b2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart, pData, Size, (uint32_t) UART_TIMEOUT);
 80017b6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80017ba:	2332      	movs	r3, #50	; 0x32
 80017bc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80017be:	f107 0008 	add.w	r0, r7, #8
 80017c2:	f002 ff90 	bl	80046e6 <HAL_UART_Transmit>
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017ce:	b004      	add	sp, #16
 80017d0:	4770      	bx	lr

080017d2 <HI_MPU6050>:
static MPU6050_RawIMUDataSet_t MPU6050_GetRawAccel(I2C_HandleTypeDef hi2c1);
static MPU6050_RawIMUDataSet_t MPU6050_GetRawGyro(I2C_HandleTypeDef hi2c1);
/* End function prototypes */

/* Start global function definitions */
HI_MPU6050_Bus_t HI_MPU6050(I2C_HandleTypeDef hi2c1){
 80017d2:	b084      	sub	sp, #16
 80017d4:	b590      	push	{r4, r7, lr}
 80017d6:	b09b      	sub	sp, #108	; 0x6c
 80017d8:	af12      	add	r7, sp, #72	; 0x48
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80017e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HI_MPU6050_Bus_t HI_MPU6050_Bus;

	HI_MPU6050_Bus.RawAccel = MPU6050_GetRawAccel(hi2c1);
 80017e4:	463c      	mov	r4, r7
 80017e6:	4668      	mov	r0, sp
 80017e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017ec:	2248      	movs	r2, #72	; 0x48
 80017ee:	4619      	mov	r1, r3
 80017f0:	f003 fb18 	bl	8004e24 <memcpy>
 80017f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017fa:	4620      	mov	r0, r4
 80017fc:	f000 f82b 	bl	8001856 <MPU6050_GetRawAccel>
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	463a      	mov	r2, r7
 8001806:	6810      	ldr	r0, [r2, #0]
 8001808:	6018      	str	r0, [r3, #0]
 800180a:	8892      	ldrh	r2, [r2, #4]
 800180c:	809a      	strh	r2, [r3, #4]
	HI_MPU6050_Bus.RawGyro = MPU6050_GetRawGyro(hi2c1);
 800180e:	463c      	mov	r4, r7
 8001810:	4668      	mov	r0, sp
 8001812:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001816:	2248      	movs	r2, #72	; 0x48
 8001818:	4619      	mov	r1, r3
 800181a:	f003 fb03 	bl	8004e24 <memcpy>
 800181e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001822:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001824:	4620      	mov	r0, r4
 8001826:	f000 f887 	bl	8001938 <MPU6050_GetRawGyro>
 800182a:	f107 031a 	add.w	r3, r7, #26
 800182e:	463a      	mov	r2, r7
 8001830:	6811      	ldr	r1, [r2, #0]
 8001832:	6019      	str	r1, [r3, #0]
 8001834:	8892      	ldrh	r2, [r2, #4]
 8001836:	809a      	strh	r2, [r3, #4]

	return HI_MPU6050_Bus;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	461c      	mov	r4, r3
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001842:	6020      	str	r0, [r4, #0]
 8001844:	6061      	str	r1, [r4, #4]
 8001846:	60a2      	str	r2, [r4, #8]
}
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	3724      	adds	r7, #36	; 0x24
 800184c:	46bd      	mov	sp, r7
 800184e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001852:	b004      	add	sp, #16
 8001854:	4770      	bx	lr

08001856 <MPU6050_GetRawAccel>:
/* End global function definitions */

/* Start static function definitions */
static MPU6050_RawIMUDataSet_t MPU6050_GetRawAccel(I2C_HandleTypeDef hi2c1){
 8001856:	b084      	sub	sp, #16
 8001858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800185c:	b08d      	sub	sp, #52	; 0x34
 800185e:	af04      	add	r7, sp, #16
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001866:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800186a:	466b      	mov	r3, sp
 800186c:	461e      	mov	r6, r3
	MPU6050_RawIMUDataSet_t RawAccel;
	uint8_t	numReg = 6;
 800186e:	2306      	movs	r3, #6
 8001870:	77fb      	strb	r3, [r7, #31]
	uint8_t regData[numReg];
 8001872:	7ff9      	ldrb	r1, [r7, #31]
 8001874:	460b      	mov	r3, r1
 8001876:	3b01      	subs	r3, #1
 8001878:	61bb      	str	r3, [r7, #24]
 800187a:	b2cb      	uxtb	r3, r1
 800187c:	2200      	movs	r2, #0
 800187e:	4698      	mov	r8, r3
 8001880:	4691      	mov	r9, r2
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800188e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001892:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001896:	b2cb      	uxtb	r3, r1
 8001898:	2200      	movs	r2, #0
 800189a:	461c      	mov	r4, r3
 800189c:	4615      	mov	r5, r2
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	00eb      	lsls	r3, r5, #3
 80018a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018ac:	00e2      	lsls	r2, r4, #3
 80018ae:	460b      	mov	r3, r1
 80018b0:	3307      	adds	r3, #7
 80018b2:	08db      	lsrs	r3, r3, #3
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	ebad 0d03 	sub.w	sp, sp, r3
 80018ba:	ab04      	add	r3, sp, #16
 80018bc:	3300      	adds	r3, #0
 80018be:	617b      	str	r3, [r7, #20]

	/* Read accel measurement registers and store in regData array */
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_OUT_START_REG, REG_LEN, (uint8_t*) &regData, numReg, I2C_TIMEOUT);
 80018c0:	7ffb      	ldrb	r3, [r7, #31]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80018c8:	2232      	movs	r2, #50	; 0x32
 80018ca:	9202      	str	r2, [sp, #8]
 80018cc:	9301      	str	r3, [sp, #4]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	2301      	movs	r3, #1
 80018d4:	223b      	movs	r2, #59	; 0x3b
 80018d6:	21d0      	movs	r1, #208	; 0xd0
 80018d8:	f001 fbb0 	bl	800303c <HAL_I2C_Mem_Read>

	/* Combine high and low bits to 16 bit integer, update struct contents*/
	RawAccel.XOUT_na = (int16_t) ((regData[0] << 8) | (regData[1]));
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	b21a      	sxth	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	785b      	ldrb	r3, [r3, #1]
 80018e8:	b21b      	sxth	r3, r3
 80018ea:	4313      	orrs	r3, r2
 80018ec:	b21b      	sxth	r3, r3
 80018ee:	81bb      	strh	r3, [r7, #12]
	RawAccel.YOUT_na = (int16_t) ((regData[2] << 8) | (regData[3]));
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	789b      	ldrb	r3, [r3, #2]
 80018f4:	021b      	lsls	r3, r3, #8
 80018f6:	b21a      	sxth	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	78db      	ldrb	r3, [r3, #3]
 80018fc:	b21b      	sxth	r3, r3
 80018fe:	4313      	orrs	r3, r2
 8001900:	b21b      	sxth	r3, r3
 8001902:	81fb      	strh	r3, [r7, #14]
	RawAccel.ZOUT_na = (int16_t) ((regData[4] << 8) | (regData[5]));
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	791b      	ldrb	r3, [r3, #4]
 8001908:	021b      	lsls	r3, r3, #8
 800190a:	b21a      	sxth	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	795b      	ldrb	r3, [r3, #5]
 8001910:	b21b      	sxth	r3, r3
 8001912:	4313      	orrs	r3, r2
 8001914:	b21b      	sxth	r3, r3
 8001916:	823b      	strh	r3, [r7, #16]

	/* Return RawAccel struct*/
	return RawAccel;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	461a      	mov	r2, r3
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	6818      	ldr	r0, [r3, #0]
 8001922:	6010      	str	r0, [r2, #0]
 8001924:	889b      	ldrh	r3, [r3, #4]
 8001926:	8093      	strh	r3, [r2, #4]
 8001928:	46b5      	mov	sp, r6
}
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	3724      	adds	r7, #36	; 0x24
 800192e:	46bd      	mov	sp, r7
 8001930:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001934:	b004      	add	sp, #16
 8001936:	4770      	bx	lr

08001938 <MPU6050_GetRawGyro>:

static MPU6050_RawIMUDataSet_t MPU6050_GetRawGyro(I2C_HandleTypeDef hi2c1){
 8001938:	b084      	sub	sp, #16
 800193a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800193e:	b08d      	sub	sp, #52	; 0x34
 8001940:	af04      	add	r7, sp, #16
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001948:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800194c:	466b      	mov	r3, sp
 800194e:	461e      	mov	r6, r3
	MPU6050_RawIMUDataSet_t RawGyro;
	uint8_t	numReg = 6;
 8001950:	2306      	movs	r3, #6
 8001952:	77fb      	strb	r3, [r7, #31]
	uint8_t regData[numReg];
 8001954:	7ff9      	ldrb	r1, [r7, #31]
 8001956:	460b      	mov	r3, r1
 8001958:	3b01      	subs	r3, #1
 800195a:	61bb      	str	r3, [r7, #24]
 800195c:	b2cb      	uxtb	r3, r1
 800195e:	2200      	movs	r2, #0
 8001960:	4698      	mov	r8, r3
 8001962:	4691      	mov	r9, r2
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001970:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001974:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001978:	b2cb      	uxtb	r3, r1
 800197a:	2200      	movs	r2, #0
 800197c:	461c      	mov	r4, r3
 800197e:	4615      	mov	r5, r2
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	f04f 0300 	mov.w	r3, #0
 8001988:	00eb      	lsls	r3, r5, #3
 800198a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800198e:	00e2      	lsls	r2, r4, #3
 8001990:	460b      	mov	r3, r1
 8001992:	3307      	adds	r3, #7
 8001994:	08db      	lsrs	r3, r3, #3
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	ebad 0d03 	sub.w	sp, sp, r3
 800199c:	ab04      	add	r3, sp, #16
 800199e:	3300      	adds	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]

	/* Read gyro measurement registers and store in regData array */
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_OUT_START_REG, REG_LEN, (uint8_t*) &regData, numReg, I2C_TIMEOUT);
 80019a2:	7ffb      	ldrb	r3, [r7, #31]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80019aa:	2232      	movs	r2, #50	; 0x32
 80019ac:	9202      	str	r2, [sp, #8]
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	2301      	movs	r3, #1
 80019b6:	2243      	movs	r2, #67	; 0x43
 80019b8:	21d0      	movs	r1, #208	; 0xd0
 80019ba:	f001 fb3f 	bl	800303c <HAL_I2C_Mem_Read>

	/* Combine high and low bits to 16 bit integer, update struct contents*/
	RawGyro.XOUT_na = (int16_t) ((regData[0] << 8) | (regData[1]));
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	021b      	lsls	r3, r3, #8
 80019c4:	b21a      	sxth	r2, r3
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	785b      	ldrb	r3, [r3, #1]
 80019ca:	b21b      	sxth	r3, r3
 80019cc:	4313      	orrs	r3, r2
 80019ce:	b21b      	sxth	r3, r3
 80019d0:	81bb      	strh	r3, [r7, #12]
	RawGyro.YOUT_na = (int16_t) ((regData[2] << 8) | (regData[3]));
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	789b      	ldrb	r3, [r3, #2]
 80019d6:	021b      	lsls	r3, r3, #8
 80019d8:	b21a      	sxth	r2, r3
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	78db      	ldrb	r3, [r3, #3]
 80019de:	b21b      	sxth	r3, r3
 80019e0:	4313      	orrs	r3, r2
 80019e2:	b21b      	sxth	r3, r3
 80019e4:	81fb      	strh	r3, [r7, #14]
	RawGyro.ZOUT_na = (int16_t) ((regData[4] << 8) | (regData[5]));
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	791b      	ldrb	r3, [r3, #4]
 80019ea:	021b      	lsls	r3, r3, #8
 80019ec:	b21a      	sxth	r2, r3
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	795b      	ldrb	r3, [r3, #5]
 80019f2:	b21b      	sxth	r3, r3
 80019f4:	4313      	orrs	r3, r2
 80019f6:	b21b      	sxth	r3, r3
 80019f8:	823b      	strh	r3, [r7, #16]

	/* Return RawGyro struct*/
	return RawGyro;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	461a      	mov	r2, r3
 80019fe:	f107 030c 	add.w	r3, r7, #12
 8001a02:	6818      	ldr	r0, [r3, #0]
 8001a04:	6010      	str	r0, [r2, #0]
 8001a06:	889b      	ldrh	r3, [r3, #4]
 8001a08:	8093      	strh	r3, [r2, #4]
 8001a0a:	46b5      	mov	sp, r6
}
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	3724      	adds	r7, #36	; 0x24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a16:	b004      	add	sp, #16
 8001a18:	4770      	bx	lr

08001a1a <OP_HC05>:
 *  Created on: Jul 8, 2023
 *      Author: aloehr
 */
#include "PR_HC05.h"

OP_HC05_Bus_t OP_HC05(CT_Log_Bus_t CT_Log_Bus){
 8001a1a:	b480      	push	{r7}
 8001a1c:	b087      	sub	sp, #28
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	60f8      	str	r0, [r7, #12]
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	e883 0006 	stmia.w	r3, {r1, r2}
	OP_HC05_Bus_t OP_HC05_Bus;

	OP_HC05_Bus.pData = CT_Log_Bus.pData;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	613b      	str	r3, [r7, #16]
	OP_HC05_Bus.Size = CT_Log_Bus.Size;
 8001a2c:	893b      	ldrh	r3, [r7, #8]
 8001a2e:	82bb      	strh	r3, [r7, #20]

	return OP_HC05_Bus;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	461a      	mov	r2, r3
 8001a34:	f107 0310 	add.w	r3, r7, #16
 8001a38:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a3c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	371c      	adds	r7, #28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <IP_MPU6050>:
static MPU6050_AccelData_t MPU6050_CalcAccel(MPU6050_RawIMUDataSet_t RawAccel, float accelSens, MPU6050_IMUOffsetData_t IMUOffsets);
static MPU6050_GyroData_t MPU6050_CalcGyro(MPU6050_RawIMUDataSet_t RawGyro, float gyroSens, MPU6050_IMUOffsetData_t IMUOffsets);
/* End Function Prototypes */

/* Start Global Function Definition */
IP_MPU6050_Bus_t IP_MPU6050(HI_MPU6050_Bus_t HI_MPU6050_Bus, Config_MPU6050_Bus_t Config_MPU6050_Bus){
 8001a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a4e:	b091      	sub	sp, #68	; 0x44
 8001a50:	af06      	add	r7, sp, #24
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	4638      	mov	r0, r7
 8001a56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	IP_MPU6050_Bus_t IP_MPU6050_Bus;

	IP_MPU6050_Bus.accel = MPU6050_CalcAccel(HI_MPU6050_Bus.RawAccel, Config_MPU6050_Bus.Sensitivity.AccelSens, Config_MPU6050_Bus.Offsets);
 8001a5a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001a5e:	466d      	mov	r5, sp
 8001a60:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001a64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a68:	6823      	ldr	r3, [r4, #0]
 8001a6a:	602b      	str	r3, [r5, #0]
 8001a6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a70:	cb0c      	ldmia	r3, {r2, r3}
 8001a72:	eeb0 0a67 	vmov.f32	s0, s15
 8001a76:	4639      	mov	r1, r7
 8001a78:	c903      	ldmia	r1, {r0, r1}
 8001a7a:	f000 f853 	bl	8001b24 <MPU6050_CalcAccel>
 8001a7e:	eef0 6a40 	vmov.f32	s13, s0
 8001a82:	eeb0 7a60 	vmov.f32	s14, s1
 8001a86:	eef0 7a41 	vmov.f32	s15, s2
 8001a8a:	edc7 6a04 	vstr	s13, [r7, #16]
 8001a8e:	ed87 7a05 	vstr	s14, [r7, #20]
 8001a92:	edc7 7a06 	vstr	s15, [r7, #24]
	IP_MPU6050_Bus.gyro = MPU6050_CalcGyro(HI_MPU6050_Bus.RawGyro, Config_MPU6050_Bus.Sensitivity.GyroSens, Config_MPU6050_Bus.Offsets);
 8001a96:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a9a:	f8d7 3006 	ldr.w	r3, [r7, #6]
 8001a9e:	469c      	mov	ip, r3
 8001aa0:	897b      	ldrh	r3, [r7, #10]
 8001aa2:	2600      	movs	r6, #0
 8001aa4:	f363 060f 	bfi	r6, r3, #0, #16
 8001aa8:	466d      	mov	r5, sp
 8001aaa:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001aae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ab2:	6823      	ldr	r3, [r4, #0]
 8001ab4:	602b      	str	r3, [r5, #0]
 8001ab6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001aba:	cb0c      	ldmia	r3, {r2, r3}
 8001abc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac0:	4660      	mov	r0, ip
 8001ac2:	4631      	mov	r1, r6
 8001ac4:	f000 f896 	bl	8001bf4 <MPU6050_CalcGyro>
 8001ac8:	eef0 6a40 	vmov.f32	s13, s0
 8001acc:	eeb0 7a60 	vmov.f32	s14, s1
 8001ad0:	eef0 7a41 	vmov.f32	s15, s2
 8001ad4:	edc7 6a07 	vstr	s13, [r7, #28]
 8001ad8:	ed87 7a08 	vstr	s14, [r7, #32]
 8001adc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	if(Config_MPU6050_Bus.Offsets.SensCalibrated_bool){
 8001ae0:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00e      	beq.n	8001b06 <IP_MPU6050+0xba>
		IP_MPU6050_Bus = MPU6050_IMUDataClamp(IP_MPU6050_Bus);
 8001ae8:	f107 0510 	add.w	r5, r7, #16
 8001aec:	466c      	mov	r4, sp
 8001aee:	f107 031c 	add.w	r3, r7, #28
 8001af2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001af6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001afa:	f107 0310 	add.w	r3, r7, #16
 8001afe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b00:	4628      	mov	r0, r5
 8001b02:	f000 f915 	bl	8001d30 <MPU6050_IMUDataClamp>
	}

	return IP_MPU6050_Bus;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	461d      	mov	r5, r3
 8001b0a:	f107 0410 	add.w	r4, r7, #16
 8001b0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b16:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	372c      	adds	r7, #44	; 0x2c
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001b24 <MPU6050_CalcAccel>:
/* End Global Function Definition */

/* Start Static Function Definition */
static MPU6050_AccelData_t MPU6050_CalcAccel(MPU6050_RawIMUDataSet_t RawAccel, float accelSens, MPU6050_IMUOffsetData_t IMUOffsets){
 8001b24:	b082      	sub	sp, #8
 8001b26:	b490      	push	{r4, r7}
 8001b28:	b08e      	sub	sp, #56	; 0x38
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	f107 0418 	add.w	r4, r7, #24
 8001b30:	e884 0003 	stmia.w	r4, {r0, r1}
 8001b34:	ed87 0a05 	vstr	s0, [r7, #20]
 8001b38:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001b3c:	e881 000c 	stmia.w	r1, {r2, r3}
	MPU6050_AccelData_t Accel;

	/* Convert bits to g's, store in Accel struct*/
	Accel.XOUT_ms2 = (RawAccel.XOUT_na / accelSens) * g + IMUOffsets.AxOffset;
 8001b40:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001b44:	ee07 3a90 	vmov	s15, r3
 8001b48:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b4c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b54:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001bf0 <MPU6050_CalcAccel+0xcc>
 8001b58:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b5c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001b60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b64:	edc7 7a08 	vstr	s15, [r7, #32]
	Accel.YOUT_ms2 = (RawAccel.YOUT_na / accelSens) * g + IMUOffsets.AyOffset;
 8001b68:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001b6c:	ee07 3a90 	vmov	s15, r3
 8001b70:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b74:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b7c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001bf0 <MPU6050_CalcAccel+0xcc>
 8001b80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b84:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b8c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	Accel.ZOUT_ms2 = (RawAccel.ZOUT_na / accelSens) * g + IMUOffsets.AzOffset;
 8001b90:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b94:	ee07 3a90 	vmov	s15, r3
 8001b98:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b9c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ba4:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001bf0 <MPU6050_CalcAccel+0xcc>
 8001ba8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bac:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001bb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	/* Return Accel struct */
	return Accel;
 8001bb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bbc:	f107 0220 	add.w	r2, r7, #32
 8001bc0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bc2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001bc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bcc:	ee06 1a90 	vmov	s13, r1
 8001bd0:	ee07 2a10 	vmov	s14, r2
 8001bd4:	ee07 3a90 	vmov	s15, r3
}
 8001bd8:	eeb0 0a66 	vmov.f32	s0, s13
 8001bdc:	eef0 0a47 	vmov.f32	s1, s14
 8001be0:	eeb0 1a67 	vmov.f32	s2, s15
 8001be4:	3738      	adds	r7, #56	; 0x38
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc90      	pop	{r4, r7}
 8001bea:	b002      	add	sp, #8
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	411ce7d5 	.word	0x411ce7d5

08001bf4 <MPU6050_CalcGyro>:

static MPU6050_GyroData_t MPU6050_CalcGyro(MPU6050_RawIMUDataSet_t RawGyro, float gyroSens, MPU6050_IMUOffsetData_t IMUOffsets){
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	b490      	push	{r4, r7}
 8001bf8:	b08e      	sub	sp, #56	; 0x38
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	f107 0418 	add.w	r4, r7, #24
 8001c00:	e884 0003 	stmia.w	r4, {r0, r1}
 8001c04:	ed87 0a05 	vstr	s0, [r7, #20]
 8001c08:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001c0c:	e881 000c 	stmia.w	r1, {r2, r3}
	MPU6050_GyroData_t Gyro;

	/* Convert bits to deg/s, store in Gyro struct*/
	Gyro.XOUT_dps = RawGyro.XOUT_na / gyroSens + IMUOffsets.WxOffset;
 8001c10:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001c14:	ee07 3a90 	vmov	s15, r3
 8001c18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c24:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001c28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c2c:	edc7 7a08 	vstr	s15, [r7, #32]
	Gyro.YOUT_dps = RawGyro.YOUT_na / gyroSens + IMUOffsets.WyOffset;
 8001c30:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001c34:	ee07 3a90 	vmov	s15, r3
 8001c38:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c44:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001c48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c4c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	Gyro.ZOUT_dps = RawGyro.ZOUT_na / gyroSens + IMUOffsets.WzOffset;
 8001c50:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c54:	ee07 3a90 	vmov	s15, r3
 8001c58:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c64:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	/* Return Gyro struct */
	return Gyro;
 8001c70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c74:	f107 0220 	add.w	r2, r7, #32
 8001c78:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001c7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c84:	ee06 1a90 	vmov	s13, r1
 8001c88:	ee07 2a10 	vmov	s14, r2
 8001c8c:	ee07 3a90 	vmov	s15, r3
}
 8001c90:	eeb0 0a66 	vmov.f32	s0, s13
 8001c94:	eef0 0a47 	vmov.f32	s1, s14
 8001c98:	eeb0 1a67 	vmov.f32	s2, s15
 8001c9c:	3738      	adds	r7, #56	; 0x38
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc90      	pop	{r4, r7}
 8001ca2:	b002      	add	sp, #8
 8001ca4:	4770      	bx	lr

08001ca6 <clamp>:

static float clamp(float data, float clampVal, float threshold, uint8_t mode){
 8001ca6:	b480      	push	{r7}
 8001ca8:	b087      	sub	sp, #28
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	ed87 0a03 	vstr	s0, [r7, #12]
 8001cb0:	edc7 0a02 	vstr	s1, [r7, #8]
 8001cb4:	ed87 1a01 	vstr	s2, [r7, #4]
 8001cb8:	4603      	mov	r3, r0
 8001cba:	70fb      	strb	r3, [r7, #3]
	// mode = 0: Clamp to clampVal if data below threshold
	// mode = 1: Clamp to clampVal if data above threshold
	float result;

	uint8_t applyClamp_bool = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	74fb      	strb	r3, [r7, #19]

	// Check mode and if clamp is required
	switch(mode){
 8001cc0:	78fb      	ldrb	r3, [r7, #3]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <clamp+0x26>
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d010      	beq.n	8001cec <clamp+0x46>
 8001cca:	e01f      	b.n	8001d0c <clamp+0x66>
	case 0:
		applyClamp_bool = (fabsf(data) < threshold);
 8001ccc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cd0:	eef0 7ae7 	vabs.f32	s15, s15
 8001cd4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001cd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce0:	bfcc      	ite	gt
 8001ce2:	2301      	movgt	r3, #1
 8001ce4:	2300      	movle	r3, #0
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	74fb      	strb	r3, [r7, #19]
		break;
 8001cea:	e00f      	b.n	8001d0c <clamp+0x66>

	case 1:
		applyClamp_bool = (fabsf(data) > threshold);
 8001cec:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cf0:	eef0 7ae7 	vabs.f32	s15, s15
 8001cf4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001cf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d00:	bf4c      	ite	mi
 8001d02:	2301      	movmi	r3, #1
 8001d04:	2300      	movpl	r3, #0
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	74fb      	strb	r3, [r7, #19]
		break;
 8001d0a:	bf00      	nop
	}

	// Apply clamp if above criteria are met
	if(applyClamp_bool){
 8001d0c:	7cfb      	ldrb	r3, [r7, #19]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d002      	beq.n	8001d18 <clamp+0x72>
		result = clampVal;
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	617b      	str	r3, [r7, #20]
 8001d16:	e001      	b.n	8001d1c <clamp+0x76>
	} else{
		result = data;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	617b      	str	r3, [r7, #20]
	}

	return result;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	ee07 3a90 	vmov	s15, r3
}
 8001d22:	eeb0 0a67 	vmov.f32	s0, s15
 8001d26:	371c      	adds	r7, #28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <MPU6050_IMUDataClamp>:

static IP_MPU6050_Bus_t MPU6050_IMUDataClamp(IP_MPU6050_Bus_t MPU6050_Bus){
 8001d30:	b084      	sub	sp, #16
 8001d32:	b5b0      	push	{r4, r5, r7, lr}
 8001d34:	b08c      	sub	sp, #48	; 0x30
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001d3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	IP_MPU6050_Bus_t Result_Bus;

	float clampVal = 0;
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	62fb      	str	r3, [r7, #44]	; 0x2c
	float clampThreshold = .02;
 8001d48:	4b3d      	ldr	r3, [pc, #244]	; (8001e40 <MPU6050_IMUDataClamp+0x110>)
 8001d4a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t clampMode = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	Result_Bus.accel.XOUT_ms2 = clamp(MPU6050_Bus.accel.XOUT_ms2, clampVal, clampThreshold, clampMode);
 8001d52:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 8001d60:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8001d64:	eeb0 0a67 	vmov.f32	s0, s15
 8001d68:	f7ff ff9d 	bl	8001ca6 <clamp>
 8001d6c:	eef0 7a40 	vmov.f32	s15, s0
 8001d70:	edc7 7a03 	vstr	s15, [r7, #12]
	Result_Bus.accel.YOUT_ms2 = clamp(MPU6050_Bus.accel.YOUT_ms2, clampVal, clampThreshold, clampMode);
 8001d74:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 8001d82:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8001d86:	eeb0 0a67 	vmov.f32	s0, s15
 8001d8a:	f7ff ff8c 	bl	8001ca6 <clamp>
 8001d8e:	eef0 7a40 	vmov.f32	s15, s0
 8001d92:	edc7 7a04 	vstr	s15, [r7, #16]
	Result_Bus.accel.ZOUT_ms2 = clamp(MPU6050_Bus.accel.ZOUT_ms2, clampVal, clampThreshold, clampMode);
 8001d96:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001d9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d9e:	4618      	mov	r0, r3
 8001da0:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 8001da4:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8001da8:	eeb0 0a67 	vmov.f32	s0, s15
 8001dac:	f7ff ff7b 	bl	8001ca6 <clamp>
 8001db0:	eef0 7a40 	vmov.f32	s15, s0
 8001db4:	edc7 7a05 	vstr	s15, [r7, #20]

	Result_Bus.gyro.XOUT_dps = clamp(MPU6050_Bus.gyro.XOUT_dps , clampVal, clampThreshold, clampMode);
 8001db8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 8001dc6:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8001dca:	eeb0 0a67 	vmov.f32	s0, s15
 8001dce:	f7ff ff6a 	bl	8001ca6 <clamp>
 8001dd2:	eef0 7a40 	vmov.f32	s15, s0
 8001dd6:	edc7 7a06 	vstr	s15, [r7, #24]
	Result_Bus.gyro.YOUT_dps = clamp(MPU6050_Bus.gyro.YOUT_dps , clampVal, clampThreshold, clampMode);
 8001dda:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001dde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001de2:	4618      	mov	r0, r3
 8001de4:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 8001de8:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8001dec:	eeb0 0a67 	vmov.f32	s0, s15
 8001df0:	f7ff ff59 	bl	8001ca6 <clamp>
 8001df4:	eef0 7a40 	vmov.f32	s15, s0
 8001df8:	edc7 7a07 	vstr	s15, [r7, #28]
	Result_Bus.gyro.ZOUT_dps = clamp(MPU6050_Bus.gyro.ZOUT_dps , clampVal, clampThreshold, clampMode);
 8001dfc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001e00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e04:	4618      	mov	r0, r3
 8001e06:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 8001e0a:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8001e0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e12:	f7ff ff48 	bl	8001ca6 <clamp>
 8001e16:	eef0 7a40 	vmov.f32	s15, s0
 8001e1a:	edc7 7a08 	vstr	s15, [r7, #32]

	return Result_Bus;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	461d      	mov	r5, r3
 8001e22:	f107 040c 	add.w	r4, r7, #12
 8001e26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e2e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	3730      	adds	r7, #48	; 0x30
 8001e36:	46bd      	mov	sp, r7
 8001e38:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001e3c:	b004      	add	sp, #16
 8001e3e:	4770      	bx	lr
 8001e40:	3ca3d70a 	.word	0x3ca3d70a

08001e44 <PR_InputProcessing>:
 */

#include "Processing.h"

/* Start global function definitions */
IP_Bus_t PR_InputProcessing(Config_Bus_t Config_Bus, HI_Bus_t HI_Bus){
 8001e44:	b084      	sub	sp, #16
 8001e46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e48:	b099      	sub	sp, #100	; 0x64
 8001e4a:	af0a      	add	r7, sp, #40	; 0x28
 8001e4c:	61f8      	str	r0, [r7, #28]
 8001e4e:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001e52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	IP_Bus_t IP_Bus;

	IP_Bus.IP_MPU6050_Bus = IP_MPU6050(HI_Bus.HI_MPU6050_Bus, Config_Bus.Config_MPU6050_Bus);
 8001e56:	463e      	mov	r6, r7
 8001e58:	466d      	mov	r5, sp
 8001e5a:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 8001e5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e66:	6823      	ldr	r3, [r4, #0]
 8001e68:	602b      	str	r3, [r5, #0]
 8001e6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001e6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e70:	4630      	mov	r0, r6
 8001e72:	f7ff fdeb 	bl	8001a4c <IP_MPU6050>
 8001e76:	f107 0420 	add.w	r4, r7, #32
 8001e7a:	463d      	mov	r5, r7
 8001e7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e80:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e84:	e884 0003 	stmia.w	r4, {r0, r1}

	return IP_Bus;
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	461d      	mov	r5, r3
 8001e8c:	f107 0420 	add.w	r4, r7, #32
 8001e90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e98:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001e9c:	69f8      	ldr	r0, [r7, #28]
 8001e9e:	373c      	adds	r7, #60	; 0x3c
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001ea6:	b004      	add	sp, #16
 8001ea8:	4770      	bx	lr

08001eaa <PR_OutputProcessing>:

OP_Bus_t PR_OutputProcessing(CT_Bus_t CT_Bus){
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b088      	sub	sp, #32
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6178      	str	r0, [r7, #20]
 8001eb2:	f107 030c 	add.w	r3, r7, #12
 8001eb6:	e883 0006 	stmia.w	r3, {r1, r2}
	OP_Bus_t OP_Bus;

	OP_Bus.OP_HC05_Bus = OP_HC05(CT_Bus.CT_Log_Bus);
 8001eba:	4638      	mov	r0, r7
 8001ebc:	f107 030c 	add.w	r3, r7, #12
 8001ec0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001ec4:	f7ff fda9 	bl	8001a1a <OP_HC05>
 8001ec8:	f107 0318 	add.w	r3, r7, #24
 8001ecc:	463a      	mov	r2, r7
 8001ece:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ed2:	e883 0003 	stmia.w	r3, {r0, r1}

	return OP_Bus;
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	f107 0318 	add.w	r3, r7, #24
 8001ede:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ee2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001ee6:	6978      	ldr	r0, [r7, #20]
 8001ee8:	3720      	adds	r7, #32
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ef0:	b590      	push	{r4, r7, lr}
 8001ef2:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 8001ef6:	af2c      	add	r7, sp, #176	; 0xb0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ef8:	f000 fb48 	bl	800258c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001efc:	f000 f83c 	bl	8001f78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f00:	f000 f8fa 	bl	80020f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001f04:	f000 f8a0 	bl	8002048 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001f08:	f000 f8cc 	bl	80020a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Config_HAL_Bus_t Config_HAL_Bus = {hi2c1, huart2};
 8001f0c:	4a18      	ldr	r2, [pc, #96]	; (8001f70 <main+0x80>)
 8001f0e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f12:	4611      	mov	r1, r2
 8001f14:	2254      	movs	r2, #84	; 0x54
 8001f16:	4618      	mov	r0, r3
 8001f18:	f002 ff84 	bl	8004e24 <memcpy>
 8001f1c:	4a15      	ldr	r2, [pc, #84]	; (8001f74 <main+0x84>)
 8001f1e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001f22:	4611      	mov	r1, r2
 8001f24:	2244      	movs	r2, #68	; 0x44
 8001f26:	4618      	mov	r0, r3
 8001f28:	f002 ff7c 	bl	8004e24 <memcpy>

  Config_Bus_t Config_Bus;
  Config_Bus = App_Config(Config_HAL_Bus);
 8001f2c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001f30:	f5a3 74aa 	sub.w	r4, r3, #340	; 0x154
 8001f34:	4668      	mov	r0, sp
 8001f36:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f3a:	228c      	movs	r2, #140	; 0x8c
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f002 ff71 	bl	8004e24 <memcpy>
 8001f42:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f48:	4620      	mov	r0, r4
 8001f4a:	f7ff f807 	bl	8000f5c <App_Config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  App_Main(Config_Bus);
 8001f4e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001f52:	f5a3 74aa 	sub.w	r4, r3, #340	; 0x154
 8001f56:	4668      	mov	r0, sp
 8001f58:	f104 0310 	add.w	r3, r4, #16
 8001f5c:	22ac      	movs	r2, #172	; 0xac
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f002 ff60 	bl	8004e24 <memcpy>
 8001f64:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f68:	f7ff f838 	bl	8000fdc <App_Main>
 8001f6c:	e7ef      	b.n	8001f4e <main+0x5e>
 8001f6e:	bf00      	nop
 8001f70:	2000025c 	.word	0x2000025c
 8001f74:	200002b0 	.word	0x200002b0

08001f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b094      	sub	sp, #80	; 0x50
 8001f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f7e:	f107 0320 	add.w	r3, r7, #32
 8001f82:	2230      	movs	r2, #48	; 0x30
 8001f84:	2100      	movs	r1, #0
 8001f86:	4618      	mov	r0, r3
 8001f88:	f002 ff5a 	bl	8004e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f8c:	f107 030c 	add.w	r3, r7, #12
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	4b27      	ldr	r3, [pc, #156]	; (8002040 <SystemClock_Config+0xc8>)
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	4a26      	ldr	r2, [pc, #152]	; (8002040 <SystemClock_Config+0xc8>)
 8001fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001faa:	6413      	str	r3, [r2, #64]	; 0x40
 8001fac:	4b24      	ldr	r3, [pc, #144]	; (8002040 <SystemClock_Config+0xc8>)
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fb8:	2300      	movs	r3, #0
 8001fba:	607b      	str	r3, [r7, #4]
 8001fbc:	4b21      	ldr	r3, [pc, #132]	; (8002044 <SystemClock_Config+0xcc>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a20      	ldr	r2, [pc, #128]	; (8002044 <SystemClock_Config+0xcc>)
 8001fc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fc6:	6013      	str	r3, [r2, #0]
 8001fc8:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <SystemClock_Config+0xcc>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fd0:	607b      	str	r3, [r7, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fdc:	2310      	movs	r3, #16
 8001fde:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fe8:	2308      	movs	r3, #8
 8001fea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001fec:	2364      	movs	r3, #100	; 0x64
 8001fee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ff4:	2304      	movs	r3, #4
 8001ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ff8:	f107 0320 	add.w	r3, r7, #32
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f001 fecd 	bl	8003d9c <HAL_RCC_OscConfig>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002008:	f000 f8d6 	bl	80021b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800200c:	230f      	movs	r3, #15
 800200e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002010:	2302      	movs	r3, #2
 8002012:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800201c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002022:	f107 030c 	add.w	r3, r7, #12
 8002026:	2103      	movs	r1, #3
 8002028:	4618      	mov	r0, r3
 800202a:	f002 f92f 	bl	800428c <HAL_RCC_ClockConfig>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002034:	f000 f8c0 	bl	80021b8 <Error_Handler>
  }
}
 8002038:	bf00      	nop
 800203a:	3750      	adds	r7, #80	; 0x50
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40023800 	.word	0x40023800
 8002044:	40007000 	.word	0x40007000

08002048 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800204c:	4b12      	ldr	r3, [pc, #72]	; (8002098 <MX_I2C1_Init+0x50>)
 800204e:	4a13      	ldr	r2, [pc, #76]	; (800209c <MX_I2C1_Init+0x54>)
 8002050:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002052:	4b11      	ldr	r3, [pc, #68]	; (8002098 <MX_I2C1_Init+0x50>)
 8002054:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <MX_I2C1_Init+0x58>)
 8002056:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002058:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <MX_I2C1_Init+0x50>)
 800205a:	2200      	movs	r2, #0
 800205c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800205e:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <MX_I2C1_Init+0x50>)
 8002060:	2200      	movs	r2, #0
 8002062:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <MX_I2C1_Init+0x50>)
 8002066:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800206a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800206c:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <MX_I2C1_Init+0x50>)
 800206e:	2200      	movs	r2, #0
 8002070:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <MX_I2C1_Init+0x50>)
 8002074:	2200      	movs	r2, #0
 8002076:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002078:	4b07      	ldr	r3, [pc, #28]	; (8002098 <MX_I2C1_Init+0x50>)
 800207a:	2200      	movs	r2, #0
 800207c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <MX_I2C1_Init+0x50>)
 8002080:	2200      	movs	r2, #0
 8002082:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002084:	4804      	ldr	r0, [pc, #16]	; (8002098 <MX_I2C1_Init+0x50>)
 8002086:	f000 fd9b 	bl	8002bc0 <HAL_I2C_Init>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002090:	f000 f892 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}
 8002098:	2000025c 	.word	0x2000025c
 800209c:	40005400 	.word	0x40005400
 80020a0:	00061a80 	.word	0x00061a80

080020a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020aa:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <MX_USART2_UART_Init+0x50>)
 80020ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80020ae:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020b0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80020b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020be:	2200      	movs	r2, #0
 80020c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020c2:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 80020c8:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020ca:	2208      	movs	r2, #8
 80020cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ce:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020da:	4805      	ldr	r0, [pc, #20]	; (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020dc:	f002 fab6 	bl	800464c <HAL_UART_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020e6:	f000 f867 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	200002b0 	.word	0x200002b0
 80020f4:	40004400 	.word	0x40004400

080020f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08a      	sub	sp, #40	; 0x28
 80020fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fe:	f107 0314 	add.w	r3, r7, #20
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
 8002108:	609a      	str	r2, [r3, #8]
 800210a:	60da      	str	r2, [r3, #12]
 800210c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	4b27      	ldr	r3, [pc, #156]	; (80021b0 <MX_GPIO_Init+0xb8>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a26      	ldr	r2, [pc, #152]	; (80021b0 <MX_GPIO_Init+0xb8>)
 8002118:	f043 0304 	orr.w	r3, r3, #4
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <MX_GPIO_Init+0xb8>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	4b20      	ldr	r3, [pc, #128]	; (80021b0 <MX_GPIO_Init+0xb8>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a1f      	ldr	r2, [pc, #124]	; (80021b0 <MX_GPIO_Init+0xb8>)
 8002134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b1d      	ldr	r3, [pc, #116]	; (80021b0 <MX_GPIO_Init+0xb8>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <MX_GPIO_Init+0xb8>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a18      	ldr	r2, [pc, #96]	; (80021b0 <MX_GPIO_Init+0xb8>)
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b16      	ldr	r3, [pc, #88]	; (80021b0 <MX_GPIO_Init+0xb8>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	607b      	str	r3, [r7, #4]
 8002166:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <MX_GPIO_Init+0xb8>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	4a11      	ldr	r2, [pc, #68]	; (80021b0 <MX_GPIO_Init+0xb8>)
 800216c:	f043 0302 	orr.w	r3, r3, #2
 8002170:	6313      	str	r3, [r2, #48]	; 0x30
 8002172:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <MX_GPIO_Init+0xb8>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800217e:	2201      	movs	r2, #1
 8002180:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002184:	480b      	ldr	r0, [pc, #44]	; (80021b4 <MX_GPIO_Init+0xbc>)
 8002186:	f000 fd01 	bl	8002b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800218a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800218e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002190:	2311      	movs	r3, #17
 8002192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002198:	2300      	movs	r3, #0
 800219a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	4619      	mov	r1, r3
 80021a2:	4804      	ldr	r0, [pc, #16]	; (80021b4 <MX_GPIO_Init+0xbc>)
 80021a4:	f000 fb6e 	bl	8002884 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021a8:	bf00      	nop
 80021aa:	3728      	adds	r7, #40	; 0x28
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40020800 	.word	0x40020800

080021b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021bc:	b672      	cpsid	i
}
 80021be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021c0:	e7fe      	b.n	80021c0 <Error_Handler+0x8>
	...

080021c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	607b      	str	r3, [r7, #4]
 80021ce:	4b10      	ldr	r3, [pc, #64]	; (8002210 <HAL_MspInit+0x4c>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	4a0f      	ldr	r2, [pc, #60]	; (8002210 <HAL_MspInit+0x4c>)
 80021d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d8:	6453      	str	r3, [r2, #68]	; 0x44
 80021da:	4b0d      	ldr	r3, [pc, #52]	; (8002210 <HAL_MspInit+0x4c>)
 80021dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e2:	607b      	str	r3, [r7, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	603b      	str	r3, [r7, #0]
 80021ea:	4b09      	ldr	r3, [pc, #36]	; (8002210 <HAL_MspInit+0x4c>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	4a08      	ldr	r2, [pc, #32]	; (8002210 <HAL_MspInit+0x4c>)
 80021f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f4:	6413      	str	r3, [r2, #64]	; 0x40
 80021f6:	4b06      	ldr	r3, [pc, #24]	; (8002210 <HAL_MspInit+0x4c>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fe:	603b      	str	r3, [r7, #0]
 8002200:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40023800 	.word	0x40023800

08002214 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08a      	sub	sp, #40	; 0x28
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a19      	ldr	r2, [pc, #100]	; (8002298 <HAL_I2C_MspInit+0x84>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d12b      	bne.n	800228e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	4b18      	ldr	r3, [pc, #96]	; (800229c <HAL_I2C_MspInit+0x88>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a17      	ldr	r2, [pc, #92]	; (800229c <HAL_I2C_MspInit+0x88>)
 8002240:	f043 0302 	orr.w	r3, r3, #2
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b15      	ldr	r3, [pc, #84]	; (800229c <HAL_I2C_MspInit+0x88>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002252:	23c0      	movs	r3, #192	; 0xc0
 8002254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002256:	2312      	movs	r3, #18
 8002258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225e:	2303      	movs	r3, #3
 8002260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002262:	2304      	movs	r3, #4
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002266:	f107 0314 	add.w	r3, r7, #20
 800226a:	4619      	mov	r1, r3
 800226c:	480c      	ldr	r0, [pc, #48]	; (80022a0 <HAL_I2C_MspInit+0x8c>)
 800226e:	f000 fb09 	bl	8002884 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <HAL_I2C_MspInit+0x88>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	4a08      	ldr	r2, [pc, #32]	; (800229c <HAL_I2C_MspInit+0x88>)
 800227c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002280:	6413      	str	r3, [r2, #64]	; 0x40
 8002282:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_I2C_MspInit+0x88>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800228e:	bf00      	nop
 8002290:	3728      	adds	r7, #40	; 0x28
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40005400 	.word	0x40005400
 800229c:	40023800 	.word	0x40023800
 80022a0:	40020400 	.word	0x40020400

080022a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	f107 0314 	add.w	r3, r7, #20
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a19      	ldr	r2, [pc, #100]	; (8002328 <HAL_UART_MspInit+0x84>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d12b      	bne.n	800231e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	4b18      	ldr	r3, [pc, #96]	; (800232c <HAL_UART_MspInit+0x88>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	4a17      	ldr	r2, [pc, #92]	; (800232c <HAL_UART_MspInit+0x88>)
 80022d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d4:	6413      	str	r3, [r2, #64]	; 0x40
 80022d6:	4b15      	ldr	r3, [pc, #84]	; (800232c <HAL_UART_MspInit+0x88>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	4b11      	ldr	r3, [pc, #68]	; (800232c <HAL_UART_MspInit+0x88>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4a10      	ldr	r2, [pc, #64]	; (800232c <HAL_UART_MspInit+0x88>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	6313      	str	r3, [r2, #48]	; 0x30
 80022f2:	4b0e      	ldr	r3, [pc, #56]	; (800232c <HAL_UART_MspInit+0x88>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022fe:	230c      	movs	r3, #12
 8002300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230a:	2303      	movs	r3, #3
 800230c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800230e:	2307      	movs	r3, #7
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002312:	f107 0314 	add.w	r3, r7, #20
 8002316:	4619      	mov	r1, r3
 8002318:	4805      	ldr	r0, [pc, #20]	; (8002330 <HAL_UART_MspInit+0x8c>)
 800231a:	f000 fab3 	bl	8002884 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800231e:	bf00      	nop
 8002320:	3728      	adds	r7, #40	; 0x28
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40004400 	.word	0x40004400
 800232c:	40023800 	.word	0x40023800
 8002330:	40020000 	.word	0x40020000

08002334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002338:	e7fe      	b.n	8002338 <NMI_Handler+0x4>

0800233a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800233e:	e7fe      	b.n	800233e <HardFault_Handler+0x4>

08002340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002344:	e7fe      	b.n	8002344 <MemManage_Handler+0x4>

08002346 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800234a:	e7fe      	b.n	800234a <BusFault_Handler+0x4>

0800234c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002350:	e7fe      	b.n	8002350 <UsageFault_Handler+0x4>

08002352 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002380:	f000 f956 	bl	8002630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	bd80      	pop	{r7, pc}

08002388 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return 1;
 800238c:	2301      	movs	r3, #1
}
 800238e:	4618      	mov	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <_kill>:

int _kill(int pid, int sig)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023a2:	f002 fd15 	bl	8004dd0 <__errno>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2216      	movs	r2, #22
 80023aa:	601a      	str	r2, [r3, #0]
  return -1;
 80023ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <_exit>:

void _exit (int status)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff ffe7 	bl	8002398 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023ca:	e7fe      	b.n	80023ca <_exit+0x12>

080023cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	e00a      	b.n	80023f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023de:	f3af 8000 	nop.w
 80023e2:	4601      	mov	r1, r0
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	60ba      	str	r2, [r7, #8]
 80023ea:	b2ca      	uxtb	r2, r1
 80023ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	3301      	adds	r3, #1
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	dbf0      	blt.n	80023de <_read+0x12>
  }

  return len;
 80023fc:	687b      	ldr	r3, [r7, #4]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b086      	sub	sp, #24
 800240a:	af00      	add	r7, sp, #0
 800240c:	60f8      	str	r0, [r7, #12]
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	e009      	b.n	800242c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	60ba      	str	r2, [r7, #8]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	3301      	adds	r3, #1
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	429a      	cmp	r2, r3
 8002432:	dbf1      	blt.n	8002418 <_write+0x12>
  }
  return len;
 8002434:	687b      	ldr	r3, [r7, #4]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <_close>:

int _close(int file)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002466:	605a      	str	r2, [r3, #4]
  return 0;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <_isatty>:

int _isatty(int file)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800247e:	2301      	movs	r3, #1
}
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024b0:	4a14      	ldr	r2, [pc, #80]	; (8002504 <_sbrk+0x5c>)
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <_sbrk+0x60>)
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024bc:	4b13      	ldr	r3, [pc, #76]	; (800250c <_sbrk+0x64>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d102      	bne.n	80024ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <_sbrk+0x64>)
 80024c6:	4a12      	ldr	r2, [pc, #72]	; (8002510 <_sbrk+0x68>)
 80024c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ca:	4b10      	ldr	r3, [pc, #64]	; (800250c <_sbrk+0x64>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d207      	bcs.n	80024e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024d8:	f002 fc7a 	bl	8004dd0 <__errno>
 80024dc:	4603      	mov	r3, r0
 80024de:	220c      	movs	r2, #12
 80024e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024e6:	e009      	b.n	80024fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <_sbrk+0x64>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ee:	4b07      	ldr	r3, [pc, #28]	; (800250c <_sbrk+0x64>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	4a05      	ldr	r2, [pc, #20]	; (800250c <_sbrk+0x64>)
 80024f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024fa:	68fb      	ldr	r3, [r7, #12]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20020000 	.word	0x20020000
 8002508:	00000400 	.word	0x00000400
 800250c:	200002f4 	.word	0x200002f4
 8002510:	20000310 	.word	0x20000310

08002514 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <SystemInit+0x20>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	4a05      	ldr	r2, [pc, #20]	; (8002534 <SystemInit+0x20>)
 8002520:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002524:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002538:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002570 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800253c:	480d      	ldr	r0, [pc, #52]	; (8002574 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800253e:	490e      	ldr	r1, [pc, #56]	; (8002578 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002540:	4a0e      	ldr	r2, [pc, #56]	; (800257c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002544:	e002      	b.n	800254c <LoopCopyDataInit>

08002546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800254a:	3304      	adds	r3, #4

0800254c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800254c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800254e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002550:	d3f9      	bcc.n	8002546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002552:	4a0b      	ldr	r2, [pc, #44]	; (8002580 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002554:	4c0b      	ldr	r4, [pc, #44]	; (8002584 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002558:	e001      	b.n	800255e <LoopFillZerobss>

0800255a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800255a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800255c:	3204      	adds	r2, #4

0800255e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800255e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002560:	d3fb      	bcc.n	800255a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002562:	f7ff ffd7 	bl	8002514 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002566:	f002 fc39 	bl	8004ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800256a:	f7ff fcc1 	bl	8001ef0 <main>
  bx  lr    
 800256e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002570:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002578:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800257c:	08008054 	.word	0x08008054
  ldr r2, =_sbss
 8002580:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002584:	2000030c 	.word	0x2000030c

08002588 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002588:	e7fe      	b.n	8002588 <ADC_IRQHandler>
	...

0800258c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002590:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <HAL_Init+0x40>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a0d      	ldr	r2, [pc, #52]	; (80025cc <HAL_Init+0x40>)
 8002596:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800259a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <HAL_Init+0x40>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a0a      	ldr	r2, [pc, #40]	; (80025cc <HAL_Init+0x40>)
 80025a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025a8:	4b08      	ldr	r3, [pc, #32]	; (80025cc <HAL_Init+0x40>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a07      	ldr	r2, [pc, #28]	; (80025cc <HAL_Init+0x40>)
 80025ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025b4:	2003      	movs	r0, #3
 80025b6:	f000 f931 	bl	800281c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ba:	200f      	movs	r0, #15
 80025bc:	f000 f808 	bl	80025d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025c0:	f7ff fe00 	bl	80021c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40023c00 	.word	0x40023c00

080025d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025d8:	4b12      	ldr	r3, [pc, #72]	; (8002624 <HAL_InitTick+0x54>)
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	4b12      	ldr	r3, [pc, #72]	; (8002628 <HAL_InitTick+0x58>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	4619      	mov	r1, r3
 80025e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 f93b 	bl	800286a <HAL_SYSTICK_Config>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e00e      	b.n	800261c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b0f      	cmp	r3, #15
 8002602:	d80a      	bhi.n	800261a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002604:	2200      	movs	r2, #0
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800260c:	f000 f911 	bl	8002832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002610:	4a06      	ldr	r2, [pc, #24]	; (800262c <HAL_InitTick+0x5c>)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	e000      	b.n	800261c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
}
 800261c:	4618      	mov	r0, r3
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20000004 	.word	0x20000004
 8002628:	2000000c 	.word	0x2000000c
 800262c:	20000008 	.word	0x20000008

08002630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_IncTick+0x20>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	4b06      	ldr	r3, [pc, #24]	; (8002654 <HAL_IncTick+0x24>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4413      	add	r3, r2
 8002640:	4a04      	ldr	r2, [pc, #16]	; (8002654 <HAL_IncTick+0x24>)
 8002642:	6013      	str	r3, [r2, #0]
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	2000000c 	.word	0x2000000c
 8002654:	200002f8 	.word	0x200002f8

08002658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  return uwTick;
 800265c:	4b03      	ldr	r3, [pc, #12]	; (800266c <HAL_GetTick+0x14>)
 800265e:	681b      	ldr	r3, [r3, #0]
}
 8002660:	4618      	mov	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	200002f8 	.word	0x200002f8

08002670 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002678:	f7ff ffee 	bl	8002658 <HAL_GetTick>
 800267c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002688:	d005      	beq.n	8002696 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800268a:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <HAL_Delay+0x44>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	461a      	mov	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4413      	add	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002696:	bf00      	nop
 8002698:	f7ff ffde 	bl	8002658 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d8f7      	bhi.n	8002698 <HAL_Delay+0x28>
  {
  }
}
 80026a8:	bf00      	nop
 80026aa:	bf00      	nop
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	2000000c 	.word	0x2000000c

080026b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026c8:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <__NVIC_SetPriorityGrouping+0x44>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026d4:	4013      	ands	r3, r2
 80026d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ea:	4a04      	ldr	r2, [pc, #16]	; (80026fc <__NVIC_SetPriorityGrouping+0x44>)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	60d3      	str	r3, [r2, #12]
}
 80026f0:	bf00      	nop
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002704:	4b04      	ldr	r3, [pc, #16]	; (8002718 <__NVIC_GetPriorityGrouping+0x18>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	0a1b      	lsrs	r3, r3, #8
 800270a:	f003 0307 	and.w	r3, r3, #7
}
 800270e:	4618      	mov	r0, r3
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	6039      	str	r1, [r7, #0]
 8002726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272c:	2b00      	cmp	r3, #0
 800272e:	db0a      	blt.n	8002746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	b2da      	uxtb	r2, r3
 8002734:	490c      	ldr	r1, [pc, #48]	; (8002768 <__NVIC_SetPriority+0x4c>)
 8002736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273a:	0112      	lsls	r2, r2, #4
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	440b      	add	r3, r1
 8002740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002744:	e00a      	b.n	800275c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	b2da      	uxtb	r2, r3
 800274a:	4908      	ldr	r1, [pc, #32]	; (800276c <__NVIC_SetPriority+0x50>)
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	3b04      	subs	r3, #4
 8002754:	0112      	lsls	r2, r2, #4
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	440b      	add	r3, r1
 800275a:	761a      	strb	r2, [r3, #24]
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	e000e100 	.word	0xe000e100
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002770:	b480      	push	{r7}
 8002772:	b089      	sub	sp, #36	; 0x24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f1c3 0307 	rsb	r3, r3, #7
 800278a:	2b04      	cmp	r3, #4
 800278c:	bf28      	it	cs
 800278e:	2304      	movcs	r3, #4
 8002790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3304      	adds	r3, #4
 8002796:	2b06      	cmp	r3, #6
 8002798:	d902      	bls.n	80027a0 <NVIC_EncodePriority+0x30>
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	3b03      	subs	r3, #3
 800279e:	e000      	b.n	80027a2 <NVIC_EncodePriority+0x32>
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43da      	mvns	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	401a      	ands	r2, r3
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	fa01 f303 	lsl.w	r3, r1, r3
 80027c2:	43d9      	mvns	r1, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c8:	4313      	orrs	r3, r2
         );
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3724      	adds	r7, #36	; 0x24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
	...

080027d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027e8:	d301      	bcc.n	80027ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ea:	2301      	movs	r3, #1
 80027ec:	e00f      	b.n	800280e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ee:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <SysTick_Config+0x40>)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027f6:	210f      	movs	r1, #15
 80027f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027fc:	f7ff ff8e 	bl	800271c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <SysTick_Config+0x40>)
 8002802:	2200      	movs	r2, #0
 8002804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002806:	4b04      	ldr	r3, [pc, #16]	; (8002818 <SysTick_Config+0x40>)
 8002808:	2207      	movs	r2, #7
 800280a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	e000e010 	.word	0xe000e010

0800281c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7ff ff47 	bl	80026b8 <__NVIC_SetPriorityGrouping>
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002832:	b580      	push	{r7, lr}
 8002834:	b086      	sub	sp, #24
 8002836:	af00      	add	r7, sp, #0
 8002838:	4603      	mov	r3, r0
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
 800283e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002844:	f7ff ff5c 	bl	8002700 <__NVIC_GetPriorityGrouping>
 8002848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	68b9      	ldr	r1, [r7, #8]
 800284e:	6978      	ldr	r0, [r7, #20]
 8002850:	f7ff ff8e 	bl	8002770 <NVIC_EncodePriority>
 8002854:	4602      	mov	r2, r0
 8002856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800285a:	4611      	mov	r1, r2
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff ff5d 	bl	800271c <__NVIC_SetPriority>
}
 8002862:	bf00      	nop
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff ffb0 	bl	80027d8 <SysTick_Config>
 8002878:	4603      	mov	r3, r0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002884:	b480      	push	{r7}
 8002886:	b089      	sub	sp, #36	; 0x24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002896:	2300      	movs	r3, #0
 8002898:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
 800289e:	e159      	b.n	8002b54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028a0:	2201      	movs	r2, #1
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	f040 8148 	bne.w	8002b4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d005      	beq.n	80028d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d130      	bne.n	8002938 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	2203      	movs	r2, #3
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800290c:	2201      	movs	r2, #1
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	091b      	lsrs	r3, r3, #4
 8002922:	f003 0201 	and.w	r2, r3, #1
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	2b03      	cmp	r3, #3
 8002942:	d017      	beq.n	8002974 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	2203      	movs	r2, #3
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d123      	bne.n	80029c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	08da      	lsrs	r2, r3, #3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3208      	adds	r2, #8
 8002988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800298c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	220f      	movs	r2, #15
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4013      	ands	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	08da      	lsrs	r2, r3, #3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3208      	adds	r2, #8
 80029c2:	69b9      	ldr	r1, [r7, #24]
 80029c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	2203      	movs	r2, #3
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 0203 	and.w	r2, r3, #3
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 80a2 	beq.w	8002b4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	4b57      	ldr	r3, [pc, #348]	; (8002b6c <HAL_GPIO_Init+0x2e8>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	4a56      	ldr	r2, [pc, #344]	; (8002b6c <HAL_GPIO_Init+0x2e8>)
 8002a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a18:	6453      	str	r3, [r2, #68]	; 0x44
 8002a1a:	4b54      	ldr	r3, [pc, #336]	; (8002b6c <HAL_GPIO_Init+0x2e8>)
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a26:	4a52      	ldr	r2, [pc, #328]	; (8002b70 <HAL_GPIO_Init+0x2ec>)
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	089b      	lsrs	r3, r3, #2
 8002a2c:	3302      	adds	r3, #2
 8002a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	220f      	movs	r2, #15
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	43db      	mvns	r3, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4013      	ands	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a49      	ldr	r2, [pc, #292]	; (8002b74 <HAL_GPIO_Init+0x2f0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d019      	beq.n	8002a86 <HAL_GPIO_Init+0x202>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a48      	ldr	r2, [pc, #288]	; (8002b78 <HAL_GPIO_Init+0x2f4>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d013      	beq.n	8002a82 <HAL_GPIO_Init+0x1fe>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a47      	ldr	r2, [pc, #284]	; (8002b7c <HAL_GPIO_Init+0x2f8>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d00d      	beq.n	8002a7e <HAL_GPIO_Init+0x1fa>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a46      	ldr	r2, [pc, #280]	; (8002b80 <HAL_GPIO_Init+0x2fc>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d007      	beq.n	8002a7a <HAL_GPIO_Init+0x1f6>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a45      	ldr	r2, [pc, #276]	; (8002b84 <HAL_GPIO_Init+0x300>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d101      	bne.n	8002a76 <HAL_GPIO_Init+0x1f2>
 8002a72:	2304      	movs	r3, #4
 8002a74:	e008      	b.n	8002a88 <HAL_GPIO_Init+0x204>
 8002a76:	2307      	movs	r3, #7
 8002a78:	e006      	b.n	8002a88 <HAL_GPIO_Init+0x204>
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e004      	b.n	8002a88 <HAL_GPIO_Init+0x204>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e002      	b.n	8002a88 <HAL_GPIO_Init+0x204>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <HAL_GPIO_Init+0x204>
 8002a86:	2300      	movs	r3, #0
 8002a88:	69fa      	ldr	r2, [r7, #28]
 8002a8a:	f002 0203 	and.w	r2, r2, #3
 8002a8e:	0092      	lsls	r2, r2, #2
 8002a90:	4093      	lsls	r3, r2
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a98:	4935      	ldr	r1, [pc, #212]	; (8002b70 <HAL_GPIO_Init+0x2ec>)
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	089b      	lsrs	r3, r3, #2
 8002a9e:	3302      	adds	r3, #2
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aa6:	4b38      	ldr	r3, [pc, #224]	; (8002b88 <HAL_GPIO_Init+0x304>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aca:	4a2f      	ldr	r2, [pc, #188]	; (8002b88 <HAL_GPIO_Init+0x304>)
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ad0:	4b2d      	ldr	r3, [pc, #180]	; (8002b88 <HAL_GPIO_Init+0x304>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002af4:	4a24      	ldr	r2, [pc, #144]	; (8002b88 <HAL_GPIO_Init+0x304>)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002afa:	4b23      	ldr	r3, [pc, #140]	; (8002b88 <HAL_GPIO_Init+0x304>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b1e:	4a1a      	ldr	r2, [pc, #104]	; (8002b88 <HAL_GPIO_Init+0x304>)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b24:	4b18      	ldr	r3, [pc, #96]	; (8002b88 <HAL_GPIO_Init+0x304>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b48:	4a0f      	ldr	r2, [pc, #60]	; (8002b88 <HAL_GPIO_Init+0x304>)
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3301      	adds	r3, #1
 8002b52:	61fb      	str	r3, [r7, #28]
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	2b0f      	cmp	r3, #15
 8002b58:	f67f aea2 	bls.w	80028a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	bf00      	nop
 8002b60:	3724      	adds	r7, #36	; 0x24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40013800 	.word	0x40013800
 8002b74:	40020000 	.word	0x40020000
 8002b78:	40020400 	.word	0x40020400
 8002b7c:	40020800 	.word	0x40020800
 8002b80:	40020c00 	.word	0x40020c00
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40013c00 	.word	0x40013c00

08002b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	807b      	strh	r3, [r7, #2]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b9c:	787b      	ldrb	r3, [r7, #1]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ba2:	887a      	ldrh	r2, [r7, #2]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ba8:	e003      	b.n	8002bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002baa:	887b      	ldrh	r3, [r7, #2]
 8002bac:	041a      	lsls	r2, r3, #16
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	619a      	str	r2, [r3, #24]
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e12b      	b.n	8002e2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff fb14 	bl	8002214 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2224      	movs	r2, #36	; 0x24
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0201 	bic.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c24:	f001 fcea 	bl	80045fc <HAL_RCC_GetPCLK1Freq>
 8002c28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	4a81      	ldr	r2, [pc, #516]	; (8002e34 <HAL_I2C_Init+0x274>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d807      	bhi.n	8002c44 <HAL_I2C_Init+0x84>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4a80      	ldr	r2, [pc, #512]	; (8002e38 <HAL_I2C_Init+0x278>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	bf94      	ite	ls
 8002c3c:	2301      	movls	r3, #1
 8002c3e:	2300      	movhi	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	e006      	b.n	8002c52 <HAL_I2C_Init+0x92>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4a7d      	ldr	r2, [pc, #500]	; (8002e3c <HAL_I2C_Init+0x27c>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	bf94      	ite	ls
 8002c4c:	2301      	movls	r3, #1
 8002c4e:	2300      	movhi	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e0e7      	b.n	8002e2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4a78      	ldr	r2, [pc, #480]	; (8002e40 <HAL_I2C_Init+0x280>)
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	0c9b      	lsrs	r3, r3, #18
 8002c64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	4a6a      	ldr	r2, [pc, #424]	; (8002e34 <HAL_I2C_Init+0x274>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d802      	bhi.n	8002c94 <HAL_I2C_Init+0xd4>
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	3301      	adds	r3, #1
 8002c92:	e009      	b.n	8002ca8 <HAL_I2C_Init+0xe8>
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c9a:	fb02 f303 	mul.w	r3, r2, r3
 8002c9e:	4a69      	ldr	r2, [pc, #420]	; (8002e44 <HAL_I2C_Init+0x284>)
 8002ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca4:	099b      	lsrs	r3, r3, #6
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6812      	ldr	r2, [r2, #0]
 8002cac:	430b      	orrs	r3, r1
 8002cae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	495c      	ldr	r1, [pc, #368]	; (8002e34 <HAL_I2C_Init+0x274>)
 8002cc4:	428b      	cmp	r3, r1
 8002cc6:	d819      	bhi.n	8002cfc <HAL_I2C_Init+0x13c>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	1e59      	subs	r1, r3, #1
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cd6:	1c59      	adds	r1, r3, #1
 8002cd8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cdc:	400b      	ands	r3, r1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00a      	beq.n	8002cf8 <HAL_I2C_Init+0x138>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	1e59      	subs	r1, r3, #1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf6:	e051      	b.n	8002d9c <HAL_I2C_Init+0x1dc>
 8002cf8:	2304      	movs	r3, #4
 8002cfa:	e04f      	b.n	8002d9c <HAL_I2C_Init+0x1dc>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d111      	bne.n	8002d28 <HAL_I2C_Init+0x168>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	1e58      	subs	r0, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6859      	ldr	r1, [r3, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	440b      	add	r3, r1
 8002d12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d16:	3301      	adds	r3, #1
 8002d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	bf0c      	ite	eq
 8002d20:	2301      	moveq	r3, #1
 8002d22:	2300      	movne	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	e012      	b.n	8002d4e <HAL_I2C_Init+0x18e>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	1e58      	subs	r0, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6859      	ldr	r1, [r3, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	0099      	lsls	r1, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d3e:	3301      	adds	r3, #1
 8002d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	bf0c      	ite	eq
 8002d48:	2301      	moveq	r3, #1
 8002d4a:	2300      	movne	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <HAL_I2C_Init+0x196>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e022      	b.n	8002d9c <HAL_I2C_Init+0x1dc>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10e      	bne.n	8002d7c <HAL_I2C_Init+0x1bc>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	1e58      	subs	r0, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6859      	ldr	r1, [r3, #4]
 8002d66:	460b      	mov	r3, r1
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	440b      	add	r3, r1
 8002d6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d70:	3301      	adds	r3, #1
 8002d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d7a:	e00f      	b.n	8002d9c <HAL_I2C_Init+0x1dc>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	1e58      	subs	r0, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6859      	ldr	r1, [r3, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	0099      	lsls	r1, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d92:	3301      	adds	r3, #1
 8002d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	6809      	ldr	r1, [r1, #0]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69da      	ldr	r2, [r3, #28]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6911      	ldr	r1, [r2, #16]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	68d2      	ldr	r2, [r2, #12]
 8002dd6:	4311      	orrs	r1, r2
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6812      	ldr	r2, [r2, #0]
 8002ddc:	430b      	orrs	r3, r1
 8002dde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695a      	ldr	r2, [r3, #20]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2220      	movs	r2, #32
 8002e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	000186a0 	.word	0x000186a0
 8002e38:	001e847f 	.word	0x001e847f
 8002e3c:	003d08ff 	.word	0x003d08ff
 8002e40:	431bde83 	.word	0x431bde83
 8002e44:	10624dd3 	.word	0x10624dd3

08002e48 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b088      	sub	sp, #32
 8002e4c:	af02      	add	r7, sp, #8
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	4608      	mov	r0, r1
 8002e52:	4611      	mov	r1, r2
 8002e54:	461a      	mov	r2, r3
 8002e56:	4603      	mov	r3, r0
 8002e58:	817b      	strh	r3, [r7, #10]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	813b      	strh	r3, [r7, #8]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e62:	f7ff fbf9 	bl	8002658 <HAL_GetTick>
 8002e66:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b20      	cmp	r3, #32
 8002e72:	f040 80d9 	bne.w	8003028 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	2319      	movs	r3, #25
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	496d      	ldr	r1, [pc, #436]	; (8003034 <HAL_I2C_Mem_Write+0x1ec>)
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 fdad 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e0cc      	b.n	800302a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <HAL_I2C_Mem_Write+0x56>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e0c5      	b.n	800302a <HAL_I2C_Mem_Write+0x1e2>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d007      	beq.n	8002ec4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0201 	orr.w	r2, r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ed2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2221      	movs	r2, #33	; 0x21
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2240      	movs	r2, #64	; 0x40
 8002ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6a3a      	ldr	r2, [r7, #32]
 8002eee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4a4d      	ldr	r2, [pc, #308]	; (8003038 <HAL_I2C_Mem_Write+0x1f0>)
 8002f04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f06:	88f8      	ldrh	r0, [r7, #6]
 8002f08:	893a      	ldrh	r2, [r7, #8]
 8002f0a:	8979      	ldrh	r1, [r7, #10]
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	9301      	str	r3, [sp, #4]
 8002f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	4603      	mov	r3, r0
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 fbe4 	bl	80036e4 <I2C_RequestMemoryWrite>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d052      	beq.n	8002fc8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e081      	b.n	800302a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 fe2e 	bl	8003b8c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00d      	beq.n	8002f52 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d107      	bne.n	8002f4e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e06b      	b.n	800302a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	781a      	ldrb	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d11b      	bne.n	8002fc8 <HAL_I2C_Mem_Write+0x180>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d017      	beq.n	8002fc8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	781a      	ldrb	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1aa      	bne.n	8002f26 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f000 fe1a 	bl	8003c0e <I2C_WaitOnBTFFlagUntilTimeout>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00d      	beq.n	8002ffc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d107      	bne.n	8002ff8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e016      	b.n	800302a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800300a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	e000      	b.n	800302a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003028:	2302      	movs	r3, #2
  }
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	00100002 	.word	0x00100002
 8003038:	ffff0000 	.word	0xffff0000

0800303c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08c      	sub	sp, #48	; 0x30
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	4608      	mov	r0, r1
 8003046:	4611      	mov	r1, r2
 8003048:	461a      	mov	r2, r3
 800304a:	4603      	mov	r3, r0
 800304c:	817b      	strh	r3, [r7, #10]
 800304e:	460b      	mov	r3, r1
 8003050:	813b      	strh	r3, [r7, #8]
 8003052:	4613      	mov	r3, r2
 8003054:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003056:	f7ff faff 	bl	8002658 <HAL_GetTick>
 800305a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b20      	cmp	r3, #32
 8003066:	f040 8208 	bne.w	800347a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	2319      	movs	r3, #25
 8003070:	2201      	movs	r2, #1
 8003072:	497b      	ldr	r1, [pc, #492]	; (8003260 <HAL_I2C_Mem_Read+0x224>)
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 fcb3 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003080:	2302      	movs	r3, #2
 8003082:	e1fb      	b.n	800347c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_I2C_Mem_Read+0x56>
 800308e:	2302      	movs	r3, #2
 8003090:	e1f4      	b.n	800347c <HAL_I2C_Mem_Read+0x440>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d007      	beq.n	80030b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0201 	orr.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2222      	movs	r2, #34	; 0x22
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2240      	movs	r2, #64	; 0x40
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80030e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4a5b      	ldr	r2, [pc, #364]	; (8003264 <HAL_I2C_Mem_Read+0x228>)
 80030f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030fa:	88f8      	ldrh	r0, [r7, #6]
 80030fc:	893a      	ldrh	r2, [r7, #8]
 80030fe:	8979      	ldrh	r1, [r7, #10]
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	9301      	str	r3, [sp, #4]
 8003104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	4603      	mov	r3, r0
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 fb80 	bl	8003810 <I2C_RequestMemoryRead>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e1b0      	b.n	800347c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311e:	2b00      	cmp	r3, #0
 8003120:	d113      	bne.n	800314a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003122:	2300      	movs	r3, #0
 8003124:	623b      	str	r3, [r7, #32]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	623b      	str	r3, [r7, #32]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	623b      	str	r3, [r7, #32]
 8003136:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	e184      	b.n	8003454 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314e:	2b01      	cmp	r3, #1
 8003150:	d11b      	bne.n	800318a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003160:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003162:	2300      	movs	r3, #0
 8003164:	61fb      	str	r3, [r7, #28]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	61fb      	str	r3, [r7, #28]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	61fb      	str	r3, [r7, #28]
 8003176:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	e164      	b.n	8003454 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318e:	2b02      	cmp	r3, #2
 8003190:	d11b      	bne.n	80031ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b2:	2300      	movs	r3, #0
 80031b4:	61bb      	str	r3, [r7, #24]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	61bb      	str	r3, [r7, #24]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	61bb      	str	r3, [r7, #24]
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	e144      	b.n	8003454 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	617b      	str	r3, [r7, #20]
 80031de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80031e0:	e138      	b.n	8003454 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	f200 80f1 	bhi.w	80033ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d123      	bne.n	800323c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 fd49 	bl	8003c90 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e139      	b.n	800347c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691a      	ldr	r2, [r3, #16]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003224:	3b01      	subs	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003230:	b29b      	uxth	r3, r3
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	855a      	strh	r2, [r3, #42]	; 0x2a
 800323a:	e10b      	b.n	8003454 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003240:	2b02      	cmp	r3, #2
 8003242:	d14e      	bne.n	80032e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324a:	2200      	movs	r2, #0
 800324c:	4906      	ldr	r1, [pc, #24]	; (8003268 <HAL_I2C_Mem_Read+0x22c>)
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 fbc6 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d008      	beq.n	800326c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e10e      	b.n	800347c <HAL_I2C_Mem_Read+0x440>
 800325e:	bf00      	nop
 8003260:	00100002 	.word	0x00100002
 8003264:	ffff0000 	.word	0xffff0000
 8003268:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800327a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691a      	ldr	r2, [r3, #16]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	691a      	ldr	r2, [r3, #16]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	3b01      	subs	r3, #1
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032e0:	e0b8      	b.n	8003454 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e8:	2200      	movs	r2, #0
 80032ea:	4966      	ldr	r1, [pc, #408]	; (8003484 <HAL_I2C_Mem_Read+0x448>)
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 fb77 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0bf      	b.n	800347c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800330a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	691a      	ldr	r2, [r3, #16]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	1c5a      	adds	r2, r3, #1
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003334:	b29b      	uxth	r3, r3
 8003336:	3b01      	subs	r3, #1
 8003338:	b29a      	uxth	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003344:	2200      	movs	r2, #0
 8003346:	494f      	ldr	r1, [pc, #316]	; (8003484 <HAL_I2C_Mem_Read+0x448>)
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 fb49 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e091      	b.n	800347c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003366:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691a      	ldr	r2, [r3, #16]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	1c5a      	adds	r2, r3, #1
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003390:	b29b      	uxth	r3, r3
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	691a      	ldr	r2, [r3, #16]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033cc:	e042      	b.n	8003454 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 fc5c 	bl	8003c90 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e04c      	b.n	800347c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	1c5a      	adds	r2, r3, #1
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fe:	3b01      	subs	r3, #1
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340a:	b29b      	uxth	r3, r3
 800340c:	3b01      	subs	r3, #1
 800340e:	b29a      	uxth	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f003 0304 	and.w	r3, r3, #4
 800341e:	2b04      	cmp	r3, #4
 8003420:	d118      	bne.n	8003454 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	b2d2      	uxtb	r2, r2
 800342e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	1c5a      	adds	r2, r3, #1
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343e:	3b01      	subs	r3, #1
 8003440:	b29a      	uxth	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344a:	b29b      	uxth	r3, r3
 800344c:	3b01      	subs	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003458:	2b00      	cmp	r3, #0
 800345a:	f47f aec2 	bne.w	80031e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2220      	movs	r2, #32
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	e000      	b.n	800347c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800347a:	2302      	movs	r3, #2
  }
}
 800347c:	4618      	mov	r0, r3
 800347e:	3728      	adds	r7, #40	; 0x28
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	00010004 	.word	0x00010004

08003488 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08a      	sub	sp, #40	; 0x28
 800348c:	af02      	add	r7, sp, #8
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	607a      	str	r2, [r7, #4]
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	460b      	mov	r3, r1
 8003496:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003498:	f7ff f8de 	bl	8002658 <HAL_GetTick>
 800349c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800349e:	2300      	movs	r3, #0
 80034a0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b20      	cmp	r3, #32
 80034ac:	f040 8111 	bne.w	80036d2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	2319      	movs	r3, #25
 80034b6:	2201      	movs	r2, #1
 80034b8:	4988      	ldr	r1, [pc, #544]	; (80036dc <HAL_I2C_IsDeviceReady+0x254>)
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 fa90 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80034c6:	2302      	movs	r3, #2
 80034c8:	e104      	b.n	80036d4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_I2C_IsDeviceReady+0x50>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e0fd      	b.n	80036d4 <HAL_I2C_IsDeviceReady+0x24c>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d007      	beq.n	80034fe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f042 0201 	orr.w	r2, r2, #1
 80034fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800350c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2224      	movs	r2, #36	; 0x24
 8003512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4a70      	ldr	r2, [pc, #448]	; (80036e0 <HAL_I2C_IsDeviceReady+0x258>)
 8003520:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003530:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2200      	movs	r2, #0
 800353a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 fa4e 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00d      	beq.n	8003566 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003558:	d103      	bne.n	8003562 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003560:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e0b6      	b.n	80036d4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003566:	897b      	ldrh	r3, [r7, #10]
 8003568:	b2db      	uxtb	r3, r3
 800356a:	461a      	mov	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003574:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003576:	f7ff f86f 	bl	8002658 <HAL_GetTick>
 800357a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b02      	cmp	r3, #2
 8003588:	bf0c      	ite	eq
 800358a:	2301      	moveq	r3, #1
 800358c:	2300      	movne	r3, #0
 800358e:	b2db      	uxtb	r3, r3
 8003590:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a0:	bf0c      	ite	eq
 80035a2:	2301      	moveq	r3, #1
 80035a4:	2300      	movne	r3, #0
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80035aa:	e025      	b.n	80035f8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035ac:	f7ff f854 	bl	8002658 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d302      	bcc.n	80035c2 <HAL_I2C_IsDeviceReady+0x13a>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d103      	bne.n	80035ca <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	22a0      	movs	r2, #160	; 0xa0
 80035c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	bf0c      	ite	eq
 80035d8:	2301      	moveq	r3, #1
 80035da:	2300      	movne	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ee:	bf0c      	ite	eq
 80035f0:	2301      	moveq	r3, #1
 80035f2:	2300      	movne	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2ba0      	cmp	r3, #160	; 0xa0
 8003602:	d005      	beq.n	8003610 <HAL_I2C_IsDeviceReady+0x188>
 8003604:	7dfb      	ldrb	r3, [r7, #23]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d102      	bne.n	8003610 <HAL_I2C_IsDeviceReady+0x188>
 800360a:	7dbb      	ldrb	r3, [r7, #22]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0cd      	beq.n	80035ac <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b02      	cmp	r3, #2
 8003624:	d129      	bne.n	800367a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003634:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003636:	2300      	movs	r3, #0
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	613b      	str	r3, [r7, #16]
 800364a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	2319      	movs	r3, #25
 8003652:	2201      	movs	r2, #1
 8003654:	4921      	ldr	r1, [pc, #132]	; (80036dc <HAL_I2C_IsDeviceReady+0x254>)
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 f9c2 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e036      	b.n	80036d4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	e02c      	b.n	80036d4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003688:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003692:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	2319      	movs	r3, #25
 800369a:	2201      	movs	r2, #1
 800369c:	490f      	ldr	r1, [pc, #60]	; (80036dc <HAL_I2C_IsDeviceReady+0x254>)
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f99e 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e012      	b.n	80036d4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	3301      	adds	r3, #1
 80036b2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	f4ff af32 	bcc.w	8003522 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80036d2:	2302      	movs	r3, #2
  }
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3720      	adds	r7, #32
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	00100002 	.word	0x00100002
 80036e0:	ffff0000 	.word	0xffff0000

080036e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b088      	sub	sp, #32
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	4608      	mov	r0, r1
 80036ee:	4611      	mov	r1, r2
 80036f0:	461a      	mov	r2, r3
 80036f2:	4603      	mov	r3, r0
 80036f4:	817b      	strh	r3, [r7, #10]
 80036f6:	460b      	mov	r3, r1
 80036f8:	813b      	strh	r3, [r7, #8]
 80036fa:	4613      	mov	r3, r2
 80036fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800370c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	2200      	movs	r2, #0
 8003716:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 f960 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00d      	beq.n	8003742 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003734:	d103      	bne.n	800373e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800373c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e05f      	b.n	8003802 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003742:	897b      	ldrh	r3, [r7, #10]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	461a      	mov	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003750:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	6a3a      	ldr	r2, [r7, #32]
 8003756:	492d      	ldr	r1, [pc, #180]	; (800380c <I2C_RequestMemoryWrite+0x128>)
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 f998 	bl	8003a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e04c      	b.n	8003802 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800377e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003780:	6a39      	ldr	r1, [r7, #32]
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 fa02 	bl	8003b8c <I2C_WaitOnTXEFlagUntilTimeout>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00d      	beq.n	80037aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	2b04      	cmp	r3, #4
 8003794:	d107      	bne.n	80037a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e02b      	b.n	8003802 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037aa:	88fb      	ldrh	r3, [r7, #6]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d105      	bne.n	80037bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037b0:	893b      	ldrh	r3, [r7, #8]
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	611a      	str	r2, [r3, #16]
 80037ba:	e021      	b.n	8003800 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80037bc:	893b      	ldrh	r3, [r7, #8]
 80037be:	0a1b      	lsrs	r3, r3, #8
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037cc:	6a39      	ldr	r1, [r7, #32]
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 f9dc 	bl	8003b8c <I2C_WaitOnTXEFlagUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00d      	beq.n	80037f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d107      	bne.n	80037f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e005      	b.n	8003802 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037f6:	893b      	ldrh	r3, [r7, #8]
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	00010002 	.word	0x00010002

08003810 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b088      	sub	sp, #32
 8003814:	af02      	add	r7, sp, #8
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	4608      	mov	r0, r1
 800381a:	4611      	mov	r1, r2
 800381c:	461a      	mov	r2, r3
 800381e:	4603      	mov	r3, r0
 8003820:	817b      	strh	r3, [r7, #10]
 8003822:	460b      	mov	r3, r1
 8003824:	813b      	strh	r3, [r7, #8]
 8003826:	4613      	mov	r3, r2
 8003828:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003838:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003848:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	2200      	movs	r2, #0
 8003852:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 f8c2 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00d      	beq.n	800387e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003870:	d103      	bne.n	800387a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003878:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e0aa      	b.n	80039d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800387e:	897b      	ldrh	r3, [r7, #10]
 8003880:	b2db      	uxtb	r3, r3
 8003882:	461a      	mov	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800388c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	6a3a      	ldr	r2, [r7, #32]
 8003892:	4952      	ldr	r1, [pc, #328]	; (80039dc <I2C_RequestMemoryRead+0x1cc>)
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 f8fa 	bl	8003a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e097      	b.n	80039d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038bc:	6a39      	ldr	r1, [r7, #32]
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 f964 	bl	8003b8c <I2C_WaitOnTXEFlagUntilTimeout>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00d      	beq.n	80038e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d107      	bne.n	80038e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e076      	b.n	80039d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038e6:	88fb      	ldrh	r3, [r7, #6]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d105      	bne.n	80038f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038ec:	893b      	ldrh	r3, [r7, #8]
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	611a      	str	r2, [r3, #16]
 80038f6:	e021      	b.n	800393c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038f8:	893b      	ldrh	r3, [r7, #8]
 80038fa:	0a1b      	lsrs	r3, r3, #8
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003908:	6a39      	ldr	r1, [r7, #32]
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 f93e 	bl	8003b8c <I2C_WaitOnTXEFlagUntilTimeout>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00d      	beq.n	8003932 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	2b04      	cmp	r3, #4
 800391c:	d107      	bne.n	800392e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800392c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e050      	b.n	80039d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003932:	893b      	ldrh	r3, [r7, #8]
 8003934:	b2da      	uxtb	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800393c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393e:	6a39      	ldr	r1, [r7, #32]
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 f923 	bl	8003b8c <I2C_WaitOnTXEFlagUntilTimeout>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00d      	beq.n	8003968 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	2b04      	cmp	r3, #4
 8003952:	d107      	bne.n	8003964 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003962:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e035      	b.n	80039d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003976:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	2200      	movs	r2, #0
 8003980:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 f82b 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00d      	beq.n	80039ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800399e:	d103      	bne.n	80039a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e013      	b.n	80039d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039ac:	897b      	ldrh	r3, [r7, #10]
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	6a3a      	ldr	r2, [r7, #32]
 80039c0:	4906      	ldr	r1, [pc, #24]	; (80039dc <I2C_RequestMemoryRead+0x1cc>)
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 f863 	bl	8003a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e000      	b.n	80039d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	00010002 	.word	0x00010002

080039e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	4613      	mov	r3, r2
 80039ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039f0:	e025      	b.n	8003a3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039f8:	d021      	beq.n	8003a3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039fa:	f7fe fe2d 	bl	8002658 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d302      	bcc.n	8003a10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d116      	bne.n	8003a3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	f043 0220 	orr.w	r2, r3, #32
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e023      	b.n	8003a86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	0c1b      	lsrs	r3, r3, #16
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d10d      	bne.n	8003a64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	43da      	mvns	r2, r3
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	4013      	ands	r3, r2
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	bf0c      	ite	eq
 8003a5a:	2301      	moveq	r3, #1
 8003a5c:	2300      	movne	r3, #0
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	461a      	mov	r2, r3
 8003a62:	e00c      	b.n	8003a7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	43da      	mvns	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	bf0c      	ite	eq
 8003a76:	2301      	moveq	r3, #1
 8003a78:	2300      	movne	r3, #0
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	79fb      	ldrb	r3, [r7, #7]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d0b6      	beq.n	80039f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b084      	sub	sp, #16
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	60f8      	str	r0, [r7, #12]
 8003a96:	60b9      	str	r1, [r7, #8]
 8003a98:	607a      	str	r2, [r7, #4]
 8003a9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a9c:	e051      	b.n	8003b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aac:	d123      	bne.n	8003af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003abc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ac6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	f043 0204 	orr.w	r2, r3, #4
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e046      	b.n	8003b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003afc:	d021      	beq.n	8003b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afe:	f7fe fdab 	bl	8002658 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d302      	bcc.n	8003b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d116      	bne.n	8003b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f043 0220 	orr.w	r2, r3, #32
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e020      	b.n	8003b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	0c1b      	lsrs	r3, r3, #16
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d10c      	bne.n	8003b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	43da      	mvns	r2, r3
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	4013      	ands	r3, r2
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	bf14      	ite	ne
 8003b5e:	2301      	movne	r3, #1
 8003b60:	2300      	moveq	r3, #0
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	e00b      	b.n	8003b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	43da      	mvns	r2, r3
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	4013      	ands	r3, r2
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	bf14      	ite	ne
 8003b78:	2301      	movne	r3, #1
 8003b7a:	2300      	moveq	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d18d      	bne.n	8003a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b98:	e02d      	b.n	8003bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 f8ce 	bl	8003d3c <I2C_IsAcknowledgeFailed>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e02d      	b.n	8003c06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bb0:	d021      	beq.n	8003bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb2:	f7fe fd51 	bl	8002658 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d302      	bcc.n	8003bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d116      	bne.n	8003bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	f043 0220 	orr.w	r2, r3, #32
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e007      	b.n	8003c06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c00:	2b80      	cmp	r3, #128	; 0x80
 8003c02:	d1ca      	bne.n	8003b9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b084      	sub	sp, #16
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	60f8      	str	r0, [r7, #12]
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c1a:	e02d      	b.n	8003c78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f000 f88d 	bl	8003d3c <I2C_IsAcknowledgeFailed>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e02d      	b.n	8003c88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c32:	d021      	beq.n	8003c78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c34:	f7fe fd10 	bl	8002658 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d302      	bcc.n	8003c4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d116      	bne.n	8003c78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	f043 0220 	orr.w	r2, r3, #32
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e007      	b.n	8003c88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d1ca      	bne.n	8003c1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c9c:	e042      	b.n	8003d24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	f003 0310 	and.w	r3, r3, #16
 8003ca8:	2b10      	cmp	r3, #16
 8003caa:	d119      	bne.n	8003ce0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f06f 0210 	mvn.w	r2, #16
 8003cb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e029      	b.n	8003d34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce0:	f7fe fcba 	bl	8002658 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d302      	bcc.n	8003cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d116      	bne.n	8003d24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d10:	f043 0220 	orr.w	r2, r3, #32
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e007      	b.n	8003d34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2e:	2b40      	cmp	r3, #64	; 0x40
 8003d30:	d1b5      	bne.n	8003c9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d52:	d11b      	bne.n	8003d8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	f043 0204 	orr.w	r2, r3, #4
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e000      	b.n	8003d8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
	...

08003d9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e267      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d075      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dba:	4b88      	ldr	r3, [pc, #544]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 030c 	and.w	r3, r3, #12
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d00c      	beq.n	8003de0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dc6:	4b85      	ldr	r3, [pc, #532]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d112      	bne.n	8003df8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dd2:	4b82      	ldr	r3, [pc, #520]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dde:	d10b      	bne.n	8003df8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de0:	4b7e      	ldr	r3, [pc, #504]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d05b      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x108>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d157      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e242      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e00:	d106      	bne.n	8003e10 <HAL_RCC_OscConfig+0x74>
 8003e02:	4b76      	ldr	r3, [pc, #472]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a75      	ldr	r2, [pc, #468]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	e01d      	b.n	8003e4c <HAL_RCC_OscConfig+0xb0>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e18:	d10c      	bne.n	8003e34 <HAL_RCC_OscConfig+0x98>
 8003e1a:	4b70      	ldr	r3, [pc, #448]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a6f      	ldr	r2, [pc, #444]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	4b6d      	ldr	r3, [pc, #436]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a6c      	ldr	r2, [pc, #432]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	e00b      	b.n	8003e4c <HAL_RCC_OscConfig+0xb0>
 8003e34:	4b69      	ldr	r3, [pc, #420]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a68      	ldr	r2, [pc, #416]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	4b66      	ldr	r3, [pc, #408]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a65      	ldr	r2, [pc, #404]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d013      	beq.n	8003e7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e54:	f7fe fc00 	bl	8002658 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e5c:	f7fe fbfc 	bl	8002658 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b64      	cmp	r3, #100	; 0x64
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e207      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6e:	4b5b      	ldr	r3, [pc, #364]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f0      	beq.n	8003e5c <HAL_RCC_OscConfig+0xc0>
 8003e7a:	e014      	b.n	8003ea6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7c:	f7fe fbec 	bl	8002658 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e84:	f7fe fbe8 	bl	8002658 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	; 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e1f3      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e96:	4b51      	ldr	r3, [pc, #324]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0xe8>
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d063      	beq.n	8003f7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eb2:	4b4a      	ldr	r3, [pc, #296]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 030c 	and.w	r3, r3, #12
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00b      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ebe:	4b47      	ldr	r3, [pc, #284]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d11c      	bne.n	8003f04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eca:	4b44      	ldr	r3, [pc, #272]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d116      	bne.n	8003f04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ed6:	4b41      	ldr	r3, [pc, #260]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d005      	beq.n	8003eee <HAL_RCC_OscConfig+0x152>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d001      	beq.n	8003eee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e1c7      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eee:	4b3b      	ldr	r3, [pc, #236]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	4937      	ldr	r1, [pc, #220]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f02:	e03a      	b.n	8003f7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d020      	beq.n	8003f4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f0c:	4b34      	ldr	r3, [pc, #208]	; (8003fe0 <HAL_RCC_OscConfig+0x244>)
 8003f0e:	2201      	movs	r2, #1
 8003f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f12:	f7fe fba1 	bl	8002658 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f1a:	f7fe fb9d 	bl	8002658 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e1a8      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2c:	4b2b      	ldr	r3, [pc, #172]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0f0      	beq.n	8003f1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f38:	4b28      	ldr	r3, [pc, #160]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	4925      	ldr	r1, [pc, #148]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	600b      	str	r3, [r1, #0]
 8003f4c:	e015      	b.n	8003f7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f4e:	4b24      	ldr	r3, [pc, #144]	; (8003fe0 <HAL_RCC_OscConfig+0x244>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f54:	f7fe fb80 	bl	8002658 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f5c:	f7fe fb7c 	bl	8002658 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e187      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f6e:	4b1b      	ldr	r3, [pc, #108]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f0      	bne.n	8003f5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d036      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d016      	beq.n	8003fbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f8e:	4b15      	ldr	r3, [pc, #84]	; (8003fe4 <HAL_RCC_OscConfig+0x248>)
 8003f90:	2201      	movs	r2, #1
 8003f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f94:	f7fe fb60 	bl	8002658 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f9c:	f7fe fb5c 	bl	8002658 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e167      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fae:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <HAL_RCC_OscConfig+0x240>)
 8003fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0f0      	beq.n	8003f9c <HAL_RCC_OscConfig+0x200>
 8003fba:	e01b      	b.n	8003ff4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fbc:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <HAL_RCC_OscConfig+0x248>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc2:	f7fe fb49 	bl	8002658 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc8:	e00e      	b.n	8003fe8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fca:	f7fe fb45 	bl	8002658 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d907      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e150      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	42470000 	.word	0x42470000
 8003fe4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe8:	4b88      	ldr	r3, [pc, #544]	; (800420c <HAL_RCC_OscConfig+0x470>)
 8003fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1ea      	bne.n	8003fca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 8097 	beq.w	8004130 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004002:	2300      	movs	r3, #0
 8004004:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004006:	4b81      	ldr	r3, [pc, #516]	; (800420c <HAL_RCC_OscConfig+0x470>)
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10f      	bne.n	8004032 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004012:	2300      	movs	r3, #0
 8004014:	60bb      	str	r3, [r7, #8]
 8004016:	4b7d      	ldr	r3, [pc, #500]	; (800420c <HAL_RCC_OscConfig+0x470>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	4a7c      	ldr	r2, [pc, #496]	; (800420c <HAL_RCC_OscConfig+0x470>)
 800401c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004020:	6413      	str	r3, [r2, #64]	; 0x40
 8004022:	4b7a      	ldr	r3, [pc, #488]	; (800420c <HAL_RCC_OscConfig+0x470>)
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402a:	60bb      	str	r3, [r7, #8]
 800402c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800402e:	2301      	movs	r3, #1
 8004030:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004032:	4b77      	ldr	r3, [pc, #476]	; (8004210 <HAL_RCC_OscConfig+0x474>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403a:	2b00      	cmp	r3, #0
 800403c:	d118      	bne.n	8004070 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800403e:	4b74      	ldr	r3, [pc, #464]	; (8004210 <HAL_RCC_OscConfig+0x474>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a73      	ldr	r2, [pc, #460]	; (8004210 <HAL_RCC_OscConfig+0x474>)
 8004044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800404a:	f7fe fb05 	bl	8002658 <HAL_GetTick>
 800404e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004050:	e008      	b.n	8004064 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004052:	f7fe fb01 	bl	8002658 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e10c      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004064:	4b6a      	ldr	r3, [pc, #424]	; (8004210 <HAL_RCC_OscConfig+0x474>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0f0      	beq.n	8004052 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d106      	bne.n	8004086 <HAL_RCC_OscConfig+0x2ea>
 8004078:	4b64      	ldr	r3, [pc, #400]	; (800420c <HAL_RCC_OscConfig+0x470>)
 800407a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407c:	4a63      	ldr	r2, [pc, #396]	; (800420c <HAL_RCC_OscConfig+0x470>)
 800407e:	f043 0301 	orr.w	r3, r3, #1
 8004082:	6713      	str	r3, [r2, #112]	; 0x70
 8004084:	e01c      	b.n	80040c0 <HAL_RCC_OscConfig+0x324>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2b05      	cmp	r3, #5
 800408c:	d10c      	bne.n	80040a8 <HAL_RCC_OscConfig+0x30c>
 800408e:	4b5f      	ldr	r3, [pc, #380]	; (800420c <HAL_RCC_OscConfig+0x470>)
 8004090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004092:	4a5e      	ldr	r2, [pc, #376]	; (800420c <HAL_RCC_OscConfig+0x470>)
 8004094:	f043 0304 	orr.w	r3, r3, #4
 8004098:	6713      	str	r3, [r2, #112]	; 0x70
 800409a:	4b5c      	ldr	r3, [pc, #368]	; (800420c <HAL_RCC_OscConfig+0x470>)
 800409c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409e:	4a5b      	ldr	r2, [pc, #364]	; (800420c <HAL_RCC_OscConfig+0x470>)
 80040a0:	f043 0301 	orr.w	r3, r3, #1
 80040a4:	6713      	str	r3, [r2, #112]	; 0x70
 80040a6:	e00b      	b.n	80040c0 <HAL_RCC_OscConfig+0x324>
 80040a8:	4b58      	ldr	r3, [pc, #352]	; (800420c <HAL_RCC_OscConfig+0x470>)
 80040aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ac:	4a57      	ldr	r2, [pc, #348]	; (800420c <HAL_RCC_OscConfig+0x470>)
 80040ae:	f023 0301 	bic.w	r3, r3, #1
 80040b2:	6713      	str	r3, [r2, #112]	; 0x70
 80040b4:	4b55      	ldr	r3, [pc, #340]	; (800420c <HAL_RCC_OscConfig+0x470>)
 80040b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b8:	4a54      	ldr	r2, [pc, #336]	; (800420c <HAL_RCC_OscConfig+0x470>)
 80040ba:	f023 0304 	bic.w	r3, r3, #4
 80040be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d015      	beq.n	80040f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c8:	f7fe fac6 	bl	8002658 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ce:	e00a      	b.n	80040e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040d0:	f7fe fac2 	bl	8002658 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	f241 3288 	movw	r2, #5000	; 0x1388
 80040de:	4293      	cmp	r3, r2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e0cb      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e6:	4b49      	ldr	r3, [pc, #292]	; (800420c <HAL_RCC_OscConfig+0x470>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0ee      	beq.n	80040d0 <HAL_RCC_OscConfig+0x334>
 80040f2:	e014      	b.n	800411e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040f4:	f7fe fab0 	bl	8002658 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040fa:	e00a      	b.n	8004112 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040fc:	f7fe faac 	bl	8002658 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	f241 3288 	movw	r2, #5000	; 0x1388
 800410a:	4293      	cmp	r3, r2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e0b5      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004112:	4b3e      	ldr	r3, [pc, #248]	; (800420c <HAL_RCC_OscConfig+0x470>)
 8004114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1ee      	bne.n	80040fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800411e:	7dfb      	ldrb	r3, [r7, #23]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d105      	bne.n	8004130 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004124:	4b39      	ldr	r3, [pc, #228]	; (800420c <HAL_RCC_OscConfig+0x470>)
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	4a38      	ldr	r2, [pc, #224]	; (800420c <HAL_RCC_OscConfig+0x470>)
 800412a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800412e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 80a1 	beq.w	800427c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800413a:	4b34      	ldr	r3, [pc, #208]	; (800420c <HAL_RCC_OscConfig+0x470>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 030c 	and.w	r3, r3, #12
 8004142:	2b08      	cmp	r3, #8
 8004144:	d05c      	beq.n	8004200 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	2b02      	cmp	r3, #2
 800414c:	d141      	bne.n	80041d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800414e:	4b31      	ldr	r3, [pc, #196]	; (8004214 <HAL_RCC_OscConfig+0x478>)
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004154:	f7fe fa80 	bl	8002658 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800415c:	f7fe fa7c 	bl	8002658 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e087      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416e:	4b27      	ldr	r3, [pc, #156]	; (800420c <HAL_RCC_OscConfig+0x470>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1f0      	bne.n	800415c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69da      	ldr	r2, [r3, #28]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	019b      	lsls	r3, r3, #6
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004190:	085b      	lsrs	r3, r3, #1
 8004192:	3b01      	subs	r3, #1
 8004194:	041b      	lsls	r3, r3, #16
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	061b      	lsls	r3, r3, #24
 800419e:	491b      	ldr	r1, [pc, #108]	; (800420c <HAL_RCC_OscConfig+0x470>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041a4:	4b1b      	ldr	r3, [pc, #108]	; (8004214 <HAL_RCC_OscConfig+0x478>)
 80041a6:	2201      	movs	r2, #1
 80041a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041aa:	f7fe fa55 	bl	8002658 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b0:	e008      	b.n	80041c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041b2:	f7fe fa51 	bl	8002658 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e05c      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c4:	4b11      	ldr	r3, [pc, #68]	; (800420c <HAL_RCC_OscConfig+0x470>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0f0      	beq.n	80041b2 <HAL_RCC_OscConfig+0x416>
 80041d0:	e054      	b.n	800427c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d2:	4b10      	ldr	r3, [pc, #64]	; (8004214 <HAL_RCC_OscConfig+0x478>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d8:	f7fe fa3e 	bl	8002658 <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e0:	f7fe fa3a 	bl	8002658 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e045      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f2:	4b06      	ldr	r3, [pc, #24]	; (800420c <HAL_RCC_OscConfig+0x470>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1f0      	bne.n	80041e0 <HAL_RCC_OscConfig+0x444>
 80041fe:	e03d      	b.n	800427c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d107      	bne.n	8004218 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e038      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
 800420c:	40023800 	.word	0x40023800
 8004210:	40007000 	.word	0x40007000
 8004214:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004218:	4b1b      	ldr	r3, [pc, #108]	; (8004288 <HAL_RCC_OscConfig+0x4ec>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d028      	beq.n	8004278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004230:	429a      	cmp	r2, r3
 8004232:	d121      	bne.n	8004278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800423e:	429a      	cmp	r2, r3
 8004240:	d11a      	bne.n	8004278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004248:	4013      	ands	r3, r2
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800424e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004250:	4293      	cmp	r3, r2
 8004252:	d111      	bne.n	8004278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425e:	085b      	lsrs	r3, r3, #1
 8004260:	3b01      	subs	r3, #1
 8004262:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004264:	429a      	cmp	r2, r3
 8004266:	d107      	bne.n	8004278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004272:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004274:	429a      	cmp	r2, r3
 8004276:	d001      	beq.n	800427c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e000      	b.n	800427e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	40023800 	.word	0x40023800

0800428c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e0cc      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042a0:	4b68      	ldr	r3, [pc, #416]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d90c      	bls.n	80042c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ae:	4b65      	ldr	r3, [pc, #404]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	b2d2      	uxtb	r2, r2
 80042b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042b6:	4b63      	ldr	r3, [pc, #396]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d001      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e0b8      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d020      	beq.n	8004316 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d005      	beq.n	80042ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042e0:	4b59      	ldr	r3, [pc, #356]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	4a58      	ldr	r2, [pc, #352]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0308 	and.w	r3, r3, #8
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042f8:	4b53      	ldr	r3, [pc, #332]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	4a52      	ldr	r2, [pc, #328]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 80042fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004302:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004304:	4b50      	ldr	r3, [pc, #320]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	494d      	ldr	r1, [pc, #308]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 8004312:	4313      	orrs	r3, r2
 8004314:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d044      	beq.n	80043ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d107      	bne.n	800433a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432a:	4b47      	ldr	r3, [pc, #284]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d119      	bne.n	800436a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e07f      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2b02      	cmp	r3, #2
 8004340:	d003      	beq.n	800434a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004346:	2b03      	cmp	r3, #3
 8004348:	d107      	bne.n	800435a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434a:	4b3f      	ldr	r3, [pc, #252]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d109      	bne.n	800436a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e06f      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800435a:	4b3b      	ldr	r3, [pc, #236]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e067      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800436a:	4b37      	ldr	r3, [pc, #220]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f023 0203 	bic.w	r2, r3, #3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	4934      	ldr	r1, [pc, #208]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 8004378:	4313      	orrs	r3, r2
 800437a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800437c:	f7fe f96c 	bl	8002658 <HAL_GetTick>
 8004380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004382:	e00a      	b.n	800439a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004384:	f7fe f968 	bl	8002658 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004392:	4293      	cmp	r3, r2
 8004394:	d901      	bls.n	800439a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e04f      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800439a:	4b2b      	ldr	r3, [pc, #172]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 020c 	and.w	r2, r3, #12
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d1eb      	bne.n	8004384 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043ac:	4b25      	ldr	r3, [pc, #148]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d20c      	bcs.n	80043d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ba:	4b22      	ldr	r3, [pc, #136]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c2:	4b20      	ldr	r3, [pc, #128]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d001      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e032      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043e0:	4b19      	ldr	r3, [pc, #100]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	4916      	ldr	r1, [pc, #88]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0308 	and.w	r3, r3, #8
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d009      	beq.n	8004412 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043fe:	4b12      	ldr	r3, [pc, #72]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	490e      	ldr	r1, [pc, #56]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	4313      	orrs	r3, r2
 8004410:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004412:	f000 f821 	bl	8004458 <HAL_RCC_GetSysClockFreq>
 8004416:	4602      	mov	r2, r0
 8004418:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	091b      	lsrs	r3, r3, #4
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	490a      	ldr	r1, [pc, #40]	; (800444c <HAL_RCC_ClockConfig+0x1c0>)
 8004424:	5ccb      	ldrb	r3, [r1, r3]
 8004426:	fa22 f303 	lsr.w	r3, r2, r3
 800442a:	4a09      	ldr	r2, [pc, #36]	; (8004450 <HAL_RCC_ClockConfig+0x1c4>)
 800442c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800442e:	4b09      	ldr	r3, [pc, #36]	; (8004454 <HAL_RCC_ClockConfig+0x1c8>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f7fe f8cc 	bl	80025d0 <HAL_InitTick>

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40023c00 	.word	0x40023c00
 8004448:	40023800 	.word	0x40023800
 800444c:	08007c54 	.word	0x08007c54
 8004450:	20000004 	.word	0x20000004
 8004454:	20000008 	.word	0x20000008

08004458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800445c:	b090      	sub	sp, #64	; 0x40
 800445e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	637b      	str	r3, [r7, #52]	; 0x34
 8004464:	2300      	movs	r3, #0
 8004466:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004468:	2300      	movs	r3, #0
 800446a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004470:	4b59      	ldr	r3, [pc, #356]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 030c 	and.w	r3, r3, #12
 8004478:	2b08      	cmp	r3, #8
 800447a:	d00d      	beq.n	8004498 <HAL_RCC_GetSysClockFreq+0x40>
 800447c:	2b08      	cmp	r3, #8
 800447e:	f200 80a1 	bhi.w	80045c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <HAL_RCC_GetSysClockFreq+0x34>
 8004486:	2b04      	cmp	r3, #4
 8004488:	d003      	beq.n	8004492 <HAL_RCC_GetSysClockFreq+0x3a>
 800448a:	e09b      	b.n	80045c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800448c:	4b53      	ldr	r3, [pc, #332]	; (80045dc <HAL_RCC_GetSysClockFreq+0x184>)
 800448e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004490:	e09b      	b.n	80045ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004492:	4b53      	ldr	r3, [pc, #332]	; (80045e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004494:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004496:	e098      	b.n	80045ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004498:	4b4f      	ldr	r3, [pc, #316]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044a2:	4b4d      	ldr	r3, [pc, #308]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d028      	beq.n	8004500 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ae:	4b4a      	ldr	r3, [pc, #296]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	099b      	lsrs	r3, r3, #6
 80044b4:	2200      	movs	r2, #0
 80044b6:	623b      	str	r3, [r7, #32]
 80044b8:	627a      	str	r2, [r7, #36]	; 0x24
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80044c0:	2100      	movs	r1, #0
 80044c2:	4b47      	ldr	r3, [pc, #284]	; (80045e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80044c4:	fb03 f201 	mul.w	r2, r3, r1
 80044c8:	2300      	movs	r3, #0
 80044ca:	fb00 f303 	mul.w	r3, r0, r3
 80044ce:	4413      	add	r3, r2
 80044d0:	4a43      	ldr	r2, [pc, #268]	; (80045e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80044d2:	fba0 1202 	umull	r1, r2, r0, r2
 80044d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044d8:	460a      	mov	r2, r1
 80044da:	62ba      	str	r2, [r7, #40]	; 0x28
 80044dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044de:	4413      	add	r3, r2
 80044e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e4:	2200      	movs	r2, #0
 80044e6:	61bb      	str	r3, [r7, #24]
 80044e8:	61fa      	str	r2, [r7, #28]
 80044ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80044f2:	f7fc fbb1 	bl	8000c58 <__aeabi_uldivmod>
 80044f6:	4602      	mov	r2, r0
 80044f8:	460b      	mov	r3, r1
 80044fa:	4613      	mov	r3, r2
 80044fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044fe:	e053      	b.n	80045a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004500:	4b35      	ldr	r3, [pc, #212]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	099b      	lsrs	r3, r3, #6
 8004506:	2200      	movs	r2, #0
 8004508:	613b      	str	r3, [r7, #16]
 800450a:	617a      	str	r2, [r7, #20]
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004512:	f04f 0b00 	mov.w	fp, #0
 8004516:	4652      	mov	r2, sl
 8004518:	465b      	mov	r3, fp
 800451a:	f04f 0000 	mov.w	r0, #0
 800451e:	f04f 0100 	mov.w	r1, #0
 8004522:	0159      	lsls	r1, r3, #5
 8004524:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004528:	0150      	lsls	r0, r2, #5
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	ebb2 080a 	subs.w	r8, r2, sl
 8004532:	eb63 090b 	sbc.w	r9, r3, fp
 8004536:	f04f 0200 	mov.w	r2, #0
 800453a:	f04f 0300 	mov.w	r3, #0
 800453e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004542:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004546:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800454a:	ebb2 0408 	subs.w	r4, r2, r8
 800454e:	eb63 0509 	sbc.w	r5, r3, r9
 8004552:	f04f 0200 	mov.w	r2, #0
 8004556:	f04f 0300 	mov.w	r3, #0
 800455a:	00eb      	lsls	r3, r5, #3
 800455c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004560:	00e2      	lsls	r2, r4, #3
 8004562:	4614      	mov	r4, r2
 8004564:	461d      	mov	r5, r3
 8004566:	eb14 030a 	adds.w	r3, r4, sl
 800456a:	603b      	str	r3, [r7, #0]
 800456c:	eb45 030b 	adc.w	r3, r5, fp
 8004570:	607b      	str	r3, [r7, #4]
 8004572:	f04f 0200 	mov.w	r2, #0
 8004576:	f04f 0300 	mov.w	r3, #0
 800457a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800457e:	4629      	mov	r1, r5
 8004580:	028b      	lsls	r3, r1, #10
 8004582:	4621      	mov	r1, r4
 8004584:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004588:	4621      	mov	r1, r4
 800458a:	028a      	lsls	r2, r1, #10
 800458c:	4610      	mov	r0, r2
 800458e:	4619      	mov	r1, r3
 8004590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004592:	2200      	movs	r2, #0
 8004594:	60bb      	str	r3, [r7, #8]
 8004596:	60fa      	str	r2, [r7, #12]
 8004598:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800459c:	f7fc fb5c 	bl	8000c58 <__aeabi_uldivmod>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4613      	mov	r3, r2
 80045a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045a8:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	0c1b      	lsrs	r3, r3, #16
 80045ae:	f003 0303 	and.w	r3, r3, #3
 80045b2:	3301      	adds	r3, #1
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80045b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80045c2:	e002      	b.n	80045ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045c4:	4b05      	ldr	r3, [pc, #20]	; (80045dc <HAL_RCC_GetSysClockFreq+0x184>)
 80045c6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80045c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3740      	adds	r7, #64	; 0x40
 80045d0:	46bd      	mov	sp, r7
 80045d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045d6:	bf00      	nop
 80045d8:	40023800 	.word	0x40023800
 80045dc:	00f42400 	.word	0x00f42400
 80045e0:	017d7840 	.word	0x017d7840

080045e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045e8:	4b03      	ldr	r3, [pc, #12]	; (80045f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045ea:	681b      	ldr	r3, [r3, #0]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	20000004 	.word	0x20000004

080045fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004600:	f7ff fff0 	bl	80045e4 <HAL_RCC_GetHCLKFreq>
 8004604:	4602      	mov	r2, r0
 8004606:	4b05      	ldr	r3, [pc, #20]	; (800461c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	0a9b      	lsrs	r3, r3, #10
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	4903      	ldr	r1, [pc, #12]	; (8004620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004612:	5ccb      	ldrb	r3, [r1, r3]
 8004614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004618:	4618      	mov	r0, r3
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40023800 	.word	0x40023800
 8004620:	08007c64 	.word	0x08007c64

08004624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004628:	f7ff ffdc 	bl	80045e4 <HAL_RCC_GetHCLKFreq>
 800462c:	4602      	mov	r2, r0
 800462e:	4b05      	ldr	r3, [pc, #20]	; (8004644 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	0b5b      	lsrs	r3, r3, #13
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	4903      	ldr	r1, [pc, #12]	; (8004648 <HAL_RCC_GetPCLK2Freq+0x24>)
 800463a:	5ccb      	ldrb	r3, [r1, r3]
 800463c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004640:	4618      	mov	r0, r3
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40023800 	.word	0x40023800
 8004648:	08007c64 	.word	0x08007c64

0800464c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e03f      	b.n	80046de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7fd fe16 	bl	80022a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2224      	movs	r2, #36	; 0x24
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800468e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f929 	bl	80048e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	695a      	ldr	r2, [r3, #20]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2220      	movs	r2, #32
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2220      	movs	r2, #32
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b08a      	sub	sp, #40	; 0x28
 80046ea:	af02      	add	r7, sp, #8
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	60b9      	str	r1, [r7, #8]
 80046f0:	603b      	str	r3, [r7, #0]
 80046f2:	4613      	mov	r3, r2
 80046f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b20      	cmp	r3, #32
 8004704:	d17c      	bne.n	8004800 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <HAL_UART_Transmit+0x2c>
 800470c:	88fb      	ldrh	r3, [r7, #6]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e075      	b.n	8004802 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_UART_Transmit+0x3e>
 8004720:	2302      	movs	r3, #2
 8004722:	e06e      	b.n	8004802 <HAL_UART_Transmit+0x11c>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2221      	movs	r2, #33	; 0x21
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800473a:	f7fd ff8d 	bl	8002658 <HAL_GetTick>
 800473e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	88fa      	ldrh	r2, [r7, #6]
 8004744:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	88fa      	ldrh	r2, [r7, #6]
 800474a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004754:	d108      	bne.n	8004768 <HAL_UART_Transmit+0x82>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d104      	bne.n	8004768 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800475e:	2300      	movs	r3, #0
 8004760:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	61bb      	str	r3, [r7, #24]
 8004766:	e003      	b.n	8004770 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800476c:	2300      	movs	r3, #0
 800476e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004778:	e02a      	b.n	80047d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2200      	movs	r2, #0
 8004782:	2180      	movs	r1, #128	; 0x80
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 f840 	bl	800480a <UART_WaitOnFlagUntilTimeout>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d001      	beq.n	8004794 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e036      	b.n	8004802 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10b      	bne.n	80047b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	461a      	mov	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	3302      	adds	r3, #2
 80047ae:	61bb      	str	r3, [r7, #24]
 80047b0:	e007      	b.n	80047c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	781a      	ldrb	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	3301      	adds	r3, #1
 80047c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1cf      	bne.n	800477a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2200      	movs	r2, #0
 80047e2:	2140      	movs	r1, #64	; 0x40
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 f810 	bl	800480a <UART_WaitOnFlagUntilTimeout>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e006      	b.n	8004802 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	e000      	b.n	8004802 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004800:	2302      	movs	r3, #2
  }
}
 8004802:	4618      	mov	r0, r3
 8004804:	3720      	adds	r7, #32
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b090      	sub	sp, #64	; 0x40
 800480e:	af00      	add	r7, sp, #0
 8004810:	60f8      	str	r0, [r7, #12]
 8004812:	60b9      	str	r1, [r7, #8]
 8004814:	603b      	str	r3, [r7, #0]
 8004816:	4613      	mov	r3, r2
 8004818:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800481a:	e050      	b.n	80048be <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800481c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800481e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004822:	d04c      	beq.n	80048be <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004826:	2b00      	cmp	r3, #0
 8004828:	d007      	beq.n	800483a <UART_WaitOnFlagUntilTimeout+0x30>
 800482a:	f7fd ff15 	bl	8002658 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004836:	429a      	cmp	r2, r3
 8004838:	d241      	bcs.n	80048be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	330c      	adds	r3, #12
 8004840:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004844:	e853 3f00 	ldrex	r3, [r3]
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004850:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	330c      	adds	r3, #12
 8004858:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800485a:	637a      	str	r2, [r7, #52]	; 0x34
 800485c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004860:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004862:	e841 2300 	strex	r3, r2, [r1]
 8004866:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1e5      	bne.n	800483a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3314      	adds	r3, #20
 8004874:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	e853 3f00 	ldrex	r3, [r3]
 800487c:	613b      	str	r3, [r7, #16]
   return(result);
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f023 0301 	bic.w	r3, r3, #1
 8004884:	63bb      	str	r3, [r7, #56]	; 0x38
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	3314      	adds	r3, #20
 800488c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800488e:	623a      	str	r2, [r7, #32]
 8004890:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004892:	69f9      	ldr	r1, [r7, #28]
 8004894:	6a3a      	ldr	r2, [r7, #32]
 8004896:	e841 2300 	strex	r3, r2, [r1]
 800489a:	61bb      	str	r3, [r7, #24]
   return(result);
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1e5      	bne.n	800486e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2220      	movs	r2, #32
 80048ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e00f      	b.n	80048de <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4013      	ands	r3, r2
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	bf0c      	ite	eq
 80048ce:	2301      	moveq	r3, #1
 80048d0:	2300      	movne	r3, #0
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	461a      	mov	r2, r3
 80048d6:	79fb      	ldrb	r3, [r7, #7]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d09f      	beq.n	800481c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3740      	adds	r7, #64	; 0x40
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048ec:	b0c0      	sub	sp, #256	; 0x100
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004904:	68d9      	ldr	r1, [r3, #12]
 8004906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	ea40 0301 	orr.w	r3, r0, r1
 8004910:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	431a      	orrs	r2, r3
 8004920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	431a      	orrs	r2, r3
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	4313      	orrs	r3, r2
 8004930:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004940:	f021 010c 	bic.w	r1, r1, #12
 8004944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800494e:	430b      	orrs	r3, r1
 8004950:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800495e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004962:	6999      	ldr	r1, [r3, #24]
 8004964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	ea40 0301 	orr.w	r3, r0, r1
 800496e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	4b8f      	ldr	r3, [pc, #572]	; (8004bb4 <UART_SetConfig+0x2cc>)
 8004978:	429a      	cmp	r2, r3
 800497a:	d005      	beq.n	8004988 <UART_SetConfig+0xa0>
 800497c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	4b8d      	ldr	r3, [pc, #564]	; (8004bb8 <UART_SetConfig+0x2d0>)
 8004984:	429a      	cmp	r2, r3
 8004986:	d104      	bne.n	8004992 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004988:	f7ff fe4c 	bl	8004624 <HAL_RCC_GetPCLK2Freq>
 800498c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004990:	e003      	b.n	800499a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004992:	f7ff fe33 	bl	80045fc <HAL_RCC_GetPCLK1Freq>
 8004996:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800499a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049a4:	f040 810c 	bne.w	8004bc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049ac:	2200      	movs	r2, #0
 80049ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049ba:	4622      	mov	r2, r4
 80049bc:	462b      	mov	r3, r5
 80049be:	1891      	adds	r1, r2, r2
 80049c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80049c2:	415b      	adcs	r3, r3
 80049c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049ca:	4621      	mov	r1, r4
 80049cc:	eb12 0801 	adds.w	r8, r2, r1
 80049d0:	4629      	mov	r1, r5
 80049d2:	eb43 0901 	adc.w	r9, r3, r1
 80049d6:	f04f 0200 	mov.w	r2, #0
 80049da:	f04f 0300 	mov.w	r3, #0
 80049de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049ea:	4690      	mov	r8, r2
 80049ec:	4699      	mov	r9, r3
 80049ee:	4623      	mov	r3, r4
 80049f0:	eb18 0303 	adds.w	r3, r8, r3
 80049f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049f8:	462b      	mov	r3, r5
 80049fa:	eb49 0303 	adc.w	r3, r9, r3
 80049fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a16:	460b      	mov	r3, r1
 8004a18:	18db      	adds	r3, r3, r3
 8004a1a:	653b      	str	r3, [r7, #80]	; 0x50
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	eb42 0303 	adc.w	r3, r2, r3
 8004a22:	657b      	str	r3, [r7, #84]	; 0x54
 8004a24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a2c:	f7fc f914 	bl	8000c58 <__aeabi_uldivmod>
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
 8004a34:	4b61      	ldr	r3, [pc, #388]	; (8004bbc <UART_SetConfig+0x2d4>)
 8004a36:	fba3 2302 	umull	r2, r3, r3, r2
 8004a3a:	095b      	lsrs	r3, r3, #5
 8004a3c:	011c      	lsls	r4, r3, #4
 8004a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a42:	2200      	movs	r2, #0
 8004a44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a50:	4642      	mov	r2, r8
 8004a52:	464b      	mov	r3, r9
 8004a54:	1891      	adds	r1, r2, r2
 8004a56:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a58:	415b      	adcs	r3, r3
 8004a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a60:	4641      	mov	r1, r8
 8004a62:	eb12 0a01 	adds.w	sl, r2, r1
 8004a66:	4649      	mov	r1, r9
 8004a68:	eb43 0b01 	adc.w	fp, r3, r1
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a80:	4692      	mov	sl, r2
 8004a82:	469b      	mov	fp, r3
 8004a84:	4643      	mov	r3, r8
 8004a86:	eb1a 0303 	adds.w	r3, sl, r3
 8004a8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a8e:	464b      	mov	r3, r9
 8004a90:	eb4b 0303 	adc.w	r3, fp, r3
 8004a94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004aa4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004aa8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004aac:	460b      	mov	r3, r1
 8004aae:	18db      	adds	r3, r3, r3
 8004ab0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	eb42 0303 	adc.w	r3, r2, r3
 8004ab8:	647b      	str	r3, [r7, #68]	; 0x44
 8004aba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004abe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ac2:	f7fc f8c9 	bl	8000c58 <__aeabi_uldivmod>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	460b      	mov	r3, r1
 8004aca:	4611      	mov	r1, r2
 8004acc:	4b3b      	ldr	r3, [pc, #236]	; (8004bbc <UART_SetConfig+0x2d4>)
 8004ace:	fba3 2301 	umull	r2, r3, r3, r1
 8004ad2:	095b      	lsrs	r3, r3, #5
 8004ad4:	2264      	movs	r2, #100	; 0x64
 8004ad6:	fb02 f303 	mul.w	r3, r2, r3
 8004ada:	1acb      	subs	r3, r1, r3
 8004adc:	00db      	lsls	r3, r3, #3
 8004ade:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ae2:	4b36      	ldr	r3, [pc, #216]	; (8004bbc <UART_SetConfig+0x2d4>)
 8004ae4:	fba3 2302 	umull	r2, r3, r3, r2
 8004ae8:	095b      	lsrs	r3, r3, #5
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004af0:	441c      	add	r4, r3
 8004af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004af6:	2200      	movs	r2, #0
 8004af8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004afc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b04:	4642      	mov	r2, r8
 8004b06:	464b      	mov	r3, r9
 8004b08:	1891      	adds	r1, r2, r2
 8004b0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b0c:	415b      	adcs	r3, r3
 8004b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b14:	4641      	mov	r1, r8
 8004b16:	1851      	adds	r1, r2, r1
 8004b18:	6339      	str	r1, [r7, #48]	; 0x30
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	414b      	adcs	r3, r1
 8004b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b2c:	4659      	mov	r1, fp
 8004b2e:	00cb      	lsls	r3, r1, #3
 8004b30:	4651      	mov	r1, sl
 8004b32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b36:	4651      	mov	r1, sl
 8004b38:	00ca      	lsls	r2, r1, #3
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4603      	mov	r3, r0
 8004b40:	4642      	mov	r2, r8
 8004b42:	189b      	adds	r3, r3, r2
 8004b44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b48:	464b      	mov	r3, r9
 8004b4a:	460a      	mov	r2, r1
 8004b4c:	eb42 0303 	adc.w	r3, r2, r3
 8004b50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b68:	460b      	mov	r3, r1
 8004b6a:	18db      	adds	r3, r3, r3
 8004b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b6e:	4613      	mov	r3, r2
 8004b70:	eb42 0303 	adc.w	r3, r2, r3
 8004b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b7e:	f7fc f86b 	bl	8000c58 <__aeabi_uldivmod>
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	4b0d      	ldr	r3, [pc, #52]	; (8004bbc <UART_SetConfig+0x2d4>)
 8004b88:	fba3 1302 	umull	r1, r3, r3, r2
 8004b8c:	095b      	lsrs	r3, r3, #5
 8004b8e:	2164      	movs	r1, #100	; 0x64
 8004b90:	fb01 f303 	mul.w	r3, r1, r3
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	3332      	adds	r3, #50	; 0x32
 8004b9a:	4a08      	ldr	r2, [pc, #32]	; (8004bbc <UART_SetConfig+0x2d4>)
 8004b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba0:	095b      	lsrs	r3, r3, #5
 8004ba2:	f003 0207 	and.w	r2, r3, #7
 8004ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4422      	add	r2, r4
 8004bae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bb0:	e105      	b.n	8004dbe <UART_SetConfig+0x4d6>
 8004bb2:	bf00      	nop
 8004bb4:	40011000 	.word	0x40011000
 8004bb8:	40011400 	.word	0x40011400
 8004bbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004bd2:	4642      	mov	r2, r8
 8004bd4:	464b      	mov	r3, r9
 8004bd6:	1891      	adds	r1, r2, r2
 8004bd8:	6239      	str	r1, [r7, #32]
 8004bda:	415b      	adcs	r3, r3
 8004bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004be2:	4641      	mov	r1, r8
 8004be4:	1854      	adds	r4, r2, r1
 8004be6:	4649      	mov	r1, r9
 8004be8:	eb43 0501 	adc.w	r5, r3, r1
 8004bec:	f04f 0200 	mov.w	r2, #0
 8004bf0:	f04f 0300 	mov.w	r3, #0
 8004bf4:	00eb      	lsls	r3, r5, #3
 8004bf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bfa:	00e2      	lsls	r2, r4, #3
 8004bfc:	4614      	mov	r4, r2
 8004bfe:	461d      	mov	r5, r3
 8004c00:	4643      	mov	r3, r8
 8004c02:	18e3      	adds	r3, r4, r3
 8004c04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c08:	464b      	mov	r3, r9
 8004c0a:	eb45 0303 	adc.w	r3, r5, r3
 8004c0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	f04f 0300 	mov.w	r3, #0
 8004c2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c2e:	4629      	mov	r1, r5
 8004c30:	008b      	lsls	r3, r1, #2
 8004c32:	4621      	mov	r1, r4
 8004c34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c38:	4621      	mov	r1, r4
 8004c3a:	008a      	lsls	r2, r1, #2
 8004c3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c40:	f7fc f80a 	bl	8000c58 <__aeabi_uldivmod>
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	4b60      	ldr	r3, [pc, #384]	; (8004dcc <UART_SetConfig+0x4e4>)
 8004c4a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c4e:	095b      	lsrs	r3, r3, #5
 8004c50:	011c      	lsls	r4, r3, #4
 8004c52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c56:	2200      	movs	r2, #0
 8004c58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c64:	4642      	mov	r2, r8
 8004c66:	464b      	mov	r3, r9
 8004c68:	1891      	adds	r1, r2, r2
 8004c6a:	61b9      	str	r1, [r7, #24]
 8004c6c:	415b      	adcs	r3, r3
 8004c6e:	61fb      	str	r3, [r7, #28]
 8004c70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c74:	4641      	mov	r1, r8
 8004c76:	1851      	adds	r1, r2, r1
 8004c78:	6139      	str	r1, [r7, #16]
 8004c7a:	4649      	mov	r1, r9
 8004c7c:	414b      	adcs	r3, r1
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c8c:	4659      	mov	r1, fp
 8004c8e:	00cb      	lsls	r3, r1, #3
 8004c90:	4651      	mov	r1, sl
 8004c92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c96:	4651      	mov	r1, sl
 8004c98:	00ca      	lsls	r2, r1, #3
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	4642      	mov	r2, r8
 8004ca2:	189b      	adds	r3, r3, r2
 8004ca4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ca8:	464b      	mov	r3, r9
 8004caa:	460a      	mov	r2, r1
 8004cac:	eb42 0303 	adc.w	r3, r2, r3
 8004cb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cbe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	f04f 0300 	mov.w	r3, #0
 8004cc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ccc:	4649      	mov	r1, r9
 8004cce:	008b      	lsls	r3, r1, #2
 8004cd0:	4641      	mov	r1, r8
 8004cd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cd6:	4641      	mov	r1, r8
 8004cd8:	008a      	lsls	r2, r1, #2
 8004cda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004cde:	f7fb ffbb 	bl	8000c58 <__aeabi_uldivmod>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	4b39      	ldr	r3, [pc, #228]	; (8004dcc <UART_SetConfig+0x4e4>)
 8004ce8:	fba3 1302 	umull	r1, r3, r3, r2
 8004cec:	095b      	lsrs	r3, r3, #5
 8004cee:	2164      	movs	r1, #100	; 0x64
 8004cf0:	fb01 f303 	mul.w	r3, r1, r3
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	011b      	lsls	r3, r3, #4
 8004cf8:	3332      	adds	r3, #50	; 0x32
 8004cfa:	4a34      	ldr	r2, [pc, #208]	; (8004dcc <UART_SetConfig+0x4e4>)
 8004cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004d00:	095b      	lsrs	r3, r3, #5
 8004d02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d06:	441c      	add	r4, r3
 8004d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	673b      	str	r3, [r7, #112]	; 0x70
 8004d10:	677a      	str	r2, [r7, #116]	; 0x74
 8004d12:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d16:	4642      	mov	r2, r8
 8004d18:	464b      	mov	r3, r9
 8004d1a:	1891      	adds	r1, r2, r2
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	415b      	adcs	r3, r3
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d26:	4641      	mov	r1, r8
 8004d28:	1851      	adds	r1, r2, r1
 8004d2a:	6039      	str	r1, [r7, #0]
 8004d2c:	4649      	mov	r1, r9
 8004d2e:	414b      	adcs	r3, r1
 8004d30:	607b      	str	r3, [r7, #4]
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	f04f 0300 	mov.w	r3, #0
 8004d3a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d3e:	4659      	mov	r1, fp
 8004d40:	00cb      	lsls	r3, r1, #3
 8004d42:	4651      	mov	r1, sl
 8004d44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d48:	4651      	mov	r1, sl
 8004d4a:	00ca      	lsls	r2, r1, #3
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	4619      	mov	r1, r3
 8004d50:	4603      	mov	r3, r0
 8004d52:	4642      	mov	r2, r8
 8004d54:	189b      	adds	r3, r3, r2
 8004d56:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d58:	464b      	mov	r3, r9
 8004d5a:	460a      	mov	r2, r1
 8004d5c:	eb42 0303 	adc.w	r3, r2, r3
 8004d60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	663b      	str	r3, [r7, #96]	; 0x60
 8004d6c:	667a      	str	r2, [r7, #100]	; 0x64
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d7a:	4649      	mov	r1, r9
 8004d7c:	008b      	lsls	r3, r1, #2
 8004d7e:	4641      	mov	r1, r8
 8004d80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d84:	4641      	mov	r1, r8
 8004d86:	008a      	lsls	r2, r1, #2
 8004d88:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d8c:	f7fb ff64 	bl	8000c58 <__aeabi_uldivmod>
 8004d90:	4602      	mov	r2, r0
 8004d92:	460b      	mov	r3, r1
 8004d94:	4b0d      	ldr	r3, [pc, #52]	; (8004dcc <UART_SetConfig+0x4e4>)
 8004d96:	fba3 1302 	umull	r1, r3, r3, r2
 8004d9a:	095b      	lsrs	r3, r3, #5
 8004d9c:	2164      	movs	r1, #100	; 0x64
 8004d9e:	fb01 f303 	mul.w	r3, r1, r3
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	011b      	lsls	r3, r3, #4
 8004da6:	3332      	adds	r3, #50	; 0x32
 8004da8:	4a08      	ldr	r2, [pc, #32]	; (8004dcc <UART_SetConfig+0x4e4>)
 8004daa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dae:	095b      	lsrs	r3, r3, #5
 8004db0:	f003 020f 	and.w	r2, r3, #15
 8004db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4422      	add	r2, r4
 8004dbc:	609a      	str	r2, [r3, #8]
}
 8004dbe:	bf00      	nop
 8004dc0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dca:	bf00      	nop
 8004dcc:	51eb851f 	.word	0x51eb851f

08004dd0 <__errno>:
 8004dd0:	4b01      	ldr	r3, [pc, #4]	; (8004dd8 <__errno+0x8>)
 8004dd2:	6818      	ldr	r0, [r3, #0]
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	20000010 	.word	0x20000010

08004ddc <__libc_init_array>:
 8004ddc:	b570      	push	{r4, r5, r6, lr}
 8004dde:	4d0d      	ldr	r5, [pc, #52]	; (8004e14 <__libc_init_array+0x38>)
 8004de0:	4c0d      	ldr	r4, [pc, #52]	; (8004e18 <__libc_init_array+0x3c>)
 8004de2:	1b64      	subs	r4, r4, r5
 8004de4:	10a4      	asrs	r4, r4, #2
 8004de6:	2600      	movs	r6, #0
 8004de8:	42a6      	cmp	r6, r4
 8004dea:	d109      	bne.n	8004e00 <__libc_init_array+0x24>
 8004dec:	4d0b      	ldr	r5, [pc, #44]	; (8004e1c <__libc_init_array+0x40>)
 8004dee:	4c0c      	ldr	r4, [pc, #48]	; (8004e20 <__libc_init_array+0x44>)
 8004df0:	f002 ff04 	bl	8007bfc <_init>
 8004df4:	1b64      	subs	r4, r4, r5
 8004df6:	10a4      	asrs	r4, r4, #2
 8004df8:	2600      	movs	r6, #0
 8004dfa:	42a6      	cmp	r6, r4
 8004dfc:	d105      	bne.n	8004e0a <__libc_init_array+0x2e>
 8004dfe:	bd70      	pop	{r4, r5, r6, pc}
 8004e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e04:	4798      	blx	r3
 8004e06:	3601      	adds	r6, #1
 8004e08:	e7ee      	b.n	8004de8 <__libc_init_array+0xc>
 8004e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e0e:	4798      	blx	r3
 8004e10:	3601      	adds	r6, #1
 8004e12:	e7f2      	b.n	8004dfa <__libc_init_array+0x1e>
 8004e14:	0800804c 	.word	0x0800804c
 8004e18:	0800804c 	.word	0x0800804c
 8004e1c:	0800804c 	.word	0x0800804c
 8004e20:	08008050 	.word	0x08008050

08004e24 <memcpy>:
 8004e24:	440a      	add	r2, r1
 8004e26:	4291      	cmp	r1, r2
 8004e28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004e2c:	d100      	bne.n	8004e30 <memcpy+0xc>
 8004e2e:	4770      	bx	lr
 8004e30:	b510      	push	{r4, lr}
 8004e32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e3a:	4291      	cmp	r1, r2
 8004e3c:	d1f9      	bne.n	8004e32 <memcpy+0xe>
 8004e3e:	bd10      	pop	{r4, pc}

08004e40 <memset>:
 8004e40:	4402      	add	r2, r0
 8004e42:	4603      	mov	r3, r0
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d100      	bne.n	8004e4a <memset+0xa>
 8004e48:	4770      	bx	lr
 8004e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e4e:	e7f9      	b.n	8004e44 <memset+0x4>

08004e50 <__cvt>:
 8004e50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e54:	ec55 4b10 	vmov	r4, r5, d0
 8004e58:	2d00      	cmp	r5, #0
 8004e5a:	460e      	mov	r6, r1
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	462b      	mov	r3, r5
 8004e60:	bfbb      	ittet	lt
 8004e62:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004e66:	461d      	movlt	r5, r3
 8004e68:	2300      	movge	r3, #0
 8004e6a:	232d      	movlt	r3, #45	; 0x2d
 8004e6c:	700b      	strb	r3, [r1, #0]
 8004e6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e70:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004e74:	4691      	mov	r9, r2
 8004e76:	f023 0820 	bic.w	r8, r3, #32
 8004e7a:	bfbc      	itt	lt
 8004e7c:	4622      	movlt	r2, r4
 8004e7e:	4614      	movlt	r4, r2
 8004e80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e84:	d005      	beq.n	8004e92 <__cvt+0x42>
 8004e86:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004e8a:	d100      	bne.n	8004e8e <__cvt+0x3e>
 8004e8c:	3601      	adds	r6, #1
 8004e8e:	2102      	movs	r1, #2
 8004e90:	e000      	b.n	8004e94 <__cvt+0x44>
 8004e92:	2103      	movs	r1, #3
 8004e94:	ab03      	add	r3, sp, #12
 8004e96:	9301      	str	r3, [sp, #4]
 8004e98:	ab02      	add	r3, sp, #8
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	ec45 4b10 	vmov	d0, r4, r5
 8004ea0:	4653      	mov	r3, sl
 8004ea2:	4632      	mov	r2, r6
 8004ea4:	f000 fcec 	bl	8005880 <_dtoa_r>
 8004ea8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004eac:	4607      	mov	r7, r0
 8004eae:	d102      	bne.n	8004eb6 <__cvt+0x66>
 8004eb0:	f019 0f01 	tst.w	r9, #1
 8004eb4:	d022      	beq.n	8004efc <__cvt+0xac>
 8004eb6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004eba:	eb07 0906 	add.w	r9, r7, r6
 8004ebe:	d110      	bne.n	8004ee2 <__cvt+0x92>
 8004ec0:	783b      	ldrb	r3, [r7, #0]
 8004ec2:	2b30      	cmp	r3, #48	; 0x30
 8004ec4:	d10a      	bne.n	8004edc <__cvt+0x8c>
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	2300      	movs	r3, #0
 8004eca:	4620      	mov	r0, r4
 8004ecc:	4629      	mov	r1, r5
 8004ece:	f7fb fe03 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ed2:	b918      	cbnz	r0, 8004edc <__cvt+0x8c>
 8004ed4:	f1c6 0601 	rsb	r6, r6, #1
 8004ed8:	f8ca 6000 	str.w	r6, [sl]
 8004edc:	f8da 3000 	ldr.w	r3, [sl]
 8004ee0:	4499      	add	r9, r3
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	4629      	mov	r1, r5
 8004eea:	f7fb fdf5 	bl	8000ad8 <__aeabi_dcmpeq>
 8004eee:	b108      	cbz	r0, 8004ef4 <__cvt+0xa4>
 8004ef0:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ef4:	2230      	movs	r2, #48	; 0x30
 8004ef6:	9b03      	ldr	r3, [sp, #12]
 8004ef8:	454b      	cmp	r3, r9
 8004efa:	d307      	bcc.n	8004f0c <__cvt+0xbc>
 8004efc:	9b03      	ldr	r3, [sp, #12]
 8004efe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f00:	1bdb      	subs	r3, r3, r7
 8004f02:	4638      	mov	r0, r7
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	b004      	add	sp, #16
 8004f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f0c:	1c59      	adds	r1, r3, #1
 8004f0e:	9103      	str	r1, [sp, #12]
 8004f10:	701a      	strb	r2, [r3, #0]
 8004f12:	e7f0      	b.n	8004ef6 <__cvt+0xa6>

08004f14 <__exponent>:
 8004f14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f16:	4603      	mov	r3, r0
 8004f18:	2900      	cmp	r1, #0
 8004f1a:	bfb8      	it	lt
 8004f1c:	4249      	neglt	r1, r1
 8004f1e:	f803 2b02 	strb.w	r2, [r3], #2
 8004f22:	bfb4      	ite	lt
 8004f24:	222d      	movlt	r2, #45	; 0x2d
 8004f26:	222b      	movge	r2, #43	; 0x2b
 8004f28:	2909      	cmp	r1, #9
 8004f2a:	7042      	strb	r2, [r0, #1]
 8004f2c:	dd2a      	ble.n	8004f84 <__exponent+0x70>
 8004f2e:	f10d 0407 	add.w	r4, sp, #7
 8004f32:	46a4      	mov	ip, r4
 8004f34:	270a      	movs	r7, #10
 8004f36:	46a6      	mov	lr, r4
 8004f38:	460a      	mov	r2, r1
 8004f3a:	fb91 f6f7 	sdiv	r6, r1, r7
 8004f3e:	fb07 1516 	mls	r5, r7, r6, r1
 8004f42:	3530      	adds	r5, #48	; 0x30
 8004f44:	2a63      	cmp	r2, #99	; 0x63
 8004f46:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004f4a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004f4e:	4631      	mov	r1, r6
 8004f50:	dcf1      	bgt.n	8004f36 <__exponent+0x22>
 8004f52:	3130      	adds	r1, #48	; 0x30
 8004f54:	f1ae 0502 	sub.w	r5, lr, #2
 8004f58:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004f5c:	1c44      	adds	r4, r0, #1
 8004f5e:	4629      	mov	r1, r5
 8004f60:	4561      	cmp	r1, ip
 8004f62:	d30a      	bcc.n	8004f7a <__exponent+0x66>
 8004f64:	f10d 0209 	add.w	r2, sp, #9
 8004f68:	eba2 020e 	sub.w	r2, r2, lr
 8004f6c:	4565      	cmp	r5, ip
 8004f6e:	bf88      	it	hi
 8004f70:	2200      	movhi	r2, #0
 8004f72:	4413      	add	r3, r2
 8004f74:	1a18      	subs	r0, r3, r0
 8004f76:	b003      	add	sp, #12
 8004f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f7e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004f82:	e7ed      	b.n	8004f60 <__exponent+0x4c>
 8004f84:	2330      	movs	r3, #48	; 0x30
 8004f86:	3130      	adds	r1, #48	; 0x30
 8004f88:	7083      	strb	r3, [r0, #2]
 8004f8a:	70c1      	strb	r1, [r0, #3]
 8004f8c:	1d03      	adds	r3, r0, #4
 8004f8e:	e7f1      	b.n	8004f74 <__exponent+0x60>

08004f90 <_printf_float>:
 8004f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f94:	ed2d 8b02 	vpush	{d8}
 8004f98:	b08d      	sub	sp, #52	; 0x34
 8004f9a:	460c      	mov	r4, r1
 8004f9c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004fa0:	4616      	mov	r6, r2
 8004fa2:	461f      	mov	r7, r3
 8004fa4:	4605      	mov	r5, r0
 8004fa6:	f001 fa59 	bl	800645c <_localeconv_r>
 8004faa:	f8d0 a000 	ldr.w	sl, [r0]
 8004fae:	4650      	mov	r0, sl
 8004fb0:	f7fb f916 	bl	80001e0 <strlen>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	930a      	str	r3, [sp, #40]	; 0x28
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	9305      	str	r3, [sp, #20]
 8004fbc:	f8d8 3000 	ldr.w	r3, [r8]
 8004fc0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004fc4:	3307      	adds	r3, #7
 8004fc6:	f023 0307 	bic.w	r3, r3, #7
 8004fca:	f103 0208 	add.w	r2, r3, #8
 8004fce:	f8c8 2000 	str.w	r2, [r8]
 8004fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004fda:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004fde:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004fe2:	9307      	str	r3, [sp, #28]
 8004fe4:	f8cd 8018 	str.w	r8, [sp, #24]
 8004fe8:	ee08 0a10 	vmov	s16, r0
 8004fec:	4b9f      	ldr	r3, [pc, #636]	; (800526c <_printf_float+0x2dc>)
 8004fee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ff2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ff6:	f7fb fda1 	bl	8000b3c <__aeabi_dcmpun>
 8004ffa:	bb88      	cbnz	r0, 8005060 <_printf_float+0xd0>
 8004ffc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005000:	4b9a      	ldr	r3, [pc, #616]	; (800526c <_printf_float+0x2dc>)
 8005002:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005006:	f7fb fd7b 	bl	8000b00 <__aeabi_dcmple>
 800500a:	bb48      	cbnz	r0, 8005060 <_printf_float+0xd0>
 800500c:	2200      	movs	r2, #0
 800500e:	2300      	movs	r3, #0
 8005010:	4640      	mov	r0, r8
 8005012:	4649      	mov	r1, r9
 8005014:	f7fb fd6a 	bl	8000aec <__aeabi_dcmplt>
 8005018:	b110      	cbz	r0, 8005020 <_printf_float+0x90>
 800501a:	232d      	movs	r3, #45	; 0x2d
 800501c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005020:	4b93      	ldr	r3, [pc, #588]	; (8005270 <_printf_float+0x2e0>)
 8005022:	4894      	ldr	r0, [pc, #592]	; (8005274 <_printf_float+0x2e4>)
 8005024:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005028:	bf94      	ite	ls
 800502a:	4698      	movls	r8, r3
 800502c:	4680      	movhi	r8, r0
 800502e:	2303      	movs	r3, #3
 8005030:	6123      	str	r3, [r4, #16]
 8005032:	9b05      	ldr	r3, [sp, #20]
 8005034:	f023 0204 	bic.w	r2, r3, #4
 8005038:	6022      	str	r2, [r4, #0]
 800503a:	f04f 0900 	mov.w	r9, #0
 800503e:	9700      	str	r7, [sp, #0]
 8005040:	4633      	mov	r3, r6
 8005042:	aa0b      	add	r2, sp, #44	; 0x2c
 8005044:	4621      	mov	r1, r4
 8005046:	4628      	mov	r0, r5
 8005048:	f000 f9d8 	bl	80053fc <_printf_common>
 800504c:	3001      	adds	r0, #1
 800504e:	f040 8090 	bne.w	8005172 <_printf_float+0x1e2>
 8005052:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005056:	b00d      	add	sp, #52	; 0x34
 8005058:	ecbd 8b02 	vpop	{d8}
 800505c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005060:	4642      	mov	r2, r8
 8005062:	464b      	mov	r3, r9
 8005064:	4640      	mov	r0, r8
 8005066:	4649      	mov	r1, r9
 8005068:	f7fb fd68 	bl	8000b3c <__aeabi_dcmpun>
 800506c:	b140      	cbz	r0, 8005080 <_printf_float+0xf0>
 800506e:	464b      	mov	r3, r9
 8005070:	2b00      	cmp	r3, #0
 8005072:	bfbc      	itt	lt
 8005074:	232d      	movlt	r3, #45	; 0x2d
 8005076:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800507a:	487f      	ldr	r0, [pc, #508]	; (8005278 <_printf_float+0x2e8>)
 800507c:	4b7f      	ldr	r3, [pc, #508]	; (800527c <_printf_float+0x2ec>)
 800507e:	e7d1      	b.n	8005024 <_printf_float+0x94>
 8005080:	6863      	ldr	r3, [r4, #4]
 8005082:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005086:	9206      	str	r2, [sp, #24]
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	d13f      	bne.n	800510c <_printf_float+0x17c>
 800508c:	2306      	movs	r3, #6
 800508e:	6063      	str	r3, [r4, #4]
 8005090:	9b05      	ldr	r3, [sp, #20]
 8005092:	6861      	ldr	r1, [r4, #4]
 8005094:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005098:	2300      	movs	r3, #0
 800509a:	9303      	str	r3, [sp, #12]
 800509c:	ab0a      	add	r3, sp, #40	; 0x28
 800509e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80050a2:	ab09      	add	r3, sp, #36	; 0x24
 80050a4:	ec49 8b10 	vmov	d0, r8, r9
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	6022      	str	r2, [r4, #0]
 80050ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80050b0:	4628      	mov	r0, r5
 80050b2:	f7ff fecd 	bl	8004e50 <__cvt>
 80050b6:	9b06      	ldr	r3, [sp, #24]
 80050b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050ba:	2b47      	cmp	r3, #71	; 0x47
 80050bc:	4680      	mov	r8, r0
 80050be:	d108      	bne.n	80050d2 <_printf_float+0x142>
 80050c0:	1cc8      	adds	r0, r1, #3
 80050c2:	db02      	blt.n	80050ca <_printf_float+0x13a>
 80050c4:	6863      	ldr	r3, [r4, #4]
 80050c6:	4299      	cmp	r1, r3
 80050c8:	dd41      	ble.n	800514e <_printf_float+0x1be>
 80050ca:	f1ab 0b02 	sub.w	fp, fp, #2
 80050ce:	fa5f fb8b 	uxtb.w	fp, fp
 80050d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80050d6:	d820      	bhi.n	800511a <_printf_float+0x18a>
 80050d8:	3901      	subs	r1, #1
 80050da:	465a      	mov	r2, fp
 80050dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80050e0:	9109      	str	r1, [sp, #36]	; 0x24
 80050e2:	f7ff ff17 	bl	8004f14 <__exponent>
 80050e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050e8:	1813      	adds	r3, r2, r0
 80050ea:	2a01      	cmp	r2, #1
 80050ec:	4681      	mov	r9, r0
 80050ee:	6123      	str	r3, [r4, #16]
 80050f0:	dc02      	bgt.n	80050f8 <_printf_float+0x168>
 80050f2:	6822      	ldr	r2, [r4, #0]
 80050f4:	07d2      	lsls	r2, r2, #31
 80050f6:	d501      	bpl.n	80050fc <_printf_float+0x16c>
 80050f8:	3301      	adds	r3, #1
 80050fa:	6123      	str	r3, [r4, #16]
 80050fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005100:	2b00      	cmp	r3, #0
 8005102:	d09c      	beq.n	800503e <_printf_float+0xae>
 8005104:	232d      	movs	r3, #45	; 0x2d
 8005106:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800510a:	e798      	b.n	800503e <_printf_float+0xae>
 800510c:	9a06      	ldr	r2, [sp, #24]
 800510e:	2a47      	cmp	r2, #71	; 0x47
 8005110:	d1be      	bne.n	8005090 <_printf_float+0x100>
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1bc      	bne.n	8005090 <_printf_float+0x100>
 8005116:	2301      	movs	r3, #1
 8005118:	e7b9      	b.n	800508e <_printf_float+0xfe>
 800511a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800511e:	d118      	bne.n	8005152 <_printf_float+0x1c2>
 8005120:	2900      	cmp	r1, #0
 8005122:	6863      	ldr	r3, [r4, #4]
 8005124:	dd0b      	ble.n	800513e <_printf_float+0x1ae>
 8005126:	6121      	str	r1, [r4, #16]
 8005128:	b913      	cbnz	r3, 8005130 <_printf_float+0x1a0>
 800512a:	6822      	ldr	r2, [r4, #0]
 800512c:	07d0      	lsls	r0, r2, #31
 800512e:	d502      	bpl.n	8005136 <_printf_float+0x1a6>
 8005130:	3301      	adds	r3, #1
 8005132:	440b      	add	r3, r1
 8005134:	6123      	str	r3, [r4, #16]
 8005136:	65a1      	str	r1, [r4, #88]	; 0x58
 8005138:	f04f 0900 	mov.w	r9, #0
 800513c:	e7de      	b.n	80050fc <_printf_float+0x16c>
 800513e:	b913      	cbnz	r3, 8005146 <_printf_float+0x1b6>
 8005140:	6822      	ldr	r2, [r4, #0]
 8005142:	07d2      	lsls	r2, r2, #31
 8005144:	d501      	bpl.n	800514a <_printf_float+0x1ba>
 8005146:	3302      	adds	r3, #2
 8005148:	e7f4      	b.n	8005134 <_printf_float+0x1a4>
 800514a:	2301      	movs	r3, #1
 800514c:	e7f2      	b.n	8005134 <_printf_float+0x1a4>
 800514e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005154:	4299      	cmp	r1, r3
 8005156:	db05      	blt.n	8005164 <_printf_float+0x1d4>
 8005158:	6823      	ldr	r3, [r4, #0]
 800515a:	6121      	str	r1, [r4, #16]
 800515c:	07d8      	lsls	r0, r3, #31
 800515e:	d5ea      	bpl.n	8005136 <_printf_float+0x1a6>
 8005160:	1c4b      	adds	r3, r1, #1
 8005162:	e7e7      	b.n	8005134 <_printf_float+0x1a4>
 8005164:	2900      	cmp	r1, #0
 8005166:	bfd4      	ite	le
 8005168:	f1c1 0202 	rsble	r2, r1, #2
 800516c:	2201      	movgt	r2, #1
 800516e:	4413      	add	r3, r2
 8005170:	e7e0      	b.n	8005134 <_printf_float+0x1a4>
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	055a      	lsls	r2, r3, #21
 8005176:	d407      	bmi.n	8005188 <_printf_float+0x1f8>
 8005178:	6923      	ldr	r3, [r4, #16]
 800517a:	4642      	mov	r2, r8
 800517c:	4631      	mov	r1, r6
 800517e:	4628      	mov	r0, r5
 8005180:	47b8      	blx	r7
 8005182:	3001      	adds	r0, #1
 8005184:	d12c      	bne.n	80051e0 <_printf_float+0x250>
 8005186:	e764      	b.n	8005052 <_printf_float+0xc2>
 8005188:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800518c:	f240 80e0 	bls.w	8005350 <_printf_float+0x3c0>
 8005190:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005194:	2200      	movs	r2, #0
 8005196:	2300      	movs	r3, #0
 8005198:	f7fb fc9e 	bl	8000ad8 <__aeabi_dcmpeq>
 800519c:	2800      	cmp	r0, #0
 800519e:	d034      	beq.n	800520a <_printf_float+0x27a>
 80051a0:	4a37      	ldr	r2, [pc, #220]	; (8005280 <_printf_float+0x2f0>)
 80051a2:	2301      	movs	r3, #1
 80051a4:	4631      	mov	r1, r6
 80051a6:	4628      	mov	r0, r5
 80051a8:	47b8      	blx	r7
 80051aa:	3001      	adds	r0, #1
 80051ac:	f43f af51 	beq.w	8005052 <_printf_float+0xc2>
 80051b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051b4:	429a      	cmp	r2, r3
 80051b6:	db02      	blt.n	80051be <_printf_float+0x22e>
 80051b8:	6823      	ldr	r3, [r4, #0]
 80051ba:	07d8      	lsls	r0, r3, #31
 80051bc:	d510      	bpl.n	80051e0 <_printf_float+0x250>
 80051be:	ee18 3a10 	vmov	r3, s16
 80051c2:	4652      	mov	r2, sl
 80051c4:	4631      	mov	r1, r6
 80051c6:	4628      	mov	r0, r5
 80051c8:	47b8      	blx	r7
 80051ca:	3001      	adds	r0, #1
 80051cc:	f43f af41 	beq.w	8005052 <_printf_float+0xc2>
 80051d0:	f04f 0800 	mov.w	r8, #0
 80051d4:	f104 091a 	add.w	r9, r4, #26
 80051d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051da:	3b01      	subs	r3, #1
 80051dc:	4543      	cmp	r3, r8
 80051de:	dc09      	bgt.n	80051f4 <_printf_float+0x264>
 80051e0:	6823      	ldr	r3, [r4, #0]
 80051e2:	079b      	lsls	r3, r3, #30
 80051e4:	f100 8105 	bmi.w	80053f2 <_printf_float+0x462>
 80051e8:	68e0      	ldr	r0, [r4, #12]
 80051ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051ec:	4298      	cmp	r0, r3
 80051ee:	bfb8      	it	lt
 80051f0:	4618      	movlt	r0, r3
 80051f2:	e730      	b.n	8005056 <_printf_float+0xc6>
 80051f4:	2301      	movs	r3, #1
 80051f6:	464a      	mov	r2, r9
 80051f8:	4631      	mov	r1, r6
 80051fa:	4628      	mov	r0, r5
 80051fc:	47b8      	blx	r7
 80051fe:	3001      	adds	r0, #1
 8005200:	f43f af27 	beq.w	8005052 <_printf_float+0xc2>
 8005204:	f108 0801 	add.w	r8, r8, #1
 8005208:	e7e6      	b.n	80051d8 <_printf_float+0x248>
 800520a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800520c:	2b00      	cmp	r3, #0
 800520e:	dc39      	bgt.n	8005284 <_printf_float+0x2f4>
 8005210:	4a1b      	ldr	r2, [pc, #108]	; (8005280 <_printf_float+0x2f0>)
 8005212:	2301      	movs	r3, #1
 8005214:	4631      	mov	r1, r6
 8005216:	4628      	mov	r0, r5
 8005218:	47b8      	blx	r7
 800521a:	3001      	adds	r0, #1
 800521c:	f43f af19 	beq.w	8005052 <_printf_float+0xc2>
 8005220:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005224:	4313      	orrs	r3, r2
 8005226:	d102      	bne.n	800522e <_printf_float+0x29e>
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	07d9      	lsls	r1, r3, #31
 800522c:	d5d8      	bpl.n	80051e0 <_printf_float+0x250>
 800522e:	ee18 3a10 	vmov	r3, s16
 8005232:	4652      	mov	r2, sl
 8005234:	4631      	mov	r1, r6
 8005236:	4628      	mov	r0, r5
 8005238:	47b8      	blx	r7
 800523a:	3001      	adds	r0, #1
 800523c:	f43f af09 	beq.w	8005052 <_printf_float+0xc2>
 8005240:	f04f 0900 	mov.w	r9, #0
 8005244:	f104 0a1a 	add.w	sl, r4, #26
 8005248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800524a:	425b      	negs	r3, r3
 800524c:	454b      	cmp	r3, r9
 800524e:	dc01      	bgt.n	8005254 <_printf_float+0x2c4>
 8005250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005252:	e792      	b.n	800517a <_printf_float+0x1ea>
 8005254:	2301      	movs	r3, #1
 8005256:	4652      	mov	r2, sl
 8005258:	4631      	mov	r1, r6
 800525a:	4628      	mov	r0, r5
 800525c:	47b8      	blx	r7
 800525e:	3001      	adds	r0, #1
 8005260:	f43f aef7 	beq.w	8005052 <_printf_float+0xc2>
 8005264:	f109 0901 	add.w	r9, r9, #1
 8005268:	e7ee      	b.n	8005248 <_printf_float+0x2b8>
 800526a:	bf00      	nop
 800526c:	7fefffff 	.word	0x7fefffff
 8005270:	08007c70 	.word	0x08007c70
 8005274:	08007c74 	.word	0x08007c74
 8005278:	08007c7c 	.word	0x08007c7c
 800527c:	08007c78 	.word	0x08007c78
 8005280:	08007c80 	.word	0x08007c80
 8005284:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005286:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005288:	429a      	cmp	r2, r3
 800528a:	bfa8      	it	ge
 800528c:	461a      	movge	r2, r3
 800528e:	2a00      	cmp	r2, #0
 8005290:	4691      	mov	r9, r2
 8005292:	dc37      	bgt.n	8005304 <_printf_float+0x374>
 8005294:	f04f 0b00 	mov.w	fp, #0
 8005298:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800529c:	f104 021a 	add.w	r2, r4, #26
 80052a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052a2:	9305      	str	r3, [sp, #20]
 80052a4:	eba3 0309 	sub.w	r3, r3, r9
 80052a8:	455b      	cmp	r3, fp
 80052aa:	dc33      	bgt.n	8005314 <_printf_float+0x384>
 80052ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052b0:	429a      	cmp	r2, r3
 80052b2:	db3b      	blt.n	800532c <_printf_float+0x39c>
 80052b4:	6823      	ldr	r3, [r4, #0]
 80052b6:	07da      	lsls	r2, r3, #31
 80052b8:	d438      	bmi.n	800532c <_printf_float+0x39c>
 80052ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052bc:	9a05      	ldr	r2, [sp, #20]
 80052be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052c0:	1a9a      	subs	r2, r3, r2
 80052c2:	eba3 0901 	sub.w	r9, r3, r1
 80052c6:	4591      	cmp	r9, r2
 80052c8:	bfa8      	it	ge
 80052ca:	4691      	movge	r9, r2
 80052cc:	f1b9 0f00 	cmp.w	r9, #0
 80052d0:	dc35      	bgt.n	800533e <_printf_float+0x3ae>
 80052d2:	f04f 0800 	mov.w	r8, #0
 80052d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052da:	f104 0a1a 	add.w	sl, r4, #26
 80052de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052e2:	1a9b      	subs	r3, r3, r2
 80052e4:	eba3 0309 	sub.w	r3, r3, r9
 80052e8:	4543      	cmp	r3, r8
 80052ea:	f77f af79 	ble.w	80051e0 <_printf_float+0x250>
 80052ee:	2301      	movs	r3, #1
 80052f0:	4652      	mov	r2, sl
 80052f2:	4631      	mov	r1, r6
 80052f4:	4628      	mov	r0, r5
 80052f6:	47b8      	blx	r7
 80052f8:	3001      	adds	r0, #1
 80052fa:	f43f aeaa 	beq.w	8005052 <_printf_float+0xc2>
 80052fe:	f108 0801 	add.w	r8, r8, #1
 8005302:	e7ec      	b.n	80052de <_printf_float+0x34e>
 8005304:	4613      	mov	r3, r2
 8005306:	4631      	mov	r1, r6
 8005308:	4642      	mov	r2, r8
 800530a:	4628      	mov	r0, r5
 800530c:	47b8      	blx	r7
 800530e:	3001      	adds	r0, #1
 8005310:	d1c0      	bne.n	8005294 <_printf_float+0x304>
 8005312:	e69e      	b.n	8005052 <_printf_float+0xc2>
 8005314:	2301      	movs	r3, #1
 8005316:	4631      	mov	r1, r6
 8005318:	4628      	mov	r0, r5
 800531a:	9205      	str	r2, [sp, #20]
 800531c:	47b8      	blx	r7
 800531e:	3001      	adds	r0, #1
 8005320:	f43f ae97 	beq.w	8005052 <_printf_float+0xc2>
 8005324:	9a05      	ldr	r2, [sp, #20]
 8005326:	f10b 0b01 	add.w	fp, fp, #1
 800532a:	e7b9      	b.n	80052a0 <_printf_float+0x310>
 800532c:	ee18 3a10 	vmov	r3, s16
 8005330:	4652      	mov	r2, sl
 8005332:	4631      	mov	r1, r6
 8005334:	4628      	mov	r0, r5
 8005336:	47b8      	blx	r7
 8005338:	3001      	adds	r0, #1
 800533a:	d1be      	bne.n	80052ba <_printf_float+0x32a>
 800533c:	e689      	b.n	8005052 <_printf_float+0xc2>
 800533e:	9a05      	ldr	r2, [sp, #20]
 8005340:	464b      	mov	r3, r9
 8005342:	4442      	add	r2, r8
 8005344:	4631      	mov	r1, r6
 8005346:	4628      	mov	r0, r5
 8005348:	47b8      	blx	r7
 800534a:	3001      	adds	r0, #1
 800534c:	d1c1      	bne.n	80052d2 <_printf_float+0x342>
 800534e:	e680      	b.n	8005052 <_printf_float+0xc2>
 8005350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005352:	2a01      	cmp	r2, #1
 8005354:	dc01      	bgt.n	800535a <_printf_float+0x3ca>
 8005356:	07db      	lsls	r3, r3, #31
 8005358:	d538      	bpl.n	80053cc <_printf_float+0x43c>
 800535a:	2301      	movs	r3, #1
 800535c:	4642      	mov	r2, r8
 800535e:	4631      	mov	r1, r6
 8005360:	4628      	mov	r0, r5
 8005362:	47b8      	blx	r7
 8005364:	3001      	adds	r0, #1
 8005366:	f43f ae74 	beq.w	8005052 <_printf_float+0xc2>
 800536a:	ee18 3a10 	vmov	r3, s16
 800536e:	4652      	mov	r2, sl
 8005370:	4631      	mov	r1, r6
 8005372:	4628      	mov	r0, r5
 8005374:	47b8      	blx	r7
 8005376:	3001      	adds	r0, #1
 8005378:	f43f ae6b 	beq.w	8005052 <_printf_float+0xc2>
 800537c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005380:	2200      	movs	r2, #0
 8005382:	2300      	movs	r3, #0
 8005384:	f7fb fba8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005388:	b9d8      	cbnz	r0, 80053c2 <_printf_float+0x432>
 800538a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800538c:	f108 0201 	add.w	r2, r8, #1
 8005390:	3b01      	subs	r3, #1
 8005392:	4631      	mov	r1, r6
 8005394:	4628      	mov	r0, r5
 8005396:	47b8      	blx	r7
 8005398:	3001      	adds	r0, #1
 800539a:	d10e      	bne.n	80053ba <_printf_float+0x42a>
 800539c:	e659      	b.n	8005052 <_printf_float+0xc2>
 800539e:	2301      	movs	r3, #1
 80053a0:	4652      	mov	r2, sl
 80053a2:	4631      	mov	r1, r6
 80053a4:	4628      	mov	r0, r5
 80053a6:	47b8      	blx	r7
 80053a8:	3001      	adds	r0, #1
 80053aa:	f43f ae52 	beq.w	8005052 <_printf_float+0xc2>
 80053ae:	f108 0801 	add.w	r8, r8, #1
 80053b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053b4:	3b01      	subs	r3, #1
 80053b6:	4543      	cmp	r3, r8
 80053b8:	dcf1      	bgt.n	800539e <_printf_float+0x40e>
 80053ba:	464b      	mov	r3, r9
 80053bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80053c0:	e6dc      	b.n	800517c <_printf_float+0x1ec>
 80053c2:	f04f 0800 	mov.w	r8, #0
 80053c6:	f104 0a1a 	add.w	sl, r4, #26
 80053ca:	e7f2      	b.n	80053b2 <_printf_float+0x422>
 80053cc:	2301      	movs	r3, #1
 80053ce:	4642      	mov	r2, r8
 80053d0:	e7df      	b.n	8005392 <_printf_float+0x402>
 80053d2:	2301      	movs	r3, #1
 80053d4:	464a      	mov	r2, r9
 80053d6:	4631      	mov	r1, r6
 80053d8:	4628      	mov	r0, r5
 80053da:	47b8      	blx	r7
 80053dc:	3001      	adds	r0, #1
 80053de:	f43f ae38 	beq.w	8005052 <_printf_float+0xc2>
 80053e2:	f108 0801 	add.w	r8, r8, #1
 80053e6:	68e3      	ldr	r3, [r4, #12]
 80053e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053ea:	1a5b      	subs	r3, r3, r1
 80053ec:	4543      	cmp	r3, r8
 80053ee:	dcf0      	bgt.n	80053d2 <_printf_float+0x442>
 80053f0:	e6fa      	b.n	80051e8 <_printf_float+0x258>
 80053f2:	f04f 0800 	mov.w	r8, #0
 80053f6:	f104 0919 	add.w	r9, r4, #25
 80053fa:	e7f4      	b.n	80053e6 <_printf_float+0x456>

080053fc <_printf_common>:
 80053fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005400:	4616      	mov	r6, r2
 8005402:	4699      	mov	r9, r3
 8005404:	688a      	ldr	r2, [r1, #8]
 8005406:	690b      	ldr	r3, [r1, #16]
 8005408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800540c:	4293      	cmp	r3, r2
 800540e:	bfb8      	it	lt
 8005410:	4613      	movlt	r3, r2
 8005412:	6033      	str	r3, [r6, #0]
 8005414:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005418:	4607      	mov	r7, r0
 800541a:	460c      	mov	r4, r1
 800541c:	b10a      	cbz	r2, 8005422 <_printf_common+0x26>
 800541e:	3301      	adds	r3, #1
 8005420:	6033      	str	r3, [r6, #0]
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	0699      	lsls	r1, r3, #26
 8005426:	bf42      	ittt	mi
 8005428:	6833      	ldrmi	r3, [r6, #0]
 800542a:	3302      	addmi	r3, #2
 800542c:	6033      	strmi	r3, [r6, #0]
 800542e:	6825      	ldr	r5, [r4, #0]
 8005430:	f015 0506 	ands.w	r5, r5, #6
 8005434:	d106      	bne.n	8005444 <_printf_common+0x48>
 8005436:	f104 0a19 	add.w	sl, r4, #25
 800543a:	68e3      	ldr	r3, [r4, #12]
 800543c:	6832      	ldr	r2, [r6, #0]
 800543e:	1a9b      	subs	r3, r3, r2
 8005440:	42ab      	cmp	r3, r5
 8005442:	dc26      	bgt.n	8005492 <_printf_common+0x96>
 8005444:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005448:	1e13      	subs	r3, r2, #0
 800544a:	6822      	ldr	r2, [r4, #0]
 800544c:	bf18      	it	ne
 800544e:	2301      	movne	r3, #1
 8005450:	0692      	lsls	r2, r2, #26
 8005452:	d42b      	bmi.n	80054ac <_printf_common+0xb0>
 8005454:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005458:	4649      	mov	r1, r9
 800545a:	4638      	mov	r0, r7
 800545c:	47c0      	blx	r8
 800545e:	3001      	adds	r0, #1
 8005460:	d01e      	beq.n	80054a0 <_printf_common+0xa4>
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	68e5      	ldr	r5, [r4, #12]
 8005466:	6832      	ldr	r2, [r6, #0]
 8005468:	f003 0306 	and.w	r3, r3, #6
 800546c:	2b04      	cmp	r3, #4
 800546e:	bf08      	it	eq
 8005470:	1aad      	subeq	r5, r5, r2
 8005472:	68a3      	ldr	r3, [r4, #8]
 8005474:	6922      	ldr	r2, [r4, #16]
 8005476:	bf0c      	ite	eq
 8005478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800547c:	2500      	movne	r5, #0
 800547e:	4293      	cmp	r3, r2
 8005480:	bfc4      	itt	gt
 8005482:	1a9b      	subgt	r3, r3, r2
 8005484:	18ed      	addgt	r5, r5, r3
 8005486:	2600      	movs	r6, #0
 8005488:	341a      	adds	r4, #26
 800548a:	42b5      	cmp	r5, r6
 800548c:	d11a      	bne.n	80054c4 <_printf_common+0xc8>
 800548e:	2000      	movs	r0, #0
 8005490:	e008      	b.n	80054a4 <_printf_common+0xa8>
 8005492:	2301      	movs	r3, #1
 8005494:	4652      	mov	r2, sl
 8005496:	4649      	mov	r1, r9
 8005498:	4638      	mov	r0, r7
 800549a:	47c0      	blx	r8
 800549c:	3001      	adds	r0, #1
 800549e:	d103      	bne.n	80054a8 <_printf_common+0xac>
 80054a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a8:	3501      	adds	r5, #1
 80054aa:	e7c6      	b.n	800543a <_printf_common+0x3e>
 80054ac:	18e1      	adds	r1, r4, r3
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	2030      	movs	r0, #48	; 0x30
 80054b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054b6:	4422      	add	r2, r4
 80054b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054c0:	3302      	adds	r3, #2
 80054c2:	e7c7      	b.n	8005454 <_printf_common+0x58>
 80054c4:	2301      	movs	r3, #1
 80054c6:	4622      	mov	r2, r4
 80054c8:	4649      	mov	r1, r9
 80054ca:	4638      	mov	r0, r7
 80054cc:	47c0      	blx	r8
 80054ce:	3001      	adds	r0, #1
 80054d0:	d0e6      	beq.n	80054a0 <_printf_common+0xa4>
 80054d2:	3601      	adds	r6, #1
 80054d4:	e7d9      	b.n	800548a <_printf_common+0x8e>
	...

080054d8 <_printf_i>:
 80054d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054dc:	7e0f      	ldrb	r7, [r1, #24]
 80054de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054e0:	2f78      	cmp	r7, #120	; 0x78
 80054e2:	4691      	mov	r9, r2
 80054e4:	4680      	mov	r8, r0
 80054e6:	460c      	mov	r4, r1
 80054e8:	469a      	mov	sl, r3
 80054ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054ee:	d807      	bhi.n	8005500 <_printf_i+0x28>
 80054f0:	2f62      	cmp	r7, #98	; 0x62
 80054f2:	d80a      	bhi.n	800550a <_printf_i+0x32>
 80054f4:	2f00      	cmp	r7, #0
 80054f6:	f000 80d8 	beq.w	80056aa <_printf_i+0x1d2>
 80054fa:	2f58      	cmp	r7, #88	; 0x58
 80054fc:	f000 80a3 	beq.w	8005646 <_printf_i+0x16e>
 8005500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005504:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005508:	e03a      	b.n	8005580 <_printf_i+0xa8>
 800550a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800550e:	2b15      	cmp	r3, #21
 8005510:	d8f6      	bhi.n	8005500 <_printf_i+0x28>
 8005512:	a101      	add	r1, pc, #4	; (adr r1, 8005518 <_printf_i+0x40>)
 8005514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005518:	08005571 	.word	0x08005571
 800551c:	08005585 	.word	0x08005585
 8005520:	08005501 	.word	0x08005501
 8005524:	08005501 	.word	0x08005501
 8005528:	08005501 	.word	0x08005501
 800552c:	08005501 	.word	0x08005501
 8005530:	08005585 	.word	0x08005585
 8005534:	08005501 	.word	0x08005501
 8005538:	08005501 	.word	0x08005501
 800553c:	08005501 	.word	0x08005501
 8005540:	08005501 	.word	0x08005501
 8005544:	08005691 	.word	0x08005691
 8005548:	080055b5 	.word	0x080055b5
 800554c:	08005673 	.word	0x08005673
 8005550:	08005501 	.word	0x08005501
 8005554:	08005501 	.word	0x08005501
 8005558:	080056b3 	.word	0x080056b3
 800555c:	08005501 	.word	0x08005501
 8005560:	080055b5 	.word	0x080055b5
 8005564:	08005501 	.word	0x08005501
 8005568:	08005501 	.word	0x08005501
 800556c:	0800567b 	.word	0x0800567b
 8005570:	682b      	ldr	r3, [r5, #0]
 8005572:	1d1a      	adds	r2, r3, #4
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	602a      	str	r2, [r5, #0]
 8005578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800557c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005580:	2301      	movs	r3, #1
 8005582:	e0a3      	b.n	80056cc <_printf_i+0x1f4>
 8005584:	6820      	ldr	r0, [r4, #0]
 8005586:	6829      	ldr	r1, [r5, #0]
 8005588:	0606      	lsls	r6, r0, #24
 800558a:	f101 0304 	add.w	r3, r1, #4
 800558e:	d50a      	bpl.n	80055a6 <_printf_i+0xce>
 8005590:	680e      	ldr	r6, [r1, #0]
 8005592:	602b      	str	r3, [r5, #0]
 8005594:	2e00      	cmp	r6, #0
 8005596:	da03      	bge.n	80055a0 <_printf_i+0xc8>
 8005598:	232d      	movs	r3, #45	; 0x2d
 800559a:	4276      	negs	r6, r6
 800559c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055a0:	485e      	ldr	r0, [pc, #376]	; (800571c <_printf_i+0x244>)
 80055a2:	230a      	movs	r3, #10
 80055a4:	e019      	b.n	80055da <_printf_i+0x102>
 80055a6:	680e      	ldr	r6, [r1, #0]
 80055a8:	602b      	str	r3, [r5, #0]
 80055aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055ae:	bf18      	it	ne
 80055b0:	b236      	sxthne	r6, r6
 80055b2:	e7ef      	b.n	8005594 <_printf_i+0xbc>
 80055b4:	682b      	ldr	r3, [r5, #0]
 80055b6:	6820      	ldr	r0, [r4, #0]
 80055b8:	1d19      	adds	r1, r3, #4
 80055ba:	6029      	str	r1, [r5, #0]
 80055bc:	0601      	lsls	r1, r0, #24
 80055be:	d501      	bpl.n	80055c4 <_printf_i+0xec>
 80055c0:	681e      	ldr	r6, [r3, #0]
 80055c2:	e002      	b.n	80055ca <_printf_i+0xf2>
 80055c4:	0646      	lsls	r6, r0, #25
 80055c6:	d5fb      	bpl.n	80055c0 <_printf_i+0xe8>
 80055c8:	881e      	ldrh	r6, [r3, #0]
 80055ca:	4854      	ldr	r0, [pc, #336]	; (800571c <_printf_i+0x244>)
 80055cc:	2f6f      	cmp	r7, #111	; 0x6f
 80055ce:	bf0c      	ite	eq
 80055d0:	2308      	moveq	r3, #8
 80055d2:	230a      	movne	r3, #10
 80055d4:	2100      	movs	r1, #0
 80055d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055da:	6865      	ldr	r5, [r4, #4]
 80055dc:	60a5      	str	r5, [r4, #8]
 80055de:	2d00      	cmp	r5, #0
 80055e0:	bfa2      	ittt	ge
 80055e2:	6821      	ldrge	r1, [r4, #0]
 80055e4:	f021 0104 	bicge.w	r1, r1, #4
 80055e8:	6021      	strge	r1, [r4, #0]
 80055ea:	b90e      	cbnz	r6, 80055f0 <_printf_i+0x118>
 80055ec:	2d00      	cmp	r5, #0
 80055ee:	d04d      	beq.n	800568c <_printf_i+0x1b4>
 80055f0:	4615      	mov	r5, r2
 80055f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80055f6:	fb03 6711 	mls	r7, r3, r1, r6
 80055fa:	5dc7      	ldrb	r7, [r0, r7]
 80055fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005600:	4637      	mov	r7, r6
 8005602:	42bb      	cmp	r3, r7
 8005604:	460e      	mov	r6, r1
 8005606:	d9f4      	bls.n	80055f2 <_printf_i+0x11a>
 8005608:	2b08      	cmp	r3, #8
 800560a:	d10b      	bne.n	8005624 <_printf_i+0x14c>
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	07de      	lsls	r6, r3, #31
 8005610:	d508      	bpl.n	8005624 <_printf_i+0x14c>
 8005612:	6923      	ldr	r3, [r4, #16]
 8005614:	6861      	ldr	r1, [r4, #4]
 8005616:	4299      	cmp	r1, r3
 8005618:	bfde      	ittt	le
 800561a:	2330      	movle	r3, #48	; 0x30
 800561c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005620:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005624:	1b52      	subs	r2, r2, r5
 8005626:	6122      	str	r2, [r4, #16]
 8005628:	f8cd a000 	str.w	sl, [sp]
 800562c:	464b      	mov	r3, r9
 800562e:	aa03      	add	r2, sp, #12
 8005630:	4621      	mov	r1, r4
 8005632:	4640      	mov	r0, r8
 8005634:	f7ff fee2 	bl	80053fc <_printf_common>
 8005638:	3001      	adds	r0, #1
 800563a:	d14c      	bne.n	80056d6 <_printf_i+0x1fe>
 800563c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005640:	b004      	add	sp, #16
 8005642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005646:	4835      	ldr	r0, [pc, #212]	; (800571c <_printf_i+0x244>)
 8005648:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800564c:	6829      	ldr	r1, [r5, #0]
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	f851 6b04 	ldr.w	r6, [r1], #4
 8005654:	6029      	str	r1, [r5, #0]
 8005656:	061d      	lsls	r5, r3, #24
 8005658:	d514      	bpl.n	8005684 <_printf_i+0x1ac>
 800565a:	07df      	lsls	r7, r3, #31
 800565c:	bf44      	itt	mi
 800565e:	f043 0320 	orrmi.w	r3, r3, #32
 8005662:	6023      	strmi	r3, [r4, #0]
 8005664:	b91e      	cbnz	r6, 800566e <_printf_i+0x196>
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	f023 0320 	bic.w	r3, r3, #32
 800566c:	6023      	str	r3, [r4, #0]
 800566e:	2310      	movs	r3, #16
 8005670:	e7b0      	b.n	80055d4 <_printf_i+0xfc>
 8005672:	6823      	ldr	r3, [r4, #0]
 8005674:	f043 0320 	orr.w	r3, r3, #32
 8005678:	6023      	str	r3, [r4, #0]
 800567a:	2378      	movs	r3, #120	; 0x78
 800567c:	4828      	ldr	r0, [pc, #160]	; (8005720 <_printf_i+0x248>)
 800567e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005682:	e7e3      	b.n	800564c <_printf_i+0x174>
 8005684:	0659      	lsls	r1, r3, #25
 8005686:	bf48      	it	mi
 8005688:	b2b6      	uxthmi	r6, r6
 800568a:	e7e6      	b.n	800565a <_printf_i+0x182>
 800568c:	4615      	mov	r5, r2
 800568e:	e7bb      	b.n	8005608 <_printf_i+0x130>
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	6826      	ldr	r6, [r4, #0]
 8005694:	6961      	ldr	r1, [r4, #20]
 8005696:	1d18      	adds	r0, r3, #4
 8005698:	6028      	str	r0, [r5, #0]
 800569a:	0635      	lsls	r5, r6, #24
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	d501      	bpl.n	80056a4 <_printf_i+0x1cc>
 80056a0:	6019      	str	r1, [r3, #0]
 80056a2:	e002      	b.n	80056aa <_printf_i+0x1d2>
 80056a4:	0670      	lsls	r0, r6, #25
 80056a6:	d5fb      	bpl.n	80056a0 <_printf_i+0x1c8>
 80056a8:	8019      	strh	r1, [r3, #0]
 80056aa:	2300      	movs	r3, #0
 80056ac:	6123      	str	r3, [r4, #16]
 80056ae:	4615      	mov	r5, r2
 80056b0:	e7ba      	b.n	8005628 <_printf_i+0x150>
 80056b2:	682b      	ldr	r3, [r5, #0]
 80056b4:	1d1a      	adds	r2, r3, #4
 80056b6:	602a      	str	r2, [r5, #0]
 80056b8:	681d      	ldr	r5, [r3, #0]
 80056ba:	6862      	ldr	r2, [r4, #4]
 80056bc:	2100      	movs	r1, #0
 80056be:	4628      	mov	r0, r5
 80056c0:	f7fa fd96 	bl	80001f0 <memchr>
 80056c4:	b108      	cbz	r0, 80056ca <_printf_i+0x1f2>
 80056c6:	1b40      	subs	r0, r0, r5
 80056c8:	6060      	str	r0, [r4, #4]
 80056ca:	6863      	ldr	r3, [r4, #4]
 80056cc:	6123      	str	r3, [r4, #16]
 80056ce:	2300      	movs	r3, #0
 80056d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056d4:	e7a8      	b.n	8005628 <_printf_i+0x150>
 80056d6:	6923      	ldr	r3, [r4, #16]
 80056d8:	462a      	mov	r2, r5
 80056da:	4649      	mov	r1, r9
 80056dc:	4640      	mov	r0, r8
 80056de:	47d0      	blx	sl
 80056e0:	3001      	adds	r0, #1
 80056e2:	d0ab      	beq.n	800563c <_printf_i+0x164>
 80056e4:	6823      	ldr	r3, [r4, #0]
 80056e6:	079b      	lsls	r3, r3, #30
 80056e8:	d413      	bmi.n	8005712 <_printf_i+0x23a>
 80056ea:	68e0      	ldr	r0, [r4, #12]
 80056ec:	9b03      	ldr	r3, [sp, #12]
 80056ee:	4298      	cmp	r0, r3
 80056f0:	bfb8      	it	lt
 80056f2:	4618      	movlt	r0, r3
 80056f4:	e7a4      	b.n	8005640 <_printf_i+0x168>
 80056f6:	2301      	movs	r3, #1
 80056f8:	4632      	mov	r2, r6
 80056fa:	4649      	mov	r1, r9
 80056fc:	4640      	mov	r0, r8
 80056fe:	47d0      	blx	sl
 8005700:	3001      	adds	r0, #1
 8005702:	d09b      	beq.n	800563c <_printf_i+0x164>
 8005704:	3501      	adds	r5, #1
 8005706:	68e3      	ldr	r3, [r4, #12]
 8005708:	9903      	ldr	r1, [sp, #12]
 800570a:	1a5b      	subs	r3, r3, r1
 800570c:	42ab      	cmp	r3, r5
 800570e:	dcf2      	bgt.n	80056f6 <_printf_i+0x21e>
 8005710:	e7eb      	b.n	80056ea <_printf_i+0x212>
 8005712:	2500      	movs	r5, #0
 8005714:	f104 0619 	add.w	r6, r4, #25
 8005718:	e7f5      	b.n	8005706 <_printf_i+0x22e>
 800571a:	bf00      	nop
 800571c:	08007c82 	.word	0x08007c82
 8005720:	08007c93 	.word	0x08007c93

08005724 <siprintf>:
 8005724:	b40e      	push	{r1, r2, r3}
 8005726:	b500      	push	{lr}
 8005728:	b09c      	sub	sp, #112	; 0x70
 800572a:	ab1d      	add	r3, sp, #116	; 0x74
 800572c:	9002      	str	r0, [sp, #8]
 800572e:	9006      	str	r0, [sp, #24]
 8005730:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005734:	4809      	ldr	r0, [pc, #36]	; (800575c <siprintf+0x38>)
 8005736:	9107      	str	r1, [sp, #28]
 8005738:	9104      	str	r1, [sp, #16]
 800573a:	4909      	ldr	r1, [pc, #36]	; (8005760 <siprintf+0x3c>)
 800573c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005740:	9105      	str	r1, [sp, #20]
 8005742:	6800      	ldr	r0, [r0, #0]
 8005744:	9301      	str	r3, [sp, #4]
 8005746:	a902      	add	r1, sp, #8
 8005748:	f001 fb6a 	bl	8006e20 <_svfiprintf_r>
 800574c:	9b02      	ldr	r3, [sp, #8]
 800574e:	2200      	movs	r2, #0
 8005750:	701a      	strb	r2, [r3, #0]
 8005752:	b01c      	add	sp, #112	; 0x70
 8005754:	f85d eb04 	ldr.w	lr, [sp], #4
 8005758:	b003      	add	sp, #12
 800575a:	4770      	bx	lr
 800575c:	20000010 	.word	0x20000010
 8005760:	ffff0208 	.word	0xffff0208

08005764 <quorem>:
 8005764:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005768:	6903      	ldr	r3, [r0, #16]
 800576a:	690c      	ldr	r4, [r1, #16]
 800576c:	42a3      	cmp	r3, r4
 800576e:	4607      	mov	r7, r0
 8005770:	f2c0 8081 	blt.w	8005876 <quorem+0x112>
 8005774:	3c01      	subs	r4, #1
 8005776:	f101 0814 	add.w	r8, r1, #20
 800577a:	f100 0514 	add.w	r5, r0, #20
 800577e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005782:	9301      	str	r3, [sp, #4]
 8005784:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005788:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800578c:	3301      	adds	r3, #1
 800578e:	429a      	cmp	r2, r3
 8005790:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005794:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005798:	fbb2 f6f3 	udiv	r6, r2, r3
 800579c:	d331      	bcc.n	8005802 <quorem+0x9e>
 800579e:	f04f 0e00 	mov.w	lr, #0
 80057a2:	4640      	mov	r0, r8
 80057a4:	46ac      	mov	ip, r5
 80057a6:	46f2      	mov	sl, lr
 80057a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80057ac:	b293      	uxth	r3, r2
 80057ae:	fb06 e303 	mla	r3, r6, r3, lr
 80057b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	ebaa 0303 	sub.w	r3, sl, r3
 80057bc:	f8dc a000 	ldr.w	sl, [ip]
 80057c0:	0c12      	lsrs	r2, r2, #16
 80057c2:	fa13 f38a 	uxtah	r3, r3, sl
 80057c6:	fb06 e202 	mla	r2, r6, r2, lr
 80057ca:	9300      	str	r3, [sp, #0]
 80057cc:	9b00      	ldr	r3, [sp, #0]
 80057ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80057d2:	b292      	uxth	r2, r2
 80057d4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80057d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80057dc:	f8bd 3000 	ldrh.w	r3, [sp]
 80057e0:	4581      	cmp	r9, r0
 80057e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057e6:	f84c 3b04 	str.w	r3, [ip], #4
 80057ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80057ee:	d2db      	bcs.n	80057a8 <quorem+0x44>
 80057f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80057f4:	b92b      	cbnz	r3, 8005802 <quorem+0x9e>
 80057f6:	9b01      	ldr	r3, [sp, #4]
 80057f8:	3b04      	subs	r3, #4
 80057fa:	429d      	cmp	r5, r3
 80057fc:	461a      	mov	r2, r3
 80057fe:	d32e      	bcc.n	800585e <quorem+0xfa>
 8005800:	613c      	str	r4, [r7, #16]
 8005802:	4638      	mov	r0, r7
 8005804:	f001 f8b8 	bl	8006978 <__mcmp>
 8005808:	2800      	cmp	r0, #0
 800580a:	db24      	blt.n	8005856 <quorem+0xf2>
 800580c:	3601      	adds	r6, #1
 800580e:	4628      	mov	r0, r5
 8005810:	f04f 0c00 	mov.w	ip, #0
 8005814:	f858 2b04 	ldr.w	r2, [r8], #4
 8005818:	f8d0 e000 	ldr.w	lr, [r0]
 800581c:	b293      	uxth	r3, r2
 800581e:	ebac 0303 	sub.w	r3, ip, r3
 8005822:	0c12      	lsrs	r2, r2, #16
 8005824:	fa13 f38e 	uxtah	r3, r3, lr
 8005828:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800582c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005830:	b29b      	uxth	r3, r3
 8005832:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005836:	45c1      	cmp	r9, r8
 8005838:	f840 3b04 	str.w	r3, [r0], #4
 800583c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005840:	d2e8      	bcs.n	8005814 <quorem+0xb0>
 8005842:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005846:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800584a:	b922      	cbnz	r2, 8005856 <quorem+0xf2>
 800584c:	3b04      	subs	r3, #4
 800584e:	429d      	cmp	r5, r3
 8005850:	461a      	mov	r2, r3
 8005852:	d30a      	bcc.n	800586a <quorem+0x106>
 8005854:	613c      	str	r4, [r7, #16]
 8005856:	4630      	mov	r0, r6
 8005858:	b003      	add	sp, #12
 800585a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800585e:	6812      	ldr	r2, [r2, #0]
 8005860:	3b04      	subs	r3, #4
 8005862:	2a00      	cmp	r2, #0
 8005864:	d1cc      	bne.n	8005800 <quorem+0x9c>
 8005866:	3c01      	subs	r4, #1
 8005868:	e7c7      	b.n	80057fa <quorem+0x96>
 800586a:	6812      	ldr	r2, [r2, #0]
 800586c:	3b04      	subs	r3, #4
 800586e:	2a00      	cmp	r2, #0
 8005870:	d1f0      	bne.n	8005854 <quorem+0xf0>
 8005872:	3c01      	subs	r4, #1
 8005874:	e7eb      	b.n	800584e <quorem+0xea>
 8005876:	2000      	movs	r0, #0
 8005878:	e7ee      	b.n	8005858 <quorem+0xf4>
 800587a:	0000      	movs	r0, r0
 800587c:	0000      	movs	r0, r0
	...

08005880 <_dtoa_r>:
 8005880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005884:	ed2d 8b04 	vpush	{d8-d9}
 8005888:	ec57 6b10 	vmov	r6, r7, d0
 800588c:	b093      	sub	sp, #76	; 0x4c
 800588e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005890:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005894:	9106      	str	r1, [sp, #24]
 8005896:	ee10 aa10 	vmov	sl, s0
 800589a:	4604      	mov	r4, r0
 800589c:	9209      	str	r2, [sp, #36]	; 0x24
 800589e:	930c      	str	r3, [sp, #48]	; 0x30
 80058a0:	46bb      	mov	fp, r7
 80058a2:	b975      	cbnz	r5, 80058c2 <_dtoa_r+0x42>
 80058a4:	2010      	movs	r0, #16
 80058a6:	f000 fddd 	bl	8006464 <malloc>
 80058aa:	4602      	mov	r2, r0
 80058ac:	6260      	str	r0, [r4, #36]	; 0x24
 80058ae:	b920      	cbnz	r0, 80058ba <_dtoa_r+0x3a>
 80058b0:	4ba7      	ldr	r3, [pc, #668]	; (8005b50 <_dtoa_r+0x2d0>)
 80058b2:	21ea      	movs	r1, #234	; 0xea
 80058b4:	48a7      	ldr	r0, [pc, #668]	; (8005b54 <_dtoa_r+0x2d4>)
 80058b6:	f001 fbc3 	bl	8007040 <__assert_func>
 80058ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80058be:	6005      	str	r5, [r0, #0]
 80058c0:	60c5      	str	r5, [r0, #12]
 80058c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058c4:	6819      	ldr	r1, [r3, #0]
 80058c6:	b151      	cbz	r1, 80058de <_dtoa_r+0x5e>
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	604a      	str	r2, [r1, #4]
 80058cc:	2301      	movs	r3, #1
 80058ce:	4093      	lsls	r3, r2
 80058d0:	608b      	str	r3, [r1, #8]
 80058d2:	4620      	mov	r0, r4
 80058d4:	f000 fe0e 	bl	80064f4 <_Bfree>
 80058d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058da:	2200      	movs	r2, #0
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	1e3b      	subs	r3, r7, #0
 80058e0:	bfaa      	itet	ge
 80058e2:	2300      	movge	r3, #0
 80058e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80058e8:	f8c8 3000 	strge.w	r3, [r8]
 80058ec:	4b9a      	ldr	r3, [pc, #616]	; (8005b58 <_dtoa_r+0x2d8>)
 80058ee:	bfbc      	itt	lt
 80058f0:	2201      	movlt	r2, #1
 80058f2:	f8c8 2000 	strlt.w	r2, [r8]
 80058f6:	ea33 030b 	bics.w	r3, r3, fp
 80058fa:	d11b      	bne.n	8005934 <_dtoa_r+0xb4>
 80058fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8005902:	6013      	str	r3, [r2, #0]
 8005904:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005908:	4333      	orrs	r3, r6
 800590a:	f000 8592 	beq.w	8006432 <_dtoa_r+0xbb2>
 800590e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005910:	b963      	cbnz	r3, 800592c <_dtoa_r+0xac>
 8005912:	4b92      	ldr	r3, [pc, #584]	; (8005b5c <_dtoa_r+0x2dc>)
 8005914:	e022      	b.n	800595c <_dtoa_r+0xdc>
 8005916:	4b92      	ldr	r3, [pc, #584]	; (8005b60 <_dtoa_r+0x2e0>)
 8005918:	9301      	str	r3, [sp, #4]
 800591a:	3308      	adds	r3, #8
 800591c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800591e:	6013      	str	r3, [r2, #0]
 8005920:	9801      	ldr	r0, [sp, #4]
 8005922:	b013      	add	sp, #76	; 0x4c
 8005924:	ecbd 8b04 	vpop	{d8-d9}
 8005928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800592c:	4b8b      	ldr	r3, [pc, #556]	; (8005b5c <_dtoa_r+0x2dc>)
 800592e:	9301      	str	r3, [sp, #4]
 8005930:	3303      	adds	r3, #3
 8005932:	e7f3      	b.n	800591c <_dtoa_r+0x9c>
 8005934:	2200      	movs	r2, #0
 8005936:	2300      	movs	r3, #0
 8005938:	4650      	mov	r0, sl
 800593a:	4659      	mov	r1, fp
 800593c:	f7fb f8cc 	bl	8000ad8 <__aeabi_dcmpeq>
 8005940:	ec4b ab19 	vmov	d9, sl, fp
 8005944:	4680      	mov	r8, r0
 8005946:	b158      	cbz	r0, 8005960 <_dtoa_r+0xe0>
 8005948:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800594a:	2301      	movs	r3, #1
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005950:	2b00      	cmp	r3, #0
 8005952:	f000 856b 	beq.w	800642c <_dtoa_r+0xbac>
 8005956:	4883      	ldr	r0, [pc, #524]	; (8005b64 <_dtoa_r+0x2e4>)
 8005958:	6018      	str	r0, [r3, #0]
 800595a:	1e43      	subs	r3, r0, #1
 800595c:	9301      	str	r3, [sp, #4]
 800595e:	e7df      	b.n	8005920 <_dtoa_r+0xa0>
 8005960:	ec4b ab10 	vmov	d0, sl, fp
 8005964:	aa10      	add	r2, sp, #64	; 0x40
 8005966:	a911      	add	r1, sp, #68	; 0x44
 8005968:	4620      	mov	r0, r4
 800596a:	f001 f8ab 	bl	8006ac4 <__d2b>
 800596e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005972:	ee08 0a10 	vmov	s16, r0
 8005976:	2d00      	cmp	r5, #0
 8005978:	f000 8084 	beq.w	8005a84 <_dtoa_r+0x204>
 800597c:	ee19 3a90 	vmov	r3, s19
 8005980:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005984:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005988:	4656      	mov	r6, sl
 800598a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800598e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005992:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005996:	4b74      	ldr	r3, [pc, #464]	; (8005b68 <_dtoa_r+0x2e8>)
 8005998:	2200      	movs	r2, #0
 800599a:	4630      	mov	r0, r6
 800599c:	4639      	mov	r1, r7
 800599e:	f7fa fc7b 	bl	8000298 <__aeabi_dsub>
 80059a2:	a365      	add	r3, pc, #404	; (adr r3, 8005b38 <_dtoa_r+0x2b8>)
 80059a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a8:	f7fa fe2e 	bl	8000608 <__aeabi_dmul>
 80059ac:	a364      	add	r3, pc, #400	; (adr r3, 8005b40 <_dtoa_r+0x2c0>)
 80059ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b2:	f7fa fc73 	bl	800029c <__adddf3>
 80059b6:	4606      	mov	r6, r0
 80059b8:	4628      	mov	r0, r5
 80059ba:	460f      	mov	r7, r1
 80059bc:	f7fa fdba 	bl	8000534 <__aeabi_i2d>
 80059c0:	a361      	add	r3, pc, #388	; (adr r3, 8005b48 <_dtoa_r+0x2c8>)
 80059c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c6:	f7fa fe1f 	bl	8000608 <__aeabi_dmul>
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	4630      	mov	r0, r6
 80059d0:	4639      	mov	r1, r7
 80059d2:	f7fa fc63 	bl	800029c <__adddf3>
 80059d6:	4606      	mov	r6, r0
 80059d8:	460f      	mov	r7, r1
 80059da:	f7fb f8c5 	bl	8000b68 <__aeabi_d2iz>
 80059de:	2200      	movs	r2, #0
 80059e0:	9000      	str	r0, [sp, #0]
 80059e2:	2300      	movs	r3, #0
 80059e4:	4630      	mov	r0, r6
 80059e6:	4639      	mov	r1, r7
 80059e8:	f7fb f880 	bl	8000aec <__aeabi_dcmplt>
 80059ec:	b150      	cbz	r0, 8005a04 <_dtoa_r+0x184>
 80059ee:	9800      	ldr	r0, [sp, #0]
 80059f0:	f7fa fda0 	bl	8000534 <__aeabi_i2d>
 80059f4:	4632      	mov	r2, r6
 80059f6:	463b      	mov	r3, r7
 80059f8:	f7fb f86e 	bl	8000ad8 <__aeabi_dcmpeq>
 80059fc:	b910      	cbnz	r0, 8005a04 <_dtoa_r+0x184>
 80059fe:	9b00      	ldr	r3, [sp, #0]
 8005a00:	3b01      	subs	r3, #1
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	9b00      	ldr	r3, [sp, #0]
 8005a06:	2b16      	cmp	r3, #22
 8005a08:	d85a      	bhi.n	8005ac0 <_dtoa_r+0x240>
 8005a0a:	9a00      	ldr	r2, [sp, #0]
 8005a0c:	4b57      	ldr	r3, [pc, #348]	; (8005b6c <_dtoa_r+0x2ec>)
 8005a0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a16:	ec51 0b19 	vmov	r0, r1, d9
 8005a1a:	f7fb f867 	bl	8000aec <__aeabi_dcmplt>
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	d050      	beq.n	8005ac4 <_dtoa_r+0x244>
 8005a22:	9b00      	ldr	r3, [sp, #0]
 8005a24:	3b01      	subs	r3, #1
 8005a26:	9300      	str	r3, [sp, #0]
 8005a28:	2300      	movs	r3, #0
 8005a2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a2e:	1b5d      	subs	r5, r3, r5
 8005a30:	1e6b      	subs	r3, r5, #1
 8005a32:	9305      	str	r3, [sp, #20]
 8005a34:	bf45      	ittet	mi
 8005a36:	f1c5 0301 	rsbmi	r3, r5, #1
 8005a3a:	9304      	strmi	r3, [sp, #16]
 8005a3c:	2300      	movpl	r3, #0
 8005a3e:	2300      	movmi	r3, #0
 8005a40:	bf4c      	ite	mi
 8005a42:	9305      	strmi	r3, [sp, #20]
 8005a44:	9304      	strpl	r3, [sp, #16]
 8005a46:	9b00      	ldr	r3, [sp, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	db3d      	blt.n	8005ac8 <_dtoa_r+0x248>
 8005a4c:	9b05      	ldr	r3, [sp, #20]
 8005a4e:	9a00      	ldr	r2, [sp, #0]
 8005a50:	920a      	str	r2, [sp, #40]	; 0x28
 8005a52:	4413      	add	r3, r2
 8005a54:	9305      	str	r3, [sp, #20]
 8005a56:	2300      	movs	r3, #0
 8005a58:	9307      	str	r3, [sp, #28]
 8005a5a:	9b06      	ldr	r3, [sp, #24]
 8005a5c:	2b09      	cmp	r3, #9
 8005a5e:	f200 8089 	bhi.w	8005b74 <_dtoa_r+0x2f4>
 8005a62:	2b05      	cmp	r3, #5
 8005a64:	bfc4      	itt	gt
 8005a66:	3b04      	subgt	r3, #4
 8005a68:	9306      	strgt	r3, [sp, #24]
 8005a6a:	9b06      	ldr	r3, [sp, #24]
 8005a6c:	f1a3 0302 	sub.w	r3, r3, #2
 8005a70:	bfcc      	ite	gt
 8005a72:	2500      	movgt	r5, #0
 8005a74:	2501      	movle	r5, #1
 8005a76:	2b03      	cmp	r3, #3
 8005a78:	f200 8087 	bhi.w	8005b8a <_dtoa_r+0x30a>
 8005a7c:	e8df f003 	tbb	[pc, r3]
 8005a80:	59383a2d 	.word	0x59383a2d
 8005a84:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005a88:	441d      	add	r5, r3
 8005a8a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005a8e:	2b20      	cmp	r3, #32
 8005a90:	bfc1      	itttt	gt
 8005a92:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005a96:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005a9a:	fa0b f303 	lslgt.w	r3, fp, r3
 8005a9e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005aa2:	bfda      	itte	le
 8005aa4:	f1c3 0320 	rsble	r3, r3, #32
 8005aa8:	fa06 f003 	lslle.w	r0, r6, r3
 8005aac:	4318      	orrgt	r0, r3
 8005aae:	f7fa fd31 	bl	8000514 <__aeabi_ui2d>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	4606      	mov	r6, r0
 8005ab6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005aba:	3d01      	subs	r5, #1
 8005abc:	930e      	str	r3, [sp, #56]	; 0x38
 8005abe:	e76a      	b.n	8005996 <_dtoa_r+0x116>
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e7b2      	b.n	8005a2a <_dtoa_r+0x1aa>
 8005ac4:	900b      	str	r0, [sp, #44]	; 0x2c
 8005ac6:	e7b1      	b.n	8005a2c <_dtoa_r+0x1ac>
 8005ac8:	9b04      	ldr	r3, [sp, #16]
 8005aca:	9a00      	ldr	r2, [sp, #0]
 8005acc:	1a9b      	subs	r3, r3, r2
 8005ace:	9304      	str	r3, [sp, #16]
 8005ad0:	4253      	negs	r3, r2
 8005ad2:	9307      	str	r3, [sp, #28]
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	930a      	str	r3, [sp, #40]	; 0x28
 8005ad8:	e7bf      	b.n	8005a5a <_dtoa_r+0x1da>
 8005ada:	2300      	movs	r3, #0
 8005adc:	9308      	str	r3, [sp, #32]
 8005ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	dc55      	bgt.n	8005b90 <_dtoa_r+0x310>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005aea:	461a      	mov	r2, r3
 8005aec:	9209      	str	r2, [sp, #36]	; 0x24
 8005aee:	e00c      	b.n	8005b0a <_dtoa_r+0x28a>
 8005af0:	2301      	movs	r3, #1
 8005af2:	e7f3      	b.n	8005adc <_dtoa_r+0x25c>
 8005af4:	2300      	movs	r3, #0
 8005af6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005af8:	9308      	str	r3, [sp, #32]
 8005afa:	9b00      	ldr	r3, [sp, #0]
 8005afc:	4413      	add	r3, r2
 8005afe:	9302      	str	r3, [sp, #8]
 8005b00:	3301      	adds	r3, #1
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	9303      	str	r3, [sp, #12]
 8005b06:	bfb8      	it	lt
 8005b08:	2301      	movlt	r3, #1
 8005b0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	6042      	str	r2, [r0, #4]
 8005b10:	2204      	movs	r2, #4
 8005b12:	f102 0614 	add.w	r6, r2, #20
 8005b16:	429e      	cmp	r6, r3
 8005b18:	6841      	ldr	r1, [r0, #4]
 8005b1a:	d93d      	bls.n	8005b98 <_dtoa_r+0x318>
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	f000 fca9 	bl	8006474 <_Balloc>
 8005b22:	9001      	str	r0, [sp, #4]
 8005b24:	2800      	cmp	r0, #0
 8005b26:	d13b      	bne.n	8005ba0 <_dtoa_r+0x320>
 8005b28:	4b11      	ldr	r3, [pc, #68]	; (8005b70 <_dtoa_r+0x2f0>)
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005b30:	e6c0      	b.n	80058b4 <_dtoa_r+0x34>
 8005b32:	2301      	movs	r3, #1
 8005b34:	e7df      	b.n	8005af6 <_dtoa_r+0x276>
 8005b36:	bf00      	nop
 8005b38:	636f4361 	.word	0x636f4361
 8005b3c:	3fd287a7 	.word	0x3fd287a7
 8005b40:	8b60c8b3 	.word	0x8b60c8b3
 8005b44:	3fc68a28 	.word	0x3fc68a28
 8005b48:	509f79fb 	.word	0x509f79fb
 8005b4c:	3fd34413 	.word	0x3fd34413
 8005b50:	08007cb1 	.word	0x08007cb1
 8005b54:	08007cc8 	.word	0x08007cc8
 8005b58:	7ff00000 	.word	0x7ff00000
 8005b5c:	08007cad 	.word	0x08007cad
 8005b60:	08007ca4 	.word	0x08007ca4
 8005b64:	08007c81 	.word	0x08007c81
 8005b68:	3ff80000 	.word	0x3ff80000
 8005b6c:	08007db8 	.word	0x08007db8
 8005b70:	08007d23 	.word	0x08007d23
 8005b74:	2501      	movs	r5, #1
 8005b76:	2300      	movs	r3, #0
 8005b78:	9306      	str	r3, [sp, #24]
 8005b7a:	9508      	str	r5, [sp, #32]
 8005b7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005b84:	2200      	movs	r2, #0
 8005b86:	2312      	movs	r3, #18
 8005b88:	e7b0      	b.n	8005aec <_dtoa_r+0x26c>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	9308      	str	r3, [sp, #32]
 8005b8e:	e7f5      	b.n	8005b7c <_dtoa_r+0x2fc>
 8005b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b92:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005b96:	e7b8      	b.n	8005b0a <_dtoa_r+0x28a>
 8005b98:	3101      	adds	r1, #1
 8005b9a:	6041      	str	r1, [r0, #4]
 8005b9c:	0052      	lsls	r2, r2, #1
 8005b9e:	e7b8      	b.n	8005b12 <_dtoa_r+0x292>
 8005ba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ba2:	9a01      	ldr	r2, [sp, #4]
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	9b03      	ldr	r3, [sp, #12]
 8005ba8:	2b0e      	cmp	r3, #14
 8005baa:	f200 809d 	bhi.w	8005ce8 <_dtoa_r+0x468>
 8005bae:	2d00      	cmp	r5, #0
 8005bb0:	f000 809a 	beq.w	8005ce8 <_dtoa_r+0x468>
 8005bb4:	9b00      	ldr	r3, [sp, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	dd32      	ble.n	8005c20 <_dtoa_r+0x3a0>
 8005bba:	4ab7      	ldr	r2, [pc, #732]	; (8005e98 <_dtoa_r+0x618>)
 8005bbc:	f003 030f 	and.w	r3, r3, #15
 8005bc0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005bc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005bc8:	9b00      	ldr	r3, [sp, #0]
 8005bca:	05d8      	lsls	r0, r3, #23
 8005bcc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005bd0:	d516      	bpl.n	8005c00 <_dtoa_r+0x380>
 8005bd2:	4bb2      	ldr	r3, [pc, #712]	; (8005e9c <_dtoa_r+0x61c>)
 8005bd4:	ec51 0b19 	vmov	r0, r1, d9
 8005bd8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005bdc:	f7fa fe3e 	bl	800085c <__aeabi_ddiv>
 8005be0:	f007 070f 	and.w	r7, r7, #15
 8005be4:	4682      	mov	sl, r0
 8005be6:	468b      	mov	fp, r1
 8005be8:	2503      	movs	r5, #3
 8005bea:	4eac      	ldr	r6, [pc, #688]	; (8005e9c <_dtoa_r+0x61c>)
 8005bec:	b957      	cbnz	r7, 8005c04 <_dtoa_r+0x384>
 8005bee:	4642      	mov	r2, r8
 8005bf0:	464b      	mov	r3, r9
 8005bf2:	4650      	mov	r0, sl
 8005bf4:	4659      	mov	r1, fp
 8005bf6:	f7fa fe31 	bl	800085c <__aeabi_ddiv>
 8005bfa:	4682      	mov	sl, r0
 8005bfc:	468b      	mov	fp, r1
 8005bfe:	e028      	b.n	8005c52 <_dtoa_r+0x3d2>
 8005c00:	2502      	movs	r5, #2
 8005c02:	e7f2      	b.n	8005bea <_dtoa_r+0x36a>
 8005c04:	07f9      	lsls	r1, r7, #31
 8005c06:	d508      	bpl.n	8005c1a <_dtoa_r+0x39a>
 8005c08:	4640      	mov	r0, r8
 8005c0a:	4649      	mov	r1, r9
 8005c0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c10:	f7fa fcfa 	bl	8000608 <__aeabi_dmul>
 8005c14:	3501      	adds	r5, #1
 8005c16:	4680      	mov	r8, r0
 8005c18:	4689      	mov	r9, r1
 8005c1a:	107f      	asrs	r7, r7, #1
 8005c1c:	3608      	adds	r6, #8
 8005c1e:	e7e5      	b.n	8005bec <_dtoa_r+0x36c>
 8005c20:	f000 809b 	beq.w	8005d5a <_dtoa_r+0x4da>
 8005c24:	9b00      	ldr	r3, [sp, #0]
 8005c26:	4f9d      	ldr	r7, [pc, #628]	; (8005e9c <_dtoa_r+0x61c>)
 8005c28:	425e      	negs	r6, r3
 8005c2a:	4b9b      	ldr	r3, [pc, #620]	; (8005e98 <_dtoa_r+0x618>)
 8005c2c:	f006 020f 	and.w	r2, r6, #15
 8005c30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c38:	ec51 0b19 	vmov	r0, r1, d9
 8005c3c:	f7fa fce4 	bl	8000608 <__aeabi_dmul>
 8005c40:	1136      	asrs	r6, r6, #4
 8005c42:	4682      	mov	sl, r0
 8005c44:	468b      	mov	fp, r1
 8005c46:	2300      	movs	r3, #0
 8005c48:	2502      	movs	r5, #2
 8005c4a:	2e00      	cmp	r6, #0
 8005c4c:	d17a      	bne.n	8005d44 <_dtoa_r+0x4c4>
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1d3      	bne.n	8005bfa <_dtoa_r+0x37a>
 8005c52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 8082 	beq.w	8005d5e <_dtoa_r+0x4de>
 8005c5a:	4b91      	ldr	r3, [pc, #580]	; (8005ea0 <_dtoa_r+0x620>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	4650      	mov	r0, sl
 8005c60:	4659      	mov	r1, fp
 8005c62:	f7fa ff43 	bl	8000aec <__aeabi_dcmplt>
 8005c66:	2800      	cmp	r0, #0
 8005c68:	d079      	beq.n	8005d5e <_dtoa_r+0x4de>
 8005c6a:	9b03      	ldr	r3, [sp, #12]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d076      	beq.n	8005d5e <_dtoa_r+0x4de>
 8005c70:	9b02      	ldr	r3, [sp, #8]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	dd36      	ble.n	8005ce4 <_dtoa_r+0x464>
 8005c76:	9b00      	ldr	r3, [sp, #0]
 8005c78:	4650      	mov	r0, sl
 8005c7a:	4659      	mov	r1, fp
 8005c7c:	1e5f      	subs	r7, r3, #1
 8005c7e:	2200      	movs	r2, #0
 8005c80:	4b88      	ldr	r3, [pc, #544]	; (8005ea4 <_dtoa_r+0x624>)
 8005c82:	f7fa fcc1 	bl	8000608 <__aeabi_dmul>
 8005c86:	9e02      	ldr	r6, [sp, #8]
 8005c88:	4682      	mov	sl, r0
 8005c8a:	468b      	mov	fp, r1
 8005c8c:	3501      	adds	r5, #1
 8005c8e:	4628      	mov	r0, r5
 8005c90:	f7fa fc50 	bl	8000534 <__aeabi_i2d>
 8005c94:	4652      	mov	r2, sl
 8005c96:	465b      	mov	r3, fp
 8005c98:	f7fa fcb6 	bl	8000608 <__aeabi_dmul>
 8005c9c:	4b82      	ldr	r3, [pc, #520]	; (8005ea8 <_dtoa_r+0x628>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f7fa fafc 	bl	800029c <__adddf3>
 8005ca4:	46d0      	mov	r8, sl
 8005ca6:	46d9      	mov	r9, fp
 8005ca8:	4682      	mov	sl, r0
 8005caa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005cae:	2e00      	cmp	r6, #0
 8005cb0:	d158      	bne.n	8005d64 <_dtoa_r+0x4e4>
 8005cb2:	4b7e      	ldr	r3, [pc, #504]	; (8005eac <_dtoa_r+0x62c>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	4640      	mov	r0, r8
 8005cb8:	4649      	mov	r1, r9
 8005cba:	f7fa faed 	bl	8000298 <__aeabi_dsub>
 8005cbe:	4652      	mov	r2, sl
 8005cc0:	465b      	mov	r3, fp
 8005cc2:	4680      	mov	r8, r0
 8005cc4:	4689      	mov	r9, r1
 8005cc6:	f7fa ff2f 	bl	8000b28 <__aeabi_dcmpgt>
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	f040 8295 	bne.w	80061fa <_dtoa_r+0x97a>
 8005cd0:	4652      	mov	r2, sl
 8005cd2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005cd6:	4640      	mov	r0, r8
 8005cd8:	4649      	mov	r1, r9
 8005cda:	f7fa ff07 	bl	8000aec <__aeabi_dcmplt>
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	f040 8289 	bne.w	80061f6 <_dtoa_r+0x976>
 8005ce4:	ec5b ab19 	vmov	sl, fp, d9
 8005ce8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f2c0 8148 	blt.w	8005f80 <_dtoa_r+0x700>
 8005cf0:	9a00      	ldr	r2, [sp, #0]
 8005cf2:	2a0e      	cmp	r2, #14
 8005cf4:	f300 8144 	bgt.w	8005f80 <_dtoa_r+0x700>
 8005cf8:	4b67      	ldr	r3, [pc, #412]	; (8005e98 <_dtoa_r+0x618>)
 8005cfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cfe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f280 80d5 	bge.w	8005eb4 <_dtoa_r+0x634>
 8005d0a:	9b03      	ldr	r3, [sp, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f300 80d1 	bgt.w	8005eb4 <_dtoa_r+0x634>
 8005d12:	f040 826f 	bne.w	80061f4 <_dtoa_r+0x974>
 8005d16:	4b65      	ldr	r3, [pc, #404]	; (8005eac <_dtoa_r+0x62c>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	4640      	mov	r0, r8
 8005d1c:	4649      	mov	r1, r9
 8005d1e:	f7fa fc73 	bl	8000608 <__aeabi_dmul>
 8005d22:	4652      	mov	r2, sl
 8005d24:	465b      	mov	r3, fp
 8005d26:	f7fa fef5 	bl	8000b14 <__aeabi_dcmpge>
 8005d2a:	9e03      	ldr	r6, [sp, #12]
 8005d2c:	4637      	mov	r7, r6
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	f040 8245 	bne.w	80061be <_dtoa_r+0x93e>
 8005d34:	9d01      	ldr	r5, [sp, #4]
 8005d36:	2331      	movs	r3, #49	; 0x31
 8005d38:	f805 3b01 	strb.w	r3, [r5], #1
 8005d3c:	9b00      	ldr	r3, [sp, #0]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	e240      	b.n	80061c6 <_dtoa_r+0x946>
 8005d44:	07f2      	lsls	r2, r6, #31
 8005d46:	d505      	bpl.n	8005d54 <_dtoa_r+0x4d4>
 8005d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d4c:	f7fa fc5c 	bl	8000608 <__aeabi_dmul>
 8005d50:	3501      	adds	r5, #1
 8005d52:	2301      	movs	r3, #1
 8005d54:	1076      	asrs	r6, r6, #1
 8005d56:	3708      	adds	r7, #8
 8005d58:	e777      	b.n	8005c4a <_dtoa_r+0x3ca>
 8005d5a:	2502      	movs	r5, #2
 8005d5c:	e779      	b.n	8005c52 <_dtoa_r+0x3d2>
 8005d5e:	9f00      	ldr	r7, [sp, #0]
 8005d60:	9e03      	ldr	r6, [sp, #12]
 8005d62:	e794      	b.n	8005c8e <_dtoa_r+0x40e>
 8005d64:	9901      	ldr	r1, [sp, #4]
 8005d66:	4b4c      	ldr	r3, [pc, #304]	; (8005e98 <_dtoa_r+0x618>)
 8005d68:	4431      	add	r1, r6
 8005d6a:	910d      	str	r1, [sp, #52]	; 0x34
 8005d6c:	9908      	ldr	r1, [sp, #32]
 8005d6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005d72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005d76:	2900      	cmp	r1, #0
 8005d78:	d043      	beq.n	8005e02 <_dtoa_r+0x582>
 8005d7a:	494d      	ldr	r1, [pc, #308]	; (8005eb0 <_dtoa_r+0x630>)
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	f7fa fd6d 	bl	800085c <__aeabi_ddiv>
 8005d82:	4652      	mov	r2, sl
 8005d84:	465b      	mov	r3, fp
 8005d86:	f7fa fa87 	bl	8000298 <__aeabi_dsub>
 8005d8a:	9d01      	ldr	r5, [sp, #4]
 8005d8c:	4682      	mov	sl, r0
 8005d8e:	468b      	mov	fp, r1
 8005d90:	4649      	mov	r1, r9
 8005d92:	4640      	mov	r0, r8
 8005d94:	f7fa fee8 	bl	8000b68 <__aeabi_d2iz>
 8005d98:	4606      	mov	r6, r0
 8005d9a:	f7fa fbcb 	bl	8000534 <__aeabi_i2d>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	460b      	mov	r3, r1
 8005da2:	4640      	mov	r0, r8
 8005da4:	4649      	mov	r1, r9
 8005da6:	f7fa fa77 	bl	8000298 <__aeabi_dsub>
 8005daa:	3630      	adds	r6, #48	; 0x30
 8005dac:	f805 6b01 	strb.w	r6, [r5], #1
 8005db0:	4652      	mov	r2, sl
 8005db2:	465b      	mov	r3, fp
 8005db4:	4680      	mov	r8, r0
 8005db6:	4689      	mov	r9, r1
 8005db8:	f7fa fe98 	bl	8000aec <__aeabi_dcmplt>
 8005dbc:	2800      	cmp	r0, #0
 8005dbe:	d163      	bne.n	8005e88 <_dtoa_r+0x608>
 8005dc0:	4642      	mov	r2, r8
 8005dc2:	464b      	mov	r3, r9
 8005dc4:	4936      	ldr	r1, [pc, #216]	; (8005ea0 <_dtoa_r+0x620>)
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	f7fa fa66 	bl	8000298 <__aeabi_dsub>
 8005dcc:	4652      	mov	r2, sl
 8005dce:	465b      	mov	r3, fp
 8005dd0:	f7fa fe8c 	bl	8000aec <__aeabi_dcmplt>
 8005dd4:	2800      	cmp	r0, #0
 8005dd6:	f040 80b5 	bne.w	8005f44 <_dtoa_r+0x6c4>
 8005dda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ddc:	429d      	cmp	r5, r3
 8005dde:	d081      	beq.n	8005ce4 <_dtoa_r+0x464>
 8005de0:	4b30      	ldr	r3, [pc, #192]	; (8005ea4 <_dtoa_r+0x624>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	4650      	mov	r0, sl
 8005de6:	4659      	mov	r1, fp
 8005de8:	f7fa fc0e 	bl	8000608 <__aeabi_dmul>
 8005dec:	4b2d      	ldr	r3, [pc, #180]	; (8005ea4 <_dtoa_r+0x624>)
 8005dee:	4682      	mov	sl, r0
 8005df0:	468b      	mov	fp, r1
 8005df2:	4640      	mov	r0, r8
 8005df4:	4649      	mov	r1, r9
 8005df6:	2200      	movs	r2, #0
 8005df8:	f7fa fc06 	bl	8000608 <__aeabi_dmul>
 8005dfc:	4680      	mov	r8, r0
 8005dfe:	4689      	mov	r9, r1
 8005e00:	e7c6      	b.n	8005d90 <_dtoa_r+0x510>
 8005e02:	4650      	mov	r0, sl
 8005e04:	4659      	mov	r1, fp
 8005e06:	f7fa fbff 	bl	8000608 <__aeabi_dmul>
 8005e0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e0c:	9d01      	ldr	r5, [sp, #4]
 8005e0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e10:	4682      	mov	sl, r0
 8005e12:	468b      	mov	fp, r1
 8005e14:	4649      	mov	r1, r9
 8005e16:	4640      	mov	r0, r8
 8005e18:	f7fa fea6 	bl	8000b68 <__aeabi_d2iz>
 8005e1c:	4606      	mov	r6, r0
 8005e1e:	f7fa fb89 	bl	8000534 <__aeabi_i2d>
 8005e22:	3630      	adds	r6, #48	; 0x30
 8005e24:	4602      	mov	r2, r0
 8005e26:	460b      	mov	r3, r1
 8005e28:	4640      	mov	r0, r8
 8005e2a:	4649      	mov	r1, r9
 8005e2c:	f7fa fa34 	bl	8000298 <__aeabi_dsub>
 8005e30:	f805 6b01 	strb.w	r6, [r5], #1
 8005e34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e36:	429d      	cmp	r5, r3
 8005e38:	4680      	mov	r8, r0
 8005e3a:	4689      	mov	r9, r1
 8005e3c:	f04f 0200 	mov.w	r2, #0
 8005e40:	d124      	bne.n	8005e8c <_dtoa_r+0x60c>
 8005e42:	4b1b      	ldr	r3, [pc, #108]	; (8005eb0 <_dtoa_r+0x630>)
 8005e44:	4650      	mov	r0, sl
 8005e46:	4659      	mov	r1, fp
 8005e48:	f7fa fa28 	bl	800029c <__adddf3>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4640      	mov	r0, r8
 8005e52:	4649      	mov	r1, r9
 8005e54:	f7fa fe68 	bl	8000b28 <__aeabi_dcmpgt>
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	d173      	bne.n	8005f44 <_dtoa_r+0x6c4>
 8005e5c:	4652      	mov	r2, sl
 8005e5e:	465b      	mov	r3, fp
 8005e60:	4913      	ldr	r1, [pc, #76]	; (8005eb0 <_dtoa_r+0x630>)
 8005e62:	2000      	movs	r0, #0
 8005e64:	f7fa fa18 	bl	8000298 <__aeabi_dsub>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	4640      	mov	r0, r8
 8005e6e:	4649      	mov	r1, r9
 8005e70:	f7fa fe3c 	bl	8000aec <__aeabi_dcmplt>
 8005e74:	2800      	cmp	r0, #0
 8005e76:	f43f af35 	beq.w	8005ce4 <_dtoa_r+0x464>
 8005e7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005e7c:	1e6b      	subs	r3, r5, #1
 8005e7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e80:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e84:	2b30      	cmp	r3, #48	; 0x30
 8005e86:	d0f8      	beq.n	8005e7a <_dtoa_r+0x5fa>
 8005e88:	9700      	str	r7, [sp, #0]
 8005e8a:	e049      	b.n	8005f20 <_dtoa_r+0x6a0>
 8005e8c:	4b05      	ldr	r3, [pc, #20]	; (8005ea4 <_dtoa_r+0x624>)
 8005e8e:	f7fa fbbb 	bl	8000608 <__aeabi_dmul>
 8005e92:	4680      	mov	r8, r0
 8005e94:	4689      	mov	r9, r1
 8005e96:	e7bd      	b.n	8005e14 <_dtoa_r+0x594>
 8005e98:	08007db8 	.word	0x08007db8
 8005e9c:	08007d90 	.word	0x08007d90
 8005ea0:	3ff00000 	.word	0x3ff00000
 8005ea4:	40240000 	.word	0x40240000
 8005ea8:	401c0000 	.word	0x401c0000
 8005eac:	40140000 	.word	0x40140000
 8005eb0:	3fe00000 	.word	0x3fe00000
 8005eb4:	9d01      	ldr	r5, [sp, #4]
 8005eb6:	4656      	mov	r6, sl
 8005eb8:	465f      	mov	r7, fp
 8005eba:	4642      	mov	r2, r8
 8005ebc:	464b      	mov	r3, r9
 8005ebe:	4630      	mov	r0, r6
 8005ec0:	4639      	mov	r1, r7
 8005ec2:	f7fa fccb 	bl	800085c <__aeabi_ddiv>
 8005ec6:	f7fa fe4f 	bl	8000b68 <__aeabi_d2iz>
 8005eca:	4682      	mov	sl, r0
 8005ecc:	f7fa fb32 	bl	8000534 <__aeabi_i2d>
 8005ed0:	4642      	mov	r2, r8
 8005ed2:	464b      	mov	r3, r9
 8005ed4:	f7fa fb98 	bl	8000608 <__aeabi_dmul>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	4630      	mov	r0, r6
 8005ede:	4639      	mov	r1, r7
 8005ee0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005ee4:	f7fa f9d8 	bl	8000298 <__aeabi_dsub>
 8005ee8:	f805 6b01 	strb.w	r6, [r5], #1
 8005eec:	9e01      	ldr	r6, [sp, #4]
 8005eee:	9f03      	ldr	r7, [sp, #12]
 8005ef0:	1bae      	subs	r6, r5, r6
 8005ef2:	42b7      	cmp	r7, r6
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	d135      	bne.n	8005f66 <_dtoa_r+0x6e6>
 8005efa:	f7fa f9cf 	bl	800029c <__adddf3>
 8005efe:	4642      	mov	r2, r8
 8005f00:	464b      	mov	r3, r9
 8005f02:	4606      	mov	r6, r0
 8005f04:	460f      	mov	r7, r1
 8005f06:	f7fa fe0f 	bl	8000b28 <__aeabi_dcmpgt>
 8005f0a:	b9d0      	cbnz	r0, 8005f42 <_dtoa_r+0x6c2>
 8005f0c:	4642      	mov	r2, r8
 8005f0e:	464b      	mov	r3, r9
 8005f10:	4630      	mov	r0, r6
 8005f12:	4639      	mov	r1, r7
 8005f14:	f7fa fde0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f18:	b110      	cbz	r0, 8005f20 <_dtoa_r+0x6a0>
 8005f1a:	f01a 0f01 	tst.w	sl, #1
 8005f1e:	d110      	bne.n	8005f42 <_dtoa_r+0x6c2>
 8005f20:	4620      	mov	r0, r4
 8005f22:	ee18 1a10 	vmov	r1, s16
 8005f26:	f000 fae5 	bl	80064f4 <_Bfree>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	9800      	ldr	r0, [sp, #0]
 8005f2e:	702b      	strb	r3, [r5, #0]
 8005f30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f32:	3001      	adds	r0, #1
 8005f34:	6018      	str	r0, [r3, #0]
 8005f36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f43f acf1 	beq.w	8005920 <_dtoa_r+0xa0>
 8005f3e:	601d      	str	r5, [r3, #0]
 8005f40:	e4ee      	b.n	8005920 <_dtoa_r+0xa0>
 8005f42:	9f00      	ldr	r7, [sp, #0]
 8005f44:	462b      	mov	r3, r5
 8005f46:	461d      	mov	r5, r3
 8005f48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f4c:	2a39      	cmp	r2, #57	; 0x39
 8005f4e:	d106      	bne.n	8005f5e <_dtoa_r+0x6de>
 8005f50:	9a01      	ldr	r2, [sp, #4]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d1f7      	bne.n	8005f46 <_dtoa_r+0x6c6>
 8005f56:	9901      	ldr	r1, [sp, #4]
 8005f58:	2230      	movs	r2, #48	; 0x30
 8005f5a:	3701      	adds	r7, #1
 8005f5c:	700a      	strb	r2, [r1, #0]
 8005f5e:	781a      	ldrb	r2, [r3, #0]
 8005f60:	3201      	adds	r2, #1
 8005f62:	701a      	strb	r2, [r3, #0]
 8005f64:	e790      	b.n	8005e88 <_dtoa_r+0x608>
 8005f66:	4ba6      	ldr	r3, [pc, #664]	; (8006200 <_dtoa_r+0x980>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f7fa fb4d 	bl	8000608 <__aeabi_dmul>
 8005f6e:	2200      	movs	r2, #0
 8005f70:	2300      	movs	r3, #0
 8005f72:	4606      	mov	r6, r0
 8005f74:	460f      	mov	r7, r1
 8005f76:	f7fa fdaf 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	d09d      	beq.n	8005eba <_dtoa_r+0x63a>
 8005f7e:	e7cf      	b.n	8005f20 <_dtoa_r+0x6a0>
 8005f80:	9a08      	ldr	r2, [sp, #32]
 8005f82:	2a00      	cmp	r2, #0
 8005f84:	f000 80d7 	beq.w	8006136 <_dtoa_r+0x8b6>
 8005f88:	9a06      	ldr	r2, [sp, #24]
 8005f8a:	2a01      	cmp	r2, #1
 8005f8c:	f300 80ba 	bgt.w	8006104 <_dtoa_r+0x884>
 8005f90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f92:	2a00      	cmp	r2, #0
 8005f94:	f000 80b2 	beq.w	80060fc <_dtoa_r+0x87c>
 8005f98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005f9c:	9e07      	ldr	r6, [sp, #28]
 8005f9e:	9d04      	ldr	r5, [sp, #16]
 8005fa0:	9a04      	ldr	r2, [sp, #16]
 8005fa2:	441a      	add	r2, r3
 8005fa4:	9204      	str	r2, [sp, #16]
 8005fa6:	9a05      	ldr	r2, [sp, #20]
 8005fa8:	2101      	movs	r1, #1
 8005faa:	441a      	add	r2, r3
 8005fac:	4620      	mov	r0, r4
 8005fae:	9205      	str	r2, [sp, #20]
 8005fb0:	f000 fb58 	bl	8006664 <__i2b>
 8005fb4:	4607      	mov	r7, r0
 8005fb6:	2d00      	cmp	r5, #0
 8005fb8:	dd0c      	ble.n	8005fd4 <_dtoa_r+0x754>
 8005fba:	9b05      	ldr	r3, [sp, #20]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	dd09      	ble.n	8005fd4 <_dtoa_r+0x754>
 8005fc0:	42ab      	cmp	r3, r5
 8005fc2:	9a04      	ldr	r2, [sp, #16]
 8005fc4:	bfa8      	it	ge
 8005fc6:	462b      	movge	r3, r5
 8005fc8:	1ad2      	subs	r2, r2, r3
 8005fca:	9204      	str	r2, [sp, #16]
 8005fcc:	9a05      	ldr	r2, [sp, #20]
 8005fce:	1aed      	subs	r5, r5, r3
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	9305      	str	r3, [sp, #20]
 8005fd4:	9b07      	ldr	r3, [sp, #28]
 8005fd6:	b31b      	cbz	r3, 8006020 <_dtoa_r+0x7a0>
 8005fd8:	9b08      	ldr	r3, [sp, #32]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 80af 	beq.w	800613e <_dtoa_r+0x8be>
 8005fe0:	2e00      	cmp	r6, #0
 8005fe2:	dd13      	ble.n	800600c <_dtoa_r+0x78c>
 8005fe4:	4639      	mov	r1, r7
 8005fe6:	4632      	mov	r2, r6
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f000 fbfb 	bl	80067e4 <__pow5mult>
 8005fee:	ee18 2a10 	vmov	r2, s16
 8005ff2:	4601      	mov	r1, r0
 8005ff4:	4607      	mov	r7, r0
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	f000 fb4a 	bl	8006690 <__multiply>
 8005ffc:	ee18 1a10 	vmov	r1, s16
 8006000:	4680      	mov	r8, r0
 8006002:	4620      	mov	r0, r4
 8006004:	f000 fa76 	bl	80064f4 <_Bfree>
 8006008:	ee08 8a10 	vmov	s16, r8
 800600c:	9b07      	ldr	r3, [sp, #28]
 800600e:	1b9a      	subs	r2, r3, r6
 8006010:	d006      	beq.n	8006020 <_dtoa_r+0x7a0>
 8006012:	ee18 1a10 	vmov	r1, s16
 8006016:	4620      	mov	r0, r4
 8006018:	f000 fbe4 	bl	80067e4 <__pow5mult>
 800601c:	ee08 0a10 	vmov	s16, r0
 8006020:	2101      	movs	r1, #1
 8006022:	4620      	mov	r0, r4
 8006024:	f000 fb1e 	bl	8006664 <__i2b>
 8006028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800602a:	2b00      	cmp	r3, #0
 800602c:	4606      	mov	r6, r0
 800602e:	f340 8088 	ble.w	8006142 <_dtoa_r+0x8c2>
 8006032:	461a      	mov	r2, r3
 8006034:	4601      	mov	r1, r0
 8006036:	4620      	mov	r0, r4
 8006038:	f000 fbd4 	bl	80067e4 <__pow5mult>
 800603c:	9b06      	ldr	r3, [sp, #24]
 800603e:	2b01      	cmp	r3, #1
 8006040:	4606      	mov	r6, r0
 8006042:	f340 8081 	ble.w	8006148 <_dtoa_r+0x8c8>
 8006046:	f04f 0800 	mov.w	r8, #0
 800604a:	6933      	ldr	r3, [r6, #16]
 800604c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006050:	6918      	ldr	r0, [r3, #16]
 8006052:	f000 fab7 	bl	80065c4 <__hi0bits>
 8006056:	f1c0 0020 	rsb	r0, r0, #32
 800605a:	9b05      	ldr	r3, [sp, #20]
 800605c:	4418      	add	r0, r3
 800605e:	f010 001f 	ands.w	r0, r0, #31
 8006062:	f000 8092 	beq.w	800618a <_dtoa_r+0x90a>
 8006066:	f1c0 0320 	rsb	r3, r0, #32
 800606a:	2b04      	cmp	r3, #4
 800606c:	f340 808a 	ble.w	8006184 <_dtoa_r+0x904>
 8006070:	f1c0 001c 	rsb	r0, r0, #28
 8006074:	9b04      	ldr	r3, [sp, #16]
 8006076:	4403      	add	r3, r0
 8006078:	9304      	str	r3, [sp, #16]
 800607a:	9b05      	ldr	r3, [sp, #20]
 800607c:	4403      	add	r3, r0
 800607e:	4405      	add	r5, r0
 8006080:	9305      	str	r3, [sp, #20]
 8006082:	9b04      	ldr	r3, [sp, #16]
 8006084:	2b00      	cmp	r3, #0
 8006086:	dd07      	ble.n	8006098 <_dtoa_r+0x818>
 8006088:	ee18 1a10 	vmov	r1, s16
 800608c:	461a      	mov	r2, r3
 800608e:	4620      	mov	r0, r4
 8006090:	f000 fc02 	bl	8006898 <__lshift>
 8006094:	ee08 0a10 	vmov	s16, r0
 8006098:	9b05      	ldr	r3, [sp, #20]
 800609a:	2b00      	cmp	r3, #0
 800609c:	dd05      	ble.n	80060aa <_dtoa_r+0x82a>
 800609e:	4631      	mov	r1, r6
 80060a0:	461a      	mov	r2, r3
 80060a2:	4620      	mov	r0, r4
 80060a4:	f000 fbf8 	bl	8006898 <__lshift>
 80060a8:	4606      	mov	r6, r0
 80060aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d06e      	beq.n	800618e <_dtoa_r+0x90e>
 80060b0:	ee18 0a10 	vmov	r0, s16
 80060b4:	4631      	mov	r1, r6
 80060b6:	f000 fc5f 	bl	8006978 <__mcmp>
 80060ba:	2800      	cmp	r0, #0
 80060bc:	da67      	bge.n	800618e <_dtoa_r+0x90e>
 80060be:	9b00      	ldr	r3, [sp, #0]
 80060c0:	3b01      	subs	r3, #1
 80060c2:	ee18 1a10 	vmov	r1, s16
 80060c6:	9300      	str	r3, [sp, #0]
 80060c8:	220a      	movs	r2, #10
 80060ca:	2300      	movs	r3, #0
 80060cc:	4620      	mov	r0, r4
 80060ce:	f000 fa33 	bl	8006538 <__multadd>
 80060d2:	9b08      	ldr	r3, [sp, #32]
 80060d4:	ee08 0a10 	vmov	s16, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f000 81b1 	beq.w	8006440 <_dtoa_r+0xbc0>
 80060de:	2300      	movs	r3, #0
 80060e0:	4639      	mov	r1, r7
 80060e2:	220a      	movs	r2, #10
 80060e4:	4620      	mov	r0, r4
 80060e6:	f000 fa27 	bl	8006538 <__multadd>
 80060ea:	9b02      	ldr	r3, [sp, #8]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	4607      	mov	r7, r0
 80060f0:	f300 808e 	bgt.w	8006210 <_dtoa_r+0x990>
 80060f4:	9b06      	ldr	r3, [sp, #24]
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	dc51      	bgt.n	800619e <_dtoa_r+0x91e>
 80060fa:	e089      	b.n	8006210 <_dtoa_r+0x990>
 80060fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006102:	e74b      	b.n	8005f9c <_dtoa_r+0x71c>
 8006104:	9b03      	ldr	r3, [sp, #12]
 8006106:	1e5e      	subs	r6, r3, #1
 8006108:	9b07      	ldr	r3, [sp, #28]
 800610a:	42b3      	cmp	r3, r6
 800610c:	bfbf      	itttt	lt
 800610e:	9b07      	ldrlt	r3, [sp, #28]
 8006110:	9607      	strlt	r6, [sp, #28]
 8006112:	1af2      	sublt	r2, r6, r3
 8006114:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006116:	bfb6      	itet	lt
 8006118:	189b      	addlt	r3, r3, r2
 800611a:	1b9e      	subge	r6, r3, r6
 800611c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800611e:	9b03      	ldr	r3, [sp, #12]
 8006120:	bfb8      	it	lt
 8006122:	2600      	movlt	r6, #0
 8006124:	2b00      	cmp	r3, #0
 8006126:	bfb7      	itett	lt
 8006128:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800612c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006130:	1a9d      	sublt	r5, r3, r2
 8006132:	2300      	movlt	r3, #0
 8006134:	e734      	b.n	8005fa0 <_dtoa_r+0x720>
 8006136:	9e07      	ldr	r6, [sp, #28]
 8006138:	9d04      	ldr	r5, [sp, #16]
 800613a:	9f08      	ldr	r7, [sp, #32]
 800613c:	e73b      	b.n	8005fb6 <_dtoa_r+0x736>
 800613e:	9a07      	ldr	r2, [sp, #28]
 8006140:	e767      	b.n	8006012 <_dtoa_r+0x792>
 8006142:	9b06      	ldr	r3, [sp, #24]
 8006144:	2b01      	cmp	r3, #1
 8006146:	dc18      	bgt.n	800617a <_dtoa_r+0x8fa>
 8006148:	f1ba 0f00 	cmp.w	sl, #0
 800614c:	d115      	bne.n	800617a <_dtoa_r+0x8fa>
 800614e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006152:	b993      	cbnz	r3, 800617a <_dtoa_r+0x8fa>
 8006154:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006158:	0d1b      	lsrs	r3, r3, #20
 800615a:	051b      	lsls	r3, r3, #20
 800615c:	b183      	cbz	r3, 8006180 <_dtoa_r+0x900>
 800615e:	9b04      	ldr	r3, [sp, #16]
 8006160:	3301      	adds	r3, #1
 8006162:	9304      	str	r3, [sp, #16]
 8006164:	9b05      	ldr	r3, [sp, #20]
 8006166:	3301      	adds	r3, #1
 8006168:	9305      	str	r3, [sp, #20]
 800616a:	f04f 0801 	mov.w	r8, #1
 800616e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006170:	2b00      	cmp	r3, #0
 8006172:	f47f af6a 	bne.w	800604a <_dtoa_r+0x7ca>
 8006176:	2001      	movs	r0, #1
 8006178:	e76f      	b.n	800605a <_dtoa_r+0x7da>
 800617a:	f04f 0800 	mov.w	r8, #0
 800617e:	e7f6      	b.n	800616e <_dtoa_r+0x8ee>
 8006180:	4698      	mov	r8, r3
 8006182:	e7f4      	b.n	800616e <_dtoa_r+0x8ee>
 8006184:	f43f af7d 	beq.w	8006082 <_dtoa_r+0x802>
 8006188:	4618      	mov	r0, r3
 800618a:	301c      	adds	r0, #28
 800618c:	e772      	b.n	8006074 <_dtoa_r+0x7f4>
 800618e:	9b03      	ldr	r3, [sp, #12]
 8006190:	2b00      	cmp	r3, #0
 8006192:	dc37      	bgt.n	8006204 <_dtoa_r+0x984>
 8006194:	9b06      	ldr	r3, [sp, #24]
 8006196:	2b02      	cmp	r3, #2
 8006198:	dd34      	ble.n	8006204 <_dtoa_r+0x984>
 800619a:	9b03      	ldr	r3, [sp, #12]
 800619c:	9302      	str	r3, [sp, #8]
 800619e:	9b02      	ldr	r3, [sp, #8]
 80061a0:	b96b      	cbnz	r3, 80061be <_dtoa_r+0x93e>
 80061a2:	4631      	mov	r1, r6
 80061a4:	2205      	movs	r2, #5
 80061a6:	4620      	mov	r0, r4
 80061a8:	f000 f9c6 	bl	8006538 <__multadd>
 80061ac:	4601      	mov	r1, r0
 80061ae:	4606      	mov	r6, r0
 80061b0:	ee18 0a10 	vmov	r0, s16
 80061b4:	f000 fbe0 	bl	8006978 <__mcmp>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	f73f adbb 	bgt.w	8005d34 <_dtoa_r+0x4b4>
 80061be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061c0:	9d01      	ldr	r5, [sp, #4]
 80061c2:	43db      	mvns	r3, r3
 80061c4:	9300      	str	r3, [sp, #0]
 80061c6:	f04f 0800 	mov.w	r8, #0
 80061ca:	4631      	mov	r1, r6
 80061cc:	4620      	mov	r0, r4
 80061ce:	f000 f991 	bl	80064f4 <_Bfree>
 80061d2:	2f00      	cmp	r7, #0
 80061d4:	f43f aea4 	beq.w	8005f20 <_dtoa_r+0x6a0>
 80061d8:	f1b8 0f00 	cmp.w	r8, #0
 80061dc:	d005      	beq.n	80061ea <_dtoa_r+0x96a>
 80061de:	45b8      	cmp	r8, r7
 80061e0:	d003      	beq.n	80061ea <_dtoa_r+0x96a>
 80061e2:	4641      	mov	r1, r8
 80061e4:	4620      	mov	r0, r4
 80061e6:	f000 f985 	bl	80064f4 <_Bfree>
 80061ea:	4639      	mov	r1, r7
 80061ec:	4620      	mov	r0, r4
 80061ee:	f000 f981 	bl	80064f4 <_Bfree>
 80061f2:	e695      	b.n	8005f20 <_dtoa_r+0x6a0>
 80061f4:	2600      	movs	r6, #0
 80061f6:	4637      	mov	r7, r6
 80061f8:	e7e1      	b.n	80061be <_dtoa_r+0x93e>
 80061fa:	9700      	str	r7, [sp, #0]
 80061fc:	4637      	mov	r7, r6
 80061fe:	e599      	b.n	8005d34 <_dtoa_r+0x4b4>
 8006200:	40240000 	.word	0x40240000
 8006204:	9b08      	ldr	r3, [sp, #32]
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 80ca 	beq.w	80063a0 <_dtoa_r+0xb20>
 800620c:	9b03      	ldr	r3, [sp, #12]
 800620e:	9302      	str	r3, [sp, #8]
 8006210:	2d00      	cmp	r5, #0
 8006212:	dd05      	ble.n	8006220 <_dtoa_r+0x9a0>
 8006214:	4639      	mov	r1, r7
 8006216:	462a      	mov	r2, r5
 8006218:	4620      	mov	r0, r4
 800621a:	f000 fb3d 	bl	8006898 <__lshift>
 800621e:	4607      	mov	r7, r0
 8006220:	f1b8 0f00 	cmp.w	r8, #0
 8006224:	d05b      	beq.n	80062de <_dtoa_r+0xa5e>
 8006226:	6879      	ldr	r1, [r7, #4]
 8006228:	4620      	mov	r0, r4
 800622a:	f000 f923 	bl	8006474 <_Balloc>
 800622e:	4605      	mov	r5, r0
 8006230:	b928      	cbnz	r0, 800623e <_dtoa_r+0x9be>
 8006232:	4b87      	ldr	r3, [pc, #540]	; (8006450 <_dtoa_r+0xbd0>)
 8006234:	4602      	mov	r2, r0
 8006236:	f240 21ea 	movw	r1, #746	; 0x2ea
 800623a:	f7ff bb3b 	b.w	80058b4 <_dtoa_r+0x34>
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	3202      	adds	r2, #2
 8006242:	0092      	lsls	r2, r2, #2
 8006244:	f107 010c 	add.w	r1, r7, #12
 8006248:	300c      	adds	r0, #12
 800624a:	f7fe fdeb 	bl	8004e24 <memcpy>
 800624e:	2201      	movs	r2, #1
 8006250:	4629      	mov	r1, r5
 8006252:	4620      	mov	r0, r4
 8006254:	f000 fb20 	bl	8006898 <__lshift>
 8006258:	9b01      	ldr	r3, [sp, #4]
 800625a:	f103 0901 	add.w	r9, r3, #1
 800625e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006262:	4413      	add	r3, r2
 8006264:	9305      	str	r3, [sp, #20]
 8006266:	f00a 0301 	and.w	r3, sl, #1
 800626a:	46b8      	mov	r8, r7
 800626c:	9304      	str	r3, [sp, #16]
 800626e:	4607      	mov	r7, r0
 8006270:	4631      	mov	r1, r6
 8006272:	ee18 0a10 	vmov	r0, s16
 8006276:	f7ff fa75 	bl	8005764 <quorem>
 800627a:	4641      	mov	r1, r8
 800627c:	9002      	str	r0, [sp, #8]
 800627e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006282:	ee18 0a10 	vmov	r0, s16
 8006286:	f000 fb77 	bl	8006978 <__mcmp>
 800628a:	463a      	mov	r2, r7
 800628c:	9003      	str	r0, [sp, #12]
 800628e:	4631      	mov	r1, r6
 8006290:	4620      	mov	r0, r4
 8006292:	f000 fb8d 	bl	80069b0 <__mdiff>
 8006296:	68c2      	ldr	r2, [r0, #12]
 8006298:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800629c:	4605      	mov	r5, r0
 800629e:	bb02      	cbnz	r2, 80062e2 <_dtoa_r+0xa62>
 80062a0:	4601      	mov	r1, r0
 80062a2:	ee18 0a10 	vmov	r0, s16
 80062a6:	f000 fb67 	bl	8006978 <__mcmp>
 80062aa:	4602      	mov	r2, r0
 80062ac:	4629      	mov	r1, r5
 80062ae:	4620      	mov	r0, r4
 80062b0:	9207      	str	r2, [sp, #28]
 80062b2:	f000 f91f 	bl	80064f4 <_Bfree>
 80062b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80062ba:	ea43 0102 	orr.w	r1, r3, r2
 80062be:	9b04      	ldr	r3, [sp, #16]
 80062c0:	430b      	orrs	r3, r1
 80062c2:	464d      	mov	r5, r9
 80062c4:	d10f      	bne.n	80062e6 <_dtoa_r+0xa66>
 80062c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80062ca:	d02a      	beq.n	8006322 <_dtoa_r+0xaa2>
 80062cc:	9b03      	ldr	r3, [sp, #12]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	dd02      	ble.n	80062d8 <_dtoa_r+0xa58>
 80062d2:	9b02      	ldr	r3, [sp, #8]
 80062d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80062d8:	f88b a000 	strb.w	sl, [fp]
 80062dc:	e775      	b.n	80061ca <_dtoa_r+0x94a>
 80062de:	4638      	mov	r0, r7
 80062e0:	e7ba      	b.n	8006258 <_dtoa_r+0x9d8>
 80062e2:	2201      	movs	r2, #1
 80062e4:	e7e2      	b.n	80062ac <_dtoa_r+0xa2c>
 80062e6:	9b03      	ldr	r3, [sp, #12]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	db04      	blt.n	80062f6 <_dtoa_r+0xa76>
 80062ec:	9906      	ldr	r1, [sp, #24]
 80062ee:	430b      	orrs	r3, r1
 80062f0:	9904      	ldr	r1, [sp, #16]
 80062f2:	430b      	orrs	r3, r1
 80062f4:	d122      	bne.n	800633c <_dtoa_r+0xabc>
 80062f6:	2a00      	cmp	r2, #0
 80062f8:	ddee      	ble.n	80062d8 <_dtoa_r+0xa58>
 80062fa:	ee18 1a10 	vmov	r1, s16
 80062fe:	2201      	movs	r2, #1
 8006300:	4620      	mov	r0, r4
 8006302:	f000 fac9 	bl	8006898 <__lshift>
 8006306:	4631      	mov	r1, r6
 8006308:	ee08 0a10 	vmov	s16, r0
 800630c:	f000 fb34 	bl	8006978 <__mcmp>
 8006310:	2800      	cmp	r0, #0
 8006312:	dc03      	bgt.n	800631c <_dtoa_r+0xa9c>
 8006314:	d1e0      	bne.n	80062d8 <_dtoa_r+0xa58>
 8006316:	f01a 0f01 	tst.w	sl, #1
 800631a:	d0dd      	beq.n	80062d8 <_dtoa_r+0xa58>
 800631c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006320:	d1d7      	bne.n	80062d2 <_dtoa_r+0xa52>
 8006322:	2339      	movs	r3, #57	; 0x39
 8006324:	f88b 3000 	strb.w	r3, [fp]
 8006328:	462b      	mov	r3, r5
 800632a:	461d      	mov	r5, r3
 800632c:	3b01      	subs	r3, #1
 800632e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006332:	2a39      	cmp	r2, #57	; 0x39
 8006334:	d071      	beq.n	800641a <_dtoa_r+0xb9a>
 8006336:	3201      	adds	r2, #1
 8006338:	701a      	strb	r2, [r3, #0]
 800633a:	e746      	b.n	80061ca <_dtoa_r+0x94a>
 800633c:	2a00      	cmp	r2, #0
 800633e:	dd07      	ble.n	8006350 <_dtoa_r+0xad0>
 8006340:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006344:	d0ed      	beq.n	8006322 <_dtoa_r+0xaa2>
 8006346:	f10a 0301 	add.w	r3, sl, #1
 800634a:	f88b 3000 	strb.w	r3, [fp]
 800634e:	e73c      	b.n	80061ca <_dtoa_r+0x94a>
 8006350:	9b05      	ldr	r3, [sp, #20]
 8006352:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006356:	4599      	cmp	r9, r3
 8006358:	d047      	beq.n	80063ea <_dtoa_r+0xb6a>
 800635a:	ee18 1a10 	vmov	r1, s16
 800635e:	2300      	movs	r3, #0
 8006360:	220a      	movs	r2, #10
 8006362:	4620      	mov	r0, r4
 8006364:	f000 f8e8 	bl	8006538 <__multadd>
 8006368:	45b8      	cmp	r8, r7
 800636a:	ee08 0a10 	vmov	s16, r0
 800636e:	f04f 0300 	mov.w	r3, #0
 8006372:	f04f 020a 	mov.w	r2, #10
 8006376:	4641      	mov	r1, r8
 8006378:	4620      	mov	r0, r4
 800637a:	d106      	bne.n	800638a <_dtoa_r+0xb0a>
 800637c:	f000 f8dc 	bl	8006538 <__multadd>
 8006380:	4680      	mov	r8, r0
 8006382:	4607      	mov	r7, r0
 8006384:	f109 0901 	add.w	r9, r9, #1
 8006388:	e772      	b.n	8006270 <_dtoa_r+0x9f0>
 800638a:	f000 f8d5 	bl	8006538 <__multadd>
 800638e:	4639      	mov	r1, r7
 8006390:	4680      	mov	r8, r0
 8006392:	2300      	movs	r3, #0
 8006394:	220a      	movs	r2, #10
 8006396:	4620      	mov	r0, r4
 8006398:	f000 f8ce 	bl	8006538 <__multadd>
 800639c:	4607      	mov	r7, r0
 800639e:	e7f1      	b.n	8006384 <_dtoa_r+0xb04>
 80063a0:	9b03      	ldr	r3, [sp, #12]
 80063a2:	9302      	str	r3, [sp, #8]
 80063a4:	9d01      	ldr	r5, [sp, #4]
 80063a6:	ee18 0a10 	vmov	r0, s16
 80063aa:	4631      	mov	r1, r6
 80063ac:	f7ff f9da 	bl	8005764 <quorem>
 80063b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80063b4:	9b01      	ldr	r3, [sp, #4]
 80063b6:	f805 ab01 	strb.w	sl, [r5], #1
 80063ba:	1aea      	subs	r2, r5, r3
 80063bc:	9b02      	ldr	r3, [sp, #8]
 80063be:	4293      	cmp	r3, r2
 80063c0:	dd09      	ble.n	80063d6 <_dtoa_r+0xb56>
 80063c2:	ee18 1a10 	vmov	r1, s16
 80063c6:	2300      	movs	r3, #0
 80063c8:	220a      	movs	r2, #10
 80063ca:	4620      	mov	r0, r4
 80063cc:	f000 f8b4 	bl	8006538 <__multadd>
 80063d0:	ee08 0a10 	vmov	s16, r0
 80063d4:	e7e7      	b.n	80063a6 <_dtoa_r+0xb26>
 80063d6:	9b02      	ldr	r3, [sp, #8]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	bfc8      	it	gt
 80063dc:	461d      	movgt	r5, r3
 80063de:	9b01      	ldr	r3, [sp, #4]
 80063e0:	bfd8      	it	le
 80063e2:	2501      	movle	r5, #1
 80063e4:	441d      	add	r5, r3
 80063e6:	f04f 0800 	mov.w	r8, #0
 80063ea:	ee18 1a10 	vmov	r1, s16
 80063ee:	2201      	movs	r2, #1
 80063f0:	4620      	mov	r0, r4
 80063f2:	f000 fa51 	bl	8006898 <__lshift>
 80063f6:	4631      	mov	r1, r6
 80063f8:	ee08 0a10 	vmov	s16, r0
 80063fc:	f000 fabc 	bl	8006978 <__mcmp>
 8006400:	2800      	cmp	r0, #0
 8006402:	dc91      	bgt.n	8006328 <_dtoa_r+0xaa8>
 8006404:	d102      	bne.n	800640c <_dtoa_r+0xb8c>
 8006406:	f01a 0f01 	tst.w	sl, #1
 800640a:	d18d      	bne.n	8006328 <_dtoa_r+0xaa8>
 800640c:	462b      	mov	r3, r5
 800640e:	461d      	mov	r5, r3
 8006410:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006414:	2a30      	cmp	r2, #48	; 0x30
 8006416:	d0fa      	beq.n	800640e <_dtoa_r+0xb8e>
 8006418:	e6d7      	b.n	80061ca <_dtoa_r+0x94a>
 800641a:	9a01      	ldr	r2, [sp, #4]
 800641c:	429a      	cmp	r2, r3
 800641e:	d184      	bne.n	800632a <_dtoa_r+0xaaa>
 8006420:	9b00      	ldr	r3, [sp, #0]
 8006422:	3301      	adds	r3, #1
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	2331      	movs	r3, #49	; 0x31
 8006428:	7013      	strb	r3, [r2, #0]
 800642a:	e6ce      	b.n	80061ca <_dtoa_r+0x94a>
 800642c:	4b09      	ldr	r3, [pc, #36]	; (8006454 <_dtoa_r+0xbd4>)
 800642e:	f7ff ba95 	b.w	800595c <_dtoa_r+0xdc>
 8006432:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006434:	2b00      	cmp	r3, #0
 8006436:	f47f aa6e 	bne.w	8005916 <_dtoa_r+0x96>
 800643a:	4b07      	ldr	r3, [pc, #28]	; (8006458 <_dtoa_r+0xbd8>)
 800643c:	f7ff ba8e 	b.w	800595c <_dtoa_r+0xdc>
 8006440:	9b02      	ldr	r3, [sp, #8]
 8006442:	2b00      	cmp	r3, #0
 8006444:	dcae      	bgt.n	80063a4 <_dtoa_r+0xb24>
 8006446:	9b06      	ldr	r3, [sp, #24]
 8006448:	2b02      	cmp	r3, #2
 800644a:	f73f aea8 	bgt.w	800619e <_dtoa_r+0x91e>
 800644e:	e7a9      	b.n	80063a4 <_dtoa_r+0xb24>
 8006450:	08007d23 	.word	0x08007d23
 8006454:	08007c80 	.word	0x08007c80
 8006458:	08007ca4 	.word	0x08007ca4

0800645c <_localeconv_r>:
 800645c:	4800      	ldr	r0, [pc, #0]	; (8006460 <_localeconv_r+0x4>)
 800645e:	4770      	bx	lr
 8006460:	20000164 	.word	0x20000164

08006464 <malloc>:
 8006464:	4b02      	ldr	r3, [pc, #8]	; (8006470 <malloc+0xc>)
 8006466:	4601      	mov	r1, r0
 8006468:	6818      	ldr	r0, [r3, #0]
 800646a:	f000 bc09 	b.w	8006c80 <_malloc_r>
 800646e:	bf00      	nop
 8006470:	20000010 	.word	0x20000010

08006474 <_Balloc>:
 8006474:	b570      	push	{r4, r5, r6, lr}
 8006476:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006478:	4604      	mov	r4, r0
 800647a:	460d      	mov	r5, r1
 800647c:	b976      	cbnz	r6, 800649c <_Balloc+0x28>
 800647e:	2010      	movs	r0, #16
 8006480:	f7ff fff0 	bl	8006464 <malloc>
 8006484:	4602      	mov	r2, r0
 8006486:	6260      	str	r0, [r4, #36]	; 0x24
 8006488:	b920      	cbnz	r0, 8006494 <_Balloc+0x20>
 800648a:	4b18      	ldr	r3, [pc, #96]	; (80064ec <_Balloc+0x78>)
 800648c:	4818      	ldr	r0, [pc, #96]	; (80064f0 <_Balloc+0x7c>)
 800648e:	2166      	movs	r1, #102	; 0x66
 8006490:	f000 fdd6 	bl	8007040 <__assert_func>
 8006494:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006498:	6006      	str	r6, [r0, #0]
 800649a:	60c6      	str	r6, [r0, #12]
 800649c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800649e:	68f3      	ldr	r3, [r6, #12]
 80064a0:	b183      	cbz	r3, 80064c4 <_Balloc+0x50>
 80064a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064aa:	b9b8      	cbnz	r0, 80064dc <_Balloc+0x68>
 80064ac:	2101      	movs	r1, #1
 80064ae:	fa01 f605 	lsl.w	r6, r1, r5
 80064b2:	1d72      	adds	r2, r6, #5
 80064b4:	0092      	lsls	r2, r2, #2
 80064b6:	4620      	mov	r0, r4
 80064b8:	f000 fb60 	bl	8006b7c <_calloc_r>
 80064bc:	b160      	cbz	r0, 80064d8 <_Balloc+0x64>
 80064be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064c2:	e00e      	b.n	80064e2 <_Balloc+0x6e>
 80064c4:	2221      	movs	r2, #33	; 0x21
 80064c6:	2104      	movs	r1, #4
 80064c8:	4620      	mov	r0, r4
 80064ca:	f000 fb57 	bl	8006b7c <_calloc_r>
 80064ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064d0:	60f0      	str	r0, [r6, #12]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1e4      	bne.n	80064a2 <_Balloc+0x2e>
 80064d8:	2000      	movs	r0, #0
 80064da:	bd70      	pop	{r4, r5, r6, pc}
 80064dc:	6802      	ldr	r2, [r0, #0]
 80064de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80064e2:	2300      	movs	r3, #0
 80064e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064e8:	e7f7      	b.n	80064da <_Balloc+0x66>
 80064ea:	bf00      	nop
 80064ec:	08007cb1 	.word	0x08007cb1
 80064f0:	08007d34 	.word	0x08007d34

080064f4 <_Bfree>:
 80064f4:	b570      	push	{r4, r5, r6, lr}
 80064f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80064f8:	4605      	mov	r5, r0
 80064fa:	460c      	mov	r4, r1
 80064fc:	b976      	cbnz	r6, 800651c <_Bfree+0x28>
 80064fe:	2010      	movs	r0, #16
 8006500:	f7ff ffb0 	bl	8006464 <malloc>
 8006504:	4602      	mov	r2, r0
 8006506:	6268      	str	r0, [r5, #36]	; 0x24
 8006508:	b920      	cbnz	r0, 8006514 <_Bfree+0x20>
 800650a:	4b09      	ldr	r3, [pc, #36]	; (8006530 <_Bfree+0x3c>)
 800650c:	4809      	ldr	r0, [pc, #36]	; (8006534 <_Bfree+0x40>)
 800650e:	218a      	movs	r1, #138	; 0x8a
 8006510:	f000 fd96 	bl	8007040 <__assert_func>
 8006514:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006518:	6006      	str	r6, [r0, #0]
 800651a:	60c6      	str	r6, [r0, #12]
 800651c:	b13c      	cbz	r4, 800652e <_Bfree+0x3a>
 800651e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006520:	6862      	ldr	r2, [r4, #4]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006528:	6021      	str	r1, [r4, #0]
 800652a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800652e:	bd70      	pop	{r4, r5, r6, pc}
 8006530:	08007cb1 	.word	0x08007cb1
 8006534:	08007d34 	.word	0x08007d34

08006538 <__multadd>:
 8006538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800653c:	690d      	ldr	r5, [r1, #16]
 800653e:	4607      	mov	r7, r0
 8006540:	460c      	mov	r4, r1
 8006542:	461e      	mov	r6, r3
 8006544:	f101 0c14 	add.w	ip, r1, #20
 8006548:	2000      	movs	r0, #0
 800654a:	f8dc 3000 	ldr.w	r3, [ip]
 800654e:	b299      	uxth	r1, r3
 8006550:	fb02 6101 	mla	r1, r2, r1, r6
 8006554:	0c1e      	lsrs	r6, r3, #16
 8006556:	0c0b      	lsrs	r3, r1, #16
 8006558:	fb02 3306 	mla	r3, r2, r6, r3
 800655c:	b289      	uxth	r1, r1
 800655e:	3001      	adds	r0, #1
 8006560:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006564:	4285      	cmp	r5, r0
 8006566:	f84c 1b04 	str.w	r1, [ip], #4
 800656a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800656e:	dcec      	bgt.n	800654a <__multadd+0x12>
 8006570:	b30e      	cbz	r6, 80065b6 <__multadd+0x7e>
 8006572:	68a3      	ldr	r3, [r4, #8]
 8006574:	42ab      	cmp	r3, r5
 8006576:	dc19      	bgt.n	80065ac <__multadd+0x74>
 8006578:	6861      	ldr	r1, [r4, #4]
 800657a:	4638      	mov	r0, r7
 800657c:	3101      	adds	r1, #1
 800657e:	f7ff ff79 	bl	8006474 <_Balloc>
 8006582:	4680      	mov	r8, r0
 8006584:	b928      	cbnz	r0, 8006592 <__multadd+0x5a>
 8006586:	4602      	mov	r2, r0
 8006588:	4b0c      	ldr	r3, [pc, #48]	; (80065bc <__multadd+0x84>)
 800658a:	480d      	ldr	r0, [pc, #52]	; (80065c0 <__multadd+0x88>)
 800658c:	21b5      	movs	r1, #181	; 0xb5
 800658e:	f000 fd57 	bl	8007040 <__assert_func>
 8006592:	6922      	ldr	r2, [r4, #16]
 8006594:	3202      	adds	r2, #2
 8006596:	f104 010c 	add.w	r1, r4, #12
 800659a:	0092      	lsls	r2, r2, #2
 800659c:	300c      	adds	r0, #12
 800659e:	f7fe fc41 	bl	8004e24 <memcpy>
 80065a2:	4621      	mov	r1, r4
 80065a4:	4638      	mov	r0, r7
 80065a6:	f7ff ffa5 	bl	80064f4 <_Bfree>
 80065aa:	4644      	mov	r4, r8
 80065ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80065b0:	3501      	adds	r5, #1
 80065b2:	615e      	str	r6, [r3, #20]
 80065b4:	6125      	str	r5, [r4, #16]
 80065b6:	4620      	mov	r0, r4
 80065b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065bc:	08007d23 	.word	0x08007d23
 80065c0:	08007d34 	.word	0x08007d34

080065c4 <__hi0bits>:
 80065c4:	0c03      	lsrs	r3, r0, #16
 80065c6:	041b      	lsls	r3, r3, #16
 80065c8:	b9d3      	cbnz	r3, 8006600 <__hi0bits+0x3c>
 80065ca:	0400      	lsls	r0, r0, #16
 80065cc:	2310      	movs	r3, #16
 80065ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80065d2:	bf04      	itt	eq
 80065d4:	0200      	lsleq	r0, r0, #8
 80065d6:	3308      	addeq	r3, #8
 80065d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80065dc:	bf04      	itt	eq
 80065de:	0100      	lsleq	r0, r0, #4
 80065e0:	3304      	addeq	r3, #4
 80065e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80065e6:	bf04      	itt	eq
 80065e8:	0080      	lsleq	r0, r0, #2
 80065ea:	3302      	addeq	r3, #2
 80065ec:	2800      	cmp	r0, #0
 80065ee:	db05      	blt.n	80065fc <__hi0bits+0x38>
 80065f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80065f4:	f103 0301 	add.w	r3, r3, #1
 80065f8:	bf08      	it	eq
 80065fa:	2320      	moveq	r3, #32
 80065fc:	4618      	mov	r0, r3
 80065fe:	4770      	bx	lr
 8006600:	2300      	movs	r3, #0
 8006602:	e7e4      	b.n	80065ce <__hi0bits+0xa>

08006604 <__lo0bits>:
 8006604:	6803      	ldr	r3, [r0, #0]
 8006606:	f013 0207 	ands.w	r2, r3, #7
 800660a:	4601      	mov	r1, r0
 800660c:	d00b      	beq.n	8006626 <__lo0bits+0x22>
 800660e:	07da      	lsls	r2, r3, #31
 8006610:	d423      	bmi.n	800665a <__lo0bits+0x56>
 8006612:	0798      	lsls	r0, r3, #30
 8006614:	bf49      	itett	mi
 8006616:	085b      	lsrmi	r3, r3, #1
 8006618:	089b      	lsrpl	r3, r3, #2
 800661a:	2001      	movmi	r0, #1
 800661c:	600b      	strmi	r3, [r1, #0]
 800661e:	bf5c      	itt	pl
 8006620:	600b      	strpl	r3, [r1, #0]
 8006622:	2002      	movpl	r0, #2
 8006624:	4770      	bx	lr
 8006626:	b298      	uxth	r0, r3
 8006628:	b9a8      	cbnz	r0, 8006656 <__lo0bits+0x52>
 800662a:	0c1b      	lsrs	r3, r3, #16
 800662c:	2010      	movs	r0, #16
 800662e:	b2da      	uxtb	r2, r3
 8006630:	b90a      	cbnz	r2, 8006636 <__lo0bits+0x32>
 8006632:	3008      	adds	r0, #8
 8006634:	0a1b      	lsrs	r3, r3, #8
 8006636:	071a      	lsls	r2, r3, #28
 8006638:	bf04      	itt	eq
 800663a:	091b      	lsreq	r3, r3, #4
 800663c:	3004      	addeq	r0, #4
 800663e:	079a      	lsls	r2, r3, #30
 8006640:	bf04      	itt	eq
 8006642:	089b      	lsreq	r3, r3, #2
 8006644:	3002      	addeq	r0, #2
 8006646:	07da      	lsls	r2, r3, #31
 8006648:	d403      	bmi.n	8006652 <__lo0bits+0x4e>
 800664a:	085b      	lsrs	r3, r3, #1
 800664c:	f100 0001 	add.w	r0, r0, #1
 8006650:	d005      	beq.n	800665e <__lo0bits+0x5a>
 8006652:	600b      	str	r3, [r1, #0]
 8006654:	4770      	bx	lr
 8006656:	4610      	mov	r0, r2
 8006658:	e7e9      	b.n	800662e <__lo0bits+0x2a>
 800665a:	2000      	movs	r0, #0
 800665c:	4770      	bx	lr
 800665e:	2020      	movs	r0, #32
 8006660:	4770      	bx	lr
	...

08006664 <__i2b>:
 8006664:	b510      	push	{r4, lr}
 8006666:	460c      	mov	r4, r1
 8006668:	2101      	movs	r1, #1
 800666a:	f7ff ff03 	bl	8006474 <_Balloc>
 800666e:	4602      	mov	r2, r0
 8006670:	b928      	cbnz	r0, 800667e <__i2b+0x1a>
 8006672:	4b05      	ldr	r3, [pc, #20]	; (8006688 <__i2b+0x24>)
 8006674:	4805      	ldr	r0, [pc, #20]	; (800668c <__i2b+0x28>)
 8006676:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800667a:	f000 fce1 	bl	8007040 <__assert_func>
 800667e:	2301      	movs	r3, #1
 8006680:	6144      	str	r4, [r0, #20]
 8006682:	6103      	str	r3, [r0, #16]
 8006684:	bd10      	pop	{r4, pc}
 8006686:	bf00      	nop
 8006688:	08007d23 	.word	0x08007d23
 800668c:	08007d34 	.word	0x08007d34

08006690 <__multiply>:
 8006690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006694:	4691      	mov	r9, r2
 8006696:	690a      	ldr	r2, [r1, #16]
 8006698:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800669c:	429a      	cmp	r2, r3
 800669e:	bfb8      	it	lt
 80066a0:	460b      	movlt	r3, r1
 80066a2:	460c      	mov	r4, r1
 80066a4:	bfbc      	itt	lt
 80066a6:	464c      	movlt	r4, r9
 80066a8:	4699      	movlt	r9, r3
 80066aa:	6927      	ldr	r7, [r4, #16]
 80066ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80066b0:	68a3      	ldr	r3, [r4, #8]
 80066b2:	6861      	ldr	r1, [r4, #4]
 80066b4:	eb07 060a 	add.w	r6, r7, sl
 80066b8:	42b3      	cmp	r3, r6
 80066ba:	b085      	sub	sp, #20
 80066bc:	bfb8      	it	lt
 80066be:	3101      	addlt	r1, #1
 80066c0:	f7ff fed8 	bl	8006474 <_Balloc>
 80066c4:	b930      	cbnz	r0, 80066d4 <__multiply+0x44>
 80066c6:	4602      	mov	r2, r0
 80066c8:	4b44      	ldr	r3, [pc, #272]	; (80067dc <__multiply+0x14c>)
 80066ca:	4845      	ldr	r0, [pc, #276]	; (80067e0 <__multiply+0x150>)
 80066cc:	f240 115d 	movw	r1, #349	; 0x15d
 80066d0:	f000 fcb6 	bl	8007040 <__assert_func>
 80066d4:	f100 0514 	add.w	r5, r0, #20
 80066d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80066dc:	462b      	mov	r3, r5
 80066de:	2200      	movs	r2, #0
 80066e0:	4543      	cmp	r3, r8
 80066e2:	d321      	bcc.n	8006728 <__multiply+0x98>
 80066e4:	f104 0314 	add.w	r3, r4, #20
 80066e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80066ec:	f109 0314 	add.w	r3, r9, #20
 80066f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80066f4:	9202      	str	r2, [sp, #8]
 80066f6:	1b3a      	subs	r2, r7, r4
 80066f8:	3a15      	subs	r2, #21
 80066fa:	f022 0203 	bic.w	r2, r2, #3
 80066fe:	3204      	adds	r2, #4
 8006700:	f104 0115 	add.w	r1, r4, #21
 8006704:	428f      	cmp	r7, r1
 8006706:	bf38      	it	cc
 8006708:	2204      	movcc	r2, #4
 800670a:	9201      	str	r2, [sp, #4]
 800670c:	9a02      	ldr	r2, [sp, #8]
 800670e:	9303      	str	r3, [sp, #12]
 8006710:	429a      	cmp	r2, r3
 8006712:	d80c      	bhi.n	800672e <__multiply+0x9e>
 8006714:	2e00      	cmp	r6, #0
 8006716:	dd03      	ble.n	8006720 <__multiply+0x90>
 8006718:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800671c:	2b00      	cmp	r3, #0
 800671e:	d05a      	beq.n	80067d6 <__multiply+0x146>
 8006720:	6106      	str	r6, [r0, #16]
 8006722:	b005      	add	sp, #20
 8006724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006728:	f843 2b04 	str.w	r2, [r3], #4
 800672c:	e7d8      	b.n	80066e0 <__multiply+0x50>
 800672e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006732:	f1ba 0f00 	cmp.w	sl, #0
 8006736:	d024      	beq.n	8006782 <__multiply+0xf2>
 8006738:	f104 0e14 	add.w	lr, r4, #20
 800673c:	46a9      	mov	r9, r5
 800673e:	f04f 0c00 	mov.w	ip, #0
 8006742:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006746:	f8d9 1000 	ldr.w	r1, [r9]
 800674a:	fa1f fb82 	uxth.w	fp, r2
 800674e:	b289      	uxth	r1, r1
 8006750:	fb0a 110b 	mla	r1, sl, fp, r1
 8006754:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006758:	f8d9 2000 	ldr.w	r2, [r9]
 800675c:	4461      	add	r1, ip
 800675e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006762:	fb0a c20b 	mla	r2, sl, fp, ip
 8006766:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800676a:	b289      	uxth	r1, r1
 800676c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006770:	4577      	cmp	r7, lr
 8006772:	f849 1b04 	str.w	r1, [r9], #4
 8006776:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800677a:	d8e2      	bhi.n	8006742 <__multiply+0xb2>
 800677c:	9a01      	ldr	r2, [sp, #4]
 800677e:	f845 c002 	str.w	ip, [r5, r2]
 8006782:	9a03      	ldr	r2, [sp, #12]
 8006784:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006788:	3304      	adds	r3, #4
 800678a:	f1b9 0f00 	cmp.w	r9, #0
 800678e:	d020      	beq.n	80067d2 <__multiply+0x142>
 8006790:	6829      	ldr	r1, [r5, #0]
 8006792:	f104 0c14 	add.w	ip, r4, #20
 8006796:	46ae      	mov	lr, r5
 8006798:	f04f 0a00 	mov.w	sl, #0
 800679c:	f8bc b000 	ldrh.w	fp, [ip]
 80067a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80067a4:	fb09 220b 	mla	r2, r9, fp, r2
 80067a8:	4492      	add	sl, r2
 80067aa:	b289      	uxth	r1, r1
 80067ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80067b0:	f84e 1b04 	str.w	r1, [lr], #4
 80067b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80067b8:	f8be 1000 	ldrh.w	r1, [lr]
 80067bc:	0c12      	lsrs	r2, r2, #16
 80067be:	fb09 1102 	mla	r1, r9, r2, r1
 80067c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80067c6:	4567      	cmp	r7, ip
 80067c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80067cc:	d8e6      	bhi.n	800679c <__multiply+0x10c>
 80067ce:	9a01      	ldr	r2, [sp, #4]
 80067d0:	50a9      	str	r1, [r5, r2]
 80067d2:	3504      	adds	r5, #4
 80067d4:	e79a      	b.n	800670c <__multiply+0x7c>
 80067d6:	3e01      	subs	r6, #1
 80067d8:	e79c      	b.n	8006714 <__multiply+0x84>
 80067da:	bf00      	nop
 80067dc:	08007d23 	.word	0x08007d23
 80067e0:	08007d34 	.word	0x08007d34

080067e4 <__pow5mult>:
 80067e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067e8:	4615      	mov	r5, r2
 80067ea:	f012 0203 	ands.w	r2, r2, #3
 80067ee:	4606      	mov	r6, r0
 80067f0:	460f      	mov	r7, r1
 80067f2:	d007      	beq.n	8006804 <__pow5mult+0x20>
 80067f4:	4c25      	ldr	r4, [pc, #148]	; (800688c <__pow5mult+0xa8>)
 80067f6:	3a01      	subs	r2, #1
 80067f8:	2300      	movs	r3, #0
 80067fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067fe:	f7ff fe9b 	bl	8006538 <__multadd>
 8006802:	4607      	mov	r7, r0
 8006804:	10ad      	asrs	r5, r5, #2
 8006806:	d03d      	beq.n	8006884 <__pow5mult+0xa0>
 8006808:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800680a:	b97c      	cbnz	r4, 800682c <__pow5mult+0x48>
 800680c:	2010      	movs	r0, #16
 800680e:	f7ff fe29 	bl	8006464 <malloc>
 8006812:	4602      	mov	r2, r0
 8006814:	6270      	str	r0, [r6, #36]	; 0x24
 8006816:	b928      	cbnz	r0, 8006824 <__pow5mult+0x40>
 8006818:	4b1d      	ldr	r3, [pc, #116]	; (8006890 <__pow5mult+0xac>)
 800681a:	481e      	ldr	r0, [pc, #120]	; (8006894 <__pow5mult+0xb0>)
 800681c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006820:	f000 fc0e 	bl	8007040 <__assert_func>
 8006824:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006828:	6004      	str	r4, [r0, #0]
 800682a:	60c4      	str	r4, [r0, #12]
 800682c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006830:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006834:	b94c      	cbnz	r4, 800684a <__pow5mult+0x66>
 8006836:	f240 2171 	movw	r1, #625	; 0x271
 800683a:	4630      	mov	r0, r6
 800683c:	f7ff ff12 	bl	8006664 <__i2b>
 8006840:	2300      	movs	r3, #0
 8006842:	f8c8 0008 	str.w	r0, [r8, #8]
 8006846:	4604      	mov	r4, r0
 8006848:	6003      	str	r3, [r0, #0]
 800684a:	f04f 0900 	mov.w	r9, #0
 800684e:	07eb      	lsls	r3, r5, #31
 8006850:	d50a      	bpl.n	8006868 <__pow5mult+0x84>
 8006852:	4639      	mov	r1, r7
 8006854:	4622      	mov	r2, r4
 8006856:	4630      	mov	r0, r6
 8006858:	f7ff ff1a 	bl	8006690 <__multiply>
 800685c:	4639      	mov	r1, r7
 800685e:	4680      	mov	r8, r0
 8006860:	4630      	mov	r0, r6
 8006862:	f7ff fe47 	bl	80064f4 <_Bfree>
 8006866:	4647      	mov	r7, r8
 8006868:	106d      	asrs	r5, r5, #1
 800686a:	d00b      	beq.n	8006884 <__pow5mult+0xa0>
 800686c:	6820      	ldr	r0, [r4, #0]
 800686e:	b938      	cbnz	r0, 8006880 <__pow5mult+0x9c>
 8006870:	4622      	mov	r2, r4
 8006872:	4621      	mov	r1, r4
 8006874:	4630      	mov	r0, r6
 8006876:	f7ff ff0b 	bl	8006690 <__multiply>
 800687a:	6020      	str	r0, [r4, #0]
 800687c:	f8c0 9000 	str.w	r9, [r0]
 8006880:	4604      	mov	r4, r0
 8006882:	e7e4      	b.n	800684e <__pow5mult+0x6a>
 8006884:	4638      	mov	r0, r7
 8006886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800688a:	bf00      	nop
 800688c:	08007e80 	.word	0x08007e80
 8006890:	08007cb1 	.word	0x08007cb1
 8006894:	08007d34 	.word	0x08007d34

08006898 <__lshift>:
 8006898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800689c:	460c      	mov	r4, r1
 800689e:	6849      	ldr	r1, [r1, #4]
 80068a0:	6923      	ldr	r3, [r4, #16]
 80068a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80068a6:	68a3      	ldr	r3, [r4, #8]
 80068a8:	4607      	mov	r7, r0
 80068aa:	4691      	mov	r9, r2
 80068ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068b0:	f108 0601 	add.w	r6, r8, #1
 80068b4:	42b3      	cmp	r3, r6
 80068b6:	db0b      	blt.n	80068d0 <__lshift+0x38>
 80068b8:	4638      	mov	r0, r7
 80068ba:	f7ff fddb 	bl	8006474 <_Balloc>
 80068be:	4605      	mov	r5, r0
 80068c0:	b948      	cbnz	r0, 80068d6 <__lshift+0x3e>
 80068c2:	4602      	mov	r2, r0
 80068c4:	4b2a      	ldr	r3, [pc, #168]	; (8006970 <__lshift+0xd8>)
 80068c6:	482b      	ldr	r0, [pc, #172]	; (8006974 <__lshift+0xdc>)
 80068c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80068cc:	f000 fbb8 	bl	8007040 <__assert_func>
 80068d0:	3101      	adds	r1, #1
 80068d2:	005b      	lsls	r3, r3, #1
 80068d4:	e7ee      	b.n	80068b4 <__lshift+0x1c>
 80068d6:	2300      	movs	r3, #0
 80068d8:	f100 0114 	add.w	r1, r0, #20
 80068dc:	f100 0210 	add.w	r2, r0, #16
 80068e0:	4618      	mov	r0, r3
 80068e2:	4553      	cmp	r3, sl
 80068e4:	db37      	blt.n	8006956 <__lshift+0xbe>
 80068e6:	6920      	ldr	r0, [r4, #16]
 80068e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80068ec:	f104 0314 	add.w	r3, r4, #20
 80068f0:	f019 091f 	ands.w	r9, r9, #31
 80068f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80068fc:	d02f      	beq.n	800695e <__lshift+0xc6>
 80068fe:	f1c9 0e20 	rsb	lr, r9, #32
 8006902:	468a      	mov	sl, r1
 8006904:	f04f 0c00 	mov.w	ip, #0
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	fa02 f209 	lsl.w	r2, r2, r9
 800690e:	ea42 020c 	orr.w	r2, r2, ip
 8006912:	f84a 2b04 	str.w	r2, [sl], #4
 8006916:	f853 2b04 	ldr.w	r2, [r3], #4
 800691a:	4298      	cmp	r0, r3
 800691c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006920:	d8f2      	bhi.n	8006908 <__lshift+0x70>
 8006922:	1b03      	subs	r3, r0, r4
 8006924:	3b15      	subs	r3, #21
 8006926:	f023 0303 	bic.w	r3, r3, #3
 800692a:	3304      	adds	r3, #4
 800692c:	f104 0215 	add.w	r2, r4, #21
 8006930:	4290      	cmp	r0, r2
 8006932:	bf38      	it	cc
 8006934:	2304      	movcc	r3, #4
 8006936:	f841 c003 	str.w	ip, [r1, r3]
 800693a:	f1bc 0f00 	cmp.w	ip, #0
 800693e:	d001      	beq.n	8006944 <__lshift+0xac>
 8006940:	f108 0602 	add.w	r6, r8, #2
 8006944:	3e01      	subs	r6, #1
 8006946:	4638      	mov	r0, r7
 8006948:	612e      	str	r6, [r5, #16]
 800694a:	4621      	mov	r1, r4
 800694c:	f7ff fdd2 	bl	80064f4 <_Bfree>
 8006950:	4628      	mov	r0, r5
 8006952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006956:	f842 0f04 	str.w	r0, [r2, #4]!
 800695a:	3301      	adds	r3, #1
 800695c:	e7c1      	b.n	80068e2 <__lshift+0x4a>
 800695e:	3904      	subs	r1, #4
 8006960:	f853 2b04 	ldr.w	r2, [r3], #4
 8006964:	f841 2f04 	str.w	r2, [r1, #4]!
 8006968:	4298      	cmp	r0, r3
 800696a:	d8f9      	bhi.n	8006960 <__lshift+0xc8>
 800696c:	e7ea      	b.n	8006944 <__lshift+0xac>
 800696e:	bf00      	nop
 8006970:	08007d23 	.word	0x08007d23
 8006974:	08007d34 	.word	0x08007d34

08006978 <__mcmp>:
 8006978:	b530      	push	{r4, r5, lr}
 800697a:	6902      	ldr	r2, [r0, #16]
 800697c:	690c      	ldr	r4, [r1, #16]
 800697e:	1b12      	subs	r2, r2, r4
 8006980:	d10e      	bne.n	80069a0 <__mcmp+0x28>
 8006982:	f100 0314 	add.w	r3, r0, #20
 8006986:	3114      	adds	r1, #20
 8006988:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800698c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006990:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006994:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006998:	42a5      	cmp	r5, r4
 800699a:	d003      	beq.n	80069a4 <__mcmp+0x2c>
 800699c:	d305      	bcc.n	80069aa <__mcmp+0x32>
 800699e:	2201      	movs	r2, #1
 80069a0:	4610      	mov	r0, r2
 80069a2:	bd30      	pop	{r4, r5, pc}
 80069a4:	4283      	cmp	r3, r0
 80069a6:	d3f3      	bcc.n	8006990 <__mcmp+0x18>
 80069a8:	e7fa      	b.n	80069a0 <__mcmp+0x28>
 80069aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069ae:	e7f7      	b.n	80069a0 <__mcmp+0x28>

080069b0 <__mdiff>:
 80069b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b4:	460c      	mov	r4, r1
 80069b6:	4606      	mov	r6, r0
 80069b8:	4611      	mov	r1, r2
 80069ba:	4620      	mov	r0, r4
 80069bc:	4690      	mov	r8, r2
 80069be:	f7ff ffdb 	bl	8006978 <__mcmp>
 80069c2:	1e05      	subs	r5, r0, #0
 80069c4:	d110      	bne.n	80069e8 <__mdiff+0x38>
 80069c6:	4629      	mov	r1, r5
 80069c8:	4630      	mov	r0, r6
 80069ca:	f7ff fd53 	bl	8006474 <_Balloc>
 80069ce:	b930      	cbnz	r0, 80069de <__mdiff+0x2e>
 80069d0:	4b3a      	ldr	r3, [pc, #232]	; (8006abc <__mdiff+0x10c>)
 80069d2:	4602      	mov	r2, r0
 80069d4:	f240 2132 	movw	r1, #562	; 0x232
 80069d8:	4839      	ldr	r0, [pc, #228]	; (8006ac0 <__mdiff+0x110>)
 80069da:	f000 fb31 	bl	8007040 <__assert_func>
 80069de:	2301      	movs	r3, #1
 80069e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80069e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e8:	bfa4      	itt	ge
 80069ea:	4643      	movge	r3, r8
 80069ec:	46a0      	movge	r8, r4
 80069ee:	4630      	mov	r0, r6
 80069f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80069f4:	bfa6      	itte	ge
 80069f6:	461c      	movge	r4, r3
 80069f8:	2500      	movge	r5, #0
 80069fa:	2501      	movlt	r5, #1
 80069fc:	f7ff fd3a 	bl	8006474 <_Balloc>
 8006a00:	b920      	cbnz	r0, 8006a0c <__mdiff+0x5c>
 8006a02:	4b2e      	ldr	r3, [pc, #184]	; (8006abc <__mdiff+0x10c>)
 8006a04:	4602      	mov	r2, r0
 8006a06:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006a0a:	e7e5      	b.n	80069d8 <__mdiff+0x28>
 8006a0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006a10:	6926      	ldr	r6, [r4, #16]
 8006a12:	60c5      	str	r5, [r0, #12]
 8006a14:	f104 0914 	add.w	r9, r4, #20
 8006a18:	f108 0514 	add.w	r5, r8, #20
 8006a1c:	f100 0e14 	add.w	lr, r0, #20
 8006a20:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006a24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006a28:	f108 0210 	add.w	r2, r8, #16
 8006a2c:	46f2      	mov	sl, lr
 8006a2e:	2100      	movs	r1, #0
 8006a30:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006a38:	fa1f f883 	uxth.w	r8, r3
 8006a3c:	fa11 f18b 	uxtah	r1, r1, fp
 8006a40:	0c1b      	lsrs	r3, r3, #16
 8006a42:	eba1 0808 	sub.w	r8, r1, r8
 8006a46:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006a4a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006a4e:	fa1f f888 	uxth.w	r8, r8
 8006a52:	1419      	asrs	r1, r3, #16
 8006a54:	454e      	cmp	r6, r9
 8006a56:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006a5a:	f84a 3b04 	str.w	r3, [sl], #4
 8006a5e:	d8e7      	bhi.n	8006a30 <__mdiff+0x80>
 8006a60:	1b33      	subs	r3, r6, r4
 8006a62:	3b15      	subs	r3, #21
 8006a64:	f023 0303 	bic.w	r3, r3, #3
 8006a68:	3304      	adds	r3, #4
 8006a6a:	3415      	adds	r4, #21
 8006a6c:	42a6      	cmp	r6, r4
 8006a6e:	bf38      	it	cc
 8006a70:	2304      	movcc	r3, #4
 8006a72:	441d      	add	r5, r3
 8006a74:	4473      	add	r3, lr
 8006a76:	469e      	mov	lr, r3
 8006a78:	462e      	mov	r6, r5
 8006a7a:	4566      	cmp	r6, ip
 8006a7c:	d30e      	bcc.n	8006a9c <__mdiff+0xec>
 8006a7e:	f10c 0203 	add.w	r2, ip, #3
 8006a82:	1b52      	subs	r2, r2, r5
 8006a84:	f022 0203 	bic.w	r2, r2, #3
 8006a88:	3d03      	subs	r5, #3
 8006a8a:	45ac      	cmp	ip, r5
 8006a8c:	bf38      	it	cc
 8006a8e:	2200      	movcc	r2, #0
 8006a90:	441a      	add	r2, r3
 8006a92:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006a96:	b17b      	cbz	r3, 8006ab8 <__mdiff+0x108>
 8006a98:	6107      	str	r7, [r0, #16]
 8006a9a:	e7a3      	b.n	80069e4 <__mdiff+0x34>
 8006a9c:	f856 8b04 	ldr.w	r8, [r6], #4
 8006aa0:	fa11 f288 	uxtah	r2, r1, r8
 8006aa4:	1414      	asrs	r4, r2, #16
 8006aa6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006aaa:	b292      	uxth	r2, r2
 8006aac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006ab0:	f84e 2b04 	str.w	r2, [lr], #4
 8006ab4:	1421      	asrs	r1, r4, #16
 8006ab6:	e7e0      	b.n	8006a7a <__mdiff+0xca>
 8006ab8:	3f01      	subs	r7, #1
 8006aba:	e7ea      	b.n	8006a92 <__mdiff+0xe2>
 8006abc:	08007d23 	.word	0x08007d23
 8006ac0:	08007d34 	.word	0x08007d34

08006ac4 <__d2b>:
 8006ac4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ac8:	4689      	mov	r9, r1
 8006aca:	2101      	movs	r1, #1
 8006acc:	ec57 6b10 	vmov	r6, r7, d0
 8006ad0:	4690      	mov	r8, r2
 8006ad2:	f7ff fccf 	bl	8006474 <_Balloc>
 8006ad6:	4604      	mov	r4, r0
 8006ad8:	b930      	cbnz	r0, 8006ae8 <__d2b+0x24>
 8006ada:	4602      	mov	r2, r0
 8006adc:	4b25      	ldr	r3, [pc, #148]	; (8006b74 <__d2b+0xb0>)
 8006ade:	4826      	ldr	r0, [pc, #152]	; (8006b78 <__d2b+0xb4>)
 8006ae0:	f240 310a 	movw	r1, #778	; 0x30a
 8006ae4:	f000 faac 	bl	8007040 <__assert_func>
 8006ae8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006aec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006af0:	bb35      	cbnz	r5, 8006b40 <__d2b+0x7c>
 8006af2:	2e00      	cmp	r6, #0
 8006af4:	9301      	str	r3, [sp, #4]
 8006af6:	d028      	beq.n	8006b4a <__d2b+0x86>
 8006af8:	4668      	mov	r0, sp
 8006afa:	9600      	str	r6, [sp, #0]
 8006afc:	f7ff fd82 	bl	8006604 <__lo0bits>
 8006b00:	9900      	ldr	r1, [sp, #0]
 8006b02:	b300      	cbz	r0, 8006b46 <__d2b+0x82>
 8006b04:	9a01      	ldr	r2, [sp, #4]
 8006b06:	f1c0 0320 	rsb	r3, r0, #32
 8006b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0e:	430b      	orrs	r3, r1
 8006b10:	40c2      	lsrs	r2, r0
 8006b12:	6163      	str	r3, [r4, #20]
 8006b14:	9201      	str	r2, [sp, #4]
 8006b16:	9b01      	ldr	r3, [sp, #4]
 8006b18:	61a3      	str	r3, [r4, #24]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	bf14      	ite	ne
 8006b1e:	2202      	movne	r2, #2
 8006b20:	2201      	moveq	r2, #1
 8006b22:	6122      	str	r2, [r4, #16]
 8006b24:	b1d5      	cbz	r5, 8006b5c <__d2b+0x98>
 8006b26:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006b2a:	4405      	add	r5, r0
 8006b2c:	f8c9 5000 	str.w	r5, [r9]
 8006b30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b34:	f8c8 0000 	str.w	r0, [r8]
 8006b38:	4620      	mov	r0, r4
 8006b3a:	b003      	add	sp, #12
 8006b3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b44:	e7d5      	b.n	8006af2 <__d2b+0x2e>
 8006b46:	6161      	str	r1, [r4, #20]
 8006b48:	e7e5      	b.n	8006b16 <__d2b+0x52>
 8006b4a:	a801      	add	r0, sp, #4
 8006b4c:	f7ff fd5a 	bl	8006604 <__lo0bits>
 8006b50:	9b01      	ldr	r3, [sp, #4]
 8006b52:	6163      	str	r3, [r4, #20]
 8006b54:	2201      	movs	r2, #1
 8006b56:	6122      	str	r2, [r4, #16]
 8006b58:	3020      	adds	r0, #32
 8006b5a:	e7e3      	b.n	8006b24 <__d2b+0x60>
 8006b5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b64:	f8c9 0000 	str.w	r0, [r9]
 8006b68:	6918      	ldr	r0, [r3, #16]
 8006b6a:	f7ff fd2b 	bl	80065c4 <__hi0bits>
 8006b6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b72:	e7df      	b.n	8006b34 <__d2b+0x70>
 8006b74:	08007d23 	.word	0x08007d23
 8006b78:	08007d34 	.word	0x08007d34

08006b7c <_calloc_r>:
 8006b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b7e:	fba1 2402 	umull	r2, r4, r1, r2
 8006b82:	b94c      	cbnz	r4, 8006b98 <_calloc_r+0x1c>
 8006b84:	4611      	mov	r1, r2
 8006b86:	9201      	str	r2, [sp, #4]
 8006b88:	f000 f87a 	bl	8006c80 <_malloc_r>
 8006b8c:	9a01      	ldr	r2, [sp, #4]
 8006b8e:	4605      	mov	r5, r0
 8006b90:	b930      	cbnz	r0, 8006ba0 <_calloc_r+0x24>
 8006b92:	4628      	mov	r0, r5
 8006b94:	b003      	add	sp, #12
 8006b96:	bd30      	pop	{r4, r5, pc}
 8006b98:	220c      	movs	r2, #12
 8006b9a:	6002      	str	r2, [r0, #0]
 8006b9c:	2500      	movs	r5, #0
 8006b9e:	e7f8      	b.n	8006b92 <_calloc_r+0x16>
 8006ba0:	4621      	mov	r1, r4
 8006ba2:	f7fe f94d 	bl	8004e40 <memset>
 8006ba6:	e7f4      	b.n	8006b92 <_calloc_r+0x16>

08006ba8 <_free_r>:
 8006ba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006baa:	2900      	cmp	r1, #0
 8006bac:	d044      	beq.n	8006c38 <_free_r+0x90>
 8006bae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bb2:	9001      	str	r0, [sp, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f1a1 0404 	sub.w	r4, r1, #4
 8006bba:	bfb8      	it	lt
 8006bbc:	18e4      	addlt	r4, r4, r3
 8006bbe:	f000 fa9b 	bl	80070f8 <__malloc_lock>
 8006bc2:	4a1e      	ldr	r2, [pc, #120]	; (8006c3c <_free_r+0x94>)
 8006bc4:	9801      	ldr	r0, [sp, #4]
 8006bc6:	6813      	ldr	r3, [r2, #0]
 8006bc8:	b933      	cbnz	r3, 8006bd8 <_free_r+0x30>
 8006bca:	6063      	str	r3, [r4, #4]
 8006bcc:	6014      	str	r4, [r2, #0]
 8006bce:	b003      	add	sp, #12
 8006bd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bd4:	f000 ba96 	b.w	8007104 <__malloc_unlock>
 8006bd8:	42a3      	cmp	r3, r4
 8006bda:	d908      	bls.n	8006bee <_free_r+0x46>
 8006bdc:	6825      	ldr	r5, [r4, #0]
 8006bde:	1961      	adds	r1, r4, r5
 8006be0:	428b      	cmp	r3, r1
 8006be2:	bf01      	itttt	eq
 8006be4:	6819      	ldreq	r1, [r3, #0]
 8006be6:	685b      	ldreq	r3, [r3, #4]
 8006be8:	1949      	addeq	r1, r1, r5
 8006bea:	6021      	streq	r1, [r4, #0]
 8006bec:	e7ed      	b.n	8006bca <_free_r+0x22>
 8006bee:	461a      	mov	r2, r3
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	b10b      	cbz	r3, 8006bf8 <_free_r+0x50>
 8006bf4:	42a3      	cmp	r3, r4
 8006bf6:	d9fa      	bls.n	8006bee <_free_r+0x46>
 8006bf8:	6811      	ldr	r1, [r2, #0]
 8006bfa:	1855      	adds	r5, r2, r1
 8006bfc:	42a5      	cmp	r5, r4
 8006bfe:	d10b      	bne.n	8006c18 <_free_r+0x70>
 8006c00:	6824      	ldr	r4, [r4, #0]
 8006c02:	4421      	add	r1, r4
 8006c04:	1854      	adds	r4, r2, r1
 8006c06:	42a3      	cmp	r3, r4
 8006c08:	6011      	str	r1, [r2, #0]
 8006c0a:	d1e0      	bne.n	8006bce <_free_r+0x26>
 8006c0c:	681c      	ldr	r4, [r3, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	6053      	str	r3, [r2, #4]
 8006c12:	4421      	add	r1, r4
 8006c14:	6011      	str	r1, [r2, #0]
 8006c16:	e7da      	b.n	8006bce <_free_r+0x26>
 8006c18:	d902      	bls.n	8006c20 <_free_r+0x78>
 8006c1a:	230c      	movs	r3, #12
 8006c1c:	6003      	str	r3, [r0, #0]
 8006c1e:	e7d6      	b.n	8006bce <_free_r+0x26>
 8006c20:	6825      	ldr	r5, [r4, #0]
 8006c22:	1961      	adds	r1, r4, r5
 8006c24:	428b      	cmp	r3, r1
 8006c26:	bf04      	itt	eq
 8006c28:	6819      	ldreq	r1, [r3, #0]
 8006c2a:	685b      	ldreq	r3, [r3, #4]
 8006c2c:	6063      	str	r3, [r4, #4]
 8006c2e:	bf04      	itt	eq
 8006c30:	1949      	addeq	r1, r1, r5
 8006c32:	6021      	streq	r1, [r4, #0]
 8006c34:	6054      	str	r4, [r2, #4]
 8006c36:	e7ca      	b.n	8006bce <_free_r+0x26>
 8006c38:	b003      	add	sp, #12
 8006c3a:	bd30      	pop	{r4, r5, pc}
 8006c3c:	200002fc 	.word	0x200002fc

08006c40 <sbrk_aligned>:
 8006c40:	b570      	push	{r4, r5, r6, lr}
 8006c42:	4e0e      	ldr	r6, [pc, #56]	; (8006c7c <sbrk_aligned+0x3c>)
 8006c44:	460c      	mov	r4, r1
 8006c46:	6831      	ldr	r1, [r6, #0]
 8006c48:	4605      	mov	r5, r0
 8006c4a:	b911      	cbnz	r1, 8006c52 <sbrk_aligned+0x12>
 8006c4c:	f000 f9e8 	bl	8007020 <_sbrk_r>
 8006c50:	6030      	str	r0, [r6, #0]
 8006c52:	4621      	mov	r1, r4
 8006c54:	4628      	mov	r0, r5
 8006c56:	f000 f9e3 	bl	8007020 <_sbrk_r>
 8006c5a:	1c43      	adds	r3, r0, #1
 8006c5c:	d00a      	beq.n	8006c74 <sbrk_aligned+0x34>
 8006c5e:	1cc4      	adds	r4, r0, #3
 8006c60:	f024 0403 	bic.w	r4, r4, #3
 8006c64:	42a0      	cmp	r0, r4
 8006c66:	d007      	beq.n	8006c78 <sbrk_aligned+0x38>
 8006c68:	1a21      	subs	r1, r4, r0
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	f000 f9d8 	bl	8007020 <_sbrk_r>
 8006c70:	3001      	adds	r0, #1
 8006c72:	d101      	bne.n	8006c78 <sbrk_aligned+0x38>
 8006c74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006c78:	4620      	mov	r0, r4
 8006c7a:	bd70      	pop	{r4, r5, r6, pc}
 8006c7c:	20000300 	.word	0x20000300

08006c80 <_malloc_r>:
 8006c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c84:	1ccd      	adds	r5, r1, #3
 8006c86:	f025 0503 	bic.w	r5, r5, #3
 8006c8a:	3508      	adds	r5, #8
 8006c8c:	2d0c      	cmp	r5, #12
 8006c8e:	bf38      	it	cc
 8006c90:	250c      	movcc	r5, #12
 8006c92:	2d00      	cmp	r5, #0
 8006c94:	4607      	mov	r7, r0
 8006c96:	db01      	blt.n	8006c9c <_malloc_r+0x1c>
 8006c98:	42a9      	cmp	r1, r5
 8006c9a:	d905      	bls.n	8006ca8 <_malloc_r+0x28>
 8006c9c:	230c      	movs	r3, #12
 8006c9e:	603b      	str	r3, [r7, #0]
 8006ca0:	2600      	movs	r6, #0
 8006ca2:	4630      	mov	r0, r6
 8006ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ca8:	4e2e      	ldr	r6, [pc, #184]	; (8006d64 <_malloc_r+0xe4>)
 8006caa:	f000 fa25 	bl	80070f8 <__malloc_lock>
 8006cae:	6833      	ldr	r3, [r6, #0]
 8006cb0:	461c      	mov	r4, r3
 8006cb2:	bb34      	cbnz	r4, 8006d02 <_malloc_r+0x82>
 8006cb4:	4629      	mov	r1, r5
 8006cb6:	4638      	mov	r0, r7
 8006cb8:	f7ff ffc2 	bl	8006c40 <sbrk_aligned>
 8006cbc:	1c43      	adds	r3, r0, #1
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	d14d      	bne.n	8006d5e <_malloc_r+0xde>
 8006cc2:	6834      	ldr	r4, [r6, #0]
 8006cc4:	4626      	mov	r6, r4
 8006cc6:	2e00      	cmp	r6, #0
 8006cc8:	d140      	bne.n	8006d4c <_malloc_r+0xcc>
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	4631      	mov	r1, r6
 8006cce:	4638      	mov	r0, r7
 8006cd0:	eb04 0803 	add.w	r8, r4, r3
 8006cd4:	f000 f9a4 	bl	8007020 <_sbrk_r>
 8006cd8:	4580      	cmp	r8, r0
 8006cda:	d13a      	bne.n	8006d52 <_malloc_r+0xd2>
 8006cdc:	6821      	ldr	r1, [r4, #0]
 8006cde:	3503      	adds	r5, #3
 8006ce0:	1a6d      	subs	r5, r5, r1
 8006ce2:	f025 0503 	bic.w	r5, r5, #3
 8006ce6:	3508      	adds	r5, #8
 8006ce8:	2d0c      	cmp	r5, #12
 8006cea:	bf38      	it	cc
 8006cec:	250c      	movcc	r5, #12
 8006cee:	4629      	mov	r1, r5
 8006cf0:	4638      	mov	r0, r7
 8006cf2:	f7ff ffa5 	bl	8006c40 <sbrk_aligned>
 8006cf6:	3001      	adds	r0, #1
 8006cf8:	d02b      	beq.n	8006d52 <_malloc_r+0xd2>
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	442b      	add	r3, r5
 8006cfe:	6023      	str	r3, [r4, #0]
 8006d00:	e00e      	b.n	8006d20 <_malloc_r+0xa0>
 8006d02:	6822      	ldr	r2, [r4, #0]
 8006d04:	1b52      	subs	r2, r2, r5
 8006d06:	d41e      	bmi.n	8006d46 <_malloc_r+0xc6>
 8006d08:	2a0b      	cmp	r2, #11
 8006d0a:	d916      	bls.n	8006d3a <_malloc_r+0xba>
 8006d0c:	1961      	adds	r1, r4, r5
 8006d0e:	42a3      	cmp	r3, r4
 8006d10:	6025      	str	r5, [r4, #0]
 8006d12:	bf18      	it	ne
 8006d14:	6059      	strne	r1, [r3, #4]
 8006d16:	6863      	ldr	r3, [r4, #4]
 8006d18:	bf08      	it	eq
 8006d1a:	6031      	streq	r1, [r6, #0]
 8006d1c:	5162      	str	r2, [r4, r5]
 8006d1e:	604b      	str	r3, [r1, #4]
 8006d20:	4638      	mov	r0, r7
 8006d22:	f104 060b 	add.w	r6, r4, #11
 8006d26:	f000 f9ed 	bl	8007104 <__malloc_unlock>
 8006d2a:	f026 0607 	bic.w	r6, r6, #7
 8006d2e:	1d23      	adds	r3, r4, #4
 8006d30:	1af2      	subs	r2, r6, r3
 8006d32:	d0b6      	beq.n	8006ca2 <_malloc_r+0x22>
 8006d34:	1b9b      	subs	r3, r3, r6
 8006d36:	50a3      	str	r3, [r4, r2]
 8006d38:	e7b3      	b.n	8006ca2 <_malloc_r+0x22>
 8006d3a:	6862      	ldr	r2, [r4, #4]
 8006d3c:	42a3      	cmp	r3, r4
 8006d3e:	bf0c      	ite	eq
 8006d40:	6032      	streq	r2, [r6, #0]
 8006d42:	605a      	strne	r2, [r3, #4]
 8006d44:	e7ec      	b.n	8006d20 <_malloc_r+0xa0>
 8006d46:	4623      	mov	r3, r4
 8006d48:	6864      	ldr	r4, [r4, #4]
 8006d4a:	e7b2      	b.n	8006cb2 <_malloc_r+0x32>
 8006d4c:	4634      	mov	r4, r6
 8006d4e:	6876      	ldr	r6, [r6, #4]
 8006d50:	e7b9      	b.n	8006cc6 <_malloc_r+0x46>
 8006d52:	230c      	movs	r3, #12
 8006d54:	603b      	str	r3, [r7, #0]
 8006d56:	4638      	mov	r0, r7
 8006d58:	f000 f9d4 	bl	8007104 <__malloc_unlock>
 8006d5c:	e7a1      	b.n	8006ca2 <_malloc_r+0x22>
 8006d5e:	6025      	str	r5, [r4, #0]
 8006d60:	e7de      	b.n	8006d20 <_malloc_r+0xa0>
 8006d62:	bf00      	nop
 8006d64:	200002fc 	.word	0x200002fc

08006d68 <__ssputs_r>:
 8006d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d6c:	688e      	ldr	r6, [r1, #8]
 8006d6e:	429e      	cmp	r6, r3
 8006d70:	4682      	mov	sl, r0
 8006d72:	460c      	mov	r4, r1
 8006d74:	4690      	mov	r8, r2
 8006d76:	461f      	mov	r7, r3
 8006d78:	d838      	bhi.n	8006dec <__ssputs_r+0x84>
 8006d7a:	898a      	ldrh	r2, [r1, #12]
 8006d7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d80:	d032      	beq.n	8006de8 <__ssputs_r+0x80>
 8006d82:	6825      	ldr	r5, [r4, #0]
 8006d84:	6909      	ldr	r1, [r1, #16]
 8006d86:	eba5 0901 	sub.w	r9, r5, r1
 8006d8a:	6965      	ldr	r5, [r4, #20]
 8006d8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d94:	3301      	adds	r3, #1
 8006d96:	444b      	add	r3, r9
 8006d98:	106d      	asrs	r5, r5, #1
 8006d9a:	429d      	cmp	r5, r3
 8006d9c:	bf38      	it	cc
 8006d9e:	461d      	movcc	r5, r3
 8006da0:	0553      	lsls	r3, r2, #21
 8006da2:	d531      	bpl.n	8006e08 <__ssputs_r+0xa0>
 8006da4:	4629      	mov	r1, r5
 8006da6:	f7ff ff6b 	bl	8006c80 <_malloc_r>
 8006daa:	4606      	mov	r6, r0
 8006dac:	b950      	cbnz	r0, 8006dc4 <__ssputs_r+0x5c>
 8006dae:	230c      	movs	r3, #12
 8006db0:	f8ca 3000 	str.w	r3, [sl]
 8006db4:	89a3      	ldrh	r3, [r4, #12]
 8006db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dba:	81a3      	strh	r3, [r4, #12]
 8006dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dc4:	6921      	ldr	r1, [r4, #16]
 8006dc6:	464a      	mov	r2, r9
 8006dc8:	f7fe f82c 	bl	8004e24 <memcpy>
 8006dcc:	89a3      	ldrh	r3, [r4, #12]
 8006dce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dd6:	81a3      	strh	r3, [r4, #12]
 8006dd8:	6126      	str	r6, [r4, #16]
 8006dda:	6165      	str	r5, [r4, #20]
 8006ddc:	444e      	add	r6, r9
 8006dde:	eba5 0509 	sub.w	r5, r5, r9
 8006de2:	6026      	str	r6, [r4, #0]
 8006de4:	60a5      	str	r5, [r4, #8]
 8006de6:	463e      	mov	r6, r7
 8006de8:	42be      	cmp	r6, r7
 8006dea:	d900      	bls.n	8006dee <__ssputs_r+0x86>
 8006dec:	463e      	mov	r6, r7
 8006dee:	6820      	ldr	r0, [r4, #0]
 8006df0:	4632      	mov	r2, r6
 8006df2:	4641      	mov	r1, r8
 8006df4:	f000 f966 	bl	80070c4 <memmove>
 8006df8:	68a3      	ldr	r3, [r4, #8]
 8006dfa:	1b9b      	subs	r3, r3, r6
 8006dfc:	60a3      	str	r3, [r4, #8]
 8006dfe:	6823      	ldr	r3, [r4, #0]
 8006e00:	4433      	add	r3, r6
 8006e02:	6023      	str	r3, [r4, #0]
 8006e04:	2000      	movs	r0, #0
 8006e06:	e7db      	b.n	8006dc0 <__ssputs_r+0x58>
 8006e08:	462a      	mov	r2, r5
 8006e0a:	f000 f981 	bl	8007110 <_realloc_r>
 8006e0e:	4606      	mov	r6, r0
 8006e10:	2800      	cmp	r0, #0
 8006e12:	d1e1      	bne.n	8006dd8 <__ssputs_r+0x70>
 8006e14:	6921      	ldr	r1, [r4, #16]
 8006e16:	4650      	mov	r0, sl
 8006e18:	f7ff fec6 	bl	8006ba8 <_free_r>
 8006e1c:	e7c7      	b.n	8006dae <__ssputs_r+0x46>
	...

08006e20 <_svfiprintf_r>:
 8006e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e24:	4698      	mov	r8, r3
 8006e26:	898b      	ldrh	r3, [r1, #12]
 8006e28:	061b      	lsls	r3, r3, #24
 8006e2a:	b09d      	sub	sp, #116	; 0x74
 8006e2c:	4607      	mov	r7, r0
 8006e2e:	460d      	mov	r5, r1
 8006e30:	4614      	mov	r4, r2
 8006e32:	d50e      	bpl.n	8006e52 <_svfiprintf_r+0x32>
 8006e34:	690b      	ldr	r3, [r1, #16]
 8006e36:	b963      	cbnz	r3, 8006e52 <_svfiprintf_r+0x32>
 8006e38:	2140      	movs	r1, #64	; 0x40
 8006e3a:	f7ff ff21 	bl	8006c80 <_malloc_r>
 8006e3e:	6028      	str	r0, [r5, #0]
 8006e40:	6128      	str	r0, [r5, #16]
 8006e42:	b920      	cbnz	r0, 8006e4e <_svfiprintf_r+0x2e>
 8006e44:	230c      	movs	r3, #12
 8006e46:	603b      	str	r3, [r7, #0]
 8006e48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e4c:	e0d1      	b.n	8006ff2 <_svfiprintf_r+0x1d2>
 8006e4e:	2340      	movs	r3, #64	; 0x40
 8006e50:	616b      	str	r3, [r5, #20]
 8006e52:	2300      	movs	r3, #0
 8006e54:	9309      	str	r3, [sp, #36]	; 0x24
 8006e56:	2320      	movs	r3, #32
 8006e58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e60:	2330      	movs	r3, #48	; 0x30
 8006e62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800700c <_svfiprintf_r+0x1ec>
 8006e66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e6a:	f04f 0901 	mov.w	r9, #1
 8006e6e:	4623      	mov	r3, r4
 8006e70:	469a      	mov	sl, r3
 8006e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e76:	b10a      	cbz	r2, 8006e7c <_svfiprintf_r+0x5c>
 8006e78:	2a25      	cmp	r2, #37	; 0x25
 8006e7a:	d1f9      	bne.n	8006e70 <_svfiprintf_r+0x50>
 8006e7c:	ebba 0b04 	subs.w	fp, sl, r4
 8006e80:	d00b      	beq.n	8006e9a <_svfiprintf_r+0x7a>
 8006e82:	465b      	mov	r3, fp
 8006e84:	4622      	mov	r2, r4
 8006e86:	4629      	mov	r1, r5
 8006e88:	4638      	mov	r0, r7
 8006e8a:	f7ff ff6d 	bl	8006d68 <__ssputs_r>
 8006e8e:	3001      	adds	r0, #1
 8006e90:	f000 80aa 	beq.w	8006fe8 <_svfiprintf_r+0x1c8>
 8006e94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e96:	445a      	add	r2, fp
 8006e98:	9209      	str	r2, [sp, #36]	; 0x24
 8006e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 80a2 	beq.w	8006fe8 <_svfiprintf_r+0x1c8>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006eaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006eae:	f10a 0a01 	add.w	sl, sl, #1
 8006eb2:	9304      	str	r3, [sp, #16]
 8006eb4:	9307      	str	r3, [sp, #28]
 8006eb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006eba:	931a      	str	r3, [sp, #104]	; 0x68
 8006ebc:	4654      	mov	r4, sl
 8006ebe:	2205      	movs	r2, #5
 8006ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ec4:	4851      	ldr	r0, [pc, #324]	; (800700c <_svfiprintf_r+0x1ec>)
 8006ec6:	f7f9 f993 	bl	80001f0 <memchr>
 8006eca:	9a04      	ldr	r2, [sp, #16]
 8006ecc:	b9d8      	cbnz	r0, 8006f06 <_svfiprintf_r+0xe6>
 8006ece:	06d0      	lsls	r0, r2, #27
 8006ed0:	bf44      	itt	mi
 8006ed2:	2320      	movmi	r3, #32
 8006ed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ed8:	0711      	lsls	r1, r2, #28
 8006eda:	bf44      	itt	mi
 8006edc:	232b      	movmi	r3, #43	; 0x2b
 8006ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8006ee8:	d015      	beq.n	8006f16 <_svfiprintf_r+0xf6>
 8006eea:	9a07      	ldr	r2, [sp, #28]
 8006eec:	4654      	mov	r4, sl
 8006eee:	2000      	movs	r0, #0
 8006ef0:	f04f 0c0a 	mov.w	ip, #10
 8006ef4:	4621      	mov	r1, r4
 8006ef6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006efa:	3b30      	subs	r3, #48	; 0x30
 8006efc:	2b09      	cmp	r3, #9
 8006efe:	d94e      	bls.n	8006f9e <_svfiprintf_r+0x17e>
 8006f00:	b1b0      	cbz	r0, 8006f30 <_svfiprintf_r+0x110>
 8006f02:	9207      	str	r2, [sp, #28]
 8006f04:	e014      	b.n	8006f30 <_svfiprintf_r+0x110>
 8006f06:	eba0 0308 	sub.w	r3, r0, r8
 8006f0a:	fa09 f303 	lsl.w	r3, r9, r3
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	9304      	str	r3, [sp, #16]
 8006f12:	46a2      	mov	sl, r4
 8006f14:	e7d2      	b.n	8006ebc <_svfiprintf_r+0x9c>
 8006f16:	9b03      	ldr	r3, [sp, #12]
 8006f18:	1d19      	adds	r1, r3, #4
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	9103      	str	r1, [sp, #12]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	bfbb      	ittet	lt
 8006f22:	425b      	neglt	r3, r3
 8006f24:	f042 0202 	orrlt.w	r2, r2, #2
 8006f28:	9307      	strge	r3, [sp, #28]
 8006f2a:	9307      	strlt	r3, [sp, #28]
 8006f2c:	bfb8      	it	lt
 8006f2e:	9204      	strlt	r2, [sp, #16]
 8006f30:	7823      	ldrb	r3, [r4, #0]
 8006f32:	2b2e      	cmp	r3, #46	; 0x2e
 8006f34:	d10c      	bne.n	8006f50 <_svfiprintf_r+0x130>
 8006f36:	7863      	ldrb	r3, [r4, #1]
 8006f38:	2b2a      	cmp	r3, #42	; 0x2a
 8006f3a:	d135      	bne.n	8006fa8 <_svfiprintf_r+0x188>
 8006f3c:	9b03      	ldr	r3, [sp, #12]
 8006f3e:	1d1a      	adds	r2, r3, #4
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	9203      	str	r2, [sp, #12]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	bfb8      	it	lt
 8006f48:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006f4c:	3402      	adds	r4, #2
 8006f4e:	9305      	str	r3, [sp, #20]
 8006f50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800701c <_svfiprintf_r+0x1fc>
 8006f54:	7821      	ldrb	r1, [r4, #0]
 8006f56:	2203      	movs	r2, #3
 8006f58:	4650      	mov	r0, sl
 8006f5a:	f7f9 f949 	bl	80001f0 <memchr>
 8006f5e:	b140      	cbz	r0, 8006f72 <_svfiprintf_r+0x152>
 8006f60:	2340      	movs	r3, #64	; 0x40
 8006f62:	eba0 000a 	sub.w	r0, r0, sl
 8006f66:	fa03 f000 	lsl.w	r0, r3, r0
 8006f6a:	9b04      	ldr	r3, [sp, #16]
 8006f6c:	4303      	orrs	r3, r0
 8006f6e:	3401      	adds	r4, #1
 8006f70:	9304      	str	r3, [sp, #16]
 8006f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f76:	4826      	ldr	r0, [pc, #152]	; (8007010 <_svfiprintf_r+0x1f0>)
 8006f78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f7c:	2206      	movs	r2, #6
 8006f7e:	f7f9 f937 	bl	80001f0 <memchr>
 8006f82:	2800      	cmp	r0, #0
 8006f84:	d038      	beq.n	8006ff8 <_svfiprintf_r+0x1d8>
 8006f86:	4b23      	ldr	r3, [pc, #140]	; (8007014 <_svfiprintf_r+0x1f4>)
 8006f88:	bb1b      	cbnz	r3, 8006fd2 <_svfiprintf_r+0x1b2>
 8006f8a:	9b03      	ldr	r3, [sp, #12]
 8006f8c:	3307      	adds	r3, #7
 8006f8e:	f023 0307 	bic.w	r3, r3, #7
 8006f92:	3308      	adds	r3, #8
 8006f94:	9303      	str	r3, [sp, #12]
 8006f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f98:	4433      	add	r3, r6
 8006f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8006f9c:	e767      	b.n	8006e6e <_svfiprintf_r+0x4e>
 8006f9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	2001      	movs	r0, #1
 8006fa6:	e7a5      	b.n	8006ef4 <_svfiprintf_r+0xd4>
 8006fa8:	2300      	movs	r3, #0
 8006faa:	3401      	adds	r4, #1
 8006fac:	9305      	str	r3, [sp, #20]
 8006fae:	4619      	mov	r1, r3
 8006fb0:	f04f 0c0a 	mov.w	ip, #10
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fba:	3a30      	subs	r2, #48	; 0x30
 8006fbc:	2a09      	cmp	r2, #9
 8006fbe:	d903      	bls.n	8006fc8 <_svfiprintf_r+0x1a8>
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d0c5      	beq.n	8006f50 <_svfiprintf_r+0x130>
 8006fc4:	9105      	str	r1, [sp, #20]
 8006fc6:	e7c3      	b.n	8006f50 <_svfiprintf_r+0x130>
 8006fc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fcc:	4604      	mov	r4, r0
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e7f0      	b.n	8006fb4 <_svfiprintf_r+0x194>
 8006fd2:	ab03      	add	r3, sp, #12
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	462a      	mov	r2, r5
 8006fd8:	4b0f      	ldr	r3, [pc, #60]	; (8007018 <_svfiprintf_r+0x1f8>)
 8006fda:	a904      	add	r1, sp, #16
 8006fdc:	4638      	mov	r0, r7
 8006fde:	f7fd ffd7 	bl	8004f90 <_printf_float>
 8006fe2:	1c42      	adds	r2, r0, #1
 8006fe4:	4606      	mov	r6, r0
 8006fe6:	d1d6      	bne.n	8006f96 <_svfiprintf_r+0x176>
 8006fe8:	89ab      	ldrh	r3, [r5, #12]
 8006fea:	065b      	lsls	r3, r3, #25
 8006fec:	f53f af2c 	bmi.w	8006e48 <_svfiprintf_r+0x28>
 8006ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ff2:	b01d      	add	sp, #116	; 0x74
 8006ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ff8:	ab03      	add	r3, sp, #12
 8006ffa:	9300      	str	r3, [sp, #0]
 8006ffc:	462a      	mov	r2, r5
 8006ffe:	4b06      	ldr	r3, [pc, #24]	; (8007018 <_svfiprintf_r+0x1f8>)
 8007000:	a904      	add	r1, sp, #16
 8007002:	4638      	mov	r0, r7
 8007004:	f7fe fa68 	bl	80054d8 <_printf_i>
 8007008:	e7eb      	b.n	8006fe2 <_svfiprintf_r+0x1c2>
 800700a:	bf00      	nop
 800700c:	08007e8c 	.word	0x08007e8c
 8007010:	08007e96 	.word	0x08007e96
 8007014:	08004f91 	.word	0x08004f91
 8007018:	08006d69 	.word	0x08006d69
 800701c:	08007e92 	.word	0x08007e92

08007020 <_sbrk_r>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	4d06      	ldr	r5, [pc, #24]	; (800703c <_sbrk_r+0x1c>)
 8007024:	2300      	movs	r3, #0
 8007026:	4604      	mov	r4, r0
 8007028:	4608      	mov	r0, r1
 800702a:	602b      	str	r3, [r5, #0]
 800702c:	f7fb fa3c 	bl	80024a8 <_sbrk>
 8007030:	1c43      	adds	r3, r0, #1
 8007032:	d102      	bne.n	800703a <_sbrk_r+0x1a>
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	b103      	cbz	r3, 800703a <_sbrk_r+0x1a>
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	bd38      	pop	{r3, r4, r5, pc}
 800703c:	20000304 	.word	0x20000304

08007040 <__assert_func>:
 8007040:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007042:	4614      	mov	r4, r2
 8007044:	461a      	mov	r2, r3
 8007046:	4b09      	ldr	r3, [pc, #36]	; (800706c <__assert_func+0x2c>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4605      	mov	r5, r0
 800704c:	68d8      	ldr	r0, [r3, #12]
 800704e:	b14c      	cbz	r4, 8007064 <__assert_func+0x24>
 8007050:	4b07      	ldr	r3, [pc, #28]	; (8007070 <__assert_func+0x30>)
 8007052:	9100      	str	r1, [sp, #0]
 8007054:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007058:	4906      	ldr	r1, [pc, #24]	; (8007074 <__assert_func+0x34>)
 800705a:	462b      	mov	r3, r5
 800705c:	f000 f80e 	bl	800707c <fiprintf>
 8007060:	f000 faac 	bl	80075bc <abort>
 8007064:	4b04      	ldr	r3, [pc, #16]	; (8007078 <__assert_func+0x38>)
 8007066:	461c      	mov	r4, r3
 8007068:	e7f3      	b.n	8007052 <__assert_func+0x12>
 800706a:	bf00      	nop
 800706c:	20000010 	.word	0x20000010
 8007070:	08007e9d 	.word	0x08007e9d
 8007074:	08007eaa 	.word	0x08007eaa
 8007078:	08007ed8 	.word	0x08007ed8

0800707c <fiprintf>:
 800707c:	b40e      	push	{r1, r2, r3}
 800707e:	b503      	push	{r0, r1, lr}
 8007080:	4601      	mov	r1, r0
 8007082:	ab03      	add	r3, sp, #12
 8007084:	4805      	ldr	r0, [pc, #20]	; (800709c <fiprintf+0x20>)
 8007086:	f853 2b04 	ldr.w	r2, [r3], #4
 800708a:	6800      	ldr	r0, [r0, #0]
 800708c:	9301      	str	r3, [sp, #4]
 800708e:	f000 f897 	bl	80071c0 <_vfiprintf_r>
 8007092:	b002      	add	sp, #8
 8007094:	f85d eb04 	ldr.w	lr, [sp], #4
 8007098:	b003      	add	sp, #12
 800709a:	4770      	bx	lr
 800709c:	20000010 	.word	0x20000010

080070a0 <__ascii_mbtowc>:
 80070a0:	b082      	sub	sp, #8
 80070a2:	b901      	cbnz	r1, 80070a6 <__ascii_mbtowc+0x6>
 80070a4:	a901      	add	r1, sp, #4
 80070a6:	b142      	cbz	r2, 80070ba <__ascii_mbtowc+0x1a>
 80070a8:	b14b      	cbz	r3, 80070be <__ascii_mbtowc+0x1e>
 80070aa:	7813      	ldrb	r3, [r2, #0]
 80070ac:	600b      	str	r3, [r1, #0]
 80070ae:	7812      	ldrb	r2, [r2, #0]
 80070b0:	1e10      	subs	r0, r2, #0
 80070b2:	bf18      	it	ne
 80070b4:	2001      	movne	r0, #1
 80070b6:	b002      	add	sp, #8
 80070b8:	4770      	bx	lr
 80070ba:	4610      	mov	r0, r2
 80070bc:	e7fb      	b.n	80070b6 <__ascii_mbtowc+0x16>
 80070be:	f06f 0001 	mvn.w	r0, #1
 80070c2:	e7f8      	b.n	80070b6 <__ascii_mbtowc+0x16>

080070c4 <memmove>:
 80070c4:	4288      	cmp	r0, r1
 80070c6:	b510      	push	{r4, lr}
 80070c8:	eb01 0402 	add.w	r4, r1, r2
 80070cc:	d902      	bls.n	80070d4 <memmove+0x10>
 80070ce:	4284      	cmp	r4, r0
 80070d0:	4623      	mov	r3, r4
 80070d2:	d807      	bhi.n	80070e4 <memmove+0x20>
 80070d4:	1e43      	subs	r3, r0, #1
 80070d6:	42a1      	cmp	r1, r4
 80070d8:	d008      	beq.n	80070ec <memmove+0x28>
 80070da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070e2:	e7f8      	b.n	80070d6 <memmove+0x12>
 80070e4:	4402      	add	r2, r0
 80070e6:	4601      	mov	r1, r0
 80070e8:	428a      	cmp	r2, r1
 80070ea:	d100      	bne.n	80070ee <memmove+0x2a>
 80070ec:	bd10      	pop	{r4, pc}
 80070ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070f6:	e7f7      	b.n	80070e8 <memmove+0x24>

080070f8 <__malloc_lock>:
 80070f8:	4801      	ldr	r0, [pc, #4]	; (8007100 <__malloc_lock+0x8>)
 80070fa:	f000 bc1f 	b.w	800793c <__retarget_lock_acquire_recursive>
 80070fe:	bf00      	nop
 8007100:	20000308 	.word	0x20000308

08007104 <__malloc_unlock>:
 8007104:	4801      	ldr	r0, [pc, #4]	; (800710c <__malloc_unlock+0x8>)
 8007106:	f000 bc1a 	b.w	800793e <__retarget_lock_release_recursive>
 800710a:	bf00      	nop
 800710c:	20000308 	.word	0x20000308

08007110 <_realloc_r>:
 8007110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007114:	4680      	mov	r8, r0
 8007116:	4614      	mov	r4, r2
 8007118:	460e      	mov	r6, r1
 800711a:	b921      	cbnz	r1, 8007126 <_realloc_r+0x16>
 800711c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007120:	4611      	mov	r1, r2
 8007122:	f7ff bdad 	b.w	8006c80 <_malloc_r>
 8007126:	b92a      	cbnz	r2, 8007134 <_realloc_r+0x24>
 8007128:	f7ff fd3e 	bl	8006ba8 <_free_r>
 800712c:	4625      	mov	r5, r4
 800712e:	4628      	mov	r0, r5
 8007130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007134:	f000 fc6a 	bl	8007a0c <_malloc_usable_size_r>
 8007138:	4284      	cmp	r4, r0
 800713a:	4607      	mov	r7, r0
 800713c:	d802      	bhi.n	8007144 <_realloc_r+0x34>
 800713e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007142:	d812      	bhi.n	800716a <_realloc_r+0x5a>
 8007144:	4621      	mov	r1, r4
 8007146:	4640      	mov	r0, r8
 8007148:	f7ff fd9a 	bl	8006c80 <_malloc_r>
 800714c:	4605      	mov	r5, r0
 800714e:	2800      	cmp	r0, #0
 8007150:	d0ed      	beq.n	800712e <_realloc_r+0x1e>
 8007152:	42bc      	cmp	r4, r7
 8007154:	4622      	mov	r2, r4
 8007156:	4631      	mov	r1, r6
 8007158:	bf28      	it	cs
 800715a:	463a      	movcs	r2, r7
 800715c:	f7fd fe62 	bl	8004e24 <memcpy>
 8007160:	4631      	mov	r1, r6
 8007162:	4640      	mov	r0, r8
 8007164:	f7ff fd20 	bl	8006ba8 <_free_r>
 8007168:	e7e1      	b.n	800712e <_realloc_r+0x1e>
 800716a:	4635      	mov	r5, r6
 800716c:	e7df      	b.n	800712e <_realloc_r+0x1e>

0800716e <__sfputc_r>:
 800716e:	6893      	ldr	r3, [r2, #8]
 8007170:	3b01      	subs	r3, #1
 8007172:	2b00      	cmp	r3, #0
 8007174:	b410      	push	{r4}
 8007176:	6093      	str	r3, [r2, #8]
 8007178:	da08      	bge.n	800718c <__sfputc_r+0x1e>
 800717a:	6994      	ldr	r4, [r2, #24]
 800717c:	42a3      	cmp	r3, r4
 800717e:	db01      	blt.n	8007184 <__sfputc_r+0x16>
 8007180:	290a      	cmp	r1, #10
 8007182:	d103      	bne.n	800718c <__sfputc_r+0x1e>
 8007184:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007188:	f000 b94a 	b.w	8007420 <__swbuf_r>
 800718c:	6813      	ldr	r3, [r2, #0]
 800718e:	1c58      	adds	r0, r3, #1
 8007190:	6010      	str	r0, [r2, #0]
 8007192:	7019      	strb	r1, [r3, #0]
 8007194:	4608      	mov	r0, r1
 8007196:	f85d 4b04 	ldr.w	r4, [sp], #4
 800719a:	4770      	bx	lr

0800719c <__sfputs_r>:
 800719c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719e:	4606      	mov	r6, r0
 80071a0:	460f      	mov	r7, r1
 80071a2:	4614      	mov	r4, r2
 80071a4:	18d5      	adds	r5, r2, r3
 80071a6:	42ac      	cmp	r4, r5
 80071a8:	d101      	bne.n	80071ae <__sfputs_r+0x12>
 80071aa:	2000      	movs	r0, #0
 80071ac:	e007      	b.n	80071be <__sfputs_r+0x22>
 80071ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071b2:	463a      	mov	r2, r7
 80071b4:	4630      	mov	r0, r6
 80071b6:	f7ff ffda 	bl	800716e <__sfputc_r>
 80071ba:	1c43      	adds	r3, r0, #1
 80071bc:	d1f3      	bne.n	80071a6 <__sfputs_r+0xa>
 80071be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080071c0 <_vfiprintf_r>:
 80071c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c4:	460d      	mov	r5, r1
 80071c6:	b09d      	sub	sp, #116	; 0x74
 80071c8:	4614      	mov	r4, r2
 80071ca:	4698      	mov	r8, r3
 80071cc:	4606      	mov	r6, r0
 80071ce:	b118      	cbz	r0, 80071d8 <_vfiprintf_r+0x18>
 80071d0:	6983      	ldr	r3, [r0, #24]
 80071d2:	b90b      	cbnz	r3, 80071d8 <_vfiprintf_r+0x18>
 80071d4:	f000 fb14 	bl	8007800 <__sinit>
 80071d8:	4b89      	ldr	r3, [pc, #548]	; (8007400 <_vfiprintf_r+0x240>)
 80071da:	429d      	cmp	r5, r3
 80071dc:	d11b      	bne.n	8007216 <_vfiprintf_r+0x56>
 80071de:	6875      	ldr	r5, [r6, #4]
 80071e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071e2:	07d9      	lsls	r1, r3, #31
 80071e4:	d405      	bmi.n	80071f2 <_vfiprintf_r+0x32>
 80071e6:	89ab      	ldrh	r3, [r5, #12]
 80071e8:	059a      	lsls	r2, r3, #22
 80071ea:	d402      	bmi.n	80071f2 <_vfiprintf_r+0x32>
 80071ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071ee:	f000 fba5 	bl	800793c <__retarget_lock_acquire_recursive>
 80071f2:	89ab      	ldrh	r3, [r5, #12]
 80071f4:	071b      	lsls	r3, r3, #28
 80071f6:	d501      	bpl.n	80071fc <_vfiprintf_r+0x3c>
 80071f8:	692b      	ldr	r3, [r5, #16]
 80071fa:	b9eb      	cbnz	r3, 8007238 <_vfiprintf_r+0x78>
 80071fc:	4629      	mov	r1, r5
 80071fe:	4630      	mov	r0, r6
 8007200:	f000 f96e 	bl	80074e0 <__swsetup_r>
 8007204:	b1c0      	cbz	r0, 8007238 <_vfiprintf_r+0x78>
 8007206:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007208:	07dc      	lsls	r4, r3, #31
 800720a:	d50e      	bpl.n	800722a <_vfiprintf_r+0x6a>
 800720c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007210:	b01d      	add	sp, #116	; 0x74
 8007212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007216:	4b7b      	ldr	r3, [pc, #492]	; (8007404 <_vfiprintf_r+0x244>)
 8007218:	429d      	cmp	r5, r3
 800721a:	d101      	bne.n	8007220 <_vfiprintf_r+0x60>
 800721c:	68b5      	ldr	r5, [r6, #8]
 800721e:	e7df      	b.n	80071e0 <_vfiprintf_r+0x20>
 8007220:	4b79      	ldr	r3, [pc, #484]	; (8007408 <_vfiprintf_r+0x248>)
 8007222:	429d      	cmp	r5, r3
 8007224:	bf08      	it	eq
 8007226:	68f5      	ldreq	r5, [r6, #12]
 8007228:	e7da      	b.n	80071e0 <_vfiprintf_r+0x20>
 800722a:	89ab      	ldrh	r3, [r5, #12]
 800722c:	0598      	lsls	r0, r3, #22
 800722e:	d4ed      	bmi.n	800720c <_vfiprintf_r+0x4c>
 8007230:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007232:	f000 fb84 	bl	800793e <__retarget_lock_release_recursive>
 8007236:	e7e9      	b.n	800720c <_vfiprintf_r+0x4c>
 8007238:	2300      	movs	r3, #0
 800723a:	9309      	str	r3, [sp, #36]	; 0x24
 800723c:	2320      	movs	r3, #32
 800723e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007242:	f8cd 800c 	str.w	r8, [sp, #12]
 8007246:	2330      	movs	r3, #48	; 0x30
 8007248:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800740c <_vfiprintf_r+0x24c>
 800724c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007250:	f04f 0901 	mov.w	r9, #1
 8007254:	4623      	mov	r3, r4
 8007256:	469a      	mov	sl, r3
 8007258:	f813 2b01 	ldrb.w	r2, [r3], #1
 800725c:	b10a      	cbz	r2, 8007262 <_vfiprintf_r+0xa2>
 800725e:	2a25      	cmp	r2, #37	; 0x25
 8007260:	d1f9      	bne.n	8007256 <_vfiprintf_r+0x96>
 8007262:	ebba 0b04 	subs.w	fp, sl, r4
 8007266:	d00b      	beq.n	8007280 <_vfiprintf_r+0xc0>
 8007268:	465b      	mov	r3, fp
 800726a:	4622      	mov	r2, r4
 800726c:	4629      	mov	r1, r5
 800726e:	4630      	mov	r0, r6
 8007270:	f7ff ff94 	bl	800719c <__sfputs_r>
 8007274:	3001      	adds	r0, #1
 8007276:	f000 80aa 	beq.w	80073ce <_vfiprintf_r+0x20e>
 800727a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800727c:	445a      	add	r2, fp
 800727e:	9209      	str	r2, [sp, #36]	; 0x24
 8007280:	f89a 3000 	ldrb.w	r3, [sl]
 8007284:	2b00      	cmp	r3, #0
 8007286:	f000 80a2 	beq.w	80073ce <_vfiprintf_r+0x20e>
 800728a:	2300      	movs	r3, #0
 800728c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007290:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007294:	f10a 0a01 	add.w	sl, sl, #1
 8007298:	9304      	str	r3, [sp, #16]
 800729a:	9307      	str	r3, [sp, #28]
 800729c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072a0:	931a      	str	r3, [sp, #104]	; 0x68
 80072a2:	4654      	mov	r4, sl
 80072a4:	2205      	movs	r2, #5
 80072a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072aa:	4858      	ldr	r0, [pc, #352]	; (800740c <_vfiprintf_r+0x24c>)
 80072ac:	f7f8 ffa0 	bl	80001f0 <memchr>
 80072b0:	9a04      	ldr	r2, [sp, #16]
 80072b2:	b9d8      	cbnz	r0, 80072ec <_vfiprintf_r+0x12c>
 80072b4:	06d1      	lsls	r1, r2, #27
 80072b6:	bf44      	itt	mi
 80072b8:	2320      	movmi	r3, #32
 80072ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072be:	0713      	lsls	r3, r2, #28
 80072c0:	bf44      	itt	mi
 80072c2:	232b      	movmi	r3, #43	; 0x2b
 80072c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072c8:	f89a 3000 	ldrb.w	r3, [sl]
 80072cc:	2b2a      	cmp	r3, #42	; 0x2a
 80072ce:	d015      	beq.n	80072fc <_vfiprintf_r+0x13c>
 80072d0:	9a07      	ldr	r2, [sp, #28]
 80072d2:	4654      	mov	r4, sl
 80072d4:	2000      	movs	r0, #0
 80072d6:	f04f 0c0a 	mov.w	ip, #10
 80072da:	4621      	mov	r1, r4
 80072dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072e0:	3b30      	subs	r3, #48	; 0x30
 80072e2:	2b09      	cmp	r3, #9
 80072e4:	d94e      	bls.n	8007384 <_vfiprintf_r+0x1c4>
 80072e6:	b1b0      	cbz	r0, 8007316 <_vfiprintf_r+0x156>
 80072e8:	9207      	str	r2, [sp, #28]
 80072ea:	e014      	b.n	8007316 <_vfiprintf_r+0x156>
 80072ec:	eba0 0308 	sub.w	r3, r0, r8
 80072f0:	fa09 f303 	lsl.w	r3, r9, r3
 80072f4:	4313      	orrs	r3, r2
 80072f6:	9304      	str	r3, [sp, #16]
 80072f8:	46a2      	mov	sl, r4
 80072fa:	e7d2      	b.n	80072a2 <_vfiprintf_r+0xe2>
 80072fc:	9b03      	ldr	r3, [sp, #12]
 80072fe:	1d19      	adds	r1, r3, #4
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	9103      	str	r1, [sp, #12]
 8007304:	2b00      	cmp	r3, #0
 8007306:	bfbb      	ittet	lt
 8007308:	425b      	neglt	r3, r3
 800730a:	f042 0202 	orrlt.w	r2, r2, #2
 800730e:	9307      	strge	r3, [sp, #28]
 8007310:	9307      	strlt	r3, [sp, #28]
 8007312:	bfb8      	it	lt
 8007314:	9204      	strlt	r2, [sp, #16]
 8007316:	7823      	ldrb	r3, [r4, #0]
 8007318:	2b2e      	cmp	r3, #46	; 0x2e
 800731a:	d10c      	bne.n	8007336 <_vfiprintf_r+0x176>
 800731c:	7863      	ldrb	r3, [r4, #1]
 800731e:	2b2a      	cmp	r3, #42	; 0x2a
 8007320:	d135      	bne.n	800738e <_vfiprintf_r+0x1ce>
 8007322:	9b03      	ldr	r3, [sp, #12]
 8007324:	1d1a      	adds	r2, r3, #4
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	9203      	str	r2, [sp, #12]
 800732a:	2b00      	cmp	r3, #0
 800732c:	bfb8      	it	lt
 800732e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007332:	3402      	adds	r4, #2
 8007334:	9305      	str	r3, [sp, #20]
 8007336:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800741c <_vfiprintf_r+0x25c>
 800733a:	7821      	ldrb	r1, [r4, #0]
 800733c:	2203      	movs	r2, #3
 800733e:	4650      	mov	r0, sl
 8007340:	f7f8 ff56 	bl	80001f0 <memchr>
 8007344:	b140      	cbz	r0, 8007358 <_vfiprintf_r+0x198>
 8007346:	2340      	movs	r3, #64	; 0x40
 8007348:	eba0 000a 	sub.w	r0, r0, sl
 800734c:	fa03 f000 	lsl.w	r0, r3, r0
 8007350:	9b04      	ldr	r3, [sp, #16]
 8007352:	4303      	orrs	r3, r0
 8007354:	3401      	adds	r4, #1
 8007356:	9304      	str	r3, [sp, #16]
 8007358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800735c:	482c      	ldr	r0, [pc, #176]	; (8007410 <_vfiprintf_r+0x250>)
 800735e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007362:	2206      	movs	r2, #6
 8007364:	f7f8 ff44 	bl	80001f0 <memchr>
 8007368:	2800      	cmp	r0, #0
 800736a:	d03f      	beq.n	80073ec <_vfiprintf_r+0x22c>
 800736c:	4b29      	ldr	r3, [pc, #164]	; (8007414 <_vfiprintf_r+0x254>)
 800736e:	bb1b      	cbnz	r3, 80073b8 <_vfiprintf_r+0x1f8>
 8007370:	9b03      	ldr	r3, [sp, #12]
 8007372:	3307      	adds	r3, #7
 8007374:	f023 0307 	bic.w	r3, r3, #7
 8007378:	3308      	adds	r3, #8
 800737a:	9303      	str	r3, [sp, #12]
 800737c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800737e:	443b      	add	r3, r7
 8007380:	9309      	str	r3, [sp, #36]	; 0x24
 8007382:	e767      	b.n	8007254 <_vfiprintf_r+0x94>
 8007384:	fb0c 3202 	mla	r2, ip, r2, r3
 8007388:	460c      	mov	r4, r1
 800738a:	2001      	movs	r0, #1
 800738c:	e7a5      	b.n	80072da <_vfiprintf_r+0x11a>
 800738e:	2300      	movs	r3, #0
 8007390:	3401      	adds	r4, #1
 8007392:	9305      	str	r3, [sp, #20]
 8007394:	4619      	mov	r1, r3
 8007396:	f04f 0c0a 	mov.w	ip, #10
 800739a:	4620      	mov	r0, r4
 800739c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073a0:	3a30      	subs	r2, #48	; 0x30
 80073a2:	2a09      	cmp	r2, #9
 80073a4:	d903      	bls.n	80073ae <_vfiprintf_r+0x1ee>
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d0c5      	beq.n	8007336 <_vfiprintf_r+0x176>
 80073aa:	9105      	str	r1, [sp, #20]
 80073ac:	e7c3      	b.n	8007336 <_vfiprintf_r+0x176>
 80073ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80073b2:	4604      	mov	r4, r0
 80073b4:	2301      	movs	r3, #1
 80073b6:	e7f0      	b.n	800739a <_vfiprintf_r+0x1da>
 80073b8:	ab03      	add	r3, sp, #12
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	462a      	mov	r2, r5
 80073be:	4b16      	ldr	r3, [pc, #88]	; (8007418 <_vfiprintf_r+0x258>)
 80073c0:	a904      	add	r1, sp, #16
 80073c2:	4630      	mov	r0, r6
 80073c4:	f7fd fde4 	bl	8004f90 <_printf_float>
 80073c8:	4607      	mov	r7, r0
 80073ca:	1c78      	adds	r0, r7, #1
 80073cc:	d1d6      	bne.n	800737c <_vfiprintf_r+0x1bc>
 80073ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073d0:	07d9      	lsls	r1, r3, #31
 80073d2:	d405      	bmi.n	80073e0 <_vfiprintf_r+0x220>
 80073d4:	89ab      	ldrh	r3, [r5, #12]
 80073d6:	059a      	lsls	r2, r3, #22
 80073d8:	d402      	bmi.n	80073e0 <_vfiprintf_r+0x220>
 80073da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073dc:	f000 faaf 	bl	800793e <__retarget_lock_release_recursive>
 80073e0:	89ab      	ldrh	r3, [r5, #12]
 80073e2:	065b      	lsls	r3, r3, #25
 80073e4:	f53f af12 	bmi.w	800720c <_vfiprintf_r+0x4c>
 80073e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073ea:	e711      	b.n	8007210 <_vfiprintf_r+0x50>
 80073ec:	ab03      	add	r3, sp, #12
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	462a      	mov	r2, r5
 80073f2:	4b09      	ldr	r3, [pc, #36]	; (8007418 <_vfiprintf_r+0x258>)
 80073f4:	a904      	add	r1, sp, #16
 80073f6:	4630      	mov	r0, r6
 80073f8:	f7fe f86e 	bl	80054d8 <_printf_i>
 80073fc:	e7e4      	b.n	80073c8 <_vfiprintf_r+0x208>
 80073fe:	bf00      	nop
 8007400:	08008004 	.word	0x08008004
 8007404:	08008024 	.word	0x08008024
 8007408:	08007fe4 	.word	0x08007fe4
 800740c:	08007e8c 	.word	0x08007e8c
 8007410:	08007e96 	.word	0x08007e96
 8007414:	08004f91 	.word	0x08004f91
 8007418:	0800719d 	.word	0x0800719d
 800741c:	08007e92 	.word	0x08007e92

08007420 <__swbuf_r>:
 8007420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007422:	460e      	mov	r6, r1
 8007424:	4614      	mov	r4, r2
 8007426:	4605      	mov	r5, r0
 8007428:	b118      	cbz	r0, 8007432 <__swbuf_r+0x12>
 800742a:	6983      	ldr	r3, [r0, #24]
 800742c:	b90b      	cbnz	r3, 8007432 <__swbuf_r+0x12>
 800742e:	f000 f9e7 	bl	8007800 <__sinit>
 8007432:	4b21      	ldr	r3, [pc, #132]	; (80074b8 <__swbuf_r+0x98>)
 8007434:	429c      	cmp	r4, r3
 8007436:	d12b      	bne.n	8007490 <__swbuf_r+0x70>
 8007438:	686c      	ldr	r4, [r5, #4]
 800743a:	69a3      	ldr	r3, [r4, #24]
 800743c:	60a3      	str	r3, [r4, #8]
 800743e:	89a3      	ldrh	r3, [r4, #12]
 8007440:	071a      	lsls	r2, r3, #28
 8007442:	d52f      	bpl.n	80074a4 <__swbuf_r+0x84>
 8007444:	6923      	ldr	r3, [r4, #16]
 8007446:	b36b      	cbz	r3, 80074a4 <__swbuf_r+0x84>
 8007448:	6923      	ldr	r3, [r4, #16]
 800744a:	6820      	ldr	r0, [r4, #0]
 800744c:	1ac0      	subs	r0, r0, r3
 800744e:	6963      	ldr	r3, [r4, #20]
 8007450:	b2f6      	uxtb	r6, r6
 8007452:	4283      	cmp	r3, r0
 8007454:	4637      	mov	r7, r6
 8007456:	dc04      	bgt.n	8007462 <__swbuf_r+0x42>
 8007458:	4621      	mov	r1, r4
 800745a:	4628      	mov	r0, r5
 800745c:	f000 f93c 	bl	80076d8 <_fflush_r>
 8007460:	bb30      	cbnz	r0, 80074b0 <__swbuf_r+0x90>
 8007462:	68a3      	ldr	r3, [r4, #8]
 8007464:	3b01      	subs	r3, #1
 8007466:	60a3      	str	r3, [r4, #8]
 8007468:	6823      	ldr	r3, [r4, #0]
 800746a:	1c5a      	adds	r2, r3, #1
 800746c:	6022      	str	r2, [r4, #0]
 800746e:	701e      	strb	r6, [r3, #0]
 8007470:	6963      	ldr	r3, [r4, #20]
 8007472:	3001      	adds	r0, #1
 8007474:	4283      	cmp	r3, r0
 8007476:	d004      	beq.n	8007482 <__swbuf_r+0x62>
 8007478:	89a3      	ldrh	r3, [r4, #12]
 800747a:	07db      	lsls	r3, r3, #31
 800747c:	d506      	bpl.n	800748c <__swbuf_r+0x6c>
 800747e:	2e0a      	cmp	r6, #10
 8007480:	d104      	bne.n	800748c <__swbuf_r+0x6c>
 8007482:	4621      	mov	r1, r4
 8007484:	4628      	mov	r0, r5
 8007486:	f000 f927 	bl	80076d8 <_fflush_r>
 800748a:	b988      	cbnz	r0, 80074b0 <__swbuf_r+0x90>
 800748c:	4638      	mov	r0, r7
 800748e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007490:	4b0a      	ldr	r3, [pc, #40]	; (80074bc <__swbuf_r+0x9c>)
 8007492:	429c      	cmp	r4, r3
 8007494:	d101      	bne.n	800749a <__swbuf_r+0x7a>
 8007496:	68ac      	ldr	r4, [r5, #8]
 8007498:	e7cf      	b.n	800743a <__swbuf_r+0x1a>
 800749a:	4b09      	ldr	r3, [pc, #36]	; (80074c0 <__swbuf_r+0xa0>)
 800749c:	429c      	cmp	r4, r3
 800749e:	bf08      	it	eq
 80074a0:	68ec      	ldreq	r4, [r5, #12]
 80074a2:	e7ca      	b.n	800743a <__swbuf_r+0x1a>
 80074a4:	4621      	mov	r1, r4
 80074a6:	4628      	mov	r0, r5
 80074a8:	f000 f81a 	bl	80074e0 <__swsetup_r>
 80074ac:	2800      	cmp	r0, #0
 80074ae:	d0cb      	beq.n	8007448 <__swbuf_r+0x28>
 80074b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80074b4:	e7ea      	b.n	800748c <__swbuf_r+0x6c>
 80074b6:	bf00      	nop
 80074b8:	08008004 	.word	0x08008004
 80074bc:	08008024 	.word	0x08008024
 80074c0:	08007fe4 	.word	0x08007fe4

080074c4 <__ascii_wctomb>:
 80074c4:	b149      	cbz	r1, 80074da <__ascii_wctomb+0x16>
 80074c6:	2aff      	cmp	r2, #255	; 0xff
 80074c8:	bf85      	ittet	hi
 80074ca:	238a      	movhi	r3, #138	; 0x8a
 80074cc:	6003      	strhi	r3, [r0, #0]
 80074ce:	700a      	strbls	r2, [r1, #0]
 80074d0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80074d4:	bf98      	it	ls
 80074d6:	2001      	movls	r0, #1
 80074d8:	4770      	bx	lr
 80074da:	4608      	mov	r0, r1
 80074dc:	4770      	bx	lr
	...

080074e0 <__swsetup_r>:
 80074e0:	4b32      	ldr	r3, [pc, #200]	; (80075ac <__swsetup_r+0xcc>)
 80074e2:	b570      	push	{r4, r5, r6, lr}
 80074e4:	681d      	ldr	r5, [r3, #0]
 80074e6:	4606      	mov	r6, r0
 80074e8:	460c      	mov	r4, r1
 80074ea:	b125      	cbz	r5, 80074f6 <__swsetup_r+0x16>
 80074ec:	69ab      	ldr	r3, [r5, #24]
 80074ee:	b913      	cbnz	r3, 80074f6 <__swsetup_r+0x16>
 80074f0:	4628      	mov	r0, r5
 80074f2:	f000 f985 	bl	8007800 <__sinit>
 80074f6:	4b2e      	ldr	r3, [pc, #184]	; (80075b0 <__swsetup_r+0xd0>)
 80074f8:	429c      	cmp	r4, r3
 80074fa:	d10f      	bne.n	800751c <__swsetup_r+0x3c>
 80074fc:	686c      	ldr	r4, [r5, #4]
 80074fe:	89a3      	ldrh	r3, [r4, #12]
 8007500:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007504:	0719      	lsls	r1, r3, #28
 8007506:	d42c      	bmi.n	8007562 <__swsetup_r+0x82>
 8007508:	06dd      	lsls	r5, r3, #27
 800750a:	d411      	bmi.n	8007530 <__swsetup_r+0x50>
 800750c:	2309      	movs	r3, #9
 800750e:	6033      	str	r3, [r6, #0]
 8007510:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007514:	81a3      	strh	r3, [r4, #12]
 8007516:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800751a:	e03e      	b.n	800759a <__swsetup_r+0xba>
 800751c:	4b25      	ldr	r3, [pc, #148]	; (80075b4 <__swsetup_r+0xd4>)
 800751e:	429c      	cmp	r4, r3
 8007520:	d101      	bne.n	8007526 <__swsetup_r+0x46>
 8007522:	68ac      	ldr	r4, [r5, #8]
 8007524:	e7eb      	b.n	80074fe <__swsetup_r+0x1e>
 8007526:	4b24      	ldr	r3, [pc, #144]	; (80075b8 <__swsetup_r+0xd8>)
 8007528:	429c      	cmp	r4, r3
 800752a:	bf08      	it	eq
 800752c:	68ec      	ldreq	r4, [r5, #12]
 800752e:	e7e6      	b.n	80074fe <__swsetup_r+0x1e>
 8007530:	0758      	lsls	r0, r3, #29
 8007532:	d512      	bpl.n	800755a <__swsetup_r+0x7a>
 8007534:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007536:	b141      	cbz	r1, 800754a <__swsetup_r+0x6a>
 8007538:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800753c:	4299      	cmp	r1, r3
 800753e:	d002      	beq.n	8007546 <__swsetup_r+0x66>
 8007540:	4630      	mov	r0, r6
 8007542:	f7ff fb31 	bl	8006ba8 <_free_r>
 8007546:	2300      	movs	r3, #0
 8007548:	6363      	str	r3, [r4, #52]	; 0x34
 800754a:	89a3      	ldrh	r3, [r4, #12]
 800754c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007550:	81a3      	strh	r3, [r4, #12]
 8007552:	2300      	movs	r3, #0
 8007554:	6063      	str	r3, [r4, #4]
 8007556:	6923      	ldr	r3, [r4, #16]
 8007558:	6023      	str	r3, [r4, #0]
 800755a:	89a3      	ldrh	r3, [r4, #12]
 800755c:	f043 0308 	orr.w	r3, r3, #8
 8007560:	81a3      	strh	r3, [r4, #12]
 8007562:	6923      	ldr	r3, [r4, #16]
 8007564:	b94b      	cbnz	r3, 800757a <__swsetup_r+0x9a>
 8007566:	89a3      	ldrh	r3, [r4, #12]
 8007568:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800756c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007570:	d003      	beq.n	800757a <__swsetup_r+0x9a>
 8007572:	4621      	mov	r1, r4
 8007574:	4630      	mov	r0, r6
 8007576:	f000 fa09 	bl	800798c <__smakebuf_r>
 800757a:	89a0      	ldrh	r0, [r4, #12]
 800757c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007580:	f010 0301 	ands.w	r3, r0, #1
 8007584:	d00a      	beq.n	800759c <__swsetup_r+0xbc>
 8007586:	2300      	movs	r3, #0
 8007588:	60a3      	str	r3, [r4, #8]
 800758a:	6963      	ldr	r3, [r4, #20]
 800758c:	425b      	negs	r3, r3
 800758e:	61a3      	str	r3, [r4, #24]
 8007590:	6923      	ldr	r3, [r4, #16]
 8007592:	b943      	cbnz	r3, 80075a6 <__swsetup_r+0xc6>
 8007594:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007598:	d1ba      	bne.n	8007510 <__swsetup_r+0x30>
 800759a:	bd70      	pop	{r4, r5, r6, pc}
 800759c:	0781      	lsls	r1, r0, #30
 800759e:	bf58      	it	pl
 80075a0:	6963      	ldrpl	r3, [r4, #20]
 80075a2:	60a3      	str	r3, [r4, #8]
 80075a4:	e7f4      	b.n	8007590 <__swsetup_r+0xb0>
 80075a6:	2000      	movs	r0, #0
 80075a8:	e7f7      	b.n	800759a <__swsetup_r+0xba>
 80075aa:	bf00      	nop
 80075ac:	20000010 	.word	0x20000010
 80075b0:	08008004 	.word	0x08008004
 80075b4:	08008024 	.word	0x08008024
 80075b8:	08007fe4 	.word	0x08007fe4

080075bc <abort>:
 80075bc:	b508      	push	{r3, lr}
 80075be:	2006      	movs	r0, #6
 80075c0:	f000 fa54 	bl	8007a6c <raise>
 80075c4:	2001      	movs	r0, #1
 80075c6:	f7fa fef7 	bl	80023b8 <_exit>
	...

080075cc <__sflush_r>:
 80075cc:	898a      	ldrh	r2, [r1, #12]
 80075ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075d2:	4605      	mov	r5, r0
 80075d4:	0710      	lsls	r0, r2, #28
 80075d6:	460c      	mov	r4, r1
 80075d8:	d458      	bmi.n	800768c <__sflush_r+0xc0>
 80075da:	684b      	ldr	r3, [r1, #4]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	dc05      	bgt.n	80075ec <__sflush_r+0x20>
 80075e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	dc02      	bgt.n	80075ec <__sflush_r+0x20>
 80075e6:	2000      	movs	r0, #0
 80075e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075ee:	2e00      	cmp	r6, #0
 80075f0:	d0f9      	beq.n	80075e6 <__sflush_r+0x1a>
 80075f2:	2300      	movs	r3, #0
 80075f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075f8:	682f      	ldr	r7, [r5, #0]
 80075fa:	602b      	str	r3, [r5, #0]
 80075fc:	d032      	beq.n	8007664 <__sflush_r+0x98>
 80075fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007600:	89a3      	ldrh	r3, [r4, #12]
 8007602:	075a      	lsls	r2, r3, #29
 8007604:	d505      	bpl.n	8007612 <__sflush_r+0x46>
 8007606:	6863      	ldr	r3, [r4, #4]
 8007608:	1ac0      	subs	r0, r0, r3
 800760a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800760c:	b10b      	cbz	r3, 8007612 <__sflush_r+0x46>
 800760e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007610:	1ac0      	subs	r0, r0, r3
 8007612:	2300      	movs	r3, #0
 8007614:	4602      	mov	r2, r0
 8007616:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007618:	6a21      	ldr	r1, [r4, #32]
 800761a:	4628      	mov	r0, r5
 800761c:	47b0      	blx	r6
 800761e:	1c43      	adds	r3, r0, #1
 8007620:	89a3      	ldrh	r3, [r4, #12]
 8007622:	d106      	bne.n	8007632 <__sflush_r+0x66>
 8007624:	6829      	ldr	r1, [r5, #0]
 8007626:	291d      	cmp	r1, #29
 8007628:	d82c      	bhi.n	8007684 <__sflush_r+0xb8>
 800762a:	4a2a      	ldr	r2, [pc, #168]	; (80076d4 <__sflush_r+0x108>)
 800762c:	40ca      	lsrs	r2, r1
 800762e:	07d6      	lsls	r6, r2, #31
 8007630:	d528      	bpl.n	8007684 <__sflush_r+0xb8>
 8007632:	2200      	movs	r2, #0
 8007634:	6062      	str	r2, [r4, #4]
 8007636:	04d9      	lsls	r1, r3, #19
 8007638:	6922      	ldr	r2, [r4, #16]
 800763a:	6022      	str	r2, [r4, #0]
 800763c:	d504      	bpl.n	8007648 <__sflush_r+0x7c>
 800763e:	1c42      	adds	r2, r0, #1
 8007640:	d101      	bne.n	8007646 <__sflush_r+0x7a>
 8007642:	682b      	ldr	r3, [r5, #0]
 8007644:	b903      	cbnz	r3, 8007648 <__sflush_r+0x7c>
 8007646:	6560      	str	r0, [r4, #84]	; 0x54
 8007648:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800764a:	602f      	str	r7, [r5, #0]
 800764c:	2900      	cmp	r1, #0
 800764e:	d0ca      	beq.n	80075e6 <__sflush_r+0x1a>
 8007650:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007654:	4299      	cmp	r1, r3
 8007656:	d002      	beq.n	800765e <__sflush_r+0x92>
 8007658:	4628      	mov	r0, r5
 800765a:	f7ff faa5 	bl	8006ba8 <_free_r>
 800765e:	2000      	movs	r0, #0
 8007660:	6360      	str	r0, [r4, #52]	; 0x34
 8007662:	e7c1      	b.n	80075e8 <__sflush_r+0x1c>
 8007664:	6a21      	ldr	r1, [r4, #32]
 8007666:	2301      	movs	r3, #1
 8007668:	4628      	mov	r0, r5
 800766a:	47b0      	blx	r6
 800766c:	1c41      	adds	r1, r0, #1
 800766e:	d1c7      	bne.n	8007600 <__sflush_r+0x34>
 8007670:	682b      	ldr	r3, [r5, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d0c4      	beq.n	8007600 <__sflush_r+0x34>
 8007676:	2b1d      	cmp	r3, #29
 8007678:	d001      	beq.n	800767e <__sflush_r+0xb2>
 800767a:	2b16      	cmp	r3, #22
 800767c:	d101      	bne.n	8007682 <__sflush_r+0xb6>
 800767e:	602f      	str	r7, [r5, #0]
 8007680:	e7b1      	b.n	80075e6 <__sflush_r+0x1a>
 8007682:	89a3      	ldrh	r3, [r4, #12]
 8007684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007688:	81a3      	strh	r3, [r4, #12]
 800768a:	e7ad      	b.n	80075e8 <__sflush_r+0x1c>
 800768c:	690f      	ldr	r7, [r1, #16]
 800768e:	2f00      	cmp	r7, #0
 8007690:	d0a9      	beq.n	80075e6 <__sflush_r+0x1a>
 8007692:	0793      	lsls	r3, r2, #30
 8007694:	680e      	ldr	r6, [r1, #0]
 8007696:	bf08      	it	eq
 8007698:	694b      	ldreq	r3, [r1, #20]
 800769a:	600f      	str	r7, [r1, #0]
 800769c:	bf18      	it	ne
 800769e:	2300      	movne	r3, #0
 80076a0:	eba6 0807 	sub.w	r8, r6, r7
 80076a4:	608b      	str	r3, [r1, #8]
 80076a6:	f1b8 0f00 	cmp.w	r8, #0
 80076aa:	dd9c      	ble.n	80075e6 <__sflush_r+0x1a>
 80076ac:	6a21      	ldr	r1, [r4, #32]
 80076ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076b0:	4643      	mov	r3, r8
 80076b2:	463a      	mov	r2, r7
 80076b4:	4628      	mov	r0, r5
 80076b6:	47b0      	blx	r6
 80076b8:	2800      	cmp	r0, #0
 80076ba:	dc06      	bgt.n	80076ca <__sflush_r+0xfe>
 80076bc:	89a3      	ldrh	r3, [r4, #12]
 80076be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076c2:	81a3      	strh	r3, [r4, #12]
 80076c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076c8:	e78e      	b.n	80075e8 <__sflush_r+0x1c>
 80076ca:	4407      	add	r7, r0
 80076cc:	eba8 0800 	sub.w	r8, r8, r0
 80076d0:	e7e9      	b.n	80076a6 <__sflush_r+0xda>
 80076d2:	bf00      	nop
 80076d4:	20400001 	.word	0x20400001

080076d8 <_fflush_r>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	690b      	ldr	r3, [r1, #16]
 80076dc:	4605      	mov	r5, r0
 80076de:	460c      	mov	r4, r1
 80076e0:	b913      	cbnz	r3, 80076e8 <_fflush_r+0x10>
 80076e2:	2500      	movs	r5, #0
 80076e4:	4628      	mov	r0, r5
 80076e6:	bd38      	pop	{r3, r4, r5, pc}
 80076e8:	b118      	cbz	r0, 80076f2 <_fflush_r+0x1a>
 80076ea:	6983      	ldr	r3, [r0, #24]
 80076ec:	b90b      	cbnz	r3, 80076f2 <_fflush_r+0x1a>
 80076ee:	f000 f887 	bl	8007800 <__sinit>
 80076f2:	4b14      	ldr	r3, [pc, #80]	; (8007744 <_fflush_r+0x6c>)
 80076f4:	429c      	cmp	r4, r3
 80076f6:	d11b      	bne.n	8007730 <_fflush_r+0x58>
 80076f8:	686c      	ldr	r4, [r5, #4]
 80076fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d0ef      	beq.n	80076e2 <_fflush_r+0xa>
 8007702:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007704:	07d0      	lsls	r0, r2, #31
 8007706:	d404      	bmi.n	8007712 <_fflush_r+0x3a>
 8007708:	0599      	lsls	r1, r3, #22
 800770a:	d402      	bmi.n	8007712 <_fflush_r+0x3a>
 800770c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800770e:	f000 f915 	bl	800793c <__retarget_lock_acquire_recursive>
 8007712:	4628      	mov	r0, r5
 8007714:	4621      	mov	r1, r4
 8007716:	f7ff ff59 	bl	80075cc <__sflush_r>
 800771a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800771c:	07da      	lsls	r2, r3, #31
 800771e:	4605      	mov	r5, r0
 8007720:	d4e0      	bmi.n	80076e4 <_fflush_r+0xc>
 8007722:	89a3      	ldrh	r3, [r4, #12]
 8007724:	059b      	lsls	r3, r3, #22
 8007726:	d4dd      	bmi.n	80076e4 <_fflush_r+0xc>
 8007728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800772a:	f000 f908 	bl	800793e <__retarget_lock_release_recursive>
 800772e:	e7d9      	b.n	80076e4 <_fflush_r+0xc>
 8007730:	4b05      	ldr	r3, [pc, #20]	; (8007748 <_fflush_r+0x70>)
 8007732:	429c      	cmp	r4, r3
 8007734:	d101      	bne.n	800773a <_fflush_r+0x62>
 8007736:	68ac      	ldr	r4, [r5, #8]
 8007738:	e7df      	b.n	80076fa <_fflush_r+0x22>
 800773a:	4b04      	ldr	r3, [pc, #16]	; (800774c <_fflush_r+0x74>)
 800773c:	429c      	cmp	r4, r3
 800773e:	bf08      	it	eq
 8007740:	68ec      	ldreq	r4, [r5, #12]
 8007742:	e7da      	b.n	80076fa <_fflush_r+0x22>
 8007744:	08008004 	.word	0x08008004
 8007748:	08008024 	.word	0x08008024
 800774c:	08007fe4 	.word	0x08007fe4

08007750 <std>:
 8007750:	2300      	movs	r3, #0
 8007752:	b510      	push	{r4, lr}
 8007754:	4604      	mov	r4, r0
 8007756:	e9c0 3300 	strd	r3, r3, [r0]
 800775a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800775e:	6083      	str	r3, [r0, #8]
 8007760:	8181      	strh	r1, [r0, #12]
 8007762:	6643      	str	r3, [r0, #100]	; 0x64
 8007764:	81c2      	strh	r2, [r0, #14]
 8007766:	6183      	str	r3, [r0, #24]
 8007768:	4619      	mov	r1, r3
 800776a:	2208      	movs	r2, #8
 800776c:	305c      	adds	r0, #92	; 0x5c
 800776e:	f7fd fb67 	bl	8004e40 <memset>
 8007772:	4b05      	ldr	r3, [pc, #20]	; (8007788 <std+0x38>)
 8007774:	6263      	str	r3, [r4, #36]	; 0x24
 8007776:	4b05      	ldr	r3, [pc, #20]	; (800778c <std+0x3c>)
 8007778:	62a3      	str	r3, [r4, #40]	; 0x28
 800777a:	4b05      	ldr	r3, [pc, #20]	; (8007790 <std+0x40>)
 800777c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800777e:	4b05      	ldr	r3, [pc, #20]	; (8007794 <std+0x44>)
 8007780:	6224      	str	r4, [r4, #32]
 8007782:	6323      	str	r3, [r4, #48]	; 0x30
 8007784:	bd10      	pop	{r4, pc}
 8007786:	bf00      	nop
 8007788:	08007aa5 	.word	0x08007aa5
 800778c:	08007ac7 	.word	0x08007ac7
 8007790:	08007aff 	.word	0x08007aff
 8007794:	08007b23 	.word	0x08007b23

08007798 <_cleanup_r>:
 8007798:	4901      	ldr	r1, [pc, #4]	; (80077a0 <_cleanup_r+0x8>)
 800779a:	f000 b8af 	b.w	80078fc <_fwalk_reent>
 800779e:	bf00      	nop
 80077a0:	080076d9 	.word	0x080076d9

080077a4 <__sfmoreglue>:
 80077a4:	b570      	push	{r4, r5, r6, lr}
 80077a6:	2268      	movs	r2, #104	; 0x68
 80077a8:	1e4d      	subs	r5, r1, #1
 80077aa:	4355      	muls	r5, r2
 80077ac:	460e      	mov	r6, r1
 80077ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80077b2:	f7ff fa65 	bl	8006c80 <_malloc_r>
 80077b6:	4604      	mov	r4, r0
 80077b8:	b140      	cbz	r0, 80077cc <__sfmoreglue+0x28>
 80077ba:	2100      	movs	r1, #0
 80077bc:	e9c0 1600 	strd	r1, r6, [r0]
 80077c0:	300c      	adds	r0, #12
 80077c2:	60a0      	str	r0, [r4, #8]
 80077c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80077c8:	f7fd fb3a 	bl	8004e40 <memset>
 80077cc:	4620      	mov	r0, r4
 80077ce:	bd70      	pop	{r4, r5, r6, pc}

080077d0 <__sfp_lock_acquire>:
 80077d0:	4801      	ldr	r0, [pc, #4]	; (80077d8 <__sfp_lock_acquire+0x8>)
 80077d2:	f000 b8b3 	b.w	800793c <__retarget_lock_acquire_recursive>
 80077d6:	bf00      	nop
 80077d8:	20000309 	.word	0x20000309

080077dc <__sfp_lock_release>:
 80077dc:	4801      	ldr	r0, [pc, #4]	; (80077e4 <__sfp_lock_release+0x8>)
 80077de:	f000 b8ae 	b.w	800793e <__retarget_lock_release_recursive>
 80077e2:	bf00      	nop
 80077e4:	20000309 	.word	0x20000309

080077e8 <__sinit_lock_acquire>:
 80077e8:	4801      	ldr	r0, [pc, #4]	; (80077f0 <__sinit_lock_acquire+0x8>)
 80077ea:	f000 b8a7 	b.w	800793c <__retarget_lock_acquire_recursive>
 80077ee:	bf00      	nop
 80077f0:	2000030a 	.word	0x2000030a

080077f4 <__sinit_lock_release>:
 80077f4:	4801      	ldr	r0, [pc, #4]	; (80077fc <__sinit_lock_release+0x8>)
 80077f6:	f000 b8a2 	b.w	800793e <__retarget_lock_release_recursive>
 80077fa:	bf00      	nop
 80077fc:	2000030a 	.word	0x2000030a

08007800 <__sinit>:
 8007800:	b510      	push	{r4, lr}
 8007802:	4604      	mov	r4, r0
 8007804:	f7ff fff0 	bl	80077e8 <__sinit_lock_acquire>
 8007808:	69a3      	ldr	r3, [r4, #24]
 800780a:	b11b      	cbz	r3, 8007814 <__sinit+0x14>
 800780c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007810:	f7ff bff0 	b.w	80077f4 <__sinit_lock_release>
 8007814:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007818:	6523      	str	r3, [r4, #80]	; 0x50
 800781a:	4b13      	ldr	r3, [pc, #76]	; (8007868 <__sinit+0x68>)
 800781c:	4a13      	ldr	r2, [pc, #76]	; (800786c <__sinit+0x6c>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	62a2      	str	r2, [r4, #40]	; 0x28
 8007822:	42a3      	cmp	r3, r4
 8007824:	bf04      	itt	eq
 8007826:	2301      	moveq	r3, #1
 8007828:	61a3      	streq	r3, [r4, #24]
 800782a:	4620      	mov	r0, r4
 800782c:	f000 f820 	bl	8007870 <__sfp>
 8007830:	6060      	str	r0, [r4, #4]
 8007832:	4620      	mov	r0, r4
 8007834:	f000 f81c 	bl	8007870 <__sfp>
 8007838:	60a0      	str	r0, [r4, #8]
 800783a:	4620      	mov	r0, r4
 800783c:	f000 f818 	bl	8007870 <__sfp>
 8007840:	2200      	movs	r2, #0
 8007842:	60e0      	str	r0, [r4, #12]
 8007844:	2104      	movs	r1, #4
 8007846:	6860      	ldr	r0, [r4, #4]
 8007848:	f7ff ff82 	bl	8007750 <std>
 800784c:	68a0      	ldr	r0, [r4, #8]
 800784e:	2201      	movs	r2, #1
 8007850:	2109      	movs	r1, #9
 8007852:	f7ff ff7d 	bl	8007750 <std>
 8007856:	68e0      	ldr	r0, [r4, #12]
 8007858:	2202      	movs	r2, #2
 800785a:	2112      	movs	r1, #18
 800785c:	f7ff ff78 	bl	8007750 <std>
 8007860:	2301      	movs	r3, #1
 8007862:	61a3      	str	r3, [r4, #24]
 8007864:	e7d2      	b.n	800780c <__sinit+0xc>
 8007866:	bf00      	nop
 8007868:	08007c6c 	.word	0x08007c6c
 800786c:	08007799 	.word	0x08007799

08007870 <__sfp>:
 8007870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007872:	4607      	mov	r7, r0
 8007874:	f7ff ffac 	bl	80077d0 <__sfp_lock_acquire>
 8007878:	4b1e      	ldr	r3, [pc, #120]	; (80078f4 <__sfp+0x84>)
 800787a:	681e      	ldr	r6, [r3, #0]
 800787c:	69b3      	ldr	r3, [r6, #24]
 800787e:	b913      	cbnz	r3, 8007886 <__sfp+0x16>
 8007880:	4630      	mov	r0, r6
 8007882:	f7ff ffbd 	bl	8007800 <__sinit>
 8007886:	3648      	adds	r6, #72	; 0x48
 8007888:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800788c:	3b01      	subs	r3, #1
 800788e:	d503      	bpl.n	8007898 <__sfp+0x28>
 8007890:	6833      	ldr	r3, [r6, #0]
 8007892:	b30b      	cbz	r3, 80078d8 <__sfp+0x68>
 8007894:	6836      	ldr	r6, [r6, #0]
 8007896:	e7f7      	b.n	8007888 <__sfp+0x18>
 8007898:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800789c:	b9d5      	cbnz	r5, 80078d4 <__sfp+0x64>
 800789e:	4b16      	ldr	r3, [pc, #88]	; (80078f8 <__sfp+0x88>)
 80078a0:	60e3      	str	r3, [r4, #12]
 80078a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80078a6:	6665      	str	r5, [r4, #100]	; 0x64
 80078a8:	f000 f847 	bl	800793a <__retarget_lock_init_recursive>
 80078ac:	f7ff ff96 	bl	80077dc <__sfp_lock_release>
 80078b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80078b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80078b8:	6025      	str	r5, [r4, #0]
 80078ba:	61a5      	str	r5, [r4, #24]
 80078bc:	2208      	movs	r2, #8
 80078be:	4629      	mov	r1, r5
 80078c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078c4:	f7fd fabc 	bl	8004e40 <memset>
 80078c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80078cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80078d0:	4620      	mov	r0, r4
 80078d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078d4:	3468      	adds	r4, #104	; 0x68
 80078d6:	e7d9      	b.n	800788c <__sfp+0x1c>
 80078d8:	2104      	movs	r1, #4
 80078da:	4638      	mov	r0, r7
 80078dc:	f7ff ff62 	bl	80077a4 <__sfmoreglue>
 80078e0:	4604      	mov	r4, r0
 80078e2:	6030      	str	r0, [r6, #0]
 80078e4:	2800      	cmp	r0, #0
 80078e6:	d1d5      	bne.n	8007894 <__sfp+0x24>
 80078e8:	f7ff ff78 	bl	80077dc <__sfp_lock_release>
 80078ec:	230c      	movs	r3, #12
 80078ee:	603b      	str	r3, [r7, #0]
 80078f0:	e7ee      	b.n	80078d0 <__sfp+0x60>
 80078f2:	bf00      	nop
 80078f4:	08007c6c 	.word	0x08007c6c
 80078f8:	ffff0001 	.word	0xffff0001

080078fc <_fwalk_reent>:
 80078fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007900:	4606      	mov	r6, r0
 8007902:	4688      	mov	r8, r1
 8007904:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007908:	2700      	movs	r7, #0
 800790a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800790e:	f1b9 0901 	subs.w	r9, r9, #1
 8007912:	d505      	bpl.n	8007920 <_fwalk_reent+0x24>
 8007914:	6824      	ldr	r4, [r4, #0]
 8007916:	2c00      	cmp	r4, #0
 8007918:	d1f7      	bne.n	800790a <_fwalk_reent+0xe>
 800791a:	4638      	mov	r0, r7
 800791c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007920:	89ab      	ldrh	r3, [r5, #12]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d907      	bls.n	8007936 <_fwalk_reent+0x3a>
 8007926:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800792a:	3301      	adds	r3, #1
 800792c:	d003      	beq.n	8007936 <_fwalk_reent+0x3a>
 800792e:	4629      	mov	r1, r5
 8007930:	4630      	mov	r0, r6
 8007932:	47c0      	blx	r8
 8007934:	4307      	orrs	r7, r0
 8007936:	3568      	adds	r5, #104	; 0x68
 8007938:	e7e9      	b.n	800790e <_fwalk_reent+0x12>

0800793a <__retarget_lock_init_recursive>:
 800793a:	4770      	bx	lr

0800793c <__retarget_lock_acquire_recursive>:
 800793c:	4770      	bx	lr

0800793e <__retarget_lock_release_recursive>:
 800793e:	4770      	bx	lr

08007940 <__swhatbuf_r>:
 8007940:	b570      	push	{r4, r5, r6, lr}
 8007942:	460e      	mov	r6, r1
 8007944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007948:	2900      	cmp	r1, #0
 800794a:	b096      	sub	sp, #88	; 0x58
 800794c:	4614      	mov	r4, r2
 800794e:	461d      	mov	r5, r3
 8007950:	da08      	bge.n	8007964 <__swhatbuf_r+0x24>
 8007952:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007956:	2200      	movs	r2, #0
 8007958:	602a      	str	r2, [r5, #0]
 800795a:	061a      	lsls	r2, r3, #24
 800795c:	d410      	bmi.n	8007980 <__swhatbuf_r+0x40>
 800795e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007962:	e00e      	b.n	8007982 <__swhatbuf_r+0x42>
 8007964:	466a      	mov	r2, sp
 8007966:	f000 f903 	bl	8007b70 <_fstat_r>
 800796a:	2800      	cmp	r0, #0
 800796c:	dbf1      	blt.n	8007952 <__swhatbuf_r+0x12>
 800796e:	9a01      	ldr	r2, [sp, #4]
 8007970:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007974:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007978:	425a      	negs	r2, r3
 800797a:	415a      	adcs	r2, r3
 800797c:	602a      	str	r2, [r5, #0]
 800797e:	e7ee      	b.n	800795e <__swhatbuf_r+0x1e>
 8007980:	2340      	movs	r3, #64	; 0x40
 8007982:	2000      	movs	r0, #0
 8007984:	6023      	str	r3, [r4, #0]
 8007986:	b016      	add	sp, #88	; 0x58
 8007988:	bd70      	pop	{r4, r5, r6, pc}
	...

0800798c <__smakebuf_r>:
 800798c:	898b      	ldrh	r3, [r1, #12]
 800798e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007990:	079d      	lsls	r5, r3, #30
 8007992:	4606      	mov	r6, r0
 8007994:	460c      	mov	r4, r1
 8007996:	d507      	bpl.n	80079a8 <__smakebuf_r+0x1c>
 8007998:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800799c:	6023      	str	r3, [r4, #0]
 800799e:	6123      	str	r3, [r4, #16]
 80079a0:	2301      	movs	r3, #1
 80079a2:	6163      	str	r3, [r4, #20]
 80079a4:	b002      	add	sp, #8
 80079a6:	bd70      	pop	{r4, r5, r6, pc}
 80079a8:	ab01      	add	r3, sp, #4
 80079aa:	466a      	mov	r2, sp
 80079ac:	f7ff ffc8 	bl	8007940 <__swhatbuf_r>
 80079b0:	9900      	ldr	r1, [sp, #0]
 80079b2:	4605      	mov	r5, r0
 80079b4:	4630      	mov	r0, r6
 80079b6:	f7ff f963 	bl	8006c80 <_malloc_r>
 80079ba:	b948      	cbnz	r0, 80079d0 <__smakebuf_r+0x44>
 80079bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079c0:	059a      	lsls	r2, r3, #22
 80079c2:	d4ef      	bmi.n	80079a4 <__smakebuf_r+0x18>
 80079c4:	f023 0303 	bic.w	r3, r3, #3
 80079c8:	f043 0302 	orr.w	r3, r3, #2
 80079cc:	81a3      	strh	r3, [r4, #12]
 80079ce:	e7e3      	b.n	8007998 <__smakebuf_r+0xc>
 80079d0:	4b0d      	ldr	r3, [pc, #52]	; (8007a08 <__smakebuf_r+0x7c>)
 80079d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80079d4:	89a3      	ldrh	r3, [r4, #12]
 80079d6:	6020      	str	r0, [r4, #0]
 80079d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079dc:	81a3      	strh	r3, [r4, #12]
 80079de:	9b00      	ldr	r3, [sp, #0]
 80079e0:	6163      	str	r3, [r4, #20]
 80079e2:	9b01      	ldr	r3, [sp, #4]
 80079e4:	6120      	str	r0, [r4, #16]
 80079e6:	b15b      	cbz	r3, 8007a00 <__smakebuf_r+0x74>
 80079e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079ec:	4630      	mov	r0, r6
 80079ee:	f000 f8d1 	bl	8007b94 <_isatty_r>
 80079f2:	b128      	cbz	r0, 8007a00 <__smakebuf_r+0x74>
 80079f4:	89a3      	ldrh	r3, [r4, #12]
 80079f6:	f023 0303 	bic.w	r3, r3, #3
 80079fa:	f043 0301 	orr.w	r3, r3, #1
 80079fe:	81a3      	strh	r3, [r4, #12]
 8007a00:	89a0      	ldrh	r0, [r4, #12]
 8007a02:	4305      	orrs	r5, r0
 8007a04:	81a5      	strh	r5, [r4, #12]
 8007a06:	e7cd      	b.n	80079a4 <__smakebuf_r+0x18>
 8007a08:	08007799 	.word	0x08007799

08007a0c <_malloc_usable_size_r>:
 8007a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a10:	1f18      	subs	r0, r3, #4
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	bfbc      	itt	lt
 8007a16:	580b      	ldrlt	r3, [r1, r0]
 8007a18:	18c0      	addlt	r0, r0, r3
 8007a1a:	4770      	bx	lr

08007a1c <_raise_r>:
 8007a1c:	291f      	cmp	r1, #31
 8007a1e:	b538      	push	{r3, r4, r5, lr}
 8007a20:	4604      	mov	r4, r0
 8007a22:	460d      	mov	r5, r1
 8007a24:	d904      	bls.n	8007a30 <_raise_r+0x14>
 8007a26:	2316      	movs	r3, #22
 8007a28:	6003      	str	r3, [r0, #0]
 8007a2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a2e:	bd38      	pop	{r3, r4, r5, pc}
 8007a30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007a32:	b112      	cbz	r2, 8007a3a <_raise_r+0x1e>
 8007a34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a38:	b94b      	cbnz	r3, 8007a4e <_raise_r+0x32>
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f000 f830 	bl	8007aa0 <_getpid_r>
 8007a40:	462a      	mov	r2, r5
 8007a42:	4601      	mov	r1, r0
 8007a44:	4620      	mov	r0, r4
 8007a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a4a:	f000 b817 	b.w	8007a7c <_kill_r>
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d00a      	beq.n	8007a68 <_raise_r+0x4c>
 8007a52:	1c59      	adds	r1, r3, #1
 8007a54:	d103      	bne.n	8007a5e <_raise_r+0x42>
 8007a56:	2316      	movs	r3, #22
 8007a58:	6003      	str	r3, [r0, #0]
 8007a5a:	2001      	movs	r0, #1
 8007a5c:	e7e7      	b.n	8007a2e <_raise_r+0x12>
 8007a5e:	2400      	movs	r4, #0
 8007a60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a64:	4628      	mov	r0, r5
 8007a66:	4798      	blx	r3
 8007a68:	2000      	movs	r0, #0
 8007a6a:	e7e0      	b.n	8007a2e <_raise_r+0x12>

08007a6c <raise>:
 8007a6c:	4b02      	ldr	r3, [pc, #8]	; (8007a78 <raise+0xc>)
 8007a6e:	4601      	mov	r1, r0
 8007a70:	6818      	ldr	r0, [r3, #0]
 8007a72:	f7ff bfd3 	b.w	8007a1c <_raise_r>
 8007a76:	bf00      	nop
 8007a78:	20000010 	.word	0x20000010

08007a7c <_kill_r>:
 8007a7c:	b538      	push	{r3, r4, r5, lr}
 8007a7e:	4d07      	ldr	r5, [pc, #28]	; (8007a9c <_kill_r+0x20>)
 8007a80:	2300      	movs	r3, #0
 8007a82:	4604      	mov	r4, r0
 8007a84:	4608      	mov	r0, r1
 8007a86:	4611      	mov	r1, r2
 8007a88:	602b      	str	r3, [r5, #0]
 8007a8a:	f7fa fc85 	bl	8002398 <_kill>
 8007a8e:	1c43      	adds	r3, r0, #1
 8007a90:	d102      	bne.n	8007a98 <_kill_r+0x1c>
 8007a92:	682b      	ldr	r3, [r5, #0]
 8007a94:	b103      	cbz	r3, 8007a98 <_kill_r+0x1c>
 8007a96:	6023      	str	r3, [r4, #0]
 8007a98:	bd38      	pop	{r3, r4, r5, pc}
 8007a9a:	bf00      	nop
 8007a9c:	20000304 	.word	0x20000304

08007aa0 <_getpid_r>:
 8007aa0:	f7fa bc72 	b.w	8002388 <_getpid>

08007aa4 <__sread>:
 8007aa4:	b510      	push	{r4, lr}
 8007aa6:	460c      	mov	r4, r1
 8007aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aac:	f000 f894 	bl	8007bd8 <_read_r>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	bfab      	itete	ge
 8007ab4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ab6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ab8:	181b      	addge	r3, r3, r0
 8007aba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007abe:	bfac      	ite	ge
 8007ac0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ac2:	81a3      	strhlt	r3, [r4, #12]
 8007ac4:	bd10      	pop	{r4, pc}

08007ac6 <__swrite>:
 8007ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aca:	461f      	mov	r7, r3
 8007acc:	898b      	ldrh	r3, [r1, #12]
 8007ace:	05db      	lsls	r3, r3, #23
 8007ad0:	4605      	mov	r5, r0
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	4616      	mov	r6, r2
 8007ad6:	d505      	bpl.n	8007ae4 <__swrite+0x1e>
 8007ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007adc:	2302      	movs	r3, #2
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f000 f868 	bl	8007bb4 <_lseek_r>
 8007ae4:	89a3      	ldrh	r3, [r4, #12]
 8007ae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007aea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007aee:	81a3      	strh	r3, [r4, #12]
 8007af0:	4632      	mov	r2, r6
 8007af2:	463b      	mov	r3, r7
 8007af4:	4628      	mov	r0, r5
 8007af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007afa:	f000 b817 	b.w	8007b2c <_write_r>

08007afe <__sseek>:
 8007afe:	b510      	push	{r4, lr}
 8007b00:	460c      	mov	r4, r1
 8007b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b06:	f000 f855 	bl	8007bb4 <_lseek_r>
 8007b0a:	1c43      	adds	r3, r0, #1
 8007b0c:	89a3      	ldrh	r3, [r4, #12]
 8007b0e:	bf15      	itete	ne
 8007b10:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b1a:	81a3      	strheq	r3, [r4, #12]
 8007b1c:	bf18      	it	ne
 8007b1e:	81a3      	strhne	r3, [r4, #12]
 8007b20:	bd10      	pop	{r4, pc}

08007b22 <__sclose>:
 8007b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b26:	f000 b813 	b.w	8007b50 <_close_r>
	...

08007b2c <_write_r>:
 8007b2c:	b538      	push	{r3, r4, r5, lr}
 8007b2e:	4d07      	ldr	r5, [pc, #28]	; (8007b4c <_write_r+0x20>)
 8007b30:	4604      	mov	r4, r0
 8007b32:	4608      	mov	r0, r1
 8007b34:	4611      	mov	r1, r2
 8007b36:	2200      	movs	r2, #0
 8007b38:	602a      	str	r2, [r5, #0]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	f7fa fc63 	bl	8002406 <_write>
 8007b40:	1c43      	adds	r3, r0, #1
 8007b42:	d102      	bne.n	8007b4a <_write_r+0x1e>
 8007b44:	682b      	ldr	r3, [r5, #0]
 8007b46:	b103      	cbz	r3, 8007b4a <_write_r+0x1e>
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	bd38      	pop	{r3, r4, r5, pc}
 8007b4c:	20000304 	.word	0x20000304

08007b50 <_close_r>:
 8007b50:	b538      	push	{r3, r4, r5, lr}
 8007b52:	4d06      	ldr	r5, [pc, #24]	; (8007b6c <_close_r+0x1c>)
 8007b54:	2300      	movs	r3, #0
 8007b56:	4604      	mov	r4, r0
 8007b58:	4608      	mov	r0, r1
 8007b5a:	602b      	str	r3, [r5, #0]
 8007b5c:	f7fa fc6f 	bl	800243e <_close>
 8007b60:	1c43      	adds	r3, r0, #1
 8007b62:	d102      	bne.n	8007b6a <_close_r+0x1a>
 8007b64:	682b      	ldr	r3, [r5, #0]
 8007b66:	b103      	cbz	r3, 8007b6a <_close_r+0x1a>
 8007b68:	6023      	str	r3, [r4, #0]
 8007b6a:	bd38      	pop	{r3, r4, r5, pc}
 8007b6c:	20000304 	.word	0x20000304

08007b70 <_fstat_r>:
 8007b70:	b538      	push	{r3, r4, r5, lr}
 8007b72:	4d07      	ldr	r5, [pc, #28]	; (8007b90 <_fstat_r+0x20>)
 8007b74:	2300      	movs	r3, #0
 8007b76:	4604      	mov	r4, r0
 8007b78:	4608      	mov	r0, r1
 8007b7a:	4611      	mov	r1, r2
 8007b7c:	602b      	str	r3, [r5, #0]
 8007b7e:	f7fa fc6a 	bl	8002456 <_fstat>
 8007b82:	1c43      	adds	r3, r0, #1
 8007b84:	d102      	bne.n	8007b8c <_fstat_r+0x1c>
 8007b86:	682b      	ldr	r3, [r5, #0]
 8007b88:	b103      	cbz	r3, 8007b8c <_fstat_r+0x1c>
 8007b8a:	6023      	str	r3, [r4, #0]
 8007b8c:	bd38      	pop	{r3, r4, r5, pc}
 8007b8e:	bf00      	nop
 8007b90:	20000304 	.word	0x20000304

08007b94 <_isatty_r>:
 8007b94:	b538      	push	{r3, r4, r5, lr}
 8007b96:	4d06      	ldr	r5, [pc, #24]	; (8007bb0 <_isatty_r+0x1c>)
 8007b98:	2300      	movs	r3, #0
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	4608      	mov	r0, r1
 8007b9e:	602b      	str	r3, [r5, #0]
 8007ba0:	f7fa fc69 	bl	8002476 <_isatty>
 8007ba4:	1c43      	adds	r3, r0, #1
 8007ba6:	d102      	bne.n	8007bae <_isatty_r+0x1a>
 8007ba8:	682b      	ldr	r3, [r5, #0]
 8007baa:	b103      	cbz	r3, 8007bae <_isatty_r+0x1a>
 8007bac:	6023      	str	r3, [r4, #0]
 8007bae:	bd38      	pop	{r3, r4, r5, pc}
 8007bb0:	20000304 	.word	0x20000304

08007bb4 <_lseek_r>:
 8007bb4:	b538      	push	{r3, r4, r5, lr}
 8007bb6:	4d07      	ldr	r5, [pc, #28]	; (8007bd4 <_lseek_r+0x20>)
 8007bb8:	4604      	mov	r4, r0
 8007bba:	4608      	mov	r0, r1
 8007bbc:	4611      	mov	r1, r2
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	602a      	str	r2, [r5, #0]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	f7fa fc62 	bl	800248c <_lseek>
 8007bc8:	1c43      	adds	r3, r0, #1
 8007bca:	d102      	bne.n	8007bd2 <_lseek_r+0x1e>
 8007bcc:	682b      	ldr	r3, [r5, #0]
 8007bce:	b103      	cbz	r3, 8007bd2 <_lseek_r+0x1e>
 8007bd0:	6023      	str	r3, [r4, #0]
 8007bd2:	bd38      	pop	{r3, r4, r5, pc}
 8007bd4:	20000304 	.word	0x20000304

08007bd8 <_read_r>:
 8007bd8:	b538      	push	{r3, r4, r5, lr}
 8007bda:	4d07      	ldr	r5, [pc, #28]	; (8007bf8 <_read_r+0x20>)
 8007bdc:	4604      	mov	r4, r0
 8007bde:	4608      	mov	r0, r1
 8007be0:	4611      	mov	r1, r2
 8007be2:	2200      	movs	r2, #0
 8007be4:	602a      	str	r2, [r5, #0]
 8007be6:	461a      	mov	r2, r3
 8007be8:	f7fa fbf0 	bl	80023cc <_read>
 8007bec:	1c43      	adds	r3, r0, #1
 8007bee:	d102      	bne.n	8007bf6 <_read_r+0x1e>
 8007bf0:	682b      	ldr	r3, [r5, #0]
 8007bf2:	b103      	cbz	r3, 8007bf6 <_read_r+0x1e>
 8007bf4:	6023      	str	r3, [r4, #0]
 8007bf6:	bd38      	pop	{r3, r4, r5, pc}
 8007bf8:	20000304 	.word	0x20000304

08007bfc <_init>:
 8007bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bfe:	bf00      	nop
 8007c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c02:	bc08      	pop	{r3}
 8007c04:	469e      	mov	lr, r3
 8007c06:	4770      	bx	lr

08007c08 <_fini>:
 8007c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c0a:	bf00      	nop
 8007c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c0e:	bc08      	pop	{r3}
 8007c10:	469e      	mov	lr, r3
 8007c12:	4770      	bx	lr
