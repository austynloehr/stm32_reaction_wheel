
STM32ReactionWheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cd8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08008e78  08008e78  00018e78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092a4  080092a4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080092a4  080092a4  000192a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092ac  080092ac  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092ac  080092ac  000192ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092b0  080092b0  000192b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080092b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  200001e0  08009494  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  08009494  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011013  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c8b  00000000  00000000  000312db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be8  00000000  00000000  00033f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008e4  00000000  00000000  00034b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000194ae  00000000  00000000  00035434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014b06  00000000  00000000  0004e8e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b883  00000000  00000000  000633e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042e0  00000000  00000000  000eec6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f2f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000880  00000000  00000000  000f2fb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  000f3835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008e60 	.word	0x08008e60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08008e60 	.word	0x08008e60

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <App_Config>:
 */

#include "Application.h"

/* Start global function definition */
Config_Bus_t App_Config(Config_HAL_Bus_t Config_HAL_Bus){
 8000f54:	b084      	sub	sp, #16
 8000f56:	b5b0      	push	{r4, r5, r7, lr}
 8000f58:	b0ce      	sub	sp, #312	; 0x138
 8000f5a:	af12      	add	r7, sp, #72	; 0x48
 8000f5c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000f5e:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8000f62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Config_Bus_t Config_Bus;
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);  // Move this later
 8000f66:	2201      	movs	r2, #1
 8000f68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f6c:	481a      	ldr	r0, [pc, #104]	; (8000fd8 <App_Config+0x84>)
 8000f6e:	f002 f985 	bl	800327c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000f72:	20c8      	movs	r0, #200	; 0xc8
 8000f74:	f001 fef4 	bl	8002d60 <HAL_Delay>

	Config_Bus.Config_HAL_Bus = Config_HAL_Bus;
 8000f78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f7c:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8000f80:	2298      	movs	r2, #152	; 0x98
 8000f82:	4618      	mov	r0, r3
 8000f84:	f005 f99e 	bl	80062c4 <memcpy>
	Config_Bus.Config_MPU6050_Bus = Config_MPU6050(Config_HAL_Bus.hi2c1);
 8000f88:	463c      	mov	r4, r7
 8000f8a:	4668      	mov	r0, sp
 8000f8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f90:	2248      	movs	r2, #72	; 0x48
 8000f92:	4619      	mov	r1, r3
 8000f94:	f005 f996 	bl	80062c4 <memcpy>
 8000f98:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000f9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	f000 f8a0 	bl	80010e4 <Config_MPU6050>
 8000fa4:	f107 04cc 	add.w	r4, r7, #204	; 0xcc
 8000fa8:	463d      	mov	r5, r7
 8000faa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb2:	682b      	ldr	r3, [r5, #0]
 8000fb4:	6023      	str	r3, [r4, #0]

	Config_DSP();
 8000fb6:	f000 f87b 	bl	80010b0 <Config_DSP>

	return Config_Bus;
 8000fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fc2:	22bc      	movs	r2, #188	; 0xbc
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f005 f97d 	bl	80062c4 <memcpy>
}
 8000fca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000fcc:	37f0      	adds	r7, #240	; 0xf0
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000fd4:	b004      	add	sp, #16
 8000fd6:	4770      	bx	lr
 8000fd8:	40020800 	.word	0x40020800

08000fdc <App_Main>:

void App_Main(Config_Bus_t Config_Bus){
 8000fdc:	b084      	sub	sp, #16
 8000fde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe0:	b0cb      	sub	sp, #300	; 0x12c
 8000fe2:	af30      	add	r7, sp, #192	; 0xc0
 8000fe4:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8000fe8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HI_Bus_t HI_Bus;
	IP_Bus_t IP_Bus;
	CT_Bus_t CT_Bus;
	OP_Bus_t OP_Bus;

	HI_Bus = IO_HardwareInputs(Config_Bus);
 8000fec:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8000ff0:	4668      	mov	r0, sp
 8000ff2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000ff6:	22b0      	movs	r2, #176	; 0xb0
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f005 f963 	bl	80062c4 <memcpy>
 8000ffe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001002:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001004:	4620      	mov	r0, r4
 8001006:	f000 fee9 	bl	8001ddc <IO_HardwareInputs>
	IP_Bus = PR_InputProcessing(Config_Bus, HI_Bus);
 800100a:	f107 0544 	add.w	r5, r7, #68	; 0x44
 800100e:	ac2c      	add	r4, sp, #176	; 0xb0
 8001010:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001014:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001018:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800101c:	4668      	mov	r0, sp
 800101e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001022:	22b0      	movs	r2, #176	; 0xb0
 8001024:	4619      	mov	r1, r3
 8001026:	f005 f94d 	bl	80062c4 <memcpy>
 800102a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800102e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001030:	4628      	mov	r0, r5
 8001032:	f001 fa7b 	bl	800252c <PR_InputProcessing>
	CT_Bus = CT_Control(IP_Bus);
 8001036:	f107 050c 	add.w	r5, r7, #12
 800103a:	466c      	mov	r4, sp
 800103c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001040:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001044:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001048:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800104c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800104e:	4628      	mov	r0, r5
 8001050:	f000 fa8c 	bl	800156c <CT_Control>
	OP_Bus = PR_OutputProcessing(CT_Bus);
 8001054:	1d3e      	adds	r6, r7, #4
 8001056:	466d      	mov	r5, sp
 8001058:	f107 0418 	add.w	r4, r7, #24
 800105c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800105e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001062:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001064:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001068:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001072:	4630      	mov	r0, r6
 8001074:	f001 fa8d 	bl	8002592 <PR_OutputProcessing>
	IO_HardwareOutputs(Config_Bus, OP_Bus);
 8001078:	aa2b      	add	r2, sp, #172	; 0xac
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001080:	e882 0003 	stmia.w	r2, {r0, r1}
 8001084:	4668      	mov	r0, sp
 8001086:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800108a:	22ac      	movs	r2, #172	; 0xac
 800108c:	4619      	mov	r1, r3
 800108e:	f005 f919 	bl	80062c4 <memcpy>
 8001092:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001096:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001098:	f000 fece 	bl	8001e38 <IO_HardwareOutputs>

	HAL_Delay(3);
 800109c:	2003      	movs	r0, #3
 800109e:	f001 fe5f 	bl	8002d60 <HAL_Delay>
}
 80010a2:	bf00      	nop
 80010a4:	376c      	adds	r7, #108	; 0x6c
 80010a6:	46bd      	mov	sp, r7
 80010a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80010ac:	b004      	add	sp, #16
 80010ae:	4770      	bx	lr

080010b0 <Config_DSP>:

static const float iirAccelCoeffs[IIR_NUM_COEFF] = {0.010432413371093418, 0.020864826742186836, 0.010432413371093418, 1.6909963768874425, -0.7327260303718163};
/*End global variable definitions */


void Config_DSP(void){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df1_init_f32(&S_AccelRoll, IIR_NUM_STAGES, (float32_t *) &iirAccelCoeffs[0], (float32_t *) &FiltAccelRollState[0]);
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <Config_DSP+0x20>)
 80010b6:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <Config_DSP+0x24>)
 80010b8:	2101      	movs	r1, #1
 80010ba:	4807      	ldr	r0, [pc, #28]	; (80010d8 <Config_DSP+0x28>)
 80010bc:	f004 fa00 	bl	80054c0 <arm_biquad_cascade_df1_init_f32>
	arm_biquad_cascade_df1_init_f32(&S_AccelPitch, IIR_NUM_STAGES, (float32_t *) &iirAccelCoeffs[0], (float32_t *) &FiltAccelPitchState[0]);
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <Config_DSP+0x2c>)
 80010c2:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <Config_DSP+0x24>)
 80010c4:	2101      	movs	r1, #1
 80010c6:	4806      	ldr	r0, [pc, #24]	; (80010e0 <Config_DSP+0x30>)
 80010c8:	f004 f9fa 	bl	80054c0 <arm_biquad_cascade_df1_init_f32>
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000214 	.word	0x20000214
 80010d4:	08008eb4 	.word	0x08008eb4
 80010d8:	200001fc 	.word	0x200001fc
 80010dc:	20000224 	.word	0x20000224
 80010e0:	20000208 	.word	0x20000208

080010e4 <Config_MPU6050>:
static MPU6050_IMUSensitivityData_t MPU6050_GetSens(const AFS_SEL_enum_t accelRange, const FS_SEL_enum_t gyroRange);
static MPU6050_IMUOffsetData_t MPU6050_CalibrateOffsets(I2C_HandleTypeDef hi2c1, Config_MPU6050_Bus_t Config_MPU6050_Bus);
/* Start static function prototypes */

/* Start global function definitions */
Config_MPU6050_Bus_t Config_MPU6050(I2C_HandleTypeDef hi2c1){
 80010e4:	b084      	sub	sp, #16
 80010e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010e8:	b0b7      	sub	sp, #220	; 0xdc
 80010ea:	af1c      	add	r7, sp, #112	; 0x70
 80010ec:	6278      	str	r0, [r7, #36]	; 0x24
 80010ee:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80010f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Config_MPU6050_Bus_t Config_MPU6050_Bus;

	MPU6050_Init(hi2c1);
 80010f6:	4668      	mov	r0, sp
 80010f8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80010fc:	2244      	movs	r2, #68	; 0x44
 80010fe:	4619      	mov	r1, r3
 8001100:	f005 f8e0 	bl	80062c4 <memcpy>
 8001104:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001108:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800110a:	f000 f849 	bl	80011a0 <MPU6050_Init>

	Config_MPU6050_Bus.Sensitivity = MPU6050_GetSens(accelRange, gyroRange);
 800110e:	2301      	movs	r3, #1
 8001110:	2201      	movs	r2, #1
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f000 f8c3 	bl	80012a0 <MPU6050_GetSens>
 800111a:	eeb0 7a40 	vmov.f32	s14, s0
 800111e:	eef0 7a60 	vmov.f32	s15, s1
 8001122:	ed87 7a11 	vstr	s14, [r7, #68]	; 0x44
 8001126:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

	Config_MPU6050_Bus.Offsets = (MPU6050_IMUOffsetData_t) {0, 0, 0, 0, 0, 0, 0};
 800112a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]
 800113a:	615a      	str	r2, [r3, #20]
 800113c:	619a      	str	r2, [r3, #24]
	Config_MPU6050_Bus.Offsets = MPU6050_CalibrateOffsets(hi2c1, Config_MPU6050_Bus);
 800113e:	463e      	mov	r6, r7
 8001140:	ad12      	add	r5, sp, #72	; 0x48
 8001142:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800114a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800114c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800114e:	6823      	ldr	r3, [r4, #0]
 8001150:	602b      	str	r3, [r5, #0]
 8001152:	4668      	mov	r0, sp
 8001154:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001158:	2248      	movs	r2, #72	; 0x48
 800115a:	4619      	mov	r1, r3
 800115c:	f005 f8b2 	bl	80062c4 <memcpy>
 8001160:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001164:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001166:	4630      	mov	r0, r6
 8001168:	f000 f902 	bl	8001370 <MPU6050_CalibrateOffsets>
 800116c:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001170:	463d      	mov	r5, r7
 8001172:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001174:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001176:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800117a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return Config_MPU6050_Bus;
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	461d      	mov	r5, r3
 8001182:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001186:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001188:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800118a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800118c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800118e:	6823      	ldr	r3, [r4, #0]
 8001190:	602b      	str	r3, [r5, #0]
}
 8001192:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001194:	376c      	adds	r7, #108	; 0x6c
 8001196:	46bd      	mov	sp, r7
 8001198:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800119c:	b004      	add	sp, #16
 800119e:	4770      	bx	lr

080011a0 <MPU6050_Init>:
/* End global function definitions */

/* Start static function definitions */
static void MPU6050_Init(I2C_HandleTypeDef hi2c1){
 80011a0:	b084      	sub	sp, #16
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b086      	sub	sp, #24
 80011a6:	af04      	add	r7, sp, #16
 80011a8:	f107 0c10 	add.w	ip, r7, #16
 80011ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	static uint8_t regData;
	static uint8_t numReg = 1;

	/* I2C device check */
	// Raise error later
	HAL_StatusTypeDef deviceCheck = HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 1, I2C_TIMEOUT);
 80011b0:	2332      	movs	r3, #50	; 0x32
 80011b2:	2201      	movs	r2, #1
 80011b4:	21d0      	movs	r1, #208	; 0xd0
 80011b6:	f107 0010 	add.w	r0, r7, #16
 80011ba:	f002 fcdd 	bl	8003b78 <HAL_I2C_IsDeviceReady>
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]

	if (deviceCheck != HAL_OK){
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MPU6050_Init+0x2c>
		Error_Handler();
 80011c8:	f001 fb6e 	bl	80028a8 <Error_Handler>
	}

	/* Wake IMU */
	regData = CLKSEL;
 80011cc:	4b32      	ldr	r3, [pc, #200]	; (8001298 <MPU6050_Init+0xf8>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT1_REG, REG_LEN, &regData, numReg, I2C_TIMEOUT);
 80011d2:	4b32      	ldr	r3, [pc, #200]	; (800129c <MPU6050_Init+0xfc>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	2232      	movs	r2, #50	; 0x32
 80011da:	9202      	str	r2, [sp, #8]
 80011dc:	9301      	str	r3, [sp, #4]
 80011de:	4b2e      	ldr	r3, [pc, #184]	; (8001298 <MPU6050_Init+0xf8>)
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2301      	movs	r3, #1
 80011e4:	226b      	movs	r2, #107	; 0x6b
 80011e6:	21d0      	movs	r1, #208	; 0xd0
 80011e8:	f107 0010 	add.w	r0, r7, #16
 80011ec:	f002 f9a4 	bl	8003538 <HAL_I2C_Mem_Write>

	/* Calculate SMPLRT_DIV from desired sample rate */
	regData = SMPLRT_DIV;
 80011f0:	4b29      	ldr	r3, [pc, #164]	; (8001298 <MPU6050_Init+0xf8>)
 80011f2:	2207      	movs	r2, #7
 80011f4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPRT_DIV_REG, REG_LEN, &regData, numReg, I2C_TIMEOUT);
 80011f6:	4b29      	ldr	r3, [pc, #164]	; (800129c <MPU6050_Init+0xfc>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	2232      	movs	r2, #50	; 0x32
 80011fe:	9202      	str	r2, [sp, #8]
 8001200:	9301      	str	r3, [sp, #4]
 8001202:	4b25      	ldr	r3, [pc, #148]	; (8001298 <MPU6050_Init+0xf8>)
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	2301      	movs	r3, #1
 8001208:	2219      	movs	r2, #25
 800120a:	21d0      	movs	r1, #208	; 0xd0
 800120c:	f107 0010 	add.w	r0, r7, #16
 8001210:	f002 f992 	bl	8003538 <HAL_I2C_Mem_Write>

	/* Set gyro config */
	regData = (uint8_t) (gyroRange << 3);
 8001214:	2301      	movs	r3, #1
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <MPU6050_Init+0xf8>)
 800121c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, REG_LEN, &regData, numReg, I2C_TIMEOUT);
 800121e:	4b1f      	ldr	r3, [pc, #124]	; (800129c <MPU6050_Init+0xfc>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b29b      	uxth	r3, r3
 8001224:	2232      	movs	r2, #50	; 0x32
 8001226:	9202      	str	r2, [sp, #8]
 8001228:	9301      	str	r3, [sp, #4]
 800122a:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <MPU6050_Init+0xf8>)
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2301      	movs	r3, #1
 8001230:	221b      	movs	r2, #27
 8001232:	21d0      	movs	r1, #208	; 0xd0
 8001234:	f107 0010 	add.w	r0, r7, #16
 8001238:	f002 f97e 	bl	8003538 <HAL_I2C_Mem_Write>

	/* Set accel config */
	regData = (uint8_t) (accelRange << 3);
 800123c:	2301      	movs	r3, #1
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <MPU6050_Init+0xf8>)
 8001244:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, REG_LEN, &regData, numReg, I2C_TIMEOUT);
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <MPU6050_Init+0xfc>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	b29b      	uxth	r3, r3
 800124c:	2232      	movs	r2, #50	; 0x32
 800124e:	9202      	str	r2, [sp, #8]
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MPU6050_Init+0xf8>)
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	2301      	movs	r3, #1
 8001258:	221c      	movs	r2, #28
 800125a:	21d0      	movs	r1, #208	; 0xd0
 800125c:	f107 0010 	add.w	r0, r7, #16
 8001260:	f002 f96a 	bl	8003538 <HAL_I2C_Mem_Write>

	/*Configure low pass filter*/
	regData = DLPF_CFG;
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <MPU6050_Init+0xf8>)
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG_REG, REG_LEN, &regData, numReg, I2C_TIMEOUT);
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <MPU6050_Init+0xfc>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	b29b      	uxth	r3, r3
 8001270:	2232      	movs	r2, #50	; 0x32
 8001272:	9202      	str	r2, [sp, #8]
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MPU6050_Init+0xf8>)
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2301      	movs	r3, #1
 800127c:	221a      	movs	r2, #26
 800127e:	21d0      	movs	r1, #208	; 0xd0
 8001280:	f107 0010 	add.w	r0, r7, #16
 8001284:	f002 f958 	bl	8003538 <HAL_I2C_Mem_Write>
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001292:	b004      	add	sp, #16
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000234 	.word	0x20000234
 800129c:	20000004 	.word	0x20000004

080012a0 <MPU6050_GetSens>:

static MPU6050_IMUSensitivityData_t MPU6050_GetSens(const AFS_SEL_enum_t accelRange, const FS_SEL_enum_t gyroRange){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	460a      	mov	r2, r1
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	4613      	mov	r3, r2
 80012ae:	73bb      	strb	r3, [r7, #14]
	MPU6050_IMUSensitivityData_t IMUSensitivity;

	/* Determine sensor sensitivity based on sensor range */
	switch (accelRange){
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	d81a      	bhi.n	80012ec <MPU6050_GetSens+0x4c>
 80012b6:	a201      	add	r2, pc, #4	; (adr r2, 80012bc <MPU6050_GetSens+0x1c>)
 80012b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012bc:	080012cd 	.word	0x080012cd
 80012c0:	080012d5 	.word	0x080012d5
 80012c4:	080012dd 	.word	0x080012dd
 80012c8:	080012e5 	.word	0x080012e5
	case g2:
		IMUSensitivity.AccelSens = 16384.0;
 80012cc:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 80012d0:	613b      	str	r3, [r7, #16]
		break;
 80012d2:	e010      	b.n	80012f6 <MPU6050_GetSens+0x56>
	case g4:
		IMUSensitivity.AccelSens = 8192.0;
 80012d4:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 80012d8:	613b      	str	r3, [r7, #16]
		break;
 80012da:	e00c      	b.n	80012f6 <MPU6050_GetSens+0x56>
	case g8:
		IMUSensitivity.AccelSens = 4096.0;
 80012dc:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 80012e0:	613b      	str	r3, [r7, #16]
		break;
 80012e2:	e008      	b.n	80012f6 <MPU6050_GetSens+0x56>
	case g16:
		IMUSensitivity.AccelSens = 2048.0;
 80012e4:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 80012e8:	613b      	str	r3, [r7, #16]
		break;
 80012ea:	e004      	b.n	80012f6 <MPU6050_GetSens+0x56>
	default:
		IMUSensitivity.AccelSens = 0;
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
		Error_Handler();
 80012f2:	f001 fad9 	bl	80028a8 <Error_Handler>
	}

	/* Determine sensor sensitivity based on sensor range */
	switch (gyroRange){
 80012f6:	7bbb      	ldrb	r3, [r7, #14]
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	d817      	bhi.n	800132c <MPU6050_GetSens+0x8c>
 80012fc:	a201      	add	r2, pc, #4	; (adr r2, 8001304 <MPU6050_GetSens+0x64>)
 80012fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001302:	bf00      	nop
 8001304:	08001315 	.word	0x08001315
 8001308:	0800131b 	.word	0x0800131b
 800130c:	08001321 	.word	0x08001321
 8001310:	08001327 	.word	0x08001327
	case w250:
		IMUSensitivity.GyroSens = 131.0;
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <MPU6050_GetSens+0xc0>)
 8001316:	617b      	str	r3, [r7, #20]
		break;
 8001318:	e00d      	b.n	8001336 <MPU6050_GetSens+0x96>
	case w500:
		IMUSensitivity.GyroSens = 65.5;
 800131a:	4b12      	ldr	r3, [pc, #72]	; (8001364 <MPU6050_GetSens+0xc4>)
 800131c:	617b      	str	r3, [r7, #20]
		break;
 800131e:	e00a      	b.n	8001336 <MPU6050_GetSens+0x96>
	case w1000:
		IMUSensitivity.GyroSens = 32.8;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <MPU6050_GetSens+0xc8>)
 8001322:	617b      	str	r3, [r7, #20]
		break;
 8001324:	e007      	b.n	8001336 <MPU6050_GetSens+0x96>
	case w2000:
		IMUSensitivity.GyroSens = 16.4;
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <MPU6050_GetSens+0xcc>)
 8001328:	617b      	str	r3, [r7, #20]
		break;
 800132a:	e004      	b.n	8001336 <MPU6050_GetSens+0x96>
	default:
		IMUSensitivity.GyroSens = 0;
 800132c:	f04f 0300 	mov.w	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
		Error_Handler();
 8001332:	f001 fab9 	bl	80028a8 <Error_Handler>
	}

	return IMUSensitivity;
 8001336:	f107 0318 	add.w	r3, r7, #24
 800133a:	f107 0210 	add.w	r2, r7, #16
 800133e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001342:	e883 0003 	stmia.w	r3, {r0, r1}
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	ee07 2a10 	vmov	s14, r2
 800134e:	ee07 3a90 	vmov	s15, r3
}
 8001352:	eeb0 0a47 	vmov.f32	s0, s14
 8001356:	eef0 0a67 	vmov.f32	s1, s15
 800135a:	3720      	adds	r7, #32
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	43030000 	.word	0x43030000
 8001364:	42830000 	.word	0x42830000
 8001368:	42033333 	.word	0x42033333
 800136c:	41833333 	.word	0x41833333

08001370 <MPU6050_CalibrateOffsets>:

static MPU6050_IMUOffsetData_t MPU6050_CalibrateOffsets(I2C_HandleTypeDef hi2c1, Config_MPU6050_Bus_t Config_MPU6050_Bus){
 8001370:	b084      	sub	sp, #16
 8001372:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001374:	b0ad      	sub	sp, #180	; 0xb4
 8001376:	af12      	add	r7, sp, #72	; 0x48
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	f107 0084 	add.w	r0, r7, #132	; 0x84
 800137e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	MPU6050_IMUOffsetData_t IMUOffsets;
	HI_MPU6050_Bus_t HI_MPU6050_Bus;
	IP_MPU6050_Bus_t IP_MPU6050_Bus;

	uint32_t numSamples = 4000;
 8001382:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001386:	64bb      	str	r3, [r7, #72]	; 0x48

	float sumAx = 0;
 8001388:	f04f 0300 	mov.w	r3, #0
 800138c:	667b      	str	r3, [r7, #100]	; 0x64
	float sumAy = 0;
 800138e:	f04f 0300 	mov.w	r3, #0
 8001392:	663b      	str	r3, [r7, #96]	; 0x60
	float sumAz = 0;
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	65fb      	str	r3, [r7, #92]	; 0x5c
	float sumWx = 0;
 800139a:	f04f 0300 	mov.w	r3, #0
 800139e:	65bb      	str	r3, [r7, #88]	; 0x58
	float sumWy = 0;
 80013a0:	f04f 0300 	mov.w	r3, #0
 80013a4:	657b      	str	r3, [r7, #84]	; 0x54
	float sumWz = 0;
 80013a6:	f04f 0300 	mov.w	r3, #0
 80013aa:	653b      	str	r3, [r7, #80]	; 0x50

	for(uint32_t i = 0; i < numSamples; i++){
 80013ac:	2300      	movs	r3, #0
 80013ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013b0:	e055      	b.n	800145e <MPU6050_CalibrateOffsets+0xee>
		HI_MPU6050_Bus = HI_MPU6050(hi2c1);
 80013b2:	f107 0420 	add.w	r4, r7, #32
 80013b6:	4668      	mov	r0, sp
 80013b8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80013bc:	2248      	movs	r2, #72	; 0x48
 80013be:	4619      	mov	r1, r3
 80013c0:	f004 ff80 	bl	80062c4 <memcpy>
 80013c4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80013c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ca:	4620      	mov	r0, r4
 80013cc:	f000 fd75 	bl	8001eba <HI_MPU6050>
		IP_MPU6050_Bus = IP_MPU6050(HI_MPU6050_Bus, Config_MPU6050_Bus);
 80013d0:	f107 0608 	add.w	r6, r7, #8
 80013d4:	466d      	mov	r5, sp
 80013d6:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 80013da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e2:	6823      	ldr	r3, [r4, #0]
 80013e4:	602b      	str	r3, [r5, #0]
 80013e6:	f107 0320 	add.w	r3, r7, #32
 80013ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ec:	4630      	mov	r0, r6
 80013ee:	f000 fea1 	bl	8002134 <IP_MPU6050>

		sumAx += IP_MPU6050_Bus.accel.XOUT_ms2;
 80013f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80013f6:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80013fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013fe:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		sumAy += IP_MPU6050_Bus.accel.YOUT_ms2;
 8001402:	edd7 7a03 	vldr	s15, [r7, #12]
 8001406:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800140a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800140e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		sumAz += IP_MPU6050_Bus.accel.ZOUT_ms2;
 8001412:	edd7 7a04 	vldr	s15, [r7, #16]
 8001416:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800141a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

		sumWx += IP_MPU6050_Bus.gyro.XOUT_dps;
 8001422:	edd7 7a05 	vldr	s15, [r7, #20]
 8001426:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800142a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800142e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		sumWy += IP_MPU6050_Bus.gyro.YOUT_dps;
 8001432:	edd7 7a06 	vldr	s15, [r7, #24]
 8001436:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800143a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800143e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		sumWz += IP_MPU6050_Bus.gyro.ZOUT_dps;
 8001442:	edd7 7a07 	vldr	s15, [r7, #28]
 8001446:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800144a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800144e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

		HAL_Delay(5);
 8001452:	2005      	movs	r0, #5
 8001454:	f001 fc84 	bl	8002d60 <HAL_Delay>
	for(uint32_t i = 0; i < numSamples; i++){
 8001458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800145a:	3301      	adds	r3, #1
 800145c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800145e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001462:	429a      	cmp	r2, r3
 8001464:	d3a5      	bcc.n	80013b2 <MPU6050_CalibrateOffsets+0x42>
	}

	IMUOffsets.AxOffset = 0 - (sumAx / numSamples);
 8001466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001468:	ee07 3a90 	vmov	s15, r3
 800146c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001470:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8001474:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001478:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001568 <MPU6050_CalibrateOffsets+0x1f8>
 800147c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001480:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	IMUOffsets.AyOffset = 0 - (sumAy / numSamples);
 8001484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001486:	ee07 3a90 	vmov	s15, r3
 800148a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800148e:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8001492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001496:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001568 <MPU6050_CalibrateOffsets+0x1f8>
 800149a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	IMUOffsets.AzOffset = 9.80665 - (sumAz / numSamples);
 80014a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ac:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80014b0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014b4:	ee16 0a90 	vmov	r0, s13
 80014b8:	f7ff f84e 	bl	8000558 <__aeabi_f2d>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	a127      	add	r1, pc, #156	; (adr r1, 8001560 <MPU6050_CalibrateOffsets+0x1f0>)
 80014c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014c6:	f7fe fee7 	bl	8000298 <__aeabi_dsub>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	f7ff fb71 	bl	8000bb8 <__aeabi_d2f>
 80014d6:	4603      	mov	r3, r0
 80014d8:	637b      	str	r3, [r7, #52]	; 0x34

	IMUOffsets.WxOffset = 0 - (sumWx / numSamples);
 80014da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014dc:	ee07 3a90 	vmov	s15, r3
 80014e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014e4:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80014e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ec:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001568 <MPU6050_CalibrateOffsets+0x1f8>
 80014f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	IMUOffsets.WyOffset = 0 - (sumWy / numSamples);
 80014f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014fa:	ee07 3a90 	vmov	s15, r3
 80014fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001502:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800150a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001568 <MPU6050_CalibrateOffsets+0x1f8>
 800150e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001512:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	IMUOffsets.WzOffset = 0 - (sumWz / numSamples);
 8001516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001518:	ee07 3a90 	vmov	s15, r3
 800151c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001520:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8001524:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001528:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001568 <MPU6050_CalibrateOffsets+0x1f8>
 800152c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001530:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	IMUOffsets.SensCalibrated_bool = 1;
 8001534:	2301      	movs	r3, #1
 8001536:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	return IMUOffsets;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	461d      	mov	r5, r3
 800153e:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001544:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001546:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800154a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	376c      	adds	r7, #108	; 0x6c
 8001552:	46bd      	mov	sp, r7
 8001554:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001558:	b004      	add	sp, #16
 800155a:	4770      	bx	lr
 800155c:	f3af 8000 	nop.w
 8001560:	3a92a305 	.word	0x3a92a305
 8001564:	40239d01 	.word	0x40239d01
 8001568:	00000000 	.word	0x00000000

0800156c <CT_Control>:
static VS_Bus_t CT_VirtualSensors(IP_Bus_t IP_Bus);
static CT_Bus_t CT_Controllers(IP_Bus_t IP_Bus, VS_Bus_t VS_Bus);
/* End Static function prototypes */

/* Start global function definitions */
CT_Bus_t CT_Control(IP_Bus_t IP_Bus){
 800156c:	b084      	sub	sp, #16
 800156e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001570:	b0ad      	sub	sp, #180	; 0xb4
 8001572:	af10      	add	r7, sp, #64	; 0x40
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800157a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	VS_Bus_t VS_Bus;
	CT_Bus_t CT_Bus;

	VS_Bus = CT_VirtualSensors(IP_Bus);
 800157e:	f107 0540 	add.w	r5, r7, #64	; 0x40
 8001582:	466c      	mov	r4, sp
 8001584:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001588:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800158c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001590:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001594:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001596:	4628      	mov	r0, r5
 8001598:	f000 f82f 	bl	80015fa <CT_VirtualSensors>
	CT_Bus = CT_Controllers(IP_Bus, VS_Bus);
 800159c:	f107 0608 	add.w	r6, r7, #8
 80015a0:	ad03      	add	r5, sp, #12
 80015a2:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80015a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015b2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80015b6:	466c      	mov	r4, sp
 80015b8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80015c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80015c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80015c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015ca:	4630      	mov	r0, r6
 80015cc:	f000 f84a 	bl	8001664 <CT_Controllers>

	return CT_Bus;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	461d      	mov	r5, r3
 80015d4:	f107 0408 	add.w	r4, r7, #8
 80015d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015e8:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	3774      	adds	r7, #116	; 0x74
 80015f0:	46bd      	mov	sp, r7
 80015f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80015f6:	b004      	add	sp, #16
 80015f8:	4770      	bx	lr

080015fa <CT_VirtualSensors>:
/* End global function definitions */

/* Start Static function definitions */
static VS_Bus_t CT_VirtualSensors(IP_Bus_t IP_Bus){
 80015fa:	b084      	sub	sp, #16
 80015fc:	b5b0      	push	{r4, r5, r7, lr}
 80015fe:	b09e      	sub	sp, #120	; 0x78
 8001600:	af04      	add	r7, sp, #16
 8001602:	6378      	str	r0, [r7, #52]	; 0x34
 8001604:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8001608:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	VS_Bus_t VS_Bus;

	VS_Bus.VS_Orientation_Bus = EstimateOrientation(IP_Bus.IP_MPU6050_Bus);
 800160c:	463d      	mov	r5, r7
 800160e:	466c      	mov	r4, sp
 8001610:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001614:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001618:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800161c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001620:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001622:	4628      	mov	r0, r5
 8001624:	f000 f8f4 	bl	8001810 <EstimateOrientation>
 8001628:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800162c:	463d      	mov	r5, r7
 800162e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001636:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800163a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	return VS_Bus;
 800163e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001640:	461d      	mov	r5, r3
 8001642:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800164a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800164c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800164e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001652:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001656:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001658:	3768      	adds	r7, #104	; 0x68
 800165a:	46bd      	mov	sp, r7
 800165c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001660:	b004      	add	sp, #16
 8001662:	4770      	bx	lr

08001664 <CT_Controllers>:

static CT_Bus_t CT_Controllers(IP_Bus_t IP_Bus, VS_Bus_t VS_Bus){
 8001664:	b084      	sub	sp, #16
 8001666:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001668:	b0a3      	sub	sp, #140	; 0x8c
 800166a:	af10      	add	r7, sp, #64	; 0x40
 800166c:	60f8      	str	r0, [r7, #12]
 800166e:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8001672:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	CT_Bus_t CT_Bus;

	CT_Bus.VS_Bus = VS_Bus;
 8001676:	f107 0410 	add.w	r4, r7, #16
 800167a:	f107 057c 	add.w	r5, r7, #124	; 0x7c
 800167e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001686:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800168a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	CT_Bus.CT_Log_Bus = CT_Logging(IP_Bus.IP_MPU6050_Bus, VS_Bus.VS_Orientation_Bus);
 800168e:	463e      	mov	r6, r7
 8001690:	ad03      	add	r5, sp, #12
 8001692:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8001696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800169a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800169c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800169e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016a2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80016a6:	466c      	mov	r4, sp
 80016a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80016b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ba:	4630      	mov	r0, r6
 80016bc:	f000 f81c 	bl	80016f8 <CT_Logging>
 80016c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016c4:	463a      	mov	r2, r7
 80016c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016ca:	e883 0003 	stmia.w	r3, {r0, r1}

	return CT_Bus;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	461d      	mov	r5, r3
 80016d2:	f107 0410 	add.w	r4, r7, #16
 80016d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016e6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	374c      	adds	r7, #76	; 0x4c
 80016ee:	46bd      	mov	sp, r7
 80016f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80016f4:	b004      	add	sp, #16
 80016f6:	4770      	bx	lr

080016f8 <CT_Logging>:
/* Start Function Prototypes */
static StringPacket_t MakeLogString(uint8_t *msg, uint16_t msgLen, IP_MPU6050_Bus_t IP_MPU6050_Bus, VS_Orientation_Bus_t VS_Orientation_Bus);
/* End Function Prototypes */

/* Start Global Function Definitions */
CT_Log_Bus_t CT_Logging(IP_MPU6050_Bus_t IP_MPU6050_Bus, VS_Orientation_Bus_t VS_Orientation_Bus){
 80016f8:	b084      	sub	sp, #16
 80016fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016fc:	b099      	sub	sp, #100	; 0x64
 80016fe:	af12      	add	r7, sp, #72	; 0x48
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001706:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	StringPacket_t StringPacket;
	CT_Log_Bus_t Log_Bus;

	StringPacket = MakeLogString(msg, msgLen, IP_MPU6050_Bus, VS_Orientation_Bus);
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <CT_Logging+0x74>)
 800170c:	f8b3 c000 	ldrh.w	ip, [r3]
 8001710:	f107 0610 	add.w	r6, r7, #16
 8001714:	ad05      	add	r5, sp, #20
 8001716:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800171a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800171c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800171e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001720:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001722:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001726:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800172a:	466d      	mov	r5, sp
 800172c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001732:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001734:	6823      	ldr	r3, [r4, #0]
 8001736:	602b      	str	r3, [r5, #0]
 8001738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800173a:	4662      	mov	r2, ip
 800173c:	490c      	ldr	r1, [pc, #48]	; (8001770 <CT_Logging+0x78>)
 800173e:	4630      	mov	r0, r6
 8001740:	f000 f818 	bl	8001774 <MakeLogString>

	Log_Bus.pData = StringPacket.pData;
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	60bb      	str	r3, [r7, #8]
	Log_Bus.Size = StringPacket.Size;
 8001748:	8abb      	ldrh	r3, [r7, #20]
 800174a:	81bb      	strh	r3, [r7, #12]

	return Log_Bus;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	461a      	mov	r2, r3
 8001750:	f107 0308 	add.w	r3, r7, #8
 8001754:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001758:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	371c      	adds	r7, #28
 8001760:	46bd      	mov	sp, r7
 8001762:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001766:	b004      	add	sp, #16
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000006 	.word	0x20000006
 8001770:	20000238 	.word	0x20000238

08001774 <MakeLogString>:
/* End Global Function Definitions */

/* Start Static Function Definitions */
static StringPacket_t MakeLogString(uint8_t *msg, uint16_t msgLen, IP_MPU6050_Bus_t IP_MPU6050_Bus, VS_Orientation_Bus_t VS_Orientation_Bus){
 8001774:	b082      	sub	sp, #8
 8001776:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800177a:	b090      	sub	sp, #64	; 0x40
 800177c:	af08      	add	r7, sp, #32
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	647b      	str	r3, [r7, #68]	; 0x44
 8001784:	4613      	mov	r3, r2
 8001786:	80fb      	strh	r3, [r7, #6]
	StringPacket_t StringPacket;

	uint32_t tick = HAL_GetTick();
 8001788:	f001 fade 	bl	8002d48 <HAL_GetTick>
 800178c:	61f8      	str	r0, [r7, #28]

	memset(msg, '\0', msgLen);  // Set unused indexes to null char
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	461a      	mov	r2, r3
 8001792:	2100      	movs	r1, #0
 8001794:	68b8      	ldr	r0, [r7, #8]
 8001796:	f004 fd16 	bl	80061c6 <memset>
//			IP_MPU6050_Bus.accel.XOUT_ms2, IP_MPU6050_Bus.accel.YOUT_ms2, IP_MPU6050_Bus.accel.ZOUT_ms2,
//			IP_MPU6050_Bus.gyro.XOUT_dps, IP_MPU6050_Bus.gyro.YOUT_dps, IP_MPU6050_Bus.gyro.ZOUT_dps);

	sprintf((char*) msg, "TK:%lu,aRoll:%.5f,aRollFilt:%.5f,gRoll:%.5f,compRoll:%.5f\n\r",
			tick,
			VS_Orientation_Bus.AccelOrientation.roll_deg,
 800179a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
	sprintf((char*) msg, "TK:%lu,aRoll:%.5f,aRollFilt:%.5f,gRoll:%.5f,compRoll:%.5f\n\r",
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fedb 	bl	8000558 <__aeabi_f2d>
 80017a2:	4604      	mov	r4, r0
 80017a4:	460d      	mov	r5, r1
			VS_Orientation_Bus.FiltAccelOrientation.roll_deg,
 80017a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
	sprintf((char*) msg, "TK:%lu,aRoll:%.5f,aRollFilt:%.5f,gRoll:%.5f,compRoll:%.5f\n\r",
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe fed5 	bl	8000558 <__aeabi_f2d>
 80017ae:	4680      	mov	r8, r0
 80017b0:	4689      	mov	r9, r1
			VS_Orientation_Bus.GyroOrientation.roll_deg,
 80017b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
	sprintf((char*) msg, "TK:%lu,aRoll:%.5f,aRollFilt:%.5f,gRoll:%.5f,compRoll:%.5f\n\r",
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fecf 	bl	8000558 <__aeabi_f2d>
 80017ba:	4682      	mov	sl, r0
 80017bc:	468b      	mov	fp, r1
			VS_Orientation_Bus.CompFiltOrientation.roll_deg);
 80017be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
	sprintf((char*) msg, "TK:%lu,aRoll:%.5f,aRollFilt:%.5f,gRoll:%.5f,compRoll:%.5f\n\r",
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fec8 	bl	8000558 <__aeabi_f2d>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80017d0:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80017d4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80017d8:	e9cd 4500 	strd	r4, r5, [sp]
 80017dc:	69fa      	ldr	r2, [r7, #28]
 80017de:	490b      	ldr	r1, [pc, #44]	; (800180c <MakeLogString+0x98>)
 80017e0:	68b8      	ldr	r0, [r7, #8]
 80017e2:	f004 fc8d 	bl	8006100 <siprintf>

	StringPacket.pData = msg;
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	617b      	str	r3, [r7, #20]
	StringPacket.Size = msgLen;
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	833b      	strh	r3, [r7, #24]

	return StringPacket;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	461a      	mov	r2, r3
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017fa:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	3720      	adds	r7, #32
 8001802:	46bd      	mov	sp, r7
 8001804:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001808:	b002      	add	sp, #8
 800180a:	4770      	bx	lr
 800180c:	08008e78 	.word	0x08008e78

08001810 <EstimateOrientation>:
static VS_OrientationData_t AccelLowPassFilt(VS_OrientationData_t AccelOrientation);
static VS_OrientationData_t ComplimentaryFilter(VS_OrientationData_t GyroOrientation, VS_OrientationData_t FiltAccelOrientation);
/* End Static Function Prototypes */

/* Start Global Function Definitions */
VS_Orientation_Bus_t EstimateOrientation(IP_MPU6050_Bus_t IP_MPU6050_Bus){
 8001810:	b084      	sub	sp, #16
 8001812:	b5b0      	push	{r4, r5, r7, lr}
 8001814:	b08e      	sub	sp, #56	; 0x38
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800181e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	VS_Orientation_Bus_t VS_Orientation_Bus;

	VS_Orientation_Bus.AccelOrientation = CalcAccelAngle(IP_MPU6050_Bus.accel);
 8001822:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8001826:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800182a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800182e:	eeb0 0a66 	vmov.f32	s0, s13
 8001832:	eef0 0a47 	vmov.f32	s1, s14
 8001836:	eeb0 1a67 	vmov.f32	s2, s15
 800183a:	f000 f885 	bl	8001948 <CalcAccelAngle>
 800183e:	eef0 6a40 	vmov.f32	s13, s0
 8001842:	eeb0 7a60 	vmov.f32	s14, s1
 8001846:	eef0 7a41 	vmov.f32	s15, s2
 800184a:	edc7 6a02 	vstr	s13, [r7, #8]
 800184e:	ed87 7a03 	vstr	s14, [r7, #12]
 8001852:	edc7 7a04 	vstr	s15, [r7, #16]
	VS_Orientation_Bus.GyroOrientation = CalcGyroAngle(IP_MPU6050_Bus.gyro);
 8001856:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800185a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800185e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001862:	eeb0 0a66 	vmov.f32	s0, s13
 8001866:	eef0 0a47 	vmov.f32	s1, s14
 800186a:	eeb0 1a67 	vmov.f32	s2, s15
 800186e:	f000 f905 	bl	8001a7c <CalcGyroAngle>
 8001872:	eef0 6a40 	vmov.f32	s13, s0
 8001876:	eeb0 7a60 	vmov.f32	s14, s1
 800187a:	eef0 7a41 	vmov.f32	s15, s2
 800187e:	edc7 6a05 	vstr	s13, [r7, #20]
 8001882:	ed87 7a06 	vstr	s14, [r7, #24]
 8001886:	edc7 7a07 	vstr	s15, [r7, #28]

	ResetGyroIntegrators(VS_Orientation_Bus.AccelOrientation.roll_deg, VS_Orientation_Bus.AccelOrientation.pitch_deg);
 800188a:	edd7 7a02 	vldr	s15, [r7, #8]
 800188e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001892:	eef0 0a47 	vmov.f32	s1, s14
 8001896:	eeb0 0a67 	vmov.f32	s0, s15
 800189a:	f000 f975 	bl	8001b88 <ResetGyroIntegrators>

	VS_Orientation_Bus.FiltAccelOrientation = AccelLowPassFilt(VS_Orientation_Bus.AccelOrientation);
 800189e:	edd7 6a02 	vldr	s13, [r7, #8]
 80018a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80018a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80018aa:	eeb0 0a66 	vmov.f32	s0, s13
 80018ae:	eef0 0a47 	vmov.f32	s1, s14
 80018b2:	eeb0 1a67 	vmov.f32	s2, s15
 80018b6:	f000 f9e5 	bl	8001c84 <AccelLowPassFilt>
 80018ba:	eef0 6a40 	vmov.f32	s13, s0
 80018be:	eeb0 7a60 	vmov.f32	s14, s1
 80018c2:	eef0 7a41 	vmov.f32	s15, s2
 80018c6:	edc7 6a08 	vstr	s13, [r7, #32]
 80018ca:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 80018ce:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	VS_Orientation_Bus.CompFiltOrientation = ComplimentaryFilter(VS_Orientation_Bus.GyroOrientation, VS_Orientation_Bus.FiltAccelOrientation);
 80018d2:	ed97 5a08 	vldr	s10, [r7, #32]
 80018d6:	edd7 5a09 	vldr	s11, [r7, #36]	; 0x24
 80018da:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80018de:	edd7 6a05 	vldr	s13, [r7, #20]
 80018e2:	ed97 7a06 	vldr	s14, [r7, #24]
 80018e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80018ea:	eef0 1a45 	vmov.f32	s3, s10
 80018ee:	eeb0 2a65 	vmov.f32	s4, s11
 80018f2:	eef0 2a46 	vmov.f32	s5, s12
 80018f6:	eeb0 0a66 	vmov.f32	s0, s13
 80018fa:	eef0 0a47 	vmov.f32	s1, s14
 80018fe:	eeb0 1a67 	vmov.f32	s2, s15
 8001902:	f000 fa05 	bl	8001d10 <ComplimentaryFilter>
 8001906:	eef0 6a40 	vmov.f32	s13, s0
 800190a:	eeb0 7a60 	vmov.f32	s14, s1
 800190e:	eef0 7a41 	vmov.f32	s15, s2
 8001912:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8001916:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 800191a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	return VS_Orientation_Bus;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	461d      	mov	r5, r3
 8001922:	f107 0408 	add.w	r4, r7, #8
 8001926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001928:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800192a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800192c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800192e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001932:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	3738      	adds	r7, #56	; 0x38
 800193a:	46bd      	mov	sp, r7
 800193c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001940:	b004      	add	sp, #16
 8001942:	4770      	bx	lr
 8001944:	0000      	movs	r0, r0
	...

08001948 <CalcAccelAngle>:
/* End Global Function Definitions */

/* Start Static Function Definitions */
static VS_OrientationData_t CalcAccelAngle(MPU6050_AccelData_t MPU6050_AccelData){
 8001948:	b580      	push	{r7, lr}
 800194a:	ed2d 8b02 	vpush	{d8}
 800194e:	b090      	sub	sp, #64	; 0x40
 8001950:	af00      	add	r7, sp, #0
 8001952:	eef0 6a40 	vmov.f32	s13, s0
 8001956:	eeb0 7a60 	vmov.f32	s14, s1
 800195a:	eef0 7a41 	vmov.f32	s15, s2
 800195e:	edc7 6a05 	vstr	s13, [r7, #20]
 8001962:	ed87 7a06 	vstr	s14, [r7, #24]
 8001966:	edc7 7a07 	vstr	s15, [r7, #28]
	VS_OrientationData_t AccelOrientation;

	float roll_rad = atan2f(MPU6050_AccelData.YOUT_ms2, MPU6050_AccelData.ZOUT_ms2);
 800196a:	edd7 7a06 	vldr	s15, [r7, #24]
 800196e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001972:	eef0 0a47 	vmov.f32	s1, s14
 8001976:	eeb0 0a67 	vmov.f32	s0, s15
 800197a:	f006 fd1b 	bl	80083b4 <atan2f>
 800197e:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
	float pitch_rad = atan2f(-1 * MPU6050_AccelData.XOUT_ms2, sqrtf(powf(MPU6050_AccelData.YOUT_ms2, 2) + powf(MPU6050_AccelData.ZOUT_ms2, 2)));
 8001982:	edd7 7a05 	vldr	s15, [r7, #20]
 8001986:	eeb1 8a67 	vneg.f32	s16, s15
 800198a:	edd7 7a06 	vldr	s15, [r7, #24]
 800198e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001992:	eeb0 0a67 	vmov.f32	s0, s15
 8001996:	f006 fd0f 	bl	80083b8 <powf>
 800199a:	eef0 8a40 	vmov.f32	s17, s0
 800199e:	edd7 7a07 	vldr	s15, [r7, #28]
 80019a2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80019a6:	eeb0 0a67 	vmov.f32	s0, s15
 80019aa:	f006 fd05 	bl	80083b8 <powf>
 80019ae:	eef0 7a40 	vmov.f32	s15, s0
 80019b2:	ee78 7aa7 	vadd.f32	s15, s17, s15
 80019b6:	eeb0 0a67 	vmov.f32	s0, s15
 80019ba:	f006 fd55 	bl	8008468 <sqrtf>
 80019be:	eef0 7a40 	vmov.f32	s15, s0
 80019c2:	eef0 0a67 	vmov.f32	s1, s15
 80019c6:	eeb0 0a48 	vmov.f32	s0, s16
 80019ca:	f006 fcf3 	bl	80083b4 <atan2f>
 80019ce:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

	AccelOrientation.roll_deg = roll_rad * 180 / M_PI;
 80019d2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80019d6:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001a78 <CalcAccelAngle+0x130>
 80019da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019de:	ee17 0a90 	vmov	r0, s15
 80019e2:	f7fe fdb9 	bl	8000558 <__aeabi_f2d>
 80019e6:	a322      	add	r3, pc, #136	; (adr r3, 8001a70 <CalcAccelAngle+0x128>)
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	f7fe ff36 	bl	800085c <__aeabi_ddiv>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	f7ff f8de 	bl	8000bb8 <__aeabi_d2f>
 80019fc:	4603      	mov	r3, r0
 80019fe:	623b      	str	r3, [r7, #32]
	AccelOrientation.pitch_deg = pitch_rad * 180 / M_PI;
 8001a00:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001a04:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001a78 <CalcAccelAngle+0x130>
 8001a08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a0c:	ee17 0a90 	vmov	r0, s15
 8001a10:	f7fe fda2 	bl	8000558 <__aeabi_f2d>
 8001a14:	a316      	add	r3, pc, #88	; (adr r3, 8001a70 <CalcAccelAngle+0x128>)
 8001a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1a:	f7fe ff1f 	bl	800085c <__aeabi_ddiv>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4610      	mov	r0, r2
 8001a24:	4619      	mov	r1, r3
 8001a26:	f7ff f8c7 	bl	8000bb8 <__aeabi_d2f>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
	AccelOrientation.yaw_deg = 0;  // No accurate way to calculate this
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	62bb      	str	r3, [r7, #40]	; 0x28

	return AccelOrientation;
 8001a34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a38:	f107 0220 	add.w	r2, r7, #32
 8001a3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a48:	ee06 1a90 	vmov	s13, r1
 8001a4c:	ee07 2a10 	vmov	s14, r2
 8001a50:	ee07 3a90 	vmov	s15, r3
}
 8001a54:	eeb0 0a66 	vmov.f32	s0, s13
 8001a58:	eef0 0a47 	vmov.f32	s1, s14
 8001a5c:	eeb0 1a67 	vmov.f32	s2, s15
 8001a60:	3740      	adds	r7, #64	; 0x40
 8001a62:	46bd      	mov	sp, r7
 8001a64:	ecbd 8b02 	vpop	{d8}
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	f3af 8000 	nop.w
 8001a70:	54442d18 	.word	0x54442d18
 8001a74:	400921fb 	.word	0x400921fb
 8001a78:	43340000 	.word	0x43340000

08001a7c <CalcGyroAngle>:

static VS_OrientationData_t CalcGyroAngle(MPU6050_GyroData_t MPU6050_GyroData){
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b090      	sub	sp, #64	; 0x40
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	eef0 6a40 	vmov.f32	s13, s0
 8001a86:	eeb0 7a60 	vmov.f32	s14, s1
 8001a8a:	eef0 7a41 	vmov.f32	s15, s2
 8001a8e:	edc7 6a05 	vstr	s13, [r7, #20]
 8001a92:	ed87 7a06 	vstr	s14, [r7, #24]
 8001a96:	edc7 7a07 	vstr	s15, [r7, #28]
	VS_OrientationData_t GyroOrientation;
	uint32_t currentTick = HAL_GetTick();
 8001a9a:	f001 f955 	bl	8002d48 <HAL_GetTick>
 8001a9e:	63f8      	str	r0, [r7, #60]	; 0x3c
	float dt = ((float) currentTick - (float) lastTick) / 1000;
 8001aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aa2:	ee07 3a90 	vmov	s15, r3
 8001aa6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001aaa:	4b31      	ldr	r3, [pc, #196]	; (8001b70 <CalcGyroAngle+0xf4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	ee07 3a90 	vmov	s15, r3
 8001ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ab6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001aba:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001b74 <CalcGyroAngle+0xf8>
 8001abe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ac2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	if(resetGyroRoll_bool){
 8001ac6:	4b2c      	ldr	r3, [pc, #176]	; (8001b78 <CalcGyroAngle+0xfc>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d006      	beq.n	8001adc <CalcGyroAngle+0x60>
		lastRollAng_deg = 0;
 8001ace:	4b2b      	ldr	r3, [pc, #172]	; (8001b7c <CalcGyroAngle+0x100>)
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
		resetGyroRoll_bool = 0;
 8001ad6:	4b28      	ldr	r3, [pc, #160]	; (8001b78 <CalcGyroAngle+0xfc>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
	}

	if(resetGyroPitch_bool){
 8001adc:	4b28      	ldr	r3, [pc, #160]	; (8001b80 <CalcGyroAngle+0x104>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d006      	beq.n	8001af2 <CalcGyroAngle+0x76>
		lastPitchAng_deg = 0;
 8001ae4:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <CalcGyroAngle+0x108>)
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
		resetGyroPitch_bool = 0;
 8001aec:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <CalcGyroAngle+0x104>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]
	}

	GyroOrientation.roll_deg = lastRollAng_deg + MPU6050_GyroData.XOUT_dps * dt;
 8001af2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001af6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001afa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001afe:	4b1f      	ldr	r3, [pc, #124]	; (8001b7c <CalcGyroAngle+0x100>)
 8001b00:	edd3 7a00 	vldr	s15, [r3]
 8001b04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b08:	edc7 7a08 	vstr	s15, [r7, #32]
	GyroOrientation.pitch_deg = lastPitchAng_deg + MPU6050_GyroData.YOUT_dps * dt;
 8001b0c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b10:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001b14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b18:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <CalcGyroAngle+0x108>)
 8001b1a:	edd3 7a00 	vldr	s15, [r3]
 8001b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b22:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	GyroOrientation.yaw_deg = 0;  // No accurate way to calculate this
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	62bb      	str	r3, [r7, #40]	; 0x28

	lastTick = currentTick;
 8001b2c:	4a10      	ldr	r2, [pc, #64]	; (8001b70 <CalcGyroAngle+0xf4>)
 8001b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b30:	6013      	str	r3, [r2, #0]
	lastRollAng_deg = GyroOrientation.roll_deg;
 8001b32:	6a3b      	ldr	r3, [r7, #32]
 8001b34:	4a11      	ldr	r2, [pc, #68]	; (8001b7c <CalcGyroAngle+0x100>)
 8001b36:	6013      	str	r3, [r2, #0]
	lastPitchAng_deg = GyroOrientation.pitch_deg;
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	4a12      	ldr	r2, [pc, #72]	; (8001b84 <CalcGyroAngle+0x108>)
 8001b3c:	6013      	str	r3, [r2, #0]

	return GyroOrientation;
 8001b3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b42:	f107 0220 	add.w	r2, r7, #32
 8001b46:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b52:	ee06 1a90 	vmov	s13, r1
 8001b56:	ee07 2a10 	vmov	s14, r2
 8001b5a:	ee07 3a90 	vmov	s15, r3
}
 8001b5e:	eeb0 0a66 	vmov.f32	s0, s13
 8001b62:	eef0 0a47 	vmov.f32	s1, s14
 8001b66:	eeb0 1a67 	vmov.f32	s2, s15
 8001b6a:	3740      	adds	r7, #64	; 0x40
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	2000029c 	.word	0x2000029c
 8001b74:	447a0000 	.word	0x447a0000
 8001b78:	20000008 	.word	0x20000008
 8001b7c:	200002a0 	.word	0x200002a0
 8001b80:	20000009 	.word	0x20000009
 8001b84:	200002a4 	.word	0x200002a4

08001b88 <ResetGyroIntegrators>:

static void ResetGyroIntegrators(float accelRoll_deg, float accelPitch_deg){
 8001b88:	b480      	push	{r7}
 8001b8a:	b087      	sub	sp, #28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b92:	edc7 0a00 	vstr	s1, [r7]
	// Reset gyro integrators if accel values are near zero for X consecutive cycles

	float zeroAccelTolerance_deg = 0.01;
 8001b96:	4b36      	ldr	r3, [pc, #216]	; (8001c70 <ResetGyroIntegrators+0xe8>)
 8001b98:	617b      	str	r3, [r7, #20]
	float zeroAccelAngle_deg = 0;  // Angle of system when integrator can be reset
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	613b      	str	r3, [r7, #16]
	uint8_t zeroAccelCntThreshold = 5;
 8001ba0:	2305      	movs	r3, #5
 8001ba2:	73fb      	strb	r3, [r7, #15]

	float zeroAccelThreshold = zeroAccelAngle_deg + zeroAccelTolerance_deg;
 8001ba4:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ba8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb0:	edc7 7a02 	vstr	s15, [r7, #8]
	if (accelRoll_deg < zeroAccelThreshold && accelRoll_deg > -1 * zeroAccelThreshold){
 8001bb4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc4:	d510      	bpl.n	8001be8 <ResetGyroIntegrators+0x60>
 8001bc6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bca:	eef1 7a67 	vneg.f32	s15, s15
 8001bce:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bda:	dd05      	ble.n	8001be8 <ResetGyroIntegrators+0x60>
		zeroAccelRollCount++;
 8001bdc:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <ResetGyroIntegrators+0xec>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	3301      	adds	r3, #1
 8001be2:	4a24      	ldr	r2, [pc, #144]	; (8001c74 <ResetGyroIntegrators+0xec>)
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e002      	b.n	8001bee <ResetGyroIntegrators+0x66>
	}else{
		zeroAccelRollCount = 0;
 8001be8:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <ResetGyroIntegrators+0xec>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
	}

	if (accelPitch_deg < zeroAccelThreshold && accelPitch_deg > -1 * zeroAccelThreshold){
 8001bee:	ed97 7a00 	vldr	s14, [r7]
 8001bf2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfe:	d510      	bpl.n	8001c22 <ResetGyroIntegrators+0x9a>
 8001c00:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c04:	eef1 7a67 	vneg.f32	s15, s15
 8001c08:	ed97 7a00 	vldr	s14, [r7]
 8001c0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c14:	dd05      	ble.n	8001c22 <ResetGyroIntegrators+0x9a>
		zeroAccelPitchCount++;
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <ResetGyroIntegrators+0xf0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	4a16      	ldr	r2, [pc, #88]	; (8001c78 <ResetGyroIntegrators+0xf0>)
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	e002      	b.n	8001c28 <ResetGyroIntegrators+0xa0>
	}else{
		zeroAccelPitchCount = 0;
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <ResetGyroIntegrators+0xf0>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
	}

	if (zeroAccelRollCount == zeroAccelCntThreshold){
 8001c28:	7bfa      	ldrb	r2, [r7, #15]
 8001c2a:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <ResetGyroIntegrators+0xec>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d106      	bne.n	8001c40 <ResetGyroIntegrators+0xb8>
		resetGyroRoll_bool = 1;
 8001c32:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <ResetGyroIntegrators+0xf4>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	701a      	strb	r2, [r3, #0]
		zeroAccelRollCount = 0;
 8001c38:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <ResetGyroIntegrators+0xec>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	e002      	b.n	8001c46 <ResetGyroIntegrators+0xbe>
	}else{
		resetGyroRoll_bool = 0;
 8001c40:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <ResetGyroIntegrators+0xf4>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
	}

	if (zeroAccelPitchCount == zeroAccelCntThreshold){
 8001c46:	7bfa      	ldrb	r2, [r7, #15]
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <ResetGyroIntegrators+0xf0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d106      	bne.n	8001c5e <ResetGyroIntegrators+0xd6>
		resetGyroPitch_bool = 1;
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <ResetGyroIntegrators+0xf8>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	701a      	strb	r2, [r3, #0]
		zeroAccelPitchCount = 0;
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <ResetGyroIntegrators+0xf0>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
	}else{
		resetGyroPitch_bool = 0;
	}
}
 8001c5c:	e002      	b.n	8001c64 <ResetGyroIntegrators+0xdc>
		resetGyroPitch_bool = 0;
 8001c5e:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <ResetGyroIntegrators+0xf8>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
}
 8001c64:	bf00      	nop
 8001c66:	371c      	adds	r7, #28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	3c23d70a 	.word	0x3c23d70a
 8001c74:	20000294 	.word	0x20000294
 8001c78:	20000298 	.word	0x20000298
 8001c7c:	20000008 	.word	0x20000008
 8001c80:	20000009 	.word	0x20000009

08001c84 <AccelLowPassFilt>:

static VS_OrientationData_t AccelLowPassFilt(VS_OrientationData_t AccelOrientation){
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08e      	sub	sp, #56	; 0x38
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	eef0 6a40 	vmov.f32	s13, s0
 8001c8e:	eeb0 7a60 	vmov.f32	s14, s1
 8001c92:	eef0 7a41 	vmov.f32	s15, s2
 8001c96:	edc7 6a05 	vstr	s13, [r7, #20]
 8001c9a:	ed87 7a06 	vstr	s14, [r7, #24]
 8001c9e:	edc7 7a07 	vstr	s15, [r7, #28]
	VS_OrientationData_t FiltAccelOrientation;

	arm_biquad_cascade_df1_f32(&S_AccelRoll, &AccelOrientation.roll_deg, &FiltAccelOrientation.roll_deg, blockSize);
 8001ca2:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <AccelLowPassFilt+0x80>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f107 0220 	add.w	r2, r7, #32
 8001caa:	f107 0114 	add.w	r1, r7, #20
 8001cae:	4816      	ldr	r0, [pc, #88]	; (8001d08 <AccelLowPassFilt+0x84>)
 8001cb0:	f003 fc12 	bl	80054d8 <arm_biquad_cascade_df1_f32>
	arm_biquad_cascade_df1_f32(&S_AccelPitch, &AccelOrientation.pitch_deg, &FiltAccelOrientation.pitch_deg, blockSize);
 8001cb4:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <AccelLowPassFilt+0x80>)
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	f107 0320 	add.w	r3, r7, #32
 8001cbc:	1d1a      	adds	r2, r3, #4
 8001cbe:	f107 0314 	add.w	r3, r7, #20
 8001cc2:	1d19      	adds	r1, r3, #4
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	4811      	ldr	r0, [pc, #68]	; (8001d0c <AccelLowPassFilt+0x88>)
 8001cc8:	f003 fc06 	bl	80054d8 <arm_biquad_cascade_df1_f32>

	FiltAccelOrientation.yaw_deg = 0;
 8001ccc:	f04f 0300 	mov.w	r3, #0
 8001cd0:	62bb      	str	r3, [r7, #40]	; 0x28

	return FiltAccelOrientation;
 8001cd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cd6:	f107 0220 	add.w	r2, r7, #32
 8001cda:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cdc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ce0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ce2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce6:	ee06 1a90 	vmov	s13, r1
 8001cea:	ee07 2a10 	vmov	s14, r2
 8001cee:	ee07 3a90 	vmov	s15, r3
}
 8001cf2:	eeb0 0a66 	vmov.f32	s0, s13
 8001cf6:	eef0 0a47 	vmov.f32	s1, s14
 8001cfa:	eeb0 1a67 	vmov.f32	s2, s15
 8001cfe:	3738      	adds	r7, #56	; 0x38
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000000 	.word	0x20000000
 8001d08:	200001fc 	.word	0x200001fc
 8001d0c:	20000208 	.word	0x20000208

08001d10 <ComplimentaryFilter>:

static VS_OrientationData_t ComplimentaryFilter(VS_OrientationData_t GyroOrientation, VS_OrientationData_t FiltAccelOrientation){
 8001d10:	b480      	push	{r7}
 8001d12:	b093      	sub	sp, #76	; 0x4c
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	eeb0 5a40 	vmov.f32	s10, s0
 8001d1a:	eef0 5a60 	vmov.f32	s11, s1
 8001d1e:	eeb0 6a41 	vmov.f32	s12, s2
 8001d22:	eef0 6a61 	vmov.f32	s13, s3
 8001d26:	eeb0 7a42 	vmov.f32	s14, s4
 8001d2a:	eef0 7a62 	vmov.f32	s15, s5
 8001d2e:	ed87 5a07 	vstr	s10, [r7, #28]
 8001d32:	edc7 5a08 	vstr	s11, [r7, #32]
 8001d36:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001d3a:	edc7 6a04 	vstr	s13, [r7, #16]
 8001d3e:	ed87 7a05 	vstr	s14, [r7, #20]
 8001d42:	edc7 7a06 	vstr	s15, [r7, #24]
	VS_OrientationData_t CompFiltOrientation;

	float alpha = .90;
 8001d46:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <ComplimentaryFilter+0xc8>)
 8001d48:	647b      	str	r3, [r7, #68]	; 0x44

	CompFiltOrientation.roll_deg = GyroOrientation.roll_deg * alpha + FiltAccelOrientation.roll_deg * (1 - alpha);
 8001d4a:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d4e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d56:	edd7 6a04 	vldr	s13, [r7, #16]
 8001d5a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001d5e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d62:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d6e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	CompFiltOrientation.pitch_deg = GyroOrientation.pitch_deg * alpha + FiltAccelOrientation.pitch_deg * (1 - alpha);
 8001d72:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d76:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d7e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001d82:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001d86:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d8a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d96:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	CompFiltOrientation.yaw_deg = 0;
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	637b      	str	r3, [r7, #52]	; 0x34

	return CompFiltOrientation;
 8001da0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001da4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001da8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001daa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001dae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001db0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001db4:	ee06 1a90 	vmov	s13, r1
 8001db8:	ee07 2a10 	vmov	s14, r2
 8001dbc:	ee07 3a90 	vmov	s15, r3
}
 8001dc0:	eeb0 0a66 	vmov.f32	s0, s13
 8001dc4:	eef0 0a47 	vmov.f32	s1, s14
 8001dc8:	eeb0 1a67 	vmov.f32	s2, s15
 8001dcc:	374c      	adds	r7, #76	; 0x4c
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	3f666666 	.word	0x3f666666

08001ddc <IO_HardwareInputs>:
 *      Author: aloehr
 */
#include "IO.h"

/* Start global function definitions */
HI_Bus_t IO_HardwareInputs(Config_Bus_t Config_Bus){
 8001ddc:	b084      	sub	sp, #16
 8001dde:	b590      	push	{r4, r7, lr}
 8001de0:	b09d      	sub	sp, #116	; 0x74
 8001de2:	af12      	add	r7, sp, #72	; 0x48
 8001de4:	6178      	str	r0, [r7, #20]
 8001de6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001dea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HI_Bus_t HI_Bus;

	HI_Bus.HI_MPU6050_Bus = HI_MPU6050(Config_Bus.Config_HAL_Bus.hi2c1);
 8001dee:	463c      	mov	r4, r7
 8001df0:	4668      	mov	r0, sp
 8001df2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001df6:	2248      	movs	r2, #72	; 0x48
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f004 fa63 	bl	80062c4 <memcpy>
 8001dfe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e04:	4620      	mov	r0, r4
 8001e06:	f000 f858 	bl	8001eba <HI_MPU6050>
 8001e0a:	f107 031c 	add.w	r3, r7, #28
 8001e0e:	463a      	mov	r2, r7
 8001e10:	6810      	ldr	r0, [r2, #0]
 8001e12:	6851      	ldr	r1, [r2, #4]
 8001e14:	6892      	ldr	r2, [r2, #8]
 8001e16:	c307      	stmia	r3!, {r0, r1, r2}

	return HI_Bus;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	461c      	mov	r4, r3
 8001e1c:	f107 031c 	add.w	r3, r7, #28
 8001e20:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001e22:	6020      	str	r0, [r4, #0]
 8001e24:	6061      	str	r1, [r4, #4]
 8001e26:	60a2      	str	r2, [r4, #8]
}
 8001e28:	6978      	ldr	r0, [r7, #20]
 8001e2a:	372c      	adds	r7, #44	; 0x2c
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001e32:	b004      	add	sp, #16
 8001e34:	4770      	bx	lr
	...

08001e38 <IO_HardwareOutputs>:

void IO_HardwareOutputs(Config_Bus_t Config_Bus, OP_Bus_t OP_Bus){
 8001e38:	b084      	sub	sp, #16
 8001e3a:	b5b0      	push	{r4, r5, r7, lr}
 8001e3c:	b090      	sub	sp, #64	; 0x40
 8001e3e:	af10      	add	r7, sp, #64	; 0x40
 8001e40:	f107 0410 	add.w	r4, r7, #16
 8001e44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HO_HCO5(Config_Bus.Config_HAL_Bus.huart2, OP_Bus.OP_HC05_Bus.pData, OP_Bus.OP_HC05_Bus.Size);
 8001e48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e4c:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8001e50:	920e      	str	r2, [sp, #56]	; 0x38
 8001e52:	930d      	str	r3, [sp, #52]	; 0x34
 8001e54:	466d      	mov	r5, sp
 8001e56:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001e5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e66:	6823      	ldr	r3, [r4, #0]
 8001e68:	602b      	str	r3, [r5, #0]
 8001e6a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e70:	f000 f80e 	bl	8001e90 <HO_HCO5>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // Move this later
 8001e74:	2200      	movs	r2, #0
 8001e76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e7a:	4804      	ldr	r0, [pc, #16]	; (8001e8c <IO_HardwareOutputs+0x54>)
 8001e7c:	f001 f9fe 	bl	800327c <HAL_GPIO_WritePin>
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001e88:	b004      	add	sp, #16
 8001e8a:	4770      	bx	lr
 8001e8c:	40020800 	.word	0x40020800

08001e90 <HO_HCO5>:
/* Start Defines */
#define UART_TIMEOUT 50 //MS
/* End Defines */

/* Start Global Function Definitions */
void HO_HCO5(UART_HandleTypeDef huart, const uint8_t *pData, uint16_t Size){
 8001e90:	b084      	sub	sp, #16
 8001e92:	b580      	push	{r7, lr}
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	f107 0c08 	add.w	ip, r7, #8
 8001e9a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart, pData, Size, (uint32_t) UART_TIMEOUT);
 8001e9e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001ea2:	2332      	movs	r3, #50	; 0x32
 8001ea4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001ea6:	f107 0008 	add.w	r0, r7, #8
 8001eaa:	f002 ff94 	bl	8004dd6 <HAL_UART_Transmit>
}
 8001eae:	bf00      	nop
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001eb6:	b004      	add	sp, #16
 8001eb8:	4770      	bx	lr

08001eba <HI_MPU6050>:
static MPU6050_RawIMUDataSet_t MPU6050_GetRawAccel(I2C_HandleTypeDef hi2c1);
static MPU6050_RawIMUDataSet_t MPU6050_GetRawGyro(I2C_HandleTypeDef hi2c1);
/* End function prototypes */

/* Start global function definitions */
HI_MPU6050_Bus_t HI_MPU6050(I2C_HandleTypeDef hi2c1){
 8001eba:	b084      	sub	sp, #16
 8001ebc:	b590      	push	{r4, r7, lr}
 8001ebe:	b09b      	sub	sp, #108	; 0x6c
 8001ec0:	af12      	add	r7, sp, #72	; 0x48
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001ec8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HI_MPU6050_Bus_t HI_MPU6050_Bus;

	HI_MPU6050_Bus.RawAccel = MPU6050_GetRawAccel(hi2c1);
 8001ecc:	463c      	mov	r4, r7
 8001ece:	4668      	mov	r0, sp
 8001ed0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ed4:	2248      	movs	r2, #72	; 0x48
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f004 f9f4 	bl	80062c4 <memcpy>
 8001edc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ee0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	f000 f82b 	bl	8001f3e <MPU6050_GetRawAccel>
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	463a      	mov	r2, r7
 8001eee:	6810      	ldr	r0, [r2, #0]
 8001ef0:	6018      	str	r0, [r3, #0]
 8001ef2:	8892      	ldrh	r2, [r2, #4]
 8001ef4:	809a      	strh	r2, [r3, #4]
	HI_MPU6050_Bus.RawGyro = MPU6050_GetRawGyro(hi2c1);
 8001ef6:	463c      	mov	r4, r7
 8001ef8:	4668      	mov	r0, sp
 8001efa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001efe:	2248      	movs	r2, #72	; 0x48
 8001f00:	4619      	mov	r1, r3
 8001f02:	f004 f9df 	bl	80062c4 <memcpy>
 8001f06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	f000 f887 	bl	8002020 <MPU6050_GetRawGyro>
 8001f12:	f107 031a 	add.w	r3, r7, #26
 8001f16:	463a      	mov	r2, r7
 8001f18:	6811      	ldr	r1, [r2, #0]
 8001f1a:	6019      	str	r1, [r3, #0]
 8001f1c:	8892      	ldrh	r2, [r2, #4]
 8001f1e:	809a      	strh	r2, [r3, #4]

	return HI_MPU6050_Bus;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	461c      	mov	r4, r3
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001f2a:	6020      	str	r0, [r4, #0]
 8001f2c:	6061      	str	r1, [r4, #4]
 8001f2e:	60a2      	str	r2, [r4, #8]
}
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	3724      	adds	r7, #36	; 0x24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001f3a:	b004      	add	sp, #16
 8001f3c:	4770      	bx	lr

08001f3e <MPU6050_GetRawAccel>:
/* End global function definitions */

/* Start static function definitions */
static MPU6050_RawIMUDataSet_t MPU6050_GetRawAccel(I2C_HandleTypeDef hi2c1){
 8001f3e:	b084      	sub	sp, #16
 8001f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f44:	b08d      	sub	sp, #52	; 0x34
 8001f46:	af04      	add	r7, sp, #16
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001f4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001f52:	466b      	mov	r3, sp
 8001f54:	461e      	mov	r6, r3
	MPU6050_RawIMUDataSet_t RawAccel;
	uint8_t	numReg = 6;
 8001f56:	2306      	movs	r3, #6
 8001f58:	77fb      	strb	r3, [r7, #31]
	uint8_t regData[numReg];
 8001f5a:	7ff9      	ldrb	r1, [r7, #31]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	61bb      	str	r3, [r7, #24]
 8001f62:	b2cb      	uxtb	r3, r1
 8001f64:	2200      	movs	r2, #0
 8001f66:	4698      	mov	r8, r3
 8001f68:	4691      	mov	r9, r2
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f7e:	b2cb      	uxtb	r3, r1
 8001f80:	2200      	movs	r2, #0
 8001f82:	461c      	mov	r4, r3
 8001f84:	4615      	mov	r5, r2
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	f04f 0300 	mov.w	r3, #0
 8001f8e:	00eb      	lsls	r3, r5, #3
 8001f90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f94:	00e2      	lsls	r2, r4, #3
 8001f96:	460b      	mov	r3, r1
 8001f98:	3307      	adds	r3, #7
 8001f9a:	08db      	lsrs	r3, r3, #3
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	ebad 0d03 	sub.w	sp, sp, r3
 8001fa2:	ab04      	add	r3, sp, #16
 8001fa4:	3300      	adds	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]

	/* Read accel measurement registers and store in regData array */
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_OUT_START_REG, REG_LEN, (uint8_t*) &regData, numReg, I2C_TIMEOUT);
 8001fa8:	7ffb      	ldrb	r3, [r7, #31]
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001fb0:	2232      	movs	r2, #50	; 0x32
 8001fb2:	9202      	str	r2, [sp, #8]
 8001fb4:	9301      	str	r3, [sp, #4]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	2301      	movs	r3, #1
 8001fbc:	223b      	movs	r2, #59	; 0x3b
 8001fbe:	21d0      	movs	r1, #208	; 0xd0
 8001fc0:	f001 fbb4 	bl	800372c <HAL_I2C_Mem_Read>

	/* Combine high and low bits to 16 bit integer, update struct contents*/
	RawAccel.XOUT_na = (int16_t) ((regData[0] << 8) | (regData[1]));
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	021b      	lsls	r3, r3, #8
 8001fca:	b21a      	sxth	r2, r3
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	785b      	ldrb	r3, [r3, #1]
 8001fd0:	b21b      	sxth	r3, r3
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	b21b      	sxth	r3, r3
 8001fd6:	81bb      	strh	r3, [r7, #12]
	RawAccel.YOUT_na = (int16_t) ((regData[2] << 8) | (regData[3]));
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	789b      	ldrb	r3, [r3, #2]
 8001fdc:	021b      	lsls	r3, r3, #8
 8001fde:	b21a      	sxth	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	78db      	ldrb	r3, [r3, #3]
 8001fe4:	b21b      	sxth	r3, r3
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	b21b      	sxth	r3, r3
 8001fea:	81fb      	strh	r3, [r7, #14]
	RawAccel.ZOUT_na = (int16_t) ((regData[4] << 8) | (regData[5]));
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	791b      	ldrb	r3, [r3, #4]
 8001ff0:	021b      	lsls	r3, r3, #8
 8001ff2:	b21a      	sxth	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	795b      	ldrb	r3, [r3, #5]
 8001ff8:	b21b      	sxth	r3, r3
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	b21b      	sxth	r3, r3
 8001ffe:	823b      	strh	r3, [r7, #16]

	/* Return RawAccel struct*/
	return RawAccel;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	461a      	mov	r2, r3
 8002004:	f107 030c 	add.w	r3, r7, #12
 8002008:	6818      	ldr	r0, [r3, #0]
 800200a:	6010      	str	r0, [r2, #0]
 800200c:	889b      	ldrh	r3, [r3, #4]
 800200e:	8093      	strh	r3, [r2, #4]
 8002010:	46b5      	mov	sp, r6
}
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	3724      	adds	r7, #36	; 0x24
 8002016:	46bd      	mov	sp, r7
 8002018:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800201c:	b004      	add	sp, #16
 800201e:	4770      	bx	lr

08002020 <MPU6050_GetRawGyro>:

static MPU6050_RawIMUDataSet_t MPU6050_GetRawGyro(I2C_HandleTypeDef hi2c1){
 8002020:	b084      	sub	sp, #16
 8002022:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002026:	b08d      	sub	sp, #52	; 0x34
 8002028:	af04      	add	r7, sp, #16
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002030:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002034:	466b      	mov	r3, sp
 8002036:	461e      	mov	r6, r3
	MPU6050_RawIMUDataSet_t RawGyro;
	uint8_t	numReg = 6;
 8002038:	2306      	movs	r3, #6
 800203a:	77fb      	strb	r3, [r7, #31]
	uint8_t regData[numReg];
 800203c:	7ff9      	ldrb	r1, [r7, #31]
 800203e:	460b      	mov	r3, r1
 8002040:	3b01      	subs	r3, #1
 8002042:	61bb      	str	r3, [r7, #24]
 8002044:	b2cb      	uxtb	r3, r1
 8002046:	2200      	movs	r2, #0
 8002048:	4698      	mov	r8, r3
 800204a:	4691      	mov	r9, r2
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002058:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800205c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002060:	b2cb      	uxtb	r3, r1
 8002062:	2200      	movs	r2, #0
 8002064:	461c      	mov	r4, r3
 8002066:	4615      	mov	r5, r2
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	f04f 0300 	mov.w	r3, #0
 8002070:	00eb      	lsls	r3, r5, #3
 8002072:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002076:	00e2      	lsls	r2, r4, #3
 8002078:	460b      	mov	r3, r1
 800207a:	3307      	adds	r3, #7
 800207c:	08db      	lsrs	r3, r3, #3
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	ebad 0d03 	sub.w	sp, sp, r3
 8002084:	ab04      	add	r3, sp, #16
 8002086:	3300      	adds	r3, #0
 8002088:	617b      	str	r3, [r7, #20]

	/* Read gyro measurement registers and store in regData array */
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_OUT_START_REG, REG_LEN, (uint8_t*) &regData, numReg, I2C_TIMEOUT);
 800208a:	7ffb      	ldrb	r3, [r7, #31]
 800208c:	b29b      	uxth	r3, r3
 800208e:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002092:	2232      	movs	r2, #50	; 0x32
 8002094:	9202      	str	r2, [sp, #8]
 8002096:	9301      	str	r3, [sp, #4]
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	2301      	movs	r3, #1
 800209e:	2243      	movs	r2, #67	; 0x43
 80020a0:	21d0      	movs	r1, #208	; 0xd0
 80020a2:	f001 fb43 	bl	800372c <HAL_I2C_Mem_Read>

	/* Combine high and low bits to 16 bit integer, update struct contents*/
	RawGyro.XOUT_na = (int16_t) ((regData[0] << 8) | (regData[1]));
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	021b      	lsls	r3, r3, #8
 80020ac:	b21a      	sxth	r2, r3
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	785b      	ldrb	r3, [r3, #1]
 80020b2:	b21b      	sxth	r3, r3
 80020b4:	4313      	orrs	r3, r2
 80020b6:	b21b      	sxth	r3, r3
 80020b8:	81bb      	strh	r3, [r7, #12]
	RawGyro.YOUT_na = (int16_t) ((regData[2] << 8) | (regData[3]));
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	789b      	ldrb	r3, [r3, #2]
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	b21a      	sxth	r2, r3
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	78db      	ldrb	r3, [r3, #3]
 80020c6:	b21b      	sxth	r3, r3
 80020c8:	4313      	orrs	r3, r2
 80020ca:	b21b      	sxth	r3, r3
 80020cc:	81fb      	strh	r3, [r7, #14]
	RawGyro.ZOUT_na = (int16_t) ((regData[4] << 8) | (regData[5]));
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	791b      	ldrb	r3, [r3, #4]
 80020d2:	021b      	lsls	r3, r3, #8
 80020d4:	b21a      	sxth	r2, r3
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	795b      	ldrb	r3, [r3, #5]
 80020da:	b21b      	sxth	r3, r3
 80020dc:	4313      	orrs	r3, r2
 80020de:	b21b      	sxth	r3, r3
 80020e0:	823b      	strh	r3, [r7, #16]

	/* Return RawGyro struct*/
	return RawGyro;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	461a      	mov	r2, r3
 80020e6:	f107 030c 	add.w	r3, r7, #12
 80020ea:	6818      	ldr	r0, [r3, #0]
 80020ec:	6010      	str	r0, [r2, #0]
 80020ee:	889b      	ldrh	r3, [r3, #4]
 80020f0:	8093      	strh	r3, [r2, #4]
 80020f2:	46b5      	mov	sp, r6
}
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	3724      	adds	r7, #36	; 0x24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80020fe:	b004      	add	sp, #16
 8002100:	4770      	bx	lr

08002102 <OP_HC05>:
 *  Created on: Jul 8, 2023
 *      Author: aloehr
 */
#include "PR_HC05.h"

OP_HC05_Bus_t OP_HC05(CT_Log_Bus_t CT_Log_Bus){
 8002102:	b480      	push	{r7}
 8002104:	b087      	sub	sp, #28
 8002106:	af00      	add	r7, sp, #0
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	e883 0006 	stmia.w	r3, {r1, r2}
	OP_HC05_Bus_t OP_HC05_Bus;

	OP_HC05_Bus.pData = CT_Log_Bus.pData;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	613b      	str	r3, [r7, #16]
	OP_HC05_Bus.Size = CT_Log_Bus.Size;
 8002114:	893b      	ldrh	r3, [r7, #8]
 8002116:	82bb      	strh	r3, [r7, #20]

	return OP_HC05_Bus;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	461a      	mov	r2, r3
 800211c:	f107 0310 	add.w	r3, r7, #16
 8002120:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002124:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	371c      	adds	r7, #28
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <IP_MPU6050>:
static MPU6050_AccelData_t MPU6050_CalcAccel(MPU6050_RawIMUDataSet_t RawAccel, float accelSens, MPU6050_IMUOffsetData_t IMUOffsets);
static MPU6050_GyroData_t MPU6050_CalcGyro(MPU6050_RawIMUDataSet_t RawGyro, float gyroSens, MPU6050_IMUOffsetData_t IMUOffsets);
/* End Function Prototypes */

/* Start Global Function Definition */
IP_MPU6050_Bus_t IP_MPU6050(HI_MPU6050_Bus_t HI_MPU6050_Bus, Config_MPU6050_Bus_t Config_MPU6050_Bus){
 8002134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002136:	b091      	sub	sp, #68	; 0x44
 8002138:	af06      	add	r7, sp, #24
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	4638      	mov	r0, r7
 800213e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	IP_MPU6050_Bus_t IP_MPU6050_Bus;

	IP_MPU6050_Bus.accel = MPU6050_CalcAccel(HI_MPU6050_Bus.RawAccel, Config_MPU6050_Bus.Sensitivity.AccelSens, Config_MPU6050_Bus.Offsets);
 8002142:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002146:	466d      	mov	r5, sp
 8002148:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800214c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800214e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002150:	6823      	ldr	r3, [r4, #0]
 8002152:	602b      	str	r3, [r5, #0]
 8002154:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002158:	cb0c      	ldmia	r3, {r2, r3}
 800215a:	eeb0 0a67 	vmov.f32	s0, s15
 800215e:	4639      	mov	r1, r7
 8002160:	c903      	ldmia	r1, {r0, r1}
 8002162:	f000 f853 	bl	800220c <MPU6050_CalcAccel>
 8002166:	eef0 6a40 	vmov.f32	s13, s0
 800216a:	eeb0 7a60 	vmov.f32	s14, s1
 800216e:	eef0 7a41 	vmov.f32	s15, s2
 8002172:	edc7 6a04 	vstr	s13, [r7, #16]
 8002176:	ed87 7a05 	vstr	s14, [r7, #20]
 800217a:	edc7 7a06 	vstr	s15, [r7, #24]
	IP_MPU6050_Bus.gyro = MPU6050_CalcGyro(HI_MPU6050_Bus.RawGyro, Config_MPU6050_Bus.Sensitivity.GyroSens, Config_MPU6050_Bus.Offsets);
 800217e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002182:	f8d7 3006 	ldr.w	r3, [r7, #6]
 8002186:	469c      	mov	ip, r3
 8002188:	897b      	ldrh	r3, [r7, #10]
 800218a:	2600      	movs	r6, #0
 800218c:	f363 060f 	bfi	r6, r3, #0, #16
 8002190:	466d      	mov	r5, sp
 8002192:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8002196:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002198:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800219a:	6823      	ldr	r3, [r4, #0]
 800219c:	602b      	str	r3, [r5, #0]
 800219e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021a2:	cb0c      	ldmia	r3, {r2, r3}
 80021a4:	eeb0 0a67 	vmov.f32	s0, s15
 80021a8:	4660      	mov	r0, ip
 80021aa:	4631      	mov	r1, r6
 80021ac:	f000 f896 	bl	80022dc <MPU6050_CalcGyro>
 80021b0:	eef0 6a40 	vmov.f32	s13, s0
 80021b4:	eeb0 7a60 	vmov.f32	s14, s1
 80021b8:	eef0 7a41 	vmov.f32	s15, s2
 80021bc:	edc7 6a07 	vstr	s13, [r7, #28]
 80021c0:	ed87 7a08 	vstr	s14, [r7, #32]
 80021c4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	if(Config_MPU6050_Bus.Offsets.SensCalibrated_bool){
 80021c8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00e      	beq.n	80021ee <IP_MPU6050+0xba>
		IP_MPU6050_Bus = MPU6050_IMUDataClamp(IP_MPU6050_Bus);
 80021d0:	f107 0510 	add.w	r5, r7, #16
 80021d4:	466c      	mov	r4, sp
 80021d6:	f107 031c 	add.w	r3, r7, #28
 80021da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80021de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80021e2:	f107 0310 	add.w	r3, r7, #16
 80021e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021e8:	4628      	mov	r0, r5
 80021ea:	f000 f915 	bl	8002418 <MPU6050_IMUDataClamp>
	}

	return IP_MPU6050_Bus;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	461d      	mov	r5, r3
 80021f2:	f107 0410 	add.w	r4, r7, #16
 80021f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021fe:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	372c      	adds	r7, #44	; 0x2c
 8002206:	46bd      	mov	sp, r7
 8002208:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800220c <MPU6050_CalcAccel>:
/* End Global Function Definition */

/* Start Static Function Definition */
static MPU6050_AccelData_t MPU6050_CalcAccel(MPU6050_RawIMUDataSet_t RawAccel, float accelSens, MPU6050_IMUOffsetData_t IMUOffsets){
 800220c:	b082      	sub	sp, #8
 800220e:	b490      	push	{r4, r7}
 8002210:	b08e      	sub	sp, #56	; 0x38
 8002212:	af00      	add	r7, sp, #0
 8002214:	f107 0418 	add.w	r4, r7, #24
 8002218:	e884 0003 	stmia.w	r4, {r0, r1}
 800221c:	ed87 0a05 	vstr	s0, [r7, #20]
 8002220:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002224:	e881 000c 	stmia.w	r1, {r2, r3}
	MPU6050_AccelData_t Accel;

	/* Convert bits to g's, store in Accel struct*/
	Accel.XOUT_ms2 = (RawAccel.XOUT_na / accelSens) * g + IMUOffsets.AxOffset;
 8002228:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800222c:	ee07 3a90 	vmov	s15, r3
 8002230:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002234:	ed97 7a05 	vldr	s14, [r7, #20]
 8002238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800223c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80022d8 <MPU6050_CalcAccel+0xcc>
 8002240:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002244:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800224c:	edc7 7a08 	vstr	s15, [r7, #32]
	Accel.YOUT_ms2 = (RawAccel.YOUT_na / accelSens) * g + IMUOffsets.AyOffset;
 8002250:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002254:	ee07 3a90 	vmov	s15, r3
 8002258:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800225c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002264:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80022d8 <MPU6050_CalcAccel+0xcc>
 8002268:	ee27 7a87 	vmul.f32	s14, s15, s14
 800226c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002270:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002274:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	Accel.ZOUT_ms2 = (RawAccel.ZOUT_na / accelSens) * g + IMUOffsets.AzOffset;
 8002278:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800227c:	ee07 3a90 	vmov	s15, r3
 8002280:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002284:	ed97 7a05 	vldr	s14, [r7, #20]
 8002288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800228c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80022d8 <MPU6050_CalcAccel+0xcc>
 8002290:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002294:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	/* Return Accel struct */
	return Accel;
 80022a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022a4:	f107 0220 	add.w	r2, r7, #32
 80022a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80022aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80022ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b4:	ee06 1a90 	vmov	s13, r1
 80022b8:	ee07 2a10 	vmov	s14, r2
 80022bc:	ee07 3a90 	vmov	s15, r3
}
 80022c0:	eeb0 0a66 	vmov.f32	s0, s13
 80022c4:	eef0 0a47 	vmov.f32	s1, s14
 80022c8:	eeb0 1a67 	vmov.f32	s2, s15
 80022cc:	3738      	adds	r7, #56	; 0x38
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc90      	pop	{r4, r7}
 80022d2:	b002      	add	sp, #8
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	411ce7d5 	.word	0x411ce7d5

080022dc <MPU6050_CalcGyro>:

static MPU6050_GyroData_t MPU6050_CalcGyro(MPU6050_RawIMUDataSet_t RawGyro, float gyroSens, MPU6050_IMUOffsetData_t IMUOffsets){
 80022dc:	b082      	sub	sp, #8
 80022de:	b490      	push	{r4, r7}
 80022e0:	b08e      	sub	sp, #56	; 0x38
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	f107 0418 	add.w	r4, r7, #24
 80022e8:	e884 0003 	stmia.w	r4, {r0, r1}
 80022ec:	ed87 0a05 	vstr	s0, [r7, #20]
 80022f0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80022f4:	e881 000c 	stmia.w	r1, {r2, r3}
	MPU6050_GyroData_t Gyro;

	/* Convert bits to deg/s, store in Gyro struct*/
	Gyro.XOUT_dps = RawGyro.XOUT_na / gyroSens + IMUOffsets.WxOffset;
 80022f8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80022fc:	ee07 3a90 	vmov	s15, r3
 8002300:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002304:	edd7 7a05 	vldr	s15, [r7, #20]
 8002308:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800230c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002310:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002314:	edc7 7a08 	vstr	s15, [r7, #32]
	Gyro.YOUT_dps = RawGyro.YOUT_na / gyroSens + IMUOffsets.WyOffset;
 8002318:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800231c:	ee07 3a90 	vmov	s15, r3
 8002320:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002324:	edd7 7a05 	vldr	s15, [r7, #20]
 8002328:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800232c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002330:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002334:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	Gyro.ZOUT_dps = RawGyro.ZOUT_na / gyroSens + IMUOffsets.WzOffset;
 8002338:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800233c:	ee07 3a90 	vmov	s15, r3
 8002340:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002344:	edd7 7a05 	vldr	s15, [r7, #20]
 8002348:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800234c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002354:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	/* Return Gyro struct */
	return Gyro;
 8002358:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800235c:	f107 0220 	add.w	r2, r7, #32
 8002360:	ca07      	ldmia	r2, {r0, r1, r2}
 8002362:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002366:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800236a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800236c:	ee06 1a90 	vmov	s13, r1
 8002370:	ee07 2a10 	vmov	s14, r2
 8002374:	ee07 3a90 	vmov	s15, r3
}
 8002378:	eeb0 0a66 	vmov.f32	s0, s13
 800237c:	eef0 0a47 	vmov.f32	s1, s14
 8002380:	eeb0 1a67 	vmov.f32	s2, s15
 8002384:	3738      	adds	r7, #56	; 0x38
 8002386:	46bd      	mov	sp, r7
 8002388:	bc90      	pop	{r4, r7}
 800238a:	b002      	add	sp, #8
 800238c:	4770      	bx	lr

0800238e <clamp>:

static float clamp(float data, float clampVal, float threshold, uint8_t mode){
 800238e:	b480      	push	{r7}
 8002390:	b087      	sub	sp, #28
 8002392:	af00      	add	r7, sp, #0
 8002394:	ed87 0a03 	vstr	s0, [r7, #12]
 8002398:	edc7 0a02 	vstr	s1, [r7, #8]
 800239c:	ed87 1a01 	vstr	s2, [r7, #4]
 80023a0:	4603      	mov	r3, r0
 80023a2:	70fb      	strb	r3, [r7, #3]
	// mode = 0: Clamp to clampVal if data below threshold
	// mode = 1: Clamp to clampVal if data above threshold
	float result;

	uint8_t applyClamp_bool = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	74fb      	strb	r3, [r7, #19]

	// Check mode and if clamp is required
	switch(mode){
 80023a8:	78fb      	ldrb	r3, [r7, #3]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d002      	beq.n	80023b4 <clamp+0x26>
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d010      	beq.n	80023d4 <clamp+0x46>
 80023b2:	e01f      	b.n	80023f4 <clamp+0x66>
	case 0:
		applyClamp_bool = (fabsf(data) < threshold);
 80023b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80023b8:	eef0 7ae7 	vabs.f32	s15, s15
 80023bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80023c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c8:	bfcc      	ite	gt
 80023ca:	2301      	movgt	r3, #1
 80023cc:	2300      	movle	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	74fb      	strb	r3, [r7, #19]
		break;
 80023d2:	e00f      	b.n	80023f4 <clamp+0x66>

	case 1:
		applyClamp_bool = (fabsf(data) > threshold);
 80023d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80023d8:	eef0 7ae7 	vabs.f32	s15, s15
 80023dc:	ed97 7a01 	vldr	s14, [r7, #4]
 80023e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e8:	bf4c      	ite	mi
 80023ea:	2301      	movmi	r3, #1
 80023ec:	2300      	movpl	r3, #0
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	74fb      	strb	r3, [r7, #19]
		break;
 80023f2:	bf00      	nop
	}

	// Apply clamp if above criteria are met
	if(applyClamp_bool){
 80023f4:	7cfb      	ldrb	r3, [r7, #19]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d002      	beq.n	8002400 <clamp+0x72>
		result = clampVal;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	e001      	b.n	8002404 <clamp+0x76>
	} else{
		result = data;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	617b      	str	r3, [r7, #20]
	}

	return result;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	ee07 3a90 	vmov	s15, r3
}
 800240a:	eeb0 0a67 	vmov.f32	s0, s15
 800240e:	371c      	adds	r7, #28
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <MPU6050_IMUDataClamp>:

static IP_MPU6050_Bus_t MPU6050_IMUDataClamp(IP_MPU6050_Bus_t MPU6050_Bus){
 8002418:	b084      	sub	sp, #16
 800241a:	b5b0      	push	{r4, r5, r7, lr}
 800241c:	b08c      	sub	sp, #48	; 0x30
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002426:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	IP_MPU6050_Bus_t Result_Bus;

	float clampVal = 0;
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	62fb      	str	r3, [r7, #44]	; 0x2c
	float clampThreshold = .05;
 8002430:	4b3d      	ldr	r3, [pc, #244]	; (8002528 <MPU6050_IMUDataClamp+0x110>)
 8002432:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t clampMode = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	Result_Bus.accel.XOUT_ms2 = clamp(MPU6050_Bus.accel.XOUT_ms2, clampVal, clampThreshold, clampMode);
 800243a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800243e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002442:	4618      	mov	r0, r3
 8002444:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 8002448:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 800244c:	eeb0 0a67 	vmov.f32	s0, s15
 8002450:	f7ff ff9d 	bl	800238e <clamp>
 8002454:	eef0 7a40 	vmov.f32	s15, s0
 8002458:	edc7 7a03 	vstr	s15, [r7, #12]
	Result_Bus.accel.YOUT_ms2 = clamp(MPU6050_Bus.accel.YOUT_ms2, clampVal, clampThreshold, clampMode);
 800245c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002460:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002464:	4618      	mov	r0, r3
 8002466:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 800246a:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 800246e:	eeb0 0a67 	vmov.f32	s0, s15
 8002472:	f7ff ff8c 	bl	800238e <clamp>
 8002476:	eef0 7a40 	vmov.f32	s15, s0
 800247a:	edc7 7a04 	vstr	s15, [r7, #16]
	Result_Bus.accel.ZOUT_ms2 = clamp(MPU6050_Bus.accel.ZOUT_ms2, clampVal, clampThreshold, clampMode);
 800247e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002482:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002486:	4618      	mov	r0, r3
 8002488:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 800248c:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8002490:	eeb0 0a67 	vmov.f32	s0, s15
 8002494:	f7ff ff7b 	bl	800238e <clamp>
 8002498:	eef0 7a40 	vmov.f32	s15, s0
 800249c:	edc7 7a05 	vstr	s15, [r7, #20]

	Result_Bus.gyro.XOUT_dps = clamp(MPU6050_Bus.gyro.XOUT_dps , clampVal, clampThreshold, clampMode);
 80024a0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80024a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024a8:	4618      	mov	r0, r3
 80024aa:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 80024ae:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 80024b2:	eeb0 0a67 	vmov.f32	s0, s15
 80024b6:	f7ff ff6a 	bl	800238e <clamp>
 80024ba:	eef0 7a40 	vmov.f32	s15, s0
 80024be:	edc7 7a06 	vstr	s15, [r7, #24]
	Result_Bus.gyro.YOUT_dps = clamp(MPU6050_Bus.gyro.YOUT_dps , clampVal, clampThreshold, clampMode);
 80024c2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80024c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024ca:	4618      	mov	r0, r3
 80024cc:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 80024d0:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 80024d4:	eeb0 0a67 	vmov.f32	s0, s15
 80024d8:	f7ff ff59 	bl	800238e <clamp>
 80024dc:	eef0 7a40 	vmov.f32	s15, s0
 80024e0:	edc7 7a07 	vstr	s15, [r7, #28]
	Result_Bus.gyro.ZOUT_dps = clamp(MPU6050_Bus.gyro.ZOUT_dps , clampVal, clampThreshold, clampMode);
 80024e4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80024e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024ec:	4618      	mov	r0, r3
 80024ee:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 80024f2:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 80024f6:	eeb0 0a67 	vmov.f32	s0, s15
 80024fa:	f7ff ff48 	bl	800238e <clamp>
 80024fe:	eef0 7a40 	vmov.f32	s15, s0
 8002502:	edc7 7a08 	vstr	s15, [r7, #32]

	return Result_Bus;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	461d      	mov	r5, r3
 800250a:	f107 040c 	add.w	r4, r7, #12
 800250e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002510:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002512:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002516:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	3730      	adds	r7, #48	; 0x30
 800251e:	46bd      	mov	sp, r7
 8002520:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002524:	b004      	add	sp, #16
 8002526:	4770      	bx	lr
 8002528:	3d4ccccd 	.word	0x3d4ccccd

0800252c <PR_InputProcessing>:
 */

#include "Processing.h"

/* Start global function definitions */
IP_Bus_t PR_InputProcessing(Config_Bus_t Config_Bus, HI_Bus_t HI_Bus){
 800252c:	b084      	sub	sp, #16
 800252e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002530:	b099      	sub	sp, #100	; 0x64
 8002532:	af0a      	add	r7, sp, #40	; 0x28
 8002534:	61f8      	str	r0, [r7, #28]
 8002536:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800253a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	IP_Bus_t IP_Bus;

	IP_Bus.IP_MPU6050_Bus = IP_MPU6050(HI_Bus.HI_MPU6050_Bus, Config_Bus.Config_MPU6050_Bus);
 800253e:	463e      	mov	r6, r7
 8002540:	466d      	mov	r5, sp
 8002542:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 8002546:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002548:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800254a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800254c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800254e:	6823      	ldr	r3, [r4, #0]
 8002550:	602b      	str	r3, [r5, #0]
 8002552:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002556:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002558:	4630      	mov	r0, r6
 800255a:	f7ff fdeb 	bl	8002134 <IP_MPU6050>
 800255e:	f107 0420 	add.w	r4, r7, #32
 8002562:	463d      	mov	r5, r7
 8002564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002568:	e895 0003 	ldmia.w	r5, {r0, r1}
 800256c:	e884 0003 	stmia.w	r4, {r0, r1}

	return IP_Bus;
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	461d      	mov	r5, r3
 8002574:	f107 0420 	add.w	r4, r7, #32
 8002578:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800257a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800257c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002580:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002584:	69f8      	ldr	r0, [r7, #28]
 8002586:	373c      	adds	r7, #60	; 0x3c
 8002588:	46bd      	mov	sp, r7
 800258a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800258e:	b004      	add	sp, #16
 8002590:	4770      	bx	lr

08002592 <PR_OutputProcessing>:

OP_Bus_t PR_OutputProcessing(CT_Bus_t CT_Bus){
 8002592:	b084      	sub	sp, #16
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80025a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	OP_Bus_t OP_Bus;

	OP_Bus.OP_HC05_Bus = OP_HC05(CT_Bus.CT_Log_Bus);
 80025a4:	4638      	mov	r0, r7
 80025a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80025aa:	e893 0006 	ldmia.w	r3, {r1, r2}
 80025ae:	f7ff fda8 	bl	8002102 <OP_HC05>
 80025b2:	f107 0310 	add.w	r3, r7, #16
 80025b6:	463a      	mov	r2, r7
 80025b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025bc:	e883 0003 	stmia.w	r3, {r0, r1}

	return OP_Bus;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	461a      	mov	r2, r3
 80025c4:	f107 0310 	add.w	r3, r7, #16
 80025c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80025cc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80025da:	b004      	add	sp, #16
 80025dc:	4770      	bx	lr
	...

080025e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025e0:	b590      	push	{r4, r7, lr}
 80025e2:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 80025e6:	af2c      	add	r7, sp, #176	; 0xb0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025e8:	f000 fb48 	bl	8002c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025ec:	f000 f83c 	bl	8002668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025f0:	f000 f8fa 	bl	80027e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80025f4:	f000 f8a0 	bl	8002738 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80025f8:	f000 f8cc 	bl	8002794 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Config_HAL_Bus_t Config_HAL_Bus = {hi2c1, huart2};
 80025fc:	4a18      	ldr	r2, [pc, #96]	; (8002660 <main+0x80>)
 80025fe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002602:	4611      	mov	r1, r2
 8002604:	2254      	movs	r2, #84	; 0x54
 8002606:	4618      	mov	r0, r3
 8002608:	f003 fe5c 	bl	80062c4 <memcpy>
 800260c:	4a15      	ldr	r2, [pc, #84]	; (8002664 <main+0x84>)
 800260e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002612:	4611      	mov	r1, r2
 8002614:	2244      	movs	r2, #68	; 0x44
 8002616:	4618      	mov	r0, r3
 8002618:	f003 fe54 	bl	80062c4 <memcpy>

  Config_Bus_t Config_Bus;
  Config_Bus = App_Config(Config_HAL_Bus);
 800261c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002620:	f5a3 74aa 	sub.w	r4, r3, #340	; 0x154
 8002624:	4668      	mov	r0, sp
 8002626:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800262a:	228c      	movs	r2, #140	; 0x8c
 800262c:	4619      	mov	r1, r3
 800262e:	f003 fe49 	bl	80062c4 <memcpy>
 8002632:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002636:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002638:	4620      	mov	r0, r4
 800263a:	f7fe fc8b 	bl	8000f54 <App_Config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  App_Main(Config_Bus);
 800263e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002642:	f5a3 74aa 	sub.w	r4, r3, #340	; 0x154
 8002646:	4668      	mov	r0, sp
 8002648:	f104 0310 	add.w	r3, r4, #16
 800264c:	22ac      	movs	r2, #172	; 0xac
 800264e:	4619      	mov	r1, r3
 8002650:	f003 fe38 	bl	80062c4 <memcpy>
 8002654:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002658:	f7fe fcc0 	bl	8000fdc <App_Main>
 800265c:	e7ef      	b.n	800263e <main+0x5e>
 800265e:	bf00      	nop
 8002660:	200002a8 	.word	0x200002a8
 8002664:	200002fc 	.word	0x200002fc

08002668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b094      	sub	sp, #80	; 0x50
 800266c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800266e:	f107 0320 	add.w	r3, r7, #32
 8002672:	2230      	movs	r2, #48	; 0x30
 8002674:	2100      	movs	r1, #0
 8002676:	4618      	mov	r0, r3
 8002678:	f003 fda5 	bl	80061c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800267c:	f107 030c 	add.w	r3, r7, #12
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800268c:	2300      	movs	r3, #0
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	4b27      	ldr	r3, [pc, #156]	; (8002730 <SystemClock_Config+0xc8>)
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	4a26      	ldr	r2, [pc, #152]	; (8002730 <SystemClock_Config+0xc8>)
 8002696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269a:	6413      	str	r3, [r2, #64]	; 0x40
 800269c:	4b24      	ldr	r3, [pc, #144]	; (8002730 <SystemClock_Config+0xc8>)
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026a8:	2300      	movs	r3, #0
 80026aa:	607b      	str	r3, [r7, #4]
 80026ac:	4b21      	ldr	r3, [pc, #132]	; (8002734 <SystemClock_Config+0xcc>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a20      	ldr	r2, [pc, #128]	; (8002734 <SystemClock_Config+0xcc>)
 80026b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	4b1e      	ldr	r3, [pc, #120]	; (8002734 <SystemClock_Config+0xcc>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026c0:	607b      	str	r3, [r7, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026c4:	2301      	movs	r3, #1
 80026c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026ce:	2302      	movs	r3, #2
 80026d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80026d8:	230c      	movs	r3, #12
 80026da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80026dc:	2360      	movs	r3, #96	; 0x60
 80026de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026e0:	2302      	movs	r3, #2
 80026e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80026e4:	2304      	movs	r3, #4
 80026e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026e8:	f107 0320 	add.w	r3, r7, #32
 80026ec:	4618      	mov	r0, r3
 80026ee:	f001 fecd 	bl	800448c <HAL_RCC_OscConfig>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80026f8:	f000 f8d6 	bl	80028a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026fc:	230f      	movs	r3, #15
 80026fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002700:	2302      	movs	r3, #2
 8002702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800270c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002712:	f107 030c 	add.w	r3, r7, #12
 8002716:	2103      	movs	r1, #3
 8002718:	4618      	mov	r0, r3
 800271a:	f002 f92f 	bl	800497c <HAL_RCC_ClockConfig>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002724:	f000 f8c0 	bl	80028a8 <Error_Handler>
  }
}
 8002728:	bf00      	nop
 800272a:	3750      	adds	r7, #80	; 0x50
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40023800 	.word	0x40023800
 8002734:	40007000 	.word	0x40007000

08002738 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800273c:	4b12      	ldr	r3, [pc, #72]	; (8002788 <MX_I2C1_Init+0x50>)
 800273e:	4a13      	ldr	r2, [pc, #76]	; (800278c <MX_I2C1_Init+0x54>)
 8002740:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002742:	4b11      	ldr	r3, [pc, #68]	; (8002788 <MX_I2C1_Init+0x50>)
 8002744:	4a12      	ldr	r2, [pc, #72]	; (8002790 <MX_I2C1_Init+0x58>)
 8002746:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002748:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <MX_I2C1_Init+0x50>)
 800274a:	2200      	movs	r2, #0
 800274c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800274e:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <MX_I2C1_Init+0x50>)
 8002750:	2200      	movs	r2, #0
 8002752:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <MX_I2C1_Init+0x50>)
 8002756:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800275a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800275c:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <MX_I2C1_Init+0x50>)
 800275e:	2200      	movs	r2, #0
 8002760:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002762:	4b09      	ldr	r3, [pc, #36]	; (8002788 <MX_I2C1_Init+0x50>)
 8002764:	2200      	movs	r2, #0
 8002766:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002768:	4b07      	ldr	r3, [pc, #28]	; (8002788 <MX_I2C1_Init+0x50>)
 800276a:	2200      	movs	r2, #0
 800276c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800276e:	4b06      	ldr	r3, [pc, #24]	; (8002788 <MX_I2C1_Init+0x50>)
 8002770:	2200      	movs	r2, #0
 8002772:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002774:	4804      	ldr	r0, [pc, #16]	; (8002788 <MX_I2C1_Init+0x50>)
 8002776:	f000 fd9b 	bl	80032b0 <HAL_I2C_Init>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002780:	f000 f892 	bl	80028a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002784:	bf00      	nop
 8002786:	bd80      	pop	{r7, pc}
 8002788:	200002a8 	.word	0x200002a8
 800278c:	40005400 	.word	0x40005400
 8002790:	00061a80 	.word	0x00061a80

08002794 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002798:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <MX_USART2_UART_Init+0x4c>)
 800279a:	4a12      	ldr	r2, [pc, #72]	; (80027e4 <MX_USART2_UART_Init+0x50>)
 800279c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800279e:	4b10      	ldr	r3, [pc, #64]	; (80027e0 <MX_USART2_UART_Init+0x4c>)
 80027a0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80027a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027a6:	4b0e      	ldr	r3, [pc, #56]	; (80027e0 <MX_USART2_UART_Init+0x4c>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027ac:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <MX_USART2_UART_Init+0x4c>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027b2:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <MX_USART2_UART_Init+0x4c>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 80027b8:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <MX_USART2_UART_Init+0x4c>)
 80027ba:	2208      	movs	r2, #8
 80027bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027be:	4b08      	ldr	r3, [pc, #32]	; (80027e0 <MX_USART2_UART_Init+0x4c>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027c4:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <MX_USART2_UART_Init+0x4c>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027ca:	4805      	ldr	r0, [pc, #20]	; (80027e0 <MX_USART2_UART_Init+0x4c>)
 80027cc:	f002 fab6 	bl	8004d3c <HAL_UART_Init>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027d6:	f000 f867 	bl	80028a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	200002fc 	.word	0x200002fc
 80027e4:	40004400 	.word	0x40004400

080027e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08a      	sub	sp, #40	; 0x28
 80027ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ee:	f107 0314 	add.w	r3, r7, #20
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	605a      	str	r2, [r3, #4]
 80027f8:	609a      	str	r2, [r3, #8]
 80027fa:	60da      	str	r2, [r3, #12]
 80027fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	4b27      	ldr	r3, [pc, #156]	; (80028a0 <MX_GPIO_Init+0xb8>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	4a26      	ldr	r2, [pc, #152]	; (80028a0 <MX_GPIO_Init+0xb8>)
 8002808:	f043 0304 	orr.w	r3, r3, #4
 800280c:	6313      	str	r3, [r2, #48]	; 0x30
 800280e:	4b24      	ldr	r3, [pc, #144]	; (80028a0 <MX_GPIO_Init+0xb8>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	4b20      	ldr	r3, [pc, #128]	; (80028a0 <MX_GPIO_Init+0xb8>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	4a1f      	ldr	r2, [pc, #124]	; (80028a0 <MX_GPIO_Init+0xb8>)
 8002824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002828:	6313      	str	r3, [r2, #48]	; 0x30
 800282a:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <MX_GPIO_Init+0xb8>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	4b19      	ldr	r3, [pc, #100]	; (80028a0 <MX_GPIO_Init+0xb8>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	4a18      	ldr	r2, [pc, #96]	; (80028a0 <MX_GPIO_Init+0xb8>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6313      	str	r3, [r2, #48]	; 0x30
 8002846:	4b16      	ldr	r3, [pc, #88]	; (80028a0 <MX_GPIO_Init+0xb8>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	60bb      	str	r3, [r7, #8]
 8002850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	607b      	str	r3, [r7, #4]
 8002856:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <MX_GPIO_Init+0xb8>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	4a11      	ldr	r2, [pc, #68]	; (80028a0 <MX_GPIO_Init+0xb8>)
 800285c:	f043 0302 	orr.w	r3, r3, #2
 8002860:	6313      	str	r3, [r2, #48]	; 0x30
 8002862:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <MX_GPIO_Init+0xb8>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	607b      	str	r3, [r7, #4]
 800286c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800286e:	2201      	movs	r2, #1
 8002870:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002874:	480b      	ldr	r0, [pc, #44]	; (80028a4 <MX_GPIO_Init+0xbc>)
 8002876:	f000 fd01 	bl	800327c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800287a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800287e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002880:	2311      	movs	r3, #17
 8002882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002888:	2300      	movs	r3, #0
 800288a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800288c:	f107 0314 	add.w	r3, r7, #20
 8002890:	4619      	mov	r1, r3
 8002892:	4804      	ldr	r0, [pc, #16]	; (80028a4 <MX_GPIO_Init+0xbc>)
 8002894:	f000 fb6e 	bl	8002f74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002898:	bf00      	nop
 800289a:	3728      	adds	r7, #40	; 0x28
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40020800 	.word	0x40020800

080028a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028ac:	b672      	cpsid	i
}
 80028ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028b0:	e7fe      	b.n	80028b0 <Error_Handler+0x8>
	...

080028b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	607b      	str	r3, [r7, #4]
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <HAL_MspInit+0x4c>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	4a0f      	ldr	r2, [pc, #60]	; (8002900 <HAL_MspInit+0x4c>)
 80028c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ca:	4b0d      	ldr	r3, [pc, #52]	; (8002900 <HAL_MspInit+0x4c>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028d2:	607b      	str	r3, [r7, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	603b      	str	r3, [r7, #0]
 80028da:	4b09      	ldr	r3, [pc, #36]	; (8002900 <HAL_MspInit+0x4c>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	4a08      	ldr	r2, [pc, #32]	; (8002900 <HAL_MspInit+0x4c>)
 80028e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e4:	6413      	str	r3, [r2, #64]	; 0x40
 80028e6:	4b06      	ldr	r3, [pc, #24]	; (8002900 <HAL_MspInit+0x4c>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40023800 	.word	0x40023800

08002904 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08a      	sub	sp, #40	; 0x28
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290c:	f107 0314 	add.w	r3, r7, #20
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	60da      	str	r2, [r3, #12]
 800291a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a19      	ldr	r2, [pc, #100]	; (8002988 <HAL_I2C_MspInit+0x84>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d12b      	bne.n	800297e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	4b18      	ldr	r3, [pc, #96]	; (800298c <HAL_I2C_MspInit+0x88>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	4a17      	ldr	r2, [pc, #92]	; (800298c <HAL_I2C_MspInit+0x88>)
 8002930:	f043 0302 	orr.w	r3, r3, #2
 8002934:	6313      	str	r3, [r2, #48]	; 0x30
 8002936:	4b15      	ldr	r3, [pc, #84]	; (800298c <HAL_I2C_MspInit+0x88>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	613b      	str	r3, [r7, #16]
 8002940:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002942:	23c0      	movs	r3, #192	; 0xc0
 8002944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002946:	2312      	movs	r3, #18
 8002948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294e:	2303      	movs	r3, #3
 8002950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002952:	2304      	movs	r3, #4
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002956:	f107 0314 	add.w	r3, r7, #20
 800295a:	4619      	mov	r1, r3
 800295c:	480c      	ldr	r0, [pc, #48]	; (8002990 <HAL_I2C_MspInit+0x8c>)
 800295e:	f000 fb09 	bl	8002f74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	4b09      	ldr	r3, [pc, #36]	; (800298c <HAL_I2C_MspInit+0x88>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	4a08      	ldr	r2, [pc, #32]	; (800298c <HAL_I2C_MspInit+0x88>)
 800296c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002970:	6413      	str	r3, [r2, #64]	; 0x40
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_I2C_MspInit+0x88>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800297e:	bf00      	nop
 8002980:	3728      	adds	r7, #40	; 0x28
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40005400 	.word	0x40005400
 800298c:	40023800 	.word	0x40023800
 8002990:	40020400 	.word	0x40020400

08002994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08a      	sub	sp, #40	; 0x28
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299c:	f107 0314 	add.w	r3, r7, #20
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	60da      	str	r2, [r3, #12]
 80029aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a19      	ldr	r2, [pc, #100]	; (8002a18 <HAL_UART_MspInit+0x84>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d12b      	bne.n	8002a0e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	4b18      	ldr	r3, [pc, #96]	; (8002a1c <HAL_UART_MspInit+0x88>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	4a17      	ldr	r2, [pc, #92]	; (8002a1c <HAL_UART_MspInit+0x88>)
 80029c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c4:	6413      	str	r3, [r2, #64]	; 0x40
 80029c6:	4b15      	ldr	r3, [pc, #84]	; (8002a1c <HAL_UART_MspInit+0x88>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <HAL_UART_MspInit+0x88>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	4a10      	ldr	r2, [pc, #64]	; (8002a1c <HAL_UART_MspInit+0x88>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	6313      	str	r3, [r2, #48]	; 0x30
 80029e2:	4b0e      	ldr	r3, [pc, #56]	; (8002a1c <HAL_UART_MspInit+0x88>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029ee:	230c      	movs	r3, #12
 80029f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f2:	2302      	movs	r3, #2
 80029f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fa:	2303      	movs	r3, #3
 80029fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029fe:	2307      	movs	r3, #7
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a02:	f107 0314 	add.w	r3, r7, #20
 8002a06:	4619      	mov	r1, r3
 8002a08:	4805      	ldr	r0, [pc, #20]	; (8002a20 <HAL_UART_MspInit+0x8c>)
 8002a0a:	f000 fab3 	bl	8002f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a0e:	bf00      	nop
 8002a10:	3728      	adds	r7, #40	; 0x28
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40004400 	.word	0x40004400
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40020000 	.word	0x40020000

08002a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a28:	e7fe      	b.n	8002a28 <NMI_Handler+0x4>

08002a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a2e:	e7fe      	b.n	8002a2e <HardFault_Handler+0x4>

08002a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a34:	e7fe      	b.n	8002a34 <MemManage_Handler+0x4>

08002a36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a3a:	e7fe      	b.n	8002a3a <BusFault_Handler+0x4>

08002a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a40:	e7fe      	b.n	8002a40 <UsageFault_Handler+0x4>

08002a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a42:	b480      	push	{r7}
 8002a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a70:	f000 f956 	bl	8002d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a74:	bf00      	nop
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return 1;
 8002a7c:	2301      	movs	r3, #1
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <_kill>:

int _kill(int pid, int sig)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a92:	f003 fbeb 	bl	800626c <__errno>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2216      	movs	r2, #22
 8002a9a:	601a      	str	r2, [r3, #0]
  return -1;
 8002a9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <_exit>:

void _exit (int status)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ab0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff ffe7 	bl	8002a88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002aba:	e7fe      	b.n	8002aba <_exit+0x12>

08002abc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	e00a      	b.n	8002ae4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ace:	f3af 8000 	nop.w
 8002ad2:	4601      	mov	r1, r0
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	60ba      	str	r2, [r7, #8]
 8002ada:	b2ca      	uxtb	r2, r1
 8002adc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	dbf0      	blt.n	8002ace <_read+0x12>
  }

  return len;
 8002aec:	687b      	ldr	r3, [r7, #4]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b086      	sub	sp, #24
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	60f8      	str	r0, [r7, #12]
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	e009      	b.n	8002b1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	1c5a      	adds	r2, r3, #1
 8002b0c:	60ba      	str	r2, [r7, #8]
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	dbf1      	blt.n	8002b08 <_write+0x12>
  }
  return len;
 8002b24:	687b      	ldr	r3, [r7, #4]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <_close>:

int _close(int file)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b56:	605a      	str	r2, [r3, #4]
  return 0;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <_isatty>:

int _isatty(int file)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b6e:	2301      	movs	r3, #1
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ba0:	4a14      	ldr	r2, [pc, #80]	; (8002bf4 <_sbrk+0x5c>)
 8002ba2:	4b15      	ldr	r3, [pc, #84]	; (8002bf8 <_sbrk+0x60>)
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bac:	4b13      	ldr	r3, [pc, #76]	; (8002bfc <_sbrk+0x64>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d102      	bne.n	8002bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bb4:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <_sbrk+0x64>)
 8002bb6:	4a12      	ldr	r2, [pc, #72]	; (8002c00 <_sbrk+0x68>)
 8002bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bba:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <_sbrk+0x64>)
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d207      	bcs.n	8002bd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bc8:	f003 fb50 	bl	800626c <__errno>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	220c      	movs	r2, #12
 8002bd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bd6:	e009      	b.n	8002bec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bd8:	4b08      	ldr	r3, [pc, #32]	; (8002bfc <_sbrk+0x64>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bde:	4b07      	ldr	r3, [pc, #28]	; (8002bfc <_sbrk+0x64>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4413      	add	r3, r2
 8002be6:	4a05      	ldr	r2, [pc, #20]	; (8002bfc <_sbrk+0x64>)
 8002be8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bea:	68fb      	ldr	r3, [r7, #12]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	20020000 	.word	0x20020000
 8002bf8:	00000400 	.word	0x00000400
 8002bfc:	20000340 	.word	0x20000340
 8002c00:	20000498 	.word	0x20000498

08002c04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c08:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <SystemInit+0x20>)
 8002c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0e:	4a05      	ldr	r2, [pc, #20]	; (8002c24 <SystemInit+0x20>)
 8002c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c18:	bf00      	nop
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	e000ed00 	.word	0xe000ed00

08002c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c2c:	480d      	ldr	r0, [pc, #52]	; (8002c64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c2e:	490e      	ldr	r1, [pc, #56]	; (8002c68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c30:	4a0e      	ldr	r2, [pc, #56]	; (8002c6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c34:	e002      	b.n	8002c3c <LoopCopyDataInit>

08002c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c3a:	3304      	adds	r3, #4

08002c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c40:	d3f9      	bcc.n	8002c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c42:	4a0b      	ldr	r2, [pc, #44]	; (8002c70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c44:	4c0b      	ldr	r4, [pc, #44]	; (8002c74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c48:	e001      	b.n	8002c4e <LoopFillZerobss>

08002c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c4c:	3204      	adds	r2, #4

08002c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c50:	d3fb      	bcc.n	8002c4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c52:	f7ff ffd7 	bl	8002c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c56:	f003 fb0f 	bl	8006278 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c5a:	f7ff fcc1 	bl	80025e0 <main>
  bx  lr    
 8002c5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c68:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002c6c:	080092b4 	.word	0x080092b4
  ldr r2, =_sbss
 8002c70:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002c74:	20000494 	.word	0x20000494

08002c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c78:	e7fe      	b.n	8002c78 <ADC_IRQHandler>
	...

08002c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c80:	4b0e      	ldr	r3, [pc, #56]	; (8002cbc <HAL_Init+0x40>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a0d      	ldr	r2, [pc, #52]	; (8002cbc <HAL_Init+0x40>)
 8002c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_Init+0x40>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a0a      	ldr	r2, [pc, #40]	; (8002cbc <HAL_Init+0x40>)
 8002c92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c98:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <HAL_Init+0x40>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a07      	ldr	r2, [pc, #28]	; (8002cbc <HAL_Init+0x40>)
 8002c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ca4:	2003      	movs	r0, #3
 8002ca6:	f000 f931 	bl	8002f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002caa:	200f      	movs	r0, #15
 8002cac:	f000 f808 	bl	8002cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cb0:	f7ff fe00 	bl	80028b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40023c00 	.word	0x40023c00

08002cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cc8:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <HAL_InitTick+0x54>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <HAL_InitTick+0x58>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 f93b 	bl	8002f5a <HAL_SYSTICK_Config>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e00e      	b.n	8002d0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b0f      	cmp	r3, #15
 8002cf2:	d80a      	bhi.n	8002d0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cfc:	f000 f911 	bl	8002f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d00:	4a06      	ldr	r2, [pc, #24]	; (8002d1c <HAL_InitTick+0x5c>)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	e000      	b.n	8002d0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	2000000c 	.word	0x2000000c
 8002d18:	20000014 	.word	0x20000014
 8002d1c:	20000010 	.word	0x20000010

08002d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d24:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <HAL_IncTick+0x20>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <HAL_IncTick+0x24>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4413      	add	r3, r2
 8002d30:	4a04      	ldr	r2, [pc, #16]	; (8002d44 <HAL_IncTick+0x24>)
 8002d32:	6013      	str	r3, [r2, #0]
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	20000014 	.word	0x20000014
 8002d44:	20000344 	.word	0x20000344

08002d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d4c:	4b03      	ldr	r3, [pc, #12]	; (8002d5c <HAL_GetTick+0x14>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	20000344 	.word	0x20000344

08002d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d68:	f7ff ffee 	bl	8002d48 <HAL_GetTick>
 8002d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d78:	d005      	beq.n	8002d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <HAL_Delay+0x44>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4413      	add	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d86:	bf00      	nop
 8002d88:	f7ff ffde 	bl	8002d48 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d8f7      	bhi.n	8002d88 <HAL_Delay+0x28>
  {
  }
}
 8002d98:	bf00      	nop
 8002d9a:	bf00      	nop
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20000014 	.word	0x20000014

08002da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002db8:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <__NVIC_SetPriorityGrouping+0x44>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dda:	4a04      	ldr	r2, [pc, #16]	; (8002dec <__NVIC_SetPriorityGrouping+0x44>)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	60d3      	str	r3, [r2, #12]
}
 8002de0:	bf00      	nop
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002df4:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <__NVIC_GetPriorityGrouping+0x18>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	0a1b      	lsrs	r3, r3, #8
 8002dfa:	f003 0307 	and.w	r3, r3, #7
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	e000ed00 	.word	0xe000ed00

08002e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	6039      	str	r1, [r7, #0]
 8002e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	db0a      	blt.n	8002e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	490c      	ldr	r1, [pc, #48]	; (8002e58 <__NVIC_SetPriority+0x4c>)
 8002e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2a:	0112      	lsls	r2, r2, #4
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	440b      	add	r3, r1
 8002e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e34:	e00a      	b.n	8002e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	4908      	ldr	r1, [pc, #32]	; (8002e5c <__NVIC_SetPriority+0x50>)
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	3b04      	subs	r3, #4
 8002e44:	0112      	lsls	r2, r2, #4
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	440b      	add	r3, r1
 8002e4a:	761a      	strb	r2, [r3, #24]
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	e000e100 	.word	0xe000e100
 8002e5c:	e000ed00 	.word	0xe000ed00

08002e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b089      	sub	sp, #36	; 0x24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f1c3 0307 	rsb	r3, r3, #7
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	bf28      	it	cs
 8002e7e:	2304      	movcs	r3, #4
 8002e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	3304      	adds	r3, #4
 8002e86:	2b06      	cmp	r3, #6
 8002e88:	d902      	bls.n	8002e90 <NVIC_EncodePriority+0x30>
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3b03      	subs	r3, #3
 8002e8e:	e000      	b.n	8002e92 <NVIC_EncodePriority+0x32>
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43da      	mvns	r2, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	401a      	ands	r2, r3
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ea8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb2:	43d9      	mvns	r1, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb8:	4313      	orrs	r3, r2
         );
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3724      	adds	r7, #36	; 0x24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
	...

08002ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ed8:	d301      	bcc.n	8002ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eda:	2301      	movs	r3, #1
 8002edc:	e00f      	b.n	8002efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ede:	4a0a      	ldr	r2, [pc, #40]	; (8002f08 <SysTick_Config+0x40>)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ee6:	210f      	movs	r1, #15
 8002ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002eec:	f7ff ff8e 	bl	8002e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <SysTick_Config+0x40>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ef6:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <SysTick_Config+0x40>)
 8002ef8:	2207      	movs	r2, #7
 8002efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	e000e010 	.word	0xe000e010

08002f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff ff47 	bl	8002da8 <__NVIC_SetPriorityGrouping>
}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b086      	sub	sp, #24
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	4603      	mov	r3, r0
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	607a      	str	r2, [r7, #4]
 8002f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f34:	f7ff ff5c 	bl	8002df0 <__NVIC_GetPriorityGrouping>
 8002f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	68b9      	ldr	r1, [r7, #8]
 8002f3e:	6978      	ldr	r0, [r7, #20]
 8002f40:	f7ff ff8e 	bl	8002e60 <NVIC_EncodePriority>
 8002f44:	4602      	mov	r2, r0
 8002f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff ff5d 	bl	8002e0c <__NVIC_SetPriority>
}
 8002f52:	bf00      	nop
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff ffb0 	bl	8002ec8 <SysTick_Config>
 8002f68:	4603      	mov	r3, r0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b089      	sub	sp, #36	; 0x24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	e159      	b.n	8003244 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f90:	2201      	movs	r2, #1
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	f040 8148 	bne.w	800323e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d005      	beq.n	8002fc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d130      	bne.n	8003028 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	2203      	movs	r2, #3
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	f003 0201 	and.w	r2, r3, #1
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	2b03      	cmp	r3, #3
 8003032:	d017      	beq.n	8003064 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	2203      	movs	r2, #3
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d123      	bne.n	80030b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	08da      	lsrs	r2, r3, #3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3208      	adds	r2, #8
 8003078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800307c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	220f      	movs	r2, #15
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	08da      	lsrs	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3208      	adds	r2, #8
 80030b2:	69b9      	ldr	r1, [r7, #24]
 80030b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	2203      	movs	r2, #3
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 0203 	and.w	r2, r3, #3
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 80a2 	beq.w	800323e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	4b57      	ldr	r3, [pc, #348]	; (800325c <HAL_GPIO_Init+0x2e8>)
 8003100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003102:	4a56      	ldr	r2, [pc, #344]	; (800325c <HAL_GPIO_Init+0x2e8>)
 8003104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003108:	6453      	str	r3, [r2, #68]	; 0x44
 800310a:	4b54      	ldr	r3, [pc, #336]	; (800325c <HAL_GPIO_Init+0x2e8>)
 800310c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003116:	4a52      	ldr	r2, [pc, #328]	; (8003260 <HAL_GPIO_Init+0x2ec>)
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	089b      	lsrs	r3, r3, #2
 800311c:	3302      	adds	r3, #2
 800311e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	220f      	movs	r2, #15
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43db      	mvns	r3, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4013      	ands	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a49      	ldr	r2, [pc, #292]	; (8003264 <HAL_GPIO_Init+0x2f0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d019      	beq.n	8003176 <HAL_GPIO_Init+0x202>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a48      	ldr	r2, [pc, #288]	; (8003268 <HAL_GPIO_Init+0x2f4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d013      	beq.n	8003172 <HAL_GPIO_Init+0x1fe>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a47      	ldr	r2, [pc, #284]	; (800326c <HAL_GPIO_Init+0x2f8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d00d      	beq.n	800316e <HAL_GPIO_Init+0x1fa>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a46      	ldr	r2, [pc, #280]	; (8003270 <HAL_GPIO_Init+0x2fc>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d007      	beq.n	800316a <HAL_GPIO_Init+0x1f6>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a45      	ldr	r2, [pc, #276]	; (8003274 <HAL_GPIO_Init+0x300>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d101      	bne.n	8003166 <HAL_GPIO_Init+0x1f2>
 8003162:	2304      	movs	r3, #4
 8003164:	e008      	b.n	8003178 <HAL_GPIO_Init+0x204>
 8003166:	2307      	movs	r3, #7
 8003168:	e006      	b.n	8003178 <HAL_GPIO_Init+0x204>
 800316a:	2303      	movs	r3, #3
 800316c:	e004      	b.n	8003178 <HAL_GPIO_Init+0x204>
 800316e:	2302      	movs	r3, #2
 8003170:	e002      	b.n	8003178 <HAL_GPIO_Init+0x204>
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <HAL_GPIO_Init+0x204>
 8003176:	2300      	movs	r3, #0
 8003178:	69fa      	ldr	r2, [r7, #28]
 800317a:	f002 0203 	and.w	r2, r2, #3
 800317e:	0092      	lsls	r2, r2, #2
 8003180:	4093      	lsls	r3, r2
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4313      	orrs	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003188:	4935      	ldr	r1, [pc, #212]	; (8003260 <HAL_GPIO_Init+0x2ec>)
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	089b      	lsrs	r3, r3, #2
 800318e:	3302      	adds	r3, #2
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003196:	4b38      	ldr	r3, [pc, #224]	; (8003278 <HAL_GPIO_Init+0x304>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	43db      	mvns	r3, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ba:	4a2f      	ldr	r2, [pc, #188]	; (8003278 <HAL_GPIO_Init+0x304>)
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031c0:	4b2d      	ldr	r3, [pc, #180]	; (8003278 <HAL_GPIO_Init+0x304>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	43db      	mvns	r3, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031e4:	4a24      	ldr	r2, [pc, #144]	; (8003278 <HAL_GPIO_Init+0x304>)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031ea:	4b23      	ldr	r3, [pc, #140]	; (8003278 <HAL_GPIO_Init+0x304>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	43db      	mvns	r3, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4013      	ands	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800320e:	4a1a      	ldr	r2, [pc, #104]	; (8003278 <HAL_GPIO_Init+0x304>)
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003214:	4b18      	ldr	r3, [pc, #96]	; (8003278 <HAL_GPIO_Init+0x304>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	43db      	mvns	r3, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4013      	ands	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003238:	4a0f      	ldr	r2, [pc, #60]	; (8003278 <HAL_GPIO_Init+0x304>)
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	3301      	adds	r3, #1
 8003242:	61fb      	str	r3, [r7, #28]
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	2b0f      	cmp	r3, #15
 8003248:	f67f aea2 	bls.w	8002f90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800324c:	bf00      	nop
 800324e:	bf00      	nop
 8003250:	3724      	adds	r7, #36	; 0x24
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40023800 	.word	0x40023800
 8003260:	40013800 	.word	0x40013800
 8003264:	40020000 	.word	0x40020000
 8003268:	40020400 	.word	0x40020400
 800326c:	40020800 	.word	0x40020800
 8003270:	40020c00 	.word	0x40020c00
 8003274:	40021000 	.word	0x40021000
 8003278:	40013c00 	.word	0x40013c00

0800327c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	807b      	strh	r3, [r7, #2]
 8003288:	4613      	mov	r3, r2
 800328a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800328c:	787b      	ldrb	r3, [r7, #1]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003292:	887a      	ldrh	r2, [r7, #2]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003298:	e003      	b.n	80032a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800329a:	887b      	ldrh	r3, [r7, #2]
 800329c:	041a      	lsls	r2, r3, #16
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	619a      	str	r2, [r3, #24]
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
	...

080032b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e12b      	b.n	800351a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d106      	bne.n	80032dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7ff fb14 	bl	8002904 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2224      	movs	r2, #36	; 0x24
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0201 	bic.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003302:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003312:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003314:	f001 fcea 	bl	8004cec <HAL_RCC_GetPCLK1Freq>
 8003318:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	4a81      	ldr	r2, [pc, #516]	; (8003524 <HAL_I2C_Init+0x274>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d807      	bhi.n	8003334 <HAL_I2C_Init+0x84>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4a80      	ldr	r2, [pc, #512]	; (8003528 <HAL_I2C_Init+0x278>)
 8003328:	4293      	cmp	r3, r2
 800332a:	bf94      	ite	ls
 800332c:	2301      	movls	r3, #1
 800332e:	2300      	movhi	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	e006      	b.n	8003342 <HAL_I2C_Init+0x92>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4a7d      	ldr	r2, [pc, #500]	; (800352c <HAL_I2C_Init+0x27c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	bf94      	ite	ls
 800333c:	2301      	movls	r3, #1
 800333e:	2300      	movhi	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e0e7      	b.n	800351a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4a78      	ldr	r2, [pc, #480]	; (8003530 <HAL_I2C_Init+0x280>)
 800334e:	fba2 2303 	umull	r2, r3, r2, r3
 8003352:	0c9b      	lsrs	r3, r3, #18
 8003354:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	430a      	orrs	r2, r1
 8003368:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	4a6a      	ldr	r2, [pc, #424]	; (8003524 <HAL_I2C_Init+0x274>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d802      	bhi.n	8003384 <HAL_I2C_Init+0xd4>
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	3301      	adds	r3, #1
 8003382:	e009      	b.n	8003398 <HAL_I2C_Init+0xe8>
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800338a:	fb02 f303 	mul.w	r3, r2, r3
 800338e:	4a69      	ldr	r2, [pc, #420]	; (8003534 <HAL_I2C_Init+0x284>)
 8003390:	fba2 2303 	umull	r2, r3, r2, r3
 8003394:	099b      	lsrs	r3, r3, #6
 8003396:	3301      	adds	r3, #1
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6812      	ldr	r2, [r2, #0]
 800339c:	430b      	orrs	r3, r1
 800339e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	495c      	ldr	r1, [pc, #368]	; (8003524 <HAL_I2C_Init+0x274>)
 80033b4:	428b      	cmp	r3, r1
 80033b6:	d819      	bhi.n	80033ec <HAL_I2C_Init+0x13c>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	1e59      	subs	r1, r3, #1
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80033c6:	1c59      	adds	r1, r3, #1
 80033c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033cc:	400b      	ands	r3, r1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <HAL_I2C_Init+0x138>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	1e59      	subs	r1, r3, #1
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80033e0:	3301      	adds	r3, #1
 80033e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e6:	e051      	b.n	800348c <HAL_I2C_Init+0x1dc>
 80033e8:	2304      	movs	r3, #4
 80033ea:	e04f      	b.n	800348c <HAL_I2C_Init+0x1dc>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d111      	bne.n	8003418 <HAL_I2C_Init+0x168>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	1e58      	subs	r0, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6859      	ldr	r1, [r3, #4]
 80033fc:	460b      	mov	r3, r1
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	440b      	add	r3, r1
 8003402:	fbb0 f3f3 	udiv	r3, r0, r3
 8003406:	3301      	adds	r3, #1
 8003408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800340c:	2b00      	cmp	r3, #0
 800340e:	bf0c      	ite	eq
 8003410:	2301      	moveq	r3, #1
 8003412:	2300      	movne	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	e012      	b.n	800343e <HAL_I2C_Init+0x18e>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	1e58      	subs	r0, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6859      	ldr	r1, [r3, #4]
 8003420:	460b      	mov	r3, r1
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	0099      	lsls	r1, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	fbb0 f3f3 	udiv	r3, r0, r3
 800342e:	3301      	adds	r3, #1
 8003430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003434:	2b00      	cmp	r3, #0
 8003436:	bf0c      	ite	eq
 8003438:	2301      	moveq	r3, #1
 800343a:	2300      	movne	r3, #0
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_I2C_Init+0x196>
 8003442:	2301      	movs	r3, #1
 8003444:	e022      	b.n	800348c <HAL_I2C_Init+0x1dc>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10e      	bne.n	800346c <HAL_I2C_Init+0x1bc>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	1e58      	subs	r0, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6859      	ldr	r1, [r3, #4]
 8003456:	460b      	mov	r3, r1
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	440b      	add	r3, r1
 800345c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003460:	3301      	adds	r3, #1
 8003462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800346a:	e00f      	b.n	800348c <HAL_I2C_Init+0x1dc>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	1e58      	subs	r0, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6859      	ldr	r1, [r3, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	0099      	lsls	r1, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003482:	3301      	adds	r3, #1
 8003484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003488:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	6809      	ldr	r1, [r1, #0]
 8003490:	4313      	orrs	r3, r2
 8003492:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69da      	ldr	r2, [r3, #28]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6911      	ldr	r1, [r2, #16]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	68d2      	ldr	r2, [r2, #12]
 80034c6:	4311      	orrs	r1, r2
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	430b      	orrs	r3, r1
 80034ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	695a      	ldr	r2, [r3, #20]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0201 	orr.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2220      	movs	r2, #32
 8003506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	000186a0 	.word	0x000186a0
 8003528:	001e847f 	.word	0x001e847f
 800352c:	003d08ff 	.word	0x003d08ff
 8003530:	431bde83 	.word	0x431bde83
 8003534:	10624dd3 	.word	0x10624dd3

08003538 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b088      	sub	sp, #32
 800353c:	af02      	add	r7, sp, #8
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	4608      	mov	r0, r1
 8003542:	4611      	mov	r1, r2
 8003544:	461a      	mov	r2, r3
 8003546:	4603      	mov	r3, r0
 8003548:	817b      	strh	r3, [r7, #10]
 800354a:	460b      	mov	r3, r1
 800354c:	813b      	strh	r3, [r7, #8]
 800354e:	4613      	mov	r3, r2
 8003550:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003552:	f7ff fbf9 	bl	8002d48 <HAL_GetTick>
 8003556:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b20      	cmp	r3, #32
 8003562:	f040 80d9 	bne.w	8003718 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	2319      	movs	r3, #25
 800356c:	2201      	movs	r2, #1
 800356e:	496d      	ldr	r1, [pc, #436]	; (8003724 <HAL_I2C_Mem_Write+0x1ec>)
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 fdad 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800357c:	2302      	movs	r3, #2
 800357e:	e0cc      	b.n	800371a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_I2C_Mem_Write+0x56>
 800358a:	2302      	movs	r3, #2
 800358c:	e0c5      	b.n	800371a <HAL_I2C_Mem_Write+0x1e2>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d007      	beq.n	80035b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0201 	orr.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2221      	movs	r2, #33	; 0x21
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2240      	movs	r2, #64	; 0x40
 80035d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a3a      	ldr	r2, [r7, #32]
 80035de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4a4d      	ldr	r2, [pc, #308]	; (8003728 <HAL_I2C_Mem_Write+0x1f0>)
 80035f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035f6:	88f8      	ldrh	r0, [r7, #6]
 80035f8:	893a      	ldrh	r2, [r7, #8]
 80035fa:	8979      	ldrh	r1, [r7, #10]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	9301      	str	r3, [sp, #4]
 8003600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	4603      	mov	r3, r0
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 fbe4 	bl	8003dd4 <I2C_RequestMemoryWrite>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d052      	beq.n	80036b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e081      	b.n	800371a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 fe2e 	bl	800427c <I2C_WaitOnTXEFlagUntilTimeout>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00d      	beq.n	8003642 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	2b04      	cmp	r3, #4
 800362c:	d107      	bne.n	800363e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800363c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e06b      	b.n	800371a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	781a      	ldrb	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365c:	3b01      	subs	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b04      	cmp	r3, #4
 800367e:	d11b      	bne.n	80036b8 <HAL_I2C_Mem_Write+0x180>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003684:	2b00      	cmp	r3, #0
 8003686:	d017      	beq.n	80036b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	781a      	ldrb	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1aa      	bne.n	8003616 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 fe1a 	bl	80042fe <I2C_WaitOnBTFFlagUntilTimeout>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00d      	beq.n	80036ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d107      	bne.n	80036e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e016      	b.n	800371a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	e000      	b.n	800371a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003718:	2302      	movs	r3, #2
  }
}
 800371a:	4618      	mov	r0, r3
 800371c:	3718      	adds	r7, #24
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	00100002 	.word	0x00100002
 8003728:	ffff0000 	.word	0xffff0000

0800372c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08c      	sub	sp, #48	; 0x30
 8003730:	af02      	add	r7, sp, #8
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	4608      	mov	r0, r1
 8003736:	4611      	mov	r1, r2
 8003738:	461a      	mov	r2, r3
 800373a:	4603      	mov	r3, r0
 800373c:	817b      	strh	r3, [r7, #10]
 800373e:	460b      	mov	r3, r1
 8003740:	813b      	strh	r3, [r7, #8]
 8003742:	4613      	mov	r3, r2
 8003744:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003746:	f7ff faff 	bl	8002d48 <HAL_GetTick>
 800374a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b20      	cmp	r3, #32
 8003756:	f040 8208 	bne.w	8003b6a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	2319      	movs	r3, #25
 8003760:	2201      	movs	r2, #1
 8003762:	497b      	ldr	r1, [pc, #492]	; (8003950 <HAL_I2C_Mem_Read+0x224>)
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 fcb3 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003770:	2302      	movs	r3, #2
 8003772:	e1fb      	b.n	8003b6c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_I2C_Mem_Read+0x56>
 800377e:	2302      	movs	r3, #2
 8003780:	e1f4      	b.n	8003b6c <HAL_I2C_Mem_Read+0x440>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b01      	cmp	r3, #1
 8003796:	d007      	beq.n	80037a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0201 	orr.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2222      	movs	r2, #34	; 0x22
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2240      	movs	r2, #64	; 0x40
 80037c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80037d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4a5b      	ldr	r2, [pc, #364]	; (8003954 <HAL_I2C_Mem_Read+0x228>)
 80037e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037ea:	88f8      	ldrh	r0, [r7, #6]
 80037ec:	893a      	ldrh	r2, [r7, #8]
 80037ee:	8979      	ldrh	r1, [r7, #10]
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	9301      	str	r3, [sp, #4]
 80037f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	4603      	mov	r3, r0
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 fb80 	bl	8003f00 <I2C_RequestMemoryRead>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e1b0      	b.n	8003b6c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380e:	2b00      	cmp	r3, #0
 8003810:	d113      	bne.n	800383a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003812:	2300      	movs	r3, #0
 8003814:	623b      	str	r3, [r7, #32]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	623b      	str	r3, [r7, #32]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	623b      	str	r3, [r7, #32]
 8003826:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	e184      	b.n	8003b44 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383e:	2b01      	cmp	r3, #1
 8003840:	d11b      	bne.n	800387a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003850:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003852:	2300      	movs	r3, #0
 8003854:	61fb      	str	r3, [r7, #28]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	61fb      	str	r3, [r7, #28]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	e164      	b.n	8003b44 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387e:	2b02      	cmp	r3, #2
 8003880:	d11b      	bne.n	80038ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003890:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a2:	2300      	movs	r3, #0
 80038a4:	61bb      	str	r3, [r7, #24]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	61bb      	str	r3, [r7, #24]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	61bb      	str	r3, [r7, #24]
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	e144      	b.n	8003b44 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	617b      	str	r3, [r7, #20]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038d0:	e138      	b.n	8003b44 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d6:	2b03      	cmp	r3, #3
 80038d8:	f200 80f1 	bhi.w	8003abe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d123      	bne.n	800392c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 fd49 	bl	8004380 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e139      	b.n	8003b6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691a      	ldr	r2, [r3, #16]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	855a      	strh	r2, [r3, #42]	; 0x2a
 800392a:	e10b      	b.n	8003b44 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003930:	2b02      	cmp	r3, #2
 8003932:	d14e      	bne.n	80039d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393a:	2200      	movs	r2, #0
 800393c:	4906      	ldr	r1, [pc, #24]	; (8003958 <HAL_I2C_Mem_Read+0x22c>)
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 fbc6 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d008      	beq.n	800395c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e10e      	b.n	8003b6c <HAL_I2C_Mem_Read+0x440>
 800394e:	bf00      	nop
 8003950:	00100002 	.word	0x00100002
 8003954:	ffff0000 	.word	0xffff0000
 8003958:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800396a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691a      	ldr	r2, [r3, #16]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039d0:	e0b8      	b.n	8003b44 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d8:	2200      	movs	r2, #0
 80039da:	4966      	ldr	r1, [pc, #408]	; (8003b74 <HAL_I2C_Mem_Read+0x448>)
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 fb77 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e0bf      	b.n	8003b6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	1c5a      	adds	r2, r3, #1
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a34:	2200      	movs	r2, #0
 8003a36:	494f      	ldr	r1, [pc, #316]	; (8003b74 <HAL_I2C_Mem_Read+0x448>)
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 fb49 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e091      	b.n	8003b6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	691a      	ldr	r2, [r3, #16]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003abc:	e042      	b.n	8003b44 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 fc5c 	bl	8004380 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e04c      	b.n	8003b6c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d118      	bne.n	8003b44 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f47f aec2 	bne.w	80038d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	e000      	b.n	8003b6c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003b6a:	2302      	movs	r3, #2
  }
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3728      	adds	r7, #40	; 0x28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	00010004 	.word	0x00010004

08003b78 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08a      	sub	sp, #40	; 0x28
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	607a      	str	r2, [r7, #4]
 8003b82:	603b      	str	r3, [r7, #0]
 8003b84:	460b      	mov	r3, r1
 8003b86:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003b88:	f7ff f8de 	bl	8002d48 <HAL_GetTick>
 8003b8c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b20      	cmp	r3, #32
 8003b9c:	f040 8111 	bne.w	8003dc2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	2319      	movs	r3, #25
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	4988      	ldr	r1, [pc, #544]	; (8003dcc <HAL_I2C_IsDeviceReady+0x254>)
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 fa90 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e104      	b.n	8003dc4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d101      	bne.n	8003bc8 <HAL_I2C_IsDeviceReady+0x50>
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	e0fd      	b.n	8003dc4 <HAL_I2C_IsDeviceReady+0x24c>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d007      	beq.n	8003bee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f042 0201 	orr.w	r2, r2, #1
 8003bec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bfc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2224      	movs	r2, #36	; 0x24
 8003c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4a70      	ldr	r2, [pc, #448]	; (8003dd0 <HAL_I2C_IsDeviceReady+0x258>)
 8003c10:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c20:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 fa4e 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00d      	beq.n	8003c56 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c48:	d103      	bne.n	8003c52 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e0b6      	b.n	8003dc4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c56:	897b      	ldrh	r3, [r7, #10]
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c64:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003c66:	f7ff f86f 	bl	8002d48 <HAL_GetTick>
 8003c6a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	bf0c      	ite	eq
 8003c7a:	2301      	moveq	r3, #1
 8003c7c:	2300      	movne	r3, #0
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c90:	bf0c      	ite	eq
 8003c92:	2301      	moveq	r3, #1
 8003c94:	2300      	movne	r3, #0
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c9a:	e025      	b.n	8003ce8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c9c:	f7ff f854 	bl	8002d48 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d302      	bcc.n	8003cb2 <HAL_I2C_IsDeviceReady+0x13a>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d103      	bne.n	8003cba <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	22a0      	movs	r2, #160	; 0xa0
 8003cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	bf0c      	ite	eq
 8003cc8:	2301      	moveq	r3, #1
 8003cca:	2300      	movne	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cde:	bf0c      	ite	eq
 8003ce0:	2301      	moveq	r3, #1
 8003ce2:	2300      	movne	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2ba0      	cmp	r3, #160	; 0xa0
 8003cf2:	d005      	beq.n	8003d00 <HAL_I2C_IsDeviceReady+0x188>
 8003cf4:	7dfb      	ldrb	r3, [r7, #23]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d102      	bne.n	8003d00 <HAL_I2C_IsDeviceReady+0x188>
 8003cfa:	7dbb      	ldrb	r3, [r7, #22]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0cd      	beq.n	8003c9c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d129      	bne.n	8003d6a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d24:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d26:	2300      	movs	r3, #0
 8003d28:	613b      	str	r3, [r7, #16]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	613b      	str	r3, [r7, #16]
 8003d3a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	2319      	movs	r3, #25
 8003d42:	2201      	movs	r2, #1
 8003d44:	4921      	ldr	r1, [pc, #132]	; (8003dcc <HAL_I2C_IsDeviceReady+0x254>)
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 f9c2 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e036      	b.n	8003dc4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	e02c      	b.n	8003dc4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d78:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d82:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	2319      	movs	r3, #25
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	490f      	ldr	r1, [pc, #60]	; (8003dcc <HAL_I2C_IsDeviceReady+0x254>)
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 f99e 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e012      	b.n	8003dc4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	3301      	adds	r3, #1
 8003da2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	f4ff af32 	bcc.w	8003c12 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2220      	movs	r2, #32
 8003db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003dc2:	2302      	movs	r3, #2
  }
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3720      	adds	r7, #32
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	00100002 	.word	0x00100002
 8003dd0:	ffff0000 	.word	0xffff0000

08003dd4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b088      	sub	sp, #32
 8003dd8:	af02      	add	r7, sp, #8
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	4608      	mov	r0, r1
 8003dde:	4611      	mov	r1, r2
 8003de0:	461a      	mov	r2, r3
 8003de2:	4603      	mov	r3, r0
 8003de4:	817b      	strh	r3, [r7, #10]
 8003de6:	460b      	mov	r3, r1
 8003de8:	813b      	strh	r3, [r7, #8]
 8003dea:	4613      	mov	r3, r2
 8003dec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dfc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 f960 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00d      	beq.n	8003e32 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e24:	d103      	bne.n	8003e2e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e05f      	b.n	8003ef2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e32:	897b      	ldrh	r3, [r7, #10]
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	461a      	mov	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	6a3a      	ldr	r2, [r7, #32]
 8003e46:	492d      	ldr	r1, [pc, #180]	; (8003efc <I2C_RequestMemoryWrite+0x128>)
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f998 	bl	800417e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e04c      	b.n	8003ef2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e70:	6a39      	ldr	r1, [r7, #32]
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 fa02 	bl	800427c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00d      	beq.n	8003e9a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d107      	bne.n	8003e96 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e02b      	b.n	8003ef2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e9a:	88fb      	ldrh	r3, [r7, #6]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d105      	bne.n	8003eac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ea0:	893b      	ldrh	r3, [r7, #8]
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	611a      	str	r2, [r3, #16]
 8003eaa:	e021      	b.n	8003ef0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003eac:	893b      	ldrh	r3, [r7, #8]
 8003eae:	0a1b      	lsrs	r3, r3, #8
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ebc:	6a39      	ldr	r1, [r7, #32]
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 f9dc 	bl	800427c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00d      	beq.n	8003ee6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d107      	bne.n	8003ee2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e005      	b.n	8003ef2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ee6:	893b      	ldrh	r3, [r7, #8]
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3718      	adds	r7, #24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	00010002 	.word	0x00010002

08003f00 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af02      	add	r7, sp, #8
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	4608      	mov	r0, r1
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4603      	mov	r3, r0
 8003f10:	817b      	strh	r3, [r7, #10]
 8003f12:	460b      	mov	r3, r1
 8003f14:	813b      	strh	r3, [r7, #8]
 8003f16:	4613      	mov	r3, r2
 8003f18:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f28:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 f8c2 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00d      	beq.n	8003f6e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f60:	d103      	bne.n	8003f6a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e0aa      	b.n	80040c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f6e:	897b      	ldrh	r3, [r7, #10]
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	461a      	mov	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	6a3a      	ldr	r2, [r7, #32]
 8003f82:	4952      	ldr	r1, [pc, #328]	; (80040cc <I2C_RequestMemoryRead+0x1cc>)
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 f8fa 	bl	800417e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e097      	b.n	80040c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f94:	2300      	movs	r3, #0
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	617b      	str	r3, [r7, #20]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fac:	6a39      	ldr	r1, [r7, #32]
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 f964 	bl	800427c <I2C_WaitOnTXEFlagUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00d      	beq.n	8003fd6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d107      	bne.n	8003fd2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e076      	b.n	80040c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fd6:	88fb      	ldrh	r3, [r7, #6]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d105      	bne.n	8003fe8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fdc:	893b      	ldrh	r3, [r7, #8]
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	611a      	str	r2, [r3, #16]
 8003fe6:	e021      	b.n	800402c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fe8:	893b      	ldrh	r3, [r7, #8]
 8003fea:	0a1b      	lsrs	r3, r3, #8
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff8:	6a39      	ldr	r1, [r7, #32]
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 f93e 	bl	800427c <I2C_WaitOnTXEFlagUntilTimeout>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00d      	beq.n	8004022 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	2b04      	cmp	r3, #4
 800400c:	d107      	bne.n	800401e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800401c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e050      	b.n	80040c4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004022:	893b      	ldrh	r3, [r7, #8]
 8004024:	b2da      	uxtb	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800402c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800402e:	6a39      	ldr	r1, [r7, #32]
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 f923 	bl	800427c <I2C_WaitOnTXEFlagUntilTimeout>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00d      	beq.n	8004058 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	2b04      	cmp	r3, #4
 8004042:	d107      	bne.n	8004054 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004052:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e035      	b.n	80040c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004066:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	2200      	movs	r2, #0
 8004070:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 f82b 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00d      	beq.n	800409c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800408e:	d103      	bne.n	8004098 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004096:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e013      	b.n	80040c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800409c:	897b      	ldrh	r3, [r7, #10]
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	f043 0301 	orr.w	r3, r3, #1
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	6a3a      	ldr	r2, [r7, #32]
 80040b0:	4906      	ldr	r1, [pc, #24]	; (80040cc <I2C_RequestMemoryRead+0x1cc>)
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f863 	bl	800417e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	00010002 	.word	0x00010002

080040d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	4613      	mov	r3, r2
 80040de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040e0:	e025      	b.n	800412e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040e8:	d021      	beq.n	800412e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ea:	f7fe fe2d 	bl	8002d48 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d302      	bcc.n	8004100 <I2C_WaitOnFlagUntilTimeout+0x30>
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d116      	bne.n	800412e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	f043 0220 	orr.w	r2, r3, #32
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e023      	b.n	8004176 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	0c1b      	lsrs	r3, r3, #16
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b01      	cmp	r3, #1
 8004136:	d10d      	bne.n	8004154 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	43da      	mvns	r2, r3
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4013      	ands	r3, r2
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	bf0c      	ite	eq
 800414a:	2301      	moveq	r3, #1
 800414c:	2300      	movne	r3, #0
 800414e:	b2db      	uxtb	r3, r3
 8004150:	461a      	mov	r2, r3
 8004152:	e00c      	b.n	800416e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	43da      	mvns	r2, r3
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4013      	ands	r3, r2
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	bf0c      	ite	eq
 8004166:	2301      	moveq	r3, #1
 8004168:	2300      	movne	r3, #0
 800416a:	b2db      	uxtb	r3, r3
 800416c:	461a      	mov	r2, r3
 800416e:	79fb      	ldrb	r3, [r7, #7]
 8004170:	429a      	cmp	r2, r3
 8004172:	d0b6      	beq.n	80040e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b084      	sub	sp, #16
 8004182:	af00      	add	r7, sp, #0
 8004184:	60f8      	str	r0, [r7, #12]
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	607a      	str	r2, [r7, #4]
 800418a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800418c:	e051      	b.n	8004232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800419c:	d123      	bne.n	80041e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2220      	movs	r2, #32
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	f043 0204 	orr.w	r2, r3, #4
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e046      	b.n	8004274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041ec:	d021      	beq.n	8004232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ee:	f7fe fdab 	bl	8002d48 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d302      	bcc.n	8004204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d116      	bne.n	8004232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	f043 0220 	orr.w	r2, r3, #32
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e020      	b.n	8004274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	0c1b      	lsrs	r3, r3, #16
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b01      	cmp	r3, #1
 800423a:	d10c      	bne.n	8004256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	43da      	mvns	r2, r3
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	4013      	ands	r3, r2
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	bf14      	ite	ne
 800424e:	2301      	movne	r3, #1
 8004250:	2300      	moveq	r3, #0
 8004252:	b2db      	uxtb	r3, r3
 8004254:	e00b      	b.n	800426e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	43da      	mvns	r2, r3
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	4013      	ands	r3, r2
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	bf14      	ite	ne
 8004268:	2301      	movne	r3, #1
 800426a:	2300      	moveq	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d18d      	bne.n	800418e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004288:	e02d      	b.n	80042e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 f8ce 	bl	800442c <I2C_IsAcknowledgeFailed>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e02d      	b.n	80042f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042a0:	d021      	beq.n	80042e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a2:	f7fe fd51 	bl	8002d48 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d302      	bcc.n	80042b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d116      	bne.n	80042e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2220      	movs	r2, #32
 80042c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	f043 0220 	orr.w	r2, r3, #32
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e007      	b.n	80042f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f0:	2b80      	cmp	r3, #128	; 0x80
 80042f2:	d1ca      	bne.n	800428a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b084      	sub	sp, #16
 8004302:	af00      	add	r7, sp, #0
 8004304:	60f8      	str	r0, [r7, #12]
 8004306:	60b9      	str	r1, [r7, #8]
 8004308:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800430a:	e02d      	b.n	8004368 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 f88d 	bl	800442c <I2C_IsAcknowledgeFailed>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e02d      	b.n	8004378 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004322:	d021      	beq.n	8004368 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004324:	f7fe fd10 	bl	8002d48 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	429a      	cmp	r2, r3
 8004332:	d302      	bcc.n	800433a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d116      	bne.n	8004368 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2220      	movs	r2, #32
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	f043 0220 	orr.w	r2, r3, #32
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e007      	b.n	8004378 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	2b04      	cmp	r3, #4
 8004374:	d1ca      	bne.n	800430c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800438c:	e042      	b.n	8004414 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	2b10      	cmp	r3, #16
 800439a:	d119      	bne.n	80043d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0210 	mvn.w	r2, #16
 80043a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e029      	b.n	8004424 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d0:	f7fe fcba 	bl	8002d48 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d302      	bcc.n	80043e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d116      	bne.n	8004414 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	f043 0220 	orr.w	r2, r3, #32
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e007      	b.n	8004424 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441e:	2b40      	cmp	r3, #64	; 0x40
 8004420:	d1b5      	bne.n	800438e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800443e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004442:	d11b      	bne.n	800447c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800444c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2220      	movs	r2, #32
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004468:	f043 0204 	orr.w	r2, r3, #4
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e000      	b.n	800447e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
	...

0800448c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e267      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d075      	beq.n	8004596 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044aa:	4b88      	ldr	r3, [pc, #544]	; (80046cc <HAL_RCC_OscConfig+0x240>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 030c 	and.w	r3, r3, #12
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d00c      	beq.n	80044d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044b6:	4b85      	ldr	r3, [pc, #532]	; (80046cc <HAL_RCC_OscConfig+0x240>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d112      	bne.n	80044e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044c2:	4b82      	ldr	r3, [pc, #520]	; (80046cc <HAL_RCC_OscConfig+0x240>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044ce:	d10b      	bne.n	80044e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d0:	4b7e      	ldr	r3, [pc, #504]	; (80046cc <HAL_RCC_OscConfig+0x240>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d05b      	beq.n	8004594 <HAL_RCC_OscConfig+0x108>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d157      	bne.n	8004594 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e242      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f0:	d106      	bne.n	8004500 <HAL_RCC_OscConfig+0x74>
 80044f2:	4b76      	ldr	r3, [pc, #472]	; (80046cc <HAL_RCC_OscConfig+0x240>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a75      	ldr	r2, [pc, #468]	; (80046cc <HAL_RCC_OscConfig+0x240>)
 80044f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	e01d      	b.n	800453c <HAL_RCC_OscConfig+0xb0>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004508:	d10c      	bne.n	8004524 <HAL_RCC_OscConfig+0x98>
 800450a:	4b70      	ldr	r3, [pc, #448]	; (80046cc <HAL_RCC_OscConfig+0x240>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a6f      	ldr	r2, [pc, #444]	; (80046cc <HAL_RCC_OscConfig+0x240>)
 8004510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	4b6d      	ldr	r3, [pc, #436]	; (80046cc <HAL_RCC_OscConfig+0x240>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a6c      	ldr	r2, [pc, #432]	; (80046cc <HAL_RCC_OscConfig+0x240>)
 800451c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	e00b      	b.n	800453c <HAL_RCC_OscConfig+0xb0>
 8004524:	4b69      	ldr	r3, [pc, #420]	; (80046cc <HAL_RCC_OscConfig+0x240>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a68      	ldr	r2, [pc, #416]	; (80046cc <HAL_RCC_OscConfig+0x240>)
 800452a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	4b66      	ldr	r3, [pc, #408]	; (80046cc <HAL_RCC_OscConfig+0x240>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a65      	ldr	r2, [pc, #404]	; (80046cc <HAL_RCC_OscConfig+0x240>)
 8004536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800453a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d013      	beq.n	800456c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004544:	f7fe fc00 	bl	8002d48 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800454c:	f7fe fbfc 	bl	8002d48 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b64      	cmp	r3, #100	; 0x64
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e207      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455e:	4b5b      	ldr	r3, [pc, #364]	; (80046cc <HAL_RCC_OscConfig+0x240>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0xc0>
 800456a:	e014      	b.n	8004596 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456c:	f7fe fbec 	bl	8002d48 <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004574:	f7fe fbe8 	bl	8002d48 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b64      	cmp	r3, #100	; 0x64
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e1f3      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004586:	4b51      	ldr	r3, [pc, #324]	; (80046cc <HAL_RCC_OscConfig+0x240>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1f0      	bne.n	8004574 <HAL_RCC_OscConfig+0xe8>
 8004592:	e000      	b.n	8004596 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d063      	beq.n	800466a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045a2:	4b4a      	ldr	r3, [pc, #296]	; (80046cc <HAL_RCC_OscConfig+0x240>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 030c 	and.w	r3, r3, #12
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00b      	beq.n	80045c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ae:	4b47      	ldr	r3, [pc, #284]	; (80046cc <HAL_RCC_OscConfig+0x240>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045b6:	2b08      	cmp	r3, #8
 80045b8:	d11c      	bne.n	80045f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ba:	4b44      	ldr	r3, [pc, #272]	; (80046cc <HAL_RCC_OscConfig+0x240>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d116      	bne.n	80045f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045c6:	4b41      	ldr	r3, [pc, #260]	; (80046cc <HAL_RCC_OscConfig+0x240>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <HAL_RCC_OscConfig+0x152>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d001      	beq.n	80045de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e1c7      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045de:	4b3b      	ldr	r3, [pc, #236]	; (80046cc <HAL_RCC_OscConfig+0x240>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	4937      	ldr	r1, [pc, #220]	; (80046cc <HAL_RCC_OscConfig+0x240>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045f2:	e03a      	b.n	800466a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d020      	beq.n	800463e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045fc:	4b34      	ldr	r3, [pc, #208]	; (80046d0 <HAL_RCC_OscConfig+0x244>)
 80045fe:	2201      	movs	r2, #1
 8004600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004602:	f7fe fba1 	bl	8002d48 <HAL_GetTick>
 8004606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004608:	e008      	b.n	800461c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800460a:	f7fe fb9d 	bl	8002d48 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e1a8      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800461c:	4b2b      	ldr	r3, [pc, #172]	; (80046cc <HAL_RCC_OscConfig+0x240>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0f0      	beq.n	800460a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004628:	4b28      	ldr	r3, [pc, #160]	; (80046cc <HAL_RCC_OscConfig+0x240>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	00db      	lsls	r3, r3, #3
 8004636:	4925      	ldr	r1, [pc, #148]	; (80046cc <HAL_RCC_OscConfig+0x240>)
 8004638:	4313      	orrs	r3, r2
 800463a:	600b      	str	r3, [r1, #0]
 800463c:	e015      	b.n	800466a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800463e:	4b24      	ldr	r3, [pc, #144]	; (80046d0 <HAL_RCC_OscConfig+0x244>)
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7fe fb80 	bl	8002d48 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800464c:	f7fe fb7c 	bl	8002d48 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e187      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800465e:	4b1b      	ldr	r3, [pc, #108]	; (80046cc <HAL_RCC_OscConfig+0x240>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d036      	beq.n	80046e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d016      	beq.n	80046ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800467e:	4b15      	ldr	r3, [pc, #84]	; (80046d4 <HAL_RCC_OscConfig+0x248>)
 8004680:	2201      	movs	r2, #1
 8004682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004684:	f7fe fb60 	bl	8002d48 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800468c:	f7fe fb5c 	bl	8002d48 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e167      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800469e:	4b0b      	ldr	r3, [pc, #44]	; (80046cc <HAL_RCC_OscConfig+0x240>)
 80046a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0f0      	beq.n	800468c <HAL_RCC_OscConfig+0x200>
 80046aa:	e01b      	b.n	80046e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ac:	4b09      	ldr	r3, [pc, #36]	; (80046d4 <HAL_RCC_OscConfig+0x248>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b2:	f7fe fb49 	bl	8002d48 <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046b8:	e00e      	b.n	80046d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046ba:	f7fe fb45 	bl	8002d48 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d907      	bls.n	80046d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e150      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
 80046cc:	40023800 	.word	0x40023800
 80046d0:	42470000 	.word	0x42470000
 80046d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046d8:	4b88      	ldr	r3, [pc, #544]	; (80048fc <HAL_RCC_OscConfig+0x470>)
 80046da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1ea      	bne.n	80046ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 8097 	beq.w	8004820 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046f2:	2300      	movs	r3, #0
 80046f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046f6:	4b81      	ldr	r3, [pc, #516]	; (80048fc <HAL_RCC_OscConfig+0x470>)
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10f      	bne.n	8004722 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004702:	2300      	movs	r3, #0
 8004704:	60bb      	str	r3, [r7, #8]
 8004706:	4b7d      	ldr	r3, [pc, #500]	; (80048fc <HAL_RCC_OscConfig+0x470>)
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	4a7c      	ldr	r2, [pc, #496]	; (80048fc <HAL_RCC_OscConfig+0x470>)
 800470c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004710:	6413      	str	r3, [r2, #64]	; 0x40
 8004712:	4b7a      	ldr	r3, [pc, #488]	; (80048fc <HAL_RCC_OscConfig+0x470>)
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471a:	60bb      	str	r3, [r7, #8]
 800471c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800471e:	2301      	movs	r3, #1
 8004720:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004722:	4b77      	ldr	r3, [pc, #476]	; (8004900 <HAL_RCC_OscConfig+0x474>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472a:	2b00      	cmp	r3, #0
 800472c:	d118      	bne.n	8004760 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800472e:	4b74      	ldr	r3, [pc, #464]	; (8004900 <HAL_RCC_OscConfig+0x474>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a73      	ldr	r2, [pc, #460]	; (8004900 <HAL_RCC_OscConfig+0x474>)
 8004734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800473a:	f7fe fb05 	bl	8002d48 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004742:	f7fe fb01 	bl	8002d48 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e10c      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004754:	4b6a      	ldr	r3, [pc, #424]	; (8004900 <HAL_RCC_OscConfig+0x474>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0f0      	beq.n	8004742 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d106      	bne.n	8004776 <HAL_RCC_OscConfig+0x2ea>
 8004768:	4b64      	ldr	r3, [pc, #400]	; (80048fc <HAL_RCC_OscConfig+0x470>)
 800476a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476c:	4a63      	ldr	r2, [pc, #396]	; (80048fc <HAL_RCC_OscConfig+0x470>)
 800476e:	f043 0301 	orr.w	r3, r3, #1
 8004772:	6713      	str	r3, [r2, #112]	; 0x70
 8004774:	e01c      	b.n	80047b0 <HAL_RCC_OscConfig+0x324>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	2b05      	cmp	r3, #5
 800477c:	d10c      	bne.n	8004798 <HAL_RCC_OscConfig+0x30c>
 800477e:	4b5f      	ldr	r3, [pc, #380]	; (80048fc <HAL_RCC_OscConfig+0x470>)
 8004780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004782:	4a5e      	ldr	r2, [pc, #376]	; (80048fc <HAL_RCC_OscConfig+0x470>)
 8004784:	f043 0304 	orr.w	r3, r3, #4
 8004788:	6713      	str	r3, [r2, #112]	; 0x70
 800478a:	4b5c      	ldr	r3, [pc, #368]	; (80048fc <HAL_RCC_OscConfig+0x470>)
 800478c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478e:	4a5b      	ldr	r2, [pc, #364]	; (80048fc <HAL_RCC_OscConfig+0x470>)
 8004790:	f043 0301 	orr.w	r3, r3, #1
 8004794:	6713      	str	r3, [r2, #112]	; 0x70
 8004796:	e00b      	b.n	80047b0 <HAL_RCC_OscConfig+0x324>
 8004798:	4b58      	ldr	r3, [pc, #352]	; (80048fc <HAL_RCC_OscConfig+0x470>)
 800479a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479c:	4a57      	ldr	r2, [pc, #348]	; (80048fc <HAL_RCC_OscConfig+0x470>)
 800479e:	f023 0301 	bic.w	r3, r3, #1
 80047a2:	6713      	str	r3, [r2, #112]	; 0x70
 80047a4:	4b55      	ldr	r3, [pc, #340]	; (80048fc <HAL_RCC_OscConfig+0x470>)
 80047a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a8:	4a54      	ldr	r2, [pc, #336]	; (80048fc <HAL_RCC_OscConfig+0x470>)
 80047aa:	f023 0304 	bic.w	r3, r3, #4
 80047ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d015      	beq.n	80047e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b8:	f7fe fac6 	bl	8002d48 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047be:	e00a      	b.n	80047d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047c0:	f7fe fac2 	bl	8002d48 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e0cb      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d6:	4b49      	ldr	r3, [pc, #292]	; (80048fc <HAL_RCC_OscConfig+0x470>)
 80047d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0ee      	beq.n	80047c0 <HAL_RCC_OscConfig+0x334>
 80047e2:	e014      	b.n	800480e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047e4:	f7fe fab0 	bl	8002d48 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ea:	e00a      	b.n	8004802 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047ec:	f7fe faac 	bl	8002d48 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e0b5      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004802:	4b3e      	ldr	r3, [pc, #248]	; (80048fc <HAL_RCC_OscConfig+0x470>)
 8004804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1ee      	bne.n	80047ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800480e:	7dfb      	ldrb	r3, [r7, #23]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d105      	bne.n	8004820 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004814:	4b39      	ldr	r3, [pc, #228]	; (80048fc <HAL_RCC_OscConfig+0x470>)
 8004816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004818:	4a38      	ldr	r2, [pc, #224]	; (80048fc <HAL_RCC_OscConfig+0x470>)
 800481a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800481e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 80a1 	beq.w	800496c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800482a:	4b34      	ldr	r3, [pc, #208]	; (80048fc <HAL_RCC_OscConfig+0x470>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 030c 	and.w	r3, r3, #12
 8004832:	2b08      	cmp	r3, #8
 8004834:	d05c      	beq.n	80048f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	2b02      	cmp	r3, #2
 800483c:	d141      	bne.n	80048c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800483e:	4b31      	ldr	r3, [pc, #196]	; (8004904 <HAL_RCC_OscConfig+0x478>)
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004844:	f7fe fa80 	bl	8002d48 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800484c:	f7fe fa7c 	bl	8002d48 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e087      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800485e:	4b27      	ldr	r3, [pc, #156]	; (80048fc <HAL_RCC_OscConfig+0x470>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1f0      	bne.n	800484c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69da      	ldr	r2, [r3, #28]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	431a      	orrs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	019b      	lsls	r3, r3, #6
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004880:	085b      	lsrs	r3, r3, #1
 8004882:	3b01      	subs	r3, #1
 8004884:	041b      	lsls	r3, r3, #16
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488c:	061b      	lsls	r3, r3, #24
 800488e:	491b      	ldr	r1, [pc, #108]	; (80048fc <HAL_RCC_OscConfig+0x470>)
 8004890:	4313      	orrs	r3, r2
 8004892:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004894:	4b1b      	ldr	r3, [pc, #108]	; (8004904 <HAL_RCC_OscConfig+0x478>)
 8004896:	2201      	movs	r2, #1
 8004898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489a:	f7fe fa55 	bl	8002d48 <HAL_GetTick>
 800489e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048a0:	e008      	b.n	80048b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048a2:	f7fe fa51 	bl	8002d48 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e05c      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b4:	4b11      	ldr	r3, [pc, #68]	; (80048fc <HAL_RCC_OscConfig+0x470>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0f0      	beq.n	80048a2 <HAL_RCC_OscConfig+0x416>
 80048c0:	e054      	b.n	800496c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c2:	4b10      	ldr	r3, [pc, #64]	; (8004904 <HAL_RCC_OscConfig+0x478>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c8:	f7fe fa3e 	bl	8002d48 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048d0:	f7fe fa3a 	bl	8002d48 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e045      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e2:	4b06      	ldr	r3, [pc, #24]	; (80048fc <HAL_RCC_OscConfig+0x470>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1f0      	bne.n	80048d0 <HAL_RCC_OscConfig+0x444>
 80048ee:	e03d      	b.n	800496c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d107      	bne.n	8004908 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e038      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
 80048fc:	40023800 	.word	0x40023800
 8004900:	40007000 	.word	0x40007000
 8004904:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004908:	4b1b      	ldr	r3, [pc, #108]	; (8004978 <HAL_RCC_OscConfig+0x4ec>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d028      	beq.n	8004968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004920:	429a      	cmp	r2, r3
 8004922:	d121      	bne.n	8004968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800492e:	429a      	cmp	r2, r3
 8004930:	d11a      	bne.n	8004968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004938:	4013      	ands	r3, r2
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800493e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004940:	4293      	cmp	r3, r2
 8004942:	d111      	bne.n	8004968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494e:	085b      	lsrs	r3, r3, #1
 8004950:	3b01      	subs	r3, #1
 8004952:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004954:	429a      	cmp	r2, r3
 8004956:	d107      	bne.n	8004968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004962:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004964:	429a      	cmp	r2, r3
 8004966:	d001      	beq.n	800496c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	40023800 	.word	0x40023800

0800497c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e0cc      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004990:	4b68      	ldr	r3, [pc, #416]	; (8004b34 <HAL_RCC_ClockConfig+0x1b8>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d90c      	bls.n	80049b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800499e:	4b65      	ldr	r3, [pc, #404]	; (8004b34 <HAL_RCC_ClockConfig+0x1b8>)
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a6:	4b63      	ldr	r3, [pc, #396]	; (8004b34 <HAL_RCC_ClockConfig+0x1b8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d001      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e0b8      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d020      	beq.n	8004a06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0304 	and.w	r3, r3, #4
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d005      	beq.n	80049dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049d0:	4b59      	ldr	r3, [pc, #356]	; (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	4a58      	ldr	r2, [pc, #352]	; (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d005      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049e8:	4b53      	ldr	r3, [pc, #332]	; (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	4a52      	ldr	r2, [pc, #328]	; (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049f4:	4b50      	ldr	r3, [pc, #320]	; (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	494d      	ldr	r1, [pc, #308]	; (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d044      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d107      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a1a:	4b47      	ldr	r3, [pc, #284]	; (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d119      	bne.n	8004a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e07f      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d003      	beq.n	8004a3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	d107      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a3a:	4b3f      	ldr	r3, [pc, #252]	; (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d109      	bne.n	8004a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e06f      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a4a:	4b3b      	ldr	r3, [pc, #236]	; (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e067      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a5a:	4b37      	ldr	r3, [pc, #220]	; (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f023 0203 	bic.w	r2, r3, #3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	4934      	ldr	r1, [pc, #208]	; (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a6c:	f7fe f96c 	bl	8002d48 <HAL_GetTick>
 8004a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a72:	e00a      	b.n	8004a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a74:	f7fe f968 	bl	8002d48 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e04f      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a8a:	4b2b      	ldr	r3, [pc, #172]	; (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 020c 	and.w	r2, r3, #12
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d1eb      	bne.n	8004a74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a9c:	4b25      	ldr	r3, [pc, #148]	; (8004b34 <HAL_RCC_ClockConfig+0x1b8>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d20c      	bcs.n	8004ac4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aaa:	4b22      	ldr	r3, [pc, #136]	; (8004b34 <HAL_RCC_ClockConfig+0x1b8>)
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	b2d2      	uxtb	r2, r2
 8004ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab2:	4b20      	ldr	r3, [pc, #128]	; (8004b34 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d001      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e032      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d008      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ad0:	4b19      	ldr	r3, [pc, #100]	; (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	4916      	ldr	r1, [pc, #88]	; (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0308 	and.w	r3, r3, #8
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d009      	beq.n	8004b02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aee:	4b12      	ldr	r3, [pc, #72]	; (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	490e      	ldr	r1, [pc, #56]	; (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b02:	f000 f821 	bl	8004b48 <HAL_RCC_GetSysClockFreq>
 8004b06:	4602      	mov	r2, r0
 8004b08:	4b0b      	ldr	r3, [pc, #44]	; (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	091b      	lsrs	r3, r3, #4
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	490a      	ldr	r1, [pc, #40]	; (8004b3c <HAL_RCC_ClockConfig+0x1c0>)
 8004b14:	5ccb      	ldrb	r3, [r1, r3]
 8004b16:	fa22 f303 	lsr.w	r3, r2, r3
 8004b1a:	4a09      	ldr	r2, [pc, #36]	; (8004b40 <HAL_RCC_ClockConfig+0x1c4>)
 8004b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b1e:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <HAL_RCC_ClockConfig+0x1c8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fe f8cc 	bl	8002cc0 <HAL_InitTick>

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	40023c00 	.word	0x40023c00
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	08008ecc 	.word	0x08008ecc
 8004b40:	2000000c 	.word	0x2000000c
 8004b44:	20000010 	.word	0x20000010

08004b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b4c:	b090      	sub	sp, #64	; 0x40
 8004b4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	637b      	str	r3, [r7, #52]	; 0x34
 8004b54:	2300      	movs	r3, #0
 8004b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b58:	2300      	movs	r3, #0
 8004b5a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b60:	4b59      	ldr	r3, [pc, #356]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 030c 	and.w	r3, r3, #12
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d00d      	beq.n	8004b88 <HAL_RCC_GetSysClockFreq+0x40>
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	f200 80a1 	bhi.w	8004cb4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <HAL_RCC_GetSysClockFreq+0x34>
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d003      	beq.n	8004b82 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b7a:	e09b      	b.n	8004cb4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b7c:	4b53      	ldr	r3, [pc, #332]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x184>)
 8004b7e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004b80:	e09b      	b.n	8004cba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b82:	4b53      	ldr	r3, [pc, #332]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b84:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b86:	e098      	b.n	8004cba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b88:	4b4f      	ldr	r3, [pc, #316]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b90:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b92:	4b4d      	ldr	r3, [pc, #308]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d028      	beq.n	8004bf0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b9e:	4b4a      	ldr	r3, [pc, #296]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	099b      	lsrs	r3, r3, #6
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	623b      	str	r3, [r7, #32]
 8004ba8:	627a      	str	r2, [r7, #36]	; 0x24
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	4b47      	ldr	r3, [pc, #284]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bb4:	fb03 f201 	mul.w	r2, r3, r1
 8004bb8:	2300      	movs	r3, #0
 8004bba:	fb00 f303 	mul.w	r3, r0, r3
 8004bbe:	4413      	add	r3, r2
 8004bc0:	4a43      	ldr	r2, [pc, #268]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bc2:	fba0 1202 	umull	r1, r2, r0, r2
 8004bc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bc8:	460a      	mov	r2, r1
 8004bca:	62ba      	str	r2, [r7, #40]	; 0x28
 8004bcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bce:	4413      	add	r3, r2
 8004bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	61bb      	str	r3, [r7, #24]
 8004bd8:	61fa      	str	r2, [r7, #28]
 8004bda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004be2:	f7fc f839 	bl	8000c58 <__aeabi_uldivmod>
 8004be6:	4602      	mov	r2, r0
 8004be8:	460b      	mov	r3, r1
 8004bea:	4613      	mov	r3, r2
 8004bec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bee:	e053      	b.n	8004c98 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bf0:	4b35      	ldr	r3, [pc, #212]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	099b      	lsrs	r3, r3, #6
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	613b      	str	r3, [r7, #16]
 8004bfa:	617a      	str	r2, [r7, #20]
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004c02:	f04f 0b00 	mov.w	fp, #0
 8004c06:	4652      	mov	r2, sl
 8004c08:	465b      	mov	r3, fp
 8004c0a:	f04f 0000 	mov.w	r0, #0
 8004c0e:	f04f 0100 	mov.w	r1, #0
 8004c12:	0159      	lsls	r1, r3, #5
 8004c14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c18:	0150      	lsls	r0, r2, #5
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	ebb2 080a 	subs.w	r8, r2, sl
 8004c22:	eb63 090b 	sbc.w	r9, r3, fp
 8004c26:	f04f 0200 	mov.w	r2, #0
 8004c2a:	f04f 0300 	mov.w	r3, #0
 8004c2e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004c32:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004c36:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004c3a:	ebb2 0408 	subs.w	r4, r2, r8
 8004c3e:	eb63 0509 	sbc.w	r5, r3, r9
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	f04f 0300 	mov.w	r3, #0
 8004c4a:	00eb      	lsls	r3, r5, #3
 8004c4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c50:	00e2      	lsls	r2, r4, #3
 8004c52:	4614      	mov	r4, r2
 8004c54:	461d      	mov	r5, r3
 8004c56:	eb14 030a 	adds.w	r3, r4, sl
 8004c5a:	603b      	str	r3, [r7, #0]
 8004c5c:	eb45 030b 	adc.w	r3, r5, fp
 8004c60:	607b      	str	r3, [r7, #4]
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	f04f 0300 	mov.w	r3, #0
 8004c6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c6e:	4629      	mov	r1, r5
 8004c70:	028b      	lsls	r3, r1, #10
 8004c72:	4621      	mov	r1, r4
 8004c74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c78:	4621      	mov	r1, r4
 8004c7a:	028a      	lsls	r2, r1, #10
 8004c7c:	4610      	mov	r0, r2
 8004c7e:	4619      	mov	r1, r3
 8004c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c82:	2200      	movs	r2, #0
 8004c84:	60bb      	str	r3, [r7, #8]
 8004c86:	60fa      	str	r2, [r7, #12]
 8004c88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c8c:	f7fb ffe4 	bl	8000c58 <__aeabi_uldivmod>
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4613      	mov	r3, r2
 8004c96:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c98:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	0c1b      	lsrs	r3, r3, #16
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004ca8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004cb2:	e002      	b.n	8004cba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cb4:	4b05      	ldr	r3, [pc, #20]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x184>)
 8004cb6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004cb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3740      	adds	r7, #64	; 0x40
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cc6:	bf00      	nop
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	00f42400 	.word	0x00f42400
 8004cd0:	017d7840 	.word	0x017d7840

08004cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cd8:	4b03      	ldr	r3, [pc, #12]	; (8004ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cda:	681b      	ldr	r3, [r3, #0]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	2000000c 	.word	0x2000000c

08004cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cf0:	f7ff fff0 	bl	8004cd4 <HAL_RCC_GetHCLKFreq>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	0a9b      	lsrs	r3, r3, #10
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	4903      	ldr	r1, [pc, #12]	; (8004d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d02:	5ccb      	ldrb	r3, [r1, r3]
 8004d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40023800 	.word	0x40023800
 8004d10:	08008edc 	.word	0x08008edc

08004d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d18:	f7ff ffdc 	bl	8004cd4 <HAL_RCC_GetHCLKFreq>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	4b05      	ldr	r3, [pc, #20]	; (8004d34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	0b5b      	lsrs	r3, r3, #13
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	4903      	ldr	r1, [pc, #12]	; (8004d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d2a:	5ccb      	ldrb	r3, [r1, r3]
 8004d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40023800 	.word	0x40023800
 8004d38:	08008edc 	.word	0x08008edc

08004d3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e03f      	b.n	8004dce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d106      	bne.n	8004d68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7fd fe16 	bl	8002994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2224      	movs	r2, #36	; 0x24
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f929 	bl	8004fd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	691a      	ldr	r2, [r3, #16]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	695a      	ldr	r2, [r3, #20]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004da4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004db4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b08a      	sub	sp, #40	; 0x28
 8004dda:	af02      	add	r7, sp, #8
 8004ddc:	60f8      	str	r0, [r7, #12]
 8004dde:	60b9      	str	r1, [r7, #8]
 8004de0:	603b      	str	r3, [r7, #0]
 8004de2:	4613      	mov	r3, r2
 8004de4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b20      	cmp	r3, #32
 8004df4:	d17c      	bne.n	8004ef0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d002      	beq.n	8004e02 <HAL_UART_Transmit+0x2c>
 8004dfc:	88fb      	ldrh	r3, [r7, #6]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e075      	b.n	8004ef2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d101      	bne.n	8004e14 <HAL_UART_Transmit+0x3e>
 8004e10:	2302      	movs	r3, #2
 8004e12:	e06e      	b.n	8004ef2 <HAL_UART_Transmit+0x11c>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2221      	movs	r2, #33	; 0x21
 8004e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e2a:	f7fd ff8d 	bl	8002d48 <HAL_GetTick>
 8004e2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	88fa      	ldrh	r2, [r7, #6]
 8004e34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	88fa      	ldrh	r2, [r7, #6]
 8004e3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e44:	d108      	bne.n	8004e58 <HAL_UART_Transmit+0x82>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d104      	bne.n	8004e58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	61bb      	str	r3, [r7, #24]
 8004e56:	e003      	b.n	8004e60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004e68:	e02a      	b.n	8004ec0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	2200      	movs	r2, #0
 8004e72:	2180      	movs	r1, #128	; 0x80
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 f840 	bl	8004efa <UART_WaitOnFlagUntilTimeout>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e036      	b.n	8004ef2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10b      	bne.n	8004ea2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	3302      	adds	r3, #2
 8004e9e:	61bb      	str	r3, [r7, #24]
 8004ea0:	e007      	b.n	8004eb2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	781a      	ldrb	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1cf      	bne.n	8004e6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	2140      	movs	r1, #64	; 0x40
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f000 f810 	bl	8004efa <UART_WaitOnFlagUntilTimeout>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d001      	beq.n	8004ee4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e006      	b.n	8004ef2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004eec:	2300      	movs	r3, #0
 8004eee:	e000      	b.n	8004ef2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004ef0:	2302      	movs	r3, #2
  }
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3720      	adds	r7, #32
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b090      	sub	sp, #64	; 0x40
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	60f8      	str	r0, [r7, #12]
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	603b      	str	r3, [r7, #0]
 8004f06:	4613      	mov	r3, r2
 8004f08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f0a:	e050      	b.n	8004fae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f12:	d04c      	beq.n	8004fae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d007      	beq.n	8004f2a <UART_WaitOnFlagUntilTimeout+0x30>
 8004f1a:	f7fd ff15 	bl	8002d48 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d241      	bcs.n	8004fae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	330c      	adds	r3, #12
 8004f30:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f34:	e853 3f00 	ldrex	r3, [r3]
 8004f38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	330c      	adds	r3, #12
 8004f48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f4a:	637a      	str	r2, [r7, #52]	; 0x34
 8004f4c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f52:	e841 2300 	strex	r3, r2, [r1]
 8004f56:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1e5      	bne.n	8004f2a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3314      	adds	r3, #20
 8004f64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	e853 3f00 	ldrex	r3, [r3]
 8004f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f023 0301 	bic.w	r3, r3, #1
 8004f74:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	3314      	adds	r3, #20
 8004f7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f7e:	623a      	str	r2, [r7, #32]
 8004f80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f82:	69f9      	ldr	r1, [r7, #28]
 8004f84:	6a3a      	ldr	r2, [r7, #32]
 8004f86:	e841 2300 	strex	r3, r2, [r1]
 8004f8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1e5      	bne.n	8004f5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2220      	movs	r2, #32
 8004f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e00f      	b.n	8004fce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	bf0c      	ite	eq
 8004fbe:	2301      	moveq	r3, #1
 8004fc0:	2300      	movne	r3, #0
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	79fb      	ldrb	r3, [r7, #7]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d09f      	beq.n	8004f0c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3740      	adds	r7, #64	; 0x40
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
	...

08004fd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fdc:	b0c0      	sub	sp, #256	; 0x100
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff4:	68d9      	ldr	r1, [r3, #12]
 8004ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	ea40 0301 	orr.w	r3, r0, r1
 8005000:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	431a      	orrs	r2, r3
 8005010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	431a      	orrs	r2, r3
 8005018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	4313      	orrs	r3, r2
 8005020:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005030:	f021 010c 	bic.w	r1, r1, #12
 8005034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800503e:	430b      	orrs	r3, r1
 8005040:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800504e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005052:	6999      	ldr	r1, [r3, #24]
 8005054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	ea40 0301 	orr.w	r3, r0, r1
 800505e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	4b8f      	ldr	r3, [pc, #572]	; (80052a4 <UART_SetConfig+0x2cc>)
 8005068:	429a      	cmp	r2, r3
 800506a:	d005      	beq.n	8005078 <UART_SetConfig+0xa0>
 800506c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	4b8d      	ldr	r3, [pc, #564]	; (80052a8 <UART_SetConfig+0x2d0>)
 8005074:	429a      	cmp	r2, r3
 8005076:	d104      	bne.n	8005082 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005078:	f7ff fe4c 	bl	8004d14 <HAL_RCC_GetPCLK2Freq>
 800507c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005080:	e003      	b.n	800508a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005082:	f7ff fe33 	bl	8004cec <HAL_RCC_GetPCLK1Freq>
 8005086:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800508a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005094:	f040 810c 	bne.w	80052b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005098:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800509c:	2200      	movs	r2, #0
 800509e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80050a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050aa:	4622      	mov	r2, r4
 80050ac:	462b      	mov	r3, r5
 80050ae:	1891      	adds	r1, r2, r2
 80050b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80050b2:	415b      	adcs	r3, r3
 80050b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050ba:	4621      	mov	r1, r4
 80050bc:	eb12 0801 	adds.w	r8, r2, r1
 80050c0:	4629      	mov	r1, r5
 80050c2:	eb43 0901 	adc.w	r9, r3, r1
 80050c6:	f04f 0200 	mov.w	r2, #0
 80050ca:	f04f 0300 	mov.w	r3, #0
 80050ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050da:	4690      	mov	r8, r2
 80050dc:	4699      	mov	r9, r3
 80050de:	4623      	mov	r3, r4
 80050e0:	eb18 0303 	adds.w	r3, r8, r3
 80050e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80050e8:	462b      	mov	r3, r5
 80050ea:	eb49 0303 	adc.w	r3, r9, r3
 80050ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80050f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80050fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005102:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005106:	460b      	mov	r3, r1
 8005108:	18db      	adds	r3, r3, r3
 800510a:	653b      	str	r3, [r7, #80]	; 0x50
 800510c:	4613      	mov	r3, r2
 800510e:	eb42 0303 	adc.w	r3, r2, r3
 8005112:	657b      	str	r3, [r7, #84]	; 0x54
 8005114:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005118:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800511c:	f7fb fd9c 	bl	8000c58 <__aeabi_uldivmod>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	4b61      	ldr	r3, [pc, #388]	; (80052ac <UART_SetConfig+0x2d4>)
 8005126:	fba3 2302 	umull	r2, r3, r3, r2
 800512a:	095b      	lsrs	r3, r3, #5
 800512c:	011c      	lsls	r4, r3, #4
 800512e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005132:	2200      	movs	r2, #0
 8005134:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005138:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800513c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005140:	4642      	mov	r2, r8
 8005142:	464b      	mov	r3, r9
 8005144:	1891      	adds	r1, r2, r2
 8005146:	64b9      	str	r1, [r7, #72]	; 0x48
 8005148:	415b      	adcs	r3, r3
 800514a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800514c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005150:	4641      	mov	r1, r8
 8005152:	eb12 0a01 	adds.w	sl, r2, r1
 8005156:	4649      	mov	r1, r9
 8005158:	eb43 0b01 	adc.w	fp, r3, r1
 800515c:	f04f 0200 	mov.w	r2, #0
 8005160:	f04f 0300 	mov.w	r3, #0
 8005164:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005168:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800516c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005170:	4692      	mov	sl, r2
 8005172:	469b      	mov	fp, r3
 8005174:	4643      	mov	r3, r8
 8005176:	eb1a 0303 	adds.w	r3, sl, r3
 800517a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800517e:	464b      	mov	r3, r9
 8005180:	eb4b 0303 	adc.w	r3, fp, r3
 8005184:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005194:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005198:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800519c:	460b      	mov	r3, r1
 800519e:	18db      	adds	r3, r3, r3
 80051a0:	643b      	str	r3, [r7, #64]	; 0x40
 80051a2:	4613      	mov	r3, r2
 80051a4:	eb42 0303 	adc.w	r3, r2, r3
 80051a8:	647b      	str	r3, [r7, #68]	; 0x44
 80051aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80051b2:	f7fb fd51 	bl	8000c58 <__aeabi_uldivmod>
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	4611      	mov	r1, r2
 80051bc:	4b3b      	ldr	r3, [pc, #236]	; (80052ac <UART_SetConfig+0x2d4>)
 80051be:	fba3 2301 	umull	r2, r3, r3, r1
 80051c2:	095b      	lsrs	r3, r3, #5
 80051c4:	2264      	movs	r2, #100	; 0x64
 80051c6:	fb02 f303 	mul.w	r3, r2, r3
 80051ca:	1acb      	subs	r3, r1, r3
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80051d2:	4b36      	ldr	r3, [pc, #216]	; (80052ac <UART_SetConfig+0x2d4>)
 80051d4:	fba3 2302 	umull	r2, r3, r3, r2
 80051d8:	095b      	lsrs	r3, r3, #5
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051e0:	441c      	add	r4, r3
 80051e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051e6:	2200      	movs	r2, #0
 80051e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80051f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80051f4:	4642      	mov	r2, r8
 80051f6:	464b      	mov	r3, r9
 80051f8:	1891      	adds	r1, r2, r2
 80051fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80051fc:	415b      	adcs	r3, r3
 80051fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005200:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005204:	4641      	mov	r1, r8
 8005206:	1851      	adds	r1, r2, r1
 8005208:	6339      	str	r1, [r7, #48]	; 0x30
 800520a:	4649      	mov	r1, r9
 800520c:	414b      	adcs	r3, r1
 800520e:	637b      	str	r3, [r7, #52]	; 0x34
 8005210:	f04f 0200 	mov.w	r2, #0
 8005214:	f04f 0300 	mov.w	r3, #0
 8005218:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800521c:	4659      	mov	r1, fp
 800521e:	00cb      	lsls	r3, r1, #3
 8005220:	4651      	mov	r1, sl
 8005222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005226:	4651      	mov	r1, sl
 8005228:	00ca      	lsls	r2, r1, #3
 800522a:	4610      	mov	r0, r2
 800522c:	4619      	mov	r1, r3
 800522e:	4603      	mov	r3, r0
 8005230:	4642      	mov	r2, r8
 8005232:	189b      	adds	r3, r3, r2
 8005234:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005238:	464b      	mov	r3, r9
 800523a:	460a      	mov	r2, r1
 800523c:	eb42 0303 	adc.w	r3, r2, r3
 8005240:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005250:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005254:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005258:	460b      	mov	r3, r1
 800525a:	18db      	adds	r3, r3, r3
 800525c:	62bb      	str	r3, [r7, #40]	; 0x28
 800525e:	4613      	mov	r3, r2
 8005260:	eb42 0303 	adc.w	r3, r2, r3
 8005264:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005266:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800526a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800526e:	f7fb fcf3 	bl	8000c58 <__aeabi_uldivmod>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4b0d      	ldr	r3, [pc, #52]	; (80052ac <UART_SetConfig+0x2d4>)
 8005278:	fba3 1302 	umull	r1, r3, r3, r2
 800527c:	095b      	lsrs	r3, r3, #5
 800527e:	2164      	movs	r1, #100	; 0x64
 8005280:	fb01 f303 	mul.w	r3, r1, r3
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	3332      	adds	r3, #50	; 0x32
 800528a:	4a08      	ldr	r2, [pc, #32]	; (80052ac <UART_SetConfig+0x2d4>)
 800528c:	fba2 2303 	umull	r2, r3, r2, r3
 8005290:	095b      	lsrs	r3, r3, #5
 8005292:	f003 0207 	and.w	r2, r3, #7
 8005296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4422      	add	r2, r4
 800529e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052a0:	e106      	b.n	80054b0 <UART_SetConfig+0x4d8>
 80052a2:	bf00      	nop
 80052a4:	40011000 	.word	0x40011000
 80052a8:	40011400 	.word	0x40011400
 80052ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052b4:	2200      	movs	r2, #0
 80052b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80052be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80052c2:	4642      	mov	r2, r8
 80052c4:	464b      	mov	r3, r9
 80052c6:	1891      	adds	r1, r2, r2
 80052c8:	6239      	str	r1, [r7, #32]
 80052ca:	415b      	adcs	r3, r3
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
 80052ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052d2:	4641      	mov	r1, r8
 80052d4:	1854      	adds	r4, r2, r1
 80052d6:	4649      	mov	r1, r9
 80052d8:	eb43 0501 	adc.w	r5, r3, r1
 80052dc:	f04f 0200 	mov.w	r2, #0
 80052e0:	f04f 0300 	mov.w	r3, #0
 80052e4:	00eb      	lsls	r3, r5, #3
 80052e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052ea:	00e2      	lsls	r2, r4, #3
 80052ec:	4614      	mov	r4, r2
 80052ee:	461d      	mov	r5, r3
 80052f0:	4643      	mov	r3, r8
 80052f2:	18e3      	adds	r3, r4, r3
 80052f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80052f8:	464b      	mov	r3, r9
 80052fa:	eb45 0303 	adc.w	r3, r5, r3
 80052fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800530e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005312:	f04f 0200 	mov.w	r2, #0
 8005316:	f04f 0300 	mov.w	r3, #0
 800531a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800531e:	4629      	mov	r1, r5
 8005320:	008b      	lsls	r3, r1, #2
 8005322:	4621      	mov	r1, r4
 8005324:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005328:	4621      	mov	r1, r4
 800532a:	008a      	lsls	r2, r1, #2
 800532c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005330:	f7fb fc92 	bl	8000c58 <__aeabi_uldivmod>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4b60      	ldr	r3, [pc, #384]	; (80054bc <UART_SetConfig+0x4e4>)
 800533a:	fba3 2302 	umull	r2, r3, r3, r2
 800533e:	095b      	lsrs	r3, r3, #5
 8005340:	011c      	lsls	r4, r3, #4
 8005342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005346:	2200      	movs	r2, #0
 8005348:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800534c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005350:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005354:	4642      	mov	r2, r8
 8005356:	464b      	mov	r3, r9
 8005358:	1891      	adds	r1, r2, r2
 800535a:	61b9      	str	r1, [r7, #24]
 800535c:	415b      	adcs	r3, r3
 800535e:	61fb      	str	r3, [r7, #28]
 8005360:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005364:	4641      	mov	r1, r8
 8005366:	1851      	adds	r1, r2, r1
 8005368:	6139      	str	r1, [r7, #16]
 800536a:	4649      	mov	r1, r9
 800536c:	414b      	adcs	r3, r1
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	f04f 0200 	mov.w	r2, #0
 8005374:	f04f 0300 	mov.w	r3, #0
 8005378:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800537c:	4659      	mov	r1, fp
 800537e:	00cb      	lsls	r3, r1, #3
 8005380:	4651      	mov	r1, sl
 8005382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005386:	4651      	mov	r1, sl
 8005388:	00ca      	lsls	r2, r1, #3
 800538a:	4610      	mov	r0, r2
 800538c:	4619      	mov	r1, r3
 800538e:	4603      	mov	r3, r0
 8005390:	4642      	mov	r2, r8
 8005392:	189b      	adds	r3, r3, r2
 8005394:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005398:	464b      	mov	r3, r9
 800539a:	460a      	mov	r2, r1
 800539c:	eb42 0303 	adc.w	r3, r2, r3
 80053a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80053ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	f04f 0300 	mov.w	r3, #0
 80053b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80053bc:	4649      	mov	r1, r9
 80053be:	008b      	lsls	r3, r1, #2
 80053c0:	4641      	mov	r1, r8
 80053c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053c6:	4641      	mov	r1, r8
 80053c8:	008a      	lsls	r2, r1, #2
 80053ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80053ce:	f7fb fc43 	bl	8000c58 <__aeabi_uldivmod>
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	4611      	mov	r1, r2
 80053d8:	4b38      	ldr	r3, [pc, #224]	; (80054bc <UART_SetConfig+0x4e4>)
 80053da:	fba3 2301 	umull	r2, r3, r3, r1
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	2264      	movs	r2, #100	; 0x64
 80053e2:	fb02 f303 	mul.w	r3, r2, r3
 80053e6:	1acb      	subs	r3, r1, r3
 80053e8:	011b      	lsls	r3, r3, #4
 80053ea:	3332      	adds	r3, #50	; 0x32
 80053ec:	4a33      	ldr	r2, [pc, #204]	; (80054bc <UART_SetConfig+0x4e4>)
 80053ee:	fba2 2303 	umull	r2, r3, r2, r3
 80053f2:	095b      	lsrs	r3, r3, #5
 80053f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053f8:	441c      	add	r4, r3
 80053fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053fe:	2200      	movs	r2, #0
 8005400:	673b      	str	r3, [r7, #112]	; 0x70
 8005402:	677a      	str	r2, [r7, #116]	; 0x74
 8005404:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005408:	4642      	mov	r2, r8
 800540a:	464b      	mov	r3, r9
 800540c:	1891      	adds	r1, r2, r2
 800540e:	60b9      	str	r1, [r7, #8]
 8005410:	415b      	adcs	r3, r3
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005418:	4641      	mov	r1, r8
 800541a:	1851      	adds	r1, r2, r1
 800541c:	6039      	str	r1, [r7, #0]
 800541e:	4649      	mov	r1, r9
 8005420:	414b      	adcs	r3, r1
 8005422:	607b      	str	r3, [r7, #4]
 8005424:	f04f 0200 	mov.w	r2, #0
 8005428:	f04f 0300 	mov.w	r3, #0
 800542c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005430:	4659      	mov	r1, fp
 8005432:	00cb      	lsls	r3, r1, #3
 8005434:	4651      	mov	r1, sl
 8005436:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800543a:	4651      	mov	r1, sl
 800543c:	00ca      	lsls	r2, r1, #3
 800543e:	4610      	mov	r0, r2
 8005440:	4619      	mov	r1, r3
 8005442:	4603      	mov	r3, r0
 8005444:	4642      	mov	r2, r8
 8005446:	189b      	adds	r3, r3, r2
 8005448:	66bb      	str	r3, [r7, #104]	; 0x68
 800544a:	464b      	mov	r3, r9
 800544c:	460a      	mov	r2, r1
 800544e:	eb42 0303 	adc.w	r3, r2, r3
 8005452:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	663b      	str	r3, [r7, #96]	; 0x60
 800545e:	667a      	str	r2, [r7, #100]	; 0x64
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	f04f 0300 	mov.w	r3, #0
 8005468:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800546c:	4649      	mov	r1, r9
 800546e:	008b      	lsls	r3, r1, #2
 8005470:	4641      	mov	r1, r8
 8005472:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005476:	4641      	mov	r1, r8
 8005478:	008a      	lsls	r2, r1, #2
 800547a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800547e:	f7fb fbeb 	bl	8000c58 <__aeabi_uldivmod>
 8005482:	4602      	mov	r2, r0
 8005484:	460b      	mov	r3, r1
 8005486:	4b0d      	ldr	r3, [pc, #52]	; (80054bc <UART_SetConfig+0x4e4>)
 8005488:	fba3 1302 	umull	r1, r3, r3, r2
 800548c:	095b      	lsrs	r3, r3, #5
 800548e:	2164      	movs	r1, #100	; 0x64
 8005490:	fb01 f303 	mul.w	r3, r1, r3
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	3332      	adds	r3, #50	; 0x32
 800549a:	4a08      	ldr	r2, [pc, #32]	; (80054bc <UART_SetConfig+0x4e4>)
 800549c:	fba2 2303 	umull	r2, r3, r2, r3
 80054a0:	095b      	lsrs	r3, r3, #5
 80054a2:	f003 020f 	and.w	r2, r3, #15
 80054a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4422      	add	r2, r4
 80054ae:	609a      	str	r2, [r3, #8]
}
 80054b0:	bf00      	nop
 80054b2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80054b6:	46bd      	mov	sp, r7
 80054b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054bc:	51eb851f 	.word	0x51eb851f

080054c0 <arm_biquad_cascade_df1_init_f32>:
 80054c0:	b510      	push	{r4, lr}
 80054c2:	6082      	str	r2, [r0, #8]
 80054c4:	6001      	str	r1, [r0, #0]
 80054c6:	4604      	mov	r4, r0
 80054c8:	010a      	lsls	r2, r1, #4
 80054ca:	4618      	mov	r0, r3
 80054cc:	2100      	movs	r1, #0
 80054ce:	f000 fe7a 	bl	80061c6 <memset>
 80054d2:	6060      	str	r0, [r4, #4]
 80054d4:	bd10      	pop	{r4, pc}
 80054d6:	bf00      	nop

080054d8 <arm_biquad_cascade_df1_f32>:
 80054d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054dc:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
 80054e0:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80054e4:	f003 0e03 	and.w	lr, r3, #3
 80054e8:	ea4f 190c 	mov.w	r9, ip, lsl #4
 80054ec:	6807      	ldr	r7, [r0, #0]
 80054ee:	eb02 0a09 	add.w	sl, r2, r9
 80054f2:	f10e 38ff 	add.w	r8, lr, #4294967295	; 0xffffffff
 80054f6:	3614      	adds	r6, #20
 80054f8:	3510      	adds	r5, #16
 80054fa:	ed16 4a05 	vldr	s8, [r6, #-20]	; 0xffffffec
 80054fe:	ed16 2a04 	vldr	s4, [r6, #-16]
 8005502:	ed56 2a03 	vldr	s5, [r6, #-12]
 8005506:	ed16 3a02 	vldr	s6, [r6, #-8]
 800550a:	ed56 3a01 	vldr	s7, [r6, #-4]
 800550e:	ed55 5a04 	vldr	s11, [r5, #-16]
 8005512:	ed15 5a03 	vldr	s10, [r5, #-12]
 8005516:	ed15 7a02 	vldr	s14, [r5, #-8]
 800551a:	ed55 7a01 	vldr	s15, [r5, #-4]
 800551e:	f1bc 0f00 	cmp.w	ip, #0
 8005522:	f000 80d4 	beq.w	80056ce <arm_biquad_cascade_df1_f32+0x1f6>
 8005526:	f101 0010 	add.w	r0, r1, #16
 800552a:	f102 0310 	add.w	r3, r2, #16
 800552e:	4664      	mov	r4, ip
 8005530:	ed10 6a04 	vldr	s12, [r0, #-16]
 8005534:	ee62 4a25 	vmul.f32	s9, s4, s11
 8005538:	ee64 6a06 	vmul.f32	s13, s8, s12
 800553c:	ee22 5a85 	vmul.f32	s10, s5, s10
 8005540:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8005544:	ee63 4a07 	vmul.f32	s9, s6, s14
 8005548:	ee76 6a85 	vadd.f32	s13, s13, s10
 800554c:	ee23 5aa7 	vmul.f32	s10, s7, s15
 8005550:	ee76 7aa4 	vadd.f32	s15, s13, s9
 8005554:	ee22 1a06 	vmul.f32	s2, s4, s12
 8005558:	ee77 7a85 	vadd.f32	s15, s15, s10
 800555c:	ee62 1aa5 	vmul.f32	s3, s5, s11
 8005560:	ed43 7a04 	vstr	s15, [r3, #-16]
 8005564:	ed50 4a03 	vldr	s9, [r0, #-12]
 8005568:	ee64 6a24 	vmul.f32	s13, s8, s9
 800556c:	ee23 5a27 	vmul.f32	s10, s6, s15
 8005570:	ee76 6a81 	vadd.f32	s13, s13, s2
 8005574:	ee63 5a87 	vmul.f32	s11, s7, s14
 8005578:	ee36 7aa1 	vadd.f32	s14, s13, s3
 800557c:	ee62 1a24 	vmul.f32	s3, s4, s9
 8005580:	ee37 7a05 	vadd.f32	s14, s14, s10
 8005584:	ee22 6a86 	vmul.f32	s12, s5, s12
 8005588:	ee37 7a25 	vadd.f32	s14, s14, s11
 800558c:	ee63 7aa7 	vmul.f32	s15, s7, s15
 8005590:	ed03 7a03 	vstr	s14, [r3, #-12]
 8005594:	ed10 5a02 	vldr	s10, [r0, #-8]
 8005598:	ee64 5a05 	vmul.f32	s11, s8, s10
 800559c:	ee63 6a07 	vmul.f32	s13, s6, s14
 80055a0:	ee75 5aa1 	vadd.f32	s11, s11, s3
 80055a4:	ee62 1a05 	vmul.f32	s3, s4, s10
 80055a8:	ee75 5a86 	vadd.f32	s11, s11, s12
 80055ac:	ee62 4aa4 	vmul.f32	s9, s5, s9
 80055b0:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80055b4:	ee23 7a87 	vmul.f32	s14, s7, s14
 80055b8:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80055bc:	3c01      	subs	r4, #1
 80055be:	ed43 7a02 	vstr	s15, [r3, #-8]
 80055c2:	ed50 5a01 	vldr	s11, [r0, #-4]
 80055c6:	ee24 6a25 	vmul.f32	s12, s8, s11
 80055ca:	ee63 6a27 	vmul.f32	s13, s6, s15
 80055ce:	ee36 6a21 	vadd.f32	s12, s12, s3
 80055d2:	f100 0010 	add.w	r0, r0, #16
 80055d6:	ee36 6a24 	vadd.f32	s12, s12, s9
 80055da:	f103 0310 	add.w	r3, r3, #16
 80055de:	ee36 6a26 	vadd.f32	s12, s12, s13
 80055e2:	ee36 7a07 	vadd.f32	s14, s12, s14
 80055e6:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 80055ea:	d1a1      	bne.n	8005530 <arm_biquad_cascade_df1_f32+0x58>
 80055ec:	4449      	add	r1, r9
 80055ee:	4653      	mov	r3, sl
 80055f0:	f1be 0f00 	cmp.w	lr, #0
 80055f4:	d047      	beq.n	8005686 <arm_biquad_cascade_df1_f32+0x1ae>
 80055f6:	edd1 4a00 	vldr	s9, [r1]
 80055fa:	ee22 6a25 	vmul.f32	s12, s4, s11
 80055fe:	ee64 1a24 	vmul.f32	s3, s8, s9
 8005602:	ee62 6a85 	vmul.f32	s13, s5, s10
 8005606:	ee36 5a21 	vadd.f32	s10, s12, s3
 800560a:	ee23 6a07 	vmul.f32	s12, s6, s14
 800560e:	ee35 5a26 	vadd.f32	s10, s10, s13
 8005612:	ee63 7aa7 	vmul.f32	s15, s7, s15
 8005616:	ee35 6a06 	vadd.f32	s12, s10, s12
 800561a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800561e:	ed83 6a00 	vstr	s12, [r3]
 8005622:	f1b8 0f00 	cmp.w	r8, #0
 8005626:	d040      	beq.n	80056aa <arm_biquad_cascade_df1_f32+0x1d2>
 8005628:	ed91 5a01 	vldr	s10, [r1, #4]
 800562c:	ee62 7a24 	vmul.f32	s15, s4, s9
 8005630:	ee65 1a04 	vmul.f32	s3, s10, s8
 8005634:	ee62 6aa5 	vmul.f32	s13, s5, s11
 8005638:	ee77 5aa1 	vadd.f32	s11, s15, s3
 800563c:	ee63 7a06 	vmul.f32	s15, s6, s12
 8005640:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8005644:	ee23 7a87 	vmul.f32	s14, s7, s14
 8005648:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800564c:	f1b8 0f01 	cmp.w	r8, #1
 8005650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005654:	edc3 7a01 	vstr	s15, [r3, #4]
 8005658:	d030      	beq.n	80056bc <arm_biquad_cascade_df1_f32+0x1e4>
 800565a:	edd1 5a02 	vldr	s11, [r1, #8]
 800565e:	ee25 2a02 	vmul.f32	s4, s10, s4
 8005662:	ee64 6a25 	vmul.f32	s13, s8, s11
 8005666:	ee62 2aa4 	vmul.f32	s5, s5, s9
 800566a:	ee76 6a82 	vadd.f32	s13, s13, s4
 800566e:	ee27 3a83 	vmul.f32	s6, s15, s6
 8005672:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8005676:	ee63 3a86 	vmul.f32	s7, s7, s12
 800567a:	ee76 6a83 	vadd.f32	s13, s13, s6
 800567e:	ee36 7aa3 	vadd.f32	s14, s13, s7
 8005682:	ed83 7a02 	vstr	s14, [r3, #8]
 8005686:	3f01      	subs	r7, #1
 8005688:	ed45 5a04 	vstr	s11, [r5, #-16]
 800568c:	ed05 5a03 	vstr	s10, [r5, #-12]
 8005690:	ed05 7a02 	vstr	s14, [r5, #-8]
 8005694:	ed45 7a01 	vstr	s15, [r5, #-4]
 8005698:	f106 0614 	add.w	r6, r6, #20
 800569c:	f105 0510 	add.w	r5, r5, #16
 80056a0:	4611      	mov	r1, r2
 80056a2:	f47f af2a 	bne.w	80054fa <arm_biquad_cascade_df1_f32+0x22>
 80056a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056aa:	eef0 7a47 	vmov.f32	s15, s14
 80056ae:	eeb0 5a65 	vmov.f32	s10, s11
 80056b2:	eeb0 7a46 	vmov.f32	s14, s12
 80056b6:	eef0 5a64 	vmov.f32	s11, s9
 80056ba:	e7e4      	b.n	8005686 <arm_biquad_cascade_df1_f32+0x1ae>
 80056bc:	eeb0 7a67 	vmov.f32	s14, s15
 80056c0:	eef0 5a45 	vmov.f32	s11, s10
 80056c4:	eef0 7a46 	vmov.f32	s15, s12
 80056c8:	eeb0 5a64 	vmov.f32	s10, s9
 80056cc:	e7db      	b.n	8005686 <arm_biquad_cascade_df1_f32+0x1ae>
 80056ce:	4613      	mov	r3, r2
 80056d0:	e78e      	b.n	80055f0 <arm_biquad_cascade_df1_f32+0x118>
 80056d2:	bf00      	nop

080056d4 <__cvt>:
 80056d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056d8:	ec55 4b10 	vmov	r4, r5, d0
 80056dc:	2d00      	cmp	r5, #0
 80056de:	460e      	mov	r6, r1
 80056e0:	4619      	mov	r1, r3
 80056e2:	462b      	mov	r3, r5
 80056e4:	bfbb      	ittet	lt
 80056e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80056ea:	461d      	movlt	r5, r3
 80056ec:	2300      	movge	r3, #0
 80056ee:	232d      	movlt	r3, #45	; 0x2d
 80056f0:	700b      	strb	r3, [r1, #0]
 80056f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80056f8:	4691      	mov	r9, r2
 80056fa:	f023 0820 	bic.w	r8, r3, #32
 80056fe:	bfbc      	itt	lt
 8005700:	4622      	movlt	r2, r4
 8005702:	4614      	movlt	r4, r2
 8005704:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005708:	d005      	beq.n	8005716 <__cvt+0x42>
 800570a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800570e:	d100      	bne.n	8005712 <__cvt+0x3e>
 8005710:	3601      	adds	r6, #1
 8005712:	2102      	movs	r1, #2
 8005714:	e000      	b.n	8005718 <__cvt+0x44>
 8005716:	2103      	movs	r1, #3
 8005718:	ab03      	add	r3, sp, #12
 800571a:	9301      	str	r3, [sp, #4]
 800571c:	ab02      	add	r3, sp, #8
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	ec45 4b10 	vmov	d0, r4, r5
 8005724:	4653      	mov	r3, sl
 8005726:	4632      	mov	r2, r6
 8005728:	f000 fe62 	bl	80063f0 <_dtoa_r>
 800572c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005730:	4607      	mov	r7, r0
 8005732:	d102      	bne.n	800573a <__cvt+0x66>
 8005734:	f019 0f01 	tst.w	r9, #1
 8005738:	d022      	beq.n	8005780 <__cvt+0xac>
 800573a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800573e:	eb07 0906 	add.w	r9, r7, r6
 8005742:	d110      	bne.n	8005766 <__cvt+0x92>
 8005744:	783b      	ldrb	r3, [r7, #0]
 8005746:	2b30      	cmp	r3, #48	; 0x30
 8005748:	d10a      	bne.n	8005760 <__cvt+0x8c>
 800574a:	2200      	movs	r2, #0
 800574c:	2300      	movs	r3, #0
 800574e:	4620      	mov	r0, r4
 8005750:	4629      	mov	r1, r5
 8005752:	f7fb f9c1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005756:	b918      	cbnz	r0, 8005760 <__cvt+0x8c>
 8005758:	f1c6 0601 	rsb	r6, r6, #1
 800575c:	f8ca 6000 	str.w	r6, [sl]
 8005760:	f8da 3000 	ldr.w	r3, [sl]
 8005764:	4499      	add	r9, r3
 8005766:	2200      	movs	r2, #0
 8005768:	2300      	movs	r3, #0
 800576a:	4620      	mov	r0, r4
 800576c:	4629      	mov	r1, r5
 800576e:	f7fb f9b3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005772:	b108      	cbz	r0, 8005778 <__cvt+0xa4>
 8005774:	f8cd 900c 	str.w	r9, [sp, #12]
 8005778:	2230      	movs	r2, #48	; 0x30
 800577a:	9b03      	ldr	r3, [sp, #12]
 800577c:	454b      	cmp	r3, r9
 800577e:	d307      	bcc.n	8005790 <__cvt+0xbc>
 8005780:	9b03      	ldr	r3, [sp, #12]
 8005782:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005784:	1bdb      	subs	r3, r3, r7
 8005786:	4638      	mov	r0, r7
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	b004      	add	sp, #16
 800578c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005790:	1c59      	adds	r1, r3, #1
 8005792:	9103      	str	r1, [sp, #12]
 8005794:	701a      	strb	r2, [r3, #0]
 8005796:	e7f0      	b.n	800577a <__cvt+0xa6>

08005798 <__exponent>:
 8005798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800579a:	4603      	mov	r3, r0
 800579c:	2900      	cmp	r1, #0
 800579e:	bfb8      	it	lt
 80057a0:	4249      	neglt	r1, r1
 80057a2:	f803 2b02 	strb.w	r2, [r3], #2
 80057a6:	bfb4      	ite	lt
 80057a8:	222d      	movlt	r2, #45	; 0x2d
 80057aa:	222b      	movge	r2, #43	; 0x2b
 80057ac:	2909      	cmp	r1, #9
 80057ae:	7042      	strb	r2, [r0, #1]
 80057b0:	dd2a      	ble.n	8005808 <__exponent+0x70>
 80057b2:	f10d 0207 	add.w	r2, sp, #7
 80057b6:	4617      	mov	r7, r2
 80057b8:	260a      	movs	r6, #10
 80057ba:	4694      	mov	ip, r2
 80057bc:	fb91 f5f6 	sdiv	r5, r1, r6
 80057c0:	fb06 1415 	mls	r4, r6, r5, r1
 80057c4:	3430      	adds	r4, #48	; 0x30
 80057c6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80057ca:	460c      	mov	r4, r1
 80057cc:	2c63      	cmp	r4, #99	; 0x63
 80057ce:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80057d2:	4629      	mov	r1, r5
 80057d4:	dcf1      	bgt.n	80057ba <__exponent+0x22>
 80057d6:	3130      	adds	r1, #48	; 0x30
 80057d8:	f1ac 0402 	sub.w	r4, ip, #2
 80057dc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80057e0:	1c41      	adds	r1, r0, #1
 80057e2:	4622      	mov	r2, r4
 80057e4:	42ba      	cmp	r2, r7
 80057e6:	d30a      	bcc.n	80057fe <__exponent+0x66>
 80057e8:	f10d 0209 	add.w	r2, sp, #9
 80057ec:	eba2 020c 	sub.w	r2, r2, ip
 80057f0:	42bc      	cmp	r4, r7
 80057f2:	bf88      	it	hi
 80057f4:	2200      	movhi	r2, #0
 80057f6:	4413      	add	r3, r2
 80057f8:	1a18      	subs	r0, r3, r0
 80057fa:	b003      	add	sp, #12
 80057fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057fe:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005802:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005806:	e7ed      	b.n	80057e4 <__exponent+0x4c>
 8005808:	2330      	movs	r3, #48	; 0x30
 800580a:	3130      	adds	r1, #48	; 0x30
 800580c:	7083      	strb	r3, [r0, #2]
 800580e:	70c1      	strb	r1, [r0, #3]
 8005810:	1d03      	adds	r3, r0, #4
 8005812:	e7f1      	b.n	80057f8 <__exponent+0x60>

08005814 <_printf_float>:
 8005814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005818:	ed2d 8b02 	vpush	{d8}
 800581c:	b08d      	sub	sp, #52	; 0x34
 800581e:	460c      	mov	r4, r1
 8005820:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005824:	4616      	mov	r6, r2
 8005826:	461f      	mov	r7, r3
 8005828:	4605      	mov	r5, r0
 800582a:	f000 fcd5 	bl	80061d8 <_localeconv_r>
 800582e:	f8d0 a000 	ldr.w	sl, [r0]
 8005832:	4650      	mov	r0, sl
 8005834:	f7fa fd24 	bl	8000280 <strlen>
 8005838:	2300      	movs	r3, #0
 800583a:	930a      	str	r3, [sp, #40]	; 0x28
 800583c:	6823      	ldr	r3, [r4, #0]
 800583e:	9305      	str	r3, [sp, #20]
 8005840:	f8d8 3000 	ldr.w	r3, [r8]
 8005844:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005848:	3307      	adds	r3, #7
 800584a:	f023 0307 	bic.w	r3, r3, #7
 800584e:	f103 0208 	add.w	r2, r3, #8
 8005852:	f8c8 2000 	str.w	r2, [r8]
 8005856:	e9d3 8900 	ldrd	r8, r9, [r3]
 800585a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800585e:	9307      	str	r3, [sp, #28]
 8005860:	f8cd 8018 	str.w	r8, [sp, #24]
 8005864:	ee08 0a10 	vmov	s16, r0
 8005868:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800586c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005870:	4b9e      	ldr	r3, [pc, #632]	; (8005aec <_printf_float+0x2d8>)
 8005872:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005876:	f7fb f961 	bl	8000b3c <__aeabi_dcmpun>
 800587a:	bb88      	cbnz	r0, 80058e0 <_printf_float+0xcc>
 800587c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005880:	4b9a      	ldr	r3, [pc, #616]	; (8005aec <_printf_float+0x2d8>)
 8005882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005886:	f7fb f93b 	bl	8000b00 <__aeabi_dcmple>
 800588a:	bb48      	cbnz	r0, 80058e0 <_printf_float+0xcc>
 800588c:	2200      	movs	r2, #0
 800588e:	2300      	movs	r3, #0
 8005890:	4640      	mov	r0, r8
 8005892:	4649      	mov	r1, r9
 8005894:	f7fb f92a 	bl	8000aec <__aeabi_dcmplt>
 8005898:	b110      	cbz	r0, 80058a0 <_printf_float+0x8c>
 800589a:	232d      	movs	r3, #45	; 0x2d
 800589c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058a0:	4a93      	ldr	r2, [pc, #588]	; (8005af0 <_printf_float+0x2dc>)
 80058a2:	4b94      	ldr	r3, [pc, #592]	; (8005af4 <_printf_float+0x2e0>)
 80058a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80058a8:	bf94      	ite	ls
 80058aa:	4690      	movls	r8, r2
 80058ac:	4698      	movhi	r8, r3
 80058ae:	2303      	movs	r3, #3
 80058b0:	6123      	str	r3, [r4, #16]
 80058b2:	9b05      	ldr	r3, [sp, #20]
 80058b4:	f023 0304 	bic.w	r3, r3, #4
 80058b8:	6023      	str	r3, [r4, #0]
 80058ba:	f04f 0900 	mov.w	r9, #0
 80058be:	9700      	str	r7, [sp, #0]
 80058c0:	4633      	mov	r3, r6
 80058c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80058c4:	4621      	mov	r1, r4
 80058c6:	4628      	mov	r0, r5
 80058c8:	f000 f9da 	bl	8005c80 <_printf_common>
 80058cc:	3001      	adds	r0, #1
 80058ce:	f040 8090 	bne.w	80059f2 <_printf_float+0x1de>
 80058d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058d6:	b00d      	add	sp, #52	; 0x34
 80058d8:	ecbd 8b02 	vpop	{d8}
 80058dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058e0:	4642      	mov	r2, r8
 80058e2:	464b      	mov	r3, r9
 80058e4:	4640      	mov	r0, r8
 80058e6:	4649      	mov	r1, r9
 80058e8:	f7fb f928 	bl	8000b3c <__aeabi_dcmpun>
 80058ec:	b140      	cbz	r0, 8005900 <_printf_float+0xec>
 80058ee:	464b      	mov	r3, r9
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	bfbc      	itt	lt
 80058f4:	232d      	movlt	r3, #45	; 0x2d
 80058f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80058fa:	4a7f      	ldr	r2, [pc, #508]	; (8005af8 <_printf_float+0x2e4>)
 80058fc:	4b7f      	ldr	r3, [pc, #508]	; (8005afc <_printf_float+0x2e8>)
 80058fe:	e7d1      	b.n	80058a4 <_printf_float+0x90>
 8005900:	6863      	ldr	r3, [r4, #4]
 8005902:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005906:	9206      	str	r2, [sp, #24]
 8005908:	1c5a      	adds	r2, r3, #1
 800590a:	d13f      	bne.n	800598c <_printf_float+0x178>
 800590c:	2306      	movs	r3, #6
 800590e:	6063      	str	r3, [r4, #4]
 8005910:	9b05      	ldr	r3, [sp, #20]
 8005912:	6861      	ldr	r1, [r4, #4]
 8005914:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005918:	2300      	movs	r3, #0
 800591a:	9303      	str	r3, [sp, #12]
 800591c:	ab0a      	add	r3, sp, #40	; 0x28
 800591e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005922:	ab09      	add	r3, sp, #36	; 0x24
 8005924:	ec49 8b10 	vmov	d0, r8, r9
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	6022      	str	r2, [r4, #0]
 800592c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005930:	4628      	mov	r0, r5
 8005932:	f7ff fecf 	bl	80056d4 <__cvt>
 8005936:	9b06      	ldr	r3, [sp, #24]
 8005938:	9909      	ldr	r1, [sp, #36]	; 0x24
 800593a:	2b47      	cmp	r3, #71	; 0x47
 800593c:	4680      	mov	r8, r0
 800593e:	d108      	bne.n	8005952 <_printf_float+0x13e>
 8005940:	1cc8      	adds	r0, r1, #3
 8005942:	db02      	blt.n	800594a <_printf_float+0x136>
 8005944:	6863      	ldr	r3, [r4, #4]
 8005946:	4299      	cmp	r1, r3
 8005948:	dd41      	ble.n	80059ce <_printf_float+0x1ba>
 800594a:	f1ab 0302 	sub.w	r3, fp, #2
 800594e:	fa5f fb83 	uxtb.w	fp, r3
 8005952:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005956:	d820      	bhi.n	800599a <_printf_float+0x186>
 8005958:	3901      	subs	r1, #1
 800595a:	465a      	mov	r2, fp
 800595c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005960:	9109      	str	r1, [sp, #36]	; 0x24
 8005962:	f7ff ff19 	bl	8005798 <__exponent>
 8005966:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005968:	1813      	adds	r3, r2, r0
 800596a:	2a01      	cmp	r2, #1
 800596c:	4681      	mov	r9, r0
 800596e:	6123      	str	r3, [r4, #16]
 8005970:	dc02      	bgt.n	8005978 <_printf_float+0x164>
 8005972:	6822      	ldr	r2, [r4, #0]
 8005974:	07d2      	lsls	r2, r2, #31
 8005976:	d501      	bpl.n	800597c <_printf_float+0x168>
 8005978:	3301      	adds	r3, #1
 800597a:	6123      	str	r3, [r4, #16]
 800597c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005980:	2b00      	cmp	r3, #0
 8005982:	d09c      	beq.n	80058be <_printf_float+0xaa>
 8005984:	232d      	movs	r3, #45	; 0x2d
 8005986:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800598a:	e798      	b.n	80058be <_printf_float+0xaa>
 800598c:	9a06      	ldr	r2, [sp, #24]
 800598e:	2a47      	cmp	r2, #71	; 0x47
 8005990:	d1be      	bne.n	8005910 <_printf_float+0xfc>
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1bc      	bne.n	8005910 <_printf_float+0xfc>
 8005996:	2301      	movs	r3, #1
 8005998:	e7b9      	b.n	800590e <_printf_float+0xfa>
 800599a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800599e:	d118      	bne.n	80059d2 <_printf_float+0x1be>
 80059a0:	2900      	cmp	r1, #0
 80059a2:	6863      	ldr	r3, [r4, #4]
 80059a4:	dd0b      	ble.n	80059be <_printf_float+0x1aa>
 80059a6:	6121      	str	r1, [r4, #16]
 80059a8:	b913      	cbnz	r3, 80059b0 <_printf_float+0x19c>
 80059aa:	6822      	ldr	r2, [r4, #0]
 80059ac:	07d0      	lsls	r0, r2, #31
 80059ae:	d502      	bpl.n	80059b6 <_printf_float+0x1a2>
 80059b0:	3301      	adds	r3, #1
 80059b2:	440b      	add	r3, r1
 80059b4:	6123      	str	r3, [r4, #16]
 80059b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80059b8:	f04f 0900 	mov.w	r9, #0
 80059bc:	e7de      	b.n	800597c <_printf_float+0x168>
 80059be:	b913      	cbnz	r3, 80059c6 <_printf_float+0x1b2>
 80059c0:	6822      	ldr	r2, [r4, #0]
 80059c2:	07d2      	lsls	r2, r2, #31
 80059c4:	d501      	bpl.n	80059ca <_printf_float+0x1b6>
 80059c6:	3302      	adds	r3, #2
 80059c8:	e7f4      	b.n	80059b4 <_printf_float+0x1a0>
 80059ca:	2301      	movs	r3, #1
 80059cc:	e7f2      	b.n	80059b4 <_printf_float+0x1a0>
 80059ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80059d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059d4:	4299      	cmp	r1, r3
 80059d6:	db05      	blt.n	80059e4 <_printf_float+0x1d0>
 80059d8:	6823      	ldr	r3, [r4, #0]
 80059da:	6121      	str	r1, [r4, #16]
 80059dc:	07d8      	lsls	r0, r3, #31
 80059de:	d5ea      	bpl.n	80059b6 <_printf_float+0x1a2>
 80059e0:	1c4b      	adds	r3, r1, #1
 80059e2:	e7e7      	b.n	80059b4 <_printf_float+0x1a0>
 80059e4:	2900      	cmp	r1, #0
 80059e6:	bfd4      	ite	le
 80059e8:	f1c1 0202 	rsble	r2, r1, #2
 80059ec:	2201      	movgt	r2, #1
 80059ee:	4413      	add	r3, r2
 80059f0:	e7e0      	b.n	80059b4 <_printf_float+0x1a0>
 80059f2:	6823      	ldr	r3, [r4, #0]
 80059f4:	055a      	lsls	r2, r3, #21
 80059f6:	d407      	bmi.n	8005a08 <_printf_float+0x1f4>
 80059f8:	6923      	ldr	r3, [r4, #16]
 80059fa:	4642      	mov	r2, r8
 80059fc:	4631      	mov	r1, r6
 80059fe:	4628      	mov	r0, r5
 8005a00:	47b8      	blx	r7
 8005a02:	3001      	adds	r0, #1
 8005a04:	d12c      	bne.n	8005a60 <_printf_float+0x24c>
 8005a06:	e764      	b.n	80058d2 <_printf_float+0xbe>
 8005a08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a0c:	f240 80e0 	bls.w	8005bd0 <_printf_float+0x3bc>
 8005a10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a14:	2200      	movs	r2, #0
 8005a16:	2300      	movs	r3, #0
 8005a18:	f7fb f85e 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a1c:	2800      	cmp	r0, #0
 8005a1e:	d034      	beq.n	8005a8a <_printf_float+0x276>
 8005a20:	4a37      	ldr	r2, [pc, #220]	; (8005b00 <_printf_float+0x2ec>)
 8005a22:	2301      	movs	r3, #1
 8005a24:	4631      	mov	r1, r6
 8005a26:	4628      	mov	r0, r5
 8005a28:	47b8      	blx	r7
 8005a2a:	3001      	adds	r0, #1
 8005a2c:	f43f af51 	beq.w	80058d2 <_printf_float+0xbe>
 8005a30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a34:	429a      	cmp	r2, r3
 8005a36:	db02      	blt.n	8005a3e <_printf_float+0x22a>
 8005a38:	6823      	ldr	r3, [r4, #0]
 8005a3a:	07d8      	lsls	r0, r3, #31
 8005a3c:	d510      	bpl.n	8005a60 <_printf_float+0x24c>
 8005a3e:	ee18 3a10 	vmov	r3, s16
 8005a42:	4652      	mov	r2, sl
 8005a44:	4631      	mov	r1, r6
 8005a46:	4628      	mov	r0, r5
 8005a48:	47b8      	blx	r7
 8005a4a:	3001      	adds	r0, #1
 8005a4c:	f43f af41 	beq.w	80058d2 <_printf_float+0xbe>
 8005a50:	f04f 0800 	mov.w	r8, #0
 8005a54:	f104 091a 	add.w	r9, r4, #26
 8005a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	4543      	cmp	r3, r8
 8005a5e:	dc09      	bgt.n	8005a74 <_printf_float+0x260>
 8005a60:	6823      	ldr	r3, [r4, #0]
 8005a62:	079b      	lsls	r3, r3, #30
 8005a64:	f100 8107 	bmi.w	8005c76 <_printf_float+0x462>
 8005a68:	68e0      	ldr	r0, [r4, #12]
 8005a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a6c:	4298      	cmp	r0, r3
 8005a6e:	bfb8      	it	lt
 8005a70:	4618      	movlt	r0, r3
 8005a72:	e730      	b.n	80058d6 <_printf_float+0xc2>
 8005a74:	2301      	movs	r3, #1
 8005a76:	464a      	mov	r2, r9
 8005a78:	4631      	mov	r1, r6
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	47b8      	blx	r7
 8005a7e:	3001      	adds	r0, #1
 8005a80:	f43f af27 	beq.w	80058d2 <_printf_float+0xbe>
 8005a84:	f108 0801 	add.w	r8, r8, #1
 8005a88:	e7e6      	b.n	8005a58 <_printf_float+0x244>
 8005a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	dc39      	bgt.n	8005b04 <_printf_float+0x2f0>
 8005a90:	4a1b      	ldr	r2, [pc, #108]	; (8005b00 <_printf_float+0x2ec>)
 8005a92:	2301      	movs	r3, #1
 8005a94:	4631      	mov	r1, r6
 8005a96:	4628      	mov	r0, r5
 8005a98:	47b8      	blx	r7
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	f43f af19 	beq.w	80058d2 <_printf_float+0xbe>
 8005aa0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	d102      	bne.n	8005aae <_printf_float+0x29a>
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	07d9      	lsls	r1, r3, #31
 8005aac:	d5d8      	bpl.n	8005a60 <_printf_float+0x24c>
 8005aae:	ee18 3a10 	vmov	r3, s16
 8005ab2:	4652      	mov	r2, sl
 8005ab4:	4631      	mov	r1, r6
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	47b8      	blx	r7
 8005aba:	3001      	adds	r0, #1
 8005abc:	f43f af09 	beq.w	80058d2 <_printf_float+0xbe>
 8005ac0:	f04f 0900 	mov.w	r9, #0
 8005ac4:	f104 0a1a 	add.w	sl, r4, #26
 8005ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aca:	425b      	negs	r3, r3
 8005acc:	454b      	cmp	r3, r9
 8005ace:	dc01      	bgt.n	8005ad4 <_printf_float+0x2c0>
 8005ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ad2:	e792      	b.n	80059fa <_printf_float+0x1e6>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	4652      	mov	r2, sl
 8005ad8:	4631      	mov	r1, r6
 8005ada:	4628      	mov	r0, r5
 8005adc:	47b8      	blx	r7
 8005ade:	3001      	adds	r0, #1
 8005ae0:	f43f aef7 	beq.w	80058d2 <_printf_float+0xbe>
 8005ae4:	f109 0901 	add.w	r9, r9, #1
 8005ae8:	e7ee      	b.n	8005ac8 <_printf_float+0x2b4>
 8005aea:	bf00      	nop
 8005aec:	7fefffff 	.word	0x7fefffff
 8005af0:	08008ee4 	.word	0x08008ee4
 8005af4:	08008ee8 	.word	0x08008ee8
 8005af8:	08008eec 	.word	0x08008eec
 8005afc:	08008ef0 	.word	0x08008ef0
 8005b00:	08008ef4 	.word	0x08008ef4
 8005b04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	bfa8      	it	ge
 8005b0c:	461a      	movge	r2, r3
 8005b0e:	2a00      	cmp	r2, #0
 8005b10:	4691      	mov	r9, r2
 8005b12:	dc37      	bgt.n	8005b84 <_printf_float+0x370>
 8005b14:	f04f 0b00 	mov.w	fp, #0
 8005b18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b1c:	f104 021a 	add.w	r2, r4, #26
 8005b20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b22:	9305      	str	r3, [sp, #20]
 8005b24:	eba3 0309 	sub.w	r3, r3, r9
 8005b28:	455b      	cmp	r3, fp
 8005b2a:	dc33      	bgt.n	8005b94 <_printf_float+0x380>
 8005b2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b30:	429a      	cmp	r2, r3
 8005b32:	db3b      	blt.n	8005bac <_printf_float+0x398>
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	07da      	lsls	r2, r3, #31
 8005b38:	d438      	bmi.n	8005bac <_printf_float+0x398>
 8005b3a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005b3e:	eba2 0903 	sub.w	r9, r2, r3
 8005b42:	9b05      	ldr	r3, [sp, #20]
 8005b44:	1ad2      	subs	r2, r2, r3
 8005b46:	4591      	cmp	r9, r2
 8005b48:	bfa8      	it	ge
 8005b4a:	4691      	movge	r9, r2
 8005b4c:	f1b9 0f00 	cmp.w	r9, #0
 8005b50:	dc35      	bgt.n	8005bbe <_printf_float+0x3aa>
 8005b52:	f04f 0800 	mov.w	r8, #0
 8005b56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b5a:	f104 0a1a 	add.w	sl, r4, #26
 8005b5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b62:	1a9b      	subs	r3, r3, r2
 8005b64:	eba3 0309 	sub.w	r3, r3, r9
 8005b68:	4543      	cmp	r3, r8
 8005b6a:	f77f af79 	ble.w	8005a60 <_printf_float+0x24c>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	4652      	mov	r2, sl
 8005b72:	4631      	mov	r1, r6
 8005b74:	4628      	mov	r0, r5
 8005b76:	47b8      	blx	r7
 8005b78:	3001      	adds	r0, #1
 8005b7a:	f43f aeaa 	beq.w	80058d2 <_printf_float+0xbe>
 8005b7e:	f108 0801 	add.w	r8, r8, #1
 8005b82:	e7ec      	b.n	8005b5e <_printf_float+0x34a>
 8005b84:	4613      	mov	r3, r2
 8005b86:	4631      	mov	r1, r6
 8005b88:	4642      	mov	r2, r8
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	47b8      	blx	r7
 8005b8e:	3001      	adds	r0, #1
 8005b90:	d1c0      	bne.n	8005b14 <_printf_float+0x300>
 8005b92:	e69e      	b.n	80058d2 <_printf_float+0xbe>
 8005b94:	2301      	movs	r3, #1
 8005b96:	4631      	mov	r1, r6
 8005b98:	4628      	mov	r0, r5
 8005b9a:	9205      	str	r2, [sp, #20]
 8005b9c:	47b8      	blx	r7
 8005b9e:	3001      	adds	r0, #1
 8005ba0:	f43f ae97 	beq.w	80058d2 <_printf_float+0xbe>
 8005ba4:	9a05      	ldr	r2, [sp, #20]
 8005ba6:	f10b 0b01 	add.w	fp, fp, #1
 8005baa:	e7b9      	b.n	8005b20 <_printf_float+0x30c>
 8005bac:	ee18 3a10 	vmov	r3, s16
 8005bb0:	4652      	mov	r2, sl
 8005bb2:	4631      	mov	r1, r6
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	47b8      	blx	r7
 8005bb8:	3001      	adds	r0, #1
 8005bba:	d1be      	bne.n	8005b3a <_printf_float+0x326>
 8005bbc:	e689      	b.n	80058d2 <_printf_float+0xbe>
 8005bbe:	9a05      	ldr	r2, [sp, #20]
 8005bc0:	464b      	mov	r3, r9
 8005bc2:	4442      	add	r2, r8
 8005bc4:	4631      	mov	r1, r6
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	47b8      	blx	r7
 8005bca:	3001      	adds	r0, #1
 8005bcc:	d1c1      	bne.n	8005b52 <_printf_float+0x33e>
 8005bce:	e680      	b.n	80058d2 <_printf_float+0xbe>
 8005bd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bd2:	2a01      	cmp	r2, #1
 8005bd4:	dc01      	bgt.n	8005bda <_printf_float+0x3c6>
 8005bd6:	07db      	lsls	r3, r3, #31
 8005bd8:	d53a      	bpl.n	8005c50 <_printf_float+0x43c>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	4642      	mov	r2, r8
 8005bde:	4631      	mov	r1, r6
 8005be0:	4628      	mov	r0, r5
 8005be2:	47b8      	blx	r7
 8005be4:	3001      	adds	r0, #1
 8005be6:	f43f ae74 	beq.w	80058d2 <_printf_float+0xbe>
 8005bea:	ee18 3a10 	vmov	r3, s16
 8005bee:	4652      	mov	r2, sl
 8005bf0:	4631      	mov	r1, r6
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	47b8      	blx	r7
 8005bf6:	3001      	adds	r0, #1
 8005bf8:	f43f ae6b 	beq.w	80058d2 <_printf_float+0xbe>
 8005bfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c00:	2200      	movs	r2, #0
 8005c02:	2300      	movs	r3, #0
 8005c04:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005c08:	f7fa ff66 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c0c:	b9d8      	cbnz	r0, 8005c46 <_printf_float+0x432>
 8005c0e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005c12:	f108 0201 	add.w	r2, r8, #1
 8005c16:	4631      	mov	r1, r6
 8005c18:	4628      	mov	r0, r5
 8005c1a:	47b8      	blx	r7
 8005c1c:	3001      	adds	r0, #1
 8005c1e:	d10e      	bne.n	8005c3e <_printf_float+0x42a>
 8005c20:	e657      	b.n	80058d2 <_printf_float+0xbe>
 8005c22:	2301      	movs	r3, #1
 8005c24:	4652      	mov	r2, sl
 8005c26:	4631      	mov	r1, r6
 8005c28:	4628      	mov	r0, r5
 8005c2a:	47b8      	blx	r7
 8005c2c:	3001      	adds	r0, #1
 8005c2e:	f43f ae50 	beq.w	80058d2 <_printf_float+0xbe>
 8005c32:	f108 0801 	add.w	r8, r8, #1
 8005c36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	4543      	cmp	r3, r8
 8005c3c:	dcf1      	bgt.n	8005c22 <_printf_float+0x40e>
 8005c3e:	464b      	mov	r3, r9
 8005c40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c44:	e6da      	b.n	80059fc <_printf_float+0x1e8>
 8005c46:	f04f 0800 	mov.w	r8, #0
 8005c4a:	f104 0a1a 	add.w	sl, r4, #26
 8005c4e:	e7f2      	b.n	8005c36 <_printf_float+0x422>
 8005c50:	2301      	movs	r3, #1
 8005c52:	4642      	mov	r2, r8
 8005c54:	e7df      	b.n	8005c16 <_printf_float+0x402>
 8005c56:	2301      	movs	r3, #1
 8005c58:	464a      	mov	r2, r9
 8005c5a:	4631      	mov	r1, r6
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	47b8      	blx	r7
 8005c60:	3001      	adds	r0, #1
 8005c62:	f43f ae36 	beq.w	80058d2 <_printf_float+0xbe>
 8005c66:	f108 0801 	add.w	r8, r8, #1
 8005c6a:	68e3      	ldr	r3, [r4, #12]
 8005c6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c6e:	1a5b      	subs	r3, r3, r1
 8005c70:	4543      	cmp	r3, r8
 8005c72:	dcf0      	bgt.n	8005c56 <_printf_float+0x442>
 8005c74:	e6f8      	b.n	8005a68 <_printf_float+0x254>
 8005c76:	f04f 0800 	mov.w	r8, #0
 8005c7a:	f104 0919 	add.w	r9, r4, #25
 8005c7e:	e7f4      	b.n	8005c6a <_printf_float+0x456>

08005c80 <_printf_common>:
 8005c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c84:	4616      	mov	r6, r2
 8005c86:	4699      	mov	r9, r3
 8005c88:	688a      	ldr	r2, [r1, #8]
 8005c8a:	690b      	ldr	r3, [r1, #16]
 8005c8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c90:	4293      	cmp	r3, r2
 8005c92:	bfb8      	it	lt
 8005c94:	4613      	movlt	r3, r2
 8005c96:	6033      	str	r3, [r6, #0]
 8005c98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c9c:	4607      	mov	r7, r0
 8005c9e:	460c      	mov	r4, r1
 8005ca0:	b10a      	cbz	r2, 8005ca6 <_printf_common+0x26>
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	6033      	str	r3, [r6, #0]
 8005ca6:	6823      	ldr	r3, [r4, #0]
 8005ca8:	0699      	lsls	r1, r3, #26
 8005caa:	bf42      	ittt	mi
 8005cac:	6833      	ldrmi	r3, [r6, #0]
 8005cae:	3302      	addmi	r3, #2
 8005cb0:	6033      	strmi	r3, [r6, #0]
 8005cb2:	6825      	ldr	r5, [r4, #0]
 8005cb4:	f015 0506 	ands.w	r5, r5, #6
 8005cb8:	d106      	bne.n	8005cc8 <_printf_common+0x48>
 8005cba:	f104 0a19 	add.w	sl, r4, #25
 8005cbe:	68e3      	ldr	r3, [r4, #12]
 8005cc0:	6832      	ldr	r2, [r6, #0]
 8005cc2:	1a9b      	subs	r3, r3, r2
 8005cc4:	42ab      	cmp	r3, r5
 8005cc6:	dc26      	bgt.n	8005d16 <_printf_common+0x96>
 8005cc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ccc:	1e13      	subs	r3, r2, #0
 8005cce:	6822      	ldr	r2, [r4, #0]
 8005cd0:	bf18      	it	ne
 8005cd2:	2301      	movne	r3, #1
 8005cd4:	0692      	lsls	r2, r2, #26
 8005cd6:	d42b      	bmi.n	8005d30 <_printf_common+0xb0>
 8005cd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cdc:	4649      	mov	r1, r9
 8005cde:	4638      	mov	r0, r7
 8005ce0:	47c0      	blx	r8
 8005ce2:	3001      	adds	r0, #1
 8005ce4:	d01e      	beq.n	8005d24 <_printf_common+0xa4>
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	6922      	ldr	r2, [r4, #16]
 8005cea:	f003 0306 	and.w	r3, r3, #6
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	bf02      	ittt	eq
 8005cf2:	68e5      	ldreq	r5, [r4, #12]
 8005cf4:	6833      	ldreq	r3, [r6, #0]
 8005cf6:	1aed      	subeq	r5, r5, r3
 8005cf8:	68a3      	ldr	r3, [r4, #8]
 8005cfa:	bf0c      	ite	eq
 8005cfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d00:	2500      	movne	r5, #0
 8005d02:	4293      	cmp	r3, r2
 8005d04:	bfc4      	itt	gt
 8005d06:	1a9b      	subgt	r3, r3, r2
 8005d08:	18ed      	addgt	r5, r5, r3
 8005d0a:	2600      	movs	r6, #0
 8005d0c:	341a      	adds	r4, #26
 8005d0e:	42b5      	cmp	r5, r6
 8005d10:	d11a      	bne.n	8005d48 <_printf_common+0xc8>
 8005d12:	2000      	movs	r0, #0
 8005d14:	e008      	b.n	8005d28 <_printf_common+0xa8>
 8005d16:	2301      	movs	r3, #1
 8005d18:	4652      	mov	r2, sl
 8005d1a:	4649      	mov	r1, r9
 8005d1c:	4638      	mov	r0, r7
 8005d1e:	47c0      	blx	r8
 8005d20:	3001      	adds	r0, #1
 8005d22:	d103      	bne.n	8005d2c <_printf_common+0xac>
 8005d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d2c:	3501      	adds	r5, #1
 8005d2e:	e7c6      	b.n	8005cbe <_printf_common+0x3e>
 8005d30:	18e1      	adds	r1, r4, r3
 8005d32:	1c5a      	adds	r2, r3, #1
 8005d34:	2030      	movs	r0, #48	; 0x30
 8005d36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d3a:	4422      	add	r2, r4
 8005d3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d44:	3302      	adds	r3, #2
 8005d46:	e7c7      	b.n	8005cd8 <_printf_common+0x58>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	4622      	mov	r2, r4
 8005d4c:	4649      	mov	r1, r9
 8005d4e:	4638      	mov	r0, r7
 8005d50:	47c0      	blx	r8
 8005d52:	3001      	adds	r0, #1
 8005d54:	d0e6      	beq.n	8005d24 <_printf_common+0xa4>
 8005d56:	3601      	adds	r6, #1
 8005d58:	e7d9      	b.n	8005d0e <_printf_common+0x8e>
	...

08005d5c <_printf_i>:
 8005d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d60:	7e0f      	ldrb	r7, [r1, #24]
 8005d62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d64:	2f78      	cmp	r7, #120	; 0x78
 8005d66:	4691      	mov	r9, r2
 8005d68:	4680      	mov	r8, r0
 8005d6a:	460c      	mov	r4, r1
 8005d6c:	469a      	mov	sl, r3
 8005d6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d72:	d807      	bhi.n	8005d84 <_printf_i+0x28>
 8005d74:	2f62      	cmp	r7, #98	; 0x62
 8005d76:	d80a      	bhi.n	8005d8e <_printf_i+0x32>
 8005d78:	2f00      	cmp	r7, #0
 8005d7a:	f000 80d4 	beq.w	8005f26 <_printf_i+0x1ca>
 8005d7e:	2f58      	cmp	r7, #88	; 0x58
 8005d80:	f000 80c0 	beq.w	8005f04 <_printf_i+0x1a8>
 8005d84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d8c:	e03a      	b.n	8005e04 <_printf_i+0xa8>
 8005d8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d92:	2b15      	cmp	r3, #21
 8005d94:	d8f6      	bhi.n	8005d84 <_printf_i+0x28>
 8005d96:	a101      	add	r1, pc, #4	; (adr r1, 8005d9c <_printf_i+0x40>)
 8005d98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d9c:	08005df5 	.word	0x08005df5
 8005da0:	08005e09 	.word	0x08005e09
 8005da4:	08005d85 	.word	0x08005d85
 8005da8:	08005d85 	.word	0x08005d85
 8005dac:	08005d85 	.word	0x08005d85
 8005db0:	08005d85 	.word	0x08005d85
 8005db4:	08005e09 	.word	0x08005e09
 8005db8:	08005d85 	.word	0x08005d85
 8005dbc:	08005d85 	.word	0x08005d85
 8005dc0:	08005d85 	.word	0x08005d85
 8005dc4:	08005d85 	.word	0x08005d85
 8005dc8:	08005f0d 	.word	0x08005f0d
 8005dcc:	08005e35 	.word	0x08005e35
 8005dd0:	08005ec7 	.word	0x08005ec7
 8005dd4:	08005d85 	.word	0x08005d85
 8005dd8:	08005d85 	.word	0x08005d85
 8005ddc:	08005f2f 	.word	0x08005f2f
 8005de0:	08005d85 	.word	0x08005d85
 8005de4:	08005e35 	.word	0x08005e35
 8005de8:	08005d85 	.word	0x08005d85
 8005dec:	08005d85 	.word	0x08005d85
 8005df0:	08005ecf 	.word	0x08005ecf
 8005df4:	682b      	ldr	r3, [r5, #0]
 8005df6:	1d1a      	adds	r2, r3, #4
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	602a      	str	r2, [r5, #0]
 8005dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e04:	2301      	movs	r3, #1
 8005e06:	e09f      	b.n	8005f48 <_printf_i+0x1ec>
 8005e08:	6820      	ldr	r0, [r4, #0]
 8005e0a:	682b      	ldr	r3, [r5, #0]
 8005e0c:	0607      	lsls	r7, r0, #24
 8005e0e:	f103 0104 	add.w	r1, r3, #4
 8005e12:	6029      	str	r1, [r5, #0]
 8005e14:	d501      	bpl.n	8005e1a <_printf_i+0xbe>
 8005e16:	681e      	ldr	r6, [r3, #0]
 8005e18:	e003      	b.n	8005e22 <_printf_i+0xc6>
 8005e1a:	0646      	lsls	r6, r0, #25
 8005e1c:	d5fb      	bpl.n	8005e16 <_printf_i+0xba>
 8005e1e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005e22:	2e00      	cmp	r6, #0
 8005e24:	da03      	bge.n	8005e2e <_printf_i+0xd2>
 8005e26:	232d      	movs	r3, #45	; 0x2d
 8005e28:	4276      	negs	r6, r6
 8005e2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e2e:	485a      	ldr	r0, [pc, #360]	; (8005f98 <_printf_i+0x23c>)
 8005e30:	230a      	movs	r3, #10
 8005e32:	e012      	b.n	8005e5a <_printf_i+0xfe>
 8005e34:	682b      	ldr	r3, [r5, #0]
 8005e36:	6820      	ldr	r0, [r4, #0]
 8005e38:	1d19      	adds	r1, r3, #4
 8005e3a:	6029      	str	r1, [r5, #0]
 8005e3c:	0605      	lsls	r5, r0, #24
 8005e3e:	d501      	bpl.n	8005e44 <_printf_i+0xe8>
 8005e40:	681e      	ldr	r6, [r3, #0]
 8005e42:	e002      	b.n	8005e4a <_printf_i+0xee>
 8005e44:	0641      	lsls	r1, r0, #25
 8005e46:	d5fb      	bpl.n	8005e40 <_printf_i+0xe4>
 8005e48:	881e      	ldrh	r6, [r3, #0]
 8005e4a:	4853      	ldr	r0, [pc, #332]	; (8005f98 <_printf_i+0x23c>)
 8005e4c:	2f6f      	cmp	r7, #111	; 0x6f
 8005e4e:	bf0c      	ite	eq
 8005e50:	2308      	moveq	r3, #8
 8005e52:	230a      	movne	r3, #10
 8005e54:	2100      	movs	r1, #0
 8005e56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e5a:	6865      	ldr	r5, [r4, #4]
 8005e5c:	60a5      	str	r5, [r4, #8]
 8005e5e:	2d00      	cmp	r5, #0
 8005e60:	bfa2      	ittt	ge
 8005e62:	6821      	ldrge	r1, [r4, #0]
 8005e64:	f021 0104 	bicge.w	r1, r1, #4
 8005e68:	6021      	strge	r1, [r4, #0]
 8005e6a:	b90e      	cbnz	r6, 8005e70 <_printf_i+0x114>
 8005e6c:	2d00      	cmp	r5, #0
 8005e6e:	d04b      	beq.n	8005f08 <_printf_i+0x1ac>
 8005e70:	4615      	mov	r5, r2
 8005e72:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e76:	fb03 6711 	mls	r7, r3, r1, r6
 8005e7a:	5dc7      	ldrb	r7, [r0, r7]
 8005e7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e80:	4637      	mov	r7, r6
 8005e82:	42bb      	cmp	r3, r7
 8005e84:	460e      	mov	r6, r1
 8005e86:	d9f4      	bls.n	8005e72 <_printf_i+0x116>
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d10b      	bne.n	8005ea4 <_printf_i+0x148>
 8005e8c:	6823      	ldr	r3, [r4, #0]
 8005e8e:	07de      	lsls	r6, r3, #31
 8005e90:	d508      	bpl.n	8005ea4 <_printf_i+0x148>
 8005e92:	6923      	ldr	r3, [r4, #16]
 8005e94:	6861      	ldr	r1, [r4, #4]
 8005e96:	4299      	cmp	r1, r3
 8005e98:	bfde      	ittt	le
 8005e9a:	2330      	movle	r3, #48	; 0x30
 8005e9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ea0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005ea4:	1b52      	subs	r2, r2, r5
 8005ea6:	6122      	str	r2, [r4, #16]
 8005ea8:	f8cd a000 	str.w	sl, [sp]
 8005eac:	464b      	mov	r3, r9
 8005eae:	aa03      	add	r2, sp, #12
 8005eb0:	4621      	mov	r1, r4
 8005eb2:	4640      	mov	r0, r8
 8005eb4:	f7ff fee4 	bl	8005c80 <_printf_common>
 8005eb8:	3001      	adds	r0, #1
 8005eba:	d14a      	bne.n	8005f52 <_printf_i+0x1f6>
 8005ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ec0:	b004      	add	sp, #16
 8005ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	f043 0320 	orr.w	r3, r3, #32
 8005ecc:	6023      	str	r3, [r4, #0]
 8005ece:	4833      	ldr	r0, [pc, #204]	; (8005f9c <_printf_i+0x240>)
 8005ed0:	2778      	movs	r7, #120	; 0x78
 8005ed2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ed6:	6823      	ldr	r3, [r4, #0]
 8005ed8:	6829      	ldr	r1, [r5, #0]
 8005eda:	061f      	lsls	r7, r3, #24
 8005edc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ee0:	d402      	bmi.n	8005ee8 <_printf_i+0x18c>
 8005ee2:	065f      	lsls	r7, r3, #25
 8005ee4:	bf48      	it	mi
 8005ee6:	b2b6      	uxthmi	r6, r6
 8005ee8:	07df      	lsls	r7, r3, #31
 8005eea:	bf48      	it	mi
 8005eec:	f043 0320 	orrmi.w	r3, r3, #32
 8005ef0:	6029      	str	r1, [r5, #0]
 8005ef2:	bf48      	it	mi
 8005ef4:	6023      	strmi	r3, [r4, #0]
 8005ef6:	b91e      	cbnz	r6, 8005f00 <_printf_i+0x1a4>
 8005ef8:	6823      	ldr	r3, [r4, #0]
 8005efa:	f023 0320 	bic.w	r3, r3, #32
 8005efe:	6023      	str	r3, [r4, #0]
 8005f00:	2310      	movs	r3, #16
 8005f02:	e7a7      	b.n	8005e54 <_printf_i+0xf8>
 8005f04:	4824      	ldr	r0, [pc, #144]	; (8005f98 <_printf_i+0x23c>)
 8005f06:	e7e4      	b.n	8005ed2 <_printf_i+0x176>
 8005f08:	4615      	mov	r5, r2
 8005f0a:	e7bd      	b.n	8005e88 <_printf_i+0x12c>
 8005f0c:	682b      	ldr	r3, [r5, #0]
 8005f0e:	6826      	ldr	r6, [r4, #0]
 8005f10:	6961      	ldr	r1, [r4, #20]
 8005f12:	1d18      	adds	r0, r3, #4
 8005f14:	6028      	str	r0, [r5, #0]
 8005f16:	0635      	lsls	r5, r6, #24
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	d501      	bpl.n	8005f20 <_printf_i+0x1c4>
 8005f1c:	6019      	str	r1, [r3, #0]
 8005f1e:	e002      	b.n	8005f26 <_printf_i+0x1ca>
 8005f20:	0670      	lsls	r0, r6, #25
 8005f22:	d5fb      	bpl.n	8005f1c <_printf_i+0x1c0>
 8005f24:	8019      	strh	r1, [r3, #0]
 8005f26:	2300      	movs	r3, #0
 8005f28:	6123      	str	r3, [r4, #16]
 8005f2a:	4615      	mov	r5, r2
 8005f2c:	e7bc      	b.n	8005ea8 <_printf_i+0x14c>
 8005f2e:	682b      	ldr	r3, [r5, #0]
 8005f30:	1d1a      	adds	r2, r3, #4
 8005f32:	602a      	str	r2, [r5, #0]
 8005f34:	681d      	ldr	r5, [r3, #0]
 8005f36:	6862      	ldr	r2, [r4, #4]
 8005f38:	2100      	movs	r1, #0
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	f7fa f950 	bl	80001e0 <memchr>
 8005f40:	b108      	cbz	r0, 8005f46 <_printf_i+0x1ea>
 8005f42:	1b40      	subs	r0, r0, r5
 8005f44:	6060      	str	r0, [r4, #4]
 8005f46:	6863      	ldr	r3, [r4, #4]
 8005f48:	6123      	str	r3, [r4, #16]
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f50:	e7aa      	b.n	8005ea8 <_printf_i+0x14c>
 8005f52:	6923      	ldr	r3, [r4, #16]
 8005f54:	462a      	mov	r2, r5
 8005f56:	4649      	mov	r1, r9
 8005f58:	4640      	mov	r0, r8
 8005f5a:	47d0      	blx	sl
 8005f5c:	3001      	adds	r0, #1
 8005f5e:	d0ad      	beq.n	8005ebc <_printf_i+0x160>
 8005f60:	6823      	ldr	r3, [r4, #0]
 8005f62:	079b      	lsls	r3, r3, #30
 8005f64:	d413      	bmi.n	8005f8e <_printf_i+0x232>
 8005f66:	68e0      	ldr	r0, [r4, #12]
 8005f68:	9b03      	ldr	r3, [sp, #12]
 8005f6a:	4298      	cmp	r0, r3
 8005f6c:	bfb8      	it	lt
 8005f6e:	4618      	movlt	r0, r3
 8005f70:	e7a6      	b.n	8005ec0 <_printf_i+0x164>
 8005f72:	2301      	movs	r3, #1
 8005f74:	4632      	mov	r2, r6
 8005f76:	4649      	mov	r1, r9
 8005f78:	4640      	mov	r0, r8
 8005f7a:	47d0      	blx	sl
 8005f7c:	3001      	adds	r0, #1
 8005f7e:	d09d      	beq.n	8005ebc <_printf_i+0x160>
 8005f80:	3501      	adds	r5, #1
 8005f82:	68e3      	ldr	r3, [r4, #12]
 8005f84:	9903      	ldr	r1, [sp, #12]
 8005f86:	1a5b      	subs	r3, r3, r1
 8005f88:	42ab      	cmp	r3, r5
 8005f8a:	dcf2      	bgt.n	8005f72 <_printf_i+0x216>
 8005f8c:	e7eb      	b.n	8005f66 <_printf_i+0x20a>
 8005f8e:	2500      	movs	r5, #0
 8005f90:	f104 0619 	add.w	r6, r4, #25
 8005f94:	e7f5      	b.n	8005f82 <_printf_i+0x226>
 8005f96:	bf00      	nop
 8005f98:	08008ef6 	.word	0x08008ef6
 8005f9c:	08008f07 	.word	0x08008f07

08005fa0 <std>:
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	b510      	push	{r4, lr}
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	e9c0 3300 	strd	r3, r3, [r0]
 8005faa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005fae:	6083      	str	r3, [r0, #8]
 8005fb0:	8181      	strh	r1, [r0, #12]
 8005fb2:	6643      	str	r3, [r0, #100]	; 0x64
 8005fb4:	81c2      	strh	r2, [r0, #14]
 8005fb6:	6183      	str	r3, [r0, #24]
 8005fb8:	4619      	mov	r1, r3
 8005fba:	2208      	movs	r2, #8
 8005fbc:	305c      	adds	r0, #92	; 0x5c
 8005fbe:	f000 f902 	bl	80061c6 <memset>
 8005fc2:	4b05      	ldr	r3, [pc, #20]	; (8005fd8 <std+0x38>)
 8005fc4:	6263      	str	r3, [r4, #36]	; 0x24
 8005fc6:	4b05      	ldr	r3, [pc, #20]	; (8005fdc <std+0x3c>)
 8005fc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8005fca:	4b05      	ldr	r3, [pc, #20]	; (8005fe0 <std+0x40>)
 8005fcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005fce:	4b05      	ldr	r3, [pc, #20]	; (8005fe4 <std+0x44>)
 8005fd0:	6224      	str	r4, [r4, #32]
 8005fd2:	6323      	str	r3, [r4, #48]	; 0x30
 8005fd4:	bd10      	pop	{r4, pc}
 8005fd6:	bf00      	nop
 8005fd8:	08006141 	.word	0x08006141
 8005fdc:	08006163 	.word	0x08006163
 8005fe0:	0800619b 	.word	0x0800619b
 8005fe4:	080061bf 	.word	0x080061bf

08005fe8 <stdio_exit_handler>:
 8005fe8:	4a02      	ldr	r2, [pc, #8]	; (8005ff4 <stdio_exit_handler+0xc>)
 8005fea:	4903      	ldr	r1, [pc, #12]	; (8005ff8 <stdio_exit_handler+0x10>)
 8005fec:	4803      	ldr	r0, [pc, #12]	; (8005ffc <stdio_exit_handler+0x14>)
 8005fee:	f000 b869 	b.w	80060c4 <_fwalk_sglue>
 8005ff2:	bf00      	nop
 8005ff4:	20000018 	.word	0x20000018
 8005ff8:	08007c89 	.word	0x08007c89
 8005ffc:	20000024 	.word	0x20000024

08006000 <cleanup_stdio>:
 8006000:	6841      	ldr	r1, [r0, #4]
 8006002:	4b0c      	ldr	r3, [pc, #48]	; (8006034 <cleanup_stdio+0x34>)
 8006004:	4299      	cmp	r1, r3
 8006006:	b510      	push	{r4, lr}
 8006008:	4604      	mov	r4, r0
 800600a:	d001      	beq.n	8006010 <cleanup_stdio+0x10>
 800600c:	f001 fe3c 	bl	8007c88 <_fflush_r>
 8006010:	68a1      	ldr	r1, [r4, #8]
 8006012:	4b09      	ldr	r3, [pc, #36]	; (8006038 <cleanup_stdio+0x38>)
 8006014:	4299      	cmp	r1, r3
 8006016:	d002      	beq.n	800601e <cleanup_stdio+0x1e>
 8006018:	4620      	mov	r0, r4
 800601a:	f001 fe35 	bl	8007c88 <_fflush_r>
 800601e:	68e1      	ldr	r1, [r4, #12]
 8006020:	4b06      	ldr	r3, [pc, #24]	; (800603c <cleanup_stdio+0x3c>)
 8006022:	4299      	cmp	r1, r3
 8006024:	d004      	beq.n	8006030 <cleanup_stdio+0x30>
 8006026:	4620      	mov	r0, r4
 8006028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800602c:	f001 be2c 	b.w	8007c88 <_fflush_r>
 8006030:	bd10      	pop	{r4, pc}
 8006032:	bf00      	nop
 8006034:	20000348 	.word	0x20000348
 8006038:	200003b0 	.word	0x200003b0
 800603c:	20000418 	.word	0x20000418

08006040 <global_stdio_init.part.0>:
 8006040:	b510      	push	{r4, lr}
 8006042:	4b0b      	ldr	r3, [pc, #44]	; (8006070 <global_stdio_init.part.0+0x30>)
 8006044:	4c0b      	ldr	r4, [pc, #44]	; (8006074 <global_stdio_init.part.0+0x34>)
 8006046:	4a0c      	ldr	r2, [pc, #48]	; (8006078 <global_stdio_init.part.0+0x38>)
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	4620      	mov	r0, r4
 800604c:	2200      	movs	r2, #0
 800604e:	2104      	movs	r1, #4
 8006050:	f7ff ffa6 	bl	8005fa0 <std>
 8006054:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006058:	2201      	movs	r2, #1
 800605a:	2109      	movs	r1, #9
 800605c:	f7ff ffa0 	bl	8005fa0 <std>
 8006060:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006064:	2202      	movs	r2, #2
 8006066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800606a:	2112      	movs	r1, #18
 800606c:	f7ff bf98 	b.w	8005fa0 <std>
 8006070:	20000480 	.word	0x20000480
 8006074:	20000348 	.word	0x20000348
 8006078:	08005fe9 	.word	0x08005fe9

0800607c <__sfp_lock_acquire>:
 800607c:	4801      	ldr	r0, [pc, #4]	; (8006084 <__sfp_lock_acquire+0x8>)
 800607e:	f000 b91f 	b.w	80062c0 <__retarget_lock_acquire_recursive>
 8006082:	bf00      	nop
 8006084:	20000489 	.word	0x20000489

08006088 <__sfp_lock_release>:
 8006088:	4801      	ldr	r0, [pc, #4]	; (8006090 <__sfp_lock_release+0x8>)
 800608a:	f000 b91a 	b.w	80062c2 <__retarget_lock_release_recursive>
 800608e:	bf00      	nop
 8006090:	20000489 	.word	0x20000489

08006094 <__sinit>:
 8006094:	b510      	push	{r4, lr}
 8006096:	4604      	mov	r4, r0
 8006098:	f7ff fff0 	bl	800607c <__sfp_lock_acquire>
 800609c:	6a23      	ldr	r3, [r4, #32]
 800609e:	b11b      	cbz	r3, 80060a8 <__sinit+0x14>
 80060a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060a4:	f7ff bff0 	b.w	8006088 <__sfp_lock_release>
 80060a8:	4b04      	ldr	r3, [pc, #16]	; (80060bc <__sinit+0x28>)
 80060aa:	6223      	str	r3, [r4, #32]
 80060ac:	4b04      	ldr	r3, [pc, #16]	; (80060c0 <__sinit+0x2c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1f5      	bne.n	80060a0 <__sinit+0xc>
 80060b4:	f7ff ffc4 	bl	8006040 <global_stdio_init.part.0>
 80060b8:	e7f2      	b.n	80060a0 <__sinit+0xc>
 80060ba:	bf00      	nop
 80060bc:	08006001 	.word	0x08006001
 80060c0:	20000480 	.word	0x20000480

080060c4 <_fwalk_sglue>:
 80060c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060c8:	4607      	mov	r7, r0
 80060ca:	4688      	mov	r8, r1
 80060cc:	4614      	mov	r4, r2
 80060ce:	2600      	movs	r6, #0
 80060d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060d4:	f1b9 0901 	subs.w	r9, r9, #1
 80060d8:	d505      	bpl.n	80060e6 <_fwalk_sglue+0x22>
 80060da:	6824      	ldr	r4, [r4, #0]
 80060dc:	2c00      	cmp	r4, #0
 80060de:	d1f7      	bne.n	80060d0 <_fwalk_sglue+0xc>
 80060e0:	4630      	mov	r0, r6
 80060e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060e6:	89ab      	ldrh	r3, [r5, #12]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d907      	bls.n	80060fc <_fwalk_sglue+0x38>
 80060ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060f0:	3301      	adds	r3, #1
 80060f2:	d003      	beq.n	80060fc <_fwalk_sglue+0x38>
 80060f4:	4629      	mov	r1, r5
 80060f6:	4638      	mov	r0, r7
 80060f8:	47c0      	blx	r8
 80060fa:	4306      	orrs	r6, r0
 80060fc:	3568      	adds	r5, #104	; 0x68
 80060fe:	e7e9      	b.n	80060d4 <_fwalk_sglue+0x10>

08006100 <siprintf>:
 8006100:	b40e      	push	{r1, r2, r3}
 8006102:	b500      	push	{lr}
 8006104:	b09c      	sub	sp, #112	; 0x70
 8006106:	ab1d      	add	r3, sp, #116	; 0x74
 8006108:	9002      	str	r0, [sp, #8]
 800610a:	9006      	str	r0, [sp, #24]
 800610c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006110:	4809      	ldr	r0, [pc, #36]	; (8006138 <siprintf+0x38>)
 8006112:	9107      	str	r1, [sp, #28]
 8006114:	9104      	str	r1, [sp, #16]
 8006116:	4909      	ldr	r1, [pc, #36]	; (800613c <siprintf+0x3c>)
 8006118:	f853 2b04 	ldr.w	r2, [r3], #4
 800611c:	9105      	str	r1, [sp, #20]
 800611e:	6800      	ldr	r0, [r0, #0]
 8006120:	9301      	str	r3, [sp, #4]
 8006122:	a902      	add	r1, sp, #8
 8006124:	f001 fc2c 	bl	8007980 <_svfiprintf_r>
 8006128:	9b02      	ldr	r3, [sp, #8]
 800612a:	2200      	movs	r2, #0
 800612c:	701a      	strb	r2, [r3, #0]
 800612e:	b01c      	add	sp, #112	; 0x70
 8006130:	f85d eb04 	ldr.w	lr, [sp], #4
 8006134:	b003      	add	sp, #12
 8006136:	4770      	bx	lr
 8006138:	20000070 	.word	0x20000070
 800613c:	ffff0208 	.word	0xffff0208

08006140 <__sread>:
 8006140:	b510      	push	{r4, lr}
 8006142:	460c      	mov	r4, r1
 8006144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006148:	f000 f86c 	bl	8006224 <_read_r>
 800614c:	2800      	cmp	r0, #0
 800614e:	bfab      	itete	ge
 8006150:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006152:	89a3      	ldrhlt	r3, [r4, #12]
 8006154:	181b      	addge	r3, r3, r0
 8006156:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800615a:	bfac      	ite	ge
 800615c:	6563      	strge	r3, [r4, #84]	; 0x54
 800615e:	81a3      	strhlt	r3, [r4, #12]
 8006160:	bd10      	pop	{r4, pc}

08006162 <__swrite>:
 8006162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006166:	461f      	mov	r7, r3
 8006168:	898b      	ldrh	r3, [r1, #12]
 800616a:	05db      	lsls	r3, r3, #23
 800616c:	4605      	mov	r5, r0
 800616e:	460c      	mov	r4, r1
 8006170:	4616      	mov	r6, r2
 8006172:	d505      	bpl.n	8006180 <__swrite+0x1e>
 8006174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006178:	2302      	movs	r3, #2
 800617a:	2200      	movs	r2, #0
 800617c:	f000 f840 	bl	8006200 <_lseek_r>
 8006180:	89a3      	ldrh	r3, [r4, #12]
 8006182:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006186:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800618a:	81a3      	strh	r3, [r4, #12]
 800618c:	4632      	mov	r2, r6
 800618e:	463b      	mov	r3, r7
 8006190:	4628      	mov	r0, r5
 8006192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006196:	f000 b857 	b.w	8006248 <_write_r>

0800619a <__sseek>:
 800619a:	b510      	push	{r4, lr}
 800619c:	460c      	mov	r4, r1
 800619e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061a2:	f000 f82d 	bl	8006200 <_lseek_r>
 80061a6:	1c43      	adds	r3, r0, #1
 80061a8:	89a3      	ldrh	r3, [r4, #12]
 80061aa:	bf15      	itete	ne
 80061ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80061ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061b6:	81a3      	strheq	r3, [r4, #12]
 80061b8:	bf18      	it	ne
 80061ba:	81a3      	strhne	r3, [r4, #12]
 80061bc:	bd10      	pop	{r4, pc}

080061be <__sclose>:
 80061be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061c2:	f000 b80d 	b.w	80061e0 <_close_r>

080061c6 <memset>:
 80061c6:	4402      	add	r2, r0
 80061c8:	4603      	mov	r3, r0
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d100      	bne.n	80061d0 <memset+0xa>
 80061ce:	4770      	bx	lr
 80061d0:	f803 1b01 	strb.w	r1, [r3], #1
 80061d4:	e7f9      	b.n	80061ca <memset+0x4>
	...

080061d8 <_localeconv_r>:
 80061d8:	4800      	ldr	r0, [pc, #0]	; (80061dc <_localeconv_r+0x4>)
 80061da:	4770      	bx	lr
 80061dc:	20000164 	.word	0x20000164

080061e0 <_close_r>:
 80061e0:	b538      	push	{r3, r4, r5, lr}
 80061e2:	4d06      	ldr	r5, [pc, #24]	; (80061fc <_close_r+0x1c>)
 80061e4:	2300      	movs	r3, #0
 80061e6:	4604      	mov	r4, r0
 80061e8:	4608      	mov	r0, r1
 80061ea:	602b      	str	r3, [r5, #0]
 80061ec:	f7fc fc9f 	bl	8002b2e <_close>
 80061f0:	1c43      	adds	r3, r0, #1
 80061f2:	d102      	bne.n	80061fa <_close_r+0x1a>
 80061f4:	682b      	ldr	r3, [r5, #0]
 80061f6:	b103      	cbz	r3, 80061fa <_close_r+0x1a>
 80061f8:	6023      	str	r3, [r4, #0]
 80061fa:	bd38      	pop	{r3, r4, r5, pc}
 80061fc:	20000484 	.word	0x20000484

08006200 <_lseek_r>:
 8006200:	b538      	push	{r3, r4, r5, lr}
 8006202:	4d07      	ldr	r5, [pc, #28]	; (8006220 <_lseek_r+0x20>)
 8006204:	4604      	mov	r4, r0
 8006206:	4608      	mov	r0, r1
 8006208:	4611      	mov	r1, r2
 800620a:	2200      	movs	r2, #0
 800620c:	602a      	str	r2, [r5, #0]
 800620e:	461a      	mov	r2, r3
 8006210:	f7fc fcb4 	bl	8002b7c <_lseek>
 8006214:	1c43      	adds	r3, r0, #1
 8006216:	d102      	bne.n	800621e <_lseek_r+0x1e>
 8006218:	682b      	ldr	r3, [r5, #0]
 800621a:	b103      	cbz	r3, 800621e <_lseek_r+0x1e>
 800621c:	6023      	str	r3, [r4, #0]
 800621e:	bd38      	pop	{r3, r4, r5, pc}
 8006220:	20000484 	.word	0x20000484

08006224 <_read_r>:
 8006224:	b538      	push	{r3, r4, r5, lr}
 8006226:	4d07      	ldr	r5, [pc, #28]	; (8006244 <_read_r+0x20>)
 8006228:	4604      	mov	r4, r0
 800622a:	4608      	mov	r0, r1
 800622c:	4611      	mov	r1, r2
 800622e:	2200      	movs	r2, #0
 8006230:	602a      	str	r2, [r5, #0]
 8006232:	461a      	mov	r2, r3
 8006234:	f7fc fc42 	bl	8002abc <_read>
 8006238:	1c43      	adds	r3, r0, #1
 800623a:	d102      	bne.n	8006242 <_read_r+0x1e>
 800623c:	682b      	ldr	r3, [r5, #0]
 800623e:	b103      	cbz	r3, 8006242 <_read_r+0x1e>
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	bd38      	pop	{r3, r4, r5, pc}
 8006244:	20000484 	.word	0x20000484

08006248 <_write_r>:
 8006248:	b538      	push	{r3, r4, r5, lr}
 800624a:	4d07      	ldr	r5, [pc, #28]	; (8006268 <_write_r+0x20>)
 800624c:	4604      	mov	r4, r0
 800624e:	4608      	mov	r0, r1
 8006250:	4611      	mov	r1, r2
 8006252:	2200      	movs	r2, #0
 8006254:	602a      	str	r2, [r5, #0]
 8006256:	461a      	mov	r2, r3
 8006258:	f7fc fc4d 	bl	8002af6 <_write>
 800625c:	1c43      	adds	r3, r0, #1
 800625e:	d102      	bne.n	8006266 <_write_r+0x1e>
 8006260:	682b      	ldr	r3, [r5, #0]
 8006262:	b103      	cbz	r3, 8006266 <_write_r+0x1e>
 8006264:	6023      	str	r3, [r4, #0]
 8006266:	bd38      	pop	{r3, r4, r5, pc}
 8006268:	20000484 	.word	0x20000484

0800626c <__errno>:
 800626c:	4b01      	ldr	r3, [pc, #4]	; (8006274 <__errno+0x8>)
 800626e:	6818      	ldr	r0, [r3, #0]
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	20000070 	.word	0x20000070

08006278 <__libc_init_array>:
 8006278:	b570      	push	{r4, r5, r6, lr}
 800627a:	4d0d      	ldr	r5, [pc, #52]	; (80062b0 <__libc_init_array+0x38>)
 800627c:	4c0d      	ldr	r4, [pc, #52]	; (80062b4 <__libc_init_array+0x3c>)
 800627e:	1b64      	subs	r4, r4, r5
 8006280:	10a4      	asrs	r4, r4, #2
 8006282:	2600      	movs	r6, #0
 8006284:	42a6      	cmp	r6, r4
 8006286:	d109      	bne.n	800629c <__libc_init_array+0x24>
 8006288:	4d0b      	ldr	r5, [pc, #44]	; (80062b8 <__libc_init_array+0x40>)
 800628a:	4c0c      	ldr	r4, [pc, #48]	; (80062bc <__libc_init_array+0x44>)
 800628c:	f002 fde8 	bl	8008e60 <_init>
 8006290:	1b64      	subs	r4, r4, r5
 8006292:	10a4      	asrs	r4, r4, #2
 8006294:	2600      	movs	r6, #0
 8006296:	42a6      	cmp	r6, r4
 8006298:	d105      	bne.n	80062a6 <__libc_init_array+0x2e>
 800629a:	bd70      	pop	{r4, r5, r6, pc}
 800629c:	f855 3b04 	ldr.w	r3, [r5], #4
 80062a0:	4798      	blx	r3
 80062a2:	3601      	adds	r6, #1
 80062a4:	e7ee      	b.n	8006284 <__libc_init_array+0xc>
 80062a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80062aa:	4798      	blx	r3
 80062ac:	3601      	adds	r6, #1
 80062ae:	e7f2      	b.n	8006296 <__libc_init_array+0x1e>
 80062b0:	080092ac 	.word	0x080092ac
 80062b4:	080092ac 	.word	0x080092ac
 80062b8:	080092ac 	.word	0x080092ac
 80062bc:	080092b0 	.word	0x080092b0

080062c0 <__retarget_lock_acquire_recursive>:
 80062c0:	4770      	bx	lr

080062c2 <__retarget_lock_release_recursive>:
 80062c2:	4770      	bx	lr

080062c4 <memcpy>:
 80062c4:	440a      	add	r2, r1
 80062c6:	4291      	cmp	r1, r2
 80062c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80062cc:	d100      	bne.n	80062d0 <memcpy+0xc>
 80062ce:	4770      	bx	lr
 80062d0:	b510      	push	{r4, lr}
 80062d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062da:	4291      	cmp	r1, r2
 80062dc:	d1f9      	bne.n	80062d2 <memcpy+0xe>
 80062de:	bd10      	pop	{r4, pc}

080062e0 <quorem>:
 80062e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e4:	6903      	ldr	r3, [r0, #16]
 80062e6:	690c      	ldr	r4, [r1, #16]
 80062e8:	42a3      	cmp	r3, r4
 80062ea:	4607      	mov	r7, r0
 80062ec:	db7e      	blt.n	80063ec <quorem+0x10c>
 80062ee:	3c01      	subs	r4, #1
 80062f0:	f101 0814 	add.w	r8, r1, #20
 80062f4:	f100 0514 	add.w	r5, r0, #20
 80062f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062fc:	9301      	str	r3, [sp, #4]
 80062fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006302:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006306:	3301      	adds	r3, #1
 8006308:	429a      	cmp	r2, r3
 800630a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800630e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006312:	fbb2 f6f3 	udiv	r6, r2, r3
 8006316:	d331      	bcc.n	800637c <quorem+0x9c>
 8006318:	f04f 0e00 	mov.w	lr, #0
 800631c:	4640      	mov	r0, r8
 800631e:	46ac      	mov	ip, r5
 8006320:	46f2      	mov	sl, lr
 8006322:	f850 2b04 	ldr.w	r2, [r0], #4
 8006326:	b293      	uxth	r3, r2
 8006328:	fb06 e303 	mla	r3, r6, r3, lr
 800632c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006330:	0c1a      	lsrs	r2, r3, #16
 8006332:	b29b      	uxth	r3, r3
 8006334:	ebaa 0303 	sub.w	r3, sl, r3
 8006338:	f8dc a000 	ldr.w	sl, [ip]
 800633c:	fa13 f38a 	uxtah	r3, r3, sl
 8006340:	fb06 220e 	mla	r2, r6, lr, r2
 8006344:	9300      	str	r3, [sp, #0]
 8006346:	9b00      	ldr	r3, [sp, #0]
 8006348:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800634c:	b292      	uxth	r2, r2
 800634e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006352:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006356:	f8bd 3000 	ldrh.w	r3, [sp]
 800635a:	4581      	cmp	r9, r0
 800635c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006360:	f84c 3b04 	str.w	r3, [ip], #4
 8006364:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006368:	d2db      	bcs.n	8006322 <quorem+0x42>
 800636a:	f855 300b 	ldr.w	r3, [r5, fp]
 800636e:	b92b      	cbnz	r3, 800637c <quorem+0x9c>
 8006370:	9b01      	ldr	r3, [sp, #4]
 8006372:	3b04      	subs	r3, #4
 8006374:	429d      	cmp	r5, r3
 8006376:	461a      	mov	r2, r3
 8006378:	d32c      	bcc.n	80063d4 <quorem+0xf4>
 800637a:	613c      	str	r4, [r7, #16]
 800637c:	4638      	mov	r0, r7
 800637e:	f001 f9a5 	bl	80076cc <__mcmp>
 8006382:	2800      	cmp	r0, #0
 8006384:	db22      	blt.n	80063cc <quorem+0xec>
 8006386:	3601      	adds	r6, #1
 8006388:	4629      	mov	r1, r5
 800638a:	2000      	movs	r0, #0
 800638c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006390:	f8d1 c000 	ldr.w	ip, [r1]
 8006394:	b293      	uxth	r3, r2
 8006396:	1ac3      	subs	r3, r0, r3
 8006398:	0c12      	lsrs	r2, r2, #16
 800639a:	fa13 f38c 	uxtah	r3, r3, ip
 800639e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80063a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063ac:	45c1      	cmp	r9, r8
 80063ae:	f841 3b04 	str.w	r3, [r1], #4
 80063b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80063b6:	d2e9      	bcs.n	800638c <quorem+0xac>
 80063b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063c0:	b922      	cbnz	r2, 80063cc <quorem+0xec>
 80063c2:	3b04      	subs	r3, #4
 80063c4:	429d      	cmp	r5, r3
 80063c6:	461a      	mov	r2, r3
 80063c8:	d30a      	bcc.n	80063e0 <quorem+0x100>
 80063ca:	613c      	str	r4, [r7, #16]
 80063cc:	4630      	mov	r0, r6
 80063ce:	b003      	add	sp, #12
 80063d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d4:	6812      	ldr	r2, [r2, #0]
 80063d6:	3b04      	subs	r3, #4
 80063d8:	2a00      	cmp	r2, #0
 80063da:	d1ce      	bne.n	800637a <quorem+0x9a>
 80063dc:	3c01      	subs	r4, #1
 80063de:	e7c9      	b.n	8006374 <quorem+0x94>
 80063e0:	6812      	ldr	r2, [r2, #0]
 80063e2:	3b04      	subs	r3, #4
 80063e4:	2a00      	cmp	r2, #0
 80063e6:	d1f0      	bne.n	80063ca <quorem+0xea>
 80063e8:	3c01      	subs	r4, #1
 80063ea:	e7eb      	b.n	80063c4 <quorem+0xe4>
 80063ec:	2000      	movs	r0, #0
 80063ee:	e7ee      	b.n	80063ce <quorem+0xee>

080063f0 <_dtoa_r>:
 80063f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f4:	ed2d 8b04 	vpush	{d8-d9}
 80063f8:	69c5      	ldr	r5, [r0, #28]
 80063fa:	b093      	sub	sp, #76	; 0x4c
 80063fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006400:	ec57 6b10 	vmov	r6, r7, d0
 8006404:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006408:	9107      	str	r1, [sp, #28]
 800640a:	4604      	mov	r4, r0
 800640c:	920a      	str	r2, [sp, #40]	; 0x28
 800640e:	930d      	str	r3, [sp, #52]	; 0x34
 8006410:	b975      	cbnz	r5, 8006430 <_dtoa_r+0x40>
 8006412:	2010      	movs	r0, #16
 8006414:	f000 fe2a 	bl	800706c <malloc>
 8006418:	4602      	mov	r2, r0
 800641a:	61e0      	str	r0, [r4, #28]
 800641c:	b920      	cbnz	r0, 8006428 <_dtoa_r+0x38>
 800641e:	4bae      	ldr	r3, [pc, #696]	; (80066d8 <_dtoa_r+0x2e8>)
 8006420:	21ef      	movs	r1, #239	; 0xef
 8006422:	48ae      	ldr	r0, [pc, #696]	; (80066dc <_dtoa_r+0x2ec>)
 8006424:	f001 fc82 	bl	8007d2c <__assert_func>
 8006428:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800642c:	6005      	str	r5, [r0, #0]
 800642e:	60c5      	str	r5, [r0, #12]
 8006430:	69e3      	ldr	r3, [r4, #28]
 8006432:	6819      	ldr	r1, [r3, #0]
 8006434:	b151      	cbz	r1, 800644c <_dtoa_r+0x5c>
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	604a      	str	r2, [r1, #4]
 800643a:	2301      	movs	r3, #1
 800643c:	4093      	lsls	r3, r2
 800643e:	608b      	str	r3, [r1, #8]
 8006440:	4620      	mov	r0, r4
 8006442:	f000 ff07 	bl	8007254 <_Bfree>
 8006446:	69e3      	ldr	r3, [r4, #28]
 8006448:	2200      	movs	r2, #0
 800644a:	601a      	str	r2, [r3, #0]
 800644c:	1e3b      	subs	r3, r7, #0
 800644e:	bfbb      	ittet	lt
 8006450:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006454:	9303      	strlt	r3, [sp, #12]
 8006456:	2300      	movge	r3, #0
 8006458:	2201      	movlt	r2, #1
 800645a:	bfac      	ite	ge
 800645c:	f8c8 3000 	strge.w	r3, [r8]
 8006460:	f8c8 2000 	strlt.w	r2, [r8]
 8006464:	4b9e      	ldr	r3, [pc, #632]	; (80066e0 <_dtoa_r+0x2f0>)
 8006466:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800646a:	ea33 0308 	bics.w	r3, r3, r8
 800646e:	d11b      	bne.n	80064a8 <_dtoa_r+0xb8>
 8006470:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006472:	f242 730f 	movw	r3, #9999	; 0x270f
 8006476:	6013      	str	r3, [r2, #0]
 8006478:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800647c:	4333      	orrs	r3, r6
 800647e:	f000 8593 	beq.w	8006fa8 <_dtoa_r+0xbb8>
 8006482:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006484:	b963      	cbnz	r3, 80064a0 <_dtoa_r+0xb0>
 8006486:	4b97      	ldr	r3, [pc, #604]	; (80066e4 <_dtoa_r+0x2f4>)
 8006488:	e027      	b.n	80064da <_dtoa_r+0xea>
 800648a:	4b97      	ldr	r3, [pc, #604]	; (80066e8 <_dtoa_r+0x2f8>)
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	3308      	adds	r3, #8
 8006490:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006492:	6013      	str	r3, [r2, #0]
 8006494:	9800      	ldr	r0, [sp, #0]
 8006496:	b013      	add	sp, #76	; 0x4c
 8006498:	ecbd 8b04 	vpop	{d8-d9}
 800649c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a0:	4b90      	ldr	r3, [pc, #576]	; (80066e4 <_dtoa_r+0x2f4>)
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	3303      	adds	r3, #3
 80064a6:	e7f3      	b.n	8006490 <_dtoa_r+0xa0>
 80064a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80064ac:	2200      	movs	r2, #0
 80064ae:	ec51 0b17 	vmov	r0, r1, d7
 80064b2:	eeb0 8a47 	vmov.f32	s16, s14
 80064b6:	eef0 8a67 	vmov.f32	s17, s15
 80064ba:	2300      	movs	r3, #0
 80064bc:	f7fa fb0c 	bl	8000ad8 <__aeabi_dcmpeq>
 80064c0:	4681      	mov	r9, r0
 80064c2:	b160      	cbz	r0, 80064de <_dtoa_r+0xee>
 80064c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80064c6:	2301      	movs	r3, #1
 80064c8:	6013      	str	r3, [r2, #0]
 80064ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 8568 	beq.w	8006fa2 <_dtoa_r+0xbb2>
 80064d2:	4b86      	ldr	r3, [pc, #536]	; (80066ec <_dtoa_r+0x2fc>)
 80064d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80064d6:	6013      	str	r3, [r2, #0]
 80064d8:	3b01      	subs	r3, #1
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	e7da      	b.n	8006494 <_dtoa_r+0xa4>
 80064de:	aa10      	add	r2, sp, #64	; 0x40
 80064e0:	a911      	add	r1, sp, #68	; 0x44
 80064e2:	4620      	mov	r0, r4
 80064e4:	eeb0 0a48 	vmov.f32	s0, s16
 80064e8:	eef0 0a68 	vmov.f32	s1, s17
 80064ec:	f001 f994 	bl	8007818 <__d2b>
 80064f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80064f4:	4682      	mov	sl, r0
 80064f6:	2d00      	cmp	r5, #0
 80064f8:	d07f      	beq.n	80065fa <_dtoa_r+0x20a>
 80064fa:	ee18 3a90 	vmov	r3, s17
 80064fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006502:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006506:	ec51 0b18 	vmov	r0, r1, d8
 800650a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800650e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006512:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006516:	4619      	mov	r1, r3
 8006518:	2200      	movs	r2, #0
 800651a:	4b75      	ldr	r3, [pc, #468]	; (80066f0 <_dtoa_r+0x300>)
 800651c:	f7f9 febc 	bl	8000298 <__aeabi_dsub>
 8006520:	a367      	add	r3, pc, #412	; (adr r3, 80066c0 <_dtoa_r+0x2d0>)
 8006522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006526:	f7fa f86f 	bl	8000608 <__aeabi_dmul>
 800652a:	a367      	add	r3, pc, #412	; (adr r3, 80066c8 <_dtoa_r+0x2d8>)
 800652c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006530:	f7f9 feb4 	bl	800029c <__adddf3>
 8006534:	4606      	mov	r6, r0
 8006536:	4628      	mov	r0, r5
 8006538:	460f      	mov	r7, r1
 800653a:	f7f9 fffb 	bl	8000534 <__aeabi_i2d>
 800653e:	a364      	add	r3, pc, #400	; (adr r3, 80066d0 <_dtoa_r+0x2e0>)
 8006540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006544:	f7fa f860 	bl	8000608 <__aeabi_dmul>
 8006548:	4602      	mov	r2, r0
 800654a:	460b      	mov	r3, r1
 800654c:	4630      	mov	r0, r6
 800654e:	4639      	mov	r1, r7
 8006550:	f7f9 fea4 	bl	800029c <__adddf3>
 8006554:	4606      	mov	r6, r0
 8006556:	460f      	mov	r7, r1
 8006558:	f7fa fb06 	bl	8000b68 <__aeabi_d2iz>
 800655c:	2200      	movs	r2, #0
 800655e:	4683      	mov	fp, r0
 8006560:	2300      	movs	r3, #0
 8006562:	4630      	mov	r0, r6
 8006564:	4639      	mov	r1, r7
 8006566:	f7fa fac1 	bl	8000aec <__aeabi_dcmplt>
 800656a:	b148      	cbz	r0, 8006580 <_dtoa_r+0x190>
 800656c:	4658      	mov	r0, fp
 800656e:	f7f9 ffe1 	bl	8000534 <__aeabi_i2d>
 8006572:	4632      	mov	r2, r6
 8006574:	463b      	mov	r3, r7
 8006576:	f7fa faaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800657a:	b908      	cbnz	r0, 8006580 <_dtoa_r+0x190>
 800657c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006580:	f1bb 0f16 	cmp.w	fp, #22
 8006584:	d857      	bhi.n	8006636 <_dtoa_r+0x246>
 8006586:	4b5b      	ldr	r3, [pc, #364]	; (80066f4 <_dtoa_r+0x304>)
 8006588:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800658c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006590:	ec51 0b18 	vmov	r0, r1, d8
 8006594:	f7fa faaa 	bl	8000aec <__aeabi_dcmplt>
 8006598:	2800      	cmp	r0, #0
 800659a:	d04e      	beq.n	800663a <_dtoa_r+0x24a>
 800659c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80065a0:	2300      	movs	r3, #0
 80065a2:	930c      	str	r3, [sp, #48]	; 0x30
 80065a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80065a6:	1b5b      	subs	r3, r3, r5
 80065a8:	1e5a      	subs	r2, r3, #1
 80065aa:	bf45      	ittet	mi
 80065ac:	f1c3 0301 	rsbmi	r3, r3, #1
 80065b0:	9305      	strmi	r3, [sp, #20]
 80065b2:	2300      	movpl	r3, #0
 80065b4:	2300      	movmi	r3, #0
 80065b6:	9206      	str	r2, [sp, #24]
 80065b8:	bf54      	ite	pl
 80065ba:	9305      	strpl	r3, [sp, #20]
 80065bc:	9306      	strmi	r3, [sp, #24]
 80065be:	f1bb 0f00 	cmp.w	fp, #0
 80065c2:	db3c      	blt.n	800663e <_dtoa_r+0x24e>
 80065c4:	9b06      	ldr	r3, [sp, #24]
 80065c6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80065ca:	445b      	add	r3, fp
 80065cc:	9306      	str	r3, [sp, #24]
 80065ce:	2300      	movs	r3, #0
 80065d0:	9308      	str	r3, [sp, #32]
 80065d2:	9b07      	ldr	r3, [sp, #28]
 80065d4:	2b09      	cmp	r3, #9
 80065d6:	d868      	bhi.n	80066aa <_dtoa_r+0x2ba>
 80065d8:	2b05      	cmp	r3, #5
 80065da:	bfc4      	itt	gt
 80065dc:	3b04      	subgt	r3, #4
 80065de:	9307      	strgt	r3, [sp, #28]
 80065e0:	9b07      	ldr	r3, [sp, #28]
 80065e2:	f1a3 0302 	sub.w	r3, r3, #2
 80065e6:	bfcc      	ite	gt
 80065e8:	2500      	movgt	r5, #0
 80065ea:	2501      	movle	r5, #1
 80065ec:	2b03      	cmp	r3, #3
 80065ee:	f200 8085 	bhi.w	80066fc <_dtoa_r+0x30c>
 80065f2:	e8df f003 	tbb	[pc, r3]
 80065f6:	3b2e      	.short	0x3b2e
 80065f8:	5839      	.short	0x5839
 80065fa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80065fe:	441d      	add	r5, r3
 8006600:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006604:	2b20      	cmp	r3, #32
 8006606:	bfc1      	itttt	gt
 8006608:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800660c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006610:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006614:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006618:	bfd6      	itet	le
 800661a:	f1c3 0320 	rsble	r3, r3, #32
 800661e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006622:	fa06 f003 	lslle.w	r0, r6, r3
 8006626:	f7f9 ff75 	bl	8000514 <__aeabi_ui2d>
 800662a:	2201      	movs	r2, #1
 800662c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006630:	3d01      	subs	r5, #1
 8006632:	920e      	str	r2, [sp, #56]	; 0x38
 8006634:	e76f      	b.n	8006516 <_dtoa_r+0x126>
 8006636:	2301      	movs	r3, #1
 8006638:	e7b3      	b.n	80065a2 <_dtoa_r+0x1b2>
 800663a:	900c      	str	r0, [sp, #48]	; 0x30
 800663c:	e7b2      	b.n	80065a4 <_dtoa_r+0x1b4>
 800663e:	9b05      	ldr	r3, [sp, #20]
 8006640:	eba3 030b 	sub.w	r3, r3, fp
 8006644:	9305      	str	r3, [sp, #20]
 8006646:	f1cb 0300 	rsb	r3, fp, #0
 800664a:	9308      	str	r3, [sp, #32]
 800664c:	2300      	movs	r3, #0
 800664e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006650:	e7bf      	b.n	80065d2 <_dtoa_r+0x1e2>
 8006652:	2300      	movs	r3, #0
 8006654:	9309      	str	r3, [sp, #36]	; 0x24
 8006656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006658:	2b00      	cmp	r3, #0
 800665a:	dc52      	bgt.n	8006702 <_dtoa_r+0x312>
 800665c:	2301      	movs	r3, #1
 800665e:	9301      	str	r3, [sp, #4]
 8006660:	9304      	str	r3, [sp, #16]
 8006662:	461a      	mov	r2, r3
 8006664:	920a      	str	r2, [sp, #40]	; 0x28
 8006666:	e00b      	b.n	8006680 <_dtoa_r+0x290>
 8006668:	2301      	movs	r3, #1
 800666a:	e7f3      	b.n	8006654 <_dtoa_r+0x264>
 800666c:	2300      	movs	r3, #0
 800666e:	9309      	str	r3, [sp, #36]	; 0x24
 8006670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006672:	445b      	add	r3, fp
 8006674:	9301      	str	r3, [sp, #4]
 8006676:	3301      	adds	r3, #1
 8006678:	2b01      	cmp	r3, #1
 800667a:	9304      	str	r3, [sp, #16]
 800667c:	bfb8      	it	lt
 800667e:	2301      	movlt	r3, #1
 8006680:	69e0      	ldr	r0, [r4, #28]
 8006682:	2100      	movs	r1, #0
 8006684:	2204      	movs	r2, #4
 8006686:	f102 0614 	add.w	r6, r2, #20
 800668a:	429e      	cmp	r6, r3
 800668c:	d93d      	bls.n	800670a <_dtoa_r+0x31a>
 800668e:	6041      	str	r1, [r0, #4]
 8006690:	4620      	mov	r0, r4
 8006692:	f000 fd9f 	bl	80071d4 <_Balloc>
 8006696:	9000      	str	r0, [sp, #0]
 8006698:	2800      	cmp	r0, #0
 800669a:	d139      	bne.n	8006710 <_dtoa_r+0x320>
 800669c:	4b16      	ldr	r3, [pc, #88]	; (80066f8 <_dtoa_r+0x308>)
 800669e:	4602      	mov	r2, r0
 80066a0:	f240 11af 	movw	r1, #431	; 0x1af
 80066a4:	e6bd      	b.n	8006422 <_dtoa_r+0x32>
 80066a6:	2301      	movs	r3, #1
 80066a8:	e7e1      	b.n	800666e <_dtoa_r+0x27e>
 80066aa:	2501      	movs	r5, #1
 80066ac:	2300      	movs	r3, #0
 80066ae:	9307      	str	r3, [sp, #28]
 80066b0:	9509      	str	r5, [sp, #36]	; 0x24
 80066b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066b6:	9301      	str	r3, [sp, #4]
 80066b8:	9304      	str	r3, [sp, #16]
 80066ba:	2200      	movs	r2, #0
 80066bc:	2312      	movs	r3, #18
 80066be:	e7d1      	b.n	8006664 <_dtoa_r+0x274>
 80066c0:	636f4361 	.word	0x636f4361
 80066c4:	3fd287a7 	.word	0x3fd287a7
 80066c8:	8b60c8b3 	.word	0x8b60c8b3
 80066cc:	3fc68a28 	.word	0x3fc68a28
 80066d0:	509f79fb 	.word	0x509f79fb
 80066d4:	3fd34413 	.word	0x3fd34413
 80066d8:	08008f25 	.word	0x08008f25
 80066dc:	08008f3c 	.word	0x08008f3c
 80066e0:	7ff00000 	.word	0x7ff00000
 80066e4:	08008f21 	.word	0x08008f21
 80066e8:	08008f18 	.word	0x08008f18
 80066ec:	08008ef5 	.word	0x08008ef5
 80066f0:	3ff80000 	.word	0x3ff80000
 80066f4:	08009028 	.word	0x08009028
 80066f8:	08008f94 	.word	0x08008f94
 80066fc:	2301      	movs	r3, #1
 80066fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006700:	e7d7      	b.n	80066b2 <_dtoa_r+0x2c2>
 8006702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006704:	9301      	str	r3, [sp, #4]
 8006706:	9304      	str	r3, [sp, #16]
 8006708:	e7ba      	b.n	8006680 <_dtoa_r+0x290>
 800670a:	3101      	adds	r1, #1
 800670c:	0052      	lsls	r2, r2, #1
 800670e:	e7ba      	b.n	8006686 <_dtoa_r+0x296>
 8006710:	69e3      	ldr	r3, [r4, #28]
 8006712:	9a00      	ldr	r2, [sp, #0]
 8006714:	601a      	str	r2, [r3, #0]
 8006716:	9b04      	ldr	r3, [sp, #16]
 8006718:	2b0e      	cmp	r3, #14
 800671a:	f200 80a8 	bhi.w	800686e <_dtoa_r+0x47e>
 800671e:	2d00      	cmp	r5, #0
 8006720:	f000 80a5 	beq.w	800686e <_dtoa_r+0x47e>
 8006724:	f1bb 0f00 	cmp.w	fp, #0
 8006728:	dd38      	ble.n	800679c <_dtoa_r+0x3ac>
 800672a:	4bc0      	ldr	r3, [pc, #768]	; (8006a2c <_dtoa_r+0x63c>)
 800672c:	f00b 020f 	and.w	r2, fp, #15
 8006730:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006734:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006738:	e9d3 6700 	ldrd	r6, r7, [r3]
 800673c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006740:	d019      	beq.n	8006776 <_dtoa_r+0x386>
 8006742:	4bbb      	ldr	r3, [pc, #748]	; (8006a30 <_dtoa_r+0x640>)
 8006744:	ec51 0b18 	vmov	r0, r1, d8
 8006748:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800674c:	f7fa f886 	bl	800085c <__aeabi_ddiv>
 8006750:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006754:	f008 080f 	and.w	r8, r8, #15
 8006758:	2503      	movs	r5, #3
 800675a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006a30 <_dtoa_r+0x640>
 800675e:	f1b8 0f00 	cmp.w	r8, #0
 8006762:	d10a      	bne.n	800677a <_dtoa_r+0x38a>
 8006764:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006768:	4632      	mov	r2, r6
 800676a:	463b      	mov	r3, r7
 800676c:	f7fa f876 	bl	800085c <__aeabi_ddiv>
 8006770:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006774:	e02b      	b.n	80067ce <_dtoa_r+0x3de>
 8006776:	2502      	movs	r5, #2
 8006778:	e7ef      	b.n	800675a <_dtoa_r+0x36a>
 800677a:	f018 0f01 	tst.w	r8, #1
 800677e:	d008      	beq.n	8006792 <_dtoa_r+0x3a2>
 8006780:	4630      	mov	r0, r6
 8006782:	4639      	mov	r1, r7
 8006784:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006788:	f7f9 ff3e 	bl	8000608 <__aeabi_dmul>
 800678c:	3501      	adds	r5, #1
 800678e:	4606      	mov	r6, r0
 8006790:	460f      	mov	r7, r1
 8006792:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006796:	f109 0908 	add.w	r9, r9, #8
 800679a:	e7e0      	b.n	800675e <_dtoa_r+0x36e>
 800679c:	f000 809f 	beq.w	80068de <_dtoa_r+0x4ee>
 80067a0:	f1cb 0600 	rsb	r6, fp, #0
 80067a4:	4ba1      	ldr	r3, [pc, #644]	; (8006a2c <_dtoa_r+0x63c>)
 80067a6:	4fa2      	ldr	r7, [pc, #648]	; (8006a30 <_dtoa_r+0x640>)
 80067a8:	f006 020f 	and.w	r2, r6, #15
 80067ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b4:	ec51 0b18 	vmov	r0, r1, d8
 80067b8:	f7f9 ff26 	bl	8000608 <__aeabi_dmul>
 80067bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067c0:	1136      	asrs	r6, r6, #4
 80067c2:	2300      	movs	r3, #0
 80067c4:	2502      	movs	r5, #2
 80067c6:	2e00      	cmp	r6, #0
 80067c8:	d17e      	bne.n	80068c8 <_dtoa_r+0x4d8>
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1d0      	bne.n	8006770 <_dtoa_r+0x380>
 80067ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067d0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f000 8084 	beq.w	80068e2 <_dtoa_r+0x4f2>
 80067da:	4b96      	ldr	r3, [pc, #600]	; (8006a34 <_dtoa_r+0x644>)
 80067dc:	2200      	movs	r2, #0
 80067de:	4640      	mov	r0, r8
 80067e0:	4649      	mov	r1, r9
 80067e2:	f7fa f983 	bl	8000aec <__aeabi_dcmplt>
 80067e6:	2800      	cmp	r0, #0
 80067e8:	d07b      	beq.n	80068e2 <_dtoa_r+0x4f2>
 80067ea:	9b04      	ldr	r3, [sp, #16]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d078      	beq.n	80068e2 <_dtoa_r+0x4f2>
 80067f0:	9b01      	ldr	r3, [sp, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	dd39      	ble.n	800686a <_dtoa_r+0x47a>
 80067f6:	4b90      	ldr	r3, [pc, #576]	; (8006a38 <_dtoa_r+0x648>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	4640      	mov	r0, r8
 80067fc:	4649      	mov	r1, r9
 80067fe:	f7f9 ff03 	bl	8000608 <__aeabi_dmul>
 8006802:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006806:	9e01      	ldr	r6, [sp, #4]
 8006808:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800680c:	3501      	adds	r5, #1
 800680e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006812:	4628      	mov	r0, r5
 8006814:	f7f9 fe8e 	bl	8000534 <__aeabi_i2d>
 8006818:	4642      	mov	r2, r8
 800681a:	464b      	mov	r3, r9
 800681c:	f7f9 fef4 	bl	8000608 <__aeabi_dmul>
 8006820:	4b86      	ldr	r3, [pc, #536]	; (8006a3c <_dtoa_r+0x64c>)
 8006822:	2200      	movs	r2, #0
 8006824:	f7f9 fd3a 	bl	800029c <__adddf3>
 8006828:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800682c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006830:	9303      	str	r3, [sp, #12]
 8006832:	2e00      	cmp	r6, #0
 8006834:	d158      	bne.n	80068e8 <_dtoa_r+0x4f8>
 8006836:	4b82      	ldr	r3, [pc, #520]	; (8006a40 <_dtoa_r+0x650>)
 8006838:	2200      	movs	r2, #0
 800683a:	4640      	mov	r0, r8
 800683c:	4649      	mov	r1, r9
 800683e:	f7f9 fd2b 	bl	8000298 <__aeabi_dsub>
 8006842:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006846:	4680      	mov	r8, r0
 8006848:	4689      	mov	r9, r1
 800684a:	f7fa f96d 	bl	8000b28 <__aeabi_dcmpgt>
 800684e:	2800      	cmp	r0, #0
 8006850:	f040 8296 	bne.w	8006d80 <_dtoa_r+0x990>
 8006854:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006858:	4640      	mov	r0, r8
 800685a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800685e:	4649      	mov	r1, r9
 8006860:	f7fa f944 	bl	8000aec <__aeabi_dcmplt>
 8006864:	2800      	cmp	r0, #0
 8006866:	f040 8289 	bne.w	8006d7c <_dtoa_r+0x98c>
 800686a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800686e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006870:	2b00      	cmp	r3, #0
 8006872:	f2c0 814e 	blt.w	8006b12 <_dtoa_r+0x722>
 8006876:	f1bb 0f0e 	cmp.w	fp, #14
 800687a:	f300 814a 	bgt.w	8006b12 <_dtoa_r+0x722>
 800687e:	4b6b      	ldr	r3, [pc, #428]	; (8006a2c <_dtoa_r+0x63c>)
 8006880:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006884:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800688a:	2b00      	cmp	r3, #0
 800688c:	f280 80dc 	bge.w	8006a48 <_dtoa_r+0x658>
 8006890:	9b04      	ldr	r3, [sp, #16]
 8006892:	2b00      	cmp	r3, #0
 8006894:	f300 80d8 	bgt.w	8006a48 <_dtoa_r+0x658>
 8006898:	f040 826f 	bne.w	8006d7a <_dtoa_r+0x98a>
 800689c:	4b68      	ldr	r3, [pc, #416]	; (8006a40 <_dtoa_r+0x650>)
 800689e:	2200      	movs	r2, #0
 80068a0:	4640      	mov	r0, r8
 80068a2:	4649      	mov	r1, r9
 80068a4:	f7f9 feb0 	bl	8000608 <__aeabi_dmul>
 80068a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068ac:	f7fa f932 	bl	8000b14 <__aeabi_dcmpge>
 80068b0:	9e04      	ldr	r6, [sp, #16]
 80068b2:	4637      	mov	r7, r6
 80068b4:	2800      	cmp	r0, #0
 80068b6:	f040 8245 	bne.w	8006d44 <_dtoa_r+0x954>
 80068ba:	9d00      	ldr	r5, [sp, #0]
 80068bc:	2331      	movs	r3, #49	; 0x31
 80068be:	f805 3b01 	strb.w	r3, [r5], #1
 80068c2:	f10b 0b01 	add.w	fp, fp, #1
 80068c6:	e241      	b.n	8006d4c <_dtoa_r+0x95c>
 80068c8:	07f2      	lsls	r2, r6, #31
 80068ca:	d505      	bpl.n	80068d8 <_dtoa_r+0x4e8>
 80068cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068d0:	f7f9 fe9a 	bl	8000608 <__aeabi_dmul>
 80068d4:	3501      	adds	r5, #1
 80068d6:	2301      	movs	r3, #1
 80068d8:	1076      	asrs	r6, r6, #1
 80068da:	3708      	adds	r7, #8
 80068dc:	e773      	b.n	80067c6 <_dtoa_r+0x3d6>
 80068de:	2502      	movs	r5, #2
 80068e0:	e775      	b.n	80067ce <_dtoa_r+0x3de>
 80068e2:	9e04      	ldr	r6, [sp, #16]
 80068e4:	465f      	mov	r7, fp
 80068e6:	e792      	b.n	800680e <_dtoa_r+0x41e>
 80068e8:	9900      	ldr	r1, [sp, #0]
 80068ea:	4b50      	ldr	r3, [pc, #320]	; (8006a2c <_dtoa_r+0x63c>)
 80068ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80068f0:	4431      	add	r1, r6
 80068f2:	9102      	str	r1, [sp, #8]
 80068f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068f6:	eeb0 9a47 	vmov.f32	s18, s14
 80068fa:	eef0 9a67 	vmov.f32	s19, s15
 80068fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006902:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006906:	2900      	cmp	r1, #0
 8006908:	d044      	beq.n	8006994 <_dtoa_r+0x5a4>
 800690a:	494e      	ldr	r1, [pc, #312]	; (8006a44 <_dtoa_r+0x654>)
 800690c:	2000      	movs	r0, #0
 800690e:	f7f9 ffa5 	bl	800085c <__aeabi_ddiv>
 8006912:	ec53 2b19 	vmov	r2, r3, d9
 8006916:	f7f9 fcbf 	bl	8000298 <__aeabi_dsub>
 800691a:	9d00      	ldr	r5, [sp, #0]
 800691c:	ec41 0b19 	vmov	d9, r0, r1
 8006920:	4649      	mov	r1, r9
 8006922:	4640      	mov	r0, r8
 8006924:	f7fa f920 	bl	8000b68 <__aeabi_d2iz>
 8006928:	4606      	mov	r6, r0
 800692a:	f7f9 fe03 	bl	8000534 <__aeabi_i2d>
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	4640      	mov	r0, r8
 8006934:	4649      	mov	r1, r9
 8006936:	f7f9 fcaf 	bl	8000298 <__aeabi_dsub>
 800693a:	3630      	adds	r6, #48	; 0x30
 800693c:	f805 6b01 	strb.w	r6, [r5], #1
 8006940:	ec53 2b19 	vmov	r2, r3, d9
 8006944:	4680      	mov	r8, r0
 8006946:	4689      	mov	r9, r1
 8006948:	f7fa f8d0 	bl	8000aec <__aeabi_dcmplt>
 800694c:	2800      	cmp	r0, #0
 800694e:	d164      	bne.n	8006a1a <_dtoa_r+0x62a>
 8006950:	4642      	mov	r2, r8
 8006952:	464b      	mov	r3, r9
 8006954:	4937      	ldr	r1, [pc, #220]	; (8006a34 <_dtoa_r+0x644>)
 8006956:	2000      	movs	r0, #0
 8006958:	f7f9 fc9e 	bl	8000298 <__aeabi_dsub>
 800695c:	ec53 2b19 	vmov	r2, r3, d9
 8006960:	f7fa f8c4 	bl	8000aec <__aeabi_dcmplt>
 8006964:	2800      	cmp	r0, #0
 8006966:	f040 80b6 	bne.w	8006ad6 <_dtoa_r+0x6e6>
 800696a:	9b02      	ldr	r3, [sp, #8]
 800696c:	429d      	cmp	r5, r3
 800696e:	f43f af7c 	beq.w	800686a <_dtoa_r+0x47a>
 8006972:	4b31      	ldr	r3, [pc, #196]	; (8006a38 <_dtoa_r+0x648>)
 8006974:	ec51 0b19 	vmov	r0, r1, d9
 8006978:	2200      	movs	r2, #0
 800697a:	f7f9 fe45 	bl	8000608 <__aeabi_dmul>
 800697e:	4b2e      	ldr	r3, [pc, #184]	; (8006a38 <_dtoa_r+0x648>)
 8006980:	ec41 0b19 	vmov	d9, r0, r1
 8006984:	2200      	movs	r2, #0
 8006986:	4640      	mov	r0, r8
 8006988:	4649      	mov	r1, r9
 800698a:	f7f9 fe3d 	bl	8000608 <__aeabi_dmul>
 800698e:	4680      	mov	r8, r0
 8006990:	4689      	mov	r9, r1
 8006992:	e7c5      	b.n	8006920 <_dtoa_r+0x530>
 8006994:	ec51 0b17 	vmov	r0, r1, d7
 8006998:	f7f9 fe36 	bl	8000608 <__aeabi_dmul>
 800699c:	9b02      	ldr	r3, [sp, #8]
 800699e:	9d00      	ldr	r5, [sp, #0]
 80069a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80069a2:	ec41 0b19 	vmov	d9, r0, r1
 80069a6:	4649      	mov	r1, r9
 80069a8:	4640      	mov	r0, r8
 80069aa:	f7fa f8dd 	bl	8000b68 <__aeabi_d2iz>
 80069ae:	4606      	mov	r6, r0
 80069b0:	f7f9 fdc0 	bl	8000534 <__aeabi_i2d>
 80069b4:	3630      	adds	r6, #48	; 0x30
 80069b6:	4602      	mov	r2, r0
 80069b8:	460b      	mov	r3, r1
 80069ba:	4640      	mov	r0, r8
 80069bc:	4649      	mov	r1, r9
 80069be:	f7f9 fc6b 	bl	8000298 <__aeabi_dsub>
 80069c2:	f805 6b01 	strb.w	r6, [r5], #1
 80069c6:	9b02      	ldr	r3, [sp, #8]
 80069c8:	429d      	cmp	r5, r3
 80069ca:	4680      	mov	r8, r0
 80069cc:	4689      	mov	r9, r1
 80069ce:	f04f 0200 	mov.w	r2, #0
 80069d2:	d124      	bne.n	8006a1e <_dtoa_r+0x62e>
 80069d4:	4b1b      	ldr	r3, [pc, #108]	; (8006a44 <_dtoa_r+0x654>)
 80069d6:	ec51 0b19 	vmov	r0, r1, d9
 80069da:	f7f9 fc5f 	bl	800029c <__adddf3>
 80069de:	4602      	mov	r2, r0
 80069e0:	460b      	mov	r3, r1
 80069e2:	4640      	mov	r0, r8
 80069e4:	4649      	mov	r1, r9
 80069e6:	f7fa f89f 	bl	8000b28 <__aeabi_dcmpgt>
 80069ea:	2800      	cmp	r0, #0
 80069ec:	d173      	bne.n	8006ad6 <_dtoa_r+0x6e6>
 80069ee:	ec53 2b19 	vmov	r2, r3, d9
 80069f2:	4914      	ldr	r1, [pc, #80]	; (8006a44 <_dtoa_r+0x654>)
 80069f4:	2000      	movs	r0, #0
 80069f6:	f7f9 fc4f 	bl	8000298 <__aeabi_dsub>
 80069fa:	4602      	mov	r2, r0
 80069fc:	460b      	mov	r3, r1
 80069fe:	4640      	mov	r0, r8
 8006a00:	4649      	mov	r1, r9
 8006a02:	f7fa f873 	bl	8000aec <__aeabi_dcmplt>
 8006a06:	2800      	cmp	r0, #0
 8006a08:	f43f af2f 	beq.w	800686a <_dtoa_r+0x47a>
 8006a0c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006a0e:	1e6b      	subs	r3, r5, #1
 8006a10:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a16:	2b30      	cmp	r3, #48	; 0x30
 8006a18:	d0f8      	beq.n	8006a0c <_dtoa_r+0x61c>
 8006a1a:	46bb      	mov	fp, r7
 8006a1c:	e04a      	b.n	8006ab4 <_dtoa_r+0x6c4>
 8006a1e:	4b06      	ldr	r3, [pc, #24]	; (8006a38 <_dtoa_r+0x648>)
 8006a20:	f7f9 fdf2 	bl	8000608 <__aeabi_dmul>
 8006a24:	4680      	mov	r8, r0
 8006a26:	4689      	mov	r9, r1
 8006a28:	e7bd      	b.n	80069a6 <_dtoa_r+0x5b6>
 8006a2a:	bf00      	nop
 8006a2c:	08009028 	.word	0x08009028
 8006a30:	08009000 	.word	0x08009000
 8006a34:	3ff00000 	.word	0x3ff00000
 8006a38:	40240000 	.word	0x40240000
 8006a3c:	401c0000 	.word	0x401c0000
 8006a40:	40140000 	.word	0x40140000
 8006a44:	3fe00000 	.word	0x3fe00000
 8006a48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006a4c:	9d00      	ldr	r5, [sp, #0]
 8006a4e:	4642      	mov	r2, r8
 8006a50:	464b      	mov	r3, r9
 8006a52:	4630      	mov	r0, r6
 8006a54:	4639      	mov	r1, r7
 8006a56:	f7f9 ff01 	bl	800085c <__aeabi_ddiv>
 8006a5a:	f7fa f885 	bl	8000b68 <__aeabi_d2iz>
 8006a5e:	9001      	str	r0, [sp, #4]
 8006a60:	f7f9 fd68 	bl	8000534 <__aeabi_i2d>
 8006a64:	4642      	mov	r2, r8
 8006a66:	464b      	mov	r3, r9
 8006a68:	f7f9 fdce 	bl	8000608 <__aeabi_dmul>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	460b      	mov	r3, r1
 8006a70:	4630      	mov	r0, r6
 8006a72:	4639      	mov	r1, r7
 8006a74:	f7f9 fc10 	bl	8000298 <__aeabi_dsub>
 8006a78:	9e01      	ldr	r6, [sp, #4]
 8006a7a:	9f04      	ldr	r7, [sp, #16]
 8006a7c:	3630      	adds	r6, #48	; 0x30
 8006a7e:	f805 6b01 	strb.w	r6, [r5], #1
 8006a82:	9e00      	ldr	r6, [sp, #0]
 8006a84:	1bae      	subs	r6, r5, r6
 8006a86:	42b7      	cmp	r7, r6
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	d134      	bne.n	8006af8 <_dtoa_r+0x708>
 8006a8e:	f7f9 fc05 	bl	800029c <__adddf3>
 8006a92:	4642      	mov	r2, r8
 8006a94:	464b      	mov	r3, r9
 8006a96:	4606      	mov	r6, r0
 8006a98:	460f      	mov	r7, r1
 8006a9a:	f7fa f845 	bl	8000b28 <__aeabi_dcmpgt>
 8006a9e:	b9c8      	cbnz	r0, 8006ad4 <_dtoa_r+0x6e4>
 8006aa0:	4642      	mov	r2, r8
 8006aa2:	464b      	mov	r3, r9
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	4639      	mov	r1, r7
 8006aa8:	f7fa f816 	bl	8000ad8 <__aeabi_dcmpeq>
 8006aac:	b110      	cbz	r0, 8006ab4 <_dtoa_r+0x6c4>
 8006aae:	9b01      	ldr	r3, [sp, #4]
 8006ab0:	07db      	lsls	r3, r3, #31
 8006ab2:	d40f      	bmi.n	8006ad4 <_dtoa_r+0x6e4>
 8006ab4:	4651      	mov	r1, sl
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f000 fbcc 	bl	8007254 <_Bfree>
 8006abc:	2300      	movs	r3, #0
 8006abe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ac0:	702b      	strb	r3, [r5, #0]
 8006ac2:	f10b 0301 	add.w	r3, fp, #1
 8006ac6:	6013      	str	r3, [r2, #0]
 8006ac8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f43f ace2 	beq.w	8006494 <_dtoa_r+0xa4>
 8006ad0:	601d      	str	r5, [r3, #0]
 8006ad2:	e4df      	b.n	8006494 <_dtoa_r+0xa4>
 8006ad4:	465f      	mov	r7, fp
 8006ad6:	462b      	mov	r3, r5
 8006ad8:	461d      	mov	r5, r3
 8006ada:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ade:	2a39      	cmp	r2, #57	; 0x39
 8006ae0:	d106      	bne.n	8006af0 <_dtoa_r+0x700>
 8006ae2:	9a00      	ldr	r2, [sp, #0]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d1f7      	bne.n	8006ad8 <_dtoa_r+0x6e8>
 8006ae8:	9900      	ldr	r1, [sp, #0]
 8006aea:	2230      	movs	r2, #48	; 0x30
 8006aec:	3701      	adds	r7, #1
 8006aee:	700a      	strb	r2, [r1, #0]
 8006af0:	781a      	ldrb	r2, [r3, #0]
 8006af2:	3201      	adds	r2, #1
 8006af4:	701a      	strb	r2, [r3, #0]
 8006af6:	e790      	b.n	8006a1a <_dtoa_r+0x62a>
 8006af8:	4ba3      	ldr	r3, [pc, #652]	; (8006d88 <_dtoa_r+0x998>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	f7f9 fd84 	bl	8000608 <__aeabi_dmul>
 8006b00:	2200      	movs	r2, #0
 8006b02:	2300      	movs	r3, #0
 8006b04:	4606      	mov	r6, r0
 8006b06:	460f      	mov	r7, r1
 8006b08:	f7f9 ffe6 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	d09e      	beq.n	8006a4e <_dtoa_r+0x65e>
 8006b10:	e7d0      	b.n	8006ab4 <_dtoa_r+0x6c4>
 8006b12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b14:	2a00      	cmp	r2, #0
 8006b16:	f000 80ca 	beq.w	8006cae <_dtoa_r+0x8be>
 8006b1a:	9a07      	ldr	r2, [sp, #28]
 8006b1c:	2a01      	cmp	r2, #1
 8006b1e:	f300 80ad 	bgt.w	8006c7c <_dtoa_r+0x88c>
 8006b22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b24:	2a00      	cmp	r2, #0
 8006b26:	f000 80a5 	beq.w	8006c74 <_dtoa_r+0x884>
 8006b2a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b2e:	9e08      	ldr	r6, [sp, #32]
 8006b30:	9d05      	ldr	r5, [sp, #20]
 8006b32:	9a05      	ldr	r2, [sp, #20]
 8006b34:	441a      	add	r2, r3
 8006b36:	9205      	str	r2, [sp, #20]
 8006b38:	9a06      	ldr	r2, [sp, #24]
 8006b3a:	2101      	movs	r1, #1
 8006b3c:	441a      	add	r2, r3
 8006b3e:	4620      	mov	r0, r4
 8006b40:	9206      	str	r2, [sp, #24]
 8006b42:	f000 fc3d 	bl	80073c0 <__i2b>
 8006b46:	4607      	mov	r7, r0
 8006b48:	b165      	cbz	r5, 8006b64 <_dtoa_r+0x774>
 8006b4a:	9b06      	ldr	r3, [sp, #24]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	dd09      	ble.n	8006b64 <_dtoa_r+0x774>
 8006b50:	42ab      	cmp	r3, r5
 8006b52:	9a05      	ldr	r2, [sp, #20]
 8006b54:	bfa8      	it	ge
 8006b56:	462b      	movge	r3, r5
 8006b58:	1ad2      	subs	r2, r2, r3
 8006b5a:	9205      	str	r2, [sp, #20]
 8006b5c:	9a06      	ldr	r2, [sp, #24]
 8006b5e:	1aed      	subs	r5, r5, r3
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	9306      	str	r3, [sp, #24]
 8006b64:	9b08      	ldr	r3, [sp, #32]
 8006b66:	b1f3      	cbz	r3, 8006ba6 <_dtoa_r+0x7b6>
 8006b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f000 80a3 	beq.w	8006cb6 <_dtoa_r+0x8c6>
 8006b70:	2e00      	cmp	r6, #0
 8006b72:	dd10      	ble.n	8006b96 <_dtoa_r+0x7a6>
 8006b74:	4639      	mov	r1, r7
 8006b76:	4632      	mov	r2, r6
 8006b78:	4620      	mov	r0, r4
 8006b7a:	f000 fce1 	bl	8007540 <__pow5mult>
 8006b7e:	4652      	mov	r2, sl
 8006b80:	4601      	mov	r1, r0
 8006b82:	4607      	mov	r7, r0
 8006b84:	4620      	mov	r0, r4
 8006b86:	f000 fc31 	bl	80073ec <__multiply>
 8006b8a:	4651      	mov	r1, sl
 8006b8c:	4680      	mov	r8, r0
 8006b8e:	4620      	mov	r0, r4
 8006b90:	f000 fb60 	bl	8007254 <_Bfree>
 8006b94:	46c2      	mov	sl, r8
 8006b96:	9b08      	ldr	r3, [sp, #32]
 8006b98:	1b9a      	subs	r2, r3, r6
 8006b9a:	d004      	beq.n	8006ba6 <_dtoa_r+0x7b6>
 8006b9c:	4651      	mov	r1, sl
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	f000 fcce 	bl	8007540 <__pow5mult>
 8006ba4:	4682      	mov	sl, r0
 8006ba6:	2101      	movs	r1, #1
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f000 fc09 	bl	80073c0 <__i2b>
 8006bae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	4606      	mov	r6, r0
 8006bb4:	f340 8081 	ble.w	8006cba <_dtoa_r+0x8ca>
 8006bb8:	461a      	mov	r2, r3
 8006bba:	4601      	mov	r1, r0
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f000 fcbf 	bl	8007540 <__pow5mult>
 8006bc2:	9b07      	ldr	r3, [sp, #28]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	4606      	mov	r6, r0
 8006bc8:	dd7a      	ble.n	8006cc0 <_dtoa_r+0x8d0>
 8006bca:	f04f 0800 	mov.w	r8, #0
 8006bce:	6933      	ldr	r3, [r6, #16]
 8006bd0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006bd4:	6918      	ldr	r0, [r3, #16]
 8006bd6:	f000 fba5 	bl	8007324 <__hi0bits>
 8006bda:	f1c0 0020 	rsb	r0, r0, #32
 8006bde:	9b06      	ldr	r3, [sp, #24]
 8006be0:	4418      	add	r0, r3
 8006be2:	f010 001f 	ands.w	r0, r0, #31
 8006be6:	f000 8094 	beq.w	8006d12 <_dtoa_r+0x922>
 8006bea:	f1c0 0320 	rsb	r3, r0, #32
 8006bee:	2b04      	cmp	r3, #4
 8006bf0:	f340 8085 	ble.w	8006cfe <_dtoa_r+0x90e>
 8006bf4:	9b05      	ldr	r3, [sp, #20]
 8006bf6:	f1c0 001c 	rsb	r0, r0, #28
 8006bfa:	4403      	add	r3, r0
 8006bfc:	9305      	str	r3, [sp, #20]
 8006bfe:	9b06      	ldr	r3, [sp, #24]
 8006c00:	4403      	add	r3, r0
 8006c02:	4405      	add	r5, r0
 8006c04:	9306      	str	r3, [sp, #24]
 8006c06:	9b05      	ldr	r3, [sp, #20]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	dd05      	ble.n	8006c18 <_dtoa_r+0x828>
 8006c0c:	4651      	mov	r1, sl
 8006c0e:	461a      	mov	r2, r3
 8006c10:	4620      	mov	r0, r4
 8006c12:	f000 fcef 	bl	80075f4 <__lshift>
 8006c16:	4682      	mov	sl, r0
 8006c18:	9b06      	ldr	r3, [sp, #24]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	dd05      	ble.n	8006c2a <_dtoa_r+0x83a>
 8006c1e:	4631      	mov	r1, r6
 8006c20:	461a      	mov	r2, r3
 8006c22:	4620      	mov	r0, r4
 8006c24:	f000 fce6 	bl	80075f4 <__lshift>
 8006c28:	4606      	mov	r6, r0
 8006c2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d072      	beq.n	8006d16 <_dtoa_r+0x926>
 8006c30:	4631      	mov	r1, r6
 8006c32:	4650      	mov	r0, sl
 8006c34:	f000 fd4a 	bl	80076cc <__mcmp>
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	da6c      	bge.n	8006d16 <_dtoa_r+0x926>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	4651      	mov	r1, sl
 8006c40:	220a      	movs	r2, #10
 8006c42:	4620      	mov	r0, r4
 8006c44:	f000 fb28 	bl	8007298 <__multadd>
 8006c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c4a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006c4e:	4682      	mov	sl, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 81b0 	beq.w	8006fb6 <_dtoa_r+0xbc6>
 8006c56:	2300      	movs	r3, #0
 8006c58:	4639      	mov	r1, r7
 8006c5a:	220a      	movs	r2, #10
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	f000 fb1b 	bl	8007298 <__multadd>
 8006c62:	9b01      	ldr	r3, [sp, #4]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	4607      	mov	r7, r0
 8006c68:	f300 8096 	bgt.w	8006d98 <_dtoa_r+0x9a8>
 8006c6c:	9b07      	ldr	r3, [sp, #28]
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	dc59      	bgt.n	8006d26 <_dtoa_r+0x936>
 8006c72:	e091      	b.n	8006d98 <_dtoa_r+0x9a8>
 8006c74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c7a:	e758      	b.n	8006b2e <_dtoa_r+0x73e>
 8006c7c:	9b04      	ldr	r3, [sp, #16]
 8006c7e:	1e5e      	subs	r6, r3, #1
 8006c80:	9b08      	ldr	r3, [sp, #32]
 8006c82:	42b3      	cmp	r3, r6
 8006c84:	bfbf      	itttt	lt
 8006c86:	9b08      	ldrlt	r3, [sp, #32]
 8006c88:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006c8a:	9608      	strlt	r6, [sp, #32]
 8006c8c:	1af3      	sublt	r3, r6, r3
 8006c8e:	bfb4      	ite	lt
 8006c90:	18d2      	addlt	r2, r2, r3
 8006c92:	1b9e      	subge	r6, r3, r6
 8006c94:	9b04      	ldr	r3, [sp, #16]
 8006c96:	bfbc      	itt	lt
 8006c98:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006c9a:	2600      	movlt	r6, #0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	bfb7      	itett	lt
 8006ca0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006ca4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006ca8:	1a9d      	sublt	r5, r3, r2
 8006caa:	2300      	movlt	r3, #0
 8006cac:	e741      	b.n	8006b32 <_dtoa_r+0x742>
 8006cae:	9e08      	ldr	r6, [sp, #32]
 8006cb0:	9d05      	ldr	r5, [sp, #20]
 8006cb2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006cb4:	e748      	b.n	8006b48 <_dtoa_r+0x758>
 8006cb6:	9a08      	ldr	r2, [sp, #32]
 8006cb8:	e770      	b.n	8006b9c <_dtoa_r+0x7ac>
 8006cba:	9b07      	ldr	r3, [sp, #28]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	dc19      	bgt.n	8006cf4 <_dtoa_r+0x904>
 8006cc0:	9b02      	ldr	r3, [sp, #8]
 8006cc2:	b9bb      	cbnz	r3, 8006cf4 <_dtoa_r+0x904>
 8006cc4:	9b03      	ldr	r3, [sp, #12]
 8006cc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cca:	b99b      	cbnz	r3, 8006cf4 <_dtoa_r+0x904>
 8006ccc:	9b03      	ldr	r3, [sp, #12]
 8006cce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cd2:	0d1b      	lsrs	r3, r3, #20
 8006cd4:	051b      	lsls	r3, r3, #20
 8006cd6:	b183      	cbz	r3, 8006cfa <_dtoa_r+0x90a>
 8006cd8:	9b05      	ldr	r3, [sp, #20]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	9305      	str	r3, [sp, #20]
 8006cde:	9b06      	ldr	r3, [sp, #24]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	9306      	str	r3, [sp, #24]
 8006ce4:	f04f 0801 	mov.w	r8, #1
 8006ce8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f47f af6f 	bne.w	8006bce <_dtoa_r+0x7de>
 8006cf0:	2001      	movs	r0, #1
 8006cf2:	e774      	b.n	8006bde <_dtoa_r+0x7ee>
 8006cf4:	f04f 0800 	mov.w	r8, #0
 8006cf8:	e7f6      	b.n	8006ce8 <_dtoa_r+0x8f8>
 8006cfa:	4698      	mov	r8, r3
 8006cfc:	e7f4      	b.n	8006ce8 <_dtoa_r+0x8f8>
 8006cfe:	d082      	beq.n	8006c06 <_dtoa_r+0x816>
 8006d00:	9a05      	ldr	r2, [sp, #20]
 8006d02:	331c      	adds	r3, #28
 8006d04:	441a      	add	r2, r3
 8006d06:	9205      	str	r2, [sp, #20]
 8006d08:	9a06      	ldr	r2, [sp, #24]
 8006d0a:	441a      	add	r2, r3
 8006d0c:	441d      	add	r5, r3
 8006d0e:	9206      	str	r2, [sp, #24]
 8006d10:	e779      	b.n	8006c06 <_dtoa_r+0x816>
 8006d12:	4603      	mov	r3, r0
 8006d14:	e7f4      	b.n	8006d00 <_dtoa_r+0x910>
 8006d16:	9b04      	ldr	r3, [sp, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	dc37      	bgt.n	8006d8c <_dtoa_r+0x99c>
 8006d1c:	9b07      	ldr	r3, [sp, #28]
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	dd34      	ble.n	8006d8c <_dtoa_r+0x99c>
 8006d22:	9b04      	ldr	r3, [sp, #16]
 8006d24:	9301      	str	r3, [sp, #4]
 8006d26:	9b01      	ldr	r3, [sp, #4]
 8006d28:	b963      	cbnz	r3, 8006d44 <_dtoa_r+0x954>
 8006d2a:	4631      	mov	r1, r6
 8006d2c:	2205      	movs	r2, #5
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f000 fab2 	bl	8007298 <__multadd>
 8006d34:	4601      	mov	r1, r0
 8006d36:	4606      	mov	r6, r0
 8006d38:	4650      	mov	r0, sl
 8006d3a:	f000 fcc7 	bl	80076cc <__mcmp>
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	f73f adbb 	bgt.w	80068ba <_dtoa_r+0x4ca>
 8006d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d46:	9d00      	ldr	r5, [sp, #0]
 8006d48:	ea6f 0b03 	mvn.w	fp, r3
 8006d4c:	f04f 0800 	mov.w	r8, #0
 8006d50:	4631      	mov	r1, r6
 8006d52:	4620      	mov	r0, r4
 8006d54:	f000 fa7e 	bl	8007254 <_Bfree>
 8006d58:	2f00      	cmp	r7, #0
 8006d5a:	f43f aeab 	beq.w	8006ab4 <_dtoa_r+0x6c4>
 8006d5e:	f1b8 0f00 	cmp.w	r8, #0
 8006d62:	d005      	beq.n	8006d70 <_dtoa_r+0x980>
 8006d64:	45b8      	cmp	r8, r7
 8006d66:	d003      	beq.n	8006d70 <_dtoa_r+0x980>
 8006d68:	4641      	mov	r1, r8
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f000 fa72 	bl	8007254 <_Bfree>
 8006d70:	4639      	mov	r1, r7
 8006d72:	4620      	mov	r0, r4
 8006d74:	f000 fa6e 	bl	8007254 <_Bfree>
 8006d78:	e69c      	b.n	8006ab4 <_dtoa_r+0x6c4>
 8006d7a:	2600      	movs	r6, #0
 8006d7c:	4637      	mov	r7, r6
 8006d7e:	e7e1      	b.n	8006d44 <_dtoa_r+0x954>
 8006d80:	46bb      	mov	fp, r7
 8006d82:	4637      	mov	r7, r6
 8006d84:	e599      	b.n	80068ba <_dtoa_r+0x4ca>
 8006d86:	bf00      	nop
 8006d88:	40240000 	.word	0x40240000
 8006d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f000 80c8 	beq.w	8006f24 <_dtoa_r+0xb34>
 8006d94:	9b04      	ldr	r3, [sp, #16]
 8006d96:	9301      	str	r3, [sp, #4]
 8006d98:	2d00      	cmp	r5, #0
 8006d9a:	dd05      	ble.n	8006da8 <_dtoa_r+0x9b8>
 8006d9c:	4639      	mov	r1, r7
 8006d9e:	462a      	mov	r2, r5
 8006da0:	4620      	mov	r0, r4
 8006da2:	f000 fc27 	bl	80075f4 <__lshift>
 8006da6:	4607      	mov	r7, r0
 8006da8:	f1b8 0f00 	cmp.w	r8, #0
 8006dac:	d05b      	beq.n	8006e66 <_dtoa_r+0xa76>
 8006dae:	6879      	ldr	r1, [r7, #4]
 8006db0:	4620      	mov	r0, r4
 8006db2:	f000 fa0f 	bl	80071d4 <_Balloc>
 8006db6:	4605      	mov	r5, r0
 8006db8:	b928      	cbnz	r0, 8006dc6 <_dtoa_r+0x9d6>
 8006dba:	4b83      	ldr	r3, [pc, #524]	; (8006fc8 <_dtoa_r+0xbd8>)
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006dc2:	f7ff bb2e 	b.w	8006422 <_dtoa_r+0x32>
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	3202      	adds	r2, #2
 8006dca:	0092      	lsls	r2, r2, #2
 8006dcc:	f107 010c 	add.w	r1, r7, #12
 8006dd0:	300c      	adds	r0, #12
 8006dd2:	f7ff fa77 	bl	80062c4 <memcpy>
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	4629      	mov	r1, r5
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f000 fc0a 	bl	80075f4 <__lshift>
 8006de0:	9b00      	ldr	r3, [sp, #0]
 8006de2:	3301      	adds	r3, #1
 8006de4:	9304      	str	r3, [sp, #16]
 8006de6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dea:	4413      	add	r3, r2
 8006dec:	9308      	str	r3, [sp, #32]
 8006dee:	9b02      	ldr	r3, [sp, #8]
 8006df0:	f003 0301 	and.w	r3, r3, #1
 8006df4:	46b8      	mov	r8, r7
 8006df6:	9306      	str	r3, [sp, #24]
 8006df8:	4607      	mov	r7, r0
 8006dfa:	9b04      	ldr	r3, [sp, #16]
 8006dfc:	4631      	mov	r1, r6
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	4650      	mov	r0, sl
 8006e02:	9301      	str	r3, [sp, #4]
 8006e04:	f7ff fa6c 	bl	80062e0 <quorem>
 8006e08:	4641      	mov	r1, r8
 8006e0a:	9002      	str	r0, [sp, #8]
 8006e0c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006e10:	4650      	mov	r0, sl
 8006e12:	f000 fc5b 	bl	80076cc <__mcmp>
 8006e16:	463a      	mov	r2, r7
 8006e18:	9005      	str	r0, [sp, #20]
 8006e1a:	4631      	mov	r1, r6
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f000 fc71 	bl	8007704 <__mdiff>
 8006e22:	68c2      	ldr	r2, [r0, #12]
 8006e24:	4605      	mov	r5, r0
 8006e26:	bb02      	cbnz	r2, 8006e6a <_dtoa_r+0xa7a>
 8006e28:	4601      	mov	r1, r0
 8006e2a:	4650      	mov	r0, sl
 8006e2c:	f000 fc4e 	bl	80076cc <__mcmp>
 8006e30:	4602      	mov	r2, r0
 8006e32:	4629      	mov	r1, r5
 8006e34:	4620      	mov	r0, r4
 8006e36:	9209      	str	r2, [sp, #36]	; 0x24
 8006e38:	f000 fa0c 	bl	8007254 <_Bfree>
 8006e3c:	9b07      	ldr	r3, [sp, #28]
 8006e3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e40:	9d04      	ldr	r5, [sp, #16]
 8006e42:	ea43 0102 	orr.w	r1, r3, r2
 8006e46:	9b06      	ldr	r3, [sp, #24]
 8006e48:	4319      	orrs	r1, r3
 8006e4a:	d110      	bne.n	8006e6e <_dtoa_r+0xa7e>
 8006e4c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006e50:	d029      	beq.n	8006ea6 <_dtoa_r+0xab6>
 8006e52:	9b05      	ldr	r3, [sp, #20]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	dd02      	ble.n	8006e5e <_dtoa_r+0xa6e>
 8006e58:	9b02      	ldr	r3, [sp, #8]
 8006e5a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006e5e:	9b01      	ldr	r3, [sp, #4]
 8006e60:	f883 9000 	strb.w	r9, [r3]
 8006e64:	e774      	b.n	8006d50 <_dtoa_r+0x960>
 8006e66:	4638      	mov	r0, r7
 8006e68:	e7ba      	b.n	8006de0 <_dtoa_r+0x9f0>
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	e7e1      	b.n	8006e32 <_dtoa_r+0xa42>
 8006e6e:	9b05      	ldr	r3, [sp, #20]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	db04      	blt.n	8006e7e <_dtoa_r+0xa8e>
 8006e74:	9907      	ldr	r1, [sp, #28]
 8006e76:	430b      	orrs	r3, r1
 8006e78:	9906      	ldr	r1, [sp, #24]
 8006e7a:	430b      	orrs	r3, r1
 8006e7c:	d120      	bne.n	8006ec0 <_dtoa_r+0xad0>
 8006e7e:	2a00      	cmp	r2, #0
 8006e80:	dded      	ble.n	8006e5e <_dtoa_r+0xa6e>
 8006e82:	4651      	mov	r1, sl
 8006e84:	2201      	movs	r2, #1
 8006e86:	4620      	mov	r0, r4
 8006e88:	f000 fbb4 	bl	80075f4 <__lshift>
 8006e8c:	4631      	mov	r1, r6
 8006e8e:	4682      	mov	sl, r0
 8006e90:	f000 fc1c 	bl	80076cc <__mcmp>
 8006e94:	2800      	cmp	r0, #0
 8006e96:	dc03      	bgt.n	8006ea0 <_dtoa_r+0xab0>
 8006e98:	d1e1      	bne.n	8006e5e <_dtoa_r+0xa6e>
 8006e9a:	f019 0f01 	tst.w	r9, #1
 8006e9e:	d0de      	beq.n	8006e5e <_dtoa_r+0xa6e>
 8006ea0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006ea4:	d1d8      	bne.n	8006e58 <_dtoa_r+0xa68>
 8006ea6:	9a01      	ldr	r2, [sp, #4]
 8006ea8:	2339      	movs	r3, #57	; 0x39
 8006eaa:	7013      	strb	r3, [r2, #0]
 8006eac:	462b      	mov	r3, r5
 8006eae:	461d      	mov	r5, r3
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006eb6:	2a39      	cmp	r2, #57	; 0x39
 8006eb8:	d06c      	beq.n	8006f94 <_dtoa_r+0xba4>
 8006eba:	3201      	adds	r2, #1
 8006ebc:	701a      	strb	r2, [r3, #0]
 8006ebe:	e747      	b.n	8006d50 <_dtoa_r+0x960>
 8006ec0:	2a00      	cmp	r2, #0
 8006ec2:	dd07      	ble.n	8006ed4 <_dtoa_r+0xae4>
 8006ec4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006ec8:	d0ed      	beq.n	8006ea6 <_dtoa_r+0xab6>
 8006eca:	9a01      	ldr	r2, [sp, #4]
 8006ecc:	f109 0301 	add.w	r3, r9, #1
 8006ed0:	7013      	strb	r3, [r2, #0]
 8006ed2:	e73d      	b.n	8006d50 <_dtoa_r+0x960>
 8006ed4:	9b04      	ldr	r3, [sp, #16]
 8006ed6:	9a08      	ldr	r2, [sp, #32]
 8006ed8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d043      	beq.n	8006f68 <_dtoa_r+0xb78>
 8006ee0:	4651      	mov	r1, sl
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	220a      	movs	r2, #10
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f000 f9d6 	bl	8007298 <__multadd>
 8006eec:	45b8      	cmp	r8, r7
 8006eee:	4682      	mov	sl, r0
 8006ef0:	f04f 0300 	mov.w	r3, #0
 8006ef4:	f04f 020a 	mov.w	r2, #10
 8006ef8:	4641      	mov	r1, r8
 8006efa:	4620      	mov	r0, r4
 8006efc:	d107      	bne.n	8006f0e <_dtoa_r+0xb1e>
 8006efe:	f000 f9cb 	bl	8007298 <__multadd>
 8006f02:	4680      	mov	r8, r0
 8006f04:	4607      	mov	r7, r0
 8006f06:	9b04      	ldr	r3, [sp, #16]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	9304      	str	r3, [sp, #16]
 8006f0c:	e775      	b.n	8006dfa <_dtoa_r+0xa0a>
 8006f0e:	f000 f9c3 	bl	8007298 <__multadd>
 8006f12:	4639      	mov	r1, r7
 8006f14:	4680      	mov	r8, r0
 8006f16:	2300      	movs	r3, #0
 8006f18:	220a      	movs	r2, #10
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f000 f9bc 	bl	8007298 <__multadd>
 8006f20:	4607      	mov	r7, r0
 8006f22:	e7f0      	b.n	8006f06 <_dtoa_r+0xb16>
 8006f24:	9b04      	ldr	r3, [sp, #16]
 8006f26:	9301      	str	r3, [sp, #4]
 8006f28:	9d00      	ldr	r5, [sp, #0]
 8006f2a:	4631      	mov	r1, r6
 8006f2c:	4650      	mov	r0, sl
 8006f2e:	f7ff f9d7 	bl	80062e0 <quorem>
 8006f32:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006f36:	9b00      	ldr	r3, [sp, #0]
 8006f38:	f805 9b01 	strb.w	r9, [r5], #1
 8006f3c:	1aea      	subs	r2, r5, r3
 8006f3e:	9b01      	ldr	r3, [sp, #4]
 8006f40:	4293      	cmp	r3, r2
 8006f42:	dd07      	ble.n	8006f54 <_dtoa_r+0xb64>
 8006f44:	4651      	mov	r1, sl
 8006f46:	2300      	movs	r3, #0
 8006f48:	220a      	movs	r2, #10
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	f000 f9a4 	bl	8007298 <__multadd>
 8006f50:	4682      	mov	sl, r0
 8006f52:	e7ea      	b.n	8006f2a <_dtoa_r+0xb3a>
 8006f54:	9b01      	ldr	r3, [sp, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	bfc8      	it	gt
 8006f5a:	461d      	movgt	r5, r3
 8006f5c:	9b00      	ldr	r3, [sp, #0]
 8006f5e:	bfd8      	it	le
 8006f60:	2501      	movle	r5, #1
 8006f62:	441d      	add	r5, r3
 8006f64:	f04f 0800 	mov.w	r8, #0
 8006f68:	4651      	mov	r1, sl
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	f000 fb41 	bl	80075f4 <__lshift>
 8006f72:	4631      	mov	r1, r6
 8006f74:	4682      	mov	sl, r0
 8006f76:	f000 fba9 	bl	80076cc <__mcmp>
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	dc96      	bgt.n	8006eac <_dtoa_r+0xabc>
 8006f7e:	d102      	bne.n	8006f86 <_dtoa_r+0xb96>
 8006f80:	f019 0f01 	tst.w	r9, #1
 8006f84:	d192      	bne.n	8006eac <_dtoa_r+0xabc>
 8006f86:	462b      	mov	r3, r5
 8006f88:	461d      	mov	r5, r3
 8006f8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f8e:	2a30      	cmp	r2, #48	; 0x30
 8006f90:	d0fa      	beq.n	8006f88 <_dtoa_r+0xb98>
 8006f92:	e6dd      	b.n	8006d50 <_dtoa_r+0x960>
 8006f94:	9a00      	ldr	r2, [sp, #0]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d189      	bne.n	8006eae <_dtoa_r+0xabe>
 8006f9a:	f10b 0b01 	add.w	fp, fp, #1
 8006f9e:	2331      	movs	r3, #49	; 0x31
 8006fa0:	e796      	b.n	8006ed0 <_dtoa_r+0xae0>
 8006fa2:	4b0a      	ldr	r3, [pc, #40]	; (8006fcc <_dtoa_r+0xbdc>)
 8006fa4:	f7ff ba99 	b.w	80064da <_dtoa_r+0xea>
 8006fa8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f47f aa6d 	bne.w	800648a <_dtoa_r+0x9a>
 8006fb0:	4b07      	ldr	r3, [pc, #28]	; (8006fd0 <_dtoa_r+0xbe0>)
 8006fb2:	f7ff ba92 	b.w	80064da <_dtoa_r+0xea>
 8006fb6:	9b01      	ldr	r3, [sp, #4]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	dcb5      	bgt.n	8006f28 <_dtoa_r+0xb38>
 8006fbc:	9b07      	ldr	r3, [sp, #28]
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	f73f aeb1 	bgt.w	8006d26 <_dtoa_r+0x936>
 8006fc4:	e7b0      	b.n	8006f28 <_dtoa_r+0xb38>
 8006fc6:	bf00      	nop
 8006fc8:	08008f94 	.word	0x08008f94
 8006fcc:	08008ef4 	.word	0x08008ef4
 8006fd0:	08008f18 	.word	0x08008f18

08006fd4 <_free_r>:
 8006fd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fd6:	2900      	cmp	r1, #0
 8006fd8:	d044      	beq.n	8007064 <_free_r+0x90>
 8006fda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fde:	9001      	str	r0, [sp, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f1a1 0404 	sub.w	r4, r1, #4
 8006fe6:	bfb8      	it	lt
 8006fe8:	18e4      	addlt	r4, r4, r3
 8006fea:	f000 f8e7 	bl	80071bc <__malloc_lock>
 8006fee:	4a1e      	ldr	r2, [pc, #120]	; (8007068 <_free_r+0x94>)
 8006ff0:	9801      	ldr	r0, [sp, #4]
 8006ff2:	6813      	ldr	r3, [r2, #0]
 8006ff4:	b933      	cbnz	r3, 8007004 <_free_r+0x30>
 8006ff6:	6063      	str	r3, [r4, #4]
 8006ff8:	6014      	str	r4, [r2, #0]
 8006ffa:	b003      	add	sp, #12
 8006ffc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007000:	f000 b8e2 	b.w	80071c8 <__malloc_unlock>
 8007004:	42a3      	cmp	r3, r4
 8007006:	d908      	bls.n	800701a <_free_r+0x46>
 8007008:	6825      	ldr	r5, [r4, #0]
 800700a:	1961      	adds	r1, r4, r5
 800700c:	428b      	cmp	r3, r1
 800700e:	bf01      	itttt	eq
 8007010:	6819      	ldreq	r1, [r3, #0]
 8007012:	685b      	ldreq	r3, [r3, #4]
 8007014:	1949      	addeq	r1, r1, r5
 8007016:	6021      	streq	r1, [r4, #0]
 8007018:	e7ed      	b.n	8006ff6 <_free_r+0x22>
 800701a:	461a      	mov	r2, r3
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	b10b      	cbz	r3, 8007024 <_free_r+0x50>
 8007020:	42a3      	cmp	r3, r4
 8007022:	d9fa      	bls.n	800701a <_free_r+0x46>
 8007024:	6811      	ldr	r1, [r2, #0]
 8007026:	1855      	adds	r5, r2, r1
 8007028:	42a5      	cmp	r5, r4
 800702a:	d10b      	bne.n	8007044 <_free_r+0x70>
 800702c:	6824      	ldr	r4, [r4, #0]
 800702e:	4421      	add	r1, r4
 8007030:	1854      	adds	r4, r2, r1
 8007032:	42a3      	cmp	r3, r4
 8007034:	6011      	str	r1, [r2, #0]
 8007036:	d1e0      	bne.n	8006ffa <_free_r+0x26>
 8007038:	681c      	ldr	r4, [r3, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	6053      	str	r3, [r2, #4]
 800703e:	440c      	add	r4, r1
 8007040:	6014      	str	r4, [r2, #0]
 8007042:	e7da      	b.n	8006ffa <_free_r+0x26>
 8007044:	d902      	bls.n	800704c <_free_r+0x78>
 8007046:	230c      	movs	r3, #12
 8007048:	6003      	str	r3, [r0, #0]
 800704a:	e7d6      	b.n	8006ffa <_free_r+0x26>
 800704c:	6825      	ldr	r5, [r4, #0]
 800704e:	1961      	adds	r1, r4, r5
 8007050:	428b      	cmp	r3, r1
 8007052:	bf04      	itt	eq
 8007054:	6819      	ldreq	r1, [r3, #0]
 8007056:	685b      	ldreq	r3, [r3, #4]
 8007058:	6063      	str	r3, [r4, #4]
 800705a:	bf04      	itt	eq
 800705c:	1949      	addeq	r1, r1, r5
 800705e:	6021      	streq	r1, [r4, #0]
 8007060:	6054      	str	r4, [r2, #4]
 8007062:	e7ca      	b.n	8006ffa <_free_r+0x26>
 8007064:	b003      	add	sp, #12
 8007066:	bd30      	pop	{r4, r5, pc}
 8007068:	2000048c 	.word	0x2000048c

0800706c <malloc>:
 800706c:	4b02      	ldr	r3, [pc, #8]	; (8007078 <malloc+0xc>)
 800706e:	4601      	mov	r1, r0
 8007070:	6818      	ldr	r0, [r3, #0]
 8007072:	f000 b823 	b.w	80070bc <_malloc_r>
 8007076:	bf00      	nop
 8007078:	20000070 	.word	0x20000070

0800707c <sbrk_aligned>:
 800707c:	b570      	push	{r4, r5, r6, lr}
 800707e:	4e0e      	ldr	r6, [pc, #56]	; (80070b8 <sbrk_aligned+0x3c>)
 8007080:	460c      	mov	r4, r1
 8007082:	6831      	ldr	r1, [r6, #0]
 8007084:	4605      	mov	r5, r0
 8007086:	b911      	cbnz	r1, 800708e <sbrk_aligned+0x12>
 8007088:	f000 fe40 	bl	8007d0c <_sbrk_r>
 800708c:	6030      	str	r0, [r6, #0]
 800708e:	4621      	mov	r1, r4
 8007090:	4628      	mov	r0, r5
 8007092:	f000 fe3b 	bl	8007d0c <_sbrk_r>
 8007096:	1c43      	adds	r3, r0, #1
 8007098:	d00a      	beq.n	80070b0 <sbrk_aligned+0x34>
 800709a:	1cc4      	adds	r4, r0, #3
 800709c:	f024 0403 	bic.w	r4, r4, #3
 80070a0:	42a0      	cmp	r0, r4
 80070a2:	d007      	beq.n	80070b4 <sbrk_aligned+0x38>
 80070a4:	1a21      	subs	r1, r4, r0
 80070a6:	4628      	mov	r0, r5
 80070a8:	f000 fe30 	bl	8007d0c <_sbrk_r>
 80070ac:	3001      	adds	r0, #1
 80070ae:	d101      	bne.n	80070b4 <sbrk_aligned+0x38>
 80070b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80070b4:	4620      	mov	r0, r4
 80070b6:	bd70      	pop	{r4, r5, r6, pc}
 80070b8:	20000490 	.word	0x20000490

080070bc <_malloc_r>:
 80070bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070c0:	1ccd      	adds	r5, r1, #3
 80070c2:	f025 0503 	bic.w	r5, r5, #3
 80070c6:	3508      	adds	r5, #8
 80070c8:	2d0c      	cmp	r5, #12
 80070ca:	bf38      	it	cc
 80070cc:	250c      	movcc	r5, #12
 80070ce:	2d00      	cmp	r5, #0
 80070d0:	4607      	mov	r7, r0
 80070d2:	db01      	blt.n	80070d8 <_malloc_r+0x1c>
 80070d4:	42a9      	cmp	r1, r5
 80070d6:	d905      	bls.n	80070e4 <_malloc_r+0x28>
 80070d8:	230c      	movs	r3, #12
 80070da:	603b      	str	r3, [r7, #0]
 80070dc:	2600      	movs	r6, #0
 80070de:	4630      	mov	r0, r6
 80070e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80071b8 <_malloc_r+0xfc>
 80070e8:	f000 f868 	bl	80071bc <__malloc_lock>
 80070ec:	f8d8 3000 	ldr.w	r3, [r8]
 80070f0:	461c      	mov	r4, r3
 80070f2:	bb5c      	cbnz	r4, 800714c <_malloc_r+0x90>
 80070f4:	4629      	mov	r1, r5
 80070f6:	4638      	mov	r0, r7
 80070f8:	f7ff ffc0 	bl	800707c <sbrk_aligned>
 80070fc:	1c43      	adds	r3, r0, #1
 80070fe:	4604      	mov	r4, r0
 8007100:	d155      	bne.n	80071ae <_malloc_r+0xf2>
 8007102:	f8d8 4000 	ldr.w	r4, [r8]
 8007106:	4626      	mov	r6, r4
 8007108:	2e00      	cmp	r6, #0
 800710a:	d145      	bne.n	8007198 <_malloc_r+0xdc>
 800710c:	2c00      	cmp	r4, #0
 800710e:	d048      	beq.n	80071a2 <_malloc_r+0xe6>
 8007110:	6823      	ldr	r3, [r4, #0]
 8007112:	4631      	mov	r1, r6
 8007114:	4638      	mov	r0, r7
 8007116:	eb04 0903 	add.w	r9, r4, r3
 800711a:	f000 fdf7 	bl	8007d0c <_sbrk_r>
 800711e:	4581      	cmp	r9, r0
 8007120:	d13f      	bne.n	80071a2 <_malloc_r+0xe6>
 8007122:	6821      	ldr	r1, [r4, #0]
 8007124:	1a6d      	subs	r5, r5, r1
 8007126:	4629      	mov	r1, r5
 8007128:	4638      	mov	r0, r7
 800712a:	f7ff ffa7 	bl	800707c <sbrk_aligned>
 800712e:	3001      	adds	r0, #1
 8007130:	d037      	beq.n	80071a2 <_malloc_r+0xe6>
 8007132:	6823      	ldr	r3, [r4, #0]
 8007134:	442b      	add	r3, r5
 8007136:	6023      	str	r3, [r4, #0]
 8007138:	f8d8 3000 	ldr.w	r3, [r8]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d038      	beq.n	80071b2 <_malloc_r+0xf6>
 8007140:	685a      	ldr	r2, [r3, #4]
 8007142:	42a2      	cmp	r2, r4
 8007144:	d12b      	bne.n	800719e <_malloc_r+0xe2>
 8007146:	2200      	movs	r2, #0
 8007148:	605a      	str	r2, [r3, #4]
 800714a:	e00f      	b.n	800716c <_malloc_r+0xb0>
 800714c:	6822      	ldr	r2, [r4, #0]
 800714e:	1b52      	subs	r2, r2, r5
 8007150:	d41f      	bmi.n	8007192 <_malloc_r+0xd6>
 8007152:	2a0b      	cmp	r2, #11
 8007154:	d917      	bls.n	8007186 <_malloc_r+0xca>
 8007156:	1961      	adds	r1, r4, r5
 8007158:	42a3      	cmp	r3, r4
 800715a:	6025      	str	r5, [r4, #0]
 800715c:	bf18      	it	ne
 800715e:	6059      	strne	r1, [r3, #4]
 8007160:	6863      	ldr	r3, [r4, #4]
 8007162:	bf08      	it	eq
 8007164:	f8c8 1000 	streq.w	r1, [r8]
 8007168:	5162      	str	r2, [r4, r5]
 800716a:	604b      	str	r3, [r1, #4]
 800716c:	4638      	mov	r0, r7
 800716e:	f104 060b 	add.w	r6, r4, #11
 8007172:	f000 f829 	bl	80071c8 <__malloc_unlock>
 8007176:	f026 0607 	bic.w	r6, r6, #7
 800717a:	1d23      	adds	r3, r4, #4
 800717c:	1af2      	subs	r2, r6, r3
 800717e:	d0ae      	beq.n	80070de <_malloc_r+0x22>
 8007180:	1b9b      	subs	r3, r3, r6
 8007182:	50a3      	str	r3, [r4, r2]
 8007184:	e7ab      	b.n	80070de <_malloc_r+0x22>
 8007186:	42a3      	cmp	r3, r4
 8007188:	6862      	ldr	r2, [r4, #4]
 800718a:	d1dd      	bne.n	8007148 <_malloc_r+0x8c>
 800718c:	f8c8 2000 	str.w	r2, [r8]
 8007190:	e7ec      	b.n	800716c <_malloc_r+0xb0>
 8007192:	4623      	mov	r3, r4
 8007194:	6864      	ldr	r4, [r4, #4]
 8007196:	e7ac      	b.n	80070f2 <_malloc_r+0x36>
 8007198:	4634      	mov	r4, r6
 800719a:	6876      	ldr	r6, [r6, #4]
 800719c:	e7b4      	b.n	8007108 <_malloc_r+0x4c>
 800719e:	4613      	mov	r3, r2
 80071a0:	e7cc      	b.n	800713c <_malloc_r+0x80>
 80071a2:	230c      	movs	r3, #12
 80071a4:	603b      	str	r3, [r7, #0]
 80071a6:	4638      	mov	r0, r7
 80071a8:	f000 f80e 	bl	80071c8 <__malloc_unlock>
 80071ac:	e797      	b.n	80070de <_malloc_r+0x22>
 80071ae:	6025      	str	r5, [r4, #0]
 80071b0:	e7dc      	b.n	800716c <_malloc_r+0xb0>
 80071b2:	605b      	str	r3, [r3, #4]
 80071b4:	deff      	udf	#255	; 0xff
 80071b6:	bf00      	nop
 80071b8:	2000048c 	.word	0x2000048c

080071bc <__malloc_lock>:
 80071bc:	4801      	ldr	r0, [pc, #4]	; (80071c4 <__malloc_lock+0x8>)
 80071be:	f7ff b87f 	b.w	80062c0 <__retarget_lock_acquire_recursive>
 80071c2:	bf00      	nop
 80071c4:	20000488 	.word	0x20000488

080071c8 <__malloc_unlock>:
 80071c8:	4801      	ldr	r0, [pc, #4]	; (80071d0 <__malloc_unlock+0x8>)
 80071ca:	f7ff b87a 	b.w	80062c2 <__retarget_lock_release_recursive>
 80071ce:	bf00      	nop
 80071d0:	20000488 	.word	0x20000488

080071d4 <_Balloc>:
 80071d4:	b570      	push	{r4, r5, r6, lr}
 80071d6:	69c6      	ldr	r6, [r0, #28]
 80071d8:	4604      	mov	r4, r0
 80071da:	460d      	mov	r5, r1
 80071dc:	b976      	cbnz	r6, 80071fc <_Balloc+0x28>
 80071de:	2010      	movs	r0, #16
 80071e0:	f7ff ff44 	bl	800706c <malloc>
 80071e4:	4602      	mov	r2, r0
 80071e6:	61e0      	str	r0, [r4, #28]
 80071e8:	b920      	cbnz	r0, 80071f4 <_Balloc+0x20>
 80071ea:	4b18      	ldr	r3, [pc, #96]	; (800724c <_Balloc+0x78>)
 80071ec:	4818      	ldr	r0, [pc, #96]	; (8007250 <_Balloc+0x7c>)
 80071ee:	216b      	movs	r1, #107	; 0x6b
 80071f0:	f000 fd9c 	bl	8007d2c <__assert_func>
 80071f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071f8:	6006      	str	r6, [r0, #0]
 80071fa:	60c6      	str	r6, [r0, #12]
 80071fc:	69e6      	ldr	r6, [r4, #28]
 80071fe:	68f3      	ldr	r3, [r6, #12]
 8007200:	b183      	cbz	r3, 8007224 <_Balloc+0x50>
 8007202:	69e3      	ldr	r3, [r4, #28]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800720a:	b9b8      	cbnz	r0, 800723c <_Balloc+0x68>
 800720c:	2101      	movs	r1, #1
 800720e:	fa01 f605 	lsl.w	r6, r1, r5
 8007212:	1d72      	adds	r2, r6, #5
 8007214:	0092      	lsls	r2, r2, #2
 8007216:	4620      	mov	r0, r4
 8007218:	f000 fda6 	bl	8007d68 <_calloc_r>
 800721c:	b160      	cbz	r0, 8007238 <_Balloc+0x64>
 800721e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007222:	e00e      	b.n	8007242 <_Balloc+0x6e>
 8007224:	2221      	movs	r2, #33	; 0x21
 8007226:	2104      	movs	r1, #4
 8007228:	4620      	mov	r0, r4
 800722a:	f000 fd9d 	bl	8007d68 <_calloc_r>
 800722e:	69e3      	ldr	r3, [r4, #28]
 8007230:	60f0      	str	r0, [r6, #12]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1e4      	bne.n	8007202 <_Balloc+0x2e>
 8007238:	2000      	movs	r0, #0
 800723a:	bd70      	pop	{r4, r5, r6, pc}
 800723c:	6802      	ldr	r2, [r0, #0]
 800723e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007242:	2300      	movs	r3, #0
 8007244:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007248:	e7f7      	b.n	800723a <_Balloc+0x66>
 800724a:	bf00      	nop
 800724c:	08008f25 	.word	0x08008f25
 8007250:	08008fa5 	.word	0x08008fa5

08007254 <_Bfree>:
 8007254:	b570      	push	{r4, r5, r6, lr}
 8007256:	69c6      	ldr	r6, [r0, #28]
 8007258:	4605      	mov	r5, r0
 800725a:	460c      	mov	r4, r1
 800725c:	b976      	cbnz	r6, 800727c <_Bfree+0x28>
 800725e:	2010      	movs	r0, #16
 8007260:	f7ff ff04 	bl	800706c <malloc>
 8007264:	4602      	mov	r2, r0
 8007266:	61e8      	str	r0, [r5, #28]
 8007268:	b920      	cbnz	r0, 8007274 <_Bfree+0x20>
 800726a:	4b09      	ldr	r3, [pc, #36]	; (8007290 <_Bfree+0x3c>)
 800726c:	4809      	ldr	r0, [pc, #36]	; (8007294 <_Bfree+0x40>)
 800726e:	218f      	movs	r1, #143	; 0x8f
 8007270:	f000 fd5c 	bl	8007d2c <__assert_func>
 8007274:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007278:	6006      	str	r6, [r0, #0]
 800727a:	60c6      	str	r6, [r0, #12]
 800727c:	b13c      	cbz	r4, 800728e <_Bfree+0x3a>
 800727e:	69eb      	ldr	r3, [r5, #28]
 8007280:	6862      	ldr	r2, [r4, #4]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007288:	6021      	str	r1, [r4, #0]
 800728a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800728e:	bd70      	pop	{r4, r5, r6, pc}
 8007290:	08008f25 	.word	0x08008f25
 8007294:	08008fa5 	.word	0x08008fa5

08007298 <__multadd>:
 8007298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800729c:	690d      	ldr	r5, [r1, #16]
 800729e:	4607      	mov	r7, r0
 80072a0:	460c      	mov	r4, r1
 80072a2:	461e      	mov	r6, r3
 80072a4:	f101 0c14 	add.w	ip, r1, #20
 80072a8:	2000      	movs	r0, #0
 80072aa:	f8dc 3000 	ldr.w	r3, [ip]
 80072ae:	b299      	uxth	r1, r3
 80072b0:	fb02 6101 	mla	r1, r2, r1, r6
 80072b4:	0c1e      	lsrs	r6, r3, #16
 80072b6:	0c0b      	lsrs	r3, r1, #16
 80072b8:	fb02 3306 	mla	r3, r2, r6, r3
 80072bc:	b289      	uxth	r1, r1
 80072be:	3001      	adds	r0, #1
 80072c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80072c4:	4285      	cmp	r5, r0
 80072c6:	f84c 1b04 	str.w	r1, [ip], #4
 80072ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80072ce:	dcec      	bgt.n	80072aa <__multadd+0x12>
 80072d0:	b30e      	cbz	r6, 8007316 <__multadd+0x7e>
 80072d2:	68a3      	ldr	r3, [r4, #8]
 80072d4:	42ab      	cmp	r3, r5
 80072d6:	dc19      	bgt.n	800730c <__multadd+0x74>
 80072d8:	6861      	ldr	r1, [r4, #4]
 80072da:	4638      	mov	r0, r7
 80072dc:	3101      	adds	r1, #1
 80072de:	f7ff ff79 	bl	80071d4 <_Balloc>
 80072e2:	4680      	mov	r8, r0
 80072e4:	b928      	cbnz	r0, 80072f2 <__multadd+0x5a>
 80072e6:	4602      	mov	r2, r0
 80072e8:	4b0c      	ldr	r3, [pc, #48]	; (800731c <__multadd+0x84>)
 80072ea:	480d      	ldr	r0, [pc, #52]	; (8007320 <__multadd+0x88>)
 80072ec:	21ba      	movs	r1, #186	; 0xba
 80072ee:	f000 fd1d 	bl	8007d2c <__assert_func>
 80072f2:	6922      	ldr	r2, [r4, #16]
 80072f4:	3202      	adds	r2, #2
 80072f6:	f104 010c 	add.w	r1, r4, #12
 80072fa:	0092      	lsls	r2, r2, #2
 80072fc:	300c      	adds	r0, #12
 80072fe:	f7fe ffe1 	bl	80062c4 <memcpy>
 8007302:	4621      	mov	r1, r4
 8007304:	4638      	mov	r0, r7
 8007306:	f7ff ffa5 	bl	8007254 <_Bfree>
 800730a:	4644      	mov	r4, r8
 800730c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007310:	3501      	adds	r5, #1
 8007312:	615e      	str	r6, [r3, #20]
 8007314:	6125      	str	r5, [r4, #16]
 8007316:	4620      	mov	r0, r4
 8007318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800731c:	08008f94 	.word	0x08008f94
 8007320:	08008fa5 	.word	0x08008fa5

08007324 <__hi0bits>:
 8007324:	0c03      	lsrs	r3, r0, #16
 8007326:	041b      	lsls	r3, r3, #16
 8007328:	b9d3      	cbnz	r3, 8007360 <__hi0bits+0x3c>
 800732a:	0400      	lsls	r0, r0, #16
 800732c:	2310      	movs	r3, #16
 800732e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007332:	bf04      	itt	eq
 8007334:	0200      	lsleq	r0, r0, #8
 8007336:	3308      	addeq	r3, #8
 8007338:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800733c:	bf04      	itt	eq
 800733e:	0100      	lsleq	r0, r0, #4
 8007340:	3304      	addeq	r3, #4
 8007342:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007346:	bf04      	itt	eq
 8007348:	0080      	lsleq	r0, r0, #2
 800734a:	3302      	addeq	r3, #2
 800734c:	2800      	cmp	r0, #0
 800734e:	db05      	blt.n	800735c <__hi0bits+0x38>
 8007350:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007354:	f103 0301 	add.w	r3, r3, #1
 8007358:	bf08      	it	eq
 800735a:	2320      	moveq	r3, #32
 800735c:	4618      	mov	r0, r3
 800735e:	4770      	bx	lr
 8007360:	2300      	movs	r3, #0
 8007362:	e7e4      	b.n	800732e <__hi0bits+0xa>

08007364 <__lo0bits>:
 8007364:	6803      	ldr	r3, [r0, #0]
 8007366:	f013 0207 	ands.w	r2, r3, #7
 800736a:	d00c      	beq.n	8007386 <__lo0bits+0x22>
 800736c:	07d9      	lsls	r1, r3, #31
 800736e:	d422      	bmi.n	80073b6 <__lo0bits+0x52>
 8007370:	079a      	lsls	r2, r3, #30
 8007372:	bf49      	itett	mi
 8007374:	085b      	lsrmi	r3, r3, #1
 8007376:	089b      	lsrpl	r3, r3, #2
 8007378:	6003      	strmi	r3, [r0, #0]
 800737a:	2201      	movmi	r2, #1
 800737c:	bf5c      	itt	pl
 800737e:	6003      	strpl	r3, [r0, #0]
 8007380:	2202      	movpl	r2, #2
 8007382:	4610      	mov	r0, r2
 8007384:	4770      	bx	lr
 8007386:	b299      	uxth	r1, r3
 8007388:	b909      	cbnz	r1, 800738e <__lo0bits+0x2a>
 800738a:	0c1b      	lsrs	r3, r3, #16
 800738c:	2210      	movs	r2, #16
 800738e:	b2d9      	uxtb	r1, r3
 8007390:	b909      	cbnz	r1, 8007396 <__lo0bits+0x32>
 8007392:	3208      	adds	r2, #8
 8007394:	0a1b      	lsrs	r3, r3, #8
 8007396:	0719      	lsls	r1, r3, #28
 8007398:	bf04      	itt	eq
 800739a:	091b      	lsreq	r3, r3, #4
 800739c:	3204      	addeq	r2, #4
 800739e:	0799      	lsls	r1, r3, #30
 80073a0:	bf04      	itt	eq
 80073a2:	089b      	lsreq	r3, r3, #2
 80073a4:	3202      	addeq	r2, #2
 80073a6:	07d9      	lsls	r1, r3, #31
 80073a8:	d403      	bmi.n	80073b2 <__lo0bits+0x4e>
 80073aa:	085b      	lsrs	r3, r3, #1
 80073ac:	f102 0201 	add.w	r2, r2, #1
 80073b0:	d003      	beq.n	80073ba <__lo0bits+0x56>
 80073b2:	6003      	str	r3, [r0, #0]
 80073b4:	e7e5      	b.n	8007382 <__lo0bits+0x1e>
 80073b6:	2200      	movs	r2, #0
 80073b8:	e7e3      	b.n	8007382 <__lo0bits+0x1e>
 80073ba:	2220      	movs	r2, #32
 80073bc:	e7e1      	b.n	8007382 <__lo0bits+0x1e>
	...

080073c0 <__i2b>:
 80073c0:	b510      	push	{r4, lr}
 80073c2:	460c      	mov	r4, r1
 80073c4:	2101      	movs	r1, #1
 80073c6:	f7ff ff05 	bl	80071d4 <_Balloc>
 80073ca:	4602      	mov	r2, r0
 80073cc:	b928      	cbnz	r0, 80073da <__i2b+0x1a>
 80073ce:	4b05      	ldr	r3, [pc, #20]	; (80073e4 <__i2b+0x24>)
 80073d0:	4805      	ldr	r0, [pc, #20]	; (80073e8 <__i2b+0x28>)
 80073d2:	f240 1145 	movw	r1, #325	; 0x145
 80073d6:	f000 fca9 	bl	8007d2c <__assert_func>
 80073da:	2301      	movs	r3, #1
 80073dc:	6144      	str	r4, [r0, #20]
 80073de:	6103      	str	r3, [r0, #16]
 80073e0:	bd10      	pop	{r4, pc}
 80073e2:	bf00      	nop
 80073e4:	08008f94 	.word	0x08008f94
 80073e8:	08008fa5 	.word	0x08008fa5

080073ec <__multiply>:
 80073ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f0:	4691      	mov	r9, r2
 80073f2:	690a      	ldr	r2, [r1, #16]
 80073f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	bfb8      	it	lt
 80073fc:	460b      	movlt	r3, r1
 80073fe:	460c      	mov	r4, r1
 8007400:	bfbc      	itt	lt
 8007402:	464c      	movlt	r4, r9
 8007404:	4699      	movlt	r9, r3
 8007406:	6927      	ldr	r7, [r4, #16]
 8007408:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800740c:	68a3      	ldr	r3, [r4, #8]
 800740e:	6861      	ldr	r1, [r4, #4]
 8007410:	eb07 060a 	add.w	r6, r7, sl
 8007414:	42b3      	cmp	r3, r6
 8007416:	b085      	sub	sp, #20
 8007418:	bfb8      	it	lt
 800741a:	3101      	addlt	r1, #1
 800741c:	f7ff feda 	bl	80071d4 <_Balloc>
 8007420:	b930      	cbnz	r0, 8007430 <__multiply+0x44>
 8007422:	4602      	mov	r2, r0
 8007424:	4b44      	ldr	r3, [pc, #272]	; (8007538 <__multiply+0x14c>)
 8007426:	4845      	ldr	r0, [pc, #276]	; (800753c <__multiply+0x150>)
 8007428:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800742c:	f000 fc7e 	bl	8007d2c <__assert_func>
 8007430:	f100 0514 	add.w	r5, r0, #20
 8007434:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007438:	462b      	mov	r3, r5
 800743a:	2200      	movs	r2, #0
 800743c:	4543      	cmp	r3, r8
 800743e:	d321      	bcc.n	8007484 <__multiply+0x98>
 8007440:	f104 0314 	add.w	r3, r4, #20
 8007444:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007448:	f109 0314 	add.w	r3, r9, #20
 800744c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007450:	9202      	str	r2, [sp, #8]
 8007452:	1b3a      	subs	r2, r7, r4
 8007454:	3a15      	subs	r2, #21
 8007456:	f022 0203 	bic.w	r2, r2, #3
 800745a:	3204      	adds	r2, #4
 800745c:	f104 0115 	add.w	r1, r4, #21
 8007460:	428f      	cmp	r7, r1
 8007462:	bf38      	it	cc
 8007464:	2204      	movcc	r2, #4
 8007466:	9201      	str	r2, [sp, #4]
 8007468:	9a02      	ldr	r2, [sp, #8]
 800746a:	9303      	str	r3, [sp, #12]
 800746c:	429a      	cmp	r2, r3
 800746e:	d80c      	bhi.n	800748a <__multiply+0x9e>
 8007470:	2e00      	cmp	r6, #0
 8007472:	dd03      	ble.n	800747c <__multiply+0x90>
 8007474:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007478:	2b00      	cmp	r3, #0
 800747a:	d05b      	beq.n	8007534 <__multiply+0x148>
 800747c:	6106      	str	r6, [r0, #16]
 800747e:	b005      	add	sp, #20
 8007480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007484:	f843 2b04 	str.w	r2, [r3], #4
 8007488:	e7d8      	b.n	800743c <__multiply+0x50>
 800748a:	f8b3 a000 	ldrh.w	sl, [r3]
 800748e:	f1ba 0f00 	cmp.w	sl, #0
 8007492:	d024      	beq.n	80074de <__multiply+0xf2>
 8007494:	f104 0e14 	add.w	lr, r4, #20
 8007498:	46a9      	mov	r9, r5
 800749a:	f04f 0c00 	mov.w	ip, #0
 800749e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80074a2:	f8d9 1000 	ldr.w	r1, [r9]
 80074a6:	fa1f fb82 	uxth.w	fp, r2
 80074aa:	b289      	uxth	r1, r1
 80074ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80074b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80074b4:	f8d9 2000 	ldr.w	r2, [r9]
 80074b8:	4461      	add	r1, ip
 80074ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80074be:	fb0a c20b 	mla	r2, sl, fp, ip
 80074c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80074c6:	b289      	uxth	r1, r1
 80074c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80074cc:	4577      	cmp	r7, lr
 80074ce:	f849 1b04 	str.w	r1, [r9], #4
 80074d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80074d6:	d8e2      	bhi.n	800749e <__multiply+0xb2>
 80074d8:	9a01      	ldr	r2, [sp, #4]
 80074da:	f845 c002 	str.w	ip, [r5, r2]
 80074de:	9a03      	ldr	r2, [sp, #12]
 80074e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80074e4:	3304      	adds	r3, #4
 80074e6:	f1b9 0f00 	cmp.w	r9, #0
 80074ea:	d021      	beq.n	8007530 <__multiply+0x144>
 80074ec:	6829      	ldr	r1, [r5, #0]
 80074ee:	f104 0c14 	add.w	ip, r4, #20
 80074f2:	46ae      	mov	lr, r5
 80074f4:	f04f 0a00 	mov.w	sl, #0
 80074f8:	f8bc b000 	ldrh.w	fp, [ip]
 80074fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007500:	fb09 220b 	mla	r2, r9, fp, r2
 8007504:	4452      	add	r2, sl
 8007506:	b289      	uxth	r1, r1
 8007508:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800750c:	f84e 1b04 	str.w	r1, [lr], #4
 8007510:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007514:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007518:	f8be 1000 	ldrh.w	r1, [lr]
 800751c:	fb09 110a 	mla	r1, r9, sl, r1
 8007520:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007524:	4567      	cmp	r7, ip
 8007526:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800752a:	d8e5      	bhi.n	80074f8 <__multiply+0x10c>
 800752c:	9a01      	ldr	r2, [sp, #4]
 800752e:	50a9      	str	r1, [r5, r2]
 8007530:	3504      	adds	r5, #4
 8007532:	e799      	b.n	8007468 <__multiply+0x7c>
 8007534:	3e01      	subs	r6, #1
 8007536:	e79b      	b.n	8007470 <__multiply+0x84>
 8007538:	08008f94 	.word	0x08008f94
 800753c:	08008fa5 	.word	0x08008fa5

08007540 <__pow5mult>:
 8007540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007544:	4615      	mov	r5, r2
 8007546:	f012 0203 	ands.w	r2, r2, #3
 800754a:	4606      	mov	r6, r0
 800754c:	460f      	mov	r7, r1
 800754e:	d007      	beq.n	8007560 <__pow5mult+0x20>
 8007550:	4c25      	ldr	r4, [pc, #148]	; (80075e8 <__pow5mult+0xa8>)
 8007552:	3a01      	subs	r2, #1
 8007554:	2300      	movs	r3, #0
 8007556:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800755a:	f7ff fe9d 	bl	8007298 <__multadd>
 800755e:	4607      	mov	r7, r0
 8007560:	10ad      	asrs	r5, r5, #2
 8007562:	d03d      	beq.n	80075e0 <__pow5mult+0xa0>
 8007564:	69f4      	ldr	r4, [r6, #28]
 8007566:	b97c      	cbnz	r4, 8007588 <__pow5mult+0x48>
 8007568:	2010      	movs	r0, #16
 800756a:	f7ff fd7f 	bl	800706c <malloc>
 800756e:	4602      	mov	r2, r0
 8007570:	61f0      	str	r0, [r6, #28]
 8007572:	b928      	cbnz	r0, 8007580 <__pow5mult+0x40>
 8007574:	4b1d      	ldr	r3, [pc, #116]	; (80075ec <__pow5mult+0xac>)
 8007576:	481e      	ldr	r0, [pc, #120]	; (80075f0 <__pow5mult+0xb0>)
 8007578:	f240 11b3 	movw	r1, #435	; 0x1b3
 800757c:	f000 fbd6 	bl	8007d2c <__assert_func>
 8007580:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007584:	6004      	str	r4, [r0, #0]
 8007586:	60c4      	str	r4, [r0, #12]
 8007588:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800758c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007590:	b94c      	cbnz	r4, 80075a6 <__pow5mult+0x66>
 8007592:	f240 2171 	movw	r1, #625	; 0x271
 8007596:	4630      	mov	r0, r6
 8007598:	f7ff ff12 	bl	80073c0 <__i2b>
 800759c:	2300      	movs	r3, #0
 800759e:	f8c8 0008 	str.w	r0, [r8, #8]
 80075a2:	4604      	mov	r4, r0
 80075a4:	6003      	str	r3, [r0, #0]
 80075a6:	f04f 0900 	mov.w	r9, #0
 80075aa:	07eb      	lsls	r3, r5, #31
 80075ac:	d50a      	bpl.n	80075c4 <__pow5mult+0x84>
 80075ae:	4639      	mov	r1, r7
 80075b0:	4622      	mov	r2, r4
 80075b2:	4630      	mov	r0, r6
 80075b4:	f7ff ff1a 	bl	80073ec <__multiply>
 80075b8:	4639      	mov	r1, r7
 80075ba:	4680      	mov	r8, r0
 80075bc:	4630      	mov	r0, r6
 80075be:	f7ff fe49 	bl	8007254 <_Bfree>
 80075c2:	4647      	mov	r7, r8
 80075c4:	106d      	asrs	r5, r5, #1
 80075c6:	d00b      	beq.n	80075e0 <__pow5mult+0xa0>
 80075c8:	6820      	ldr	r0, [r4, #0]
 80075ca:	b938      	cbnz	r0, 80075dc <__pow5mult+0x9c>
 80075cc:	4622      	mov	r2, r4
 80075ce:	4621      	mov	r1, r4
 80075d0:	4630      	mov	r0, r6
 80075d2:	f7ff ff0b 	bl	80073ec <__multiply>
 80075d6:	6020      	str	r0, [r4, #0]
 80075d8:	f8c0 9000 	str.w	r9, [r0]
 80075dc:	4604      	mov	r4, r0
 80075de:	e7e4      	b.n	80075aa <__pow5mult+0x6a>
 80075e0:	4638      	mov	r0, r7
 80075e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075e6:	bf00      	nop
 80075e8:	080090f0 	.word	0x080090f0
 80075ec:	08008f25 	.word	0x08008f25
 80075f0:	08008fa5 	.word	0x08008fa5

080075f4 <__lshift>:
 80075f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075f8:	460c      	mov	r4, r1
 80075fa:	6849      	ldr	r1, [r1, #4]
 80075fc:	6923      	ldr	r3, [r4, #16]
 80075fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007602:	68a3      	ldr	r3, [r4, #8]
 8007604:	4607      	mov	r7, r0
 8007606:	4691      	mov	r9, r2
 8007608:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800760c:	f108 0601 	add.w	r6, r8, #1
 8007610:	42b3      	cmp	r3, r6
 8007612:	db0b      	blt.n	800762c <__lshift+0x38>
 8007614:	4638      	mov	r0, r7
 8007616:	f7ff fddd 	bl	80071d4 <_Balloc>
 800761a:	4605      	mov	r5, r0
 800761c:	b948      	cbnz	r0, 8007632 <__lshift+0x3e>
 800761e:	4602      	mov	r2, r0
 8007620:	4b28      	ldr	r3, [pc, #160]	; (80076c4 <__lshift+0xd0>)
 8007622:	4829      	ldr	r0, [pc, #164]	; (80076c8 <__lshift+0xd4>)
 8007624:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007628:	f000 fb80 	bl	8007d2c <__assert_func>
 800762c:	3101      	adds	r1, #1
 800762e:	005b      	lsls	r3, r3, #1
 8007630:	e7ee      	b.n	8007610 <__lshift+0x1c>
 8007632:	2300      	movs	r3, #0
 8007634:	f100 0114 	add.w	r1, r0, #20
 8007638:	f100 0210 	add.w	r2, r0, #16
 800763c:	4618      	mov	r0, r3
 800763e:	4553      	cmp	r3, sl
 8007640:	db33      	blt.n	80076aa <__lshift+0xb6>
 8007642:	6920      	ldr	r0, [r4, #16]
 8007644:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007648:	f104 0314 	add.w	r3, r4, #20
 800764c:	f019 091f 	ands.w	r9, r9, #31
 8007650:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007654:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007658:	d02b      	beq.n	80076b2 <__lshift+0xbe>
 800765a:	f1c9 0e20 	rsb	lr, r9, #32
 800765e:	468a      	mov	sl, r1
 8007660:	2200      	movs	r2, #0
 8007662:	6818      	ldr	r0, [r3, #0]
 8007664:	fa00 f009 	lsl.w	r0, r0, r9
 8007668:	4310      	orrs	r0, r2
 800766a:	f84a 0b04 	str.w	r0, [sl], #4
 800766e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007672:	459c      	cmp	ip, r3
 8007674:	fa22 f20e 	lsr.w	r2, r2, lr
 8007678:	d8f3      	bhi.n	8007662 <__lshift+0x6e>
 800767a:	ebac 0304 	sub.w	r3, ip, r4
 800767e:	3b15      	subs	r3, #21
 8007680:	f023 0303 	bic.w	r3, r3, #3
 8007684:	3304      	adds	r3, #4
 8007686:	f104 0015 	add.w	r0, r4, #21
 800768a:	4584      	cmp	ip, r0
 800768c:	bf38      	it	cc
 800768e:	2304      	movcc	r3, #4
 8007690:	50ca      	str	r2, [r1, r3]
 8007692:	b10a      	cbz	r2, 8007698 <__lshift+0xa4>
 8007694:	f108 0602 	add.w	r6, r8, #2
 8007698:	3e01      	subs	r6, #1
 800769a:	4638      	mov	r0, r7
 800769c:	612e      	str	r6, [r5, #16]
 800769e:	4621      	mov	r1, r4
 80076a0:	f7ff fdd8 	bl	8007254 <_Bfree>
 80076a4:	4628      	mov	r0, r5
 80076a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80076ae:	3301      	adds	r3, #1
 80076b0:	e7c5      	b.n	800763e <__lshift+0x4a>
 80076b2:	3904      	subs	r1, #4
 80076b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80076b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80076bc:	459c      	cmp	ip, r3
 80076be:	d8f9      	bhi.n	80076b4 <__lshift+0xc0>
 80076c0:	e7ea      	b.n	8007698 <__lshift+0xa4>
 80076c2:	bf00      	nop
 80076c4:	08008f94 	.word	0x08008f94
 80076c8:	08008fa5 	.word	0x08008fa5

080076cc <__mcmp>:
 80076cc:	b530      	push	{r4, r5, lr}
 80076ce:	6902      	ldr	r2, [r0, #16]
 80076d0:	690c      	ldr	r4, [r1, #16]
 80076d2:	1b12      	subs	r2, r2, r4
 80076d4:	d10e      	bne.n	80076f4 <__mcmp+0x28>
 80076d6:	f100 0314 	add.w	r3, r0, #20
 80076da:	3114      	adds	r1, #20
 80076dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80076e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80076e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80076e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80076ec:	42a5      	cmp	r5, r4
 80076ee:	d003      	beq.n	80076f8 <__mcmp+0x2c>
 80076f0:	d305      	bcc.n	80076fe <__mcmp+0x32>
 80076f2:	2201      	movs	r2, #1
 80076f4:	4610      	mov	r0, r2
 80076f6:	bd30      	pop	{r4, r5, pc}
 80076f8:	4283      	cmp	r3, r0
 80076fa:	d3f3      	bcc.n	80076e4 <__mcmp+0x18>
 80076fc:	e7fa      	b.n	80076f4 <__mcmp+0x28>
 80076fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007702:	e7f7      	b.n	80076f4 <__mcmp+0x28>

08007704 <__mdiff>:
 8007704:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007708:	460c      	mov	r4, r1
 800770a:	4606      	mov	r6, r0
 800770c:	4611      	mov	r1, r2
 800770e:	4620      	mov	r0, r4
 8007710:	4690      	mov	r8, r2
 8007712:	f7ff ffdb 	bl	80076cc <__mcmp>
 8007716:	1e05      	subs	r5, r0, #0
 8007718:	d110      	bne.n	800773c <__mdiff+0x38>
 800771a:	4629      	mov	r1, r5
 800771c:	4630      	mov	r0, r6
 800771e:	f7ff fd59 	bl	80071d4 <_Balloc>
 8007722:	b930      	cbnz	r0, 8007732 <__mdiff+0x2e>
 8007724:	4b3a      	ldr	r3, [pc, #232]	; (8007810 <__mdiff+0x10c>)
 8007726:	4602      	mov	r2, r0
 8007728:	f240 2137 	movw	r1, #567	; 0x237
 800772c:	4839      	ldr	r0, [pc, #228]	; (8007814 <__mdiff+0x110>)
 800772e:	f000 fafd 	bl	8007d2c <__assert_func>
 8007732:	2301      	movs	r3, #1
 8007734:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007738:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800773c:	bfa4      	itt	ge
 800773e:	4643      	movge	r3, r8
 8007740:	46a0      	movge	r8, r4
 8007742:	4630      	mov	r0, r6
 8007744:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007748:	bfa6      	itte	ge
 800774a:	461c      	movge	r4, r3
 800774c:	2500      	movge	r5, #0
 800774e:	2501      	movlt	r5, #1
 8007750:	f7ff fd40 	bl	80071d4 <_Balloc>
 8007754:	b920      	cbnz	r0, 8007760 <__mdiff+0x5c>
 8007756:	4b2e      	ldr	r3, [pc, #184]	; (8007810 <__mdiff+0x10c>)
 8007758:	4602      	mov	r2, r0
 800775a:	f240 2145 	movw	r1, #581	; 0x245
 800775e:	e7e5      	b.n	800772c <__mdiff+0x28>
 8007760:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007764:	6926      	ldr	r6, [r4, #16]
 8007766:	60c5      	str	r5, [r0, #12]
 8007768:	f104 0914 	add.w	r9, r4, #20
 800776c:	f108 0514 	add.w	r5, r8, #20
 8007770:	f100 0e14 	add.w	lr, r0, #20
 8007774:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007778:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800777c:	f108 0210 	add.w	r2, r8, #16
 8007780:	46f2      	mov	sl, lr
 8007782:	2100      	movs	r1, #0
 8007784:	f859 3b04 	ldr.w	r3, [r9], #4
 8007788:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800778c:	fa11 f88b 	uxtah	r8, r1, fp
 8007790:	b299      	uxth	r1, r3
 8007792:	0c1b      	lsrs	r3, r3, #16
 8007794:	eba8 0801 	sub.w	r8, r8, r1
 8007798:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800779c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80077a0:	fa1f f888 	uxth.w	r8, r8
 80077a4:	1419      	asrs	r1, r3, #16
 80077a6:	454e      	cmp	r6, r9
 80077a8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80077ac:	f84a 3b04 	str.w	r3, [sl], #4
 80077b0:	d8e8      	bhi.n	8007784 <__mdiff+0x80>
 80077b2:	1b33      	subs	r3, r6, r4
 80077b4:	3b15      	subs	r3, #21
 80077b6:	f023 0303 	bic.w	r3, r3, #3
 80077ba:	3304      	adds	r3, #4
 80077bc:	3415      	adds	r4, #21
 80077be:	42a6      	cmp	r6, r4
 80077c0:	bf38      	it	cc
 80077c2:	2304      	movcc	r3, #4
 80077c4:	441d      	add	r5, r3
 80077c6:	4473      	add	r3, lr
 80077c8:	469e      	mov	lr, r3
 80077ca:	462e      	mov	r6, r5
 80077cc:	4566      	cmp	r6, ip
 80077ce:	d30e      	bcc.n	80077ee <__mdiff+0xea>
 80077d0:	f10c 0203 	add.w	r2, ip, #3
 80077d4:	1b52      	subs	r2, r2, r5
 80077d6:	f022 0203 	bic.w	r2, r2, #3
 80077da:	3d03      	subs	r5, #3
 80077dc:	45ac      	cmp	ip, r5
 80077de:	bf38      	it	cc
 80077e0:	2200      	movcc	r2, #0
 80077e2:	4413      	add	r3, r2
 80077e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80077e8:	b17a      	cbz	r2, 800780a <__mdiff+0x106>
 80077ea:	6107      	str	r7, [r0, #16]
 80077ec:	e7a4      	b.n	8007738 <__mdiff+0x34>
 80077ee:	f856 8b04 	ldr.w	r8, [r6], #4
 80077f2:	fa11 f288 	uxtah	r2, r1, r8
 80077f6:	1414      	asrs	r4, r2, #16
 80077f8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80077fc:	b292      	uxth	r2, r2
 80077fe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007802:	f84e 2b04 	str.w	r2, [lr], #4
 8007806:	1421      	asrs	r1, r4, #16
 8007808:	e7e0      	b.n	80077cc <__mdiff+0xc8>
 800780a:	3f01      	subs	r7, #1
 800780c:	e7ea      	b.n	80077e4 <__mdiff+0xe0>
 800780e:	bf00      	nop
 8007810:	08008f94 	.word	0x08008f94
 8007814:	08008fa5 	.word	0x08008fa5

08007818 <__d2b>:
 8007818:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800781c:	460f      	mov	r7, r1
 800781e:	2101      	movs	r1, #1
 8007820:	ec59 8b10 	vmov	r8, r9, d0
 8007824:	4616      	mov	r6, r2
 8007826:	f7ff fcd5 	bl	80071d4 <_Balloc>
 800782a:	4604      	mov	r4, r0
 800782c:	b930      	cbnz	r0, 800783c <__d2b+0x24>
 800782e:	4602      	mov	r2, r0
 8007830:	4b24      	ldr	r3, [pc, #144]	; (80078c4 <__d2b+0xac>)
 8007832:	4825      	ldr	r0, [pc, #148]	; (80078c8 <__d2b+0xb0>)
 8007834:	f240 310f 	movw	r1, #783	; 0x30f
 8007838:	f000 fa78 	bl	8007d2c <__assert_func>
 800783c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007840:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007844:	bb2d      	cbnz	r5, 8007892 <__d2b+0x7a>
 8007846:	9301      	str	r3, [sp, #4]
 8007848:	f1b8 0300 	subs.w	r3, r8, #0
 800784c:	d026      	beq.n	800789c <__d2b+0x84>
 800784e:	4668      	mov	r0, sp
 8007850:	9300      	str	r3, [sp, #0]
 8007852:	f7ff fd87 	bl	8007364 <__lo0bits>
 8007856:	e9dd 1200 	ldrd	r1, r2, [sp]
 800785a:	b1e8      	cbz	r0, 8007898 <__d2b+0x80>
 800785c:	f1c0 0320 	rsb	r3, r0, #32
 8007860:	fa02 f303 	lsl.w	r3, r2, r3
 8007864:	430b      	orrs	r3, r1
 8007866:	40c2      	lsrs	r2, r0
 8007868:	6163      	str	r3, [r4, #20]
 800786a:	9201      	str	r2, [sp, #4]
 800786c:	9b01      	ldr	r3, [sp, #4]
 800786e:	61a3      	str	r3, [r4, #24]
 8007870:	2b00      	cmp	r3, #0
 8007872:	bf14      	ite	ne
 8007874:	2202      	movne	r2, #2
 8007876:	2201      	moveq	r2, #1
 8007878:	6122      	str	r2, [r4, #16]
 800787a:	b1bd      	cbz	r5, 80078ac <__d2b+0x94>
 800787c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007880:	4405      	add	r5, r0
 8007882:	603d      	str	r5, [r7, #0]
 8007884:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007888:	6030      	str	r0, [r6, #0]
 800788a:	4620      	mov	r0, r4
 800788c:	b003      	add	sp, #12
 800788e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007896:	e7d6      	b.n	8007846 <__d2b+0x2e>
 8007898:	6161      	str	r1, [r4, #20]
 800789a:	e7e7      	b.n	800786c <__d2b+0x54>
 800789c:	a801      	add	r0, sp, #4
 800789e:	f7ff fd61 	bl	8007364 <__lo0bits>
 80078a2:	9b01      	ldr	r3, [sp, #4]
 80078a4:	6163      	str	r3, [r4, #20]
 80078a6:	3020      	adds	r0, #32
 80078a8:	2201      	movs	r2, #1
 80078aa:	e7e5      	b.n	8007878 <__d2b+0x60>
 80078ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80078b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80078b4:	6038      	str	r0, [r7, #0]
 80078b6:	6918      	ldr	r0, [r3, #16]
 80078b8:	f7ff fd34 	bl	8007324 <__hi0bits>
 80078bc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80078c0:	e7e2      	b.n	8007888 <__d2b+0x70>
 80078c2:	bf00      	nop
 80078c4:	08008f94 	.word	0x08008f94
 80078c8:	08008fa5 	.word	0x08008fa5

080078cc <__ssputs_r>:
 80078cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078d0:	688e      	ldr	r6, [r1, #8]
 80078d2:	461f      	mov	r7, r3
 80078d4:	42be      	cmp	r6, r7
 80078d6:	680b      	ldr	r3, [r1, #0]
 80078d8:	4682      	mov	sl, r0
 80078da:	460c      	mov	r4, r1
 80078dc:	4690      	mov	r8, r2
 80078de:	d82c      	bhi.n	800793a <__ssputs_r+0x6e>
 80078e0:	898a      	ldrh	r2, [r1, #12]
 80078e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078e6:	d026      	beq.n	8007936 <__ssputs_r+0x6a>
 80078e8:	6965      	ldr	r5, [r4, #20]
 80078ea:	6909      	ldr	r1, [r1, #16]
 80078ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078f0:	eba3 0901 	sub.w	r9, r3, r1
 80078f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078f8:	1c7b      	adds	r3, r7, #1
 80078fa:	444b      	add	r3, r9
 80078fc:	106d      	asrs	r5, r5, #1
 80078fe:	429d      	cmp	r5, r3
 8007900:	bf38      	it	cc
 8007902:	461d      	movcc	r5, r3
 8007904:	0553      	lsls	r3, r2, #21
 8007906:	d527      	bpl.n	8007958 <__ssputs_r+0x8c>
 8007908:	4629      	mov	r1, r5
 800790a:	f7ff fbd7 	bl	80070bc <_malloc_r>
 800790e:	4606      	mov	r6, r0
 8007910:	b360      	cbz	r0, 800796c <__ssputs_r+0xa0>
 8007912:	6921      	ldr	r1, [r4, #16]
 8007914:	464a      	mov	r2, r9
 8007916:	f7fe fcd5 	bl	80062c4 <memcpy>
 800791a:	89a3      	ldrh	r3, [r4, #12]
 800791c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007924:	81a3      	strh	r3, [r4, #12]
 8007926:	6126      	str	r6, [r4, #16]
 8007928:	6165      	str	r5, [r4, #20]
 800792a:	444e      	add	r6, r9
 800792c:	eba5 0509 	sub.w	r5, r5, r9
 8007930:	6026      	str	r6, [r4, #0]
 8007932:	60a5      	str	r5, [r4, #8]
 8007934:	463e      	mov	r6, r7
 8007936:	42be      	cmp	r6, r7
 8007938:	d900      	bls.n	800793c <__ssputs_r+0x70>
 800793a:	463e      	mov	r6, r7
 800793c:	6820      	ldr	r0, [r4, #0]
 800793e:	4632      	mov	r2, r6
 8007940:	4641      	mov	r1, r8
 8007942:	f000 f9c9 	bl	8007cd8 <memmove>
 8007946:	68a3      	ldr	r3, [r4, #8]
 8007948:	1b9b      	subs	r3, r3, r6
 800794a:	60a3      	str	r3, [r4, #8]
 800794c:	6823      	ldr	r3, [r4, #0]
 800794e:	4433      	add	r3, r6
 8007950:	6023      	str	r3, [r4, #0]
 8007952:	2000      	movs	r0, #0
 8007954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007958:	462a      	mov	r2, r5
 800795a:	f000 fa2d 	bl	8007db8 <_realloc_r>
 800795e:	4606      	mov	r6, r0
 8007960:	2800      	cmp	r0, #0
 8007962:	d1e0      	bne.n	8007926 <__ssputs_r+0x5a>
 8007964:	6921      	ldr	r1, [r4, #16]
 8007966:	4650      	mov	r0, sl
 8007968:	f7ff fb34 	bl	8006fd4 <_free_r>
 800796c:	230c      	movs	r3, #12
 800796e:	f8ca 3000 	str.w	r3, [sl]
 8007972:	89a3      	ldrh	r3, [r4, #12]
 8007974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007978:	81a3      	strh	r3, [r4, #12]
 800797a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800797e:	e7e9      	b.n	8007954 <__ssputs_r+0x88>

08007980 <_svfiprintf_r>:
 8007980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007984:	4698      	mov	r8, r3
 8007986:	898b      	ldrh	r3, [r1, #12]
 8007988:	061b      	lsls	r3, r3, #24
 800798a:	b09d      	sub	sp, #116	; 0x74
 800798c:	4607      	mov	r7, r0
 800798e:	460d      	mov	r5, r1
 8007990:	4614      	mov	r4, r2
 8007992:	d50e      	bpl.n	80079b2 <_svfiprintf_r+0x32>
 8007994:	690b      	ldr	r3, [r1, #16]
 8007996:	b963      	cbnz	r3, 80079b2 <_svfiprintf_r+0x32>
 8007998:	2140      	movs	r1, #64	; 0x40
 800799a:	f7ff fb8f 	bl	80070bc <_malloc_r>
 800799e:	6028      	str	r0, [r5, #0]
 80079a0:	6128      	str	r0, [r5, #16]
 80079a2:	b920      	cbnz	r0, 80079ae <_svfiprintf_r+0x2e>
 80079a4:	230c      	movs	r3, #12
 80079a6:	603b      	str	r3, [r7, #0]
 80079a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079ac:	e0d0      	b.n	8007b50 <_svfiprintf_r+0x1d0>
 80079ae:	2340      	movs	r3, #64	; 0x40
 80079b0:	616b      	str	r3, [r5, #20]
 80079b2:	2300      	movs	r3, #0
 80079b4:	9309      	str	r3, [sp, #36]	; 0x24
 80079b6:	2320      	movs	r3, #32
 80079b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80079c0:	2330      	movs	r3, #48	; 0x30
 80079c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007b68 <_svfiprintf_r+0x1e8>
 80079c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079ca:	f04f 0901 	mov.w	r9, #1
 80079ce:	4623      	mov	r3, r4
 80079d0:	469a      	mov	sl, r3
 80079d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079d6:	b10a      	cbz	r2, 80079dc <_svfiprintf_r+0x5c>
 80079d8:	2a25      	cmp	r2, #37	; 0x25
 80079da:	d1f9      	bne.n	80079d0 <_svfiprintf_r+0x50>
 80079dc:	ebba 0b04 	subs.w	fp, sl, r4
 80079e0:	d00b      	beq.n	80079fa <_svfiprintf_r+0x7a>
 80079e2:	465b      	mov	r3, fp
 80079e4:	4622      	mov	r2, r4
 80079e6:	4629      	mov	r1, r5
 80079e8:	4638      	mov	r0, r7
 80079ea:	f7ff ff6f 	bl	80078cc <__ssputs_r>
 80079ee:	3001      	adds	r0, #1
 80079f0:	f000 80a9 	beq.w	8007b46 <_svfiprintf_r+0x1c6>
 80079f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079f6:	445a      	add	r2, fp
 80079f8:	9209      	str	r2, [sp, #36]	; 0x24
 80079fa:	f89a 3000 	ldrb.w	r3, [sl]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f000 80a1 	beq.w	8007b46 <_svfiprintf_r+0x1c6>
 8007a04:	2300      	movs	r3, #0
 8007a06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a0e:	f10a 0a01 	add.w	sl, sl, #1
 8007a12:	9304      	str	r3, [sp, #16]
 8007a14:	9307      	str	r3, [sp, #28]
 8007a16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a1a:	931a      	str	r3, [sp, #104]	; 0x68
 8007a1c:	4654      	mov	r4, sl
 8007a1e:	2205      	movs	r2, #5
 8007a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a24:	4850      	ldr	r0, [pc, #320]	; (8007b68 <_svfiprintf_r+0x1e8>)
 8007a26:	f7f8 fbdb 	bl	80001e0 <memchr>
 8007a2a:	9a04      	ldr	r2, [sp, #16]
 8007a2c:	b9d8      	cbnz	r0, 8007a66 <_svfiprintf_r+0xe6>
 8007a2e:	06d0      	lsls	r0, r2, #27
 8007a30:	bf44      	itt	mi
 8007a32:	2320      	movmi	r3, #32
 8007a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a38:	0711      	lsls	r1, r2, #28
 8007a3a:	bf44      	itt	mi
 8007a3c:	232b      	movmi	r3, #43	; 0x2b
 8007a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a42:	f89a 3000 	ldrb.w	r3, [sl]
 8007a46:	2b2a      	cmp	r3, #42	; 0x2a
 8007a48:	d015      	beq.n	8007a76 <_svfiprintf_r+0xf6>
 8007a4a:	9a07      	ldr	r2, [sp, #28]
 8007a4c:	4654      	mov	r4, sl
 8007a4e:	2000      	movs	r0, #0
 8007a50:	f04f 0c0a 	mov.w	ip, #10
 8007a54:	4621      	mov	r1, r4
 8007a56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a5a:	3b30      	subs	r3, #48	; 0x30
 8007a5c:	2b09      	cmp	r3, #9
 8007a5e:	d94d      	bls.n	8007afc <_svfiprintf_r+0x17c>
 8007a60:	b1b0      	cbz	r0, 8007a90 <_svfiprintf_r+0x110>
 8007a62:	9207      	str	r2, [sp, #28]
 8007a64:	e014      	b.n	8007a90 <_svfiprintf_r+0x110>
 8007a66:	eba0 0308 	sub.w	r3, r0, r8
 8007a6a:	fa09 f303 	lsl.w	r3, r9, r3
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	9304      	str	r3, [sp, #16]
 8007a72:	46a2      	mov	sl, r4
 8007a74:	e7d2      	b.n	8007a1c <_svfiprintf_r+0x9c>
 8007a76:	9b03      	ldr	r3, [sp, #12]
 8007a78:	1d19      	adds	r1, r3, #4
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	9103      	str	r1, [sp, #12]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	bfbb      	ittet	lt
 8007a82:	425b      	neglt	r3, r3
 8007a84:	f042 0202 	orrlt.w	r2, r2, #2
 8007a88:	9307      	strge	r3, [sp, #28]
 8007a8a:	9307      	strlt	r3, [sp, #28]
 8007a8c:	bfb8      	it	lt
 8007a8e:	9204      	strlt	r2, [sp, #16]
 8007a90:	7823      	ldrb	r3, [r4, #0]
 8007a92:	2b2e      	cmp	r3, #46	; 0x2e
 8007a94:	d10c      	bne.n	8007ab0 <_svfiprintf_r+0x130>
 8007a96:	7863      	ldrb	r3, [r4, #1]
 8007a98:	2b2a      	cmp	r3, #42	; 0x2a
 8007a9a:	d134      	bne.n	8007b06 <_svfiprintf_r+0x186>
 8007a9c:	9b03      	ldr	r3, [sp, #12]
 8007a9e:	1d1a      	adds	r2, r3, #4
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	9203      	str	r2, [sp, #12]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	bfb8      	it	lt
 8007aa8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007aac:	3402      	adds	r4, #2
 8007aae:	9305      	str	r3, [sp, #20]
 8007ab0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007b78 <_svfiprintf_r+0x1f8>
 8007ab4:	7821      	ldrb	r1, [r4, #0]
 8007ab6:	2203      	movs	r2, #3
 8007ab8:	4650      	mov	r0, sl
 8007aba:	f7f8 fb91 	bl	80001e0 <memchr>
 8007abe:	b138      	cbz	r0, 8007ad0 <_svfiprintf_r+0x150>
 8007ac0:	9b04      	ldr	r3, [sp, #16]
 8007ac2:	eba0 000a 	sub.w	r0, r0, sl
 8007ac6:	2240      	movs	r2, #64	; 0x40
 8007ac8:	4082      	lsls	r2, r0
 8007aca:	4313      	orrs	r3, r2
 8007acc:	3401      	adds	r4, #1
 8007ace:	9304      	str	r3, [sp, #16]
 8007ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ad4:	4825      	ldr	r0, [pc, #148]	; (8007b6c <_svfiprintf_r+0x1ec>)
 8007ad6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ada:	2206      	movs	r2, #6
 8007adc:	f7f8 fb80 	bl	80001e0 <memchr>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	d038      	beq.n	8007b56 <_svfiprintf_r+0x1d6>
 8007ae4:	4b22      	ldr	r3, [pc, #136]	; (8007b70 <_svfiprintf_r+0x1f0>)
 8007ae6:	bb1b      	cbnz	r3, 8007b30 <_svfiprintf_r+0x1b0>
 8007ae8:	9b03      	ldr	r3, [sp, #12]
 8007aea:	3307      	adds	r3, #7
 8007aec:	f023 0307 	bic.w	r3, r3, #7
 8007af0:	3308      	adds	r3, #8
 8007af2:	9303      	str	r3, [sp, #12]
 8007af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007af6:	4433      	add	r3, r6
 8007af8:	9309      	str	r3, [sp, #36]	; 0x24
 8007afa:	e768      	b.n	80079ce <_svfiprintf_r+0x4e>
 8007afc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b00:	460c      	mov	r4, r1
 8007b02:	2001      	movs	r0, #1
 8007b04:	e7a6      	b.n	8007a54 <_svfiprintf_r+0xd4>
 8007b06:	2300      	movs	r3, #0
 8007b08:	3401      	adds	r4, #1
 8007b0a:	9305      	str	r3, [sp, #20]
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	f04f 0c0a 	mov.w	ip, #10
 8007b12:	4620      	mov	r0, r4
 8007b14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b18:	3a30      	subs	r2, #48	; 0x30
 8007b1a:	2a09      	cmp	r2, #9
 8007b1c:	d903      	bls.n	8007b26 <_svfiprintf_r+0x1a6>
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d0c6      	beq.n	8007ab0 <_svfiprintf_r+0x130>
 8007b22:	9105      	str	r1, [sp, #20]
 8007b24:	e7c4      	b.n	8007ab0 <_svfiprintf_r+0x130>
 8007b26:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e7f0      	b.n	8007b12 <_svfiprintf_r+0x192>
 8007b30:	ab03      	add	r3, sp, #12
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	462a      	mov	r2, r5
 8007b36:	4b0f      	ldr	r3, [pc, #60]	; (8007b74 <_svfiprintf_r+0x1f4>)
 8007b38:	a904      	add	r1, sp, #16
 8007b3a:	4638      	mov	r0, r7
 8007b3c:	f7fd fe6a 	bl	8005814 <_printf_float>
 8007b40:	1c42      	adds	r2, r0, #1
 8007b42:	4606      	mov	r6, r0
 8007b44:	d1d6      	bne.n	8007af4 <_svfiprintf_r+0x174>
 8007b46:	89ab      	ldrh	r3, [r5, #12]
 8007b48:	065b      	lsls	r3, r3, #25
 8007b4a:	f53f af2d 	bmi.w	80079a8 <_svfiprintf_r+0x28>
 8007b4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b50:	b01d      	add	sp, #116	; 0x74
 8007b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b56:	ab03      	add	r3, sp, #12
 8007b58:	9300      	str	r3, [sp, #0]
 8007b5a:	462a      	mov	r2, r5
 8007b5c:	4b05      	ldr	r3, [pc, #20]	; (8007b74 <_svfiprintf_r+0x1f4>)
 8007b5e:	a904      	add	r1, sp, #16
 8007b60:	4638      	mov	r0, r7
 8007b62:	f7fe f8fb 	bl	8005d5c <_printf_i>
 8007b66:	e7eb      	b.n	8007b40 <_svfiprintf_r+0x1c0>
 8007b68:	080090fc 	.word	0x080090fc
 8007b6c:	08009106 	.word	0x08009106
 8007b70:	08005815 	.word	0x08005815
 8007b74:	080078cd 	.word	0x080078cd
 8007b78:	08009102 	.word	0x08009102

08007b7c <__sflush_r>:
 8007b7c:	898a      	ldrh	r2, [r1, #12]
 8007b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b82:	4605      	mov	r5, r0
 8007b84:	0710      	lsls	r0, r2, #28
 8007b86:	460c      	mov	r4, r1
 8007b88:	d458      	bmi.n	8007c3c <__sflush_r+0xc0>
 8007b8a:	684b      	ldr	r3, [r1, #4]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	dc05      	bgt.n	8007b9c <__sflush_r+0x20>
 8007b90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	dc02      	bgt.n	8007b9c <__sflush_r+0x20>
 8007b96:	2000      	movs	r0, #0
 8007b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b9e:	2e00      	cmp	r6, #0
 8007ba0:	d0f9      	beq.n	8007b96 <__sflush_r+0x1a>
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ba8:	682f      	ldr	r7, [r5, #0]
 8007baa:	6a21      	ldr	r1, [r4, #32]
 8007bac:	602b      	str	r3, [r5, #0]
 8007bae:	d032      	beq.n	8007c16 <__sflush_r+0x9a>
 8007bb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007bb2:	89a3      	ldrh	r3, [r4, #12]
 8007bb4:	075a      	lsls	r2, r3, #29
 8007bb6:	d505      	bpl.n	8007bc4 <__sflush_r+0x48>
 8007bb8:	6863      	ldr	r3, [r4, #4]
 8007bba:	1ac0      	subs	r0, r0, r3
 8007bbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bbe:	b10b      	cbz	r3, 8007bc4 <__sflush_r+0x48>
 8007bc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bc2:	1ac0      	subs	r0, r0, r3
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bca:	6a21      	ldr	r1, [r4, #32]
 8007bcc:	4628      	mov	r0, r5
 8007bce:	47b0      	blx	r6
 8007bd0:	1c43      	adds	r3, r0, #1
 8007bd2:	89a3      	ldrh	r3, [r4, #12]
 8007bd4:	d106      	bne.n	8007be4 <__sflush_r+0x68>
 8007bd6:	6829      	ldr	r1, [r5, #0]
 8007bd8:	291d      	cmp	r1, #29
 8007bda:	d82b      	bhi.n	8007c34 <__sflush_r+0xb8>
 8007bdc:	4a29      	ldr	r2, [pc, #164]	; (8007c84 <__sflush_r+0x108>)
 8007bde:	410a      	asrs	r2, r1
 8007be0:	07d6      	lsls	r6, r2, #31
 8007be2:	d427      	bmi.n	8007c34 <__sflush_r+0xb8>
 8007be4:	2200      	movs	r2, #0
 8007be6:	6062      	str	r2, [r4, #4]
 8007be8:	04d9      	lsls	r1, r3, #19
 8007bea:	6922      	ldr	r2, [r4, #16]
 8007bec:	6022      	str	r2, [r4, #0]
 8007bee:	d504      	bpl.n	8007bfa <__sflush_r+0x7e>
 8007bf0:	1c42      	adds	r2, r0, #1
 8007bf2:	d101      	bne.n	8007bf8 <__sflush_r+0x7c>
 8007bf4:	682b      	ldr	r3, [r5, #0]
 8007bf6:	b903      	cbnz	r3, 8007bfa <__sflush_r+0x7e>
 8007bf8:	6560      	str	r0, [r4, #84]	; 0x54
 8007bfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bfc:	602f      	str	r7, [r5, #0]
 8007bfe:	2900      	cmp	r1, #0
 8007c00:	d0c9      	beq.n	8007b96 <__sflush_r+0x1a>
 8007c02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c06:	4299      	cmp	r1, r3
 8007c08:	d002      	beq.n	8007c10 <__sflush_r+0x94>
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	f7ff f9e2 	bl	8006fd4 <_free_r>
 8007c10:	2000      	movs	r0, #0
 8007c12:	6360      	str	r0, [r4, #52]	; 0x34
 8007c14:	e7c0      	b.n	8007b98 <__sflush_r+0x1c>
 8007c16:	2301      	movs	r3, #1
 8007c18:	4628      	mov	r0, r5
 8007c1a:	47b0      	blx	r6
 8007c1c:	1c41      	adds	r1, r0, #1
 8007c1e:	d1c8      	bne.n	8007bb2 <__sflush_r+0x36>
 8007c20:	682b      	ldr	r3, [r5, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d0c5      	beq.n	8007bb2 <__sflush_r+0x36>
 8007c26:	2b1d      	cmp	r3, #29
 8007c28:	d001      	beq.n	8007c2e <__sflush_r+0xb2>
 8007c2a:	2b16      	cmp	r3, #22
 8007c2c:	d101      	bne.n	8007c32 <__sflush_r+0xb6>
 8007c2e:	602f      	str	r7, [r5, #0]
 8007c30:	e7b1      	b.n	8007b96 <__sflush_r+0x1a>
 8007c32:	89a3      	ldrh	r3, [r4, #12]
 8007c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c38:	81a3      	strh	r3, [r4, #12]
 8007c3a:	e7ad      	b.n	8007b98 <__sflush_r+0x1c>
 8007c3c:	690f      	ldr	r7, [r1, #16]
 8007c3e:	2f00      	cmp	r7, #0
 8007c40:	d0a9      	beq.n	8007b96 <__sflush_r+0x1a>
 8007c42:	0793      	lsls	r3, r2, #30
 8007c44:	680e      	ldr	r6, [r1, #0]
 8007c46:	bf08      	it	eq
 8007c48:	694b      	ldreq	r3, [r1, #20]
 8007c4a:	600f      	str	r7, [r1, #0]
 8007c4c:	bf18      	it	ne
 8007c4e:	2300      	movne	r3, #0
 8007c50:	eba6 0807 	sub.w	r8, r6, r7
 8007c54:	608b      	str	r3, [r1, #8]
 8007c56:	f1b8 0f00 	cmp.w	r8, #0
 8007c5a:	dd9c      	ble.n	8007b96 <__sflush_r+0x1a>
 8007c5c:	6a21      	ldr	r1, [r4, #32]
 8007c5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c60:	4643      	mov	r3, r8
 8007c62:	463a      	mov	r2, r7
 8007c64:	4628      	mov	r0, r5
 8007c66:	47b0      	blx	r6
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	dc06      	bgt.n	8007c7a <__sflush_r+0xfe>
 8007c6c:	89a3      	ldrh	r3, [r4, #12]
 8007c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c72:	81a3      	strh	r3, [r4, #12]
 8007c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c78:	e78e      	b.n	8007b98 <__sflush_r+0x1c>
 8007c7a:	4407      	add	r7, r0
 8007c7c:	eba8 0800 	sub.w	r8, r8, r0
 8007c80:	e7e9      	b.n	8007c56 <__sflush_r+0xda>
 8007c82:	bf00      	nop
 8007c84:	dfbffffe 	.word	0xdfbffffe

08007c88 <_fflush_r>:
 8007c88:	b538      	push	{r3, r4, r5, lr}
 8007c8a:	690b      	ldr	r3, [r1, #16]
 8007c8c:	4605      	mov	r5, r0
 8007c8e:	460c      	mov	r4, r1
 8007c90:	b913      	cbnz	r3, 8007c98 <_fflush_r+0x10>
 8007c92:	2500      	movs	r5, #0
 8007c94:	4628      	mov	r0, r5
 8007c96:	bd38      	pop	{r3, r4, r5, pc}
 8007c98:	b118      	cbz	r0, 8007ca2 <_fflush_r+0x1a>
 8007c9a:	6a03      	ldr	r3, [r0, #32]
 8007c9c:	b90b      	cbnz	r3, 8007ca2 <_fflush_r+0x1a>
 8007c9e:	f7fe f9f9 	bl	8006094 <__sinit>
 8007ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d0f3      	beq.n	8007c92 <_fflush_r+0xa>
 8007caa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007cac:	07d0      	lsls	r0, r2, #31
 8007cae:	d404      	bmi.n	8007cba <_fflush_r+0x32>
 8007cb0:	0599      	lsls	r1, r3, #22
 8007cb2:	d402      	bmi.n	8007cba <_fflush_r+0x32>
 8007cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cb6:	f7fe fb03 	bl	80062c0 <__retarget_lock_acquire_recursive>
 8007cba:	4628      	mov	r0, r5
 8007cbc:	4621      	mov	r1, r4
 8007cbe:	f7ff ff5d 	bl	8007b7c <__sflush_r>
 8007cc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cc4:	07da      	lsls	r2, r3, #31
 8007cc6:	4605      	mov	r5, r0
 8007cc8:	d4e4      	bmi.n	8007c94 <_fflush_r+0xc>
 8007cca:	89a3      	ldrh	r3, [r4, #12]
 8007ccc:	059b      	lsls	r3, r3, #22
 8007cce:	d4e1      	bmi.n	8007c94 <_fflush_r+0xc>
 8007cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cd2:	f7fe faf6 	bl	80062c2 <__retarget_lock_release_recursive>
 8007cd6:	e7dd      	b.n	8007c94 <_fflush_r+0xc>

08007cd8 <memmove>:
 8007cd8:	4288      	cmp	r0, r1
 8007cda:	b510      	push	{r4, lr}
 8007cdc:	eb01 0402 	add.w	r4, r1, r2
 8007ce0:	d902      	bls.n	8007ce8 <memmove+0x10>
 8007ce2:	4284      	cmp	r4, r0
 8007ce4:	4623      	mov	r3, r4
 8007ce6:	d807      	bhi.n	8007cf8 <memmove+0x20>
 8007ce8:	1e43      	subs	r3, r0, #1
 8007cea:	42a1      	cmp	r1, r4
 8007cec:	d008      	beq.n	8007d00 <memmove+0x28>
 8007cee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007cf6:	e7f8      	b.n	8007cea <memmove+0x12>
 8007cf8:	4402      	add	r2, r0
 8007cfa:	4601      	mov	r1, r0
 8007cfc:	428a      	cmp	r2, r1
 8007cfe:	d100      	bne.n	8007d02 <memmove+0x2a>
 8007d00:	bd10      	pop	{r4, pc}
 8007d02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d0a:	e7f7      	b.n	8007cfc <memmove+0x24>

08007d0c <_sbrk_r>:
 8007d0c:	b538      	push	{r3, r4, r5, lr}
 8007d0e:	4d06      	ldr	r5, [pc, #24]	; (8007d28 <_sbrk_r+0x1c>)
 8007d10:	2300      	movs	r3, #0
 8007d12:	4604      	mov	r4, r0
 8007d14:	4608      	mov	r0, r1
 8007d16:	602b      	str	r3, [r5, #0]
 8007d18:	f7fa ff3e 	bl	8002b98 <_sbrk>
 8007d1c:	1c43      	adds	r3, r0, #1
 8007d1e:	d102      	bne.n	8007d26 <_sbrk_r+0x1a>
 8007d20:	682b      	ldr	r3, [r5, #0]
 8007d22:	b103      	cbz	r3, 8007d26 <_sbrk_r+0x1a>
 8007d24:	6023      	str	r3, [r4, #0]
 8007d26:	bd38      	pop	{r3, r4, r5, pc}
 8007d28:	20000484 	.word	0x20000484

08007d2c <__assert_func>:
 8007d2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d2e:	4614      	mov	r4, r2
 8007d30:	461a      	mov	r2, r3
 8007d32:	4b09      	ldr	r3, [pc, #36]	; (8007d58 <__assert_func+0x2c>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4605      	mov	r5, r0
 8007d38:	68d8      	ldr	r0, [r3, #12]
 8007d3a:	b14c      	cbz	r4, 8007d50 <__assert_func+0x24>
 8007d3c:	4b07      	ldr	r3, [pc, #28]	; (8007d5c <__assert_func+0x30>)
 8007d3e:	9100      	str	r1, [sp, #0]
 8007d40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d44:	4906      	ldr	r1, [pc, #24]	; (8007d60 <__assert_func+0x34>)
 8007d46:	462b      	mov	r3, r5
 8007d48:	f000 f872 	bl	8007e30 <fiprintf>
 8007d4c:	f000 f882 	bl	8007e54 <abort>
 8007d50:	4b04      	ldr	r3, [pc, #16]	; (8007d64 <__assert_func+0x38>)
 8007d52:	461c      	mov	r4, r3
 8007d54:	e7f3      	b.n	8007d3e <__assert_func+0x12>
 8007d56:	bf00      	nop
 8007d58:	20000070 	.word	0x20000070
 8007d5c:	08009117 	.word	0x08009117
 8007d60:	08009124 	.word	0x08009124
 8007d64:	08009152 	.word	0x08009152

08007d68 <_calloc_r>:
 8007d68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d6a:	fba1 2402 	umull	r2, r4, r1, r2
 8007d6e:	b94c      	cbnz	r4, 8007d84 <_calloc_r+0x1c>
 8007d70:	4611      	mov	r1, r2
 8007d72:	9201      	str	r2, [sp, #4]
 8007d74:	f7ff f9a2 	bl	80070bc <_malloc_r>
 8007d78:	9a01      	ldr	r2, [sp, #4]
 8007d7a:	4605      	mov	r5, r0
 8007d7c:	b930      	cbnz	r0, 8007d8c <_calloc_r+0x24>
 8007d7e:	4628      	mov	r0, r5
 8007d80:	b003      	add	sp, #12
 8007d82:	bd30      	pop	{r4, r5, pc}
 8007d84:	220c      	movs	r2, #12
 8007d86:	6002      	str	r2, [r0, #0]
 8007d88:	2500      	movs	r5, #0
 8007d8a:	e7f8      	b.n	8007d7e <_calloc_r+0x16>
 8007d8c:	4621      	mov	r1, r4
 8007d8e:	f7fe fa1a 	bl	80061c6 <memset>
 8007d92:	e7f4      	b.n	8007d7e <_calloc_r+0x16>

08007d94 <__ascii_mbtowc>:
 8007d94:	b082      	sub	sp, #8
 8007d96:	b901      	cbnz	r1, 8007d9a <__ascii_mbtowc+0x6>
 8007d98:	a901      	add	r1, sp, #4
 8007d9a:	b142      	cbz	r2, 8007dae <__ascii_mbtowc+0x1a>
 8007d9c:	b14b      	cbz	r3, 8007db2 <__ascii_mbtowc+0x1e>
 8007d9e:	7813      	ldrb	r3, [r2, #0]
 8007da0:	600b      	str	r3, [r1, #0]
 8007da2:	7812      	ldrb	r2, [r2, #0]
 8007da4:	1e10      	subs	r0, r2, #0
 8007da6:	bf18      	it	ne
 8007da8:	2001      	movne	r0, #1
 8007daa:	b002      	add	sp, #8
 8007dac:	4770      	bx	lr
 8007dae:	4610      	mov	r0, r2
 8007db0:	e7fb      	b.n	8007daa <__ascii_mbtowc+0x16>
 8007db2:	f06f 0001 	mvn.w	r0, #1
 8007db6:	e7f8      	b.n	8007daa <__ascii_mbtowc+0x16>

08007db8 <_realloc_r>:
 8007db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dbc:	4680      	mov	r8, r0
 8007dbe:	4614      	mov	r4, r2
 8007dc0:	460e      	mov	r6, r1
 8007dc2:	b921      	cbnz	r1, 8007dce <_realloc_r+0x16>
 8007dc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc8:	4611      	mov	r1, r2
 8007dca:	f7ff b977 	b.w	80070bc <_malloc_r>
 8007dce:	b92a      	cbnz	r2, 8007ddc <_realloc_r+0x24>
 8007dd0:	f7ff f900 	bl	8006fd4 <_free_r>
 8007dd4:	4625      	mov	r5, r4
 8007dd6:	4628      	mov	r0, r5
 8007dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ddc:	f000 f841 	bl	8007e62 <_malloc_usable_size_r>
 8007de0:	4284      	cmp	r4, r0
 8007de2:	4607      	mov	r7, r0
 8007de4:	d802      	bhi.n	8007dec <_realloc_r+0x34>
 8007de6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007dea:	d812      	bhi.n	8007e12 <_realloc_r+0x5a>
 8007dec:	4621      	mov	r1, r4
 8007dee:	4640      	mov	r0, r8
 8007df0:	f7ff f964 	bl	80070bc <_malloc_r>
 8007df4:	4605      	mov	r5, r0
 8007df6:	2800      	cmp	r0, #0
 8007df8:	d0ed      	beq.n	8007dd6 <_realloc_r+0x1e>
 8007dfa:	42bc      	cmp	r4, r7
 8007dfc:	4622      	mov	r2, r4
 8007dfe:	4631      	mov	r1, r6
 8007e00:	bf28      	it	cs
 8007e02:	463a      	movcs	r2, r7
 8007e04:	f7fe fa5e 	bl	80062c4 <memcpy>
 8007e08:	4631      	mov	r1, r6
 8007e0a:	4640      	mov	r0, r8
 8007e0c:	f7ff f8e2 	bl	8006fd4 <_free_r>
 8007e10:	e7e1      	b.n	8007dd6 <_realloc_r+0x1e>
 8007e12:	4635      	mov	r5, r6
 8007e14:	e7df      	b.n	8007dd6 <_realloc_r+0x1e>

08007e16 <__ascii_wctomb>:
 8007e16:	b149      	cbz	r1, 8007e2c <__ascii_wctomb+0x16>
 8007e18:	2aff      	cmp	r2, #255	; 0xff
 8007e1a:	bf85      	ittet	hi
 8007e1c:	238a      	movhi	r3, #138	; 0x8a
 8007e1e:	6003      	strhi	r3, [r0, #0]
 8007e20:	700a      	strbls	r2, [r1, #0]
 8007e22:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007e26:	bf98      	it	ls
 8007e28:	2001      	movls	r0, #1
 8007e2a:	4770      	bx	lr
 8007e2c:	4608      	mov	r0, r1
 8007e2e:	4770      	bx	lr

08007e30 <fiprintf>:
 8007e30:	b40e      	push	{r1, r2, r3}
 8007e32:	b503      	push	{r0, r1, lr}
 8007e34:	4601      	mov	r1, r0
 8007e36:	ab03      	add	r3, sp, #12
 8007e38:	4805      	ldr	r0, [pc, #20]	; (8007e50 <fiprintf+0x20>)
 8007e3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e3e:	6800      	ldr	r0, [r0, #0]
 8007e40:	9301      	str	r3, [sp, #4]
 8007e42:	f000 f83f 	bl	8007ec4 <_vfiprintf_r>
 8007e46:	b002      	add	sp, #8
 8007e48:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e4c:	b003      	add	sp, #12
 8007e4e:	4770      	bx	lr
 8007e50:	20000070 	.word	0x20000070

08007e54 <abort>:
 8007e54:	b508      	push	{r3, lr}
 8007e56:	2006      	movs	r0, #6
 8007e58:	f000 fa0c 	bl	8008274 <raise>
 8007e5c:	2001      	movs	r0, #1
 8007e5e:	f7fa fe23 	bl	8002aa8 <_exit>

08007e62 <_malloc_usable_size_r>:
 8007e62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e66:	1f18      	subs	r0, r3, #4
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	bfbc      	itt	lt
 8007e6c:	580b      	ldrlt	r3, [r1, r0]
 8007e6e:	18c0      	addlt	r0, r0, r3
 8007e70:	4770      	bx	lr

08007e72 <__sfputc_r>:
 8007e72:	6893      	ldr	r3, [r2, #8]
 8007e74:	3b01      	subs	r3, #1
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	b410      	push	{r4}
 8007e7a:	6093      	str	r3, [r2, #8]
 8007e7c:	da08      	bge.n	8007e90 <__sfputc_r+0x1e>
 8007e7e:	6994      	ldr	r4, [r2, #24]
 8007e80:	42a3      	cmp	r3, r4
 8007e82:	db01      	blt.n	8007e88 <__sfputc_r+0x16>
 8007e84:	290a      	cmp	r1, #10
 8007e86:	d103      	bne.n	8007e90 <__sfputc_r+0x1e>
 8007e88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e8c:	f000 b934 	b.w	80080f8 <__swbuf_r>
 8007e90:	6813      	ldr	r3, [r2, #0]
 8007e92:	1c58      	adds	r0, r3, #1
 8007e94:	6010      	str	r0, [r2, #0]
 8007e96:	7019      	strb	r1, [r3, #0]
 8007e98:	4608      	mov	r0, r1
 8007e9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <__sfputs_r>:
 8007ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ea2:	4606      	mov	r6, r0
 8007ea4:	460f      	mov	r7, r1
 8007ea6:	4614      	mov	r4, r2
 8007ea8:	18d5      	adds	r5, r2, r3
 8007eaa:	42ac      	cmp	r4, r5
 8007eac:	d101      	bne.n	8007eb2 <__sfputs_r+0x12>
 8007eae:	2000      	movs	r0, #0
 8007eb0:	e007      	b.n	8007ec2 <__sfputs_r+0x22>
 8007eb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eb6:	463a      	mov	r2, r7
 8007eb8:	4630      	mov	r0, r6
 8007eba:	f7ff ffda 	bl	8007e72 <__sfputc_r>
 8007ebe:	1c43      	adds	r3, r0, #1
 8007ec0:	d1f3      	bne.n	8007eaa <__sfputs_r+0xa>
 8007ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ec4 <_vfiprintf_r>:
 8007ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec8:	460d      	mov	r5, r1
 8007eca:	b09d      	sub	sp, #116	; 0x74
 8007ecc:	4614      	mov	r4, r2
 8007ece:	4698      	mov	r8, r3
 8007ed0:	4606      	mov	r6, r0
 8007ed2:	b118      	cbz	r0, 8007edc <_vfiprintf_r+0x18>
 8007ed4:	6a03      	ldr	r3, [r0, #32]
 8007ed6:	b90b      	cbnz	r3, 8007edc <_vfiprintf_r+0x18>
 8007ed8:	f7fe f8dc 	bl	8006094 <__sinit>
 8007edc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ede:	07d9      	lsls	r1, r3, #31
 8007ee0:	d405      	bmi.n	8007eee <_vfiprintf_r+0x2a>
 8007ee2:	89ab      	ldrh	r3, [r5, #12]
 8007ee4:	059a      	lsls	r2, r3, #22
 8007ee6:	d402      	bmi.n	8007eee <_vfiprintf_r+0x2a>
 8007ee8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007eea:	f7fe f9e9 	bl	80062c0 <__retarget_lock_acquire_recursive>
 8007eee:	89ab      	ldrh	r3, [r5, #12]
 8007ef0:	071b      	lsls	r3, r3, #28
 8007ef2:	d501      	bpl.n	8007ef8 <_vfiprintf_r+0x34>
 8007ef4:	692b      	ldr	r3, [r5, #16]
 8007ef6:	b99b      	cbnz	r3, 8007f20 <_vfiprintf_r+0x5c>
 8007ef8:	4629      	mov	r1, r5
 8007efa:	4630      	mov	r0, r6
 8007efc:	f000 f93a 	bl	8008174 <__swsetup_r>
 8007f00:	b170      	cbz	r0, 8007f20 <_vfiprintf_r+0x5c>
 8007f02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f04:	07dc      	lsls	r4, r3, #31
 8007f06:	d504      	bpl.n	8007f12 <_vfiprintf_r+0x4e>
 8007f08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f0c:	b01d      	add	sp, #116	; 0x74
 8007f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f12:	89ab      	ldrh	r3, [r5, #12]
 8007f14:	0598      	lsls	r0, r3, #22
 8007f16:	d4f7      	bmi.n	8007f08 <_vfiprintf_r+0x44>
 8007f18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f1a:	f7fe f9d2 	bl	80062c2 <__retarget_lock_release_recursive>
 8007f1e:	e7f3      	b.n	8007f08 <_vfiprintf_r+0x44>
 8007f20:	2300      	movs	r3, #0
 8007f22:	9309      	str	r3, [sp, #36]	; 0x24
 8007f24:	2320      	movs	r3, #32
 8007f26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f2e:	2330      	movs	r3, #48	; 0x30
 8007f30:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80080e4 <_vfiprintf_r+0x220>
 8007f34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f38:	f04f 0901 	mov.w	r9, #1
 8007f3c:	4623      	mov	r3, r4
 8007f3e:	469a      	mov	sl, r3
 8007f40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f44:	b10a      	cbz	r2, 8007f4a <_vfiprintf_r+0x86>
 8007f46:	2a25      	cmp	r2, #37	; 0x25
 8007f48:	d1f9      	bne.n	8007f3e <_vfiprintf_r+0x7a>
 8007f4a:	ebba 0b04 	subs.w	fp, sl, r4
 8007f4e:	d00b      	beq.n	8007f68 <_vfiprintf_r+0xa4>
 8007f50:	465b      	mov	r3, fp
 8007f52:	4622      	mov	r2, r4
 8007f54:	4629      	mov	r1, r5
 8007f56:	4630      	mov	r0, r6
 8007f58:	f7ff ffa2 	bl	8007ea0 <__sfputs_r>
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	f000 80a9 	beq.w	80080b4 <_vfiprintf_r+0x1f0>
 8007f62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f64:	445a      	add	r2, fp
 8007f66:	9209      	str	r2, [sp, #36]	; 0x24
 8007f68:	f89a 3000 	ldrb.w	r3, [sl]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f000 80a1 	beq.w	80080b4 <_vfiprintf_r+0x1f0>
 8007f72:	2300      	movs	r3, #0
 8007f74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f7c:	f10a 0a01 	add.w	sl, sl, #1
 8007f80:	9304      	str	r3, [sp, #16]
 8007f82:	9307      	str	r3, [sp, #28]
 8007f84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f88:	931a      	str	r3, [sp, #104]	; 0x68
 8007f8a:	4654      	mov	r4, sl
 8007f8c:	2205      	movs	r2, #5
 8007f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f92:	4854      	ldr	r0, [pc, #336]	; (80080e4 <_vfiprintf_r+0x220>)
 8007f94:	f7f8 f924 	bl	80001e0 <memchr>
 8007f98:	9a04      	ldr	r2, [sp, #16]
 8007f9a:	b9d8      	cbnz	r0, 8007fd4 <_vfiprintf_r+0x110>
 8007f9c:	06d1      	lsls	r1, r2, #27
 8007f9e:	bf44      	itt	mi
 8007fa0:	2320      	movmi	r3, #32
 8007fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fa6:	0713      	lsls	r3, r2, #28
 8007fa8:	bf44      	itt	mi
 8007faa:	232b      	movmi	r3, #43	; 0x2b
 8007fac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8007fb4:	2b2a      	cmp	r3, #42	; 0x2a
 8007fb6:	d015      	beq.n	8007fe4 <_vfiprintf_r+0x120>
 8007fb8:	9a07      	ldr	r2, [sp, #28]
 8007fba:	4654      	mov	r4, sl
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	f04f 0c0a 	mov.w	ip, #10
 8007fc2:	4621      	mov	r1, r4
 8007fc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fc8:	3b30      	subs	r3, #48	; 0x30
 8007fca:	2b09      	cmp	r3, #9
 8007fcc:	d94d      	bls.n	800806a <_vfiprintf_r+0x1a6>
 8007fce:	b1b0      	cbz	r0, 8007ffe <_vfiprintf_r+0x13a>
 8007fd0:	9207      	str	r2, [sp, #28]
 8007fd2:	e014      	b.n	8007ffe <_vfiprintf_r+0x13a>
 8007fd4:	eba0 0308 	sub.w	r3, r0, r8
 8007fd8:	fa09 f303 	lsl.w	r3, r9, r3
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	9304      	str	r3, [sp, #16]
 8007fe0:	46a2      	mov	sl, r4
 8007fe2:	e7d2      	b.n	8007f8a <_vfiprintf_r+0xc6>
 8007fe4:	9b03      	ldr	r3, [sp, #12]
 8007fe6:	1d19      	adds	r1, r3, #4
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	9103      	str	r1, [sp, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	bfbb      	ittet	lt
 8007ff0:	425b      	neglt	r3, r3
 8007ff2:	f042 0202 	orrlt.w	r2, r2, #2
 8007ff6:	9307      	strge	r3, [sp, #28]
 8007ff8:	9307      	strlt	r3, [sp, #28]
 8007ffa:	bfb8      	it	lt
 8007ffc:	9204      	strlt	r2, [sp, #16]
 8007ffe:	7823      	ldrb	r3, [r4, #0]
 8008000:	2b2e      	cmp	r3, #46	; 0x2e
 8008002:	d10c      	bne.n	800801e <_vfiprintf_r+0x15a>
 8008004:	7863      	ldrb	r3, [r4, #1]
 8008006:	2b2a      	cmp	r3, #42	; 0x2a
 8008008:	d134      	bne.n	8008074 <_vfiprintf_r+0x1b0>
 800800a:	9b03      	ldr	r3, [sp, #12]
 800800c:	1d1a      	adds	r2, r3, #4
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	9203      	str	r2, [sp, #12]
 8008012:	2b00      	cmp	r3, #0
 8008014:	bfb8      	it	lt
 8008016:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800801a:	3402      	adds	r4, #2
 800801c:	9305      	str	r3, [sp, #20]
 800801e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80080f4 <_vfiprintf_r+0x230>
 8008022:	7821      	ldrb	r1, [r4, #0]
 8008024:	2203      	movs	r2, #3
 8008026:	4650      	mov	r0, sl
 8008028:	f7f8 f8da 	bl	80001e0 <memchr>
 800802c:	b138      	cbz	r0, 800803e <_vfiprintf_r+0x17a>
 800802e:	9b04      	ldr	r3, [sp, #16]
 8008030:	eba0 000a 	sub.w	r0, r0, sl
 8008034:	2240      	movs	r2, #64	; 0x40
 8008036:	4082      	lsls	r2, r0
 8008038:	4313      	orrs	r3, r2
 800803a:	3401      	adds	r4, #1
 800803c:	9304      	str	r3, [sp, #16]
 800803e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008042:	4829      	ldr	r0, [pc, #164]	; (80080e8 <_vfiprintf_r+0x224>)
 8008044:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008048:	2206      	movs	r2, #6
 800804a:	f7f8 f8c9 	bl	80001e0 <memchr>
 800804e:	2800      	cmp	r0, #0
 8008050:	d03f      	beq.n	80080d2 <_vfiprintf_r+0x20e>
 8008052:	4b26      	ldr	r3, [pc, #152]	; (80080ec <_vfiprintf_r+0x228>)
 8008054:	bb1b      	cbnz	r3, 800809e <_vfiprintf_r+0x1da>
 8008056:	9b03      	ldr	r3, [sp, #12]
 8008058:	3307      	adds	r3, #7
 800805a:	f023 0307 	bic.w	r3, r3, #7
 800805e:	3308      	adds	r3, #8
 8008060:	9303      	str	r3, [sp, #12]
 8008062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008064:	443b      	add	r3, r7
 8008066:	9309      	str	r3, [sp, #36]	; 0x24
 8008068:	e768      	b.n	8007f3c <_vfiprintf_r+0x78>
 800806a:	fb0c 3202 	mla	r2, ip, r2, r3
 800806e:	460c      	mov	r4, r1
 8008070:	2001      	movs	r0, #1
 8008072:	e7a6      	b.n	8007fc2 <_vfiprintf_r+0xfe>
 8008074:	2300      	movs	r3, #0
 8008076:	3401      	adds	r4, #1
 8008078:	9305      	str	r3, [sp, #20]
 800807a:	4619      	mov	r1, r3
 800807c:	f04f 0c0a 	mov.w	ip, #10
 8008080:	4620      	mov	r0, r4
 8008082:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008086:	3a30      	subs	r2, #48	; 0x30
 8008088:	2a09      	cmp	r2, #9
 800808a:	d903      	bls.n	8008094 <_vfiprintf_r+0x1d0>
 800808c:	2b00      	cmp	r3, #0
 800808e:	d0c6      	beq.n	800801e <_vfiprintf_r+0x15a>
 8008090:	9105      	str	r1, [sp, #20]
 8008092:	e7c4      	b.n	800801e <_vfiprintf_r+0x15a>
 8008094:	fb0c 2101 	mla	r1, ip, r1, r2
 8008098:	4604      	mov	r4, r0
 800809a:	2301      	movs	r3, #1
 800809c:	e7f0      	b.n	8008080 <_vfiprintf_r+0x1bc>
 800809e:	ab03      	add	r3, sp, #12
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	462a      	mov	r2, r5
 80080a4:	4b12      	ldr	r3, [pc, #72]	; (80080f0 <_vfiprintf_r+0x22c>)
 80080a6:	a904      	add	r1, sp, #16
 80080a8:	4630      	mov	r0, r6
 80080aa:	f7fd fbb3 	bl	8005814 <_printf_float>
 80080ae:	4607      	mov	r7, r0
 80080b0:	1c78      	adds	r0, r7, #1
 80080b2:	d1d6      	bne.n	8008062 <_vfiprintf_r+0x19e>
 80080b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080b6:	07d9      	lsls	r1, r3, #31
 80080b8:	d405      	bmi.n	80080c6 <_vfiprintf_r+0x202>
 80080ba:	89ab      	ldrh	r3, [r5, #12]
 80080bc:	059a      	lsls	r2, r3, #22
 80080be:	d402      	bmi.n	80080c6 <_vfiprintf_r+0x202>
 80080c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080c2:	f7fe f8fe 	bl	80062c2 <__retarget_lock_release_recursive>
 80080c6:	89ab      	ldrh	r3, [r5, #12]
 80080c8:	065b      	lsls	r3, r3, #25
 80080ca:	f53f af1d 	bmi.w	8007f08 <_vfiprintf_r+0x44>
 80080ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080d0:	e71c      	b.n	8007f0c <_vfiprintf_r+0x48>
 80080d2:	ab03      	add	r3, sp, #12
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	462a      	mov	r2, r5
 80080d8:	4b05      	ldr	r3, [pc, #20]	; (80080f0 <_vfiprintf_r+0x22c>)
 80080da:	a904      	add	r1, sp, #16
 80080dc:	4630      	mov	r0, r6
 80080de:	f7fd fe3d 	bl	8005d5c <_printf_i>
 80080e2:	e7e4      	b.n	80080ae <_vfiprintf_r+0x1ea>
 80080e4:	080090fc 	.word	0x080090fc
 80080e8:	08009106 	.word	0x08009106
 80080ec:	08005815 	.word	0x08005815
 80080f0:	08007ea1 	.word	0x08007ea1
 80080f4:	08009102 	.word	0x08009102

080080f8 <__swbuf_r>:
 80080f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080fa:	460e      	mov	r6, r1
 80080fc:	4614      	mov	r4, r2
 80080fe:	4605      	mov	r5, r0
 8008100:	b118      	cbz	r0, 800810a <__swbuf_r+0x12>
 8008102:	6a03      	ldr	r3, [r0, #32]
 8008104:	b90b      	cbnz	r3, 800810a <__swbuf_r+0x12>
 8008106:	f7fd ffc5 	bl	8006094 <__sinit>
 800810a:	69a3      	ldr	r3, [r4, #24]
 800810c:	60a3      	str	r3, [r4, #8]
 800810e:	89a3      	ldrh	r3, [r4, #12]
 8008110:	071a      	lsls	r2, r3, #28
 8008112:	d525      	bpl.n	8008160 <__swbuf_r+0x68>
 8008114:	6923      	ldr	r3, [r4, #16]
 8008116:	b31b      	cbz	r3, 8008160 <__swbuf_r+0x68>
 8008118:	6823      	ldr	r3, [r4, #0]
 800811a:	6922      	ldr	r2, [r4, #16]
 800811c:	1a98      	subs	r0, r3, r2
 800811e:	6963      	ldr	r3, [r4, #20]
 8008120:	b2f6      	uxtb	r6, r6
 8008122:	4283      	cmp	r3, r0
 8008124:	4637      	mov	r7, r6
 8008126:	dc04      	bgt.n	8008132 <__swbuf_r+0x3a>
 8008128:	4621      	mov	r1, r4
 800812a:	4628      	mov	r0, r5
 800812c:	f7ff fdac 	bl	8007c88 <_fflush_r>
 8008130:	b9e0      	cbnz	r0, 800816c <__swbuf_r+0x74>
 8008132:	68a3      	ldr	r3, [r4, #8]
 8008134:	3b01      	subs	r3, #1
 8008136:	60a3      	str	r3, [r4, #8]
 8008138:	6823      	ldr	r3, [r4, #0]
 800813a:	1c5a      	adds	r2, r3, #1
 800813c:	6022      	str	r2, [r4, #0]
 800813e:	701e      	strb	r6, [r3, #0]
 8008140:	6962      	ldr	r2, [r4, #20]
 8008142:	1c43      	adds	r3, r0, #1
 8008144:	429a      	cmp	r2, r3
 8008146:	d004      	beq.n	8008152 <__swbuf_r+0x5a>
 8008148:	89a3      	ldrh	r3, [r4, #12]
 800814a:	07db      	lsls	r3, r3, #31
 800814c:	d506      	bpl.n	800815c <__swbuf_r+0x64>
 800814e:	2e0a      	cmp	r6, #10
 8008150:	d104      	bne.n	800815c <__swbuf_r+0x64>
 8008152:	4621      	mov	r1, r4
 8008154:	4628      	mov	r0, r5
 8008156:	f7ff fd97 	bl	8007c88 <_fflush_r>
 800815a:	b938      	cbnz	r0, 800816c <__swbuf_r+0x74>
 800815c:	4638      	mov	r0, r7
 800815e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008160:	4621      	mov	r1, r4
 8008162:	4628      	mov	r0, r5
 8008164:	f000 f806 	bl	8008174 <__swsetup_r>
 8008168:	2800      	cmp	r0, #0
 800816a:	d0d5      	beq.n	8008118 <__swbuf_r+0x20>
 800816c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008170:	e7f4      	b.n	800815c <__swbuf_r+0x64>
	...

08008174 <__swsetup_r>:
 8008174:	b538      	push	{r3, r4, r5, lr}
 8008176:	4b2a      	ldr	r3, [pc, #168]	; (8008220 <__swsetup_r+0xac>)
 8008178:	4605      	mov	r5, r0
 800817a:	6818      	ldr	r0, [r3, #0]
 800817c:	460c      	mov	r4, r1
 800817e:	b118      	cbz	r0, 8008188 <__swsetup_r+0x14>
 8008180:	6a03      	ldr	r3, [r0, #32]
 8008182:	b90b      	cbnz	r3, 8008188 <__swsetup_r+0x14>
 8008184:	f7fd ff86 	bl	8006094 <__sinit>
 8008188:	89a3      	ldrh	r3, [r4, #12]
 800818a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800818e:	0718      	lsls	r0, r3, #28
 8008190:	d422      	bmi.n	80081d8 <__swsetup_r+0x64>
 8008192:	06d9      	lsls	r1, r3, #27
 8008194:	d407      	bmi.n	80081a6 <__swsetup_r+0x32>
 8008196:	2309      	movs	r3, #9
 8008198:	602b      	str	r3, [r5, #0]
 800819a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800819e:	81a3      	strh	r3, [r4, #12]
 80081a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081a4:	e034      	b.n	8008210 <__swsetup_r+0x9c>
 80081a6:	0758      	lsls	r0, r3, #29
 80081a8:	d512      	bpl.n	80081d0 <__swsetup_r+0x5c>
 80081aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081ac:	b141      	cbz	r1, 80081c0 <__swsetup_r+0x4c>
 80081ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081b2:	4299      	cmp	r1, r3
 80081b4:	d002      	beq.n	80081bc <__swsetup_r+0x48>
 80081b6:	4628      	mov	r0, r5
 80081b8:	f7fe ff0c 	bl	8006fd4 <_free_r>
 80081bc:	2300      	movs	r3, #0
 80081be:	6363      	str	r3, [r4, #52]	; 0x34
 80081c0:	89a3      	ldrh	r3, [r4, #12]
 80081c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80081c6:	81a3      	strh	r3, [r4, #12]
 80081c8:	2300      	movs	r3, #0
 80081ca:	6063      	str	r3, [r4, #4]
 80081cc:	6923      	ldr	r3, [r4, #16]
 80081ce:	6023      	str	r3, [r4, #0]
 80081d0:	89a3      	ldrh	r3, [r4, #12]
 80081d2:	f043 0308 	orr.w	r3, r3, #8
 80081d6:	81a3      	strh	r3, [r4, #12]
 80081d8:	6923      	ldr	r3, [r4, #16]
 80081da:	b94b      	cbnz	r3, 80081f0 <__swsetup_r+0x7c>
 80081dc:	89a3      	ldrh	r3, [r4, #12]
 80081de:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80081e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081e6:	d003      	beq.n	80081f0 <__swsetup_r+0x7c>
 80081e8:	4621      	mov	r1, r4
 80081ea:	4628      	mov	r0, r5
 80081ec:	f000 f884 	bl	80082f8 <__smakebuf_r>
 80081f0:	89a0      	ldrh	r0, [r4, #12]
 80081f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081f6:	f010 0301 	ands.w	r3, r0, #1
 80081fa:	d00a      	beq.n	8008212 <__swsetup_r+0x9e>
 80081fc:	2300      	movs	r3, #0
 80081fe:	60a3      	str	r3, [r4, #8]
 8008200:	6963      	ldr	r3, [r4, #20]
 8008202:	425b      	negs	r3, r3
 8008204:	61a3      	str	r3, [r4, #24]
 8008206:	6923      	ldr	r3, [r4, #16]
 8008208:	b943      	cbnz	r3, 800821c <__swsetup_r+0xa8>
 800820a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800820e:	d1c4      	bne.n	800819a <__swsetup_r+0x26>
 8008210:	bd38      	pop	{r3, r4, r5, pc}
 8008212:	0781      	lsls	r1, r0, #30
 8008214:	bf58      	it	pl
 8008216:	6963      	ldrpl	r3, [r4, #20]
 8008218:	60a3      	str	r3, [r4, #8]
 800821a:	e7f4      	b.n	8008206 <__swsetup_r+0x92>
 800821c:	2000      	movs	r0, #0
 800821e:	e7f7      	b.n	8008210 <__swsetup_r+0x9c>
 8008220:	20000070 	.word	0x20000070

08008224 <_raise_r>:
 8008224:	291f      	cmp	r1, #31
 8008226:	b538      	push	{r3, r4, r5, lr}
 8008228:	4604      	mov	r4, r0
 800822a:	460d      	mov	r5, r1
 800822c:	d904      	bls.n	8008238 <_raise_r+0x14>
 800822e:	2316      	movs	r3, #22
 8008230:	6003      	str	r3, [r0, #0]
 8008232:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008236:	bd38      	pop	{r3, r4, r5, pc}
 8008238:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800823a:	b112      	cbz	r2, 8008242 <_raise_r+0x1e>
 800823c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008240:	b94b      	cbnz	r3, 8008256 <_raise_r+0x32>
 8008242:	4620      	mov	r0, r4
 8008244:	f000 f830 	bl	80082a8 <_getpid_r>
 8008248:	462a      	mov	r2, r5
 800824a:	4601      	mov	r1, r0
 800824c:	4620      	mov	r0, r4
 800824e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008252:	f000 b817 	b.w	8008284 <_kill_r>
 8008256:	2b01      	cmp	r3, #1
 8008258:	d00a      	beq.n	8008270 <_raise_r+0x4c>
 800825a:	1c59      	adds	r1, r3, #1
 800825c:	d103      	bne.n	8008266 <_raise_r+0x42>
 800825e:	2316      	movs	r3, #22
 8008260:	6003      	str	r3, [r0, #0]
 8008262:	2001      	movs	r0, #1
 8008264:	e7e7      	b.n	8008236 <_raise_r+0x12>
 8008266:	2400      	movs	r4, #0
 8008268:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800826c:	4628      	mov	r0, r5
 800826e:	4798      	blx	r3
 8008270:	2000      	movs	r0, #0
 8008272:	e7e0      	b.n	8008236 <_raise_r+0x12>

08008274 <raise>:
 8008274:	4b02      	ldr	r3, [pc, #8]	; (8008280 <raise+0xc>)
 8008276:	4601      	mov	r1, r0
 8008278:	6818      	ldr	r0, [r3, #0]
 800827a:	f7ff bfd3 	b.w	8008224 <_raise_r>
 800827e:	bf00      	nop
 8008280:	20000070 	.word	0x20000070

08008284 <_kill_r>:
 8008284:	b538      	push	{r3, r4, r5, lr}
 8008286:	4d07      	ldr	r5, [pc, #28]	; (80082a4 <_kill_r+0x20>)
 8008288:	2300      	movs	r3, #0
 800828a:	4604      	mov	r4, r0
 800828c:	4608      	mov	r0, r1
 800828e:	4611      	mov	r1, r2
 8008290:	602b      	str	r3, [r5, #0]
 8008292:	f7fa fbf9 	bl	8002a88 <_kill>
 8008296:	1c43      	adds	r3, r0, #1
 8008298:	d102      	bne.n	80082a0 <_kill_r+0x1c>
 800829a:	682b      	ldr	r3, [r5, #0]
 800829c:	b103      	cbz	r3, 80082a0 <_kill_r+0x1c>
 800829e:	6023      	str	r3, [r4, #0]
 80082a0:	bd38      	pop	{r3, r4, r5, pc}
 80082a2:	bf00      	nop
 80082a4:	20000484 	.word	0x20000484

080082a8 <_getpid_r>:
 80082a8:	f7fa bbe6 	b.w	8002a78 <_getpid>

080082ac <__swhatbuf_r>:
 80082ac:	b570      	push	{r4, r5, r6, lr}
 80082ae:	460c      	mov	r4, r1
 80082b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082b4:	2900      	cmp	r1, #0
 80082b6:	b096      	sub	sp, #88	; 0x58
 80082b8:	4615      	mov	r5, r2
 80082ba:	461e      	mov	r6, r3
 80082bc:	da0d      	bge.n	80082da <__swhatbuf_r+0x2e>
 80082be:	89a3      	ldrh	r3, [r4, #12]
 80082c0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80082c4:	f04f 0100 	mov.w	r1, #0
 80082c8:	bf0c      	ite	eq
 80082ca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80082ce:	2340      	movne	r3, #64	; 0x40
 80082d0:	2000      	movs	r0, #0
 80082d2:	6031      	str	r1, [r6, #0]
 80082d4:	602b      	str	r3, [r5, #0]
 80082d6:	b016      	add	sp, #88	; 0x58
 80082d8:	bd70      	pop	{r4, r5, r6, pc}
 80082da:	466a      	mov	r2, sp
 80082dc:	f000 f848 	bl	8008370 <_fstat_r>
 80082e0:	2800      	cmp	r0, #0
 80082e2:	dbec      	blt.n	80082be <__swhatbuf_r+0x12>
 80082e4:	9901      	ldr	r1, [sp, #4]
 80082e6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80082ea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80082ee:	4259      	negs	r1, r3
 80082f0:	4159      	adcs	r1, r3
 80082f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082f6:	e7eb      	b.n	80082d0 <__swhatbuf_r+0x24>

080082f8 <__smakebuf_r>:
 80082f8:	898b      	ldrh	r3, [r1, #12]
 80082fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80082fc:	079d      	lsls	r5, r3, #30
 80082fe:	4606      	mov	r6, r0
 8008300:	460c      	mov	r4, r1
 8008302:	d507      	bpl.n	8008314 <__smakebuf_r+0x1c>
 8008304:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008308:	6023      	str	r3, [r4, #0]
 800830a:	6123      	str	r3, [r4, #16]
 800830c:	2301      	movs	r3, #1
 800830e:	6163      	str	r3, [r4, #20]
 8008310:	b002      	add	sp, #8
 8008312:	bd70      	pop	{r4, r5, r6, pc}
 8008314:	ab01      	add	r3, sp, #4
 8008316:	466a      	mov	r2, sp
 8008318:	f7ff ffc8 	bl	80082ac <__swhatbuf_r>
 800831c:	9900      	ldr	r1, [sp, #0]
 800831e:	4605      	mov	r5, r0
 8008320:	4630      	mov	r0, r6
 8008322:	f7fe fecb 	bl	80070bc <_malloc_r>
 8008326:	b948      	cbnz	r0, 800833c <__smakebuf_r+0x44>
 8008328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800832c:	059a      	lsls	r2, r3, #22
 800832e:	d4ef      	bmi.n	8008310 <__smakebuf_r+0x18>
 8008330:	f023 0303 	bic.w	r3, r3, #3
 8008334:	f043 0302 	orr.w	r3, r3, #2
 8008338:	81a3      	strh	r3, [r4, #12]
 800833a:	e7e3      	b.n	8008304 <__smakebuf_r+0xc>
 800833c:	89a3      	ldrh	r3, [r4, #12]
 800833e:	6020      	str	r0, [r4, #0]
 8008340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008344:	81a3      	strh	r3, [r4, #12]
 8008346:	9b00      	ldr	r3, [sp, #0]
 8008348:	6163      	str	r3, [r4, #20]
 800834a:	9b01      	ldr	r3, [sp, #4]
 800834c:	6120      	str	r0, [r4, #16]
 800834e:	b15b      	cbz	r3, 8008368 <__smakebuf_r+0x70>
 8008350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008354:	4630      	mov	r0, r6
 8008356:	f000 f81d 	bl	8008394 <_isatty_r>
 800835a:	b128      	cbz	r0, 8008368 <__smakebuf_r+0x70>
 800835c:	89a3      	ldrh	r3, [r4, #12]
 800835e:	f023 0303 	bic.w	r3, r3, #3
 8008362:	f043 0301 	orr.w	r3, r3, #1
 8008366:	81a3      	strh	r3, [r4, #12]
 8008368:	89a3      	ldrh	r3, [r4, #12]
 800836a:	431d      	orrs	r5, r3
 800836c:	81a5      	strh	r5, [r4, #12]
 800836e:	e7cf      	b.n	8008310 <__smakebuf_r+0x18>

08008370 <_fstat_r>:
 8008370:	b538      	push	{r3, r4, r5, lr}
 8008372:	4d07      	ldr	r5, [pc, #28]	; (8008390 <_fstat_r+0x20>)
 8008374:	2300      	movs	r3, #0
 8008376:	4604      	mov	r4, r0
 8008378:	4608      	mov	r0, r1
 800837a:	4611      	mov	r1, r2
 800837c:	602b      	str	r3, [r5, #0]
 800837e:	f7fa fbe2 	bl	8002b46 <_fstat>
 8008382:	1c43      	adds	r3, r0, #1
 8008384:	d102      	bne.n	800838c <_fstat_r+0x1c>
 8008386:	682b      	ldr	r3, [r5, #0]
 8008388:	b103      	cbz	r3, 800838c <_fstat_r+0x1c>
 800838a:	6023      	str	r3, [r4, #0]
 800838c:	bd38      	pop	{r3, r4, r5, pc}
 800838e:	bf00      	nop
 8008390:	20000484 	.word	0x20000484

08008394 <_isatty_r>:
 8008394:	b538      	push	{r3, r4, r5, lr}
 8008396:	4d06      	ldr	r5, [pc, #24]	; (80083b0 <_isatty_r+0x1c>)
 8008398:	2300      	movs	r3, #0
 800839a:	4604      	mov	r4, r0
 800839c:	4608      	mov	r0, r1
 800839e:	602b      	str	r3, [r5, #0]
 80083a0:	f7fa fbe1 	bl	8002b66 <_isatty>
 80083a4:	1c43      	adds	r3, r0, #1
 80083a6:	d102      	bne.n	80083ae <_isatty_r+0x1a>
 80083a8:	682b      	ldr	r3, [r5, #0]
 80083aa:	b103      	cbz	r3, 80083ae <_isatty_r+0x1a>
 80083ac:	6023      	str	r3, [r4, #0]
 80083ae:	bd38      	pop	{r3, r4, r5, pc}
 80083b0:	20000484 	.word	0x20000484

080083b4 <atan2f>:
 80083b4:	f000 b886 	b.w	80084c4 <__ieee754_atan2f>

080083b8 <powf>:
 80083b8:	b508      	push	{r3, lr}
 80083ba:	ed2d 8b04 	vpush	{d8-d9}
 80083be:	eeb0 8a60 	vmov.f32	s16, s1
 80083c2:	eeb0 9a40 	vmov.f32	s18, s0
 80083c6:	f000 f91d 	bl	8008604 <__ieee754_powf>
 80083ca:	eeb4 8a48 	vcmp.f32	s16, s16
 80083ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083d2:	eef0 8a40 	vmov.f32	s17, s0
 80083d6:	d63e      	bvs.n	8008456 <powf+0x9e>
 80083d8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80083dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083e0:	d112      	bne.n	8008408 <powf+0x50>
 80083e2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80083e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083ea:	d039      	beq.n	8008460 <powf+0xa8>
 80083ec:	eeb0 0a48 	vmov.f32	s0, s16
 80083f0:	f000 f858 	bl	80084a4 <finitef>
 80083f4:	b378      	cbz	r0, 8008456 <powf+0x9e>
 80083f6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80083fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083fe:	d52a      	bpl.n	8008456 <powf+0x9e>
 8008400:	f7fd ff34 	bl	800626c <__errno>
 8008404:	2322      	movs	r3, #34	; 0x22
 8008406:	e014      	b.n	8008432 <powf+0x7a>
 8008408:	f000 f84c 	bl	80084a4 <finitef>
 800840c:	b998      	cbnz	r0, 8008436 <powf+0x7e>
 800840e:	eeb0 0a49 	vmov.f32	s0, s18
 8008412:	f000 f847 	bl	80084a4 <finitef>
 8008416:	b170      	cbz	r0, 8008436 <powf+0x7e>
 8008418:	eeb0 0a48 	vmov.f32	s0, s16
 800841c:	f000 f842 	bl	80084a4 <finitef>
 8008420:	b148      	cbz	r0, 8008436 <powf+0x7e>
 8008422:	eef4 8a68 	vcmp.f32	s17, s17
 8008426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800842a:	d7e9      	bvc.n	8008400 <powf+0x48>
 800842c:	f7fd ff1e 	bl	800626c <__errno>
 8008430:	2321      	movs	r3, #33	; 0x21
 8008432:	6003      	str	r3, [r0, #0]
 8008434:	e00f      	b.n	8008456 <powf+0x9e>
 8008436:	eef5 8a40 	vcmp.f32	s17, #0.0
 800843a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800843e:	d10a      	bne.n	8008456 <powf+0x9e>
 8008440:	eeb0 0a49 	vmov.f32	s0, s18
 8008444:	f000 f82e 	bl	80084a4 <finitef>
 8008448:	b128      	cbz	r0, 8008456 <powf+0x9e>
 800844a:	eeb0 0a48 	vmov.f32	s0, s16
 800844e:	f000 f829 	bl	80084a4 <finitef>
 8008452:	2800      	cmp	r0, #0
 8008454:	d1d4      	bne.n	8008400 <powf+0x48>
 8008456:	eeb0 0a68 	vmov.f32	s0, s17
 800845a:	ecbd 8b04 	vpop	{d8-d9}
 800845e:	bd08      	pop	{r3, pc}
 8008460:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8008464:	e7f7      	b.n	8008456 <powf+0x9e>
	...

08008468 <sqrtf>:
 8008468:	b508      	push	{r3, lr}
 800846a:	ed2d 8b02 	vpush	{d8}
 800846e:	eeb0 8a40 	vmov.f32	s16, s0
 8008472:	f000 f824 	bl	80084be <__ieee754_sqrtf>
 8008476:	eeb4 8a48 	vcmp.f32	s16, s16
 800847a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800847e:	d60c      	bvs.n	800849a <sqrtf+0x32>
 8008480:	eddf 8a07 	vldr	s17, [pc, #28]	; 80084a0 <sqrtf+0x38>
 8008484:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800848c:	d505      	bpl.n	800849a <sqrtf+0x32>
 800848e:	f7fd feed 	bl	800626c <__errno>
 8008492:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008496:	2321      	movs	r3, #33	; 0x21
 8008498:	6003      	str	r3, [r0, #0]
 800849a:	ecbd 8b02 	vpop	{d8}
 800849e:	bd08      	pop	{r3, pc}
 80084a0:	00000000 	.word	0x00000000

080084a4 <finitef>:
 80084a4:	b082      	sub	sp, #8
 80084a6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80084aa:	9801      	ldr	r0, [sp, #4]
 80084ac:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80084b0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80084b4:	bfac      	ite	ge
 80084b6:	2000      	movge	r0, #0
 80084b8:	2001      	movlt	r0, #1
 80084ba:	b002      	add	sp, #8
 80084bc:	4770      	bx	lr

080084be <__ieee754_sqrtf>:
 80084be:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80084c2:	4770      	bx	lr

080084c4 <__ieee754_atan2f>:
 80084c4:	ee10 2a90 	vmov	r2, s1
 80084c8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80084cc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80084d0:	b510      	push	{r4, lr}
 80084d2:	eef0 7a40 	vmov.f32	s15, s0
 80084d6:	dc06      	bgt.n	80084e6 <__ieee754_atan2f+0x22>
 80084d8:	ee10 0a10 	vmov	r0, s0
 80084dc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80084e0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80084e4:	dd04      	ble.n	80084f0 <__ieee754_atan2f+0x2c>
 80084e6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80084ea:	eeb0 0a67 	vmov.f32	s0, s15
 80084ee:	bd10      	pop	{r4, pc}
 80084f0:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80084f4:	d103      	bne.n	80084fe <__ieee754_atan2f+0x3a>
 80084f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084fa:	f000 bb4d 	b.w	8008b98 <atanf>
 80084fe:	1794      	asrs	r4, r2, #30
 8008500:	f004 0402 	and.w	r4, r4, #2
 8008504:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008508:	b943      	cbnz	r3, 800851c <__ieee754_atan2f+0x58>
 800850a:	2c02      	cmp	r4, #2
 800850c:	d05e      	beq.n	80085cc <__ieee754_atan2f+0x108>
 800850e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80085e0 <__ieee754_atan2f+0x11c>
 8008512:	2c03      	cmp	r4, #3
 8008514:	bf08      	it	eq
 8008516:	eef0 7a47 	vmoveq.f32	s15, s14
 800851a:	e7e6      	b.n	80084ea <__ieee754_atan2f+0x26>
 800851c:	b941      	cbnz	r1, 8008530 <__ieee754_atan2f+0x6c>
 800851e:	eddf 7a31 	vldr	s15, [pc, #196]	; 80085e4 <__ieee754_atan2f+0x120>
 8008522:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80085e8 <__ieee754_atan2f+0x124>
 8008526:	2800      	cmp	r0, #0
 8008528:	bfb8      	it	lt
 800852a:	eef0 7a47 	vmovlt.f32	s15, s14
 800852e:	e7dc      	b.n	80084ea <__ieee754_atan2f+0x26>
 8008530:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008534:	d110      	bne.n	8008558 <__ieee754_atan2f+0x94>
 8008536:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800853a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800853e:	d107      	bne.n	8008550 <__ieee754_atan2f+0x8c>
 8008540:	2c02      	cmp	r4, #2
 8008542:	d846      	bhi.n	80085d2 <__ieee754_atan2f+0x10e>
 8008544:	4b29      	ldr	r3, [pc, #164]	; (80085ec <__ieee754_atan2f+0x128>)
 8008546:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800854a:	edd3 7a00 	vldr	s15, [r3]
 800854e:	e7cc      	b.n	80084ea <__ieee754_atan2f+0x26>
 8008550:	2c02      	cmp	r4, #2
 8008552:	d841      	bhi.n	80085d8 <__ieee754_atan2f+0x114>
 8008554:	4b26      	ldr	r3, [pc, #152]	; (80085f0 <__ieee754_atan2f+0x12c>)
 8008556:	e7f6      	b.n	8008546 <__ieee754_atan2f+0x82>
 8008558:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800855c:	d0df      	beq.n	800851e <__ieee754_atan2f+0x5a>
 800855e:	1a5b      	subs	r3, r3, r1
 8008560:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8008564:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8008568:	da1a      	bge.n	80085a0 <__ieee754_atan2f+0xdc>
 800856a:	2a00      	cmp	r2, #0
 800856c:	da01      	bge.n	8008572 <__ieee754_atan2f+0xae>
 800856e:	313c      	adds	r1, #60	; 0x3c
 8008570:	db19      	blt.n	80085a6 <__ieee754_atan2f+0xe2>
 8008572:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8008576:	f000 fbe3 	bl	8008d40 <fabsf>
 800857a:	f000 fb0d 	bl	8008b98 <atanf>
 800857e:	eef0 7a40 	vmov.f32	s15, s0
 8008582:	2c01      	cmp	r4, #1
 8008584:	d012      	beq.n	80085ac <__ieee754_atan2f+0xe8>
 8008586:	2c02      	cmp	r4, #2
 8008588:	d017      	beq.n	80085ba <__ieee754_atan2f+0xf6>
 800858a:	2c00      	cmp	r4, #0
 800858c:	d0ad      	beq.n	80084ea <__ieee754_atan2f+0x26>
 800858e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80085f4 <__ieee754_atan2f+0x130>
 8008592:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008596:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80085f8 <__ieee754_atan2f+0x134>
 800859a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800859e:	e7a4      	b.n	80084ea <__ieee754_atan2f+0x26>
 80085a0:	eddf 7a10 	vldr	s15, [pc, #64]	; 80085e4 <__ieee754_atan2f+0x120>
 80085a4:	e7ed      	b.n	8008582 <__ieee754_atan2f+0xbe>
 80085a6:	eddf 7a15 	vldr	s15, [pc, #84]	; 80085fc <__ieee754_atan2f+0x138>
 80085aa:	e7ea      	b.n	8008582 <__ieee754_atan2f+0xbe>
 80085ac:	ee17 3a90 	vmov	r3, s15
 80085b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80085b4:	ee07 3a90 	vmov	s15, r3
 80085b8:	e797      	b.n	80084ea <__ieee754_atan2f+0x26>
 80085ba:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80085f4 <__ieee754_atan2f+0x130>
 80085be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80085c2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80085f8 <__ieee754_atan2f+0x134>
 80085c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085ca:	e78e      	b.n	80084ea <__ieee754_atan2f+0x26>
 80085cc:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80085f8 <__ieee754_atan2f+0x134>
 80085d0:	e78b      	b.n	80084ea <__ieee754_atan2f+0x26>
 80085d2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8008600 <__ieee754_atan2f+0x13c>
 80085d6:	e788      	b.n	80084ea <__ieee754_atan2f+0x26>
 80085d8:	eddf 7a08 	vldr	s15, [pc, #32]	; 80085fc <__ieee754_atan2f+0x138>
 80085dc:	e785      	b.n	80084ea <__ieee754_atan2f+0x26>
 80085de:	bf00      	nop
 80085e0:	c0490fdb 	.word	0xc0490fdb
 80085e4:	3fc90fdb 	.word	0x3fc90fdb
 80085e8:	bfc90fdb 	.word	0xbfc90fdb
 80085ec:	08009254 	.word	0x08009254
 80085f0:	08009260 	.word	0x08009260
 80085f4:	33bbbd2e 	.word	0x33bbbd2e
 80085f8:	40490fdb 	.word	0x40490fdb
 80085fc:	00000000 	.word	0x00000000
 8008600:	3f490fdb 	.word	0x3f490fdb

08008604 <__ieee754_powf>:
 8008604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008608:	ee10 4a90 	vmov	r4, s1
 800860c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8008610:	ed2d 8b02 	vpush	{d8}
 8008614:	ee10 7a10 	vmov	r7, s0
 8008618:	eeb0 8a40 	vmov.f32	s16, s0
 800861c:	eef0 8a60 	vmov.f32	s17, s1
 8008620:	d10c      	bne.n	800863c <__ieee754_powf+0x38>
 8008622:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 8008626:	007f      	lsls	r7, r7, #1
 8008628:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 800862c:	f240 8292 	bls.w	8008b54 <__ieee754_powf+0x550>
 8008630:	ee38 0a28 	vadd.f32	s0, s16, s17
 8008634:	ecbd 8b02 	vpop	{d8}
 8008638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800863c:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 8008640:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008644:	dcf4      	bgt.n	8008630 <__ieee754_powf+0x2c>
 8008646:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800864a:	dd08      	ble.n	800865e <__ieee754_powf+0x5a>
 800864c:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8008650:	d1ee      	bne.n	8008630 <__ieee754_powf+0x2c>
 8008652:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8008656:	0064      	lsls	r4, r4, #1
 8008658:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800865c:	e7e6      	b.n	800862c <__ieee754_powf+0x28>
 800865e:	2f00      	cmp	r7, #0
 8008660:	da20      	bge.n	80086a4 <__ieee754_powf+0xa0>
 8008662:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8008666:	da2d      	bge.n	80086c4 <__ieee754_powf+0xc0>
 8008668:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800866c:	f2c0 827b 	blt.w	8008b66 <__ieee754_powf+0x562>
 8008670:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8008674:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8008678:	fa48 f603 	asr.w	r6, r8, r3
 800867c:	fa06 f303 	lsl.w	r3, r6, r3
 8008680:	4543      	cmp	r3, r8
 8008682:	f040 8270 	bne.w	8008b66 <__ieee754_powf+0x562>
 8008686:	f006 0601 	and.w	r6, r6, #1
 800868a:	f1c6 0602 	rsb	r6, r6, #2
 800868e:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8008692:	d11f      	bne.n	80086d4 <__ieee754_powf+0xd0>
 8008694:	2c00      	cmp	r4, #0
 8008696:	f280 8263 	bge.w	8008b60 <__ieee754_powf+0x55c>
 800869a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800869e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80086a2:	e7c7      	b.n	8008634 <__ieee754_powf+0x30>
 80086a4:	2600      	movs	r6, #0
 80086a6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80086aa:	d1f0      	bne.n	800868e <__ieee754_powf+0x8a>
 80086ac:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 80086b0:	f000 8250 	beq.w	8008b54 <__ieee754_powf+0x550>
 80086b4:	dd08      	ble.n	80086c8 <__ieee754_powf+0xc4>
 80086b6:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 80089bc <__ieee754_powf+0x3b8>
 80086ba:	2c00      	cmp	r4, #0
 80086bc:	bfa8      	it	ge
 80086be:	eeb0 0a68 	vmovge.f32	s0, s17
 80086c2:	e7b7      	b.n	8008634 <__ieee754_powf+0x30>
 80086c4:	2602      	movs	r6, #2
 80086c6:	e7ee      	b.n	80086a6 <__ieee754_powf+0xa2>
 80086c8:	2c00      	cmp	r4, #0
 80086ca:	f280 8246 	bge.w	8008b5a <__ieee754_powf+0x556>
 80086ce:	eeb1 0a68 	vneg.f32	s0, s17
 80086d2:	e7af      	b.n	8008634 <__ieee754_powf+0x30>
 80086d4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80086d8:	d102      	bne.n	80086e0 <__ieee754_powf+0xdc>
 80086da:	ee28 0a08 	vmul.f32	s0, s16, s16
 80086de:	e7a9      	b.n	8008634 <__ieee754_powf+0x30>
 80086e0:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80086e4:	eeb0 0a48 	vmov.f32	s0, s16
 80086e8:	d107      	bne.n	80086fa <__ieee754_powf+0xf6>
 80086ea:	2f00      	cmp	r7, #0
 80086ec:	db05      	blt.n	80086fa <__ieee754_powf+0xf6>
 80086ee:	ecbd 8b02 	vpop	{d8}
 80086f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086f6:	f7ff bee2 	b.w	80084be <__ieee754_sqrtf>
 80086fa:	f000 fb21 	bl	8008d40 <fabsf>
 80086fe:	b125      	cbz	r5, 800870a <__ieee754_powf+0x106>
 8008700:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 8008704:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8008708:	d115      	bne.n	8008736 <__ieee754_powf+0x132>
 800870a:	2c00      	cmp	r4, #0
 800870c:	bfbc      	itt	lt
 800870e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8008712:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8008716:	2f00      	cmp	r7, #0
 8008718:	da8c      	bge.n	8008634 <__ieee754_powf+0x30>
 800871a:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800871e:	4335      	orrs	r5, r6
 8008720:	d104      	bne.n	800872c <__ieee754_powf+0x128>
 8008722:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008726:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800872a:	e783      	b.n	8008634 <__ieee754_powf+0x30>
 800872c:	2e01      	cmp	r6, #1
 800872e:	d181      	bne.n	8008634 <__ieee754_powf+0x30>
 8008730:	eeb1 0a40 	vneg.f32	s0, s0
 8008734:	e77e      	b.n	8008634 <__ieee754_powf+0x30>
 8008736:	0ff8      	lsrs	r0, r7, #31
 8008738:	3801      	subs	r0, #1
 800873a:	ea56 0300 	orrs.w	r3, r6, r0
 800873e:	d104      	bne.n	800874a <__ieee754_powf+0x146>
 8008740:	ee38 8a48 	vsub.f32	s16, s16, s16
 8008744:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8008748:	e774      	b.n	8008634 <__ieee754_powf+0x30>
 800874a:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800874e:	dd73      	ble.n	8008838 <__ieee754_powf+0x234>
 8008750:	4b9b      	ldr	r3, [pc, #620]	; (80089c0 <__ieee754_powf+0x3bc>)
 8008752:	429d      	cmp	r5, r3
 8008754:	dc08      	bgt.n	8008768 <__ieee754_powf+0x164>
 8008756:	2c00      	cmp	r4, #0
 8008758:	da0b      	bge.n	8008772 <__ieee754_powf+0x16e>
 800875a:	2000      	movs	r0, #0
 800875c:	ecbd 8b02 	vpop	{d8}
 8008760:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008764:	f000 bb76 	b.w	8008e54 <__math_oflowf>
 8008768:	4b96      	ldr	r3, [pc, #600]	; (80089c4 <__ieee754_powf+0x3c0>)
 800876a:	429d      	cmp	r5, r3
 800876c:	dd08      	ble.n	8008780 <__ieee754_powf+0x17c>
 800876e:	2c00      	cmp	r4, #0
 8008770:	dcf3      	bgt.n	800875a <__ieee754_powf+0x156>
 8008772:	2000      	movs	r0, #0
 8008774:	ecbd 8b02 	vpop	{d8}
 8008778:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800877c:	f000 bb64 	b.w	8008e48 <__math_uflowf>
 8008780:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008784:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008788:	eddf 6a8f 	vldr	s13, [pc, #572]	; 80089c8 <__ieee754_powf+0x3c4>
 800878c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8008790:	eee0 6a67 	vfms.f32	s13, s0, s15
 8008794:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008798:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800879c:	ee20 7a00 	vmul.f32	s14, s0, s0
 80087a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80087a4:	eddf 7a89 	vldr	s15, [pc, #548]	; 80089cc <__ieee754_powf+0x3c8>
 80087a8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80087ac:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80089d0 <__ieee754_powf+0x3cc>
 80087b0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80087b4:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80089d4 <__ieee754_powf+0x3d0>
 80087b8:	eef0 6a67 	vmov.f32	s13, s15
 80087bc:	eee0 6a07 	vfma.f32	s13, s0, s14
 80087c0:	ee16 3a90 	vmov	r3, s13
 80087c4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80087c8:	f023 030f 	bic.w	r3, r3, #15
 80087cc:	ee06 3a90 	vmov	s13, r3
 80087d0:	eee0 6a47 	vfms.f32	s13, s0, s14
 80087d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80087d8:	3e01      	subs	r6, #1
 80087da:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80087de:	4306      	orrs	r6, r0
 80087e0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80087e4:	f024 040f 	bic.w	r4, r4, #15
 80087e8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80087ec:	bf08      	it	eq
 80087ee:	eeb0 8a47 	vmoveq.f32	s16, s14
 80087f2:	ee07 4a10 	vmov	s14, r4
 80087f6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80087fa:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80087fe:	ee07 3a90 	vmov	s15, r3
 8008802:	eee7 0a27 	vfma.f32	s1, s14, s15
 8008806:	ee07 4a10 	vmov	s14, r4
 800880a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800880e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8008812:	ee17 1a10 	vmov	r1, s14
 8008816:	2900      	cmp	r1, #0
 8008818:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800881c:	f340 817c 	ble.w	8008b18 <__ieee754_powf+0x514>
 8008820:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8008824:	f340 80f8 	ble.w	8008a18 <__ieee754_powf+0x414>
 8008828:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800882c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008830:	bf4c      	ite	mi
 8008832:	2001      	movmi	r0, #1
 8008834:	2000      	movpl	r0, #0
 8008836:	e791      	b.n	800875c <__ieee754_powf+0x158>
 8008838:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 800883c:	bf01      	itttt	eq
 800883e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 80089d8 <__ieee754_powf+0x3d4>
 8008842:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8008846:	f06f 0317 	mvneq.w	r3, #23
 800884a:	ee17 5a90 	vmoveq	r5, s15
 800884e:	ea4f 52e5 	mov.w	r2, r5, asr #23
 8008852:	bf18      	it	ne
 8008854:	2300      	movne	r3, #0
 8008856:	3a7f      	subs	r2, #127	; 0x7f
 8008858:	441a      	add	r2, r3
 800885a:	4b60      	ldr	r3, [pc, #384]	; (80089dc <__ieee754_powf+0x3d8>)
 800885c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8008860:	429d      	cmp	r5, r3
 8008862:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8008866:	dd06      	ble.n	8008876 <__ieee754_powf+0x272>
 8008868:	4b5d      	ldr	r3, [pc, #372]	; (80089e0 <__ieee754_powf+0x3dc>)
 800886a:	429d      	cmp	r5, r3
 800886c:	f340 80a4 	ble.w	80089b8 <__ieee754_powf+0x3b4>
 8008870:	3201      	adds	r2, #1
 8008872:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8008876:	2500      	movs	r5, #0
 8008878:	4b5a      	ldr	r3, [pc, #360]	; (80089e4 <__ieee754_powf+0x3e0>)
 800887a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800887e:	ee07 1a10 	vmov	s14, r1
 8008882:	edd3 5a00 	vldr	s11, [r3]
 8008886:	4b58      	ldr	r3, [pc, #352]	; (80089e8 <__ieee754_powf+0x3e4>)
 8008888:	ee75 7a87 	vadd.f32	s15, s11, s14
 800888c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008890:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8008894:	1049      	asrs	r1, r1, #1
 8008896:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800889a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800889e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 80088a2:	ee37 6a65 	vsub.f32	s12, s14, s11
 80088a6:	ee07 1a90 	vmov	s15, r1
 80088aa:	ee26 5a24 	vmul.f32	s10, s12, s9
 80088ae:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80088b2:	ee15 7a10 	vmov	r7, s10
 80088b6:	401f      	ands	r7, r3
 80088b8:	ee06 7a90 	vmov	s13, r7
 80088bc:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80088c0:	ee37 7a65 	vsub.f32	s14, s14, s11
 80088c4:	ee65 7a05 	vmul.f32	s15, s10, s10
 80088c8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80088cc:	eddf 5a47 	vldr	s11, [pc, #284]	; 80089ec <__ieee754_powf+0x3e8>
 80088d0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80089f0 <__ieee754_powf+0x3ec>
 80088d4:	eee7 5a87 	vfma.f32	s11, s15, s14
 80088d8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80089f4 <__ieee754_powf+0x3f0>
 80088dc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80088e0:	eddf 5a39 	vldr	s11, [pc, #228]	; 80089c8 <__ieee754_powf+0x3c4>
 80088e4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80088e8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80089f8 <__ieee754_powf+0x3f4>
 80088ec:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80088f0:	eddf 5a42 	vldr	s11, [pc, #264]	; 80089fc <__ieee754_powf+0x3f8>
 80088f4:	ee26 6a24 	vmul.f32	s12, s12, s9
 80088f8:	eee7 5a27 	vfma.f32	s11, s14, s15
 80088fc:	ee35 7a26 	vadd.f32	s14, s10, s13
 8008900:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8008904:	ee27 7a06 	vmul.f32	s14, s14, s12
 8008908:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800890c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8008910:	eef0 5a67 	vmov.f32	s11, s15
 8008914:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8008918:	ee75 5a87 	vadd.f32	s11, s11, s14
 800891c:	ee15 1a90 	vmov	r1, s11
 8008920:	4019      	ands	r1, r3
 8008922:	ee05 1a90 	vmov	s11, r1
 8008926:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800892a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800892e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008932:	ee67 7a85 	vmul.f32	s15, s15, s10
 8008936:	eee6 7a25 	vfma.f32	s15, s12, s11
 800893a:	eeb0 6a67 	vmov.f32	s12, s15
 800893e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8008942:	ee16 1a10 	vmov	r1, s12
 8008946:	4019      	ands	r1, r3
 8008948:	ee07 1a10 	vmov	s14, r1
 800894c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8008950:	ee06 1a10 	vmov	s12, r1
 8008954:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008958:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8008a00 <__ieee754_powf+0x3fc>
 800895c:	4929      	ldr	r1, [pc, #164]	; (8008a04 <__ieee754_powf+0x400>)
 800895e:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8008a08 <__ieee754_powf+0x404>
 8008962:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008966:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8008a0c <__ieee754_powf+0x408>
 800896a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800896e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8008972:	ed91 7a00 	vldr	s14, [r1]
 8008976:	ee77 7a87 	vadd.f32	s15, s15, s14
 800897a:	ee07 2a10 	vmov	s14, r2
 800897e:	eef0 6a67 	vmov.f32	s13, s15
 8008982:	4a23      	ldr	r2, [pc, #140]	; (8008a10 <__ieee754_powf+0x40c>)
 8008984:	eee6 6a25 	vfma.f32	s13, s12, s11
 8008988:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800898c:	ed92 5a00 	vldr	s10, [r2]
 8008990:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008994:	ee76 6a85 	vadd.f32	s13, s13, s10
 8008998:	ee76 6a87 	vadd.f32	s13, s13, s14
 800899c:	ee16 2a90 	vmov	r2, s13
 80089a0:	4013      	ands	r3, r2
 80089a2:	ee06 3a90 	vmov	s13, r3
 80089a6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80089aa:	ee37 7a45 	vsub.f32	s14, s14, s10
 80089ae:	eea6 7a65 	vfms.f32	s14, s12, s11
 80089b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80089b6:	e70f      	b.n	80087d8 <__ieee754_powf+0x1d4>
 80089b8:	2501      	movs	r5, #1
 80089ba:	e75d      	b.n	8008878 <__ieee754_powf+0x274>
 80089bc:	00000000 	.word	0x00000000
 80089c0:	3f7ffff3 	.word	0x3f7ffff3
 80089c4:	3f800007 	.word	0x3f800007
 80089c8:	3eaaaaab 	.word	0x3eaaaaab
 80089cc:	3fb8aa3b 	.word	0x3fb8aa3b
 80089d0:	36eca570 	.word	0x36eca570
 80089d4:	3fb8aa00 	.word	0x3fb8aa00
 80089d8:	4b800000 	.word	0x4b800000
 80089dc:	001cc471 	.word	0x001cc471
 80089e0:	005db3d6 	.word	0x005db3d6
 80089e4:	0800926c 	.word	0x0800926c
 80089e8:	fffff000 	.word	0xfffff000
 80089ec:	3e6c3255 	.word	0x3e6c3255
 80089f0:	3e53f142 	.word	0x3e53f142
 80089f4:	3e8ba305 	.word	0x3e8ba305
 80089f8:	3edb6db7 	.word	0x3edb6db7
 80089fc:	3f19999a 	.word	0x3f19999a
 8008a00:	3f76384f 	.word	0x3f76384f
 8008a04:	0800927c 	.word	0x0800927c
 8008a08:	3f763800 	.word	0x3f763800
 8008a0c:	369dc3a0 	.word	0x369dc3a0
 8008a10:	08009274 	.word	0x08009274
 8008a14:	3338aa3c 	.word	0x3338aa3c
 8008a18:	f040 8093 	bne.w	8008b42 <__ieee754_powf+0x53e>
 8008a1c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8008a14 <__ieee754_powf+0x410>
 8008a20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008a24:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8008a28:	eef4 6ac7 	vcmpe.f32	s13, s14
 8008a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a30:	f73f aefa 	bgt.w	8008828 <__ieee754_powf+0x224>
 8008a34:	15db      	asrs	r3, r3, #23
 8008a36:	3b7e      	subs	r3, #126	; 0x7e
 8008a38:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8008a3c:	4118      	asrs	r0, r3
 8008a3e:	4408      	add	r0, r1
 8008a40:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008a44:	4a49      	ldr	r2, [pc, #292]	; (8008b6c <__ieee754_powf+0x568>)
 8008a46:	3b7f      	subs	r3, #127	; 0x7f
 8008a48:	411a      	asrs	r2, r3
 8008a4a:	4002      	ands	r2, r0
 8008a4c:	ee07 2a10 	vmov	s14, r2
 8008a50:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8008a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008a58:	f1c3 0317 	rsb	r3, r3, #23
 8008a5c:	4118      	asrs	r0, r3
 8008a5e:	2900      	cmp	r1, #0
 8008a60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008a64:	bfb8      	it	lt
 8008a66:	4240      	neglt	r0, r0
 8008a68:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8008a6c:	eddf 6a40 	vldr	s13, [pc, #256]	; 8008b70 <__ieee754_powf+0x56c>
 8008a70:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8008b74 <__ieee754_powf+0x570>
 8008a74:	ee17 3a10 	vmov	r3, s14
 8008a78:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008a7c:	f023 030f 	bic.w	r3, r3, #15
 8008a80:	ee07 3a10 	vmov	s14, r3
 8008a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a88:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008a8c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8008a90:	eddf 7a39 	vldr	s15, [pc, #228]	; 8008b78 <__ieee754_powf+0x574>
 8008a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a98:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8008a9c:	eef0 6a67 	vmov.f32	s13, s15
 8008aa0:	eee7 6a06 	vfma.f32	s13, s14, s12
 8008aa4:	eef0 5a66 	vmov.f32	s11, s13
 8008aa8:	eee7 5a46 	vfms.f32	s11, s14, s12
 8008aac:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8008ab0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8008ab4:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8008b7c <__ieee754_powf+0x578>
 8008ab8:	eddf 5a31 	vldr	s11, [pc, #196]	; 8008b80 <__ieee754_powf+0x57c>
 8008abc:	eea7 6a25 	vfma.f32	s12, s14, s11
 8008ac0:	eddf 5a30 	vldr	s11, [pc, #192]	; 8008b84 <__ieee754_powf+0x580>
 8008ac4:	eee6 5a07 	vfma.f32	s11, s12, s14
 8008ac8:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8008b88 <__ieee754_powf+0x584>
 8008acc:	eea5 6a87 	vfma.f32	s12, s11, s14
 8008ad0:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008b8c <__ieee754_powf+0x588>
 8008ad4:	eee6 5a07 	vfma.f32	s11, s12, s14
 8008ad8:	eeb0 6a66 	vmov.f32	s12, s13
 8008adc:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8008ae0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008ae4:	ee66 5a86 	vmul.f32	s11, s13, s12
 8008ae8:	ee36 6a47 	vsub.f32	s12, s12, s14
 8008aec:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8008af0:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8008af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008af8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008afc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008b00:	ee10 3a10 	vmov	r3, s0
 8008b04:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8008b08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b0c:	da1f      	bge.n	8008b4e <__ieee754_powf+0x54a>
 8008b0e:	f000 f91f 	bl	8008d50 <scalbnf>
 8008b12:	ee20 0a08 	vmul.f32	s0, s0, s16
 8008b16:	e58d      	b.n	8008634 <__ieee754_powf+0x30>
 8008b18:	4a1d      	ldr	r2, [pc, #116]	; (8008b90 <__ieee754_powf+0x58c>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	dd07      	ble.n	8008b2e <__ieee754_powf+0x52a>
 8008b1e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b26:	bf4c      	ite	mi
 8008b28:	2001      	movmi	r0, #1
 8008b2a:	2000      	movpl	r0, #0
 8008b2c:	e622      	b.n	8008774 <__ieee754_powf+0x170>
 8008b2e:	d108      	bne.n	8008b42 <__ieee754_powf+0x53e>
 8008b30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008b34:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8008b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b3c:	f6ff af7a 	blt.w	8008a34 <__ieee754_powf+0x430>
 8008b40:	e7ed      	b.n	8008b1e <__ieee754_powf+0x51a>
 8008b42:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8008b46:	f73f af75 	bgt.w	8008a34 <__ieee754_powf+0x430>
 8008b4a:	2000      	movs	r0, #0
 8008b4c:	e78c      	b.n	8008a68 <__ieee754_powf+0x464>
 8008b4e:	ee00 3a10 	vmov	s0, r3
 8008b52:	e7de      	b.n	8008b12 <__ieee754_powf+0x50e>
 8008b54:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008b58:	e56c      	b.n	8008634 <__ieee754_powf+0x30>
 8008b5a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8008b94 <__ieee754_powf+0x590>
 8008b5e:	e569      	b.n	8008634 <__ieee754_powf+0x30>
 8008b60:	eeb0 0a48 	vmov.f32	s0, s16
 8008b64:	e566      	b.n	8008634 <__ieee754_powf+0x30>
 8008b66:	2600      	movs	r6, #0
 8008b68:	e591      	b.n	800868e <__ieee754_powf+0x8a>
 8008b6a:	bf00      	nop
 8008b6c:	ff800000 	.word	0xff800000
 8008b70:	3f317218 	.word	0x3f317218
 8008b74:	3f317200 	.word	0x3f317200
 8008b78:	35bfbe8c 	.word	0x35bfbe8c
 8008b7c:	b5ddea0e 	.word	0xb5ddea0e
 8008b80:	3331bb4c 	.word	0x3331bb4c
 8008b84:	388ab355 	.word	0x388ab355
 8008b88:	bb360b61 	.word	0xbb360b61
 8008b8c:	3e2aaaab 	.word	0x3e2aaaab
 8008b90:	43160000 	.word	0x43160000
 8008b94:	00000000 	.word	0x00000000

08008b98 <atanf>:
 8008b98:	b538      	push	{r3, r4, r5, lr}
 8008b9a:	ee10 5a10 	vmov	r5, s0
 8008b9e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8008ba2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8008ba6:	eef0 7a40 	vmov.f32	s15, s0
 8008baa:	db10      	blt.n	8008bce <atanf+0x36>
 8008bac:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008bb0:	dd04      	ble.n	8008bbc <atanf+0x24>
 8008bb2:	ee70 7a00 	vadd.f32	s15, s0, s0
 8008bb6:	eeb0 0a67 	vmov.f32	s0, s15
 8008bba:	bd38      	pop	{r3, r4, r5, pc}
 8008bbc:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8008cf4 <atanf+0x15c>
 8008bc0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8008cf8 <atanf+0x160>
 8008bc4:	2d00      	cmp	r5, #0
 8008bc6:	bfd8      	it	le
 8008bc8:	eef0 7a47 	vmovle.f32	s15, s14
 8008bcc:	e7f3      	b.n	8008bb6 <atanf+0x1e>
 8008bce:	4b4b      	ldr	r3, [pc, #300]	; (8008cfc <atanf+0x164>)
 8008bd0:	429c      	cmp	r4, r3
 8008bd2:	dc10      	bgt.n	8008bf6 <atanf+0x5e>
 8008bd4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8008bd8:	da0a      	bge.n	8008bf0 <atanf+0x58>
 8008bda:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8008d00 <atanf+0x168>
 8008bde:	ee30 7a07 	vadd.f32	s14, s0, s14
 8008be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008be6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8008bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bee:	dce2      	bgt.n	8008bb6 <atanf+0x1e>
 8008bf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bf4:	e013      	b.n	8008c1e <atanf+0x86>
 8008bf6:	f000 f8a3 	bl	8008d40 <fabsf>
 8008bfa:	4b42      	ldr	r3, [pc, #264]	; (8008d04 <atanf+0x16c>)
 8008bfc:	429c      	cmp	r4, r3
 8008bfe:	dc4f      	bgt.n	8008ca0 <atanf+0x108>
 8008c00:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8008c04:	429c      	cmp	r4, r3
 8008c06:	dc41      	bgt.n	8008c8c <atanf+0xf4>
 8008c08:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8008c0c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008c10:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008c14:	2300      	movs	r3, #0
 8008c16:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008c1a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008c1e:	1c5a      	adds	r2, r3, #1
 8008c20:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8008c24:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8008d08 <atanf+0x170>
 8008c28:	eddf 5a38 	vldr	s11, [pc, #224]	; 8008d0c <atanf+0x174>
 8008c2c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8008d10 <atanf+0x178>
 8008c30:	ee66 6a06 	vmul.f32	s13, s12, s12
 8008c34:	eee6 5a87 	vfma.f32	s11, s13, s14
 8008c38:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8008d14 <atanf+0x17c>
 8008c3c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008c40:	eddf 5a35 	vldr	s11, [pc, #212]	; 8008d18 <atanf+0x180>
 8008c44:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008c48:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8008d1c <atanf+0x184>
 8008c4c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008c50:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008d20 <atanf+0x188>
 8008c54:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008c58:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8008d24 <atanf+0x18c>
 8008c5c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8008c60:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8008d28 <atanf+0x190>
 8008c64:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008c68:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8008d2c <atanf+0x194>
 8008c6c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8008c70:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8008d30 <atanf+0x198>
 8008c74:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008c78:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008c7c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008c80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008c84:	d121      	bne.n	8008cca <atanf+0x132>
 8008c86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008c8a:	e794      	b.n	8008bb6 <atanf+0x1e>
 8008c8c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008c90:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008c94:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008c98:	2301      	movs	r3, #1
 8008c9a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008c9e:	e7be      	b.n	8008c1e <atanf+0x86>
 8008ca0:	4b24      	ldr	r3, [pc, #144]	; (8008d34 <atanf+0x19c>)
 8008ca2:	429c      	cmp	r4, r3
 8008ca4:	dc0b      	bgt.n	8008cbe <atanf+0x126>
 8008ca6:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8008caa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cae:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008cb2:	2302      	movs	r3, #2
 8008cb4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008cb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cbc:	e7af      	b.n	8008c1e <atanf+0x86>
 8008cbe:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008cc2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	e7a9      	b.n	8008c1e <atanf+0x86>
 8008cca:	4a1b      	ldr	r2, [pc, #108]	; (8008d38 <atanf+0x1a0>)
 8008ccc:	491b      	ldr	r1, [pc, #108]	; (8008d3c <atanf+0x1a4>)
 8008cce:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008cd2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008cd6:	edd3 6a00 	vldr	s13, [r3]
 8008cda:	ee37 7a66 	vsub.f32	s14, s14, s13
 8008cde:	2d00      	cmp	r5, #0
 8008ce0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008ce4:	edd2 7a00 	vldr	s15, [r2]
 8008ce8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008cec:	bfb8      	it	lt
 8008cee:	eef1 7a67 	vneglt.f32	s15, s15
 8008cf2:	e760      	b.n	8008bb6 <atanf+0x1e>
 8008cf4:	3fc90fdb 	.word	0x3fc90fdb
 8008cf8:	bfc90fdb 	.word	0xbfc90fdb
 8008cfc:	3edfffff 	.word	0x3edfffff
 8008d00:	7149f2ca 	.word	0x7149f2ca
 8008d04:	3f97ffff 	.word	0x3f97ffff
 8008d08:	3c8569d7 	.word	0x3c8569d7
 8008d0c:	3d4bda59 	.word	0x3d4bda59
 8008d10:	bd6ef16b 	.word	0xbd6ef16b
 8008d14:	3d886b35 	.word	0x3d886b35
 8008d18:	3dba2e6e 	.word	0x3dba2e6e
 8008d1c:	3e124925 	.word	0x3e124925
 8008d20:	3eaaaaab 	.word	0x3eaaaaab
 8008d24:	bd15a221 	.word	0xbd15a221
 8008d28:	bd9d8795 	.word	0xbd9d8795
 8008d2c:	bde38e38 	.word	0xbde38e38
 8008d30:	be4ccccd 	.word	0xbe4ccccd
 8008d34:	401bffff 	.word	0x401bffff
 8008d38:	08009284 	.word	0x08009284
 8008d3c:	08009294 	.word	0x08009294

08008d40 <fabsf>:
 8008d40:	ee10 3a10 	vmov	r3, s0
 8008d44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d48:	ee00 3a10 	vmov	s0, r3
 8008d4c:	4770      	bx	lr
	...

08008d50 <scalbnf>:
 8008d50:	ee10 3a10 	vmov	r3, s0
 8008d54:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8008d58:	d02b      	beq.n	8008db2 <scalbnf+0x62>
 8008d5a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008d5e:	d302      	bcc.n	8008d66 <scalbnf+0x16>
 8008d60:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008d64:	4770      	bx	lr
 8008d66:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8008d6a:	d123      	bne.n	8008db4 <scalbnf+0x64>
 8008d6c:	4b24      	ldr	r3, [pc, #144]	; (8008e00 <scalbnf+0xb0>)
 8008d6e:	eddf 7a25 	vldr	s15, [pc, #148]	; 8008e04 <scalbnf+0xb4>
 8008d72:	4298      	cmp	r0, r3
 8008d74:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008d78:	db17      	blt.n	8008daa <scalbnf+0x5a>
 8008d7a:	ee10 3a10 	vmov	r3, s0
 8008d7e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008d82:	3a19      	subs	r2, #25
 8008d84:	f24c 3150 	movw	r1, #50000	; 0xc350
 8008d88:	4288      	cmp	r0, r1
 8008d8a:	dd15      	ble.n	8008db8 <scalbnf+0x68>
 8008d8c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8008e08 <scalbnf+0xb8>
 8008d90:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8008e0c <scalbnf+0xbc>
 8008d94:	ee10 3a10 	vmov	r3, s0
 8008d98:	eeb0 7a67 	vmov.f32	s14, s15
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	bfb8      	it	lt
 8008da0:	eef0 7a66 	vmovlt.f32	s15, s13
 8008da4:	ee27 0a87 	vmul.f32	s0, s15, s14
 8008da8:	4770      	bx	lr
 8008daa:	eddf 7a19 	vldr	s15, [pc, #100]	; 8008e10 <scalbnf+0xc0>
 8008dae:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008db2:	4770      	bx	lr
 8008db4:	0dd2      	lsrs	r2, r2, #23
 8008db6:	e7e5      	b.n	8008d84 <scalbnf+0x34>
 8008db8:	4410      	add	r0, r2
 8008dba:	28fe      	cmp	r0, #254	; 0xfe
 8008dbc:	dce6      	bgt.n	8008d8c <scalbnf+0x3c>
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	dd06      	ble.n	8008dd0 <scalbnf+0x80>
 8008dc2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008dc6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008dca:	ee00 3a10 	vmov	s0, r3
 8008dce:	4770      	bx	lr
 8008dd0:	f110 0f16 	cmn.w	r0, #22
 8008dd4:	da09      	bge.n	8008dea <scalbnf+0x9a>
 8008dd6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8008e10 <scalbnf+0xc0>
 8008dda:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8008e14 <scalbnf+0xc4>
 8008dde:	ee10 3a10 	vmov	r3, s0
 8008de2:	eeb0 7a67 	vmov.f32	s14, s15
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	e7d9      	b.n	8008d9e <scalbnf+0x4e>
 8008dea:	3019      	adds	r0, #25
 8008dec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008df0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008df4:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8008e18 <scalbnf+0xc8>
 8008df8:	ee07 3a90 	vmov	s15, r3
 8008dfc:	e7d7      	b.n	8008dae <scalbnf+0x5e>
 8008dfe:	bf00      	nop
 8008e00:	ffff3cb0 	.word	0xffff3cb0
 8008e04:	4c000000 	.word	0x4c000000
 8008e08:	7149f2ca 	.word	0x7149f2ca
 8008e0c:	f149f2ca 	.word	0xf149f2ca
 8008e10:	0da24260 	.word	0x0da24260
 8008e14:	8da24260 	.word	0x8da24260
 8008e18:	33000000 	.word	0x33000000

08008e1c <with_errnof>:
 8008e1c:	b513      	push	{r0, r1, r4, lr}
 8008e1e:	4604      	mov	r4, r0
 8008e20:	ed8d 0a01 	vstr	s0, [sp, #4]
 8008e24:	f7fd fa22 	bl	800626c <__errno>
 8008e28:	ed9d 0a01 	vldr	s0, [sp, #4]
 8008e2c:	6004      	str	r4, [r0, #0]
 8008e2e:	b002      	add	sp, #8
 8008e30:	bd10      	pop	{r4, pc}

08008e32 <xflowf>:
 8008e32:	b130      	cbz	r0, 8008e42 <xflowf+0x10>
 8008e34:	eef1 7a40 	vneg.f32	s15, s0
 8008e38:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008e3c:	2022      	movs	r0, #34	; 0x22
 8008e3e:	f7ff bfed 	b.w	8008e1c <with_errnof>
 8008e42:	eef0 7a40 	vmov.f32	s15, s0
 8008e46:	e7f7      	b.n	8008e38 <xflowf+0x6>

08008e48 <__math_uflowf>:
 8008e48:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008e50 <__math_uflowf+0x8>
 8008e4c:	f7ff bff1 	b.w	8008e32 <xflowf>
 8008e50:	10000000 	.word	0x10000000

08008e54 <__math_oflowf>:
 8008e54:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008e5c <__math_oflowf+0x8>
 8008e58:	f7ff bfeb 	b.w	8008e32 <xflowf>
 8008e5c:	70000000 	.word	0x70000000

08008e60 <_init>:
 8008e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e62:	bf00      	nop
 8008e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e66:	bc08      	pop	{r3}
 8008e68:	469e      	mov	lr, r3
 8008e6a:	4770      	bx	lr

08008e6c <_fini>:
 8008e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e6e:	bf00      	nop
 8008e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e72:	bc08      	pop	{r3}
 8008e74:	469e      	mov	lr, r3
 8008e76:	4770      	bx	lr
