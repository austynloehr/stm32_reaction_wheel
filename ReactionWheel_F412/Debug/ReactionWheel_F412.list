
ReactionWheel_F412.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acf8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  0800aec8  0800aec8  0001aec8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2bc  0800b2bc  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2bc  0800b2bc  0001b2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2c4  0800b2c4  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2c4  0800b2c4  0001b2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2c8  0800b2c8  0001b2c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800b2cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  200001fc  0800b4c8  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005fc  0800b4c8  000205fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b928  00000000  00000000  000202e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044dd  00000000  00000000  0003bc0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a8  00000000  00000000  000400f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fa0  00000000  00000000  00041598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c26  00000000  00000000  00042538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002349a  00000000  00000000  0006715e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2617  00000000  00000000  0008a5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000649c  00000000  00000000  0014cc10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001530ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000880  00000000  00000000  00153115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  00153995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aeb0 	.word	0x0800aeb0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	0800aeb0 	.word	0x0800aeb0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <App_Config>:

bool EnableBtn_bool;
float RollAngle_deg;

/* Start global function definition */
Config_Bus_t App_Config(Config_HAL_Bus_t Config_HAL_Bus){
 8000f84:	b084      	sub	sp, #16
 8000f86:	b5b0      	push	{r4, r5, r7, lr}
 8000f88:	b0a8      	sub	sp, #160	; 0xa0
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000f8e:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 8000f92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Config_Bus_t Config_Bus;

	HAL_Delay(200);
 8000f96:	20c8      	movs	r0, #200	; 0xc8
 8000f98:	f002 fdde 	bl	8003b58 <HAL_Delay>

	Config_Bus.Config_HAL_Bus = Config_HAL_Bus;
 8000f9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fa0:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8000fa4:	224c      	movs	r2, #76	; 0x4c
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f007 fd8a 	bl	8008ac0 <memcpy>
	Config_Bus.Config_MPU6050_Bus = Config_MPU6050(Config_HAL_Bus.hi2c);
 8000fac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 f8b5 	bl	8001124 <Config_MPU6050>
 8000fba:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8000fbe:	463d      	mov	r5, r7
 8000fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc8:	682b      	ldr	r3, [r5, #0]
 8000fca:	6023      	str	r3, [r4, #0]

	Config_DSP();
 8000fcc:	f000 f890 	bl	80010f0 <Config_DSP>
	Config_VESC(Config_HAL_Bus.hcan);
 8000fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 facd 	bl	8001574 <Config_VESC>

	return Config_Bus;
 8000fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fe2:	2270      	movs	r2, #112	; 0x70
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f007 fd6b 	bl	8008ac0 <memcpy>
}
 8000fea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000fec:	37a0      	adds	r7, #160	; 0xa0
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000ff4:	b004      	add	sp, #16
 8000ff6:	4770      	bx	lr

08000ff8 <App_Main>:

void App_Main(Config_Bus_t Config_Bus){
 8000ff8:	b084      	sub	sp, #16
 8000ffa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ffc:	b0c1      	sub	sp, #260	; 0x104
 8000ffe:	af1e      	add	r7, sp, #120	; 0x78
 8001000:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8001004:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HI_Bus_t HI_Bus;
	IP_Bus_t IP_Bus;
	CT_Bus_t CT_Bus;
	OP_Bus_t OP_Bus;

	HI_Bus = IO_HardwareInputs(Config_Bus);
 8001008:	f107 0478 	add.w	r4, r7, #120	; 0x78
 800100c:	4668      	mov	r0, sp
 800100e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001012:	2264      	movs	r2, #100	; 0x64
 8001014:	4619      	mov	r1, r3
 8001016:	f007 fd53 	bl	8008ac0 <memcpy>
 800101a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800101e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001020:	4620      	mov	r0, r4
 8001022:	f001 fb33 	bl	800268c <IO_HardwareInputs>
	IP_Bus = PR_InputProcessing(Config_Bus, HI_Bus);
 8001026:	f107 0560 	add.w	r5, r7, #96	; 0x60
 800102a:	ac19      	add	r4, sp, #100	; 0x64
 800102c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001030:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001032:	c407      	stmia	r4!, {r0, r1, r2}
 8001034:	8023      	strh	r3, [r4, #0]
 8001036:	4668      	mov	r0, sp
 8001038:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800103c:	2264      	movs	r2, #100	; 0x64
 800103e:	4619      	mov	r1, r3
 8001040:	f007 fd3e 	bl	8008ac0 <memcpy>
 8001044:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001048:	cb0e      	ldmia	r3, {r1, r2, r3}
 800104a:	4628      	mov	r0, r5
 800104c:	f001 ffbc 	bl	8002fc8 <PR_InputProcessing>
	CT_Bus = CT_Control(HI_Bus, IP_Bus);
 8001050:	f107 0614 	add.w	r6, r7, #20
 8001054:	ad01      	add	r5, sp, #4
 8001056:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800105a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800105c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800105e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001062:	e885 0003 	stmia.w	r5, {r0, r1}
 8001066:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800106a:	f8ad 3000 	strh.w	r3, [sp]
 800106e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001072:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001074:	4630      	mov	r0, r6
 8001076:	f000 fadb 	bl	8001630 <CT_Control>
	OP_Bus = PR_OutputProcessing(CT_Bus);
 800107a:	1d3e      	adds	r6, r7, #4
 800107c:	466d      	mov	r5, sp
 800107e:	f107 0420 	add.w	r4, r7, #32
 8001082:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001084:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001086:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001088:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800108a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800108c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800108e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001092:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800109c:	4630      	mov	r0, r6
 800109e:	f001 ffc6 	bl	800302e <PR_OutputProcessing>
	IO_HardwareOutputs(Config_Bus, OP_Bus);
 80010a2:	ac18      	add	r4, sp, #96	; 0x60
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80010ac:	4668      	mov	r0, sp
 80010ae:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80010b2:	2260      	movs	r2, #96	; 0x60
 80010b4:	4619      	mov	r1, r3
 80010b6:	f007 fd03 	bl	8008ac0 <memcpy>
 80010ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80010be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010c0:	f001 fb0f 	bl	80026e2 <IO_HardwareOutputs>

	EnableBtn_bool = HI_Bus.HI_DiscreteInput_Bus.EnableBtn_bool;
 80010c4:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 80010c8:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <App_Main+0xf0>)
 80010ca:	701a      	strb	r2, [r3, #0]
	RollAngle_deg = CT_Bus.VS_Bus.VS_Orientation_Bus.CompFiltOrientation.roll_deg;
 80010cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ce:	4a07      	ldr	r2, [pc, #28]	; (80010ec <App_Main+0xf4>)
 80010d0:	6013      	str	r3, [r2, #0]

	HAL_Delay(4);
 80010d2:	2004      	movs	r0, #4
 80010d4:	f002 fd40 	bl	8003b58 <HAL_Delay>
}
 80010d8:	bf00      	nop
 80010da:	378c      	adds	r7, #140	; 0x8c
 80010dc:	46bd      	mov	sp, r7
 80010de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80010e2:	b004      	add	sp, #16
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000218 	.word	0x20000218
 80010ec:	2000021c 	.word	0x2000021c

080010f0 <Config_DSP>:

static const float iirAccelCoeffs[IIR_NUM_COEFF] = {0.010432413371093418, 0.020864826742186836, 0.010432413371093418, 1.6909963768874425, -0.7327260303718163};
/*End global variable definitions */


void Config_DSP(void){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df1_init_f32(&S_AccelRoll, IIR_NUM_STAGES, (float32_t *) &iirAccelCoeffs[0], (float32_t *) &FiltAccelRollState[0]);
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <Config_DSP+0x20>)
 80010f6:	4a07      	ldr	r2, [pc, #28]	; (8001114 <Config_DSP+0x24>)
 80010f8:	2101      	movs	r1, #1
 80010fa:	4807      	ldr	r0, [pc, #28]	; (8001118 <Config_DSP+0x28>)
 80010fc:	f006 fdde 	bl	8007cbc <arm_biquad_cascade_df1_init_f32>
	arm_biquad_cascade_df1_init_f32(&S_AccelPitch, IIR_NUM_STAGES, (float32_t *) &iirAccelCoeffs[0], (float32_t *) &FiltAccelPitchState[0]);
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <Config_DSP+0x2c>)
 8001102:	4a04      	ldr	r2, [pc, #16]	; (8001114 <Config_DSP+0x24>)
 8001104:	2101      	movs	r1, #1
 8001106:	4806      	ldr	r0, [pc, #24]	; (8001120 <Config_DSP+0x30>)
 8001108:	f006 fdd8 	bl	8007cbc <arm_biquad_cascade_df1_init_f32>
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000238 	.word	0x20000238
 8001114:	0800aee0 	.word	0x0800aee0
 8001118:	20000220 	.word	0x20000220
 800111c:	20000248 	.word	0x20000248
 8001120:	2000022c 	.word	0x2000022c

08001124 <Config_MPU6050>:
static MPU6050_IMUSensitivityData_t MPU6050_GetSens(const AFS_SEL_enum_t accelRange, const FS_SEL_enum_t gyroRange);
static MPU6050_IMUOffsetData_t MPU6050_CalibrateOffsets(I2C_HandleTypeDef *hi2c, Config_MPU6050_Bus_t Config_MPU6050_Bus);
/* Start static function prototypes */

/* Start global function definitions */
Config_MPU6050_Bus_t Config_MPU6050(I2C_HandleTypeDef *hi2c){
 8001124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001126:	b0a3      	sub	sp, #140	; 0x8c
 8001128:	af08      	add	r7, sp, #32
 800112a:	6278      	str	r0, [r7, #36]	; 0x24
 800112c:	6239      	str	r1, [r7, #32]
	Config_MPU6050_Bus_t Config_MPU6050_Bus;

	MPU6050_Init(hi2c);
 800112e:	6a38      	ldr	r0, [r7, #32]
 8001130:	f000 f840 	bl	80011b4 <MPU6050_Init>

	Config_MPU6050_Bus.Sensitivity = MPU6050_GetSens(accelRange, gyroRange);
 8001134:	2301      	movs	r3, #1
 8001136:	2201      	movs	r2, #1
 8001138:	4611      	mov	r1, r2
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f8ac 	bl	8001298 <MPU6050_GetSens>
 8001140:	eeb0 7a40 	vmov.f32	s14, s0
 8001144:	eef0 7a60 	vmov.f32	s15, s1
 8001148:	ed87 7a11 	vstr	s14, [r7, #68]	; 0x44
 800114c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

	Config_MPU6050_Bus.Offsets = (MPU6050_IMUOffsetData_t) {0, 0, 0, 0, 0, 0, 0};
 8001150:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
 8001160:	615a      	str	r2, [r3, #20]
 8001162:	619a      	str	r2, [r3, #24]
	Config_MPU6050_Bus.Offsets = MPU6050_CalibrateOffsets(hi2c, Config_MPU6050_Bus);
 8001164:	463e      	mov	r6, r7
 8001166:	466d      	mov	r5, sp
 8001168:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800116c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800116e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001170:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001174:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001178:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800117c:	cb0c      	ldmia	r3, {r2, r3}
 800117e:	6a39      	ldr	r1, [r7, #32]
 8001180:	4630      	mov	r0, r6
 8001182:	f000 f8f1 	bl	8001368 <MPU6050_CalibrateOffsets>
 8001186:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800118a:	463d      	mov	r5, r7
 800118c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800118e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001190:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001194:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return Config_MPU6050_Bus;
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	461d      	mov	r5, r3
 800119c:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80011a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a8:	6823      	ldr	r3, [r4, #0]
 80011aa:	602b      	str	r3, [r5, #0]
}
 80011ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011ae:	376c      	adds	r7, #108	; 0x6c
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011b4 <MPU6050_Init>:
/* End global function definitions */

/* Start static function definitions */
static void MPU6050_Init(I2C_HandleTypeDef *hi2c){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af04      	add	r7, sp, #16
 80011ba:	6078      	str	r0, [r7, #4]
	static uint8_t regData;
	static uint8_t numReg = 1;

	/* I2C device check */
	// Raise error later
	HAL_StatusTypeDef deviceCheck = HAL_I2C_IsDeviceReady(hi2c, MPU6050_ADDR, 1, I2C_TIMEOUT);
 80011bc:	2332      	movs	r3, #50	; 0x32
 80011be:	2201      	movs	r2, #1
 80011c0:	21d0      	movs	r1, #208	; 0xd0
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f004 faa2 	bl	800570c <HAL_I2C_IsDeviceReady>
 80011c8:	4603      	mov	r3, r0
 80011ca:	73fb      	strb	r3, [r7, #15]

	if (deviceCheck != HAL_OK){
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MPU6050_Init+0x22>
		Error_Handler();
 80011d2:	f002 f9af 	bl	8003534 <Error_Handler>
	}

	/* Wake IMU */
	regData = CLKSEL;
 80011d6:	4b2e      	ldr	r3, [pc, #184]	; (8001290 <MPU6050_Init+0xdc>)
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, PWR_MGMT1_REG, REG_LEN, &regData, numReg, I2C_TIMEOUT);
 80011dc:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <MPU6050_Init+0xe0>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	2232      	movs	r2, #50	; 0x32
 80011e4:	9202      	str	r2, [sp, #8]
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	4b29      	ldr	r3, [pc, #164]	; (8001290 <MPU6050_Init+0xdc>)
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2301      	movs	r3, #1
 80011ee:	226b      	movs	r2, #107	; 0x6b
 80011f0:	21d0      	movs	r1, #208	; 0xd0
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f003 ff6a 	bl	80050cc <HAL_I2C_Mem_Write>

	/* Calculate SMPLRT_DIV from desired sample rate */
	regData = SMPLRT_DIV;
 80011f8:	4b25      	ldr	r3, [pc, #148]	; (8001290 <MPU6050_Init+0xdc>)
 80011fa:	2207      	movs	r2, #7
 80011fc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, SMPRT_DIV_REG, REG_LEN, &regData, numReg, I2C_TIMEOUT);
 80011fe:	4b25      	ldr	r3, [pc, #148]	; (8001294 <MPU6050_Init+0xe0>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b29b      	uxth	r3, r3
 8001204:	2232      	movs	r2, #50	; 0x32
 8001206:	9202      	str	r2, [sp, #8]
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	4b21      	ldr	r3, [pc, #132]	; (8001290 <MPU6050_Init+0xdc>)
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2301      	movs	r3, #1
 8001210:	2219      	movs	r2, #25
 8001212:	21d0      	movs	r1, #208	; 0xd0
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f003 ff59 	bl	80050cc <HAL_I2C_Mem_Write>

	/* Set gyro config */
	regData = (uint8_t) (gyroRange << 3);
 800121a:	2301      	movs	r3, #1
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	b2da      	uxtb	r2, r3
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <MPU6050_Init+0xdc>)
 8001222:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, GYRO_CONFIG_REG, REG_LEN, &regData, numReg, I2C_TIMEOUT);
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <MPU6050_Init+0xe0>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b29b      	uxth	r3, r3
 800122a:	2232      	movs	r2, #50	; 0x32
 800122c:	9202      	str	r2, [sp, #8]
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	4b17      	ldr	r3, [pc, #92]	; (8001290 <MPU6050_Init+0xdc>)
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2301      	movs	r3, #1
 8001236:	221b      	movs	r2, #27
 8001238:	21d0      	movs	r1, #208	; 0xd0
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f003 ff46 	bl	80050cc <HAL_I2C_Mem_Write>

	/* Set accel config */
	regData = (uint8_t) (accelRange << 3);
 8001240:	2301      	movs	r3, #1
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b12      	ldr	r3, [pc, #72]	; (8001290 <MPU6050_Init+0xdc>)
 8001248:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, ACCEL_CONFIG_REG, REG_LEN, &regData, numReg, I2C_TIMEOUT);
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <MPU6050_Init+0xe0>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	b29b      	uxth	r3, r3
 8001250:	2232      	movs	r2, #50	; 0x32
 8001252:	9202      	str	r2, [sp, #8]
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <MPU6050_Init+0xdc>)
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2301      	movs	r3, #1
 800125c:	221c      	movs	r2, #28
 800125e:	21d0      	movs	r1, #208	; 0xd0
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f003 ff33 	bl	80050cc <HAL_I2C_Mem_Write>

	/*Configure low pass filter*/
	regData = DLPF_CFG;
 8001266:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <MPU6050_Init+0xdc>)
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, CONFIG_REG, REG_LEN, &regData, numReg, I2C_TIMEOUT);
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MPU6050_Init+0xe0>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b29b      	uxth	r3, r3
 8001272:	2232      	movs	r2, #50	; 0x32
 8001274:	9202      	str	r2, [sp, #8]
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <MPU6050_Init+0xdc>)
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2301      	movs	r3, #1
 800127e:	221a      	movs	r2, #26
 8001280:	21d0      	movs	r1, #208	; 0xd0
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f003 ff22 	bl	80050cc <HAL_I2C_Mem_Write>
}
 8001288:	bf00      	nop
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000258 	.word	0x20000258
 8001294:	20000004 	.word	0x20000004

08001298 <MPU6050_GetSens>:

static MPU6050_IMUSensitivityData_t MPU6050_GetSens(const AFS_SEL_enum_t accelRange, const FS_SEL_enum_t gyroRange){
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	460a      	mov	r2, r1
 80012a2:	73fb      	strb	r3, [r7, #15]
 80012a4:	4613      	mov	r3, r2
 80012a6:	73bb      	strb	r3, [r7, #14]
	MPU6050_IMUSensitivityData_t IMUSensitivity;

	/* Determine sensor sensitivity based on sensor range */
	switch (accelRange){
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d81a      	bhi.n	80012e4 <MPU6050_GetSens+0x4c>
 80012ae:	a201      	add	r2, pc, #4	; (adr r2, 80012b4 <MPU6050_GetSens+0x1c>)
 80012b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b4:	080012c5 	.word	0x080012c5
 80012b8:	080012cd 	.word	0x080012cd
 80012bc:	080012d5 	.word	0x080012d5
 80012c0:	080012dd 	.word	0x080012dd
	case g2:
		IMUSensitivity.AccelSens = 16384.0;
 80012c4:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 80012c8:	613b      	str	r3, [r7, #16]
		break;
 80012ca:	e010      	b.n	80012ee <MPU6050_GetSens+0x56>
	case g4:
		IMUSensitivity.AccelSens = 8192.0;
 80012cc:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 80012d0:	613b      	str	r3, [r7, #16]
		break;
 80012d2:	e00c      	b.n	80012ee <MPU6050_GetSens+0x56>
	case g8:
		IMUSensitivity.AccelSens = 4096.0;
 80012d4:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 80012d8:	613b      	str	r3, [r7, #16]
		break;
 80012da:	e008      	b.n	80012ee <MPU6050_GetSens+0x56>
	case g16:
		IMUSensitivity.AccelSens = 2048.0;
 80012dc:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 80012e0:	613b      	str	r3, [r7, #16]
		break;
 80012e2:	e004      	b.n	80012ee <MPU6050_GetSens+0x56>
	default:
		IMUSensitivity.AccelSens = 0;
 80012e4:	f04f 0300 	mov.w	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
		Error_Handler();
 80012ea:	f002 f923 	bl	8003534 <Error_Handler>
	}

	/* Determine sensor sensitivity based on sensor range */
	switch (gyroRange){
 80012ee:	7bbb      	ldrb	r3, [r7, #14]
 80012f0:	2b03      	cmp	r3, #3
 80012f2:	d817      	bhi.n	8001324 <MPU6050_GetSens+0x8c>
 80012f4:	a201      	add	r2, pc, #4	; (adr r2, 80012fc <MPU6050_GetSens+0x64>)
 80012f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fa:	bf00      	nop
 80012fc:	0800130d 	.word	0x0800130d
 8001300:	08001313 	.word	0x08001313
 8001304:	08001319 	.word	0x08001319
 8001308:	0800131f 	.word	0x0800131f
	case w250:
		IMUSensitivity.GyroSens = 131.0;
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <MPU6050_GetSens+0xc0>)
 800130e:	617b      	str	r3, [r7, #20]
		break;
 8001310:	e00d      	b.n	800132e <MPU6050_GetSens+0x96>
	case w500:
		IMUSensitivity.GyroSens = 65.5;
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <MPU6050_GetSens+0xc4>)
 8001314:	617b      	str	r3, [r7, #20]
		break;
 8001316:	e00a      	b.n	800132e <MPU6050_GetSens+0x96>
	case w1000:
		IMUSensitivity.GyroSens = 32.8;
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MPU6050_GetSens+0xc8>)
 800131a:	617b      	str	r3, [r7, #20]
		break;
 800131c:	e007      	b.n	800132e <MPU6050_GetSens+0x96>
	case w2000:
		IMUSensitivity.GyroSens = 16.4;
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <MPU6050_GetSens+0xcc>)
 8001320:	617b      	str	r3, [r7, #20]
		break;
 8001322:	e004      	b.n	800132e <MPU6050_GetSens+0x96>
	default:
		IMUSensitivity.GyroSens = 0;
 8001324:	f04f 0300 	mov.w	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
		Error_Handler();
 800132a:	f002 f903 	bl	8003534 <Error_Handler>
	}

	return IMUSensitivity;
 800132e:	f107 0318 	add.w	r3, r7, #24
 8001332:	f107 0210 	add.w	r2, r7, #16
 8001336:	e892 0003 	ldmia.w	r2, {r0, r1}
 800133a:	e883 0003 	stmia.w	r3, {r0, r1}
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	ee07 2a10 	vmov	s14, r2
 8001346:	ee07 3a90 	vmov	s15, r3
}
 800134a:	eeb0 0a47 	vmov.f32	s0, s14
 800134e:	eef0 0a67 	vmov.f32	s1, s15
 8001352:	3720      	adds	r7, #32
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	43030000 	.word	0x43030000
 800135c:	42830000 	.word	0x42830000
 8001360:	42033333 	.word	0x42033333
 8001364:	41833333 	.word	0x41833333

08001368 <MPU6050_CalibrateOffsets>:

static MPU6050_IMUOffsetData_t MPU6050_CalibrateOffsets(I2C_HandleTypeDef *hi2c, Config_MPU6050_Bus_t Config_MPU6050_Bus){
 8001368:	b082      	sub	sp, #8
 800136a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136c:	b0a5      	sub	sp, #148	; 0x94
 800136e:	af0a      	add	r7, sp, #40	; 0x28
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	6039      	str	r1, [r7, #0]
 8001374:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001378:	e881 000c 	stmia.w	r1, {r2, r3}
	MPU6050_IMUOffsetData_t IMUOffsets;
	HI_MPU6050_Bus_t HI_MPU6050_Bus;
	IP_MPU6050_Bus_t IP_MPU6050_Bus;

	uint32_t numSamples = 2000;
 800137c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001380:	64bb      	str	r3, [r7, #72]	; 0x48

	float sumAx = 0;
 8001382:	f04f 0300 	mov.w	r3, #0
 8001386:	667b      	str	r3, [r7, #100]	; 0x64
	float sumAy = 0;
 8001388:	f04f 0300 	mov.w	r3, #0
 800138c:	663b      	str	r3, [r7, #96]	; 0x60
	float sumAz = 0;
 800138e:	f04f 0300 	mov.w	r3, #0
 8001392:	65fb      	str	r3, [r7, #92]	; 0x5c
	float sumWx = 0;
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	65bb      	str	r3, [r7, #88]	; 0x58
	float sumWy = 0;
 800139a:	f04f 0300 	mov.w	r3, #0
 800139e:	657b      	str	r3, [r7, #84]	; 0x54
	float sumWz = 0;
 80013a0:	f04f 0300 	mov.w	r3, #0
 80013a4:	653b      	str	r3, [r7, #80]	; 0x50

	for(uint32_t i = 0; i < numSamples; i++){
 80013a6:	2300      	movs	r3, #0
 80013a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013aa:	e04c      	b.n	8001446 <MPU6050_CalibrateOffsets+0xde>
		HI_MPU6050_Bus = HI_MPU6050(hi2c);
 80013ac:	f107 0320 	add.w	r3, r7, #32
 80013b0:	6839      	ldr	r1, [r7, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f001 fa0f 	bl	80027d6 <HI_MPU6050>
		IP_MPU6050_Bus = IP_MPU6050(HI_MPU6050_Bus, Config_MPU6050_Bus);
 80013b8:	f107 0608 	add.w	r6, r7, #8
 80013bc:	466c      	mov	r4, sp
 80013be:	f107 0580 	add.w	r5, r7, #128	; 0x80
 80013c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ca:	682b      	ldr	r3, [r5, #0]
 80013cc:	6023      	str	r3, [r4, #0]
 80013ce:	f107 0320 	add.w	r3, r7, #32
 80013d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013d4:	4630      	mov	r0, r6
 80013d6:	f001 fba0 	bl	8002b1a <IP_MPU6050>

		sumAx += IP_MPU6050_Bus.accel.XOUT_ms2;
 80013da:	edd7 7a02 	vldr	s15, [r7, #8]
 80013de:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80013e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		sumAy += IP_MPU6050_Bus.accel.YOUT_ms2;
 80013ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ee:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80013f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		sumAz += IP_MPU6050_Bus.accel.ZOUT_ms2;
 80013fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80013fe:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001406:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

		sumWx += IP_MPU6050_Bus.gyro.XOUT_dps;
 800140a:	edd7 7a05 	vldr	s15, [r7, #20]
 800140e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001416:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		sumWy += IP_MPU6050_Bus.gyro.YOUT_dps;
 800141a:	edd7 7a06 	vldr	s15, [r7, #24]
 800141e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001426:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		sumWz += IP_MPU6050_Bus.gyro.ZOUT_dps;
 800142a:	edd7 7a07 	vldr	s15, [r7, #28]
 800142e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001432:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001436:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

		HAL_Delay(5);
 800143a:	2005      	movs	r0, #5
 800143c:	f002 fb8c 	bl	8003b58 <HAL_Delay>
	for(uint32_t i = 0; i < numSamples; i++){
 8001440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001442:	3301      	adds	r3, #1
 8001444:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001446:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800144a:	429a      	cmp	r2, r3
 800144c:	d3ae      	bcc.n	80013ac <MPU6050_CalibrateOffsets+0x44>
	}

	IMUOffsets.AxOffset = (9.80665 * cos(45 * PI / 180))- (sumAx / numSamples);
 800144e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001450:	ee07 3a90 	vmov	s15, r3
 8001454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001458:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800145c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001460:	ee16 0a90 	vmov	r0, s13
 8001464:	f7ff f890 	bl	8000588 <__aeabi_f2d>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	a13d      	add	r1, pc, #244	; (adr r1, 8001564 <MPU6050_CalibrateOffsets+0x1fc>)
 800146e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001472:	f7fe ff29 	bl	80002c8 <__aeabi_dsub>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4610      	mov	r0, r2
 800147c:	4619      	mov	r1, r3
 800147e:	f7ff fbb3 	bl	8000be8 <__aeabi_d2f>
 8001482:	4603      	mov	r3, r0
 8001484:	62fb      	str	r3, [r7, #44]	; 0x2c
	IMUOffsets.AyOffset = (9.80665 * sin(45 * PI / 180)) - (sumAy / numSamples);
 8001486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001488:	ee07 3a90 	vmov	s15, r3
 800148c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001490:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001494:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001498:	ee16 0a90 	vmov	r0, s13
 800149c:	f7ff f874 	bl	8000588 <__aeabi_f2d>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	a131      	add	r1, pc, #196	; (adr r1, 800156c <MPU6050_CalibrateOffsets+0x204>)
 80014a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014aa:	f7fe ff0d 	bl	80002c8 <__aeabi_dsub>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	f7ff fb97 	bl	8000be8 <__aeabi_d2f>
 80014ba:	4603      	mov	r3, r0
 80014bc:	633b      	str	r3, [r7, #48]	; 0x30
	IMUOffsets.AzOffset = 0 - (sumAz / numSamples);
 80014be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014c0:	ee07 3a90 	vmov	s15, r3
 80014c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014c8:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80014cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014d0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001560 <MPU6050_CalibrateOffsets+0x1f8>
 80014d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014d8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	IMUOffsets.WxOffset = 0 - (sumWx / numSamples);
 80014dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014de:	ee07 3a90 	vmov	s15, r3
 80014e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014e6:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80014ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ee:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001560 <MPU6050_CalibrateOffsets+0x1f8>
 80014f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	IMUOffsets.WyOffset = 0 - (sumWy / numSamples);
 80014fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001504:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001508:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800150c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001560 <MPU6050_CalibrateOffsets+0x1f8>
 8001510:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001514:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	IMUOffsets.WzOffset = 0 - (sumWz / numSamples);
 8001518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800151a:	ee07 3a90 	vmov	s15, r3
 800151e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001522:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8001526:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800152a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001560 <MPU6050_CalibrateOffsets+0x1f8>
 800152e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001532:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	IMUOffsets.SensCalibrated_bool = 1;
 8001536:	2301      	movs	r3, #1
 8001538:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	return IMUOffsets;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	461d      	mov	r5, r3
 8001540:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001548:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800154c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	376c      	adds	r7, #108	; 0x6c
 8001554:	46bd      	mov	sp, r7
 8001556:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800155a:	b002      	add	sp, #8
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	00000000 	.word	0x00000000
 8001564:	deb8aa4c 	.word	0xdeb8aa4c
 8001568:	401bbcc5 	.word	0x401bbcc5
 800156c:	f3100e45 	.word	0xf3100e45
 8001570:	401bbcc5 	.word	0x401bbcc5

08001574 <Config_VESC>:
CAN_RxHeaderTypeDef RxHeader;
uint8_t RxData[8];
/* End global variables */

/* Start global function definitions */
void Config_VESC(CAN_HandleTypeDef *hcan){
 8001574:	b580      	push	{r7, lr}
 8001576:	b08e      	sub	sp, #56	; 0x38
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800157c:	2301      	movs	r3, #1
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
	canfilterconfig.FilterBank = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
	canfilterconfig.FilterIdHigh = 0x0000;
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterIdLow = ((CAN_ID1 << 3) ^ (CAN_IDE1 << 2)) ^ (CAN_RTR1 << 1);
 800158c:	f644 030c 	movw	r3, #18444	; 0x480c
 8001590:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterMaskIdHigh = 0x0000;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDLIST;
 800159a:	2301      	movs	r3, #1
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800159e:	2301      	movs	r3, #1
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28

	HAL_CAN_ConfigFilter(hcan, &canfilterconfig);
 80015a2:	f107 030c 	add.w	r3, r7, #12
 80015a6:	4619      	mov	r1, r3
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f002 fcef 	bl	8003f8c <HAL_CAN_ConfigFilter>

	void (*pCAN_RxCallback)(CAN_HandleTypeDef *_hcan) = &CAN_HAL_RxFifo0MsgPendingCallback;
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <Config_VESC+0x90>)
 80015b0:	637b      	str	r3, [r7, #52]	; 0x34

	if(HAL_CAN_RegisterCallback(hcan, HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID, pCAN_RxCallback) != HAL_OK){
 80015b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015b4:	2106      	movs	r1, #6
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f002 fc38 	bl	8003e2c <HAL_CAN_RegisterCallback>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <Config_VESC+0x52>
	  Error_Handler();
 80015c2:	f001 ffb7 	bl	8003534 <Error_Handler>
	}

	HAL_CAN_Start(hcan);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f002 fdc0 	bl	800414c <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80015cc:	2102      	movs	r1, #2
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f002 ff12 	bl	80043f8 <HAL_CAN_ActivateNotification>

	TxHeader.DLC = 4;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <Config_VESC+0x94>)
 80015d6:	2204      	movs	r2, #4
 80015d8:	611a      	str	r2, [r3, #16]
	TxHeader.ExtId = 0x301;
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <Config_VESC+0x94>)
 80015dc:	f240 3201 	movw	r2, #769	; 0x301
 80015e0:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_EXT;
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <Config_VESC+0x94>)
 80015e4:	2204      	movs	r2, #4
 80015e6:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80015e8:	4b07      	ldr	r3, [pc, #28]	; (8001608 <Config_VESC+0x94>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0;
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <Config_VESC+0x94>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
	TxHeader.TransmitGlobalTime = DISABLE;
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <Config_VESC+0x94>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	751a      	strb	r2, [r3, #20]
}
 80015fa:	bf00      	nop
 80015fc:	3738      	adds	r7, #56	; 0x38
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	0800160d 	.word	0x0800160d
 8001608:	2000025c 	.word	0x2000025c

0800160c <CAN_HAL_RxFifo0MsgPendingCallback>:

void CAN_HAL_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <CAN_HAL_RxFifo0MsgPendingCallback+0x1c>)
 8001616:	4a05      	ldr	r2, [pc, #20]	; (800162c <CAN_HAL_RxFifo0MsgPendingCallback+0x20>)
 8001618:	2100      	movs	r1, #0
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f002 fdda 	bl	80041d4 <HAL_CAN_GetRxMessage>
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000290 	.word	0x20000290
 800162c:	20000274 	.word	0x20000274

08001630 <CT_Control>:
static VS_Bus_t CT_VirtualSensors(HI_Bus_t HI_Bus, IP_Bus_t IP_Bus, CT_Bus_t Last_CT_Bus);
static CT_Bus_t CT_Controllers(IP_Bus_t IP_Bus, VS_Bus_t VS_Bus);
/* End Static function prototypes */

/* Start global function definitions */
CT_Bus_t CT_Control(HI_Bus_t HI_Bus, IP_Bus_t IP_Bus){
 8001630:	b084      	sub	sp, #16
 8001632:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001634:	b0bf      	sub	sp, #252	; 0xfc
 8001636:	af1a      	add	r7, sp, #104	; 0x68
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 800163e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	VS_Bus_t VS_Bus;
	CT_Bus_t CT_Bus;

	VS_Bus = CT_VirtualSensors(HI_Bus, IP_Bus, Last_CT_Bus);
 8001642:	f107 0658 	add.w	r6, r7, #88	; 0x58
 8001646:	4a26      	ldr	r2, [pc, #152]	; (80016e0 <CT_Control+0xb0>)
 8001648:	ab07      	add	r3, sp, #28
 800164a:	4611      	mov	r1, r2
 800164c:	224c      	movs	r2, #76	; 0x4c
 800164e:	4618      	mov	r0, r3
 8001650:	f007 fa36 	bl	8008ac0 <memcpy>
 8001654:	ad01      	add	r5, sp, #4
 8001656:	f107 04bc 	add.w	r4, r7, #188	; 0xbc
 800165a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800165c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800165e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001662:	e885 0003 	stmia.w	r5, {r0, r1}
 8001666:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800166a:	f8ad 3000 	strh.w	r3, [sp]
 800166e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001672:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001674:	4630      	mov	r0, r6
 8001676:	f000 f835 	bl	80016e4 <CT_VirtualSensors>
	CT_Bus = CT_Controllers(IP_Bus, VS_Bus);
 800167a:	f107 060c 	add.w	r6, r7, #12
 800167e:	ad03      	add	r5, sp, #12
 8001680:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001686:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800168a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800168c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800168e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001690:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001694:	e885 0003 	stmia.w	r5, {r0, r1}
 8001698:	466c      	mov	r4, sp
 800169a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800169e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80016a6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ac:	4630      	mov	r0, r6
 80016ae:	f000 f862 	bl	8001776 <CT_Controllers>

	Last_CT_Bus = CT_Bus;
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <CT_Control+0xb0>)
 80016b4:	4618      	mov	r0, r3
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	224c      	movs	r2, #76	; 0x4c
 80016bc:	4619      	mov	r1, r3
 80016be:	f007 f9ff 	bl	8008ac0 <memcpy>

	return CT_Bus;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f107 030c 	add.w	r3, r7, #12
 80016ca:	224c      	movs	r2, #76	; 0x4c
 80016cc:	4619      	mov	r1, r3
 80016ce:	f007 f9f7 	bl	8008ac0 <memcpy>
}
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	3794      	adds	r7, #148	; 0x94
 80016d6:	46bd      	mov	sp, r7
 80016d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80016dc:	b004      	add	sp, #16
 80016de:	4770      	bx	lr
 80016e0:	20000298 	.word	0x20000298

080016e4 <CT_VirtualSensors>:
/* End global function definitions */

/* Start Static function definitions */
static VS_Bus_t CT_VirtualSensors(HI_Bus_t HI_Bus, IP_Bus_t IP_Bus, CT_Bus_t Last_CT_Bus){
 80016e4:	b084      	sub	sp, #16
 80016e6:	b5b0      	push	{r4, r5, r7, lr}
 80016e8:	b0a0      	sub	sp, #128	; 0x80
 80016ea:	af04      	add	r7, sp, #16
 80016ec:	6378      	str	r0, [r7, #52]	; 0x34
 80016ee:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80016f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	VS_Bus_t VS_Bus;

	VS_Bus.VS_ExecutionRate_Bus = VS_ExecutionRate();
 80016f6:	f000 fcb1 	bl	800205c <VS_ExecutionRate>
 80016fa:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
	VS_Bus.VS_Orientation_Bus = EstimateOrientation(IP_Bus.IP_MPU6050_Bus);
 80016fe:	463d      	mov	r5, r7
 8001700:	466c      	mov	r4, sp
 8001702:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001706:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800170a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800170e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001712:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001714:	4628      	mov	r0, r5
 8001716:	f000 fcdb 	bl	80020d0 <EstimateOrientation>
 800171a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800171e:	463d      	mov	r5, r7
 8001720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001728:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800172c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	VS_Bus.VS_StateRequest_Bus = VS_StateRequest(HI_Bus.HI_DiscreteInput_Bus.EnableBtn_bool, Last_CT_Bus.CT_PrimaryStateMachine_Bus.CurrentState_enum, VS_Bus.VS_ExecutionRate_Bus.dt);
 8001730:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8001734:	f897 20e4 	ldrb.w	r2, [r7, #228]	; 0xe4
 8001738:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800173c:	eeb0 0a67 	vmov.f32	s0, s15
 8001740:	4611      	mov	r1, r2
 8001742:	4618      	mov	r0, r3
 8001744:	f000 fc48 	bl	8001fd8 <VS_StateRequest>
 8001748:	f887 006c 	strb.w	r0, [r7, #108]	; 0x6c

	return VS_Bus;
 800174c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800174e:	461d      	mov	r5, r3
 8001750:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001758:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800175a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800175c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800175e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001760:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001764:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001768:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800176a:	3770      	adds	r7, #112	; 0x70
 800176c:	46bd      	mov	sp, r7
 800176e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001772:	b004      	add	sp, #16
 8001774:	4770      	bx	lr

08001776 <CT_Controllers>:

static CT_Bus_t CT_Controllers(IP_Bus_t IP_Bus, VS_Bus_t VS_Bus){
 8001776:	b084      	sub	sp, #16
 8001778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177a:	b0a9      	sub	sp, #164	; 0xa4
 800177c:	af10      	add	r7, sp, #64	; 0x40
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8001784:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	CT_Bus_t CT_Bus;

	CT_Bus.VS_Bus = VS_Bus;
 8001788:	f107 0414 	add.w	r4, r7, #20
 800178c:	f107 0594 	add.w	r5, r7, #148	; 0x94
 8001790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800179a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800179c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80017a0:	e884 0003 	stmia.w	r4, {r0, r1}
	CT_Bus.CT_PrimaryStateMachine_Bus = CT_PrimaryStateMachine(VS_Bus.VS_StateRequest_Bus.StateRequest_enum, false, VS_Bus.VS_Orientation_Bus.CompFiltOrientation.roll_deg, true);
 80017a4:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 80017a8:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80017ac:	2201      	movs	r2, #1
 80017ae:	eeb0 0a67 	vmov.f32	s0, s15
 80017b2:	2100      	movs	r1, #0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f000 f937 	bl	8001a28 <CT_PrimaryStateMachine>
 80017ba:	4603      	mov	r3, r0
 80017bc:	64fb      	str	r3, [r7, #76]	; 0x4c
	CT_Bus.CT_Log_Bus = CT_Logging(IP_Bus.IP_MPU6050_Bus, VS_Bus.VS_Orientation_Bus);
 80017be:	463e      	mov	r6, r7
 80017c0:	ad03      	add	r5, sp, #12
 80017c2:	f107 0498 	add.w	r4, r7, #152	; 0x98
 80017c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017d2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80017d6:	466c      	mov	r4, sp
 80017d8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80017dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80017e4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80017e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017ea:	4630      	mov	r0, r6
 80017ec:	f000 f8aa 	bl	8001944 <CT_Logging>
 80017f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017f4:	463a      	mov	r2, r7
 80017f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017fa:	e883 0003 	stmia.w	r3, {r0, r1}
	CT_Bus.CT_Balance_Bus = CT_BalanceController(0, VS_Bus.VS_Orientation_Bus.CompFiltOrientation.roll_deg);
 80017fe:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001802:	463b      	mov	r3, r7
 8001804:	eeb0 0a67 	vmov.f32	s0, s15
 8001808:	2100      	movs	r1, #0
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f816 	bl	800183c <CT_BalanceController>
 8001810:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001814:	463a      	mov	r2, r7
 8001816:	e892 0003 	ldmia.w	r2, {r0, r1}
 800181a:	e883 0003 	stmia.w	r3, {r0, r1}

	return CT_Bus;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4618      	mov	r0, r3
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	224c      	movs	r2, #76	; 0x4c
 8001828:	4619      	mov	r1, r3
 800182a:	f007 f949 	bl	8008ac0 <memcpy>
}
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	3764      	adds	r7, #100	; 0x64
 8001832:	46bd      	mov	sp, r7
 8001834:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001838:	b004      	add	sp, #16
 800183a:	4770      	bx	lr

0800183c <CT_BalanceController>:
/* Start Static function prototypes */
static int8_t signf(float x);
/* End Static function prototypes */

/* Start Global Function Definitions */
CT_Balance_Bus_t CT_BalanceController(uint8_t BalanceEnable_bool, float RollAng_deg){
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	460b      	mov	r3, r1
 8001846:	ed87 0a01 	vstr	s0, [r7, #4]
 800184a:	72fb      	strb	r3, [r7, #11]
	CT_Balance_Bus_t CT_Balance_Bus;

	uint32_t MaxMotorSpeed_rpm = 5000;
 800184c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001850:	623b      	str	r3, [r7, #32]
	uint32_t MaxRollAng_deg = 45;
 8001852:	232d      	movs	r3, #45	; 0x2d
 8001854:	61fb      	str	r3, [r7, #28]

	// Limit throttle request to -1 / 1
	float ThrottleReq_pct = RollAng_deg / MaxRollAng_deg;
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	ee07 3a90 	vmov	s15, r3
 800185c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001860:	edd7 6a01 	vldr	s13, [r7, #4]
 8001864:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001868:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	if(fabsf(ThrottleReq_pct) > 1){
 800186c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001870:	eef0 7ae7 	vabs.f32	s15, s15
 8001874:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001878:	eef4 7ac7 	vcmpe.f32	s15, s14
 800187c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001880:	dd0a      	ble.n	8001898 <CT_BalanceController+0x5c>
		ThrottleReq_pct = 1 * signf(ThrottleReq_pct);
 8001882:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001886:	f000 f839 	bl	80018fc <signf>
 800188a:	4603      	mov	r3, r0
 800188c:	ee07 3a90 	vmov	s15, r3
 8001890:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001894:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	}

	// Throttle deadzone
	if(fabsf(RollAng_deg) < 2){
 8001898:	edd7 7a01 	vldr	s15, [r7, #4]
 800189c:	eef0 7ae7 	vabs.f32	s15, s15
 80018a0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80018a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ac:	d502      	bpl.n	80018b4 <CT_BalanceController+0x78>
		BalanceEnable_bool = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	72fb      	strb	r3, [r7, #11]
 80018b2:	e001      	b.n	80018b8 <CT_BalanceController+0x7c>
	} else{
		BalanceEnable_bool = 1;
 80018b4:	2301      	movs	r3, #1
 80018b6:	72fb      	strb	r3, [r7, #11]
	}

	// Zero out throttle if not enabled
	if(!BalanceEnable_bool){
 80018b8:	7afb      	ldrb	r3, [r7, #11]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d102      	bne.n	80018c4 <CT_BalanceController+0x88>
		ThrottleReq_pct = 0;
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	CT_Balance_Bus.MotorSpeedReq_rpm = ThrottleReq_pct * MaxMotorSpeed_rpm;
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	ee07 3a90 	vmov	s15, r3
 80018ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018ce:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018da:	ee17 3a90 	vmov	r3, s15
 80018de:	617b      	str	r3, [r7, #20]
	CT_Balance_Bus.ThrottleReq_pct = ThrottleReq_pct;
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	61bb      	str	r3, [r7, #24]

	return CT_Balance_Bus;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	461a      	mov	r2, r3
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018f0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	3728      	adds	r7, #40	; 0x28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <signf>:
/* End Global Function Definitions */

/* Start Static Function Definitions */
static int8_t signf(float x){
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	ed87 0a01 	vstr	s0, [r7, #4]
	int8_t sign;

	if (x > 0){
 8001906:	edd7 7a01 	vldr	s15, [r7, #4]
 800190a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800190e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001912:	dd02      	ble.n	800191a <signf+0x1e>
		sign = 1;
 8001914:	2301      	movs	r3, #1
 8001916:	73fb      	strb	r3, [r7, #15]
 8001918:	e00b      	b.n	8001932 <signf+0x36>
	}
	else if (x < 0) {
 800191a:	edd7 7a01 	vldr	s15, [r7, #4]
 800191e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001926:	d502      	bpl.n	800192e <signf+0x32>
		sign = -1;
 8001928:	23ff      	movs	r3, #255	; 0xff
 800192a:	73fb      	strb	r3, [r7, #15]
 800192c:	e001      	b.n	8001932 <signf+0x36>
	}
	else {
		sign = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	73fb      	strb	r3, [r7, #15]
	}

	return sign;
 8001932:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <CT_Logging>:
/* Start Function Prototypes */
static StringPacket_t MakeLogString(uint8_t *msg, uint16_t msgLen, IP_MPU6050_Bus_t IP_MPU6050_Bus, VS_Orientation_Bus_t VS_Orientation_Bus);
/* End Function Prototypes */

/* Start Global Function Definitions */
CT_Log_Bus_t CT_Logging(IP_MPU6050_Bus_t IP_MPU6050_Bus, VS_Orientation_Bus_t VS_Orientation_Bus){
 8001944:	b084      	sub	sp, #16
 8001946:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001948:	b099      	sub	sp, #100	; 0x64
 800194a:	af12      	add	r7, sp, #72	; 0x48
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001952:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	StringPacket_t StringPacket;
	CT_Log_Bus_t Log_Bus;

	StringPacket = MakeLogString(msg, msgLen, IP_MPU6050_Bus, VS_Orientation_Bus);
 8001956:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <CT_Logging+0x74>)
 8001958:	f8b3 c000 	ldrh.w	ip, [r3]
 800195c:	f107 0610 	add.w	r6, r7, #16
 8001960:	ad05      	add	r5, sp, #20
 8001962:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001968:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800196a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800196c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800196e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001972:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001976:	466d      	mov	r5, sp
 8001978:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800197c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800197e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001980:	6823      	ldr	r3, [r4, #0]
 8001982:	602b      	str	r3, [r5, #0]
 8001984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001986:	4662      	mov	r2, ip
 8001988:	490c      	ldr	r1, [pc, #48]	; (80019bc <CT_Logging+0x78>)
 800198a:	4630      	mov	r0, r6
 800198c:	f000 f818 	bl	80019c0 <MakeLogString>

	Log_Bus.pData = StringPacket.pData;
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	60bb      	str	r3, [r7, #8]
	Log_Bus.Size = StringPacket.Size;
 8001994:	8abb      	ldrh	r3, [r7, #20]
 8001996:	81bb      	strh	r3, [r7, #12]

	return Log_Bus;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	461a      	mov	r2, r3
 800199c:	f107 0308 	add.w	r3, r7, #8
 80019a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80019a4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	371c      	adds	r7, #28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80019b2:	b004      	add	sp, #16
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20000006 	.word	0x20000006
 80019bc:	200002e4 	.word	0x200002e4

080019c0 <MakeLogString>:
/* End Global Function Definitions */

/* Start Static Function Definitions */
static StringPacket_t MakeLogString(uint8_t *msg, uint16_t msgLen, IP_MPU6050_Bus_t IP_MPU6050_Bus, VS_Orientation_Bus_t VS_Orientation_Bus){
 80019c0:	b082      	sub	sp, #8
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b08a      	sub	sp, #40	; 0x28
 80019c6:	af02      	add	r7, sp, #8
 80019c8:	60f8      	str	r0, [r7, #12]
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019ce:	4613      	mov	r3, r2
 80019d0:	80fb      	strh	r3, [r7, #6]
	StringPacket_t StringPacket;

	uint32_t tick = HAL_GetTick();
 80019d2:	f002 f8b5 	bl	8003b40 <HAL_GetTick>
 80019d6:	61f8      	str	r0, [r7, #28]

	memset(msg, '\0', msgLen);  // Set unused indexes to null char
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	461a      	mov	r2, r3
 80019dc:	2100      	movs	r1, #0
 80019de:	68b8      	ldr	r0, [r7, #8]
 80019e0:	f006 ffef 	bl	80089c2 <memset>
//	sprintf((char*) msg, "TK:%lu,AX:%.3f,AY:%.3f,AZ:%.3f,WX:%.3f,WY:%.3f,WZ:%.3f\n\r",
//			tick,
//			IP_MPU6050_Bus.accel.XOUT_ms2, IP_MPU6050_Bus.accel.YOUT_ms2, IP_MPU6050_Bus.accel.ZOUT_ms2,
//			IP_MPU6050_Bus.gyro.XOUT_dps, IP_MPU6050_Bus.gyro.YOUT_dps, IP_MPU6050_Bus.gyro.ZOUT_dps);

	sprintf((char*) msg, "TK:%lu,compRoll:%.5f\n\r", tick, VS_Orientation_Bus.CompFiltOrientation.roll_deg);
 80019e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe fdce 	bl	8000588 <__aeabi_f2d>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	e9cd 2300 	strd	r2, r3, [sp]
 80019f4:	69fa      	ldr	r2, [r7, #28]
 80019f6:	490b      	ldr	r1, [pc, #44]	; (8001a24 <MakeLogString+0x64>)
 80019f8:	68b8      	ldr	r0, [r7, #8]
 80019fa:	f006 ff7f 	bl	80088fc <siprintf>

	StringPacket.pData = msg;
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	617b      	str	r3, [r7, #20]
	StringPacket.Size = msgLen;
 8001a02:	88fb      	ldrh	r3, [r7, #6]
 8001a04:	833b      	strh	r3, [r7, #24]

	return StringPacket;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	f107 0314 	add.w	r3, r7, #20
 8001a0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a12:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	3720      	adds	r7, #32
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a20:	b002      	add	sp, #8
 8001a22:	4770      	bx	lr
 8001a24:	0800aec8 	.word	0x0800aec8

08001a28 <CT_PrimaryStateMachine>:
/* Start Static Function Prototypes */

/* End Static Function Prototypes */

/* Start Global Function Definitions */
CT_PrimaryStateMachine_Bus_t CT_PrimaryStateMachine(StateReq StateRequest_enum, bool ErrorInterrupt_bool, float RollAngle_deg, bool IMUCalComplete_bool){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af04      	add	r7, sp, #16
 8001a2e:	4603      	mov	r3, r0
 8001a30:	ed87 0a00 	vstr	s0, [r7]
 8001a34:	71fb      	strb	r3, [r7, #7]
 8001a36:	460b      	mov	r3, r1
 8001a38:	71bb      	strb	r3, [r7, #6]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	717b      	strb	r3, [r7, #5]
	RT_MODEL *const rtM = rtMPtr;
 8001a3e:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <CT_PrimaryStateMachine+0xac>)
 8001a40:	617b      	str	r3, [r7, #20]
	CT_PrimaryStateMachine_Bus_t CT_PrimaryStateMachine_Bus;

	/* Initialize state machine outputs */
	if (StateMachineInit_bool){
 8001a42:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <CT_PrimaryStateMachine+0xb0>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00b      	beq.n	8001a62 <CT_PrimaryStateMachine+0x3a>
		/* Pack model data into RTM */
		rtM->dwork = &rtDW;
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	4a23      	ldr	r2, [pc, #140]	; (8001adc <CT_PrimaryStateMachine+0xb4>)
 8001a4e:	605a      	str	r2, [r3, #4]
		/* Initialize model */
		PrimaryStateMachine_initialize(rtM, &StateRequest_enum, &CurrentState_enum);
 8001a50:	1dfb      	adds	r3, r7, #7
 8001a52:	4a23      	ldr	r2, [pc, #140]	; (8001ae0 <CT_PrimaryStateMachine+0xb8>)
 8001a54:	4619      	mov	r1, r3
 8001a56:	6978      	ldr	r0, [r7, #20]
 8001a58:	f000 f976 	bl	8001d48 <PrimaryStateMachine_initialize>

		StateMachineInit_bool = false;
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <CT_PrimaryStateMachine+0xb0>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
	}

	PrimaryStateMachine_step(rtM, StateRequest_enum, ErrorInterrupt_bool, RollAngle_deg, StartBalanceThreshold_deg,
 8001a62:	79f9      	ldrb	r1, [r7, #7]
 8001a64:	4b1f      	ldr	r3, [pc, #124]	; (8001ae4 <CT_PrimaryStateMachine+0xbc>)
 8001a66:	edd3 7a00 	vldr	s15, [r3]
 8001a6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <CT_PrimaryStateMachine+0xc0>)
 8001a6c:	ed93 7a00 	vldr	s14, [r3]
 8001a70:	797b      	ldrb	r3, [r7, #5]
 8001a72:	79ba      	ldrb	r2, [r7, #6]
 8001a74:	481d      	ldr	r0, [pc, #116]	; (8001aec <CT_PrimaryStateMachine+0xc4>)
 8001a76:	9003      	str	r0, [sp, #12]
 8001a78:	481d      	ldr	r0, [pc, #116]	; (8001af0 <CT_PrimaryStateMachine+0xc8>)
 8001a7a:	9002      	str	r0, [sp, #8]
 8001a7c:	481d      	ldr	r0, [pc, #116]	; (8001af4 <CT_PrimaryStateMachine+0xcc>)
 8001a7e:	9001      	str	r0, [sp, #4]
 8001a80:	4817      	ldr	r0, [pc, #92]	; (8001ae0 <CT_PrimaryStateMachine+0xb8>)
 8001a82:	9000      	str	r0, [sp, #0]
 8001a84:	eeb0 1a47 	vmov.f32	s2, s14
 8001a88:	eef0 0a67 	vmov.f32	s1, s15
 8001a8c:	ed97 0a00 	vldr	s0, [r7]
 8001a90:	6978      	ldr	r0, [r7, #20]
 8001a92:	f000 f831 	bl	8001af8 <PrimaryStateMachine_step>
		StopBalanceThreshold_deg, IMUCalComplete_bool, &CurrentState_enum, &MotorEnable_bool, &GLEDState_enum, &RLEDState_enum);

	CT_PrimaryStateMachine_Bus.CurrentState_enum = CurrentState_enum;
 8001a96:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <CT_PrimaryStateMachine+0xb8>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	733b      	strb	r3, [r7, #12]
	CT_PrimaryStateMachine_Bus.MotorEnable_bool = MotorEnable_bool;
 8001a9c:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <CT_PrimaryStateMachine+0xcc>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	737b      	strb	r3, [r7, #13]
	CT_PrimaryStateMachine_Bus.GLEDStateReq_enum = GLEDState_enum;
 8001aa2:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <CT_PrimaryStateMachine+0xc8>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	73bb      	strb	r3, [r7, #14]
	CT_PrimaryStateMachine_Bus.RLEDStateReq_enum = RLEDState_enum;
 8001aa8:	4b10      	ldr	r3, [pc, #64]	; (8001aec <CT_PrimaryStateMachine+0xc4>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	73fb      	strb	r3, [r7, #15]

	return CT_PrimaryStateMachine_Bus;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	7c3a      	ldrb	r2, [r7, #16]
 8001ab6:	f362 0307 	bfi	r3, r2, #0, #8
 8001aba:	7c7a      	ldrb	r2, [r7, #17]
 8001abc:	f362 230f 	bfi	r3, r2, #8, #8
 8001ac0:	7cba      	ldrb	r2, [r7, #18]
 8001ac2:	f362 4317 	bfi	r3, r2, #16, #8
 8001ac6:	7cfa      	ldrb	r2, [r7, #19]
 8001ac8:	f362 631f 	bfi	r3, r2, #24, #8

}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	2000030c 	.word	0x2000030c
 8001ad8:	20000008 	.word	0x20000008
 8001adc:	20000314 	.word	0x20000314
 8001ae0:	20000319 	.word	0x20000319
 8001ae4:	2000000c 	.word	0x2000000c
 8001ae8:	20000010 	.word	0x20000010
 8001aec:	2000031c 	.word	0x2000031c
 8001af0:	2000031b 	.word	0x2000031b
 8001af4:	2000031a 	.word	0x2000031a

08001af8 <PrimaryStateMachine_step>:
  rtU_VS_StateRequest_enum, bool rtU_ErrorInterrupt_bool, float
  rtU_RollAngle_deg, float rtU_StartBalanceThreshold_deg, float
  rtU_StopBalanceThreshold_deg, bool rtU_IMUCalComplete_bool, PrimaryState
  *rtY_CT_CurrentState_enum, bool *rtY_CT_MotorEnable_bool, LEDState
  *rtY_CT_GLEDState_enum, LEDState *rtY_CT_RLEDState_enum)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b089      	sub	sp, #36	; 0x24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6178      	str	r0, [r7, #20]
 8001b00:	4608      	mov	r0, r1
 8001b02:	4611      	mov	r1, r2
 8001b04:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b08:	edc7 0a02 	vstr	s1, [r7, #8]
 8001b0c:	ed87 1a01 	vstr	s2, [r7, #4]
 8001b10:	461a      	mov	r2, r3
 8001b12:	4603      	mov	r3, r0
 8001b14:	74fb      	strb	r3, [r7, #19]
 8001b16:	460b      	mov	r3, r1
 8001b18:	74bb      	strb	r3, [r7, #18]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	747b      	strb	r3, [r7, #17]
  DW *rtDW = rtM->dwork;
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	61fb      	str	r3, [r7, #28]

  /* RelationalOperator: '<S1>/Compare' incorporates:
   *  Constant: '<S1>/Constant'
   *  Inport: '<Root>/VS_StateRequest_enum'
   */
  rtb_Compare = (rtU_VS_StateRequest_enum == ReqBalance);
 8001b24:	7cfb      	ldrb	r3, [r7, #19]
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	bf0c      	ite	eq
 8001b2a:	2301      	moveq	r3, #1
 8001b2c:	2300      	movne	r3, #0
 8001b2e:	76fb      	strb	r3, [r7, #27]
   *
   * Block description for '<S3>/Delay Input1':
   *
   *  Store in Global RAM
   */
  if (rtDW->is_active_c3_PrimaryStateMachin == 0U) {
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d115      	bne.n	8001b64 <PrimaryStateMachine_step+0x6c>
    rtDW->is_active_c3_PrimaryStateMachin = 1U;
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	701a      	strb	r2, [r3, #0]
    rtDW->is_c3_PrimaryStateMachine = IN_Normal;
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	2202      	movs	r2, #2
 8001b42:	705a      	strb	r2, [r3, #1]
    rtDW->is_Normal = IN_Standby;
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	2203      	movs	r2, #3
 8001b48:	709a      	strb	r2, [r3, #2]

    /* Outport: '<Root>/CT_MotorEnable_bool' */
    *rtY_CT_MotorEnable_bool = false;
 8001b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]

    /* Outport: '<Root>/CT_CurrentState_enum' */
    *rtY_CT_CurrentState_enum = Standby;
 8001b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b52:	2201      	movs	r2, #1
 8001b54:	701a      	strb	r2, [r3, #0]

    /* Outport: '<Root>/CT_RLEDState_enum' */
    *rtY_CT_RLEDState_enum = Off;
 8001b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]

    /* Outport: '<Root>/CT_GLEDState_enum' */
    *rtY_CT_GLEDState_enum = On;
 8001b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b5e:	2201      	movs	r2, #1
 8001b60:	701a      	strb	r2, [r3, #0]
 8001b62:	e0e8      	b.n	8001d36 <PrimaryStateMachine_step+0x23e>
  } else if (rtDW->is_c3_PrimaryStateMachine == IN_Error) {
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	785b      	ldrb	r3, [r3, #1]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d122      	bne.n	8001bb2 <PrimaryStateMachine_step+0xba>
    /* Outport: '<Root>/CT_CurrentState_enum' */
    *rtY_CT_CurrentState_enum = Error;
 8001b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]

    /* Outport: '<Root>/CT_RLEDState_enum' */
    *rtY_CT_RLEDState_enum = On;
 8001b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b74:	2201      	movs	r2, #1
 8001b76:	701a      	strb	r2, [r3, #0]

    /* Outport: '<Root>/CT_GLEDState_enum' */
    *rtY_CT_GLEDState_enum = Off;
 8001b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	701a      	strb	r2, [r3, #0]
    if (!rtU_ErrorInterrupt_bool) {
 8001b7e:	7cbb      	ldrb	r3, [r7, #18]
 8001b80:	f083 0301 	eor.w	r3, r3, #1
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 80d5 	beq.w	8001d36 <PrimaryStateMachine_step+0x23e>
      rtDW->is_c3_PrimaryStateMachine = IN_Normal;
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	705a      	strb	r2, [r3, #1]
      rtDW->is_Normal = IN_Standby;
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	2203      	movs	r2, #3
 8001b96:	709a      	strb	r2, [r3, #2]

      /* Outport: '<Root>/CT_MotorEnable_bool' */
      *rtY_CT_MotorEnable_bool = false;
 8001b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]

      /* Outport: '<Root>/CT_CurrentState_enum' */
      *rtY_CT_CurrentState_enum = Standby;
 8001b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	701a      	strb	r2, [r3, #0]

      /* Outport: '<Root>/CT_RLEDState_enum' */
      *rtY_CT_RLEDState_enum = Off;
 8001ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]

      /* Outport: '<Root>/CT_GLEDState_enum' */
      *rtY_CT_GLEDState_enum = On;
 8001baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bac:	2201      	movs	r2, #1
 8001bae:	701a      	strb	r2, [r3, #0]
 8001bb0:	e0c1      	b.n	8001d36 <PrimaryStateMachine_step+0x23e>
    }

    /* case IN_Normal: */
  } else if (rtU_ErrorInterrupt_bool) {
 8001bb2:	7cbb      	ldrb	r3, [r7, #18]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d01d      	beq.n	8001bf4 <PrimaryStateMachine_step+0xfc>
    if (rtDW->is_Normal == IN_MotorEnabled) {
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	789b      	ldrb	r3, [r3, #2]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d106      	bne.n	8001bce <PrimaryStateMachine_step+0xd6>
      rtDW->is_MotorEnabled = IN_NO_ACTIVE_CHILD;
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	70da      	strb	r2, [r3, #3]
      rtDW->is_Normal = IN_NO_ACTIVE_CHILD;
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	709a      	strb	r2, [r3, #2]
 8001bcc:	e002      	b.n	8001bd4 <PrimaryStateMachine_step+0xdc>
    } else {
      rtDW->is_Normal = IN_NO_ACTIVE_CHILD;
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	709a      	strb	r2, [r3, #2]
    }

    rtDW->is_c3_PrimaryStateMachine = IN_Error;
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	705a      	strb	r2, [r3, #1]

    /* Outport: '<Root>/CT_MotorEnable_bool' */
    *rtY_CT_MotorEnable_bool = false;
 8001bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bdc:	2200      	movs	r2, #0
 8001bde:	701a      	strb	r2, [r3, #0]

    /* Outport: '<Root>/CT_CurrentState_enum' */
    *rtY_CT_CurrentState_enum = Error;
 8001be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]

    /* Outport: '<Root>/CT_RLEDState_enum' */
    *rtY_CT_RLEDState_enum = On;
 8001be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001be8:	2201      	movs	r2, #1
 8001bea:	701a      	strb	r2, [r3, #0]

    /* Outport: '<Root>/CT_GLEDState_enum' */
    *rtY_CT_GLEDState_enum = Off;
 8001bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bee:	2200      	movs	r2, #0
 8001bf0:	701a      	strb	r2, [r3, #0]
 8001bf2:	e0a0      	b.n	8001d36 <PrimaryStateMachine_step+0x23e>
  } else {
    switch (rtDW->is_Normal) {
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	789b      	ldrb	r3, [r3, #2]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d002      	beq.n	8001c02 <PrimaryStateMachine_step+0x10a>
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d01f      	beq.n	8001c40 <PrimaryStateMachine_step+0x148>
 8001c00:	e06a      	b.n	8001cd8 <PrimaryStateMachine_step+0x1e0>
     case IN_CalibrateIMU:
      /* Outport: '<Root>/CT_CurrentState_enum' */
      *rtY_CT_CurrentState_enum = CalibrateIMU;
 8001c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c04:	2202      	movs	r2, #2
 8001c06:	701a      	strb	r2, [r3, #0]

      /* Outport: '<Root>/CT_RLEDState_enum' */
      *rtY_CT_RLEDState_enum = Blink;
 8001c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	701a      	strb	r2, [r3, #0]

      /* Outport: '<Root>/CT_GLEDState_enum' */
      *rtY_CT_GLEDState_enum = Blink;
 8001c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c10:	2202      	movs	r2, #2
 8001c12:	701a      	strb	r2, [r3, #0]
      if ((int32_t)rtU_IMUCalComplete_bool > (int32_t)rtDW->DelayInput1_DSTATE)
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	791b      	ldrb	r3, [r3, #4]
 8001c18:	7c7a      	ldrb	r2, [r7, #17]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	f240 8088 	bls.w	8001d30 <PrimaryStateMachine_step+0x238>
      {
        rtDW->is_Normal = IN_Standby;
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	2203      	movs	r2, #3
 8001c24:	709a      	strb	r2, [r3, #2]

        /* Outport: '<Root>/CT_MotorEnable_bool' */
        *rtY_CT_MotorEnable_bool = false;
 8001c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]

        /* Outport: '<Root>/CT_CurrentState_enum' */
        *rtY_CT_CurrentState_enum = Standby;
 8001c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2e:	2201      	movs	r2, #1
 8001c30:	701a      	strb	r2, [r3, #0]

        /* Outport: '<Root>/CT_RLEDState_enum' */
        *rtY_CT_RLEDState_enum = Off;
 8001c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]

        /* Outport: '<Root>/CT_GLEDState_enum' */
        *rtY_CT_GLEDState_enum = On;
 8001c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001c3e:	e077      	b.n	8001d30 <PrimaryStateMachine_step+0x238>

     case IN_MotorEnabled:
      /* Outport: '<Root>/CT_RLEDState_enum' */
      *rtY_CT_RLEDState_enum = Off;
 8001c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]

      /* Outport: '<Root>/CT_GLEDState_enum' */
      *rtY_CT_GLEDState_enum = Blink;
 8001c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c48:	2202      	movs	r2, #2
 8001c4a:	701a      	strb	r2, [r3, #0]
      if (!rtb_Compare) {
 8001c4c:	7efb      	ldrb	r3, [r7, #27]
 8001c4e:	f083 0301 	eor.w	r3, r3, #1
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00f      	beq.n	8001c78 <PrimaryStateMachine_step+0x180>
        rtDW->is_MotorEnabled = IN_NO_ACTIVE_CHILD;
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	70da      	strb	r2, [r3, #3]
        rtDW->is_Normal = IN_Standby;
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	2203      	movs	r2, #3
 8001c62:	709a      	strb	r2, [r3, #2]

        /* Outport: '<Root>/CT_MotorEnable_bool' */
        *rtY_CT_MotorEnable_bool = false;
 8001c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]

        /* Outport: '<Root>/CT_CurrentState_enum' */
        *rtY_CT_CurrentState_enum = Standby;
 8001c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	701a      	strb	r2, [r3, #0]

        /* Outport: '<Root>/CT_GLEDState_enum' */
        *rtY_CT_GLEDState_enum = On;
 8001c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c72:	2201      	movs	r2, #1
 8001c74:	701a      	strb	r2, [r3, #0]

          /* Outport: '<Root>/CT_CurrentState_enum' */
          *rtY_CT_CurrentState_enum = Balance;
        }
      }
      break;
 8001c76:	e05e      	b.n	8001d36 <PrimaryStateMachine_step+0x23e>
      } else if (rtDW->is_MotorEnabled == IN_Balance) {
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	78db      	ldrb	r3, [r3, #3]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d115      	bne.n	8001cac <PrimaryStateMachine_step+0x1b4>
        *rtY_CT_CurrentState_enum = Balance;
 8001c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c82:	2204      	movs	r2, #4
 8001c84:	701a      	strb	r2, [r3, #0]
        if (fabsf(rtU_RollAngle_deg) > rtU_StopBalanceThreshold_deg) {
 8001c86:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c8a:	eef0 7ae7 	vabs.f32	s15, s15
 8001c8e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9a:	d400      	bmi.n	8001c9e <PrimaryStateMachine_step+0x1a6>
      break;
 8001c9c:	e04b      	b.n	8001d36 <PrimaryStateMachine_step+0x23e>
          rtDW->is_MotorEnabled = IN_JumpUp;
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	70da      	strb	r2, [r3, #3]
          *rtY_CT_CurrentState_enum = JumpUp;
 8001ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	701a      	strb	r2, [r3, #0]
      break;
 8001caa:	e044      	b.n	8001d36 <PrimaryStateMachine_step+0x23e>
        *rtY_CT_CurrentState_enum = JumpUp;
 8001cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cae:	2203      	movs	r2, #3
 8001cb0:	701a      	strb	r2, [r3, #0]
        if (fabsf(rtU_RollAngle_deg) < rtU_StartBalanceThreshold_deg) {
 8001cb2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cb6:	eef0 7ae7 	vabs.f32	s15, s15
 8001cba:	ed97 7a02 	vldr	s14, [r7, #8]
 8001cbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc6:	dc00      	bgt.n	8001cca <PrimaryStateMachine_step+0x1d2>
      break;
 8001cc8:	e035      	b.n	8001d36 <PrimaryStateMachine_step+0x23e>
          rtDW->is_MotorEnabled = IN_Balance;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	70da      	strb	r2, [r3, #3]
          *rtY_CT_CurrentState_enum = Balance;
 8001cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd2:	2204      	movs	r2, #4
 8001cd4:	701a      	strb	r2, [r3, #0]
      break;
 8001cd6:	e02e      	b.n	8001d36 <PrimaryStateMachine_step+0x23e>

     default:
      /* Outport: '<Root>/CT_CurrentState_enum' */
      /* case IN_Standby: */
      *rtY_CT_CurrentState_enum = Standby;
 8001cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cda:	2201      	movs	r2, #1
 8001cdc:	701a      	strb	r2, [r3, #0]

      /* Outport: '<Root>/CT_RLEDState_enum' */
      *rtY_CT_RLEDState_enum = Off;
 8001cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]

      /* Outport: '<Root>/CT_GLEDState_enum' */
      *rtY_CT_GLEDState_enum = On;
 8001ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	701a      	strb	r2, [r3, #0]
      if (rtb_Compare) {
 8001cea:	7efb      	ldrb	r3, [r7, #27]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00f      	beq.n	8001d10 <PrimaryStateMachine_step+0x218>
        rtDW->is_Normal = IN_MotorEnabled;
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	709a      	strb	r2, [r3, #2]

        /* Outport: '<Root>/CT_MotorEnable_bool' */
        *rtY_CT_MotorEnable_bool = true;
 8001cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	701a      	strb	r2, [r3, #0]

        /* Outport: '<Root>/CT_GLEDState_enum' */
        *rtY_CT_GLEDState_enum = Blink;
 8001cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cfe:	2202      	movs	r2, #2
 8001d00:	701a      	strb	r2, [r3, #0]
        rtDW->is_MotorEnabled = IN_JumpUp;
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	2202      	movs	r2, #2
 8001d06:	70da      	strb	r2, [r3, #3]

        /* Outport: '<Root>/CT_CurrentState_enum' */
        *rtY_CT_CurrentState_enum = JumpUp;
 8001d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	701a      	strb	r2, [r3, #0]
        *rtY_CT_RLEDState_enum = Blink;

        /* Outport: '<Root>/CT_GLEDState_enum' */
        *rtY_CT_GLEDState_enum = Blink;
      }
      break;
 8001d0e:	e011      	b.n	8001d34 <PrimaryStateMachine_step+0x23c>
      } else if (rtU_VS_StateRequest_enum == ReqCalibrateIMU) {
 8001d10:	7cfb      	ldrb	r3, [r7, #19]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d10e      	bne.n	8001d34 <PrimaryStateMachine_step+0x23c>
        rtDW->is_Normal = IN_CalibrateIMU;
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	709a      	strb	r2, [r3, #2]
        *rtY_CT_CurrentState_enum = CalibrateIMU;
 8001d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1e:	2202      	movs	r2, #2
 8001d20:	701a      	strb	r2, [r3, #0]
        *rtY_CT_RLEDState_enum = Blink;
 8001d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d24:	2202      	movs	r2, #2
 8001d26:	701a      	strb	r2, [r3, #0]
        *rtY_CT_GLEDState_enum = Blink;
 8001d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	701a      	strb	r2, [r3, #0]
      break;
 8001d2e:	e001      	b.n	8001d34 <PrimaryStateMachine_step+0x23c>
      break;
 8001d30:	bf00      	nop
 8001d32:	e000      	b.n	8001d36 <PrimaryStateMachine_step+0x23e>
      break;
 8001d34:	bf00      	nop
   *
   * Block description for '<S3>/Delay Input1':
   *
   *  Store in Global RAM
   */
  rtDW->DelayInput1_DSTATE = rtU_IMUCalComplete_bool;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	7c7a      	ldrb	r2, [r7, #17]
 8001d3a:	711a      	strb	r2, [r3, #4]
}
 8001d3c:	bf00      	nop
 8001d3e:	3724      	adds	r7, #36	; 0x24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <PrimaryStateMachine_initialize>:

/* Model initialize function */
void PrimaryStateMachine_initialize(RT_MODEL *const rtM, StateReq
  *rtU_VS_StateRequest_enum, PrimaryState *rtY_CT_CurrentState_enum)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  /* Registration code */

  /* external inputs */
  *rtU_VS_StateRequest_enum = ReqStandby;
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2201      	movs	r2, #1
 8001d58:	701a      	strb	r2, [r3, #0]

  /* external outputs */
  *rtY_CT_CurrentState_enum = Standby;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	701a      	strb	r2, [r3, #0]

  /* SystemInitialize for Outport: '<Root>/CT_CurrentState_enum' incorporates:
   *  Chart: '<Root>/PrimaryStateMachine'
   */
  *rtY_CT_CurrentState_enum = Standby;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	701a      	strb	r2, [r3, #0]
  UNUSED_PARAMETER(rtM);
}
 8001d66:	bf00      	nop
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <StateRequest_step>:

/* Model step function */
void StateRequest_step(RT_MODEL *const rtM, bool rtU_ButtonPressed_bool,
  PrimaryState rtU_LastState_enum, float rtU_ShortPressTime_s, float
  rtU_LongPressTime_s, float rtU_dt, StateReq *rtY_VS_StateRequest_enum)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b08d      	sub	sp, #52	; 0x34
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6178      	str	r0, [r7, #20]
 8001d7a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001d7e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001d82:	ed87 1a01 	vstr	s2, [r7, #4]
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	74fb      	strb	r3, [r7, #19]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	74bb      	strb	r3, [r7, #18]
  DW *rtDW = rtM->dwork;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* RelationalOperator: '<S1>/Compare' incorporates:
   *  Constant: '<S1>/Constant'
   *  Inport: '<Root>/LastState_enum'
   */
  rtb_Compare = (rtU_LastState_enum == Error);
 8001d96:	7cbb      	ldrb	r3, [r7, #18]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	bf0c      	ite	eq
 8001d9c:	2301      	moveq	r3, #1
 8001d9e:	2300      	movne	r3, #0
 8001da0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* RelationalOperator: '<S2>/Compare' incorporates:
   *  Constant: '<S2>/Constant'
   *  Inport: '<Root>/LastState_enum'
   */
  rtb_Compare_n = (rtU_LastState_enum == CalibrateIMU);
 8001da4:	7cbb      	ldrb	r3, [r7, #18]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	bf0c      	ite	eq
 8001daa:	2301      	moveq	r3, #1
 8001dac:	2300      	movne	r3, #0
 8001dae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
   * Block description for '<S4>/Delay Input1':
   *
   *  Store in Global RAM
   */
  rtb_LogicalOperator2 = (((int32_t)rtb_Compare > (int32_t)
    rtDW->DelayInput1_DSTATE) || ((int32_t)rtb_Compare_n > (int32_t)
 8001db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db4:	79db      	ldrb	r3, [r3, #7]
 8001db6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d805      	bhi.n	8001dca <StateRequest_step+0x58>
    rtDW->DelayInput1_DSTATE_h));
 8001dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc0:	7a1b      	ldrb	r3, [r3, #8]
    rtDW->DelayInput1_DSTATE) || ((int32_t)rtb_Compare_n > (int32_t)
 8001dc2:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d901      	bls.n	8001dce <StateRequest_step+0x5c>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <StateRequest_step+0x5e>
 8001dce:	2300      	movs	r3, #0
  rtb_LogicalOperator2 = (((int32_t)rtb_Compare > (int32_t)
 8001dd0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001dd4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  /* DataTypeConversion: '<Root>/Data Type Conversion2' incorporates:
   *  Inport: '<Root>/ShortPressTime_s'
   *  Inport: '<Root>/dt'
   *  Product: '<Root>/Divide2'
   */
  rtb_DataTypeConversion2 = (uint32_t)(rtU_ShortPressTime_s / rtU_dt);
 8001de0:	edd7 6a03 	vldr	s13, [r7, #12]
 8001de4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001df0:	ee17 3a90 	vmov	r3, s15
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
  /* DataTypeConversion: '<Root>/Data Type Conversion1' incorporates:
   *  Inport: '<Root>/LongPressTime_s'
   *  Inport: '<Root>/dt'
   *  Product: '<Root>/Divide1'
   */
  rtb_DataTypeConversion1 = (uint32_t)(rtU_LongPressTime_s / rtU_dt);
 8001df6:	edd7 6a02 	vldr	s13, [r7, #8]
 8001dfa:	ed97 7a01 	vldr	s14, [r7, #4]
 8001dfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e06:	ee17 3a90 	vmov	r3, s15
 8001e0a:	623b      	str	r3, [r7, #32]

  /* Chart: '<Root>/RequestStateMachine' incorporates:
   *  Inport: '<Root>/ButtonPressed_bool'
   *  Outport: '<Root>/VS_StateRequest_enum'
   */
  if (rtDW->temporalCounter_i1 < UINT32_MAX) {
 8001e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e14:	d004      	beq.n	8001e20 <StateRequest_step+0xae>
    rtDW->temporalCounter_i1++;
 8001e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	1c5a      	adds	r2, r3, #1
 8001e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1e:	601a      	str	r2, [r3, #0]
  }

  if (rtDW->is_active_c2_StateRequest == 0U) {
 8001e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e22:	791b      	ldrb	r3, [r3, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d109      	bne.n	8001e3c <StateRequest_step+0xca>
    rtDW->is_active_c2_StateRequest = 1U;
 8001e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	711a      	strb	r2, [r3, #4]

    /* Outport: '<Root>/VS_StateRequest_enum' */
    *rtY_VS_StateRequest_enum = ReqStandby;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2201      	movs	r2, #1
 8001e32:	701a      	strb	r2, [r3, #0]
    rtDW->is_c2_StateRequest = IN_NoCommand;
 8001e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e36:	2203      	movs	r2, #3
 8001e38:	715a      	strb	r2, [r3, #5]
 8001e3a:	e0aa      	b.n	8001f92 <StateRequest_step+0x220>
  } else {
    switch (rtDW->is_c2_StateRequest) {
 8001e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3e:	795b      	ldrb	r3, [r3, #5]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d002      	beq.n	8001e4a <StateRequest_step+0xd8>
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d067      	beq.n	8001f18 <StateRequest_step+0x1a6>
 8001e48:	e075      	b.n	8001f36 <StateRequest_step+0x1c4>
     case IN_ButtonInput:
      if (rtb_LogicalOperator2) {
 8001e4a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d009      	beq.n	8001e66 <StateRequest_step+0xf4>
        rtDW->is_ButtonInput = IN_NO_ACTIVE_CHILD;
 8001e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e54:	2200      	movs	r2, #0
 8001e56:	719a      	strb	r2, [r3, #6]
        rtDW->is_c2_StateRequest = IN_GoToStandby;
 8001e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	715a      	strb	r2, [r3, #5]

        /* Outport: '<Root>/VS_StateRequest_enum' */
        *rtY_VS_StateRequest_enum = ReqStandby;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2201      	movs	r2, #1
 8001e62:	701a      	strb	r2, [r3, #0]
            rtDW->is_c2_StateRequest = IN_NoCommand;
          }
          break;
        }
      }
      break;
 8001e64:	e095      	b.n	8001f92 <StateRequest_step+0x220>
        switch (rtDW->is_ButtonInput) {
 8001e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e68:	799b      	ldrb	r3, [r3, #6]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d002      	beq.n	8001e74 <StateRequest_step+0x102>
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d01e      	beq.n	8001eb0 <StateRequest_step+0x13e>
 8001e72:	e02d      	b.n	8001ed0 <StateRequest_step+0x15e>
          if (rtDW->temporalCounter_i1 >= rtb_DataTypeConversion1) {
 8001e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6a3a      	ldr	r2, [r7, #32]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d803      	bhi.n	8001e86 <StateRequest_step+0x114>
            rtDW->is_ButtonInput = IN_CalibrateIMU;
 8001e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e80:	2202      	movs	r2, #2
 8001e82:	719a      	strb	r2, [r3, #6]
          break;
 8001e84:	e042      	b.n	8001f0c <StateRequest_step+0x19a>
          } else if ((rtDW->temporalCounter_i1 >= rtb_DataTypeConversion2) &&
 8001e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d83d      	bhi.n	8001f0c <StateRequest_step+0x19a>
                     (!rtU_ButtonPressed_bool)) {
 8001e90:	7cfb      	ldrb	r3, [r7, #19]
 8001e92:	f083 0301 	eor.w	r3, r3, #1
 8001e96:	b2db      	uxtb	r3, r3
          } else if ((rtDW->temporalCounter_i1 >= rtb_DataTypeConversion2) &&
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d037      	beq.n	8001f0c <StateRequest_step+0x19a>
            *rtY_VS_StateRequest_enum = ReqStandby;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	701a      	strb	r2, [r3, #0]
            rtDW->is_ButtonInput = IN_NO_ACTIVE_CHILD;
 8001ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	719a      	strb	r2, [r3, #6]
            rtDW->is_c2_StateRequest = IN_NoCommand;
 8001ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eaa:	2203      	movs	r2, #3
 8001eac:	715a      	strb	r2, [r3, #5]
          break;
 8001eae:	e02d      	b.n	8001f0c <StateRequest_step+0x19a>
          if (!rtU_ButtonPressed_bool) {
 8001eb0:	7cfb      	ldrb	r3, [r7, #19]
 8001eb2:	f083 0301 	eor.w	r3, r3, #1
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d029      	beq.n	8001f10 <StateRequest_step+0x19e>
            *rtY_VS_StateRequest_enum = ReqCalibrateIMU;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	701a      	strb	r2, [r3, #0]
            rtDW->is_ButtonInput = IN_NO_ACTIVE_CHILD;
 8001ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	719a      	strb	r2, [r3, #6]
            rtDW->is_c2_StateRequest = IN_NoCommand;
 8001ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eca:	2203      	movs	r2, #3
 8001ecc:	715a      	strb	r2, [r3, #5]
          break;
 8001ece:	e01f      	b.n	8001f10 <StateRequest_step+0x19e>
          if (rtDW->temporalCounter_i1 >= rtb_DataTypeConversion1) {
 8001ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6a3a      	ldr	r2, [r7, #32]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d803      	bhi.n	8001ee2 <StateRequest_step+0x170>
            rtDW->is_ButtonInput = IN_CalibrateIMU;
 8001eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001edc:	2202      	movs	r2, #2
 8001ede:	719a      	strb	r2, [r3, #6]
          break;
 8001ee0:	e018      	b.n	8001f14 <StateRequest_step+0x1a2>
          } else if ((rtDW->temporalCounter_i1 >= rtb_DataTypeConversion2) &&
 8001ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d813      	bhi.n	8001f14 <StateRequest_step+0x1a2>
                     (!rtU_ButtonPressed_bool)) {
 8001eec:	7cfb      	ldrb	r3, [r7, #19]
 8001eee:	f083 0301 	eor.w	r3, r3, #1
 8001ef2:	b2db      	uxtb	r3, r3
          } else if ((rtDW->temporalCounter_i1 >= rtb_DataTypeConversion2) &&
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00d      	beq.n	8001f14 <StateRequest_step+0x1a2>
            *rtY_VS_StateRequest_enum = ReqBalance;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	2203      	movs	r2, #3
 8001efc:	701a      	strb	r2, [r3, #0]
            rtDW->is_ButtonInput = IN_NO_ACTIVE_CHILD;
 8001efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f00:	2200      	movs	r2, #0
 8001f02:	719a      	strb	r2, [r3, #6]
            rtDW->is_c2_StateRequest = IN_NoCommand;
 8001f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f06:	2203      	movs	r2, #3
 8001f08:	715a      	strb	r2, [r3, #5]
          break;
 8001f0a:	e003      	b.n	8001f14 <StateRequest_step+0x1a2>
          break;
 8001f0c:	bf00      	nop
 8001f0e:	e040      	b.n	8001f92 <StateRequest_step+0x220>
          break;
 8001f10:	bf00      	nop
 8001f12:	e03e      	b.n	8001f92 <StateRequest_step+0x220>
          break;
 8001f14:	bf00      	nop
      break;
 8001f16:	e03c      	b.n	8001f92 <StateRequest_step+0x220>

     case IN_GoToStandby:
      if (!rtb_LogicalOperator2) {
 8001f18:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001f1c:	f083 0301 	eor.w	r3, r3, #1
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <StateRequest_step+0x1bc>
        rtDW->is_c2_StateRequest = IN_NoCommand;
 8001f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f28:	2203      	movs	r2, #3
 8001f2a:	715a      	strb	r2, [r3, #5]
      } else {
        /* Outport: '<Root>/VS_StateRequest_enum' */
        *rtY_VS_StateRequest_enum = ReqStandby;
      }
      break;
 8001f2c:	e031      	b.n	8001f92 <StateRequest_step+0x220>
        *rtY_VS_StateRequest_enum = ReqStandby;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	2201      	movs	r2, #1
 8001f32:	701a      	strb	r2, [r3, #0]
      break;
 8001f34:	e02d      	b.n	8001f92 <StateRequest_step+0x220>

     default:
      /* case IN_NoCommand: */
      if (rtb_LogicalOperator2) {
 8001f36:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d006      	beq.n	8001f4c <StateRequest_step+0x1da>
        rtDW->is_c2_StateRequest = IN_GoToStandby;
 8001f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f40:	2202      	movs	r2, #2
 8001f42:	715a      	strb	r2, [r3, #5]

        /* Outport: '<Root>/VS_StateRequest_enum' */
        *rtY_VS_StateRequest_enum = ReqStandby;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	2201      	movs	r2, #1
 8001f48:	701a      	strb	r2, [r3, #0]
          rtDW->is_c2_StateRequest = IN_ButtonInput;
          rtDW->temporalCounter_i1 = 0U;
          rtDW->is_ButtonInput = IN_Balance;
        }
      }
      break;
 8001f4a:	e021      	b.n	8001f90 <StateRequest_step+0x21e>
        tmp = *rtY_VS_StateRequest_enum;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	77fb      	strb	r3, [r7, #31]
        if (rtU_ButtonPressed_bool && (tmp == ReqStandby)) {
 8001f52:	7cfb      	ldrb	r3, [r7, #19]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00c      	beq.n	8001f72 <StateRequest_step+0x200>
 8001f58:	7ffb      	ldrb	r3, [r7, #31]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d109      	bne.n	8001f72 <StateRequest_step+0x200>
          rtDW->is_c2_StateRequest = IN_ButtonInput;
 8001f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f60:	2201      	movs	r2, #1
 8001f62:	715a      	strb	r2, [r3, #5]
          rtDW->temporalCounter_i1 = 0U;
 8001f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
          rtDW->is_ButtonInput = IN_Standby;
 8001f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6c:	2203      	movs	r2, #3
 8001f6e:	719a      	strb	r2, [r3, #6]
      break;
 8001f70:	e00e      	b.n	8001f90 <StateRequest_step+0x21e>
        } else if (rtU_ButtonPressed_bool && (tmp == ReqBalance)) {
 8001f72:	7cfb      	ldrb	r3, [r7, #19]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00b      	beq.n	8001f90 <StateRequest_step+0x21e>
 8001f78:	7ffb      	ldrb	r3, [r7, #31]
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	d108      	bne.n	8001f90 <StateRequest_step+0x21e>
          rtDW->is_c2_StateRequest = IN_ButtonInput;
 8001f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f80:	2201      	movs	r2, #1
 8001f82:	715a      	strb	r2, [r3, #5]
          rtDW->temporalCounter_i1 = 0U;
 8001f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
          rtDW->is_ButtonInput = IN_Balance;
 8001f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	719a      	strb	r2, [r3, #6]
      break;
 8001f90:	bf00      	nop
   *
   * Block description for '<S4>/Delay Input1':
   *
   *  Store in Global RAM
   */
  rtDW->DelayInput1_DSTATE = rtb_Compare;
 8001f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f94:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001f98:	71da      	strb	r2, [r3, #7]
   *
   * Block description for '<S3>/Delay Input1':
   *
   *  Store in Global RAM
   */
  rtDW->DelayInput1_DSTATE_h = rtb_Compare_n;
 8001f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f9c:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001fa0:	721a      	strb	r2, [r3, #8]
}
 8001fa2:	bf00      	nop
 8001fa4:	3734      	adds	r7, #52	; 0x34
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <StateRequest_initialize>:

/* Model initialize function */
void StateRequest_initialize(RT_MODEL *const rtM, PrimaryState
  *rtU_LastState_enum, StateReq *rtY_VS_StateRequest_enum)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b085      	sub	sp, #20
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
  /* Registration code */

  /* external inputs */
  *rtU_LastState_enum = Standby;
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	701a      	strb	r2, [r3, #0]

  /* external outputs */
  *rtY_VS_StateRequest_enum = ReqStandby;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	701a      	strb	r2, [r3, #0]

  /* SystemInitialize for Outport: '<Root>/VS_StateRequest_enum' incorporates:
   *  Chart: '<Root>/RequestStateMachine'
   */
  *rtY_VS_StateRequest_enum = ReqStandby;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	701a      	strb	r2, [r3, #0]
  UNUSED_PARAMETER(rtM);
}
 8001fcc:	bf00      	nop
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <VS_StateRequest>:
static float LongPressTime_s = 5.0;
static StateReq StateRequest_enum;
/* End Global Variables */

/* Start Global Function Definitions */
VS_StateRequest_Bus_t VS_StateRequest(bool EnableBtn_bool, PrimaryState LastState_enum, float dt){
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	460a      	mov	r2, r1
 8001fe2:	ed87 0a00 	vstr	s0, [r7]
 8001fe6:	71fb      	strb	r3, [r7, #7]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	71bb      	strb	r3, [r7, #6]
	RT_MODEL *const rtM = rtMPtr;
 8001fec:	4b15      	ldr	r3, [pc, #84]	; (8002044 <VS_StateRequest+0x6c>)
 8001fee:	60fb      	str	r3, [r7, #12]
	VS_StateRequest_Bus_t VS_StateRequest_Bus;

	/* Initialize state machine outputs */
	if (StateReqInit_bool){
 8001ff0:	4b15      	ldr	r3, [pc, #84]	; (8002048 <VS_StateRequest+0x70>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00b      	beq.n	8002010 <VS_StateRequest+0x38>
		/* Pack model data into RTM */
		rtM->dwork = &rtDW;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4a14      	ldr	r2, [pc, #80]	; (800204c <VS_StateRequest+0x74>)
 8001ffc:	605a      	str	r2, [r3, #4]
		/* Initialize model */
		StateRequest_initialize(rtM, &LastState_enum, &StateRequest_enum);
 8001ffe:	1dbb      	adds	r3, r7, #6
 8002000:	4a13      	ldr	r2, [pc, #76]	; (8002050 <VS_StateRequest+0x78>)
 8002002:	4619      	mov	r1, r3
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f7ff ffd2 	bl	8001fae <StateRequest_initialize>
		StateReqInit_bool = false;
 800200a:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <VS_StateRequest+0x70>)
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
	}

	/* Update states */
	StateRequest_step(rtM, EnableBtn_bool, LastState_enum, ShortPressTime_s, LongPressTime_s, dt, &StateRequest_enum);
 8002010:	79ba      	ldrb	r2, [r7, #6]
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <VS_StateRequest+0x7c>)
 8002014:	edd3 7a00 	vldr	s15, [r3]
 8002018:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <VS_StateRequest+0x80>)
 800201a:	ed93 7a00 	vldr	s14, [r3]
 800201e:	79f9      	ldrb	r1, [r7, #7]
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <VS_StateRequest+0x78>)
 8002022:	ed97 1a00 	vldr	s2, [r7]
 8002026:	eef0 0a47 	vmov.f32	s1, s14
 800202a:	eeb0 0a67 	vmov.f32	s0, s15
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f7ff fe9f 	bl	8001d72 <StateRequest_step>

	/* Store output */
	VS_StateRequest_Bus.StateRequest_enum = StateRequest_enum;
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <VS_StateRequest+0x78>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	723b      	strb	r3, [r7, #8]

	return VS_StateRequest_Bus;
 800203a:	7a3b      	ldrb	r3, [r7, #8]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000320 	.word	0x20000320
 8002048:	20000014 	.word	0x20000014
 800204c:	20000328 	.word	0x20000328
 8002050:	20000334 	.word	0x20000334
 8002054:	20000018 	.word	0x20000018
 8002058:	2000001c 	.word	0x2000001c

0800205c <VS_ExecutionRate>:
float initialDt_s = .005;
bool oneShot_bool = true;
/* End Global Variables */

/* Start Global Function Definitions */
VS_ExecutionRate_Bus_t VS_ExecutionRate(void){
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
	VS_ExecutionRate_Bus_t VS_ExecutionRate_Bus;
	uint32_t currentTick_ms = HAL_GetTick();
 8002062:	f001 fd6d 	bl	8003b40 <HAL_GetTick>
 8002066:	60b8      	str	r0, [r7, #8]

	float dt;

	if (oneShot_bool){
 8002068:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <VS_ExecutionRate+0x64>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d006      	beq.n	800207e <VS_ExecutionRate+0x22>
		dt = initialDt_s;
 8002070:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <VS_ExecutionRate+0x68>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60fb      	str	r3, [r7, #12]
		oneShot_bool = false;
 8002076:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <VS_ExecutionRate+0x64>)
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
 800207c:	e013      	b.n	80020a6 <VS_ExecutionRate+0x4a>
	} else{
		dt = (currentTick_ms - lastTick_ms) / 1000.0;
 800207e:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <VS_ExecutionRate+0x6c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fa5c 	bl	8000544 <__aeabi_ui2d>
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <VS_ExecutionRate+0x70>)
 8002092:	f7fe fbfb 	bl	800088c <__aeabi_ddiv>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4610      	mov	r0, r2
 800209c:	4619      	mov	r1, r3
 800209e:	f7fe fda3 	bl	8000be8 <__aeabi_d2f>
 80020a2:	4603      	mov	r3, r0
 80020a4:	60fb      	str	r3, [r7, #12]
	}

	lastTick_ms = currentTick_ms;
 80020a6:	4a08      	ldr	r2, [pc, #32]	; (80020c8 <VS_ExecutionRate+0x6c>)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	6013      	str	r3, [r2, #0]

	VS_ExecutionRate_Bus.dt = dt;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	607b      	str	r3, [r7, #4]

	return VS_ExecutionRate_Bus;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	ee07 3a90 	vmov	s15, r3
}
 80020b6:	eeb0 0a67 	vmov.f32	s0, s15
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20000024 	.word	0x20000024
 80020c4:	20000020 	.word	0x20000020
 80020c8:	20000338 	.word	0x20000338
 80020cc:	408f4000 	.word	0x408f4000

080020d0 <EstimateOrientation>:
static VS_OrientationData_t AccelLowPassFilt(VS_OrientationData_t AccelOrientation);
static VS_OrientationData_t ComplimentaryFilter(VS_OrientationData_t GyroOrientation, VS_OrientationData_t FiltAccelOrientation);
/* End Static Function Prototypes */

/* Start Global Function Definitions */
VS_Orientation_Bus_t EstimateOrientation(IP_MPU6050_Bus_t IP_MPU6050_Bus){
 80020d0:	b084      	sub	sp, #16
 80020d2:	b5b0      	push	{r4, r5, r7, lr}
 80020d4:	b08e      	sub	sp, #56	; 0x38
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80020de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	VS_Orientation_Bus_t VS_Orientation_Bus;

	VS_Orientation_Bus.AccelOrientation = CalcAccelAngle(IP_MPU6050_Bus.accel);
 80020e2:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80020e6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80020ea:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80020ee:	eeb0 0a66 	vmov.f32	s0, s13
 80020f2:	eef0 0a47 	vmov.f32	s1, s14
 80020f6:	eeb0 1a67 	vmov.f32	s2, s15
 80020fa:	f000 f891 	bl	8002220 <CalcAccelAngle>
 80020fe:	eef0 6a40 	vmov.f32	s13, s0
 8002102:	eeb0 7a60 	vmov.f32	s14, s1
 8002106:	eef0 7a41 	vmov.f32	s15, s2
 800210a:	edc7 6a02 	vstr	s13, [r7, #8]
 800210e:	ed87 7a03 	vstr	s14, [r7, #12]
 8002112:	edc7 7a04 	vstr	s15, [r7, #16]

	ResetGyroIntegrators(VS_Orientation_Bus.AccelOrientation.roll_deg, VS_Orientation_Bus.AccelOrientation.pitch_deg);
 8002116:	edd7 7a02 	vldr	s15, [r7, #8]
 800211a:	ed97 7a03 	vldr	s14, [r7, #12]
 800211e:	eef0 0a47 	vmov.f32	s1, s14
 8002122:	eeb0 0a67 	vmov.f32	s0, s15
 8002126:	f000 f967 	bl	80023f8 <ResetGyroIntegrators>

	VS_Orientation_Bus.FiltAccelOrientation = AccelLowPassFilt(VS_Orientation_Bus.AccelOrientation);
 800212a:	edd7 6a02 	vldr	s13, [r7, #8]
 800212e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002132:	edd7 7a04 	vldr	s15, [r7, #16]
 8002136:	eeb0 0a66 	vmov.f32	s0, s13
 800213a:	eef0 0a47 	vmov.f32	s1, s14
 800213e:	eeb0 1a67 	vmov.f32	s2, s15
 8002142:	f000 f9f7 	bl	8002534 <AccelLowPassFilt>
 8002146:	eef0 6a40 	vmov.f32	s13, s0
 800214a:	eeb0 7a60 	vmov.f32	s14, s1
 800214e:	eef0 7a41 	vmov.f32	s15, s2
 8002152:	edc7 6a08 	vstr	s13, [r7, #32]
 8002156:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 800215a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	VS_Orientation_Bus.GyroOrientation = CalcGyroAngle(IP_MPU6050_Bus.gyro, VS_Orientation_Bus.FiltAccelOrientation);
 800215e:	ed97 5a08 	vldr	s10, [r7, #32]
 8002162:	edd7 5a09 	vldr	s11, [r7, #36]	; 0x24
 8002166:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800216a:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800216e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002172:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002176:	eef0 1a45 	vmov.f32	s3, s10
 800217a:	eeb0 2a65 	vmov.f32	s4, s11
 800217e:	eef0 2a46 	vmov.f32	s5, s12
 8002182:	eeb0 0a66 	vmov.f32	s0, s13
 8002186:	eef0 0a47 	vmov.f32	s1, s14
 800218a:	eeb0 1a67 	vmov.f32	s2, s15
 800218e:	f000 f8a1 	bl	80022d4 <CalcGyroAngle>
 8002192:	eef0 6a40 	vmov.f32	s13, s0
 8002196:	eeb0 7a60 	vmov.f32	s14, s1
 800219a:	eef0 7a41 	vmov.f32	s15, s2
 800219e:	edc7 6a05 	vstr	s13, [r7, #20]
 80021a2:	ed87 7a06 	vstr	s14, [r7, #24]
 80021a6:	edc7 7a07 	vstr	s15, [r7, #28]

	VS_Orientation_Bus.CompFiltOrientation = ComplimentaryFilter(VS_Orientation_Bus.GyroOrientation, VS_Orientation_Bus.FiltAccelOrientation);
 80021aa:	ed97 5a08 	vldr	s10, [r7, #32]
 80021ae:	edd7 5a09 	vldr	s11, [r7, #36]	; 0x24
 80021b2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80021b6:	edd7 6a05 	vldr	s13, [r7, #20]
 80021ba:	ed97 7a06 	vldr	s14, [r7, #24]
 80021be:	edd7 7a07 	vldr	s15, [r7, #28]
 80021c2:	eef0 1a45 	vmov.f32	s3, s10
 80021c6:	eeb0 2a65 	vmov.f32	s4, s11
 80021ca:	eef0 2a46 	vmov.f32	s5, s12
 80021ce:	eeb0 0a66 	vmov.f32	s0, s13
 80021d2:	eef0 0a47 	vmov.f32	s1, s14
 80021d6:	eeb0 1a67 	vmov.f32	s2, s15
 80021da:	f000 f9f1 	bl	80025c0 <ComplimentaryFilter>
 80021de:	eef0 6a40 	vmov.f32	s13, s0
 80021e2:	eeb0 7a60 	vmov.f32	s14, s1
 80021e6:	eef0 7a41 	vmov.f32	s15, s2
 80021ea:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 80021ee:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 80021f2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	return VS_Orientation_Bus;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	461d      	mov	r5, r3
 80021fa:	f107 0408 	add.w	r4, r7, #8
 80021fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002200:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002202:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002204:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002206:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800220a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	3738      	adds	r7, #56	; 0x38
 8002212:	46bd      	mov	sp, r7
 8002214:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002218:	b004      	add	sp, #16
 800221a:	4770      	bx	lr
 800221c:	0000      	movs	r0, r0
	...

08002220 <CalcAccelAngle>:
/* End Global Function Definitions */

/* Start Static Function Definitions */
static VS_OrientationData_t CalcAccelAngle(MPU6050_AccelData_t MPU6050_AccelData){
 8002220:	b580      	push	{r7, lr}
 8002222:	b090      	sub	sp, #64	; 0x40
 8002224:	af00      	add	r7, sp, #0
 8002226:	eef0 6a40 	vmov.f32	s13, s0
 800222a:	eeb0 7a60 	vmov.f32	s14, s1
 800222e:	eef0 7a41 	vmov.f32	s15, s2
 8002232:	edc7 6a05 	vstr	s13, [r7, #20]
 8002236:	ed87 7a06 	vstr	s14, [r7, #24]
 800223a:	edc7 7a07 	vstr	s15, [r7, #28]
	VS_OrientationData_t AccelOrientation;

	float roll_rad = atan2f(MPU6050_AccelData.XOUT_ms2, MPU6050_AccelData.YOUT_ms2);
 800223e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002242:	ed97 7a06 	vldr	s14, [r7, #24]
 8002246:	eef0 0a47 	vmov.f32	s1, s14
 800224a:	eeb0 0a67 	vmov.f32	s0, s15
 800224e:	f008 fcb1 	bl	800abb4 <atan2f>
 8002252:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c

	AccelOrientation.roll_deg = roll_rad * 180 / M_PI;
 8002256:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800225a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80022d0 <CalcAccelAngle+0xb0>
 800225e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002262:	ee17 0a90 	vmov	r0, s15
 8002266:	f7fe f98f 	bl	8000588 <__aeabi_f2d>
 800226a:	a317      	add	r3, pc, #92	; (adr r3, 80022c8 <CalcAccelAngle+0xa8>)
 800226c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002270:	f7fe fb0c 	bl	800088c <__aeabi_ddiv>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	f7fe fcb4 	bl	8000be8 <__aeabi_d2f>
 8002280:	4603      	mov	r3, r0
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
	AccelOrientation.pitch_deg = 0;
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	62bb      	str	r3, [r7, #40]	; 0x28
	AccelOrientation.yaw_deg = 0;  // No accurate way to calculate this
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	62fb      	str	r3, [r7, #44]	; 0x2c

	return AccelOrientation;
 8002290:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002294:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002298:	ca07      	ldmia	r2, {r0, r1, r2}
 800229a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800229e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a4:	ee06 1a90 	vmov	s13, r1
 80022a8:	ee07 2a10 	vmov	s14, r2
 80022ac:	ee07 3a90 	vmov	s15, r3
}
 80022b0:	eeb0 0a66 	vmov.f32	s0, s13
 80022b4:	eef0 0a47 	vmov.f32	s1, s14
 80022b8:	eeb0 1a67 	vmov.f32	s2, s15
 80022bc:	3740      	adds	r7, #64	; 0x40
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	f3af 8000 	nop.w
 80022c8:	54442d18 	.word	0x54442d18
 80022cc:	400921fb 	.word	0x400921fb
 80022d0:	43340000 	.word	0x43340000

080022d4 <CalcGyroAngle>:

static VS_OrientationData_t CalcGyroAngle(MPU6050_GyroData_t MPU6050_GyroData, VS_OrientationData_t FiltAccelOrientation){
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b092      	sub	sp, #72	; 0x48
 80022d8:	af00      	add	r7, sp, #0
 80022da:	eeb0 5a40 	vmov.f32	s10, s0
 80022de:	eef0 5a60 	vmov.f32	s11, s1
 80022e2:	eeb0 6a41 	vmov.f32	s12, s2
 80022e6:	eef0 6a61 	vmov.f32	s13, s3
 80022ea:	eeb0 7a42 	vmov.f32	s14, s4
 80022ee:	eef0 7a62 	vmov.f32	s15, s5
 80022f2:	ed87 5a07 	vstr	s10, [r7, #28]
 80022f6:	edc7 5a08 	vstr	s11, [r7, #32]
 80022fa:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80022fe:	edc7 6a04 	vstr	s13, [r7, #16]
 8002302:	ed87 7a05 	vstr	s14, [r7, #20]
 8002306:	edc7 7a06 	vstr	s15, [r7, #24]
	VS_OrientationData_t GyroOrientation;
	uint32_t currentTick = HAL_GetTick();
 800230a:	f001 fc19 	bl	8003b40 <HAL_GetTick>
 800230e:	6478      	str	r0, [r7, #68]	; 0x44
	float dt = ((float) currentTick - (float) lastTick) / 1000;
 8002310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002312:	ee07 3a90 	vmov	s15, r3
 8002316:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800231a:	4b31      	ldr	r3, [pc, #196]	; (80023e0 <CalcGyroAngle+0x10c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	ee07 3a90 	vmov	s15, r3
 8002322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002326:	ee37 7a67 	vsub.f32	s14, s14, s15
 800232a:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80023e4 <CalcGyroAngle+0x110>
 800232e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002332:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	// Integrator reset logic
	if(resetGyroRoll_bool){
 8002336:	4b2c      	ldr	r3, [pc, #176]	; (80023e8 <CalcGyroAngle+0x114>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d005      	beq.n	800234a <CalcGyroAngle+0x76>
		lastRollAng_deg = FiltAccelOrientation.roll_deg;
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4a2a      	ldr	r2, [pc, #168]	; (80023ec <CalcGyroAngle+0x118>)
 8002342:	6013      	str	r3, [r2, #0]
		resetGyroRoll_bool = 0;
 8002344:	4b28      	ldr	r3, [pc, #160]	; (80023e8 <CalcGyroAngle+0x114>)
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
	}

	if(resetGyroPitch_bool){
 800234a:	4b29      	ldr	r3, [pc, #164]	; (80023f0 <CalcGyroAngle+0x11c>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d006      	beq.n	8002360 <CalcGyroAngle+0x8c>
		lastPitchAng_deg = 0;
 8002352:	4b28      	ldr	r3, [pc, #160]	; (80023f4 <CalcGyroAngle+0x120>)
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
		resetGyroPitch_bool = 0;
 800235a:	4b25      	ldr	r3, [pc, #148]	; (80023f0 <CalcGyroAngle+0x11c>)
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]
	}

	// Integrate angular velocities
	GyroOrientation.roll_deg = lastRollAng_deg + MPU6050_GyroData.ZOUT_dps * dt;
 8002360:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002364:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002368:	ee27 7a27 	vmul.f32	s14, s14, s15
 800236c:	4b1f      	ldr	r3, [pc, #124]	; (80023ec <CalcGyroAngle+0x118>)
 800236e:	edd3 7a00 	vldr	s15, [r3]
 8002372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002376:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	GyroOrientation.pitch_deg = lastPitchAng_deg + MPU6050_GyroData.YOUT_dps * dt;
 800237a:	ed97 7a08 	vldr	s14, [r7, #32]
 800237e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002382:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002386:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <CalcGyroAngle+0x120>)
 8002388:	edd3 7a00 	vldr	s15, [r3]
 800238c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002390:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	GyroOrientation.yaw_deg = 0;  // No accurate way to calculate this
 8002394:	f04f 0300 	mov.w	r3, #0
 8002398:	633b      	str	r3, [r7, #48]	; 0x30

	// Store previous values
	lastTick = currentTick;
 800239a:	4a11      	ldr	r2, [pc, #68]	; (80023e0 <CalcGyroAngle+0x10c>)
 800239c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800239e:	6013      	str	r3, [r2, #0]
	lastRollAng_deg = GyroOrientation.roll_deg;
 80023a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a2:	4a12      	ldr	r2, [pc, #72]	; (80023ec <CalcGyroAngle+0x118>)
 80023a4:	6013      	str	r3, [r2, #0]
	lastPitchAng_deg = GyroOrientation.pitch_deg;
 80023a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a8:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <CalcGyroAngle+0x120>)
 80023aa:	6013      	str	r3, [r2, #0]

	return GyroOrientation;
 80023ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023b0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80023b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80023ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80023bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023c0:	ee06 1a90 	vmov	s13, r1
 80023c4:	ee07 2a10 	vmov	s14, r2
 80023c8:	ee07 3a90 	vmov	s15, r3
}
 80023cc:	eeb0 0a66 	vmov.f32	s0, s13
 80023d0:	eef0 0a47 	vmov.f32	s1, s14
 80023d4:	eeb0 1a67 	vmov.f32	s2, s15
 80023d8:	3748      	adds	r7, #72	; 0x48
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000348 	.word	0x20000348
 80023e4:	447a0000 	.word	0x447a0000
 80023e8:	2000033c 	.word	0x2000033c
 80023ec:	2000034c 	.word	0x2000034c
 80023f0:	2000033d 	.word	0x2000033d
 80023f4:	20000350 	.word	0x20000350

080023f8 <ResetGyroIntegrators>:

static void ResetGyroIntegrators(float accelRoll_deg, float accelPitch_deg){
 80023f8:	b480      	push	{r7}
 80023fa:	b08b      	sub	sp, #44	; 0x2c
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8002402:	edc7 0a00 	vstr	s1, [r7]
	// Reset gyro integrators if accel values are near 45 for X consecutive cycles

	float resetAccelTolerance_deg = 1.0;
 8002406:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
	float resetAccelRollAngle_deg = 45;
 800240c:	4b44      	ldr	r3, [pc, #272]	; (8002520 <ResetGyroIntegrators+0x128>)
 800240e:	623b      	str	r3, [r7, #32]
	float resetAccelPitchAngle_deg = 0;// Angle of system when integrator can be reset
 8002410:	f04f 0300 	mov.w	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
	uint8_t resetAccelCntThreshold = 20;
 8002416:	2314      	movs	r3, #20
 8002418:	76fb      	strb	r3, [r7, #27]

	float zeroAccelRollUpperThreshold = resetAccelRollAngle_deg + resetAccelTolerance_deg;
 800241a:	ed97 7a08 	vldr	s14, [r7, #32]
 800241e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002426:	edc7 7a05 	vstr	s15, [r7, #20]
	float zeroAccelRollLowerThreshold = resetAccelRollAngle_deg - resetAccelTolerance_deg;
 800242a:	ed97 7a08 	vldr	s14, [r7, #32]
 800242e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002432:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002436:	edc7 7a04 	vstr	s15, [r7, #16]

	float zeroAccelPitchUpperThreshold = resetAccelPitchAngle_deg + resetAccelTolerance_deg;
 800243a:	ed97 7a07 	vldr	s14, [r7, #28]
 800243e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002446:	edc7 7a03 	vstr	s15, [r7, #12]
	float zeroAccelPitchLowerThreshold = resetAccelPitchAngle_deg - resetAccelTolerance_deg;
 800244a:	ed97 7a07 	vldr	s14, [r7, #28]
 800244e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002452:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002456:	edc7 7a02 	vstr	s15, [r7, #8]

	if (fabsf(accelRoll_deg) < zeroAccelRollUpperThreshold && fabsf(accelRoll_deg) > zeroAccelRollLowerThreshold){
 800245a:	edd7 7a01 	vldr	s15, [r7, #4]
 800245e:	eef0 7ae7 	vabs.f32	s15, s15
 8002462:	ed97 7a05 	vldr	s14, [r7, #20]
 8002466:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800246a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800246e:	dd10      	ble.n	8002492 <ResetGyroIntegrators+0x9a>
 8002470:	edd7 7a01 	vldr	s15, [r7, #4]
 8002474:	eef0 7ae7 	vabs.f32	s15, s15
 8002478:	ed97 7a04 	vldr	s14, [r7, #16]
 800247c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002484:	d505      	bpl.n	8002492 <ResetGyroIntegrators+0x9a>
		resetAccelRollCount++;
 8002486:	4b27      	ldr	r3, [pc, #156]	; (8002524 <ResetGyroIntegrators+0x12c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	3301      	adds	r3, #1
 800248c:	4a25      	ldr	r2, [pc, #148]	; (8002524 <ResetGyroIntegrators+0x12c>)
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	e002      	b.n	8002498 <ResetGyroIntegrators+0xa0>
	}else{
		resetAccelRollCount = 0;
 8002492:	4b24      	ldr	r3, [pc, #144]	; (8002524 <ResetGyroIntegrators+0x12c>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
	}

	if (fabsf(accelPitch_deg) < zeroAccelPitchUpperThreshold && fabsf(accelPitch_deg) > zeroAccelPitchLowerThreshold){
 8002498:	edd7 7a00 	vldr	s15, [r7]
 800249c:	eef0 7ae7 	vabs.f32	s15, s15
 80024a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80024a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ac:	dd10      	ble.n	80024d0 <ResetGyroIntegrators+0xd8>
 80024ae:	edd7 7a00 	vldr	s15, [r7]
 80024b2:	eef0 7ae7 	vabs.f32	s15, s15
 80024b6:	ed97 7a02 	vldr	s14, [r7, #8]
 80024ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c2:	d505      	bpl.n	80024d0 <ResetGyroIntegrators+0xd8>
		resetAccelPitchCount++;
 80024c4:	4b18      	ldr	r3, [pc, #96]	; (8002528 <ResetGyroIntegrators+0x130>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	3301      	adds	r3, #1
 80024ca:	4a17      	ldr	r2, [pc, #92]	; (8002528 <ResetGyroIntegrators+0x130>)
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	e002      	b.n	80024d6 <ResetGyroIntegrators+0xde>
	}else{
		resetAccelPitchCount = 0;
 80024d0:	4b15      	ldr	r3, [pc, #84]	; (8002528 <ResetGyroIntegrators+0x130>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
	}

	if (resetAccelRollCount == resetAccelCntThreshold){
 80024d6:	7efa      	ldrb	r2, [r7, #27]
 80024d8:	4b12      	ldr	r3, [pc, #72]	; (8002524 <ResetGyroIntegrators+0x12c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d106      	bne.n	80024ee <ResetGyroIntegrators+0xf6>
		resetGyroRoll_bool = 1;
 80024e0:	4b12      	ldr	r3, [pc, #72]	; (800252c <ResetGyroIntegrators+0x134>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	701a      	strb	r2, [r3, #0]
		resetAccelRollCount = 0;
 80024e6:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <ResetGyroIntegrators+0x12c>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	e002      	b.n	80024f4 <ResetGyroIntegrators+0xfc>
	}else{
		resetGyroRoll_bool = 0;
 80024ee:	4b0f      	ldr	r3, [pc, #60]	; (800252c <ResetGyroIntegrators+0x134>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	701a      	strb	r2, [r3, #0]
	}

	if (resetAccelPitchCount == resetAccelCntThreshold){
 80024f4:	7efa      	ldrb	r2, [r7, #27]
 80024f6:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <ResetGyroIntegrators+0x130>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d106      	bne.n	800250c <ResetGyroIntegrators+0x114>
		resetGyroPitch_bool = 1;
 80024fe:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <ResetGyroIntegrators+0x138>)
 8002500:	2201      	movs	r2, #1
 8002502:	701a      	strb	r2, [r3, #0]
		resetAccelPitchCount = 0;
 8002504:	4b08      	ldr	r3, [pc, #32]	; (8002528 <ResetGyroIntegrators+0x130>)
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
	}else{
		resetGyroPitch_bool = 0;
	}
}
 800250a:	e002      	b.n	8002512 <ResetGyroIntegrators+0x11a>
		resetGyroPitch_bool = 0;
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <ResetGyroIntegrators+0x138>)
 800250e:	2200      	movs	r2, #0
 8002510:	701a      	strb	r2, [r3, #0]
}
 8002512:	bf00      	nop
 8002514:	372c      	adds	r7, #44	; 0x2c
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	42340000 	.word	0x42340000
 8002524:	20000340 	.word	0x20000340
 8002528:	20000344 	.word	0x20000344
 800252c:	2000033c 	.word	0x2000033c
 8002530:	2000033d 	.word	0x2000033d

08002534 <AccelLowPassFilt>:

static VS_OrientationData_t AccelLowPassFilt(VS_OrientationData_t AccelOrientation){
 8002534:	b580      	push	{r7, lr}
 8002536:	b08e      	sub	sp, #56	; 0x38
 8002538:	af00      	add	r7, sp, #0
 800253a:	eef0 6a40 	vmov.f32	s13, s0
 800253e:	eeb0 7a60 	vmov.f32	s14, s1
 8002542:	eef0 7a41 	vmov.f32	s15, s2
 8002546:	edc7 6a05 	vstr	s13, [r7, #20]
 800254a:	ed87 7a06 	vstr	s14, [r7, #24]
 800254e:	edc7 7a07 	vstr	s15, [r7, #28]
	VS_OrientationData_t FiltAccelOrientation;

	arm_biquad_cascade_df1_f32(&S_AccelRoll, &AccelOrientation.roll_deg, &FiltAccelOrientation.roll_deg, blockSize);
 8002552:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <AccelLowPassFilt+0x80>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f107 0220 	add.w	r2, r7, #32
 800255a:	f107 0114 	add.w	r1, r7, #20
 800255e:	4816      	ldr	r0, [pc, #88]	; (80025b8 <AccelLowPassFilt+0x84>)
 8002560:	f005 fbb8 	bl	8007cd4 <arm_biquad_cascade_df1_f32>
	arm_biquad_cascade_df1_f32(&S_AccelPitch, &AccelOrientation.pitch_deg, &FiltAccelOrientation.pitch_deg, blockSize);
 8002564:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <AccelLowPassFilt+0x80>)
 8002566:	6818      	ldr	r0, [r3, #0]
 8002568:	f107 0320 	add.w	r3, r7, #32
 800256c:	1d1a      	adds	r2, r3, #4
 800256e:	f107 0314 	add.w	r3, r7, #20
 8002572:	1d19      	adds	r1, r3, #4
 8002574:	4603      	mov	r3, r0
 8002576:	4811      	ldr	r0, [pc, #68]	; (80025bc <AccelLowPassFilt+0x88>)
 8002578:	f005 fbac 	bl	8007cd4 <arm_biquad_cascade_df1_f32>

	FiltAccelOrientation.yaw_deg = 0;
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	62bb      	str	r3, [r7, #40]	; 0x28

	return FiltAccelOrientation;
 8002582:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002586:	f107 0220 	add.w	r2, r7, #32
 800258a:	ca07      	ldmia	r2, {r0, r1, r2}
 800258c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002590:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002596:	ee06 1a90 	vmov	s13, r1
 800259a:	ee07 2a10 	vmov	s14, r2
 800259e:	ee07 3a90 	vmov	s15, r3
}
 80025a2:	eeb0 0a66 	vmov.f32	s0, s13
 80025a6:	eef0 0a47 	vmov.f32	s1, s14
 80025aa:	eeb0 1a67 	vmov.f32	s2, s15
 80025ae:	3738      	adds	r7, #56	; 0x38
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000000 	.word	0x20000000
 80025b8:	20000220 	.word	0x20000220
 80025bc:	2000022c 	.word	0x2000022c

080025c0 <ComplimentaryFilter>:

static VS_OrientationData_t ComplimentaryFilter(VS_OrientationData_t GyroOrientation, VS_OrientationData_t FiltAccelOrientation){
 80025c0:	b480      	push	{r7}
 80025c2:	b093      	sub	sp, #76	; 0x4c
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	eeb0 5a40 	vmov.f32	s10, s0
 80025ca:	eef0 5a60 	vmov.f32	s11, s1
 80025ce:	eeb0 6a41 	vmov.f32	s12, s2
 80025d2:	eef0 6a61 	vmov.f32	s13, s3
 80025d6:	eeb0 7a42 	vmov.f32	s14, s4
 80025da:	eef0 7a62 	vmov.f32	s15, s5
 80025de:	ed87 5a07 	vstr	s10, [r7, #28]
 80025e2:	edc7 5a08 	vstr	s11, [r7, #32]
 80025e6:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80025ea:	edc7 6a04 	vstr	s13, [r7, #16]
 80025ee:	ed87 7a05 	vstr	s14, [r7, #20]
 80025f2:	edc7 7a06 	vstr	s15, [r7, #24]
	VS_OrientationData_t CompFiltOrientation;

	float alpha = .90;
 80025f6:	4b24      	ldr	r3, [pc, #144]	; (8002688 <ComplimentaryFilter+0xc8>)
 80025f8:	647b      	str	r3, [r7, #68]	; 0x44

	CompFiltOrientation.roll_deg = GyroOrientation.roll_deg * alpha + FiltAccelOrientation.roll_deg * (1 - alpha);
 80025fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80025fe:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002602:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002606:	edd7 6a04 	vldr	s13, [r7, #16]
 800260a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800260e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002612:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002616:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800261a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800261e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	CompFiltOrientation.pitch_deg = GyroOrientation.pitch_deg * alpha + FiltAccelOrientation.pitch_deg * (1 - alpha);
 8002622:	ed97 7a08 	vldr	s14, [r7, #32]
 8002626:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800262a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800262e:	edd7 6a05 	vldr	s13, [r7, #20]
 8002632:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002636:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800263a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800263e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002646:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	CompFiltOrientation.yaw_deg = 0;
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	637b      	str	r3, [r7, #52]	; 0x34

	return CompFiltOrientation;
 8002650:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002654:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002658:	ca07      	ldmia	r2, {r0, r1, r2}
 800265a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800265e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002660:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002664:	ee06 1a90 	vmov	s13, r1
 8002668:	ee07 2a10 	vmov	s14, r2
 800266c:	ee07 3a90 	vmov	s15, r3
}
 8002670:	eeb0 0a66 	vmov.f32	s0, s13
 8002674:	eef0 0a47 	vmov.f32	s1, s14
 8002678:	eeb0 1a67 	vmov.f32	s2, s15
 800267c:	374c      	adds	r7, #76	; 0x4c
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	3f666666 	.word	0x3f666666

0800268c <IO_HardwareInputs>:
 *      Author: aloehr
 */
#include "IO.h"

/* Start global function definitions */
HI_Bus_t IO_HardwareInputs(Config_Bus_t Config_Bus){
 800268c:	b084      	sub	sp, #16
 800268e:	b590      	push	{r4, r7, lr}
 8002690:	b08b      	sub	sp, #44	; 0x2c
 8002692:	af00      	add	r7, sp, #0
 8002694:	6178      	str	r0, [r7, #20]
 8002696:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800269a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HI_Bus_t HI_Bus;

	HI_Bus.HI_MPU6050_Bus = HI_MPU6050(Config_Bus.Config_HAL_Bus.hi2c);
 800269e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026a0:	463b      	mov	r3, r7
 80026a2:	4611      	mov	r1, r2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 f896 	bl	80027d6 <HI_MPU6050>
 80026aa:	f107 0318 	add.w	r3, r7, #24
 80026ae:	463a      	mov	r2, r7
 80026b0:	6810      	ldr	r0, [r2, #0]
 80026b2:	6851      	ldr	r1, [r2, #4]
 80026b4:	6892      	ldr	r2, [r2, #8]
 80026b6:	c307      	stmia	r3!, {r0, r1, r2}
	HI_Bus.HI_DiscreteInput_Bus = HI_DiscreteInput();
 80026b8:	f000 f846 	bl	8002748 <HI_DiscreteInput>
 80026bc:	f887 0024 	strb.w	r0, [r7, #36]	; 0x24

	return HI_Bus;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	461c      	mov	r4, r3
 80026c4:	f107 0318 	add.w	r3, r7, #24
 80026c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80026ca:	6020      	str	r0, [r4, #0]
 80026cc:	6061      	str	r1, [r4, #4]
 80026ce:	60a2      	str	r2, [r4, #8]
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	81a3      	strh	r3, [r4, #12]
}
 80026d4:	6978      	ldr	r0, [r7, #20]
 80026d6:	372c      	adds	r7, #44	; 0x2c
 80026d8:	46bd      	mov	sp, r7
 80026da:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80026de:	b004      	add	sp, #16
 80026e0:	4770      	bx	lr

080026e2 <IO_HardwareOutputs>:

void IO_HardwareOutputs(Config_Bus_t Config_Bus, OP_Bus_t OP_Bus){
 80026e2:	b084      	sub	sp, #16
 80026e4:	b5b0      	push	{r4, r5, r7, lr}
 80026e6:	b090      	sub	sp, #64	; 0x40
 80026e8:	af10      	add	r7, sp, #64	; 0x40
 80026ea:	f107 0410 	add.w	r4, r7, #16
 80026ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HO_VESC(Config_Bus.Config_HAL_Bus.hcan, OP_Bus.OP_VESC_Bus.pTxData);
 80026f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026f4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80026f8:	4611      	mov	r1, r2
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 f968 	bl	80029d0 <HO_VESC>
	HO_HCO5(Config_Bus.Config_HAL_Bus.huart2, OP_Bus.OP_HC05_Bus.pData, OP_Bus.OP_HC05_Bus.Size);
 8002700:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002704:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8002708:	920e      	str	r2, [sp, #56]	; 0x38
 800270a:	930d      	str	r3, [sp, #52]	; 0x34
 800270c:	466d      	mov	r5, sp
 800270e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8002712:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002714:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002716:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002718:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800271a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800271c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800271e:	6823      	ldr	r3, [r4, #0]
 8002720:	602b      	str	r3, [r5, #0]
 8002722:	f107 0314 	add.w	r3, r7, #20
 8002726:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002728:	f000 f840 	bl	80027ac <HO_HCO5>
	HO_DiscreteIO(OP_Bus.OP_DiscreteOutput_Bus.GLEDCmd_bool, OP_Bus.OP_DiscreteOutput_Bus.RLEDCmd_bool);
 800272c:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8002730:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 8002734:	4611      	mov	r1, r2
 8002736:	4618      	mov	r0, r3
 8002738:	f000 f81c 	bl	8002774 <HO_DiscreteIO>
}
 800273c:	bf00      	nop
 800273e:	46bd      	mov	sp, r7
 8002740:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002744:	b004      	add	sp, #16
 8002746:	4770      	bx	lr

08002748 <HI_DiscreteInput>:
 */

#include "IO_DiscreteIO.h"

/* Start global function definitions */
HI_DiscreteInput_Bus_t HI_DiscreteInput(void){
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
	HI_DiscreteInput_Bus_t HI_DiscreteInput_Bus;

	// Input pulled up, need to NOT
	HI_DiscreteInput_Bus.EnableBtn_bool = !HAL_GPIO_ReadPin(EnableBtn_GPIO_Port, EnableBtn_Pin);
 800274e:	2110      	movs	r1, #16
 8002750:	4807      	ldr	r0, [pc, #28]	; (8002770 <HI_DiscreteInput+0x28>)
 8002752:	f002 fb45 	bl	8004de0 <HAL_GPIO_ReadPin>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	bf0c      	ite	eq
 800275c:	2301      	moveq	r3, #1
 800275e:	2300      	movne	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	713b      	strb	r3, [r7, #4]

	return HI_DiscreteInput_Bus;
 8002764:	793b      	ldrb	r3, [r7, #4]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40020000 	.word	0x40020000

08002774 <HO_DiscreteIO>:

void HO_DiscreteIO(bool GLEDCmd_bool, bool RLEDCmd_bool){
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	460a      	mov	r2, r1
 800277e:	71fb      	strb	r3, [r7, #7]
 8002780:	4613      	mov	r3, r2
 8002782:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GLED_GPIO_Port, GLED_Pin, (GPIO_PinState) GLEDCmd_bool);
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	461a      	mov	r2, r3
 8002788:	2180      	movs	r1, #128	; 0x80
 800278a:	4806      	ldr	r0, [pc, #24]	; (80027a4 <HO_DiscreteIO+0x30>)
 800278c:	f002 fb40 	bl	8004e10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RLED_GPIO_Port, RLED_Pin, (GPIO_PinState) RLEDCmd_bool);
 8002790:	79bb      	ldrb	r3, [r7, #6]
 8002792:	461a      	mov	r2, r3
 8002794:	2101      	movs	r1, #1
 8002796:	4804      	ldr	r0, [pc, #16]	; (80027a8 <HO_DiscreteIO+0x34>)
 8002798:	f002 fb3a 	bl	8004e10 <HAL_GPIO_WritePin>
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40020000 	.word	0x40020000
 80027a8:	40020400 	.word	0x40020400

080027ac <HO_HCO5>:
/* Start Defines */
#define UART_TIMEOUT 50 //MS
/* End Defines */

/* Start Global Function Definitions */
void HO_HCO5(UART_HandleTypeDef huart, const uint8_t *pData, uint16_t Size){
 80027ac:	b084      	sub	sp, #16
 80027ae:	b580      	push	{r7, lr}
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	f107 0c08 	add.w	ip, r7, #8
 80027b6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart, pData, Size, (uint32_t) UART_TIMEOUT);
 80027ba:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80027be:	2332      	movs	r3, #50	; 0x32
 80027c0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80027c2:	f107 0008 	add.w	r0, r7, #8
 80027c6:	f004 ff04 	bl	80075d2 <HAL_UART_Transmit>
}
 80027ca:	bf00      	nop
 80027cc:	46bd      	mov	sp, r7
 80027ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80027d2:	b004      	add	sp, #16
 80027d4:	4770      	bx	lr

080027d6 <HI_MPU6050>:
static MPU6050_RawIMUDataSet_t MPU6050_GetRawAccel(I2C_HandleTypeDef *hi2c);
static MPU6050_RawIMUDataSet_t MPU6050_GetRawGyro(I2C_HandleTypeDef *hi2c);
/* End function prototypes */

/* Start global function definitions */
HI_MPU6050_Bus_t HI_MPU6050(I2C_HandleTypeDef *hi2c){
 80027d6:	b590      	push	{r4, r7, lr}
 80027d8:	b089      	sub	sp, #36	; 0x24
 80027da:	af00      	add	r7, sp, #0
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	60b9      	str	r1, [r7, #8]
	HI_MPU6050_Bus_t HI_MPU6050_Bus;

	HI_MPU6050_Bus.RawAccel = MPU6050_GetRawAccel(hi2c);
 80027e0:	463b      	mov	r3, r7
 80027e2:	68b9      	ldr	r1, [r7, #8]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 f81f 	bl	8002828 <MPU6050_GetRawAccel>
 80027ea:	f107 0314 	add.w	r3, r7, #20
 80027ee:	463a      	mov	r2, r7
 80027f0:	6810      	ldr	r0, [r2, #0]
 80027f2:	6018      	str	r0, [r3, #0]
 80027f4:	8892      	ldrh	r2, [r2, #4]
 80027f6:	809a      	strh	r2, [r3, #4]
	HI_MPU6050_Bus.RawGyro = MPU6050_GetRawGyro(hi2c);
 80027f8:	463b      	mov	r3, r7
 80027fa:	68b9      	ldr	r1, [r7, #8]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 f87d 	bl	80028fc <MPU6050_GetRawGyro>
 8002802:	f107 031a 	add.w	r3, r7, #26
 8002806:	463a      	mov	r2, r7
 8002808:	6811      	ldr	r1, [r2, #0]
 800280a:	6019      	str	r1, [r3, #0]
 800280c:	8892      	ldrh	r2, [r2, #4]
 800280e:	809a      	strh	r2, [r3, #4]

	return HI_MPU6050_Bus;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	461c      	mov	r4, r3
 8002814:	f107 0314 	add.w	r3, r7, #20
 8002818:	cb07      	ldmia	r3!, {r0, r1, r2}
 800281a:	6020      	str	r0, [r4, #0]
 800281c:	6061      	str	r1, [r4, #4]
 800281e:	60a2      	str	r2, [r4, #8]
}
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	3724      	adds	r7, #36	; 0x24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd90      	pop	{r4, r7, pc}

08002828 <MPU6050_GetRawAccel>:
/* End global function definitions */

/* Start static function definitions */
static MPU6050_RawIMUDataSet_t MPU6050_GetRawAccel(I2C_HandleTypeDef *hi2c){
 8002828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800282c:	b08d      	sub	sp, #52	; 0x34
 800282e:	af04      	add	r7, sp, #16
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	6039      	str	r1, [r7, #0]
 8002834:	466b      	mov	r3, sp
 8002836:	461e      	mov	r6, r3
	MPU6050_RawIMUDataSet_t RawAccel;
	uint8_t	numReg = 6;
 8002838:	2306      	movs	r3, #6
 800283a:	77fb      	strb	r3, [r7, #31]
	uint8_t regData[numReg];
 800283c:	7ff9      	ldrb	r1, [r7, #31]
 800283e:	460b      	mov	r3, r1
 8002840:	3b01      	subs	r3, #1
 8002842:	61bb      	str	r3, [r7, #24]
 8002844:	b2cb      	uxtb	r3, r1
 8002846:	2200      	movs	r2, #0
 8002848:	4698      	mov	r8, r3
 800284a:	4691      	mov	r9, r2
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002858:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800285c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002860:	b2cb      	uxtb	r3, r1
 8002862:	2200      	movs	r2, #0
 8002864:	461c      	mov	r4, r3
 8002866:	4615      	mov	r5, r2
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	f04f 0300 	mov.w	r3, #0
 8002870:	00eb      	lsls	r3, r5, #3
 8002872:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002876:	00e2      	lsls	r2, r4, #3
 8002878:	460b      	mov	r3, r1
 800287a:	3307      	adds	r3, #7
 800287c:	08db      	lsrs	r3, r3, #3
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	ebad 0d03 	sub.w	sp, sp, r3
 8002884:	ab04      	add	r3, sp, #16
 8002886:	3300      	adds	r3, #0
 8002888:	617b      	str	r3, [r7, #20]

	/* Read accel measurement registers and store in regData array */
	HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, ACCEL_OUT_START_REG, REG_LEN, (uint8_t*) &regData, numReg, I2C_TIMEOUT);
 800288a:	7ffb      	ldrb	r3, [r7, #31]
 800288c:	b29b      	uxth	r3, r3
 800288e:	2232      	movs	r2, #50	; 0x32
 8002890:	9202      	str	r2, [sp, #8]
 8002892:	9301      	str	r3, [sp, #4]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	2301      	movs	r3, #1
 800289a:	223b      	movs	r2, #59	; 0x3b
 800289c:	21d0      	movs	r1, #208	; 0xd0
 800289e:	6838      	ldr	r0, [r7, #0]
 80028a0:	f002 fd0e 	bl	80052c0 <HAL_I2C_Mem_Read>

	/* Combine high and low bits to 16 bit integer, update struct contents*/
	RawAccel.XOUT_na = (int16_t) ((regData[0] << 8) | (regData[1]));
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	021b      	lsls	r3, r3, #8
 80028aa:	b21a      	sxth	r2, r3
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	785b      	ldrb	r3, [r3, #1]
 80028b0:	b21b      	sxth	r3, r3
 80028b2:	4313      	orrs	r3, r2
 80028b4:	b21b      	sxth	r3, r3
 80028b6:	81bb      	strh	r3, [r7, #12]
	RawAccel.YOUT_na = (int16_t) ((regData[2] << 8) | (regData[3]));
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	789b      	ldrb	r3, [r3, #2]
 80028bc:	021b      	lsls	r3, r3, #8
 80028be:	b21a      	sxth	r2, r3
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	78db      	ldrb	r3, [r3, #3]
 80028c4:	b21b      	sxth	r3, r3
 80028c6:	4313      	orrs	r3, r2
 80028c8:	b21b      	sxth	r3, r3
 80028ca:	81fb      	strh	r3, [r7, #14]
	RawAccel.ZOUT_na = (int16_t) ((regData[4] << 8) | (regData[5]));
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	791b      	ldrb	r3, [r3, #4]
 80028d0:	021b      	lsls	r3, r3, #8
 80028d2:	b21a      	sxth	r2, r3
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	795b      	ldrb	r3, [r3, #5]
 80028d8:	b21b      	sxth	r3, r3
 80028da:	4313      	orrs	r3, r2
 80028dc:	b21b      	sxth	r3, r3
 80028de:	823b      	strh	r3, [r7, #16]

	/* Return RawAccel struct*/
	return RawAccel;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	461a      	mov	r2, r3
 80028e4:	f107 030c 	add.w	r3, r7, #12
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	6010      	str	r0, [r2, #0]
 80028ec:	889b      	ldrh	r3, [r3, #4]
 80028ee:	8093      	strh	r3, [r2, #4]
 80028f0:	46b5      	mov	sp, r6
}
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	3724      	adds	r7, #36	; 0x24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080028fc <MPU6050_GetRawGyro>:

static MPU6050_RawIMUDataSet_t MPU6050_GetRawGyro(I2C_HandleTypeDef *hi2c){
 80028fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002900:	b08d      	sub	sp, #52	; 0x34
 8002902:	af04      	add	r7, sp, #16
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	6039      	str	r1, [r7, #0]
 8002908:	466b      	mov	r3, sp
 800290a:	461e      	mov	r6, r3
	MPU6050_RawIMUDataSet_t RawGyro;
	uint8_t	numReg = 6;
 800290c:	2306      	movs	r3, #6
 800290e:	77fb      	strb	r3, [r7, #31]
	uint8_t regData[numReg];
 8002910:	7ff9      	ldrb	r1, [r7, #31]
 8002912:	460b      	mov	r3, r1
 8002914:	3b01      	subs	r3, #1
 8002916:	61bb      	str	r3, [r7, #24]
 8002918:	b2cb      	uxtb	r3, r1
 800291a:	2200      	movs	r2, #0
 800291c:	4698      	mov	r8, r3
 800291e:	4691      	mov	r9, r2
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800292c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002930:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002934:	b2cb      	uxtb	r3, r1
 8002936:	2200      	movs	r2, #0
 8002938:	461c      	mov	r4, r3
 800293a:	4615      	mov	r5, r2
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	f04f 0300 	mov.w	r3, #0
 8002944:	00eb      	lsls	r3, r5, #3
 8002946:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800294a:	00e2      	lsls	r2, r4, #3
 800294c:	460b      	mov	r3, r1
 800294e:	3307      	adds	r3, #7
 8002950:	08db      	lsrs	r3, r3, #3
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	ebad 0d03 	sub.w	sp, sp, r3
 8002958:	ab04      	add	r3, sp, #16
 800295a:	3300      	adds	r3, #0
 800295c:	617b      	str	r3, [r7, #20]

	/* Read gyro measurement registers and store in regData array */
	HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, GYRO_OUT_START_REG, REG_LEN, (uint8_t*) &regData, numReg, I2C_TIMEOUT);
 800295e:	7ffb      	ldrb	r3, [r7, #31]
 8002960:	b29b      	uxth	r3, r3
 8002962:	2232      	movs	r2, #50	; 0x32
 8002964:	9202      	str	r2, [sp, #8]
 8002966:	9301      	str	r3, [sp, #4]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	2301      	movs	r3, #1
 800296e:	2243      	movs	r2, #67	; 0x43
 8002970:	21d0      	movs	r1, #208	; 0xd0
 8002972:	6838      	ldr	r0, [r7, #0]
 8002974:	f002 fca4 	bl	80052c0 <HAL_I2C_Mem_Read>

	/* Combine high and low bits to 16 bit integer, update struct contents*/
	RawGyro.XOUT_na = (int16_t) ((regData[0] << 8) | (regData[1]));
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	021b      	lsls	r3, r3, #8
 800297e:	b21a      	sxth	r2, r3
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	785b      	ldrb	r3, [r3, #1]
 8002984:	b21b      	sxth	r3, r3
 8002986:	4313      	orrs	r3, r2
 8002988:	b21b      	sxth	r3, r3
 800298a:	81bb      	strh	r3, [r7, #12]
	RawGyro.YOUT_na = (int16_t) ((regData[2] << 8) | (regData[3]));
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	789b      	ldrb	r3, [r3, #2]
 8002990:	021b      	lsls	r3, r3, #8
 8002992:	b21a      	sxth	r2, r3
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	78db      	ldrb	r3, [r3, #3]
 8002998:	b21b      	sxth	r3, r3
 800299a:	4313      	orrs	r3, r2
 800299c:	b21b      	sxth	r3, r3
 800299e:	81fb      	strh	r3, [r7, #14]
	RawGyro.ZOUT_na = (int16_t) ((regData[4] << 8) | (regData[5]));
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	791b      	ldrb	r3, [r3, #4]
 80029a4:	021b      	lsls	r3, r3, #8
 80029a6:	b21a      	sxth	r2, r3
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	795b      	ldrb	r3, [r3, #5]
 80029ac:	b21b      	sxth	r3, r3
 80029ae:	4313      	orrs	r3, r2
 80029b0:	b21b      	sxth	r3, r3
 80029b2:	823b      	strh	r3, [r7, #16]

	/* Return RawGyro struct*/
	return RawGyro;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	461a      	mov	r2, r3
 80029b8:	f107 030c 	add.w	r3, r7, #12
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	6010      	str	r0, [r2, #0]
 80029c0:	889b      	ldrh	r3, [r3, #4]
 80029c2:	8093      	strh	r3, [r2, #4]
 80029c4:	46b5      	mov	sp, r6
}
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	3724      	adds	r7, #36	; 0x24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080029d0 <HO_VESC>:
 */

#include "IO_VESC.h"

/* Start global function definitions */
void HO_VESC(CAN_HandleTypeDef *hcan, uint8_t *TxData){
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
//	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK){
//		Error_Handler();
//	}
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <OP_DiscreteOutput>:
/* Start Function Prototypes */
static bool LEDStateToCommand(LEDState StateReq_enum, bool* pLastState, uint32_t* pBlinkCnt);
/* End Function Prototypes */

/* Start Global Function Definition */
OP_DiscreteOutput_Bus_t OP_DiscreteOutput(LEDState GLEDStateReq_enum, LEDState RLEDStateReq_enum){
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	460a      	mov	r2, r1
 80029f2:	71fb      	strb	r3, [r7, #7]
 80029f4:	4613      	mov	r3, r2
 80029f6:	71bb      	strb	r3, [r7, #6]
	OP_DiscreteOutput_Bus_t OP_DiscreteOutput_Bus;

	OP_DiscreteOutput_Bus.GLEDCmd_bool = LEDStateToCommand(GLEDStateReq_enum, &GLED_LastState, &GLED_BlinkCnt);
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	4a0e      	ldr	r2, [pc, #56]	; (8002a34 <OP_DiscreteOutput+0x4c>)
 80029fc:	490e      	ldr	r1, [pc, #56]	; (8002a38 <OP_DiscreteOutput+0x50>)
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 f820 	bl	8002a44 <LEDStateToCommand>
 8002a04:	4603      	mov	r3, r0
 8002a06:	723b      	strb	r3, [r7, #8]
	OP_DiscreteOutput_Bus.RLEDCmd_bool = LEDStateToCommand(RLEDStateReq_enum, &RLED_LastState, &RLED_BlinkCnt);
 8002a08:	79bb      	ldrb	r3, [r7, #6]
 8002a0a:	4a0c      	ldr	r2, [pc, #48]	; (8002a3c <OP_DiscreteOutput+0x54>)
 8002a0c:	490c      	ldr	r1, [pc, #48]	; (8002a40 <OP_DiscreteOutput+0x58>)
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 f818 	bl	8002a44 <LEDStateToCommand>
 8002a14:	4603      	mov	r3, r0
 8002a16:	727b      	strb	r3, [r7, #9]

	return OP_DiscreteOutput_Bus;
 8002a18:	893b      	ldrh	r3, [r7, #8]
 8002a1a:	81bb      	strh	r3, [r7, #12]
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	7b3a      	ldrb	r2, [r7, #12]
 8002a20:	f362 0307 	bfi	r3, r2, #0, #8
 8002a24:	7b7a      	ldrb	r2, [r7, #13]
 8002a26:	f362 230f 	bfi	r3, r2, #8, #8
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000358 	.word	0x20000358
 8002a38:	20000354 	.word	0x20000354
 8002a3c:	2000035c 	.word	0x2000035c
 8002a40:	20000355 	.word	0x20000355

08002a44 <LEDStateToCommand>:
/* End Global Function Definition */

/* Start Static Function Definition */
static bool LEDStateToCommand(LEDState StateReq_enum, bool* pLastState, uint32_t* pBlinkCnt){
 8002a44:	b480      	push	{r7}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
 8002a50:	73fb      	strb	r3, [r7, #15]
	bool LEDstate;
	bool lastState = *pLastState;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	75bb      	strb	r3, [r7, #22]
	uint32_t blinkCnt = *pBlinkCnt;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	613b      	str	r3, [r7, #16]

	switch (StateReq_enum){
 8002a5e:	7bfb      	ldrb	r3, [r7, #15]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d002      	beq.n	8002a6a <LEDStateToCommand+0x26>
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d006      	beq.n	8002a76 <LEDStateToCommand+0x32>
 8002a68:	e02d      	b.n	8002ac6 <LEDStateToCommand+0x82>
	case On:
		LEDstate = true;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	75fb      	strb	r3, [r7, #23]
		*pBlinkCnt = 0;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
		break;
 8002a74:	e02c      	b.n	8002ad0 <LEDStateToCommand+0x8c>

	case Blink:
		if (blinkCnt == 0){
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d102      	bne.n	8002a82 <LEDStateToCommand+0x3e>
			LEDstate = true; // First tick
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	75fb      	strb	r3, [r7, #23]
 8002a80:	e01b      	b.n	8002aba <LEDStateToCommand+0x76>
		} else if ((blinkCnt % BLINK_PERIOD_TIC) == 0){
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4b17      	ldr	r3, [pc, #92]	; (8002ae4 <LEDStateToCommand+0xa0>)
 8002a86:	fba3 1302 	umull	r1, r3, r3, r2
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	2164      	movs	r1, #100	; 0x64
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10e      	bne.n	8002ab6 <LEDStateToCommand+0x72>
			LEDstate = !lastState; // Toggle state if period has passed
 8002a98:	7dbb      	ldrb	r3, [r7, #22]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	bf14      	ite	ne
 8002a9e:	2301      	movne	r3, #1
 8002aa0:	2300      	moveq	r3, #0
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	f083 0301 	eor.w	r3, r3, #1
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	75fb      	strb	r3, [r7, #23]
 8002aac:	7dfb      	ldrb	r3, [r7, #23]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	75fb      	strb	r3, [r7, #23]
 8002ab4:	e001      	b.n	8002aba <LEDStateToCommand+0x76>
		} else{
			LEDstate = lastState; // Hold last state
 8002ab6:	7dbb      	ldrb	r3, [r7, #22]
 8002ab8:	75fb      	strb	r3, [r7, #23]
		}
		*pBlinkCnt = *pBlinkCnt + 1; // Increment blink count by one tick
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	1c5a      	adds	r2, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	601a      	str	r2, [r3, #0]
		break;
 8002ac4:	e004      	b.n	8002ad0 <LEDStateToCommand+0x8c>

	default:
		LEDstate = false;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	75fb      	strb	r3, [r7, #23]
		*pBlinkCnt = 0;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
	}

	*pLastState = LEDstate; // Store last state for next iteration
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	7dfa      	ldrb	r2, [r7, #23]
 8002ad4:	701a      	strb	r2, [r3, #0]

	return LEDstate;
 8002ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	371c      	adds	r7, #28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	51eb851f 	.word	0x51eb851f

08002ae8 <OP_HC05>:
 *  Created on: Jul 8, 2023
 *      Author: aloehr
 */
#include "PR_HC05.h"

OP_HC05_Bus_t OP_HC05(CT_Log_Bus_t CT_Log_Bus){
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	1d3b      	adds	r3, r7, #4
 8002af2:	e883 0006 	stmia.w	r3, {r1, r2}
	OP_HC05_Bus_t OP_HC05_Bus;

	OP_HC05_Bus.pData = CT_Log_Bus.pData;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	613b      	str	r3, [r7, #16]
	OP_HC05_Bus.Size = CT_Log_Bus.Size;
 8002afa:	893b      	ldrh	r3, [r7, #8]
 8002afc:	82bb      	strh	r3, [r7, #20]

	return OP_HC05_Bus;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	461a      	mov	r2, r3
 8002b02:	f107 0310 	add.w	r3, r7, #16
 8002b06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002b0a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	371c      	adds	r7, #28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <IP_MPU6050>:
static MPU6050_AccelData_t MPU6050_CalcAccel(MPU6050_RawIMUDataSet_t RawAccel, float accelSens, MPU6050_IMUOffsetData_t IMUOffsets);
static MPU6050_GyroData_t MPU6050_CalcGyro(MPU6050_RawIMUDataSet_t RawGyro, float gyroSens, MPU6050_IMUOffsetData_t IMUOffsets);
/* End Function Prototypes */

/* Start Global Function Definition */
IP_MPU6050_Bus_t IP_MPU6050(HI_MPU6050_Bus_t HI_MPU6050_Bus, Config_MPU6050_Bus_t Config_MPU6050_Bus){
 8002b1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b1c:	b091      	sub	sp, #68	; 0x44
 8002b1e:	af06      	add	r7, sp, #24
 8002b20:	60f8      	str	r0, [r7, #12]
 8002b22:	4638      	mov	r0, r7
 8002b24:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	IP_MPU6050_Bus_t IP_MPU6050_Bus;

	IP_MPU6050_Bus.accel = MPU6050_CalcAccel(HI_MPU6050_Bus.RawAccel, Config_MPU6050_Bus.Sensitivity.AccelSens, Config_MPU6050_Bus.Offsets);
 8002b28:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002b2c:	466d      	mov	r5, sp
 8002b2e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8002b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b36:	6823      	ldr	r3, [r4, #0]
 8002b38:	602b      	str	r3, [r5, #0]
 8002b3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b3e:	cb0c      	ldmia	r3, {r2, r3}
 8002b40:	eeb0 0a67 	vmov.f32	s0, s15
 8002b44:	4639      	mov	r1, r7
 8002b46:	c903      	ldmia	r1, {r0, r1}
 8002b48:	f000 f852 	bl	8002bf0 <MPU6050_CalcAccel>
 8002b4c:	eef0 6a40 	vmov.f32	s13, s0
 8002b50:	eeb0 7a60 	vmov.f32	s14, s1
 8002b54:	eef0 7a41 	vmov.f32	s15, s2
 8002b58:	edc7 6a04 	vstr	s13, [r7, #16]
 8002b5c:	ed87 7a05 	vstr	s14, [r7, #20]
 8002b60:	edc7 7a06 	vstr	s15, [r7, #24]
	IP_MPU6050_Bus.gyro = MPU6050_CalcGyro(HI_MPU6050_Bus.RawGyro, Config_MPU6050_Bus.Sensitivity.GyroSens, Config_MPU6050_Bus.Offsets);
 8002b64:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002b68:	f8d7 3006 	ldr.w	r3, [r7, #6]
 8002b6c:	469c      	mov	ip, r3
 8002b6e:	897b      	ldrh	r3, [r7, #10]
 8002b70:	2600      	movs	r6, #0
 8002b72:	f363 060f 	bfi	r6, r3, #0, #16
 8002b76:	466d      	mov	r5, sp
 8002b78:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8002b7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b80:	6823      	ldr	r3, [r4, #0]
 8002b82:	602b      	str	r3, [r5, #0]
 8002b84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b88:	cb0c      	ldmia	r3, {r2, r3}
 8002b8a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b8e:	4660      	mov	r0, ip
 8002b90:	4631      	mov	r1, r6
 8002b92:	f000 f895 	bl	8002cc0 <MPU6050_CalcGyro>
 8002b96:	eef0 6a40 	vmov.f32	s13, s0
 8002b9a:	eeb0 7a60 	vmov.f32	s14, s1
 8002b9e:	eef0 7a41 	vmov.f32	s15, s2
 8002ba2:	edc7 6a07 	vstr	s13, [r7, #28]
 8002ba6:	ed87 7a08 	vstr	s14, [r7, #32]
 8002baa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	if(Config_MPU6050_Bus.Offsets.SensCalibrated_bool){
 8002bae:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00e      	beq.n	8002bd4 <IP_MPU6050+0xba>
		IP_MPU6050_Bus = MPU6050_IMUDataClamp(IP_MPU6050_Bus);
 8002bb6:	f107 0510 	add.w	r5, r7, #16
 8002bba:	466c      	mov	r4, sp
 8002bbc:	f107 031c 	add.w	r3, r7, #28
 8002bc0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002bc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002bc8:	f107 0310 	add.w	r3, r7, #16
 8002bcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bce:	4628      	mov	r0, r5
 8002bd0:	f000 f914 	bl	8002dfc <MPU6050_IMUDataClamp>
	}

	return IP_MPU6050_Bus;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	461d      	mov	r5, r3
 8002bd8:	f107 0410 	add.w	r4, r7, #16
 8002bdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002be0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002be4:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	372c      	adds	r7, #44	; 0x2c
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bf0 <MPU6050_CalcAccel>:
/* End Global Function Definition */

/* Start Static Function Definition */
static MPU6050_AccelData_t MPU6050_CalcAccel(MPU6050_RawIMUDataSet_t RawAccel, float accelSens, MPU6050_IMUOffsetData_t IMUOffsets){
 8002bf0:	b082      	sub	sp, #8
 8002bf2:	b490      	push	{r4, r7}
 8002bf4:	b08e      	sub	sp, #56	; 0x38
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	f107 0418 	add.w	r4, r7, #24
 8002bfc:	e884 0003 	stmia.w	r4, {r0, r1}
 8002c00:	ed87 0a05 	vstr	s0, [r7, #20]
 8002c04:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002c08:	e881 000c 	stmia.w	r1, {r2, r3}
	MPU6050_AccelData_t Accel;

	/* Convert bits to g's, store in Accel struct*/
	Accel.XOUT_ms2 = (RawAccel.XOUT_na / accelSens) * g + IMUOffsets.AxOffset;
 8002c0c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002c10:	ee07 3a90 	vmov	s15, r3
 8002c14:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c18:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c20:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002cbc <MPU6050_CalcAccel+0xcc>
 8002c24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c28:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c30:	edc7 7a08 	vstr	s15, [r7, #32]
	Accel.YOUT_ms2 = (RawAccel.YOUT_na / accelSens) * g + IMUOffsets.AyOffset;
 8002c34:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002c38:	ee07 3a90 	vmov	s15, r3
 8002c3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c40:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c48:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002cbc <MPU6050_CalcAccel+0xcc>
 8002c4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c50:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c58:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	Accel.ZOUT_ms2 = (RawAccel.ZOUT_na / accelSens) * g + IMUOffsets.AzOffset;
 8002c5c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002c60:	ee07 3a90 	vmov	s15, r3
 8002c64:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c68:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c70:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002cbc <MPU6050_CalcAccel+0xcc>
 8002c74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c78:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c80:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	/* Return Accel struct */
	return Accel;
 8002c84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c88:	f107 0220 	add.w	r2, r7, #32
 8002c8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002c92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c98:	ee06 1a90 	vmov	s13, r1
 8002c9c:	ee07 2a10 	vmov	s14, r2
 8002ca0:	ee07 3a90 	vmov	s15, r3
}
 8002ca4:	eeb0 0a66 	vmov.f32	s0, s13
 8002ca8:	eef0 0a47 	vmov.f32	s1, s14
 8002cac:	eeb0 1a67 	vmov.f32	s2, s15
 8002cb0:	3738      	adds	r7, #56	; 0x38
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc90      	pop	{r4, r7}
 8002cb6:	b002      	add	sp, #8
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	411ce7d5 	.word	0x411ce7d5

08002cc0 <MPU6050_CalcGyro>:

static MPU6050_GyroData_t MPU6050_CalcGyro(MPU6050_RawIMUDataSet_t RawGyro, float gyroSens, MPU6050_IMUOffsetData_t IMUOffsets){
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	b490      	push	{r4, r7}
 8002cc4:	b08e      	sub	sp, #56	; 0x38
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	f107 0418 	add.w	r4, r7, #24
 8002ccc:	e884 0003 	stmia.w	r4, {r0, r1}
 8002cd0:	ed87 0a05 	vstr	s0, [r7, #20]
 8002cd4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002cd8:	e881 000c 	stmia.w	r1, {r2, r3}
	MPU6050_GyroData_t Gyro;

	/* Convert bits to deg/s, store in Gyro struct*/
	Gyro.XOUT_dps = RawGyro.XOUT_na / gyroSens + IMUOffsets.WxOffset;
 8002cdc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002ce0:	ee07 3a90 	vmov	s15, r3
 8002ce4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ce8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cf0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf8:	edc7 7a08 	vstr	s15, [r7, #32]
	Gyro.YOUT_dps = RawGyro.YOUT_na / gyroSens + IMUOffsets.WyOffset;
 8002cfc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002d00:	ee07 3a90 	vmov	s15, r3
 8002d04:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002d08:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d10:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d18:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	Gyro.ZOUT_dps = RawGyro.ZOUT_na / gyroSens + IMUOffsets.WzOffset;
 8002d1c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002d20:	ee07 3a90 	vmov	s15, r3
 8002d24:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002d28:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d30:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d38:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	/* Return Gyro struct */
	return Gyro;
 8002d3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d40:	f107 0220 	add.w	r2, r7, #32
 8002d44:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002d4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d50:	ee06 1a90 	vmov	s13, r1
 8002d54:	ee07 2a10 	vmov	s14, r2
 8002d58:	ee07 3a90 	vmov	s15, r3
}
 8002d5c:	eeb0 0a66 	vmov.f32	s0, s13
 8002d60:	eef0 0a47 	vmov.f32	s1, s14
 8002d64:	eeb0 1a67 	vmov.f32	s2, s15
 8002d68:	3738      	adds	r7, #56	; 0x38
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc90      	pop	{r4, r7}
 8002d6e:	b002      	add	sp, #8
 8002d70:	4770      	bx	lr

08002d72 <clamp>:

static float clamp(float data, float clampVal, float threshold, uint8_t mode){
 8002d72:	b480      	push	{r7}
 8002d74:	b087      	sub	sp, #28
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	ed87 0a03 	vstr	s0, [r7, #12]
 8002d7c:	edc7 0a02 	vstr	s1, [r7, #8]
 8002d80:	ed87 1a01 	vstr	s2, [r7, #4]
 8002d84:	4603      	mov	r3, r0
 8002d86:	70fb      	strb	r3, [r7, #3]
	// mode = 0: Clamp to clampVal if data below threshold
	// mode = 1: Clamp to clampVal if data above threshold
	float result;

	uint8_t applyClamp_bool = 0;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	74fb      	strb	r3, [r7, #19]

	// Check mode and if clamp is required
	switch(mode){
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <clamp+0x26>
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d010      	beq.n	8002db8 <clamp+0x46>
 8002d96:	e01f      	b.n	8002dd8 <clamp+0x66>
	case 0:
		applyClamp_bool = (fabsf(data) < threshold);
 8002d98:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d9c:	eef0 7ae7 	vabs.f32	s15, s15
 8002da0:	ed97 7a01 	vldr	s14, [r7, #4]
 8002da4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dac:	bfcc      	ite	gt
 8002dae:	2301      	movgt	r3, #1
 8002db0:	2300      	movle	r3, #0
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	74fb      	strb	r3, [r7, #19]
		break;
 8002db6:	e00f      	b.n	8002dd8 <clamp+0x66>

	case 1:
		applyClamp_bool = (fabsf(data) > threshold);
 8002db8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dbc:	eef0 7ae7 	vabs.f32	s15, s15
 8002dc0:	ed97 7a01 	vldr	s14, [r7, #4]
 8002dc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dcc:	bf4c      	ite	mi
 8002dce:	2301      	movmi	r3, #1
 8002dd0:	2300      	movpl	r3, #0
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	74fb      	strb	r3, [r7, #19]
		break;
 8002dd6:	bf00      	nop
	}

	// Apply clamp if above criteria are met
	if(applyClamp_bool){
 8002dd8:	7cfb      	ldrb	r3, [r7, #19]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <clamp+0x72>
		result = clampVal;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	e001      	b.n	8002de8 <clamp+0x76>
	} else{
		result = data;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	617b      	str	r3, [r7, #20]
	}

	return result;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	ee07 3a90 	vmov	s15, r3
}
 8002dee:	eeb0 0a67 	vmov.f32	s0, s15
 8002df2:	371c      	adds	r7, #28
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <MPU6050_IMUDataClamp>:

static IP_MPU6050_Bus_t MPU6050_IMUDataClamp(IP_MPU6050_Bus_t MPU6050_Bus){
 8002dfc:	b084      	sub	sp, #16
 8002dfe:	b5b0      	push	{r4, r5, r7, lr}
 8002e00:	b08c      	sub	sp, #48	; 0x30
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002e0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	IP_MPU6050_Bus_t Result_Bus;

	float clampVal = 0;
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	62fb      	str	r3, [r7, #44]	; 0x2c
	float clampThreshold = .05;
 8002e14:	4b3d      	ldr	r3, [pc, #244]	; (8002f0c <MPU6050_IMUDataClamp+0x110>)
 8002e16:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t clampMode = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	Result_Bus.accel.XOUT_ms2 = clamp(MPU6050_Bus.accel.XOUT_ms2, clampVal, clampThreshold, clampMode);
 8002e1e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002e22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e26:	4618      	mov	r0, r3
 8002e28:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 8002e2c:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8002e30:	eeb0 0a67 	vmov.f32	s0, s15
 8002e34:	f7ff ff9d 	bl	8002d72 <clamp>
 8002e38:	eef0 7a40 	vmov.f32	s15, s0
 8002e3c:	edc7 7a03 	vstr	s15, [r7, #12]
	Result_Bus.accel.YOUT_ms2 = clamp(MPU6050_Bus.accel.YOUT_ms2, clampVal, clampThreshold, clampMode);
 8002e40:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002e44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e48:	4618      	mov	r0, r3
 8002e4a:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 8002e4e:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8002e52:	eeb0 0a67 	vmov.f32	s0, s15
 8002e56:	f7ff ff8c 	bl	8002d72 <clamp>
 8002e5a:	eef0 7a40 	vmov.f32	s15, s0
 8002e5e:	edc7 7a04 	vstr	s15, [r7, #16]
	Result_Bus.accel.ZOUT_ms2 = clamp(MPU6050_Bus.accel.ZOUT_ms2, clampVal, clampThreshold, clampMode);
 8002e62:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 8002e70:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8002e74:	eeb0 0a67 	vmov.f32	s0, s15
 8002e78:	f7ff ff7b 	bl	8002d72 <clamp>
 8002e7c:	eef0 7a40 	vmov.f32	s15, s0
 8002e80:	edc7 7a05 	vstr	s15, [r7, #20]

	Result_Bus.gyro.XOUT_dps = clamp(MPU6050_Bus.gyro.XOUT_dps , clampVal, clampThreshold, clampMode);
 8002e84:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002e88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 8002e92:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8002e96:	eeb0 0a67 	vmov.f32	s0, s15
 8002e9a:	f7ff ff6a 	bl	8002d72 <clamp>
 8002e9e:	eef0 7a40 	vmov.f32	s15, s0
 8002ea2:	edc7 7a06 	vstr	s15, [r7, #24]
	Result_Bus.gyro.YOUT_dps = clamp(MPU6050_Bus.gyro.YOUT_dps , clampVal, clampThreshold, clampMode);
 8002ea6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002eaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002eae:	4618      	mov	r0, r3
 8002eb0:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 8002eb4:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8002eb8:	eeb0 0a67 	vmov.f32	s0, s15
 8002ebc:	f7ff ff59 	bl	8002d72 <clamp>
 8002ec0:	eef0 7a40 	vmov.f32	s15, s0
 8002ec4:	edc7 7a07 	vstr	s15, [r7, #28]
	Result_Bus.gyro.ZOUT_dps = clamp(MPU6050_Bus.gyro.ZOUT_dps , clampVal, clampThreshold, clampMode);
 8002ec8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 8002ed6:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8002eda:	eeb0 0a67 	vmov.f32	s0, s15
 8002ede:	f7ff ff48 	bl	8002d72 <clamp>
 8002ee2:	eef0 7a40 	vmov.f32	s15, s0
 8002ee6:	edc7 7a08 	vstr	s15, [r7, #32]

	return Result_Bus;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	461d      	mov	r5, r3
 8002eee:	f107 040c 	add.w	r4, r7, #12
 8002ef2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ef4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ef6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002efa:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	3730      	adds	r7, #48	; 0x30
 8002f02:	46bd      	mov	sp, r7
 8002f04:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002f08:	b004      	add	sp, #16
 8002f0a:	4770      	bx	lr
 8002f0c:	3d4ccccd 	.word	0x3d4ccccd

08002f10 <OP_VESC>:
static void CANPackMotorSpeed(int32_t speed);
static int8_t llsign(uint32_t x);
/* End function prototypes */

/* Start global function definitions */
OP_VESC_Bus_t OP_VESC(int32_t MotorSpeed_rpm){
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
	OP_VESC_Bus_t OP_VESC_Bus;

	int32_t MotorSpeed_erpm = MotorSpeed_rpm * (NUM_POLE_PAIRS);
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	1a9b      	subs	r3, r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]

	// Limit speed request
	if(llabs(MotorSpeed_erpm) > MAX_SPEED_ERPM){
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	bfb8      	it	lt
 8002f28:	425b      	neglt	r3, r3
 8002f2a:	4a0b      	ldr	r2, [pc, #44]	; (8002f58 <OP_VESC+0x48>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d909      	bls.n	8002f44 <OP_VESC+0x34>
		MotorSpeed_erpm = MAX_SPEED_ERPM * llsign(MotorSpeed_erpm);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 f834 	bl	8002fa0 <llsign>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <OP_VESC+0x48>)
 8002f3e:	fb02 f303 	mul.w	r3, r2, r3
 8002f42:	60fb      	str	r3, [r7, #12]
	}

	CANPackMotorSpeed(MotorSpeed_erpm);
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 f80b 	bl	8002f60 <CANPackMotorSpeed>

	OP_VESC_Bus.pTxData = SpeedReqPayload;
 8002f4a:	4b04      	ldr	r3, [pc, #16]	; (8002f5c <OP_VESC+0x4c>)
 8002f4c:	60bb      	str	r3, [r7, #8]

	return OP_VESC_Bus;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	00012cc8 	.word	0x00012cc8
 8002f5c:	20000360 	.word	0x20000360

08002f60 <CANPackMotorSpeed>:

/* End global function definitions */

/* Start static function definitions */
static void CANPackMotorSpeed(int32_t speed){
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
	SpeedReqPayload[0] = speed >> 24;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	161b      	asrs	r3, r3, #24
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <CANPackMotorSpeed+0x3c>)
 8002f70:	701a      	strb	r2, [r3, #0]
	SpeedReqPayload[1] = (speed >> 16) & 0xFF;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	141b      	asrs	r3, r3, #16
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <CANPackMotorSpeed+0x3c>)
 8002f7a:	705a      	strb	r2, [r3, #1]
	SpeedReqPayload[2] = (speed >> 8) & 0xFF;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	121b      	asrs	r3, r3, #8
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <CANPackMotorSpeed+0x3c>)
 8002f84:	709a      	strb	r2, [r3, #2]
	SpeedReqPayload[3] = speed & 0xFF;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	4b04      	ldr	r3, [pc, #16]	; (8002f9c <CANPackMotorSpeed+0x3c>)
 8002f8c:	70da      	strb	r2, [r3, #3]
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	20000360 	.word	0x20000360

08002fa0 <llsign>:

static int8_t llsign(uint32_t x){
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
	int8_t sign;

	if (x > 0){
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d002      	beq.n	8002fb4 <llsign+0x14>
		sign = 1;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	73fb      	strb	r3, [r7, #15]
 8002fb2:	e001      	b.n	8002fb8 <llsign+0x18>
	}
	else if (x < 0) {
		sign = -1;
	}
	else {
		sign = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	73fb      	strb	r3, [r7, #15]
	}

	return sign;
 8002fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <PR_InputProcessing>:
 */

#include "Processing.h"

/* Start global function definitions */
IP_Bus_t PR_InputProcessing(Config_Bus_t Config_Bus, HI_Bus_t HI_Bus){
 8002fc8:	b084      	sub	sp, #16
 8002fca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fcc:	b099      	sub	sp, #100	; 0x64
 8002fce:	af0a      	add	r7, sp, #40	; 0x28
 8002fd0:	61f8      	str	r0, [r7, #28]
 8002fd2:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8002fd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	IP_Bus_t IP_Bus;

	IP_Bus.IP_MPU6050_Bus = IP_MPU6050(HI_Bus.HI_MPU6050_Bus, Config_Bus.Config_MPU6050_Bus);
 8002fda:	463e      	mov	r6, r7
 8002fdc:	466d      	mov	r5, sp
 8002fde:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8002fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fea:	6823      	ldr	r3, [r4, #0]
 8002fec:	602b      	str	r3, [r5, #0]
 8002fee:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002ff2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ff4:	4630      	mov	r0, r6
 8002ff6:	f7ff fd90 	bl	8002b1a <IP_MPU6050>
 8002ffa:	f107 0420 	add.w	r4, r7, #32
 8002ffe:	463d      	mov	r5, r7
 8003000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003004:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003008:	e884 0003 	stmia.w	r4, {r0, r1}

	return IP_Bus;
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	461d      	mov	r5, r3
 8003010:	f107 0420 	add.w	r4, r7, #32
 8003014:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003016:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003018:	e894 0003 	ldmia.w	r4, {r0, r1}
 800301c:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8003020:	69f8      	ldr	r0, [r7, #28]
 8003022:	373c      	adds	r7, #60	; 0x3c
 8003024:	46bd      	mov	sp, r7
 8003026:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800302a:	b004      	add	sp, #16
 800302c:	4770      	bx	lr

0800302e <PR_OutputProcessing>:

OP_Bus_t PR_OutputProcessing(CT_Bus_t CT_Bus){
 800302e:	b084      	sub	sp, #16
 8003030:	b590      	push	{r4, r7, lr}
 8003032:	b089      	sub	sp, #36	; 0x24
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800303c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	OP_Bus_t OP_Bus;

	OP_Bus.OP_HC05_Bus = OP_HC05(CT_Bus.CT_Log_Bus);
 8003040:	4638      	mov	r0, r7
 8003042:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003046:	e893 0006 	ldmia.w	r3, {r1, r2}
 800304a:	f7ff fd4d 	bl	8002ae8 <OP_HC05>
 800304e:	f107 0310 	add.w	r3, r7, #16
 8003052:	463a      	mov	r2, r7
 8003054:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003058:	e883 0003 	stmia.w	r3, {r0, r1}
	OP_Bus.OP_VESC_Bus = OP_VESC(CT_Bus.CT_Balance_Bus.MotorSpeedReq_rpm);
 800305c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff ff56 	bl	8002f10 <OP_VESC>
 8003064:	61b8      	str	r0, [r7, #24]
	OP_Bus.OP_DiscreteOutput_Bus = OP_DiscreteOutput(CT_Bus.CT_PrimaryStateMachine_Bus.GLEDStateReq_enum, CT_Bus.CT_PrimaryStateMachine_Bus.RLEDStateReq_enum);
 8003066:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800306a:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800306e:	4611      	mov	r1, r2
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff fcb9 	bl	80029e8 <OP_DiscreteOutput>
 8003076:	4603      	mov	r3, r0
 8003078:	83bb      	strh	r3, [r7, #28]

	return OP_Bus;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	461c      	mov	r4, r3
 800307e:	f107 0310 	add.w	r3, r7, #16
 8003082:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003084:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	3724      	adds	r7, #36	; 0x24
 800308c:	46bd      	mov	sp, r7
 800308e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003092:	b004      	add	sp, #16
 8003094:	4770      	bx	lr
	...

08003098 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800309a:	b0c9      	sub	sp, #292	; 0x124
 800309c:	af18      	add	r7, sp, #96	; 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800309e:	f000 fce9 	bl	8003a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030a2:	f000 f83d 	bl	8003120 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030a6:	f000 f9d3 	bl	8003450 <MX_GPIO_Init>
  MX_CAN1_Init();
 80030aa:	f000 f8a3 	bl	80031f4 <MX_CAN1_Init>
  MX_I2C1_Init();
 80030ae:	f000 f8d7 	bl	8003260 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80030b2:	f000 f9a3 	bl	80033fc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80030b6:	f000 f901 	bl	80032bc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // Make these all pointers later
  // Req for CAN or else you won't actually be updating the CAN peripheral. This will cause an infinite loop in RxInterupt
  Config_HAL_Bus_t Config_HAL_Bus = {&hi2c1, huart2, &hcan1};
 80030ba:	4b16      	ldr	r3, [pc, #88]	; (8003114 <main+0x7c>)
 80030bc:	677b      	str	r3, [r7, #116]	; 0x74
 80030be:	4a16      	ldr	r2, [pc, #88]	; (8003118 <main+0x80>)
 80030c0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80030c4:	4611      	mov	r1, r2
 80030c6:	2244      	movs	r2, #68	; 0x44
 80030c8:	4618      	mov	r0, r3
 80030ca:	f005 fcf9 	bl	8008ac0 <memcpy>
 80030ce:	4b13      	ldr	r3, [pc, #76]	; (800311c <main+0x84>)
 80030d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  Config_Bus_t Config_Bus;
  Config_Bus = App_Config(Config_HAL_Bus);
 80030d4:	1d3e      	adds	r6, r7, #4
 80030d6:	466d      	mov	r5, sp
 80030d8:	f107 0480 	add.w	r4, r7, #128	; 0x80
 80030dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80030ec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80030f0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80030f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030f6:	4630      	mov	r0, r6
 80030f8:	f7fd ff44 	bl	8000f84 <App_Config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  App_Main(Config_Bus);
 80030fc:	4668      	mov	r0, sp
 80030fe:	f107 0314 	add.w	r3, r7, #20
 8003102:	2260      	movs	r2, #96	; 0x60
 8003104:	4619      	mov	r1, r3
 8003106:	f005 fcdb 	bl	8008ac0 <memcpy>
 800310a:	1d3b      	adds	r3, r7, #4
 800310c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800310e:	f7fd ff73 	bl	8000ff8 <App_Main>
 8003112:	e7f3      	b.n	80030fc <main+0x64>
 8003114:	200003c8 	.word	0x200003c8
 8003118:	20000464 	.word	0x20000464
 800311c:	20000364 	.word	0x20000364

08003120 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b094      	sub	sp, #80	; 0x50
 8003124:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003126:	f107 031c 	add.w	r3, r7, #28
 800312a:	2234      	movs	r2, #52	; 0x34
 800312c:	2100      	movs	r1, #0
 800312e:	4618      	mov	r0, r3
 8003130:	f005 fc47 	bl	80089c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003134:	f107 0308 	add.w	r3, r7, #8
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	60da      	str	r2, [r3, #12]
 8003142:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003144:	2300      	movs	r3, #0
 8003146:	607b      	str	r3, [r7, #4]
 8003148:	4b28      	ldr	r3, [pc, #160]	; (80031ec <SystemClock_Config+0xcc>)
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	4a27      	ldr	r2, [pc, #156]	; (80031ec <SystemClock_Config+0xcc>)
 800314e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003152:	6413      	str	r3, [r2, #64]	; 0x40
 8003154:	4b25      	ldr	r3, [pc, #148]	; (80031ec <SystemClock_Config+0xcc>)
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315c:	607b      	str	r3, [r7, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003160:	2300      	movs	r3, #0
 8003162:	603b      	str	r3, [r7, #0]
 8003164:	4b22      	ldr	r3, [pc, #136]	; (80031f0 <SystemClock_Config+0xd0>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a21      	ldr	r2, [pc, #132]	; (80031f0 <SystemClock_Config+0xd0>)
 800316a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	4b1f      	ldr	r3, [pc, #124]	; (80031f0 <SystemClock_Config+0xd0>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003178:	603b      	str	r3, [r7, #0]
 800317a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800317c:	2301      	movs	r3, #1
 800317e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003180:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003184:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003186:	2302      	movs	r3, #2
 8003188:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800318a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800318e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003190:	2308      	movs	r3, #8
 8003192:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003194:	2364      	movs	r3, #100	; 0x64
 8003196:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003198:	2302      	movs	r3, #2
 800319a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800319c:	2302      	movs	r3, #2
 800319e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80031a0:	2302      	movs	r3, #2
 80031a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031a4:	f107 031c 	add.w	r3, r7, #28
 80031a8:	4618      	mov	r0, r3
 80031aa:	f003 f957 	bl	800645c <HAL_RCC_OscConfig>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80031b4:	f000 f9be 	bl	8003534 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031b8:	230f      	movs	r3, #15
 80031ba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031bc:	2302      	movs	r3, #2
 80031be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031c0:	2300      	movs	r3, #0
 80031c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80031c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031ca:	2300      	movs	r3, #0
 80031cc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80031ce:	f107 0308 	add.w	r3, r7, #8
 80031d2:	2103      	movs	r1, #3
 80031d4:	4618      	mov	r0, r3
 80031d6:	f002 ff23 	bl	8006020 <HAL_RCC_ClockConfig>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80031e0:	f000 f9a8 	bl	8003534 <Error_Handler>
  }
}
 80031e4:	bf00      	nop
 80031e6:	3750      	adds	r7, #80	; 0x50
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40023800 	.word	0x40023800
 80031f0:	40007000 	.word	0x40007000

080031f4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80031f8:	4b17      	ldr	r3, [pc, #92]	; (8003258 <MX_CAN1_Init+0x64>)
 80031fa:	4a18      	ldr	r2, [pc, #96]	; (800325c <MX_CAN1_Init+0x68>)
 80031fc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 80031fe:	4b16      	ldr	r3, [pc, #88]	; (8003258 <MX_CAN1_Init+0x64>)
 8003200:	220a      	movs	r2, #10
 8003202:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003204:	4b14      	ldr	r3, [pc, #80]	; (8003258 <MX_CAN1_Init+0x64>)
 8003206:	2200      	movs	r2, #0
 8003208:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800320a:	4b13      	ldr	r3, [pc, #76]	; (8003258 <MX_CAN1_Init+0x64>)
 800320c:	2200      	movs	r2, #0
 800320e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8003210:	4b11      	ldr	r3, [pc, #68]	; (8003258 <MX_CAN1_Init+0x64>)
 8003212:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003216:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003218:	4b0f      	ldr	r3, [pc, #60]	; (8003258 <MX_CAN1_Init+0x64>)
 800321a:	2200      	movs	r2, #0
 800321c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800321e:	4b0e      	ldr	r3, [pc, #56]	; (8003258 <MX_CAN1_Init+0x64>)
 8003220:	2200      	movs	r2, #0
 8003222:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8003224:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <MX_CAN1_Init+0x64>)
 8003226:	2201      	movs	r2, #1
 8003228:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800322a:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <MX_CAN1_Init+0x64>)
 800322c:	2200      	movs	r2, #0
 800322e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8003230:	4b09      	ldr	r3, [pc, #36]	; (8003258 <MX_CAN1_Init+0x64>)
 8003232:	2201      	movs	r2, #1
 8003234:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003236:	4b08      	ldr	r3, [pc, #32]	; (8003258 <MX_CAN1_Init+0x64>)
 8003238:	2200      	movs	r2, #0
 800323a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800323c:	4b06      	ldr	r3, [pc, #24]	; (8003258 <MX_CAN1_Init+0x64>)
 800323e:	2200      	movs	r2, #0
 8003240:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003242:	4805      	ldr	r0, [pc, #20]	; (8003258 <MX_CAN1_Init+0x64>)
 8003244:	f000 fcac 	bl	8003ba0 <HAL_CAN_Init>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800324e:	f000 f971 	bl	8003534 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003252:	bf00      	nop
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20000364 	.word	0x20000364
 800325c:	40006400 	.word	0x40006400

08003260 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003264:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <MX_I2C1_Init+0x50>)
 8003266:	4a13      	ldr	r2, [pc, #76]	; (80032b4 <MX_I2C1_Init+0x54>)
 8003268:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800326a:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <MX_I2C1_Init+0x50>)
 800326c:	4a12      	ldr	r2, [pc, #72]	; (80032b8 <MX_I2C1_Init+0x58>)
 800326e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003270:	4b0f      	ldr	r3, [pc, #60]	; (80032b0 <MX_I2C1_Init+0x50>)
 8003272:	2200      	movs	r2, #0
 8003274:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003276:	4b0e      	ldr	r3, [pc, #56]	; (80032b0 <MX_I2C1_Init+0x50>)
 8003278:	2200      	movs	r2, #0
 800327a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800327c:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <MX_I2C1_Init+0x50>)
 800327e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003282:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003284:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <MX_I2C1_Init+0x50>)
 8003286:	2200      	movs	r2, #0
 8003288:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800328a:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <MX_I2C1_Init+0x50>)
 800328c:	2200      	movs	r2, #0
 800328e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003290:	4b07      	ldr	r3, [pc, #28]	; (80032b0 <MX_I2C1_Init+0x50>)
 8003292:	2200      	movs	r2, #0
 8003294:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003296:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <MX_I2C1_Init+0x50>)
 8003298:	2200      	movs	r2, #0
 800329a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800329c:	4804      	ldr	r0, [pc, #16]	; (80032b0 <MX_I2C1_Init+0x50>)
 800329e:	f001 fdd1 	bl	8004e44 <HAL_I2C_Init>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80032a8:	f000 f944 	bl	8003534 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80032ac:	bf00      	nop
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	200003c8 	.word	0x200003c8
 80032b4:	40005400 	.word	0x40005400
 80032b8:	00061a80 	.word	0x00061a80

080032bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b096      	sub	sp, #88	; 0x58
 80032c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	605a      	str	r2, [r3, #4]
 80032cc:	609a      	str	r2, [r3, #8]
 80032ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	605a      	str	r2, [r3, #4]
 80032e4:	609a      	str	r2, [r3, #8]
 80032e6:	60da      	str	r2, [r3, #12]
 80032e8:	611a      	str	r2, [r3, #16]
 80032ea:	615a      	str	r2, [r3, #20]
 80032ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80032ee:	1d3b      	adds	r3, r7, #4
 80032f0:	2220      	movs	r2, #32
 80032f2:	2100      	movs	r1, #0
 80032f4:	4618      	mov	r0, r3
 80032f6:	f005 fb64 	bl	80089c2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80032fa:	4b3e      	ldr	r3, [pc, #248]	; (80033f4 <MX_TIM1_Init+0x138>)
 80032fc:	4a3e      	ldr	r2, [pc, #248]	; (80033f8 <MX_TIM1_Init+0x13c>)
 80032fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003300:	4b3c      	ldr	r3, [pc, #240]	; (80033f4 <MX_TIM1_Init+0x138>)
 8003302:	2200      	movs	r2, #0
 8003304:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003306:	4b3b      	ldr	r3, [pc, #236]	; (80033f4 <MX_TIM1_Init+0x138>)
 8003308:	2200      	movs	r2, #0
 800330a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800330c:	4b39      	ldr	r3, [pc, #228]	; (80033f4 <MX_TIM1_Init+0x138>)
 800330e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003312:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003314:	4b37      	ldr	r3, [pc, #220]	; (80033f4 <MX_TIM1_Init+0x138>)
 8003316:	2200      	movs	r2, #0
 8003318:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800331a:	4b36      	ldr	r3, [pc, #216]	; (80033f4 <MX_TIM1_Init+0x138>)
 800331c:	2200      	movs	r2, #0
 800331e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003320:	4b34      	ldr	r3, [pc, #208]	; (80033f4 <MX_TIM1_Init+0x138>)
 8003322:	2200      	movs	r2, #0
 8003324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003326:	4833      	ldr	r0, [pc, #204]	; (80033f4 <MX_TIM1_Init+0x138>)
 8003328:	f003 fb1c 	bl	8006964 <HAL_TIM_Base_Init>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003332:	f000 f8ff 	bl	8003534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800333a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800333c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003340:	4619      	mov	r1, r3
 8003342:	482c      	ldr	r0, [pc, #176]	; (80033f4 <MX_TIM1_Init+0x138>)
 8003344:	f003 fc78 	bl	8006c38 <HAL_TIM_ConfigClockSource>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800334e:	f000 f8f1 	bl	8003534 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003352:	4828      	ldr	r0, [pc, #160]	; (80033f4 <MX_TIM1_Init+0x138>)
 8003354:	f003 fb55 	bl	8006a02 <HAL_TIM_PWM_Init>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800335e:	f000 f8e9 	bl	8003534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003362:	2300      	movs	r3, #0
 8003364:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003366:	2300      	movs	r3, #0
 8003368:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800336a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800336e:	4619      	mov	r1, r3
 8003370:	4820      	ldr	r0, [pc, #128]	; (80033f4 <MX_TIM1_Init+0x138>)
 8003372:	f004 f813 	bl	800739c <HAL_TIMEx_MasterConfigSynchronization>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800337c:	f000 f8da 	bl	8003534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003380:	2360      	movs	r3, #96	; 0x60
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003384:	2300      	movs	r3, #0
 8003386:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003388:	2300      	movs	r3, #0
 800338a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800338c:	2300      	movs	r3, #0
 800338e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003390:	2300      	movs	r3, #0
 8003392:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003394:	2300      	movs	r3, #0
 8003396:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003398:	2300      	movs	r3, #0
 800339a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800339c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033a0:	2200      	movs	r2, #0
 80033a2:	4619      	mov	r1, r3
 80033a4:	4813      	ldr	r0, [pc, #76]	; (80033f4 <MX_TIM1_Init+0x138>)
 80033a6:	f003 fb85 	bl	8006ab4 <HAL_TIM_PWM_ConfigChannel>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80033b0:	f000 f8c0 	bl	8003534 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80033b4:	2300      	movs	r3, #0
 80033b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80033b8:	2300      	movs	r3, #0
 80033ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80033bc:	2300      	movs	r3, #0
 80033be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80033c4:	2300      	movs	r3, #0
 80033c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80033c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80033ce:	2300      	movs	r3, #0
 80033d0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80033d2:	1d3b      	adds	r3, r7, #4
 80033d4:	4619      	mov	r1, r3
 80033d6:	4807      	ldr	r0, [pc, #28]	; (80033f4 <MX_TIM1_Init+0x138>)
 80033d8:	f004 f85c 	bl	8007494 <HAL_TIMEx_ConfigBreakDeadTime>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80033e2:	f000 f8a7 	bl	8003534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80033e6:	4803      	ldr	r0, [pc, #12]	; (80033f4 <MX_TIM1_Init+0x138>)
 80033e8:	f000 f98c 	bl	8003704 <HAL_TIM_MspPostInit>

}
 80033ec:	bf00      	nop
 80033ee:	3758      	adds	r7, #88	; 0x58
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	2000041c 	.word	0x2000041c
 80033f8:	40010000 	.word	0x40010000

080033fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003400:	4b11      	ldr	r3, [pc, #68]	; (8003448 <MX_USART2_UART_Init+0x4c>)
 8003402:	4a12      	ldr	r2, [pc, #72]	; (800344c <MX_USART2_UART_Init+0x50>)
 8003404:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8003406:	4b10      	ldr	r3, [pc, #64]	; (8003448 <MX_USART2_UART_Init+0x4c>)
 8003408:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800340c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800340e:	4b0e      	ldr	r3, [pc, #56]	; (8003448 <MX_USART2_UART_Init+0x4c>)
 8003410:	2200      	movs	r2, #0
 8003412:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003414:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <MX_USART2_UART_Init+0x4c>)
 8003416:	2200      	movs	r2, #0
 8003418:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800341a:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <MX_USART2_UART_Init+0x4c>)
 800341c:	2200      	movs	r2, #0
 800341e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003420:	4b09      	ldr	r3, [pc, #36]	; (8003448 <MX_USART2_UART_Init+0x4c>)
 8003422:	220c      	movs	r2, #12
 8003424:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003426:	4b08      	ldr	r3, [pc, #32]	; (8003448 <MX_USART2_UART_Init+0x4c>)
 8003428:	2200      	movs	r2, #0
 800342a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800342c:	4b06      	ldr	r3, [pc, #24]	; (8003448 <MX_USART2_UART_Init+0x4c>)
 800342e:	2200      	movs	r2, #0
 8003430:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003432:	4805      	ldr	r0, [pc, #20]	; (8003448 <MX_USART2_UART_Init+0x4c>)
 8003434:	f004 f880 	bl	8007538 <HAL_UART_Init>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800343e:	f000 f879 	bl	8003534 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20000464 	.word	0x20000464
 800344c:	40004400 	.word	0x40004400

08003450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003456:	f107 030c 	add.w	r3, r7, #12
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	605a      	str	r2, [r3, #4]
 8003460:	609a      	str	r2, [r3, #8]
 8003462:	60da      	str	r2, [r3, #12]
 8003464:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	4b2f      	ldr	r3, [pc, #188]	; (8003528 <MX_GPIO_Init+0xd8>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	4a2e      	ldr	r2, [pc, #184]	; (8003528 <MX_GPIO_Init+0xd8>)
 8003470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003474:	6313      	str	r3, [r2, #48]	; 0x30
 8003476:	4b2c      	ldr	r3, [pc, #176]	; (8003528 <MX_GPIO_Init+0xd8>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347e:	60bb      	str	r3, [r7, #8]
 8003480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003482:	2300      	movs	r3, #0
 8003484:	607b      	str	r3, [r7, #4]
 8003486:	4b28      	ldr	r3, [pc, #160]	; (8003528 <MX_GPIO_Init+0xd8>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	4a27      	ldr	r2, [pc, #156]	; (8003528 <MX_GPIO_Init+0xd8>)
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	6313      	str	r3, [r2, #48]	; 0x30
 8003492:	4b25      	ldr	r3, [pc, #148]	; (8003528 <MX_GPIO_Init+0xd8>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	607b      	str	r3, [r7, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800349e:	2300      	movs	r3, #0
 80034a0:	603b      	str	r3, [r7, #0]
 80034a2:	4b21      	ldr	r3, [pc, #132]	; (8003528 <MX_GPIO_Init+0xd8>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	4a20      	ldr	r2, [pc, #128]	; (8003528 <MX_GPIO_Init+0xd8>)
 80034a8:	f043 0302 	orr.w	r3, r3, #2
 80034ac:	6313      	str	r3, [r2, #48]	; 0x30
 80034ae:	4b1e      	ldr	r3, [pc, #120]	; (8003528 <MX_GPIO_Init+0xd8>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	603b      	str	r3, [r7, #0]
 80034b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GLED_GPIO_Port, GLED_Pin, GPIO_PIN_SET);
 80034ba:	2201      	movs	r2, #1
 80034bc:	2180      	movs	r1, #128	; 0x80
 80034be:	481b      	ldr	r0, [pc, #108]	; (800352c <MX_GPIO_Init+0xdc>)
 80034c0:	f001 fca6 	bl	8004e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RLED_GPIO_Port, RLED_Pin, GPIO_PIN_SET);
 80034c4:	2201      	movs	r2, #1
 80034c6:	2101      	movs	r1, #1
 80034c8:	4819      	ldr	r0, [pc, #100]	; (8003530 <MX_GPIO_Init+0xe0>)
 80034ca:	f001 fca1 	bl	8004e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EnableBtn_Pin */
  GPIO_InitStruct.Pin = EnableBtn_Pin;
 80034ce:	2310      	movs	r3, #16
 80034d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034d2:	2300      	movs	r3, #0
 80034d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d6:	2300      	movs	r3, #0
 80034d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EnableBtn_GPIO_Port, &GPIO_InitStruct);
 80034da:	f107 030c 	add.w	r3, r7, #12
 80034de:	4619      	mov	r1, r3
 80034e0:	4812      	ldr	r0, [pc, #72]	; (800352c <MX_GPIO_Init+0xdc>)
 80034e2:	f001 fb09 	bl	8004af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GLED_Pin */
  GPIO_InitStruct.Pin = GLED_Pin;
 80034e6:	2380      	movs	r3, #128	; 0x80
 80034e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ea:	2301      	movs	r3, #1
 80034ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80034ee:	2302      	movs	r3, #2
 80034f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034f2:	2302      	movs	r3, #2
 80034f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GLED_GPIO_Port, &GPIO_InitStruct);
 80034f6:	f107 030c 	add.w	r3, r7, #12
 80034fa:	4619      	mov	r1, r3
 80034fc:	480b      	ldr	r0, [pc, #44]	; (800352c <MX_GPIO_Init+0xdc>)
 80034fe:	f001 fafb 	bl	8004af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RLED_Pin */
  GPIO_InitStruct.Pin = RLED_Pin;
 8003502:	2301      	movs	r3, #1
 8003504:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003506:	2301      	movs	r3, #1
 8003508:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800350a:	2302      	movs	r3, #2
 800350c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800350e:	2302      	movs	r3, #2
 8003510:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RLED_GPIO_Port, &GPIO_InitStruct);
 8003512:	f107 030c 	add.w	r3, r7, #12
 8003516:	4619      	mov	r1, r3
 8003518:	4805      	ldr	r0, [pc, #20]	; (8003530 <MX_GPIO_Init+0xe0>)
 800351a:	f001 faed 	bl	8004af8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800351e:	bf00      	nop
 8003520:	3720      	adds	r7, #32
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40023800 	.word	0x40023800
 800352c:	40020000 	.word	0x40020000
 8003530:	40020400 	.word	0x40020400

08003534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003538:	b672      	cpsid	i
}
 800353a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800353c:	e7fe      	b.n	800353c <Error_Handler+0x8>
	...

08003540 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003546:	2300      	movs	r3, #0
 8003548:	607b      	str	r3, [r7, #4]
 800354a:	4b10      	ldr	r3, [pc, #64]	; (800358c <HAL_MspInit+0x4c>)
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354e:	4a0f      	ldr	r2, [pc, #60]	; (800358c <HAL_MspInit+0x4c>)
 8003550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003554:	6453      	str	r3, [r2, #68]	; 0x44
 8003556:	4b0d      	ldr	r3, [pc, #52]	; (800358c <HAL_MspInit+0x4c>)
 8003558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800355e:	607b      	str	r3, [r7, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	603b      	str	r3, [r7, #0]
 8003566:	4b09      	ldr	r3, [pc, #36]	; (800358c <HAL_MspInit+0x4c>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	4a08      	ldr	r2, [pc, #32]	; (800358c <HAL_MspInit+0x4c>)
 800356c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003570:	6413      	str	r3, [r2, #64]	; 0x40
 8003572:	4b06      	ldr	r3, [pc, #24]	; (800358c <HAL_MspInit+0x4c>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357a:	603b      	str	r3, [r7, #0]
 800357c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	40023800 	.word	0x40023800

08003590 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	; 0x28
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003598:	f107 0314 	add.w	r3, r7, #20
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	605a      	str	r2, [r3, #4]
 80035a2:	609a      	str	r2, [r3, #8]
 80035a4:	60da      	str	r2, [r3, #12]
 80035a6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a1d      	ldr	r2, [pc, #116]	; (8003624 <HAL_CAN_MspInit+0x94>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d134      	bne.n	800361c <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	4b1c      	ldr	r3, [pc, #112]	; (8003628 <HAL_CAN_MspInit+0x98>)
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	4a1b      	ldr	r2, [pc, #108]	; (8003628 <HAL_CAN_MspInit+0x98>)
 80035bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035c0:	6413      	str	r3, [r2, #64]	; 0x40
 80035c2:	4b19      	ldr	r3, [pc, #100]	; (8003628 <HAL_CAN_MspInit+0x98>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	4b15      	ldr	r3, [pc, #84]	; (8003628 <HAL_CAN_MspInit+0x98>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	4a14      	ldr	r2, [pc, #80]	; (8003628 <HAL_CAN_MspInit+0x98>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	6313      	str	r3, [r2, #48]	; 0x30
 80035de:	4b12      	ldr	r3, [pc, #72]	; (8003628 <HAL_CAN_MspInit+0x98>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80035ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80035ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f0:	2302      	movs	r3, #2
 80035f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f4:	2300      	movs	r3, #0
 80035f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f8:	2303      	movs	r3, #3
 80035fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80035fc:	2309      	movs	r3, #9
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003600:	f107 0314 	add.w	r3, r7, #20
 8003604:	4619      	mov	r1, r3
 8003606:	4809      	ldr	r0, [pc, #36]	; (800362c <HAL_CAN_MspInit+0x9c>)
 8003608:	f001 fa76 	bl	8004af8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800360c:	2200      	movs	r2, #0
 800360e:	2100      	movs	r1, #0
 8003610:	2014      	movs	r0, #20
 8003612:	f001 fa3a 	bl	8004a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003616:	2014      	movs	r0, #20
 8003618:	f001 fa53 	bl	8004ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800361c:	bf00      	nop
 800361e:	3728      	adds	r7, #40	; 0x28
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40006400 	.word	0x40006400
 8003628:	40023800 	.word	0x40023800
 800362c:	40020000 	.word	0x40020000

08003630 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b08a      	sub	sp, #40	; 0x28
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003638:	f107 0314 	add.w	r3, r7, #20
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	605a      	str	r2, [r3, #4]
 8003642:	609a      	str	r2, [r3, #8]
 8003644:	60da      	str	r2, [r3, #12]
 8003646:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a19      	ldr	r2, [pc, #100]	; (80036b4 <HAL_I2C_MspInit+0x84>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d12b      	bne.n	80036aa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003652:	2300      	movs	r3, #0
 8003654:	613b      	str	r3, [r7, #16]
 8003656:	4b18      	ldr	r3, [pc, #96]	; (80036b8 <HAL_I2C_MspInit+0x88>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	4a17      	ldr	r2, [pc, #92]	; (80036b8 <HAL_I2C_MspInit+0x88>)
 800365c:	f043 0302 	orr.w	r3, r3, #2
 8003660:	6313      	str	r3, [r2, #48]	; 0x30
 8003662:	4b15      	ldr	r3, [pc, #84]	; (80036b8 <HAL_I2C_MspInit+0x88>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	613b      	str	r3, [r7, #16]
 800366c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800366e:	23c0      	movs	r3, #192	; 0xc0
 8003670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003672:	2312      	movs	r3, #18
 8003674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003676:	2300      	movs	r3, #0
 8003678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800367a:	2303      	movs	r3, #3
 800367c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800367e:	2304      	movs	r3, #4
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003682:	f107 0314 	add.w	r3, r7, #20
 8003686:	4619      	mov	r1, r3
 8003688:	480c      	ldr	r0, [pc, #48]	; (80036bc <HAL_I2C_MspInit+0x8c>)
 800368a:	f001 fa35 	bl	8004af8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800368e:	2300      	movs	r3, #0
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <HAL_I2C_MspInit+0x88>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	4a08      	ldr	r2, [pc, #32]	; (80036b8 <HAL_I2C_MspInit+0x88>)
 8003698:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800369c:	6413      	str	r3, [r2, #64]	; 0x40
 800369e:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <HAL_I2C_MspInit+0x88>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80036aa:	bf00      	nop
 80036ac:	3728      	adds	r7, #40	; 0x28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40005400 	.word	0x40005400
 80036b8:	40023800 	.word	0x40023800
 80036bc:	40020400 	.word	0x40020400

080036c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a0b      	ldr	r2, [pc, #44]	; (80036fc <HAL_TIM_Base_MspInit+0x3c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d10d      	bne.n	80036ee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <HAL_TIM_Base_MspInit+0x40>)
 80036d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036da:	4a09      	ldr	r2, [pc, #36]	; (8003700 <HAL_TIM_Base_MspInit+0x40>)
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	6453      	str	r3, [r2, #68]	; 0x44
 80036e2:	4b07      	ldr	r3, [pc, #28]	; (8003700 <HAL_TIM_Base_MspInit+0x40>)
 80036e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80036ee:	bf00      	nop
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	40010000 	.word	0x40010000
 8003700:	40023800 	.word	0x40023800

08003704 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800370c:	f107 030c 	add.w	r3, r7, #12
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	605a      	str	r2, [r3, #4]
 8003716:	609a      	str	r2, [r3, #8]
 8003718:	60da      	str	r2, [r3, #12]
 800371a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a12      	ldr	r2, [pc, #72]	; (800376c <HAL_TIM_MspPostInit+0x68>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d11e      	bne.n	8003764 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	60bb      	str	r3, [r7, #8]
 800372a:	4b11      	ldr	r3, [pc, #68]	; (8003770 <HAL_TIM_MspPostInit+0x6c>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	4a10      	ldr	r2, [pc, #64]	; (8003770 <HAL_TIM_MspPostInit+0x6c>)
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	6313      	str	r3, [r2, #48]	; 0x30
 8003736:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <HAL_TIM_MspPostInit+0x6c>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	60bb      	str	r3, [r7, #8]
 8003740:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_LED_Pin;
 8003742:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003746:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003748:	2302      	movs	r3, #2
 800374a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374c:	2300      	movs	r3, #0
 800374e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003750:	2300      	movs	r3, #0
 8003752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003754:	2301      	movs	r3, #1
 8003756:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_LED_GPIO_Port, &GPIO_InitStruct);
 8003758:	f107 030c 	add.w	r3, r7, #12
 800375c:	4619      	mov	r1, r3
 800375e:	4805      	ldr	r0, [pc, #20]	; (8003774 <HAL_TIM_MspPostInit+0x70>)
 8003760:	f001 f9ca 	bl	8004af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003764:	bf00      	nop
 8003766:	3720      	adds	r7, #32
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40010000 	.word	0x40010000
 8003770:	40023800 	.word	0x40023800
 8003774:	40020000 	.word	0x40020000

08003778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08a      	sub	sp, #40	; 0x28
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003780:	f107 0314 	add.w	r3, r7, #20
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	609a      	str	r2, [r3, #8]
 800378c:	60da      	str	r2, [r3, #12]
 800378e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a19      	ldr	r2, [pc, #100]	; (80037fc <HAL_UART_MspInit+0x84>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d12b      	bne.n	80037f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800379a:	2300      	movs	r3, #0
 800379c:	613b      	str	r3, [r7, #16]
 800379e:	4b18      	ldr	r3, [pc, #96]	; (8003800 <HAL_UART_MspInit+0x88>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	4a17      	ldr	r2, [pc, #92]	; (8003800 <HAL_UART_MspInit+0x88>)
 80037a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a8:	6413      	str	r3, [r2, #64]	; 0x40
 80037aa:	4b15      	ldr	r3, [pc, #84]	; (8003800 <HAL_UART_MspInit+0x88>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	613b      	str	r3, [r7, #16]
 80037b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	4b11      	ldr	r3, [pc, #68]	; (8003800 <HAL_UART_MspInit+0x88>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	4a10      	ldr	r2, [pc, #64]	; (8003800 <HAL_UART_MspInit+0x88>)
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	6313      	str	r3, [r2, #48]	; 0x30
 80037c6:	4b0e      	ldr	r3, [pc, #56]	; (8003800 <HAL_UART_MspInit+0x88>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80037d2:	230c      	movs	r3, #12
 80037d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d6:	2302      	movs	r3, #2
 80037d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037da:	2300      	movs	r3, #0
 80037dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037de:	2303      	movs	r3, #3
 80037e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037e2:	2307      	movs	r3, #7
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e6:	f107 0314 	add.w	r3, r7, #20
 80037ea:	4619      	mov	r1, r3
 80037ec:	4805      	ldr	r0, [pc, #20]	; (8003804 <HAL_UART_MspInit+0x8c>)
 80037ee:	f001 f983 	bl	8004af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80037f2:	bf00      	nop
 80037f4:	3728      	adds	r7, #40	; 0x28
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40004400 	.word	0x40004400
 8003800:	40023800 	.word	0x40023800
 8003804:	40020000 	.word	0x40020000

08003808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800380c:	e7fe      	b.n	800380c <NMI_Handler+0x4>

0800380e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800380e:	b480      	push	{r7}
 8003810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003812:	e7fe      	b.n	8003812 <HardFault_Handler+0x4>

08003814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003818:	e7fe      	b.n	8003818 <MemManage_Handler+0x4>

0800381a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800381a:	b480      	push	{r7}
 800381c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800381e:	e7fe      	b.n	800381e <BusFault_Handler+0x4>

08003820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003824:	e7fe      	b.n	8003824 <UsageFault_Handler+0x4>

08003826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003826:	b480      	push	{r7}
 8003828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800382a:	bf00      	nop
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003838:	bf00      	nop
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003842:	b480      	push	{r7}
 8003844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003846:	bf00      	nop
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003854:	f000 f960 	bl	8003b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003858:	bf00      	nop
 800385a:	bd80      	pop	{r7, pc}

0800385c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003860:	4802      	ldr	r0, [pc, #8]	; (800386c <CAN1_RX0_IRQHandler+0x10>)
 8003862:	f000 fdef 	bl	8004444 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003866:	bf00      	nop
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	20000364 	.word	0x20000364

08003870 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return 1;
 8003874:	2301      	movs	r3, #1
}
 8003876:	4618      	mov	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <_kill>:

int _kill(int pid, int sig)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800388a:	f005 f8ed 	bl	8008a68 <__errno>
 800388e:	4603      	mov	r3, r0
 8003890:	2216      	movs	r2, #22
 8003892:	601a      	str	r2, [r3, #0]
  return -1;
 8003894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003898:	4618      	mov	r0, r3
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <_exit>:

void _exit (int status)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80038a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff ffe7 	bl	8003880 <_kill>
  while (1) {}    /* Make sure we hang here */
 80038b2:	e7fe      	b.n	80038b2 <_exit+0x12>

080038b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	e00a      	b.n	80038dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80038c6:	f3af 8000 	nop.w
 80038ca:	4601      	mov	r1, r0
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	60ba      	str	r2, [r7, #8]
 80038d2:	b2ca      	uxtb	r2, r1
 80038d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	3301      	adds	r3, #1
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	dbf0      	blt.n	80038c6 <_read+0x12>
  }

  return len;
 80038e4:	687b      	ldr	r3, [r7, #4]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3718      	adds	r7, #24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b086      	sub	sp, #24
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]
 80038fe:	e009      	b.n	8003914 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	60ba      	str	r2, [r7, #8]
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	3301      	adds	r3, #1
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	429a      	cmp	r2, r3
 800391a:	dbf1      	blt.n	8003900 <_write+0x12>
  }
  return len;
 800391c:	687b      	ldr	r3, [r7, #4]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3718      	adds	r7, #24
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <_close>:

int _close(int file)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800392e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003932:	4618      	mov	r0, r3
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800394e:	605a      	str	r2, [r3, #4]
  return 0;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <_isatty>:

int _isatty(int file)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003966:	2301      	movs	r3, #1
}
 8003968:	4618      	mov	r0, r3
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
	...

08003990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003998:	4a14      	ldr	r2, [pc, #80]	; (80039ec <_sbrk+0x5c>)
 800399a:	4b15      	ldr	r3, [pc, #84]	; (80039f0 <_sbrk+0x60>)
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039a4:	4b13      	ldr	r3, [pc, #76]	; (80039f4 <_sbrk+0x64>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d102      	bne.n	80039b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039ac:	4b11      	ldr	r3, [pc, #68]	; (80039f4 <_sbrk+0x64>)
 80039ae:	4a12      	ldr	r2, [pc, #72]	; (80039f8 <_sbrk+0x68>)
 80039b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039b2:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <_sbrk+0x64>)
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4413      	add	r3, r2
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d207      	bcs.n	80039d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039c0:	f005 f852 	bl	8008a68 <__errno>
 80039c4:	4603      	mov	r3, r0
 80039c6:	220c      	movs	r2, #12
 80039c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039ce:	e009      	b.n	80039e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039d0:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <_sbrk+0x64>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039d6:	4b07      	ldr	r3, [pc, #28]	; (80039f4 <_sbrk+0x64>)
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4413      	add	r3, r2
 80039de:	4a05      	ldr	r2, [pc, #20]	; (80039f4 <_sbrk+0x64>)
 80039e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039e2:	68fb      	ldr	r3, [r7, #12]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20040000 	.word	0x20040000
 80039f0:	00000400 	.word	0x00000400
 80039f4:	200004a8 	.word	0x200004a8
 80039f8:	20000600 	.word	0x20000600

080039fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a00:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <SystemInit+0x20>)
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a06:	4a05      	ldr	r2, [pc, #20]	; (8003a1c <SystemInit+0x20>)
 8003a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a10:	bf00      	nop
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	e000ed00 	.word	0xe000ed00

08003a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8003a20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a24:	480d      	ldr	r0, [pc, #52]	; (8003a5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a26:	490e      	ldr	r1, [pc, #56]	; (8003a60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a28:	4a0e      	ldr	r2, [pc, #56]	; (8003a64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a2c:	e002      	b.n	8003a34 <LoopCopyDataInit>

08003a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a32:	3304      	adds	r3, #4

08003a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a38:	d3f9      	bcc.n	8003a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a3a:	4a0b      	ldr	r2, [pc, #44]	; (8003a68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a3c:	4c0b      	ldr	r4, [pc, #44]	; (8003a6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a40:	e001      	b.n	8003a46 <LoopFillZerobss>

08003a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a44:	3204      	adds	r2, #4

08003a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a48:	d3fb      	bcc.n	8003a42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a4a:	f7ff ffd7 	bl	80039fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a4e:	f005 f811 	bl	8008a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a52:	f7ff fb21 	bl	8003098 <main>
  bx  lr    
 8003a56:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003a58:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8003a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a60:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8003a64:	0800b2cc 	.word	0x0800b2cc
  ldr r2, =_sbss
 8003a68:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8003a6c:	200005fc 	.word	0x200005fc

08003a70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a70:	e7fe      	b.n	8003a70 <ADC_IRQHandler>
	...

08003a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a78:	4b0e      	ldr	r3, [pc, #56]	; (8003ab4 <HAL_Init+0x40>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a0d      	ldr	r2, [pc, #52]	; (8003ab4 <HAL_Init+0x40>)
 8003a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a84:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <HAL_Init+0x40>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a0a      	ldr	r2, [pc, #40]	; (8003ab4 <HAL_Init+0x40>)
 8003a8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a90:	4b08      	ldr	r3, [pc, #32]	; (8003ab4 <HAL_Init+0x40>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a07      	ldr	r2, [pc, #28]	; (8003ab4 <HAL_Init+0x40>)
 8003a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a9c:	2003      	movs	r0, #3
 8003a9e:	f000 ffe9 	bl	8004a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003aa2:	200f      	movs	r0, #15
 8003aa4:	f000 f808 	bl	8003ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003aa8:	f7ff fd4a 	bl	8003540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40023c00 	.word	0x40023c00

08003ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ac0:	4b12      	ldr	r3, [pc, #72]	; (8003b0c <HAL_InitTick+0x54>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	4b12      	ldr	r3, [pc, #72]	; (8003b10 <HAL_InitTick+0x58>)
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	4619      	mov	r1, r3
 8003aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f001 f801 	bl	8004ade <HAL_SYSTICK_Config>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e00e      	b.n	8003b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b0f      	cmp	r3, #15
 8003aea:	d80a      	bhi.n	8003b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003aec:	2200      	movs	r2, #0
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003af4:	f000 ffc9 	bl	8004a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003af8:	4a06      	ldr	r2, [pc, #24]	; (8003b14 <HAL_InitTick+0x5c>)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	e000      	b.n	8003b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	20000028 	.word	0x20000028
 8003b10:	20000030 	.word	0x20000030
 8003b14:	2000002c 	.word	0x2000002c

08003b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b1c:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <HAL_IncTick+0x20>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	461a      	mov	r2, r3
 8003b22:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <HAL_IncTick+0x24>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4413      	add	r3, r2
 8003b28:	4a04      	ldr	r2, [pc, #16]	; (8003b3c <HAL_IncTick+0x24>)
 8003b2a:	6013      	str	r3, [r2, #0]
}
 8003b2c:	bf00      	nop
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	20000030 	.word	0x20000030
 8003b3c:	200004ac 	.word	0x200004ac

08003b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  return uwTick;
 8003b44:	4b03      	ldr	r3, [pc, #12]	; (8003b54 <HAL_GetTick+0x14>)
 8003b46:	681b      	ldr	r3, [r3, #0]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	200004ac 	.word	0x200004ac

08003b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b60:	f7ff ffee 	bl	8003b40 <HAL_GetTick>
 8003b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b70:	d005      	beq.n	8003b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b72:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <HAL_Delay+0x44>)
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b7e:	bf00      	nop
 8003b80:	f7ff ffde 	bl	8003b40 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d8f7      	bhi.n	8003b80 <HAL_Delay+0x28>
  {
  }
}
 8003b90:	bf00      	nop
 8003b92:	bf00      	nop
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20000030 	.word	0x20000030

08003ba0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e11c      	b.n	8003dec <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d131      	bne.n	8003c22 <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a8c      	ldr	r2, [pc, #560]	; (8003df4 <HAL_CAN_Init+0x254>)
 8003bc2:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a8c      	ldr	r2, [pc, #560]	; (8003df8 <HAL_CAN_Init+0x258>)
 8003bc8:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a8b      	ldr	r2, [pc, #556]	; (8003dfc <HAL_CAN_Init+0x25c>)
 8003bce:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a8b      	ldr	r2, [pc, #556]	; (8003e00 <HAL_CAN_Init+0x260>)
 8003bd4:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a8a      	ldr	r2, [pc, #552]	; (8003e04 <HAL_CAN_Init+0x264>)
 8003bda:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a8a      	ldr	r2, [pc, #552]	; (8003e08 <HAL_CAN_Init+0x268>)
 8003be0:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a89      	ldr	r2, [pc, #548]	; (8003e0c <HAL_CAN_Init+0x26c>)
 8003be6:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a89      	ldr	r2, [pc, #548]	; (8003e10 <HAL_CAN_Init+0x270>)
 8003bec:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a88      	ldr	r2, [pc, #544]	; (8003e14 <HAL_CAN_Init+0x274>)
 8003bf2:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a88      	ldr	r2, [pc, #544]	; (8003e18 <HAL_CAN_Init+0x278>)
 8003bf8:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a87      	ldr	r2, [pc, #540]	; (8003e1c <HAL_CAN_Init+0x27c>)
 8003bfe:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a87      	ldr	r2, [pc, #540]	; (8003e20 <HAL_CAN_Init+0x280>)
 8003c04:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a86      	ldr	r2, [pc, #536]	; (8003e24 <HAL_CAN_Init+0x284>)
 8003c0a:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d102      	bne.n	8003c1a <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a84      	ldr	r2, [pc, #528]	; (8003e28 <HAL_CAN_Init+0x288>)
 8003c18:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f042 0201 	orr.w	r2, r2, #1
 8003c30:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c32:	f7ff ff85 	bl	8003b40 <HAL_GetTick>
 8003c36:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c38:	e012      	b.n	8003c60 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c3a:	f7ff ff81 	bl	8003b40 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b0a      	cmp	r3, #10
 8003c46:	d90b      	bls.n	8003c60 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2205      	movs	r2, #5
 8003c58:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e0c5      	b.n	8003dec <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0e5      	beq.n	8003c3a <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0202 	bic.w	r2, r2, #2
 8003c7c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c7e:	f7ff ff5f 	bl	8003b40 <HAL_GetTick>
 8003c82:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c84:	e012      	b.n	8003cac <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c86:	f7ff ff5b 	bl	8003b40 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b0a      	cmp	r3, #10
 8003c92:	d90b      	bls.n	8003cac <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2205      	movs	r2, #5
 8003ca4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e09f      	b.n	8003dec <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1e5      	bne.n	8003c86 <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	7e1b      	ldrb	r3, [r3, #24]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d108      	bne.n	8003cd4 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	e007      	b.n	8003ce4 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ce2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	7e5b      	ldrb	r3, [r3, #25]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d108      	bne.n	8003cfe <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	e007      	b.n	8003d0e <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	7e9b      	ldrb	r3, [r3, #26]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d108      	bne.n	8003d28 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f042 0220 	orr.w	r2, r2, #32
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	e007      	b.n	8003d38 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0220 	bic.w	r2, r2, #32
 8003d36:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	7edb      	ldrb	r3, [r3, #27]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d108      	bne.n	8003d52 <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0210 	bic.w	r2, r2, #16
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	e007      	b.n	8003d62 <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f042 0210 	orr.w	r2, r2, #16
 8003d60:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	7f1b      	ldrb	r3, [r3, #28]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d108      	bne.n	8003d7c <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f042 0208 	orr.w	r2, r2, #8
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	e007      	b.n	8003d8c <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0208 	bic.w	r2, r2, #8
 8003d8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	7f5b      	ldrb	r3, [r3, #29]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d108      	bne.n	8003da6 <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 0204 	orr.w	r2, r2, #4
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	e007      	b.n	8003db6 <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0204 	bic.w	r2, r2, #4
 8003db4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	ea42 0103 	orr.w	r1, r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	1e5a      	subs	r2, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	08004847 	.word	0x08004847
 8003df8:	0800485b 	.word	0x0800485b
 8003dfc:	0800486f 	.word	0x0800486f
 8003e00:	08004883 	.word	0x08004883
 8003e04:	080047cf 	.word	0x080047cf
 8003e08:	080047e3 	.word	0x080047e3
 8003e0c:	080047f7 	.word	0x080047f7
 8003e10:	0800480b 	.word	0x0800480b
 8003e14:	0800481f 	.word	0x0800481f
 8003e18:	08004833 	.word	0x08004833
 8003e1c:	08004897 	.word	0x08004897
 8003e20:	080048ab 	.word	0x080048ab
 8003e24:	080048bf 	.word	0x080048bf
 8003e28:	08003591 	.word	0x08003591

08003e2c <HAL_CAN_RegisterCallback>:
  *           @arg @ref HAL_CAN_MSPDEINIT_CB_ID MspDeInit callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_RegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef CallbackID, void (* pCallback)(CAN_HandleTypeDef *_hcan))
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	460b      	mov	r3, r1
 8003e36:	607a      	str	r2, [r7, #4]
 8003e38:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d107      	bne.n	8003e54 <HAL_CAN_RegisterCallback+0x28>
  {
    /* Update the error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e094      	b.n	8003f7e <HAL_CAN_RegisterCallback+0x152>
  }

  if (hcan->State == HAL_CAN_STATE_READY)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d168      	bne.n	8003f32 <HAL_CAN_RegisterCallback+0x106>
  {
    switch (CallbackID)
 8003e60:	7afb      	ldrb	r3, [r7, #11]
 8003e62:	2b0e      	cmp	r3, #14
 8003e64:	d85c      	bhi.n	8003f20 <HAL_CAN_RegisterCallback+0xf4>
 8003e66:	a201      	add	r2, pc, #4	; (adr r2, 8003e6c <HAL_CAN_RegisterCallback+0x40>)
 8003e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6c:	08003ea9 	.word	0x08003ea9
 8003e70:	08003eb1 	.word	0x08003eb1
 8003e74:	08003eb9 	.word	0x08003eb9
 8003e78:	08003ec1 	.word	0x08003ec1
 8003e7c:	08003ec9 	.word	0x08003ec9
 8003e80:	08003ed1 	.word	0x08003ed1
 8003e84:	08003ed9 	.word	0x08003ed9
 8003e88:	08003ee1 	.word	0x08003ee1
 8003e8c:	08003ee9 	.word	0x08003ee9
 8003e90:	08003ef1 	.word	0x08003ef1
 8003e94:	08003ef9 	.word	0x08003ef9
 8003e98:	08003f01 	.word	0x08003f01
 8003e9c:	08003f09 	.word	0x08003f09
 8003ea0:	08003f11 	.word	0x08003f11
 8003ea4:	08003f19 	.word	0x08003f19
    {
      case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
        hcan->TxMailbox0CompleteCallback = pCallback;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8003eae:	e065      	b.n	8003f7c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
        hcan->TxMailbox1CompleteCallback = pCallback;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8003eb6:	e061      	b.n	8003f7c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
        hcan->TxMailbox2CompleteCallback = pCallback;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 8003ebe:	e05d      	b.n	8003f7c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
        hcan->TxMailbox0AbortCallback = pCallback;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 8003ec6:	e059      	b.n	8003f7c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
        hcan->TxMailbox1AbortCallback = pCallback;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 8003ece:	e055      	b.n	8003f7c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
        hcan->TxMailbox2AbortCallback = pCallback;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	63da      	str	r2, [r3, #60]	; 0x3c
        break;
 8003ed6:	e051      	b.n	8003f7c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
        hcan->RxFifo0MsgPendingCallback = pCallback;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	641a      	str	r2, [r3, #64]	; 0x40
        break;
 8003ede:	e04d      	b.n	8003f7c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO0_FULL_CB_ID :
        hcan->RxFifo0FullCallback = pCallback;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8003ee6:	e049      	b.n	8003f7c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
        hcan->RxFifo1MsgPendingCallback = pCallback;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8003eee:	e045      	b.n	8003f7c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO1_FULL_CB_ID :
        hcan->RxFifo1FullCallback = pCallback;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8003ef6:	e041      	b.n	8003f7c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_SLEEP_CB_ID :
        hcan->SleepCallback = pCallback;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8003efe:	e03d      	b.n	8003f7c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
        hcan->WakeUpFromRxMsgCallback = pCallback;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8003f06:	e039      	b.n	8003f7c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_ERROR_CB_ID :
        hcan->ErrorCallback = pCallback;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8003f0e:	e035      	b.n	8003f7c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPINIT_CB_ID :
        hcan->MspInitCallback = pCallback;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8003f16:	e031      	b.n	8003f7c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPDEINIT_CB_ID :
        hcan->MspDeInitCallback = pCallback;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8003f1e:	e02d      	b.n	8003f7c <HAL_CAN_RegisterCallback+0x150>

      default :
        /* Update the error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Return error status */
        status =  HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	75fb      	strb	r3, [r7, #23]
        break;
 8003f30:	e024      	b.n	8003f7c <HAL_CAN_RegisterCallback+0x150>
    }
  }
  else if (hcan->State == HAL_CAN_STATE_RESET)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d116      	bne.n	8003f6c <HAL_CAN_RegisterCallback+0x140>
  {
    switch (CallbackID)
 8003f3e:	7afb      	ldrb	r3, [r7, #11]
 8003f40:	2b0d      	cmp	r3, #13
 8003f42:	d002      	beq.n	8003f4a <HAL_CAN_RegisterCallback+0x11e>
 8003f44:	2b0e      	cmp	r3, #14
 8003f46:	d004      	beq.n	8003f52 <HAL_CAN_RegisterCallback+0x126>
 8003f48:	e007      	b.n	8003f5a <HAL_CAN_RegisterCallback+0x12e>
    {
      case HAL_CAN_MSPINIT_CB_ID :
        hcan->MspInitCallback = pCallback;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8003f50:	e014      	b.n	8003f7c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPDEINIT_CB_ID :
        hcan->MspDeInitCallback = pCallback;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8003f58:	e010      	b.n	8003f7c <HAL_CAN_RegisterCallback+0x150>

      default :
        /* Update the error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Return error status */
        status =  HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	75fb      	strb	r3, [r7, #23]
        break;
 8003f6a:	e007      	b.n	8003f7c <HAL_CAN_RegisterCallback+0x150>
    }
  }
  else
  {
    /* Update the error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return error status */
    status =  HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	371c      	adds	r7, #28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop

08003f8c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fa2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003fa4:	7cfb      	ldrb	r3, [r7, #19]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d003      	beq.n	8003fb2 <HAL_CAN_ConfigFilter+0x26>
 8003faa:	7cfb      	ldrb	r3, [r7, #19]
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	f040 80be 	bne.w	800412e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003fb2:	4b65      	ldr	r3, [pc, #404]	; (8004148 <HAL_CAN_ConfigFilter+0x1bc>)
 8003fb4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003fbc:	f043 0201 	orr.w	r2, r3, #1
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003fcc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	021b      	lsls	r3, r3, #8
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	f003 031f 	and.w	r3, r3, #31
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	43db      	mvns	r3, r3
 8004004:	401a      	ands	r2, r3
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d123      	bne.n	800405c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	43db      	mvns	r3, r3
 800401e:	401a      	ands	r2, r3
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004036:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	3248      	adds	r2, #72	; 0x48
 800403c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004050:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004052:	6979      	ldr	r1, [r7, #20]
 8004054:	3348      	adds	r3, #72	; 0x48
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	440b      	add	r3, r1
 800405a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	69db      	ldr	r3, [r3, #28]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d122      	bne.n	80040aa <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	431a      	orrs	r2, r3
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004084:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	3248      	adds	r2, #72	; 0x48
 800408a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800409e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040a0:	6979      	ldr	r1, [r7, #20]
 80040a2:	3348      	adds	r3, #72	; 0x48
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	440b      	add	r3, r1
 80040a8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d109      	bne.n	80040c6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	43db      	mvns	r3, r3
 80040bc:	401a      	ands	r2, r3
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80040c4:	e007      	b.n	80040d6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d109      	bne.n	80040f2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	43db      	mvns	r3, r3
 80040e8:	401a      	ands	r2, r3
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80040f0:	e007      	b.n	8004102 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	431a      	orrs	r2, r3
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d107      	bne.n	800411a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	431a      	orrs	r2, r3
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004120:	f023 0201 	bic.w	r2, r3, #1
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	e006      	b.n	800413c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
  }
}
 800413c:	4618      	mov	r0, r3
 800413e:	371c      	adds	r7, #28
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	40006400 	.word	0x40006400

0800414c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3020 	ldrb.w	r3, [r3, #32]
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b01      	cmp	r3, #1
 800415e:	d12e      	bne.n	80041be <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0201 	bic.w	r2, r2, #1
 8004176:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004178:	f7ff fce2 	bl	8003b40 <HAL_GetTick>
 800417c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800417e:	e012      	b.n	80041a6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004180:	f7ff fcde 	bl	8003b40 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b0a      	cmp	r3, #10
 800418c:	d90b      	bls.n	80041a6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2205      	movs	r2, #5
 800419e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e012      	b.n	80041cc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1e5      	bne.n	8004180 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	e006      	b.n	80041cc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
  }
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041e8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80041ea:	7dfb      	ldrb	r3, [r7, #23]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d003      	beq.n	80041f8 <HAL_CAN_GetRxMessage+0x24>
 80041f0:	7dfb      	ldrb	r3, [r7, #23]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	f040 80f3 	bne.w	80043de <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10e      	bne.n	800421c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f003 0303 	and.w	r3, r3, #3
 8004208:	2b00      	cmp	r3, #0
 800420a:	d116      	bne.n	800423a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e0e7      	b.n	80043ec <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d107      	bne.n	800423a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e0d8      	b.n	80043ec <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	331b      	adds	r3, #27
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	4413      	add	r3, r2
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0204 	and.w	r2, r3, #4
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10c      	bne.n	8004272 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	331b      	adds	r3, #27
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	4413      	add	r3, r2
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	0d5b      	lsrs	r3, r3, #21
 8004268:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	e00b      	b.n	800428a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	331b      	adds	r3, #27
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	4413      	add	r3, r2
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	08db      	lsrs	r3, r3, #3
 8004282:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	331b      	adds	r3, #27
 8004292:	011b      	lsls	r3, r3, #4
 8004294:	4413      	add	r3, r2
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0202 	and.w	r2, r3, #2
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	331b      	adds	r3, #27
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	4413      	add	r3, r2
 80042ac:	3304      	adds	r3, #4
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 020f 	and.w	r2, r3, #15
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	331b      	adds	r3, #27
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	4413      	add	r3, r2
 80042c4:	3304      	adds	r3, #4
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	0a1b      	lsrs	r3, r3, #8
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	331b      	adds	r3, #27
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	4413      	add	r3, r2
 80042dc:	3304      	adds	r3, #4
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	0c1b      	lsrs	r3, r3, #16
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	4413      	add	r3, r2
 8004308:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	0a1a      	lsrs	r2, r3, #8
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	3301      	adds	r3, #1
 8004314:	b2d2      	uxtb	r2, r2
 8004316:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	4413      	add	r3, r2
 8004322:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	0c1a      	lsrs	r2, r3, #16
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	3302      	adds	r3, #2
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	4413      	add	r3, r2
 800433c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	0e1a      	lsrs	r2, r3, #24
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	3303      	adds	r3, #3
 8004348:	b2d2      	uxtb	r2, r2
 800434a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	011b      	lsls	r3, r3, #4
 8004354:	4413      	add	r3, r2
 8004356:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	3304      	adds	r3, #4
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	4413      	add	r3, r2
 800436e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	0a1a      	lsrs	r2, r3, #8
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	3305      	adds	r3, #5
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	4413      	add	r3, r2
 8004388:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	0c1a      	lsrs	r2, r3, #16
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	3306      	adds	r3, #6
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	0e1a      	lsrs	r2, r3, #24
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	3307      	adds	r3, #7
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d108      	bne.n	80043ca <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f042 0220 	orr.w	r2, r2, #32
 80043c6:	60da      	str	r2, [r3, #12]
 80043c8:	e007      	b.n	80043da <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	691a      	ldr	r2, [r3, #16]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f042 0220 	orr.w	r2, r2, #32
 80043d8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	e006      	b.n	80043ec <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
  }
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	371c      	adds	r7, #28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004408:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800440a:	7bfb      	ldrb	r3, [r7, #15]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d002      	beq.n	8004416 <HAL_CAN_ActivateNotification+0x1e>
 8004410:	7bfb      	ldrb	r3, [r7, #15]
 8004412:	2b02      	cmp	r3, #2
 8004414:	d109      	bne.n	800442a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6959      	ldr	r1, [r3, #20]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	e006      	b.n	8004438 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
  }
}
 8004438:	4618      	mov	r0, r3
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b08a      	sub	sp, #40	; 0x28
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800444c:	2300      	movs	r3, #0
 800444e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 8083 	beq.w	8004592 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b00      	cmp	r3, #0
 8004494:	d025      	beq.n	80044e2 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2201      	movs	r2, #1
 800449c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d004      	beq.n	80044b2 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	4798      	blx	r3
 80044b0:	e017      	b.n	80044e2 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d004      	beq.n	80044c6 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
 80044c4:	e00d      	b.n	80044e2 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	f003 0308 	and.w	r3, r3, #8
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d004      	beq.n	80044da <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044d6:	627b      	str	r3, [r7, #36]	; 0x24
 80044d8:	e003      	b.n	80044e2 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d026      	beq.n	800453a <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d004      	beq.n	800450a <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	4798      	blx	r3
 8004508:	e017      	b.n	800453a <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004510:	2b00      	cmp	r3, #0
 8004512:	d004      	beq.n	800451e <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800451a:	627b      	str	r3, [r7, #36]	; 0x24
 800451c:	e00d      	b.n	800453a <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004524:	2b00      	cmp	r3, #0
 8004526:	d004      	beq.n	8004532 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800452e:	627b      	str	r3, [r7, #36]	; 0x24
 8004530:	e003      	b.n	800453a <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d026      	beq.n	8004592 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800454c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d004      	beq.n	8004562 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	4798      	blx	r3
 8004560:	e017      	b.n	8004592 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d004      	beq.n	8004576 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004572:	627b      	str	r3, [r7, #36]	; 0x24
 8004574:	e00d      	b.n	8004592 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d004      	beq.n	800458a <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004586:	627b      	str	r3, [r7, #36]	; 0x24
 8004588:	e003      	b.n	8004592 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00c      	beq.n	80045b6 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f003 0310 	and.w	r3, r3, #16
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d007      	beq.n	80045b6 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2210      	movs	r2, #16
 80045b4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80045b6:	6a3b      	ldr	r3, [r7, #32]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00c      	beq.n	80045da <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d007      	beq.n	80045da <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2208      	movs	r2, #8
 80045d0:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00a      	beq.n	80045fa <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f003 0303 	and.w	r3, r3, #3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00c      	beq.n	800461e <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f003 0310 	and.w	r3, r3, #16
 800460a:	2b00      	cmp	r3, #0
 800460c:	d007      	beq.n	800461e <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004614:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2210      	movs	r2, #16
 800461c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	f003 0320 	and.w	r3, r3, #32
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00c      	beq.n	8004642 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d007      	beq.n	8004642 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2208      	movs	r2, #8
 8004638:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	f003 0310 	and.w	r3, r3, #16
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004662:	6a3b      	ldr	r3, [r7, #32]
 8004664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00c      	beq.n	8004686 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	f003 0310 	and.w	r3, r3, #16
 8004672:	2b00      	cmp	r3, #0
 8004674:	d007      	beq.n	8004686 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2210      	movs	r2, #16
 800467c:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00c      	beq.n	80046aa <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d007      	beq.n	80046aa <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2208      	movs	r2, #8
 80046a0:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d07b      	beq.n	80047ac <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	f003 0304 	and.w	r3, r3, #4
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d072      	beq.n	80047a4 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d008      	beq.n	80046da <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	f043 0301 	orr.w	r3, r3, #1
 80046d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d008      	beq.n	80046f6 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	f043 0302 	orr.w	r3, r3, #2
 80046f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d008      	beq.n	8004712 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	f043 0304 	orr.w	r3, r3, #4
 8004710:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004718:	2b00      	cmp	r3, #0
 800471a:	d043      	beq.n	80047a4 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004722:	2b00      	cmp	r3, #0
 8004724:	d03e      	beq.n	80047a4 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800472c:	2b60      	cmp	r3, #96	; 0x60
 800472e:	d02b      	beq.n	8004788 <HAL_CAN_IRQHandler+0x344>
 8004730:	2b60      	cmp	r3, #96	; 0x60
 8004732:	d82e      	bhi.n	8004792 <HAL_CAN_IRQHandler+0x34e>
 8004734:	2b50      	cmp	r3, #80	; 0x50
 8004736:	d022      	beq.n	800477e <HAL_CAN_IRQHandler+0x33a>
 8004738:	2b50      	cmp	r3, #80	; 0x50
 800473a:	d82a      	bhi.n	8004792 <HAL_CAN_IRQHandler+0x34e>
 800473c:	2b40      	cmp	r3, #64	; 0x40
 800473e:	d019      	beq.n	8004774 <HAL_CAN_IRQHandler+0x330>
 8004740:	2b40      	cmp	r3, #64	; 0x40
 8004742:	d826      	bhi.n	8004792 <HAL_CAN_IRQHandler+0x34e>
 8004744:	2b30      	cmp	r3, #48	; 0x30
 8004746:	d010      	beq.n	800476a <HAL_CAN_IRQHandler+0x326>
 8004748:	2b30      	cmp	r3, #48	; 0x30
 800474a:	d822      	bhi.n	8004792 <HAL_CAN_IRQHandler+0x34e>
 800474c:	2b10      	cmp	r3, #16
 800474e:	d002      	beq.n	8004756 <HAL_CAN_IRQHandler+0x312>
 8004750:	2b20      	cmp	r3, #32
 8004752:	d005      	beq.n	8004760 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004754:	e01d      	b.n	8004792 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	f043 0308 	orr.w	r3, r3, #8
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800475e:	e019      	b.n	8004794 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	f043 0310 	orr.w	r3, r3, #16
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004768:	e014      	b.n	8004794 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	f043 0320 	orr.w	r3, r3, #32
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004772:	e00f      	b.n	8004794 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800477a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800477c:	e00a      	b.n	8004794 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004784:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004786:	e005      	b.n	8004794 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004790:	e000      	b.n	8004794 <HAL_CAN_IRQHandler+0x350>
            break;
 8004792:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699a      	ldr	r2, [r3, #24]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80047a2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2204      	movs	r2, #4
 80047aa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d009      	beq.n	80047c6 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	431a      	orrs	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80047c6:	bf00      	nop
 80047c8:	3728      	adds	r7, #40	; 0x28
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80047fe:	bf00      	nop
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
	...

080048d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048e4:	4b0c      	ldr	r3, [pc, #48]	; (8004918 <__NVIC_SetPriorityGrouping+0x44>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048f0:	4013      	ands	r3, r2
 80048f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004906:	4a04      	ldr	r2, [pc, #16]	; (8004918 <__NVIC_SetPriorityGrouping+0x44>)
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	60d3      	str	r3, [r2, #12]
}
 800490c:	bf00      	nop
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	e000ed00 	.word	0xe000ed00

0800491c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004920:	4b04      	ldr	r3, [pc, #16]	; (8004934 <__NVIC_GetPriorityGrouping+0x18>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	0a1b      	lsrs	r3, r3, #8
 8004926:	f003 0307 	and.w	r3, r3, #7
}
 800492a:	4618      	mov	r0, r3
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	e000ed00 	.word	0xe000ed00

08004938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	4603      	mov	r3, r0
 8004940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004946:	2b00      	cmp	r3, #0
 8004948:	db0b      	blt.n	8004962 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800494a:	79fb      	ldrb	r3, [r7, #7]
 800494c:	f003 021f 	and.w	r2, r3, #31
 8004950:	4907      	ldr	r1, [pc, #28]	; (8004970 <__NVIC_EnableIRQ+0x38>)
 8004952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004956:	095b      	lsrs	r3, r3, #5
 8004958:	2001      	movs	r0, #1
 800495a:	fa00 f202 	lsl.w	r2, r0, r2
 800495e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	e000e100 	.word	0xe000e100

08004974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	4603      	mov	r3, r0
 800497c:	6039      	str	r1, [r7, #0]
 800497e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004984:	2b00      	cmp	r3, #0
 8004986:	db0a      	blt.n	800499e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	b2da      	uxtb	r2, r3
 800498c:	490c      	ldr	r1, [pc, #48]	; (80049c0 <__NVIC_SetPriority+0x4c>)
 800498e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004992:	0112      	lsls	r2, r2, #4
 8004994:	b2d2      	uxtb	r2, r2
 8004996:	440b      	add	r3, r1
 8004998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800499c:	e00a      	b.n	80049b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	4908      	ldr	r1, [pc, #32]	; (80049c4 <__NVIC_SetPriority+0x50>)
 80049a4:	79fb      	ldrb	r3, [r7, #7]
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	3b04      	subs	r3, #4
 80049ac:	0112      	lsls	r2, r2, #4
 80049ae:	b2d2      	uxtb	r2, r2
 80049b0:	440b      	add	r3, r1
 80049b2:	761a      	strb	r2, [r3, #24]
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	e000e100 	.word	0xe000e100
 80049c4:	e000ed00 	.word	0xe000ed00

080049c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b089      	sub	sp, #36	; 0x24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	f1c3 0307 	rsb	r3, r3, #7
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	bf28      	it	cs
 80049e6:	2304      	movcs	r3, #4
 80049e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	3304      	adds	r3, #4
 80049ee:	2b06      	cmp	r3, #6
 80049f0:	d902      	bls.n	80049f8 <NVIC_EncodePriority+0x30>
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	3b03      	subs	r3, #3
 80049f6:	e000      	b.n	80049fa <NVIC_EncodePriority+0x32>
 80049f8:	2300      	movs	r3, #0
 80049fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	43da      	mvns	r2, r3
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	401a      	ands	r2, r3
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1a:	43d9      	mvns	r1, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a20:	4313      	orrs	r3, r2
         );
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3724      	adds	r7, #36	; 0x24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
	...

08004a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a40:	d301      	bcc.n	8004a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a42:	2301      	movs	r3, #1
 8004a44:	e00f      	b.n	8004a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a46:	4a0a      	ldr	r2, [pc, #40]	; (8004a70 <SysTick_Config+0x40>)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a4e:	210f      	movs	r1, #15
 8004a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a54:	f7ff ff8e 	bl	8004974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a58:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <SysTick_Config+0x40>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a5e:	4b04      	ldr	r3, [pc, #16]	; (8004a70 <SysTick_Config+0x40>)
 8004a60:	2207      	movs	r2, #7
 8004a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	e000e010 	.word	0xe000e010

08004a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7ff ff29 	bl	80048d4 <__NVIC_SetPriorityGrouping>
}
 8004a82:	bf00      	nop
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b086      	sub	sp, #24
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	4603      	mov	r3, r0
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	607a      	str	r2, [r7, #4]
 8004a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a9c:	f7ff ff3e 	bl	800491c <__NVIC_GetPriorityGrouping>
 8004aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	68b9      	ldr	r1, [r7, #8]
 8004aa6:	6978      	ldr	r0, [r7, #20]
 8004aa8:	f7ff ff8e 	bl	80049c8 <NVIC_EncodePriority>
 8004aac:	4602      	mov	r2, r0
 8004aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff ff5d 	bl	8004974 <__NVIC_SetPriority>
}
 8004aba:	bf00      	nop
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b082      	sub	sp, #8
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	4603      	mov	r3, r0
 8004aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff ff31 	bl	8004938 <__NVIC_EnableIRQ>
}
 8004ad6:	bf00      	nop
 8004ad8:	3708      	adds	r7, #8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b082      	sub	sp, #8
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7ff ffa2 	bl	8004a30 <SysTick_Config>
 8004aec:	4603      	mov	r3, r0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
	...

08004af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b089      	sub	sp, #36	; 0x24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b0e:	2300      	movs	r3, #0
 8004b10:	61fb      	str	r3, [r7, #28]
 8004b12:	e14d      	b.n	8004db0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b14:	2201      	movs	r2, #1
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	4013      	ands	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	f040 813c 	bne.w	8004daa <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d005      	beq.n	8004b4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d130      	bne.n	8004bac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	2203      	movs	r2, #3
 8004b56:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5a:	43db      	mvns	r3, r3
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68da      	ldr	r2, [r3, #12]
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b80:	2201      	movs	r2, #1
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	fa02 f303 	lsl.w	r3, r2, r3
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	091b      	lsrs	r3, r3, #4
 8004b96:	f003 0201 	and.w	r2, r3, #1
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f003 0303 	and.w	r3, r3, #3
 8004bb4:	2b03      	cmp	r3, #3
 8004bb6:	d017      	beq.n	8004be8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	2203      	movs	r2, #3
 8004bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc8:	43db      	mvns	r3, r3
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f003 0303 	and.w	r3, r3, #3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d123      	bne.n	8004c3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	08da      	lsrs	r2, r3, #3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3208      	adds	r2, #8
 8004bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	220f      	movs	r2, #15
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	43db      	mvns	r3, r3
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	4013      	ands	r3, r2
 8004c16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	691a      	ldr	r2, [r3, #16]
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	fa02 f303 	lsl.w	r3, r2, r3
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	08da      	lsrs	r2, r3, #3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	3208      	adds	r2, #8
 8004c36:	69b9      	ldr	r1, [r7, #24]
 8004c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	2203      	movs	r2, #3
 8004c48:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4c:	43db      	mvns	r3, r3
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	4013      	ands	r3, r2
 8004c52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f003 0203 	and.w	r2, r3, #3
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	fa02 f303 	lsl.w	r3, r2, r3
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 8096 	beq.w	8004daa <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60fb      	str	r3, [r7, #12]
 8004c82:	4b51      	ldr	r3, [pc, #324]	; (8004dc8 <HAL_GPIO_Init+0x2d0>)
 8004c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c86:	4a50      	ldr	r2, [pc, #320]	; (8004dc8 <HAL_GPIO_Init+0x2d0>)
 8004c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c8e:	4b4e      	ldr	r3, [pc, #312]	; (8004dc8 <HAL_GPIO_Init+0x2d0>)
 8004c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c9a:	4a4c      	ldr	r2, [pc, #304]	; (8004dcc <HAL_GPIO_Init+0x2d4>)
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	089b      	lsrs	r3, r3, #2
 8004ca0:	3302      	adds	r3, #2
 8004ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	220f      	movs	r2, #15
 8004cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb6:	43db      	mvns	r3, r3
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a43      	ldr	r2, [pc, #268]	; (8004dd0 <HAL_GPIO_Init+0x2d8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d00d      	beq.n	8004ce2 <HAL_GPIO_Init+0x1ea>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a42      	ldr	r2, [pc, #264]	; (8004dd4 <HAL_GPIO_Init+0x2dc>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d007      	beq.n	8004cde <HAL_GPIO_Init+0x1e6>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a41      	ldr	r2, [pc, #260]	; (8004dd8 <HAL_GPIO_Init+0x2e0>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d101      	bne.n	8004cda <HAL_GPIO_Init+0x1e2>
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	e004      	b.n	8004ce4 <HAL_GPIO_Init+0x1ec>
 8004cda:	2307      	movs	r3, #7
 8004cdc:	e002      	b.n	8004ce4 <HAL_GPIO_Init+0x1ec>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e000      	b.n	8004ce4 <HAL_GPIO_Init+0x1ec>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	69fa      	ldr	r2, [r7, #28]
 8004ce6:	f002 0203 	and.w	r2, r2, #3
 8004cea:	0092      	lsls	r2, r2, #2
 8004cec:	4093      	lsls	r3, r2
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cf4:	4935      	ldr	r1, [pc, #212]	; (8004dcc <HAL_GPIO_Init+0x2d4>)
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	089b      	lsrs	r3, r3, #2
 8004cfa:	3302      	adds	r3, #2
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d02:	4b36      	ldr	r3, [pc, #216]	; (8004ddc <HAL_GPIO_Init+0x2e4>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	43db      	mvns	r3, r3
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d26:	4a2d      	ldr	r2, [pc, #180]	; (8004ddc <HAL_GPIO_Init+0x2e4>)
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d2c:	4b2b      	ldr	r3, [pc, #172]	; (8004ddc <HAL_GPIO_Init+0x2e4>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	43db      	mvns	r3, r3
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d003      	beq.n	8004d50 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d50:	4a22      	ldr	r2, [pc, #136]	; (8004ddc <HAL_GPIO_Init+0x2e4>)
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d56:	4b21      	ldr	r3, [pc, #132]	; (8004ddc <HAL_GPIO_Init+0x2e4>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	43db      	mvns	r3, r3
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	4013      	ands	r3, r2
 8004d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d7a:	4a18      	ldr	r2, [pc, #96]	; (8004ddc <HAL_GPIO_Init+0x2e4>)
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d80:	4b16      	ldr	r3, [pc, #88]	; (8004ddc <HAL_GPIO_Init+0x2e4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	43db      	mvns	r3, r3
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004da4:	4a0d      	ldr	r2, [pc, #52]	; (8004ddc <HAL_GPIO_Init+0x2e4>)
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	3301      	adds	r3, #1
 8004dae:	61fb      	str	r3, [r7, #28]
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	2b0f      	cmp	r3, #15
 8004db4:	f67f aeae 	bls.w	8004b14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004db8:	bf00      	nop
 8004dba:	bf00      	nop
 8004dbc:	3724      	adds	r7, #36	; 0x24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	40013800 	.word	0x40013800
 8004dd0:	40020000 	.word	0x40020000
 8004dd4:	40020400 	.word	0x40020400
 8004dd8:	40020800 	.word	0x40020800
 8004ddc:	40013c00 	.word	0x40013c00

08004de0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	460b      	mov	r3, r1
 8004dea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	887b      	ldrh	r3, [r7, #2]
 8004df2:	4013      	ands	r3, r2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	73fb      	strb	r3, [r7, #15]
 8004dfc:	e001      	b.n	8004e02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3714      	adds	r7, #20
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	807b      	strh	r3, [r7, #2]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e20:	787b      	ldrb	r3, [r7, #1]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e26:	887a      	ldrh	r2, [r7, #2]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e2c:	e003      	b.n	8004e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e2e:	887b      	ldrh	r3, [r7, #2]
 8004e30:	041a      	lsls	r2, r3, #16
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	619a      	str	r2, [r3, #24]
}
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
	...

08004e44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e12b      	b.n	80050ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d106      	bne.n	8004e70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7fe fbe0 	bl	8003630 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2224      	movs	r2, #36	; 0x24
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 0201 	bic.w	r2, r2, #1
 8004e86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ea6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ea8:	f001 fab0 	bl	800640c <HAL_RCC_GetPCLK1Freq>
 8004eac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	4a81      	ldr	r2, [pc, #516]	; (80050b8 <HAL_I2C_Init+0x274>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d807      	bhi.n	8004ec8 <HAL_I2C_Init+0x84>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4a80      	ldr	r2, [pc, #512]	; (80050bc <HAL_I2C_Init+0x278>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	bf94      	ite	ls
 8004ec0:	2301      	movls	r3, #1
 8004ec2:	2300      	movhi	r3, #0
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	e006      	b.n	8004ed6 <HAL_I2C_Init+0x92>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4a7d      	ldr	r2, [pc, #500]	; (80050c0 <HAL_I2C_Init+0x27c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	bf94      	ite	ls
 8004ed0:	2301      	movls	r3, #1
 8004ed2:	2300      	movhi	r3, #0
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e0e7      	b.n	80050ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4a78      	ldr	r2, [pc, #480]	; (80050c4 <HAL_I2C_Init+0x280>)
 8004ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee6:	0c9b      	lsrs	r3, r3, #18
 8004ee8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	4a6a      	ldr	r2, [pc, #424]	; (80050b8 <HAL_I2C_Init+0x274>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d802      	bhi.n	8004f18 <HAL_I2C_Init+0xd4>
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	3301      	adds	r3, #1
 8004f16:	e009      	b.n	8004f2c <HAL_I2C_Init+0xe8>
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f1e:	fb02 f303 	mul.w	r3, r2, r3
 8004f22:	4a69      	ldr	r2, [pc, #420]	; (80050c8 <HAL_I2C_Init+0x284>)
 8004f24:	fba2 2303 	umull	r2, r3, r2, r3
 8004f28:	099b      	lsrs	r3, r3, #6
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6812      	ldr	r2, [r2, #0]
 8004f30:	430b      	orrs	r3, r1
 8004f32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	495c      	ldr	r1, [pc, #368]	; (80050b8 <HAL_I2C_Init+0x274>)
 8004f48:	428b      	cmp	r3, r1
 8004f4a:	d819      	bhi.n	8004f80 <HAL_I2C_Init+0x13c>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	1e59      	subs	r1, r3, #1
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f5a:	1c59      	adds	r1, r3, #1
 8004f5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f60:	400b      	ands	r3, r1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00a      	beq.n	8004f7c <HAL_I2C_Init+0x138>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	1e59      	subs	r1, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	005b      	lsls	r3, r3, #1
 8004f70:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f74:	3301      	adds	r3, #1
 8004f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f7a:	e051      	b.n	8005020 <HAL_I2C_Init+0x1dc>
 8004f7c:	2304      	movs	r3, #4
 8004f7e:	e04f      	b.n	8005020 <HAL_I2C_Init+0x1dc>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d111      	bne.n	8004fac <HAL_I2C_Init+0x168>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	1e58      	subs	r0, r3, #1
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6859      	ldr	r1, [r3, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	440b      	add	r3, r1
 8004f96:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	bf0c      	ite	eq
 8004fa4:	2301      	moveq	r3, #1
 8004fa6:	2300      	movne	r3, #0
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	e012      	b.n	8004fd2 <HAL_I2C_Init+0x18e>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	1e58      	subs	r0, r3, #1
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6859      	ldr	r1, [r3, #4]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	440b      	add	r3, r1
 8004fba:	0099      	lsls	r1, r3, #2
 8004fbc:	440b      	add	r3, r1
 8004fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	bf0c      	ite	eq
 8004fcc:	2301      	moveq	r3, #1
 8004fce:	2300      	movne	r3, #0
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <HAL_I2C_Init+0x196>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e022      	b.n	8005020 <HAL_I2C_Init+0x1dc>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10e      	bne.n	8005000 <HAL_I2C_Init+0x1bc>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	1e58      	subs	r0, r3, #1
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6859      	ldr	r1, [r3, #4]
 8004fea:	460b      	mov	r3, r1
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	440b      	add	r3, r1
 8004ff0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ffe:	e00f      	b.n	8005020 <HAL_I2C_Init+0x1dc>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	1e58      	subs	r0, r3, #1
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6859      	ldr	r1, [r3, #4]
 8005008:	460b      	mov	r3, r1
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	440b      	add	r3, r1
 800500e:	0099      	lsls	r1, r3, #2
 8005010:	440b      	add	r3, r1
 8005012:	fbb0 f3f3 	udiv	r3, r0, r3
 8005016:	3301      	adds	r3, #1
 8005018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800501c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005020:	6879      	ldr	r1, [r7, #4]
 8005022:	6809      	ldr	r1, [r1, #0]
 8005024:	4313      	orrs	r3, r2
 8005026:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	69da      	ldr	r2, [r3, #28]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	431a      	orrs	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800504e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6911      	ldr	r1, [r2, #16]
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	68d2      	ldr	r2, [r2, #12]
 800505a:	4311      	orrs	r1, r2
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	6812      	ldr	r2, [r2, #0]
 8005060:	430b      	orrs	r3, r1
 8005062:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	695a      	ldr	r2, [r3, #20]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	430a      	orrs	r2, r1
 800507e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 0201 	orr.w	r2, r2, #1
 800508e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2220      	movs	r2, #32
 800509a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	000186a0 	.word	0x000186a0
 80050bc:	001e847f 	.word	0x001e847f
 80050c0:	003d08ff 	.word	0x003d08ff
 80050c4:	431bde83 	.word	0x431bde83
 80050c8:	10624dd3 	.word	0x10624dd3

080050cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b088      	sub	sp, #32
 80050d0:	af02      	add	r7, sp, #8
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	4608      	mov	r0, r1
 80050d6:	4611      	mov	r1, r2
 80050d8:	461a      	mov	r2, r3
 80050da:	4603      	mov	r3, r0
 80050dc:	817b      	strh	r3, [r7, #10]
 80050de:	460b      	mov	r3, r1
 80050e0:	813b      	strh	r3, [r7, #8]
 80050e2:	4613      	mov	r3, r2
 80050e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050e6:	f7fe fd2b 	bl	8003b40 <HAL_GetTick>
 80050ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b20      	cmp	r3, #32
 80050f6:	f040 80d9 	bne.w	80052ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	2319      	movs	r3, #25
 8005100:	2201      	movs	r2, #1
 8005102:	496d      	ldr	r1, [pc, #436]	; (80052b8 <HAL_I2C_Mem_Write+0x1ec>)
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f000 fdad 	bl	8005c64 <I2C_WaitOnFlagUntilTimeout>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005110:	2302      	movs	r3, #2
 8005112:	e0cc      	b.n	80052ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800511a:	2b01      	cmp	r3, #1
 800511c:	d101      	bne.n	8005122 <HAL_I2C_Mem_Write+0x56>
 800511e:	2302      	movs	r3, #2
 8005120:	e0c5      	b.n	80052ae <HAL_I2C_Mem_Write+0x1e2>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	2b01      	cmp	r3, #1
 8005136:	d007      	beq.n	8005148 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 0201 	orr.w	r2, r2, #1
 8005146:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005156:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2221      	movs	r2, #33	; 0x21
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2240      	movs	r2, #64	; 0x40
 8005164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6a3a      	ldr	r2, [r7, #32]
 8005172:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005178:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800517e:	b29a      	uxth	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4a4d      	ldr	r2, [pc, #308]	; (80052bc <HAL_I2C_Mem_Write+0x1f0>)
 8005188:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800518a:	88f8      	ldrh	r0, [r7, #6]
 800518c:	893a      	ldrh	r2, [r7, #8]
 800518e:	8979      	ldrh	r1, [r7, #10]
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	9301      	str	r3, [sp, #4]
 8005194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	4603      	mov	r3, r0
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f000 fbe4 	bl	8005968 <I2C_RequestMemoryWrite>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d052      	beq.n	800524c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e081      	b.n	80052ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f000 fe2e 	bl	8005e10 <I2C_WaitOnTXEFlagUntilTimeout>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00d      	beq.n	80051d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d107      	bne.n	80051d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e06b      	b.n	80052ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	781a      	ldrb	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	1c5a      	adds	r2, r3, #1
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	f003 0304 	and.w	r3, r3, #4
 8005210:	2b04      	cmp	r3, #4
 8005212:	d11b      	bne.n	800524c <HAL_I2C_Mem_Write+0x180>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005218:	2b00      	cmp	r3, #0
 800521a:	d017      	beq.n	800524c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	781a      	ldrb	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005236:	3b01      	subs	r3, #1
 8005238:	b29a      	uxth	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005242:	b29b      	uxth	r3, r3
 8005244:	3b01      	subs	r3, #1
 8005246:	b29a      	uxth	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1aa      	bne.n	80051aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 fe1a 	bl	8005e92 <I2C_WaitOnBTFFlagUntilTimeout>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00d      	beq.n	8005280 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005268:	2b04      	cmp	r3, #4
 800526a:	d107      	bne.n	800527c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800527a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e016      	b.n	80052ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800528e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2220      	movs	r2, #32
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052a8:	2300      	movs	r3, #0
 80052aa:	e000      	b.n	80052ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80052ac:	2302      	movs	r3, #2
  }
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	00100002 	.word	0x00100002
 80052bc:	ffff0000 	.word	0xffff0000

080052c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b08c      	sub	sp, #48	; 0x30
 80052c4:	af02      	add	r7, sp, #8
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	4608      	mov	r0, r1
 80052ca:	4611      	mov	r1, r2
 80052cc:	461a      	mov	r2, r3
 80052ce:	4603      	mov	r3, r0
 80052d0:	817b      	strh	r3, [r7, #10]
 80052d2:	460b      	mov	r3, r1
 80052d4:	813b      	strh	r3, [r7, #8]
 80052d6:	4613      	mov	r3, r2
 80052d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052da:	f7fe fc31 	bl	8003b40 <HAL_GetTick>
 80052de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b20      	cmp	r3, #32
 80052ea:	f040 8208 	bne.w	80056fe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	2319      	movs	r3, #25
 80052f4:	2201      	movs	r2, #1
 80052f6:	497b      	ldr	r1, [pc, #492]	; (80054e4 <HAL_I2C_Mem_Read+0x224>)
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f000 fcb3 	bl	8005c64 <I2C_WaitOnFlagUntilTimeout>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005304:	2302      	movs	r3, #2
 8005306:	e1fb      	b.n	8005700 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800530e:	2b01      	cmp	r3, #1
 8005310:	d101      	bne.n	8005316 <HAL_I2C_Mem_Read+0x56>
 8005312:	2302      	movs	r3, #2
 8005314:	e1f4      	b.n	8005700 <HAL_I2C_Mem_Read+0x440>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b01      	cmp	r3, #1
 800532a:	d007      	beq.n	800533c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0201 	orr.w	r2, r2, #1
 800533a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800534a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2222      	movs	r2, #34	; 0x22
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2240      	movs	r2, #64	; 0x40
 8005358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005366:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800536c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005372:	b29a      	uxth	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4a5b      	ldr	r2, [pc, #364]	; (80054e8 <HAL_I2C_Mem_Read+0x228>)
 800537c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800537e:	88f8      	ldrh	r0, [r7, #6]
 8005380:	893a      	ldrh	r2, [r7, #8]
 8005382:	8979      	ldrh	r1, [r7, #10]
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	9301      	str	r3, [sp, #4]
 8005388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	4603      	mov	r3, r0
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 fb80 	bl	8005a94 <I2C_RequestMemoryRead>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e1b0      	b.n	8005700 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d113      	bne.n	80053ce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053a6:	2300      	movs	r3, #0
 80053a8:	623b      	str	r3, [r7, #32]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	623b      	str	r3, [r7, #32]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	623b      	str	r3, [r7, #32]
 80053ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	e184      	b.n	80056d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d11b      	bne.n	800540e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053e6:	2300      	movs	r3, #0
 80053e8:	61fb      	str	r3, [r7, #28]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	61fb      	str	r3, [r7, #28]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	61fb      	str	r3, [r7, #28]
 80053fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	e164      	b.n	80056d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005412:	2b02      	cmp	r3, #2
 8005414:	d11b      	bne.n	800544e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005424:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005434:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005436:	2300      	movs	r3, #0
 8005438:	61bb      	str	r3, [r7, #24]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	61bb      	str	r3, [r7, #24]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	61bb      	str	r3, [r7, #24]
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	e144      	b.n	80056d8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800544e:	2300      	movs	r3, #0
 8005450:	617b      	str	r3, [r7, #20]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	617b      	str	r3, [r7, #20]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	617b      	str	r3, [r7, #20]
 8005462:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005464:	e138      	b.n	80056d8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800546a:	2b03      	cmp	r3, #3
 800546c:	f200 80f1 	bhi.w	8005652 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005474:	2b01      	cmp	r3, #1
 8005476:	d123      	bne.n	80054c0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800547a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 fd49 	bl	8005f14 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e139      	b.n	8005700 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691a      	ldr	r2, [r3, #16]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054a8:	3b01      	subs	r3, #1
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	3b01      	subs	r3, #1
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054be:	e10b      	b.n	80056d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d14e      	bne.n	8005566 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ce:	2200      	movs	r2, #0
 80054d0:	4906      	ldr	r1, [pc, #24]	; (80054ec <HAL_I2C_Mem_Read+0x22c>)
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 fbc6 	bl	8005c64 <I2C_WaitOnFlagUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d008      	beq.n	80054f0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e10e      	b.n	8005700 <HAL_I2C_Mem_Read+0x440>
 80054e2:	bf00      	nop
 80054e4:	00100002 	.word	0x00100002
 80054e8:	ffff0000 	.word	0xffff0000
 80054ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	691a      	ldr	r2, [r3, #16]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	b2d2      	uxtb	r2, r2
 800550c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800551c:	3b01      	subs	r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005528:	b29b      	uxth	r3, r3
 800552a:	3b01      	subs	r3, #1
 800552c:	b29a      	uxth	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	691a      	ldr	r2, [r3, #16]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553c:	b2d2      	uxtb	r2, r2
 800553e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005544:	1c5a      	adds	r2, r3, #1
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800554e:	3b01      	subs	r3, #1
 8005550:	b29a      	uxth	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800555a:	b29b      	uxth	r3, r3
 800555c:	3b01      	subs	r3, #1
 800555e:	b29a      	uxth	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005564:	e0b8      	b.n	80056d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556c:	2200      	movs	r2, #0
 800556e:	4966      	ldr	r1, [pc, #408]	; (8005708 <HAL_I2C_Mem_Read+0x448>)
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 fb77 	bl	8005c64 <I2C_WaitOnFlagUntilTimeout>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e0bf      	b.n	8005700 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800558e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	691a      	ldr	r2, [r3, #16]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	1c5a      	adds	r2, r3, #1
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ac:	3b01      	subs	r3, #1
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	3b01      	subs	r3, #1
 80055bc:	b29a      	uxth	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c8:	2200      	movs	r2, #0
 80055ca:	494f      	ldr	r1, [pc, #316]	; (8005708 <HAL_I2C_Mem_Read+0x448>)
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 fb49 	bl	8005c64 <I2C_WaitOnFlagUntilTimeout>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e091      	b.n	8005700 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691a      	ldr	r2, [r3, #16]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005608:	3b01      	subs	r3, #1
 800560a:	b29a      	uxth	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005614:	b29b      	uxth	r3, r3
 8005616:	3b01      	subs	r3, #1
 8005618:	b29a      	uxth	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	691a      	ldr	r2, [r3, #16]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	b2d2      	uxtb	r2, r2
 800562a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	1c5a      	adds	r2, r3, #1
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800563a:	3b01      	subs	r3, #1
 800563c:	b29a      	uxth	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005646:	b29b      	uxth	r3, r3
 8005648:	3b01      	subs	r3, #1
 800564a:	b29a      	uxth	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005650:	e042      	b.n	80056d8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005654:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f000 fc5c 	bl	8005f14 <I2C_WaitOnRXNEFlagUntilTimeout>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e04c      	b.n	8005700 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	691a      	ldr	r2, [r3, #16]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	b2d2      	uxtb	r2, r2
 8005672:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	1c5a      	adds	r2, r3, #1
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005682:	3b01      	subs	r3, #1
 8005684:	b29a      	uxth	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800568e:	b29b      	uxth	r3, r3
 8005690:	3b01      	subs	r3, #1
 8005692:	b29a      	uxth	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	f003 0304 	and.w	r3, r3, #4
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d118      	bne.n	80056d8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	691a      	ldr	r2, [r3, #16]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b0:	b2d2      	uxtb	r2, r2
 80056b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c2:	3b01      	subs	r3, #1
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	3b01      	subs	r3, #1
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f47f aec2 	bne.w	8005466 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2220      	movs	r2, #32
 80056e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	e000      	b.n	8005700 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80056fe:	2302      	movs	r3, #2
  }
}
 8005700:	4618      	mov	r0, r3
 8005702:	3728      	adds	r7, #40	; 0x28
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	00010004 	.word	0x00010004

0800570c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b08a      	sub	sp, #40	; 0x28
 8005710:	af02      	add	r7, sp, #8
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	607a      	str	r2, [r7, #4]
 8005716:	603b      	str	r3, [r7, #0]
 8005718:	460b      	mov	r3, r1
 800571a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800571c:	f7fe fa10 	bl	8003b40 <HAL_GetTick>
 8005720:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b20      	cmp	r3, #32
 8005730:	f040 8111 	bne.w	8005956 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	2319      	movs	r3, #25
 800573a:	2201      	movs	r2, #1
 800573c:	4988      	ldr	r1, [pc, #544]	; (8005960 <HAL_I2C_IsDeviceReady+0x254>)
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f000 fa90 	bl	8005c64 <I2C_WaitOnFlagUntilTimeout>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800574a:	2302      	movs	r3, #2
 800574c:	e104      	b.n	8005958 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005754:	2b01      	cmp	r3, #1
 8005756:	d101      	bne.n	800575c <HAL_I2C_IsDeviceReady+0x50>
 8005758:	2302      	movs	r3, #2
 800575a:	e0fd      	b.n	8005958 <HAL_I2C_IsDeviceReady+0x24c>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b01      	cmp	r3, #1
 8005770:	d007      	beq.n	8005782 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f042 0201 	orr.w	r2, r2, #1
 8005780:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005790:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2224      	movs	r2, #36	; 0x24
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4a70      	ldr	r2, [pc, #448]	; (8005964 <HAL_I2C_IsDeviceReady+0x258>)
 80057a4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057b4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2200      	movs	r2, #0
 80057be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f000 fa4e 	bl	8005c64 <I2C_WaitOnFlagUntilTimeout>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00d      	beq.n	80057ea <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057dc:	d103      	bne.n	80057e6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057e4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e0b6      	b.n	8005958 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057ea:	897b      	ldrh	r3, [r7, #10]
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	461a      	mov	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057f8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80057fa:	f7fe f9a1 	bl	8003b40 <HAL_GetTick>
 80057fe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b02      	cmp	r3, #2
 800580c:	bf0c      	ite	eq
 800580e:	2301      	moveq	r3, #1
 8005810:	2300      	movne	r3, #0
 8005812:	b2db      	uxtb	r3, r3
 8005814:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005824:	bf0c      	ite	eq
 8005826:	2301      	moveq	r3, #1
 8005828:	2300      	movne	r3, #0
 800582a:	b2db      	uxtb	r3, r3
 800582c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800582e:	e025      	b.n	800587c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005830:	f7fe f986 	bl	8003b40 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	429a      	cmp	r2, r3
 800583e:	d302      	bcc.n	8005846 <HAL_I2C_IsDeviceReady+0x13a>
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d103      	bne.n	800584e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	22a0      	movs	r2, #160	; 0xa0
 800584a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b02      	cmp	r3, #2
 800585a:	bf0c      	ite	eq
 800585c:	2301      	moveq	r3, #1
 800585e:	2300      	movne	r3, #0
 8005860:	b2db      	uxtb	r3, r3
 8005862:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800586e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005872:	bf0c      	ite	eq
 8005874:	2301      	moveq	r3, #1
 8005876:	2300      	movne	r3, #0
 8005878:	b2db      	uxtb	r3, r3
 800587a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2ba0      	cmp	r3, #160	; 0xa0
 8005886:	d005      	beq.n	8005894 <HAL_I2C_IsDeviceReady+0x188>
 8005888:	7dfb      	ldrb	r3, [r7, #23]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d102      	bne.n	8005894 <HAL_I2C_IsDeviceReady+0x188>
 800588e:	7dbb      	ldrb	r3, [r7, #22]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d0cd      	beq.n	8005830 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2220      	movs	r2, #32
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d129      	bne.n	80058fe <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058b8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058ba:	2300      	movs	r3, #0
 80058bc:	613b      	str	r3, [r7, #16]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	613b      	str	r3, [r7, #16]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	613b      	str	r3, [r7, #16]
 80058ce:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	2319      	movs	r3, #25
 80058d6:	2201      	movs	r2, #1
 80058d8:	4921      	ldr	r1, [pc, #132]	; (8005960 <HAL_I2C_IsDeviceReady+0x254>)
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 f9c2 	bl	8005c64 <I2C_WaitOnFlagUntilTimeout>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e036      	b.n	8005958 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2220      	movs	r2, #32
 80058ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	e02c      	b.n	8005958 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800590c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005916:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	2319      	movs	r3, #25
 800591e:	2201      	movs	r2, #1
 8005920:	490f      	ldr	r1, [pc, #60]	; (8005960 <HAL_I2C_IsDeviceReady+0x254>)
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 f99e 	bl	8005c64 <I2C_WaitOnFlagUntilTimeout>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e012      	b.n	8005958 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	3301      	adds	r3, #1
 8005936:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	429a      	cmp	r2, r3
 800593e:	f4ff af32 	bcc.w	80057a6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2220      	movs	r2, #32
 8005946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e000      	b.n	8005958 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005956:	2302      	movs	r3, #2
  }
}
 8005958:	4618      	mov	r0, r3
 800595a:	3720      	adds	r7, #32
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	00100002 	.word	0x00100002
 8005964:	ffff0000 	.word	0xffff0000

08005968 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b088      	sub	sp, #32
 800596c:	af02      	add	r7, sp, #8
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	4608      	mov	r0, r1
 8005972:	4611      	mov	r1, r2
 8005974:	461a      	mov	r2, r3
 8005976:	4603      	mov	r3, r0
 8005978:	817b      	strh	r3, [r7, #10]
 800597a:	460b      	mov	r3, r1
 800597c:	813b      	strh	r3, [r7, #8]
 800597e:	4613      	mov	r3, r2
 8005980:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005990:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	2200      	movs	r2, #0
 800599a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f000 f960 	bl	8005c64 <I2C_WaitOnFlagUntilTimeout>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00d      	beq.n	80059c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059b8:	d103      	bne.n	80059c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e05f      	b.n	8005a86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059c6:	897b      	ldrh	r3, [r7, #10]
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	461a      	mov	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	6a3a      	ldr	r2, [r7, #32]
 80059da:	492d      	ldr	r1, [pc, #180]	; (8005a90 <I2C_RequestMemoryWrite+0x128>)
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f000 f998 	bl	8005d12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d001      	beq.n	80059ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e04c      	b.n	8005a86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ec:	2300      	movs	r3, #0
 80059ee:	617b      	str	r3, [r7, #20]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	617b      	str	r3, [r7, #20]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a04:	6a39      	ldr	r1, [r7, #32]
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f000 fa02 	bl	8005e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00d      	beq.n	8005a2e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	d107      	bne.n	8005a2a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e02b      	b.n	8005a86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a2e:	88fb      	ldrh	r3, [r7, #6]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d105      	bne.n	8005a40 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a34:	893b      	ldrh	r3, [r7, #8]
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	611a      	str	r2, [r3, #16]
 8005a3e:	e021      	b.n	8005a84 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a40:	893b      	ldrh	r3, [r7, #8]
 8005a42:	0a1b      	lsrs	r3, r3, #8
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a50:	6a39      	ldr	r1, [r7, #32]
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 f9dc 	bl	8005e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00d      	beq.n	8005a7a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a62:	2b04      	cmp	r3, #4
 8005a64:	d107      	bne.n	8005a76 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e005      	b.n	8005a86 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a7a:	893b      	ldrh	r3, [r7, #8]
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3718      	adds	r7, #24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	00010002 	.word	0x00010002

08005a94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b088      	sub	sp, #32
 8005a98:	af02      	add	r7, sp, #8
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	4608      	mov	r0, r1
 8005a9e:	4611      	mov	r1, r2
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	817b      	strh	r3, [r7, #10]
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	813b      	strh	r3, [r7, #8]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005abc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005acc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 f8c2 	bl	8005c64 <I2C_WaitOnFlagUntilTimeout>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00d      	beq.n	8005b02 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005af4:	d103      	bne.n	8005afe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005afc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e0aa      	b.n	8005c58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b02:	897b      	ldrh	r3, [r7, #10]
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	461a      	mov	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	6a3a      	ldr	r2, [r7, #32]
 8005b16:	4952      	ldr	r1, [pc, #328]	; (8005c60 <I2C_RequestMemoryRead+0x1cc>)
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f000 f8fa 	bl	8005d12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d001      	beq.n	8005b28 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e097      	b.n	8005c58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b28:	2300      	movs	r3, #0
 8005b2a:	617b      	str	r3, [r7, #20]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	617b      	str	r3, [r7, #20]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b40:	6a39      	ldr	r1, [r7, #32]
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f000 f964 	bl	8005e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00d      	beq.n	8005b6a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	d107      	bne.n	8005b66 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e076      	b.n	8005c58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b6a:	88fb      	ldrh	r3, [r7, #6]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d105      	bne.n	8005b7c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b70:	893b      	ldrh	r3, [r7, #8]
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	611a      	str	r2, [r3, #16]
 8005b7a:	e021      	b.n	8005bc0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b7c:	893b      	ldrh	r3, [r7, #8]
 8005b7e:	0a1b      	lsrs	r3, r3, #8
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b8c:	6a39      	ldr	r1, [r7, #32]
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 f93e 	bl	8005e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00d      	beq.n	8005bb6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	d107      	bne.n	8005bb2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e050      	b.n	8005c58 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bb6:	893b      	ldrh	r3, [r7, #8]
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc2:	6a39      	ldr	r1, [r7, #32]
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 f923 	bl	8005e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00d      	beq.n	8005bec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd4:	2b04      	cmp	r3, #4
 8005bd6:	d107      	bne.n	8005be8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005be6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e035      	b.n	8005c58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bfa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 f82b 	bl	8005c64 <I2C_WaitOnFlagUntilTimeout>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00d      	beq.n	8005c30 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c22:	d103      	bne.n	8005c2c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e013      	b.n	8005c58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005c30:	897b      	ldrh	r3, [r7, #10]
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	f043 0301 	orr.w	r3, r3, #1
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c42:	6a3a      	ldr	r2, [r7, #32]
 8005c44:	4906      	ldr	r1, [pc, #24]	; (8005c60 <I2C_RequestMemoryRead+0x1cc>)
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 f863 	bl	8005d12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e000      	b.n	8005c58 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3718      	adds	r7, #24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	00010002 	.word	0x00010002

08005c64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	603b      	str	r3, [r7, #0]
 8005c70:	4613      	mov	r3, r2
 8005c72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c74:	e025      	b.n	8005cc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c7c:	d021      	beq.n	8005cc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c7e:	f7fd ff5f 	bl	8003b40 <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d302      	bcc.n	8005c94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d116      	bne.n	8005cc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	f043 0220 	orr.w	r2, r3, #32
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e023      	b.n	8005d0a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	0c1b      	lsrs	r3, r3, #16
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d10d      	bne.n	8005ce8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	43da      	mvns	r2, r3
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	bf0c      	ite	eq
 8005cde:	2301      	moveq	r3, #1
 8005ce0:	2300      	movne	r3, #0
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	e00c      	b.n	8005d02 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	43da      	mvns	r2, r3
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	bf0c      	ite	eq
 8005cfa:	2301      	moveq	r3, #1
 8005cfc:	2300      	movne	r3, #0
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	461a      	mov	r2, r3
 8005d02:	79fb      	ldrb	r3, [r7, #7]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d0b6      	beq.n	8005c76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b084      	sub	sp, #16
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	60f8      	str	r0, [r7, #12]
 8005d1a:	60b9      	str	r1, [r7, #8]
 8005d1c:	607a      	str	r2, [r7, #4]
 8005d1e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d20:	e051      	b.n	8005dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d30:	d123      	bne.n	8005d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d40:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d4a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2220      	movs	r2, #32
 8005d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d66:	f043 0204 	orr.w	r2, r3, #4
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e046      	b.n	8005e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d80:	d021      	beq.n	8005dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d82:	f7fd fedd 	bl	8003b40 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d302      	bcc.n	8005d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d116      	bne.n	8005dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2220      	movs	r2, #32
 8005da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db2:	f043 0220 	orr.w	r2, r3, #32
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e020      	b.n	8005e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	0c1b      	lsrs	r3, r3, #16
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d10c      	bne.n	8005dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	43da      	mvns	r2, r3
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	4013      	ands	r3, r2
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	bf14      	ite	ne
 8005de2:	2301      	movne	r3, #1
 8005de4:	2300      	moveq	r3, #0
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	e00b      	b.n	8005e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	43da      	mvns	r2, r3
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	4013      	ands	r3, r2
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	bf14      	ite	ne
 8005dfc:	2301      	movne	r3, #1
 8005dfe:	2300      	moveq	r3, #0
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d18d      	bne.n	8005d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e1c:	e02d      	b.n	8005e7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f000 f8ce 	bl	8005fc0 <I2C_IsAcknowledgeFailed>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d001      	beq.n	8005e2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e02d      	b.n	8005e8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e34:	d021      	beq.n	8005e7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e36:	f7fd fe83 	bl	8003b40 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d302      	bcc.n	8005e4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d116      	bne.n	8005e7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2220      	movs	r2, #32
 8005e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e66:	f043 0220 	orr.w	r2, r3, #32
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e007      	b.n	8005e8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e84:	2b80      	cmp	r3, #128	; 0x80
 8005e86:	d1ca      	bne.n	8005e1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b084      	sub	sp, #16
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	60f8      	str	r0, [r7, #12]
 8005e9a:	60b9      	str	r1, [r7, #8]
 8005e9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e9e:	e02d      	b.n	8005efc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 f88d 	bl	8005fc0 <I2C_IsAcknowledgeFailed>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e02d      	b.n	8005f0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eb6:	d021      	beq.n	8005efc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eb8:	f7fd fe42 	bl	8003b40 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d302      	bcc.n	8005ece <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d116      	bne.n	8005efc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee8:	f043 0220 	orr.w	r2, r3, #32
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e007      	b.n	8005f0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	2b04      	cmp	r3, #4
 8005f08:	d1ca      	bne.n	8005ea0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f20:	e042      	b.n	8005fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	f003 0310 	and.w	r3, r3, #16
 8005f2c:	2b10      	cmp	r3, #16
 8005f2e:	d119      	bne.n	8005f64 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f06f 0210 	mvn.w	r2, #16
 8005f38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2220      	movs	r2, #32
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e029      	b.n	8005fb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f64:	f7fd fdec 	bl	8003b40 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d302      	bcc.n	8005f7a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d116      	bne.n	8005fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f94:	f043 0220 	orr.w	r2, r3, #32
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e007      	b.n	8005fb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb2:	2b40      	cmp	r3, #64	; 0x40
 8005fb4:	d1b5      	bne.n	8005f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fd6:	d11b      	bne.n	8006010 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fe0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffc:	f043 0204 	orr.w	r2, r3, #4
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e000      	b.n	8006012 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
	...

08006020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e0cc      	b.n	80061ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006034:	4b68      	ldr	r3, [pc, #416]	; (80061d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0307 	and.w	r3, r3, #7
 800603c:	683a      	ldr	r2, [r7, #0]
 800603e:	429a      	cmp	r2, r3
 8006040:	d90c      	bls.n	800605c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006042:	4b65      	ldr	r3, [pc, #404]	; (80061d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	b2d2      	uxtb	r2, r2
 8006048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800604a:	4b63      	ldr	r3, [pc, #396]	; (80061d8 <HAL_RCC_ClockConfig+0x1b8>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0307 	and.w	r3, r3, #7
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	429a      	cmp	r2, r3
 8006056:	d001      	beq.n	800605c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e0b8      	b.n	80061ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0302 	and.w	r3, r3, #2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d020      	beq.n	80060aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0304 	and.w	r3, r3, #4
 8006070:	2b00      	cmp	r3, #0
 8006072:	d005      	beq.n	8006080 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006074:	4b59      	ldr	r3, [pc, #356]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	4a58      	ldr	r2, [pc, #352]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 800607a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800607e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0308 	and.w	r3, r3, #8
 8006088:	2b00      	cmp	r3, #0
 800608a:	d005      	beq.n	8006098 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800608c:	4b53      	ldr	r3, [pc, #332]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	4a52      	ldr	r2, [pc, #328]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 8006092:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006096:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006098:	4b50      	ldr	r3, [pc, #320]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	494d      	ldr	r1, [pc, #308]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d044      	beq.n	8006140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d107      	bne.n	80060ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060be:	4b47      	ldr	r3, [pc, #284]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d119      	bne.n	80060fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e07f      	b.n	80061ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d003      	beq.n	80060de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060da:	2b03      	cmp	r3, #3
 80060dc:	d107      	bne.n	80060ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060de:	4b3f      	ldr	r3, [pc, #252]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d109      	bne.n	80060fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e06f      	b.n	80061ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060ee:	4b3b      	ldr	r3, [pc, #236]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e067      	b.n	80061ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060fe:	4b37      	ldr	r3, [pc, #220]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f023 0203 	bic.w	r2, r3, #3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	4934      	ldr	r1, [pc, #208]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 800610c:	4313      	orrs	r3, r2
 800610e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006110:	f7fd fd16 	bl	8003b40 <HAL_GetTick>
 8006114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006116:	e00a      	b.n	800612e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006118:	f7fd fd12 	bl	8003b40 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	f241 3288 	movw	r2, #5000	; 0x1388
 8006126:	4293      	cmp	r3, r2
 8006128:	d901      	bls.n	800612e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e04f      	b.n	80061ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800612e:	4b2b      	ldr	r3, [pc, #172]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f003 020c 	and.w	r2, r3, #12
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	429a      	cmp	r2, r3
 800613e:	d1eb      	bne.n	8006118 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006140:	4b25      	ldr	r3, [pc, #148]	; (80061d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0307 	and.w	r3, r3, #7
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	429a      	cmp	r2, r3
 800614c:	d20c      	bcs.n	8006168 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800614e:	4b22      	ldr	r3, [pc, #136]	; (80061d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	b2d2      	uxtb	r2, r2
 8006154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006156:	4b20      	ldr	r3, [pc, #128]	; (80061d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0307 	and.w	r3, r3, #7
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	429a      	cmp	r2, r3
 8006162:	d001      	beq.n	8006168 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e032      	b.n	80061ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b00      	cmp	r3, #0
 8006172:	d008      	beq.n	8006186 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006174:	4b19      	ldr	r3, [pc, #100]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	4916      	ldr	r1, [pc, #88]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 8006182:	4313      	orrs	r3, r2
 8006184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0308 	and.w	r3, r3, #8
 800618e:	2b00      	cmp	r3, #0
 8006190:	d009      	beq.n	80061a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006192:	4b12      	ldr	r3, [pc, #72]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	00db      	lsls	r3, r3, #3
 80061a0:	490e      	ldr	r1, [pc, #56]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80061a6:	f000 f821 	bl	80061ec <HAL_RCC_GetSysClockFreq>
 80061aa:	4602      	mov	r2, r0
 80061ac:	4b0b      	ldr	r3, [pc, #44]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	091b      	lsrs	r3, r3, #4
 80061b2:	f003 030f 	and.w	r3, r3, #15
 80061b6:	490a      	ldr	r1, [pc, #40]	; (80061e0 <HAL_RCC_ClockConfig+0x1c0>)
 80061b8:	5ccb      	ldrb	r3, [r1, r3]
 80061ba:	fa22 f303 	lsr.w	r3, r2, r3
 80061be:	4a09      	ldr	r2, [pc, #36]	; (80061e4 <HAL_RCC_ClockConfig+0x1c4>)
 80061c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80061c2:	4b09      	ldr	r3, [pc, #36]	; (80061e8 <HAL_RCC_ClockConfig+0x1c8>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fd fc76 	bl	8003ab8 <HAL_InitTick>

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	40023c00 	.word	0x40023c00
 80061dc:	40023800 	.word	0x40023800
 80061e0:	0800aef8 	.word	0x0800aef8
 80061e4:	20000028 	.word	0x20000028
 80061e8:	2000002c 	.word	0x2000002c

080061ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061f0:	b094      	sub	sp, #80	; 0x50
 80061f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80061f4:	2300      	movs	r3, #0
 80061f6:	647b      	str	r3, [r7, #68]	; 0x44
 80061f8:	2300      	movs	r3, #0
 80061fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061fc:	2300      	movs	r3, #0
 80061fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006200:	2300      	movs	r3, #0
 8006202:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006204:	4b79      	ldr	r3, [pc, #484]	; (80063ec <HAL_RCC_GetSysClockFreq+0x200>)
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f003 030c 	and.w	r3, r3, #12
 800620c:	2b08      	cmp	r3, #8
 800620e:	d00d      	beq.n	800622c <HAL_RCC_GetSysClockFreq+0x40>
 8006210:	2b08      	cmp	r3, #8
 8006212:	f200 80e1 	bhi.w	80063d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <HAL_RCC_GetSysClockFreq+0x34>
 800621a:	2b04      	cmp	r3, #4
 800621c:	d003      	beq.n	8006226 <HAL_RCC_GetSysClockFreq+0x3a>
 800621e:	e0db      	b.n	80063d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006220:	4b73      	ldr	r3, [pc, #460]	; (80063f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006222:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006224:	e0db      	b.n	80063de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006226:	4b72      	ldr	r3, [pc, #456]	; (80063f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006228:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800622a:	e0d8      	b.n	80063de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800622c:	4b6f      	ldr	r3, [pc, #444]	; (80063ec <HAL_RCC_GetSysClockFreq+0x200>)
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006234:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006236:	4b6d      	ldr	r3, [pc, #436]	; (80063ec <HAL_RCC_GetSysClockFreq+0x200>)
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d063      	beq.n	800630a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006242:	4b6a      	ldr	r3, [pc, #424]	; (80063ec <HAL_RCC_GetSysClockFreq+0x200>)
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	099b      	lsrs	r3, r3, #6
 8006248:	2200      	movs	r2, #0
 800624a:	63bb      	str	r3, [r7, #56]	; 0x38
 800624c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800624e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006254:	633b      	str	r3, [r7, #48]	; 0x30
 8006256:	2300      	movs	r3, #0
 8006258:	637b      	str	r3, [r7, #52]	; 0x34
 800625a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800625e:	4622      	mov	r2, r4
 8006260:	462b      	mov	r3, r5
 8006262:	f04f 0000 	mov.w	r0, #0
 8006266:	f04f 0100 	mov.w	r1, #0
 800626a:	0159      	lsls	r1, r3, #5
 800626c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006270:	0150      	lsls	r0, r2, #5
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	4621      	mov	r1, r4
 8006278:	1a51      	subs	r1, r2, r1
 800627a:	6139      	str	r1, [r7, #16]
 800627c:	4629      	mov	r1, r5
 800627e:	eb63 0301 	sbc.w	r3, r3, r1
 8006282:	617b      	str	r3, [r7, #20]
 8006284:	f04f 0200 	mov.w	r2, #0
 8006288:	f04f 0300 	mov.w	r3, #0
 800628c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006290:	4659      	mov	r1, fp
 8006292:	018b      	lsls	r3, r1, #6
 8006294:	4651      	mov	r1, sl
 8006296:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800629a:	4651      	mov	r1, sl
 800629c:	018a      	lsls	r2, r1, #6
 800629e:	4651      	mov	r1, sl
 80062a0:	ebb2 0801 	subs.w	r8, r2, r1
 80062a4:	4659      	mov	r1, fp
 80062a6:	eb63 0901 	sbc.w	r9, r3, r1
 80062aa:	f04f 0200 	mov.w	r2, #0
 80062ae:	f04f 0300 	mov.w	r3, #0
 80062b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062be:	4690      	mov	r8, r2
 80062c0:	4699      	mov	r9, r3
 80062c2:	4623      	mov	r3, r4
 80062c4:	eb18 0303 	adds.w	r3, r8, r3
 80062c8:	60bb      	str	r3, [r7, #8]
 80062ca:	462b      	mov	r3, r5
 80062cc:	eb49 0303 	adc.w	r3, r9, r3
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	f04f 0200 	mov.w	r2, #0
 80062d6:	f04f 0300 	mov.w	r3, #0
 80062da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80062de:	4629      	mov	r1, r5
 80062e0:	028b      	lsls	r3, r1, #10
 80062e2:	4621      	mov	r1, r4
 80062e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062e8:	4621      	mov	r1, r4
 80062ea:	028a      	lsls	r2, r1, #10
 80062ec:	4610      	mov	r0, r2
 80062ee:	4619      	mov	r1, r3
 80062f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062f2:	2200      	movs	r2, #0
 80062f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80062f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062fc:	f7fa fcc4 	bl	8000c88 <__aeabi_uldivmod>
 8006300:	4602      	mov	r2, r0
 8006302:	460b      	mov	r3, r1
 8006304:	4613      	mov	r3, r2
 8006306:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006308:	e058      	b.n	80063bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800630a:	4b38      	ldr	r3, [pc, #224]	; (80063ec <HAL_RCC_GetSysClockFreq+0x200>)
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	099b      	lsrs	r3, r3, #6
 8006310:	2200      	movs	r2, #0
 8006312:	4618      	mov	r0, r3
 8006314:	4611      	mov	r1, r2
 8006316:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800631a:	623b      	str	r3, [r7, #32]
 800631c:	2300      	movs	r3, #0
 800631e:	627b      	str	r3, [r7, #36]	; 0x24
 8006320:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006324:	4642      	mov	r2, r8
 8006326:	464b      	mov	r3, r9
 8006328:	f04f 0000 	mov.w	r0, #0
 800632c:	f04f 0100 	mov.w	r1, #0
 8006330:	0159      	lsls	r1, r3, #5
 8006332:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006336:	0150      	lsls	r0, r2, #5
 8006338:	4602      	mov	r2, r0
 800633a:	460b      	mov	r3, r1
 800633c:	4641      	mov	r1, r8
 800633e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006342:	4649      	mov	r1, r9
 8006344:	eb63 0b01 	sbc.w	fp, r3, r1
 8006348:	f04f 0200 	mov.w	r2, #0
 800634c:	f04f 0300 	mov.w	r3, #0
 8006350:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006354:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006358:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800635c:	ebb2 040a 	subs.w	r4, r2, sl
 8006360:	eb63 050b 	sbc.w	r5, r3, fp
 8006364:	f04f 0200 	mov.w	r2, #0
 8006368:	f04f 0300 	mov.w	r3, #0
 800636c:	00eb      	lsls	r3, r5, #3
 800636e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006372:	00e2      	lsls	r2, r4, #3
 8006374:	4614      	mov	r4, r2
 8006376:	461d      	mov	r5, r3
 8006378:	4643      	mov	r3, r8
 800637a:	18e3      	adds	r3, r4, r3
 800637c:	603b      	str	r3, [r7, #0]
 800637e:	464b      	mov	r3, r9
 8006380:	eb45 0303 	adc.w	r3, r5, r3
 8006384:	607b      	str	r3, [r7, #4]
 8006386:	f04f 0200 	mov.w	r2, #0
 800638a:	f04f 0300 	mov.w	r3, #0
 800638e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006392:	4629      	mov	r1, r5
 8006394:	028b      	lsls	r3, r1, #10
 8006396:	4621      	mov	r1, r4
 8006398:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800639c:	4621      	mov	r1, r4
 800639e:	028a      	lsls	r2, r1, #10
 80063a0:	4610      	mov	r0, r2
 80063a2:	4619      	mov	r1, r3
 80063a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063a6:	2200      	movs	r2, #0
 80063a8:	61bb      	str	r3, [r7, #24]
 80063aa:	61fa      	str	r2, [r7, #28]
 80063ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063b0:	f7fa fc6a 	bl	8000c88 <__aeabi_uldivmod>
 80063b4:	4602      	mov	r2, r0
 80063b6:	460b      	mov	r3, r1
 80063b8:	4613      	mov	r3, r2
 80063ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80063bc:	4b0b      	ldr	r3, [pc, #44]	; (80063ec <HAL_RCC_GetSysClockFreq+0x200>)
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	0c1b      	lsrs	r3, r3, #16
 80063c2:	f003 0303 	and.w	r3, r3, #3
 80063c6:	3301      	adds	r3, #1
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80063cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063d6:	e002      	b.n	80063de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063d8:	4b05      	ldr	r3, [pc, #20]	; (80063f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80063da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3750      	adds	r7, #80	; 0x50
 80063e4:	46bd      	mov	sp, r7
 80063e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063ea:	bf00      	nop
 80063ec:	40023800 	.word	0x40023800
 80063f0:	00f42400 	.word	0x00f42400

080063f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063f4:	b480      	push	{r7}
 80063f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063f8:	4b03      	ldr	r3, [pc, #12]	; (8006408 <HAL_RCC_GetHCLKFreq+0x14>)
 80063fa:	681b      	ldr	r3, [r3, #0]
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	20000028 	.word	0x20000028

0800640c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006410:	f7ff fff0 	bl	80063f4 <HAL_RCC_GetHCLKFreq>
 8006414:	4602      	mov	r2, r0
 8006416:	4b05      	ldr	r3, [pc, #20]	; (800642c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	0a9b      	lsrs	r3, r3, #10
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	4903      	ldr	r1, [pc, #12]	; (8006430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006422:	5ccb      	ldrb	r3, [r1, r3]
 8006424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006428:	4618      	mov	r0, r3
 800642a:	bd80      	pop	{r7, pc}
 800642c:	40023800 	.word	0x40023800
 8006430:	0800af08 	.word	0x0800af08

08006434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006438:	f7ff ffdc 	bl	80063f4 <HAL_RCC_GetHCLKFreq>
 800643c:	4602      	mov	r2, r0
 800643e:	4b05      	ldr	r3, [pc, #20]	; (8006454 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	0b5b      	lsrs	r3, r3, #13
 8006444:	f003 0307 	and.w	r3, r3, #7
 8006448:	4903      	ldr	r1, [pc, #12]	; (8006458 <HAL_RCC_GetPCLK2Freq+0x24>)
 800644a:	5ccb      	ldrb	r3, [r1, r3]
 800644c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006450:	4618      	mov	r0, r3
 8006452:	bd80      	pop	{r7, pc}
 8006454:	40023800 	.word	0x40023800
 8006458:	0800af08 	.word	0x0800af08

0800645c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e273      	b.n	8006956 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d075      	beq.n	8006566 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800647a:	4b88      	ldr	r3, [pc, #544]	; (800669c <HAL_RCC_OscConfig+0x240>)
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f003 030c 	and.w	r3, r3, #12
 8006482:	2b04      	cmp	r3, #4
 8006484:	d00c      	beq.n	80064a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006486:	4b85      	ldr	r3, [pc, #532]	; (800669c <HAL_RCC_OscConfig+0x240>)
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800648e:	2b08      	cmp	r3, #8
 8006490:	d112      	bne.n	80064b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006492:	4b82      	ldr	r3, [pc, #520]	; (800669c <HAL_RCC_OscConfig+0x240>)
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800649a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800649e:	d10b      	bne.n	80064b8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064a0:	4b7e      	ldr	r3, [pc, #504]	; (800669c <HAL_RCC_OscConfig+0x240>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d05b      	beq.n	8006564 <HAL_RCC_OscConfig+0x108>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d157      	bne.n	8006564 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e24e      	b.n	8006956 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064c0:	d106      	bne.n	80064d0 <HAL_RCC_OscConfig+0x74>
 80064c2:	4b76      	ldr	r3, [pc, #472]	; (800669c <HAL_RCC_OscConfig+0x240>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a75      	ldr	r2, [pc, #468]	; (800669c <HAL_RCC_OscConfig+0x240>)
 80064c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	e01d      	b.n	800650c <HAL_RCC_OscConfig+0xb0>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064d8:	d10c      	bne.n	80064f4 <HAL_RCC_OscConfig+0x98>
 80064da:	4b70      	ldr	r3, [pc, #448]	; (800669c <HAL_RCC_OscConfig+0x240>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a6f      	ldr	r2, [pc, #444]	; (800669c <HAL_RCC_OscConfig+0x240>)
 80064e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064e4:	6013      	str	r3, [r2, #0]
 80064e6:	4b6d      	ldr	r3, [pc, #436]	; (800669c <HAL_RCC_OscConfig+0x240>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a6c      	ldr	r2, [pc, #432]	; (800669c <HAL_RCC_OscConfig+0x240>)
 80064ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064f0:	6013      	str	r3, [r2, #0]
 80064f2:	e00b      	b.n	800650c <HAL_RCC_OscConfig+0xb0>
 80064f4:	4b69      	ldr	r3, [pc, #420]	; (800669c <HAL_RCC_OscConfig+0x240>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a68      	ldr	r2, [pc, #416]	; (800669c <HAL_RCC_OscConfig+0x240>)
 80064fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064fe:	6013      	str	r3, [r2, #0]
 8006500:	4b66      	ldr	r3, [pc, #408]	; (800669c <HAL_RCC_OscConfig+0x240>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a65      	ldr	r2, [pc, #404]	; (800669c <HAL_RCC_OscConfig+0x240>)
 8006506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800650a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d013      	beq.n	800653c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006514:	f7fd fb14 	bl	8003b40 <HAL_GetTick>
 8006518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800651a:	e008      	b.n	800652e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800651c:	f7fd fb10 	bl	8003b40 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	2b64      	cmp	r3, #100	; 0x64
 8006528:	d901      	bls.n	800652e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e213      	b.n	8006956 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800652e:	4b5b      	ldr	r3, [pc, #364]	; (800669c <HAL_RCC_OscConfig+0x240>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d0f0      	beq.n	800651c <HAL_RCC_OscConfig+0xc0>
 800653a:	e014      	b.n	8006566 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800653c:	f7fd fb00 	bl	8003b40 <HAL_GetTick>
 8006540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006542:	e008      	b.n	8006556 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006544:	f7fd fafc 	bl	8003b40 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	2b64      	cmp	r3, #100	; 0x64
 8006550:	d901      	bls.n	8006556 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e1ff      	b.n	8006956 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006556:	4b51      	ldr	r3, [pc, #324]	; (800669c <HAL_RCC_OscConfig+0x240>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1f0      	bne.n	8006544 <HAL_RCC_OscConfig+0xe8>
 8006562:	e000      	b.n	8006566 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d063      	beq.n	800663a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006572:	4b4a      	ldr	r3, [pc, #296]	; (800669c <HAL_RCC_OscConfig+0x240>)
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f003 030c 	and.w	r3, r3, #12
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00b      	beq.n	8006596 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800657e:	4b47      	ldr	r3, [pc, #284]	; (800669c <HAL_RCC_OscConfig+0x240>)
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006586:	2b08      	cmp	r3, #8
 8006588:	d11c      	bne.n	80065c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800658a:	4b44      	ldr	r3, [pc, #272]	; (800669c <HAL_RCC_OscConfig+0x240>)
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d116      	bne.n	80065c4 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006596:	4b41      	ldr	r3, [pc, #260]	; (800669c <HAL_RCC_OscConfig+0x240>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0302 	and.w	r3, r3, #2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d005      	beq.n	80065ae <HAL_RCC_OscConfig+0x152>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d001      	beq.n	80065ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e1d3      	b.n	8006956 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065ae:	4b3b      	ldr	r3, [pc, #236]	; (800669c <HAL_RCC_OscConfig+0x240>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	00db      	lsls	r3, r3, #3
 80065bc:	4937      	ldr	r1, [pc, #220]	; (800669c <HAL_RCC_OscConfig+0x240>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065c2:	e03a      	b.n	800663a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d020      	beq.n	800660e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065cc:	4b34      	ldr	r3, [pc, #208]	; (80066a0 <HAL_RCC_OscConfig+0x244>)
 80065ce:	2201      	movs	r2, #1
 80065d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d2:	f7fd fab5 	bl	8003b40 <HAL_GetTick>
 80065d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065d8:	e008      	b.n	80065ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065da:	f7fd fab1 	bl	8003b40 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d901      	bls.n	80065ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e1b4      	b.n	8006956 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065ec:	4b2b      	ldr	r3, [pc, #172]	; (800669c <HAL_RCC_OscConfig+0x240>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0302 	and.w	r3, r3, #2
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d0f0      	beq.n	80065da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065f8:	4b28      	ldr	r3, [pc, #160]	; (800669c <HAL_RCC_OscConfig+0x240>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	00db      	lsls	r3, r3, #3
 8006606:	4925      	ldr	r1, [pc, #148]	; (800669c <HAL_RCC_OscConfig+0x240>)
 8006608:	4313      	orrs	r3, r2
 800660a:	600b      	str	r3, [r1, #0]
 800660c:	e015      	b.n	800663a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800660e:	4b24      	ldr	r3, [pc, #144]	; (80066a0 <HAL_RCC_OscConfig+0x244>)
 8006610:	2200      	movs	r2, #0
 8006612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006614:	f7fd fa94 	bl	8003b40 <HAL_GetTick>
 8006618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800661a:	e008      	b.n	800662e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800661c:	f7fd fa90 	bl	8003b40 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	2b02      	cmp	r3, #2
 8006628:	d901      	bls.n	800662e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e193      	b.n	8006956 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800662e:	4b1b      	ldr	r3, [pc, #108]	; (800669c <HAL_RCC_OscConfig+0x240>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0302 	and.w	r3, r3, #2
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1f0      	bne.n	800661c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0308 	and.w	r3, r3, #8
 8006642:	2b00      	cmp	r3, #0
 8006644:	d036      	beq.n	80066b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d016      	beq.n	800667c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800664e:	4b15      	ldr	r3, [pc, #84]	; (80066a4 <HAL_RCC_OscConfig+0x248>)
 8006650:	2201      	movs	r2, #1
 8006652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006654:	f7fd fa74 	bl	8003b40 <HAL_GetTick>
 8006658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800665a:	e008      	b.n	800666e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800665c:	f7fd fa70 	bl	8003b40 <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	2b02      	cmp	r3, #2
 8006668:	d901      	bls.n	800666e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e173      	b.n	8006956 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800666e:	4b0b      	ldr	r3, [pc, #44]	; (800669c <HAL_RCC_OscConfig+0x240>)
 8006670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006672:	f003 0302 	and.w	r3, r3, #2
 8006676:	2b00      	cmp	r3, #0
 8006678:	d0f0      	beq.n	800665c <HAL_RCC_OscConfig+0x200>
 800667a:	e01b      	b.n	80066b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800667c:	4b09      	ldr	r3, [pc, #36]	; (80066a4 <HAL_RCC_OscConfig+0x248>)
 800667e:	2200      	movs	r2, #0
 8006680:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006682:	f7fd fa5d 	bl	8003b40 <HAL_GetTick>
 8006686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006688:	e00e      	b.n	80066a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800668a:	f7fd fa59 	bl	8003b40 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	2b02      	cmp	r3, #2
 8006696:	d907      	bls.n	80066a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e15c      	b.n	8006956 <HAL_RCC_OscConfig+0x4fa>
 800669c:	40023800 	.word	0x40023800
 80066a0:	42470000 	.word	0x42470000
 80066a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066a8:	4b8a      	ldr	r3, [pc, #552]	; (80068d4 <HAL_RCC_OscConfig+0x478>)
 80066aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1ea      	bne.n	800668a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0304 	and.w	r3, r3, #4
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 8097 	beq.w	80067f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066c2:	2300      	movs	r3, #0
 80066c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066c6:	4b83      	ldr	r3, [pc, #524]	; (80068d4 <HAL_RCC_OscConfig+0x478>)
 80066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10f      	bne.n	80066f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066d2:	2300      	movs	r3, #0
 80066d4:	60bb      	str	r3, [r7, #8]
 80066d6:	4b7f      	ldr	r3, [pc, #508]	; (80068d4 <HAL_RCC_OscConfig+0x478>)
 80066d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066da:	4a7e      	ldr	r2, [pc, #504]	; (80068d4 <HAL_RCC_OscConfig+0x478>)
 80066dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066e0:	6413      	str	r3, [r2, #64]	; 0x40
 80066e2:	4b7c      	ldr	r3, [pc, #496]	; (80068d4 <HAL_RCC_OscConfig+0x478>)
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ea:	60bb      	str	r3, [r7, #8]
 80066ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066ee:	2301      	movs	r3, #1
 80066f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066f2:	4b79      	ldr	r3, [pc, #484]	; (80068d8 <HAL_RCC_OscConfig+0x47c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d118      	bne.n	8006730 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066fe:	4b76      	ldr	r3, [pc, #472]	; (80068d8 <HAL_RCC_OscConfig+0x47c>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a75      	ldr	r2, [pc, #468]	; (80068d8 <HAL_RCC_OscConfig+0x47c>)
 8006704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800670a:	f7fd fa19 	bl	8003b40 <HAL_GetTick>
 800670e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006710:	e008      	b.n	8006724 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006712:	f7fd fa15 	bl	8003b40 <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	2b02      	cmp	r3, #2
 800671e:	d901      	bls.n	8006724 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e118      	b.n	8006956 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006724:	4b6c      	ldr	r3, [pc, #432]	; (80068d8 <HAL_RCC_OscConfig+0x47c>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800672c:	2b00      	cmp	r3, #0
 800672e:	d0f0      	beq.n	8006712 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d106      	bne.n	8006746 <HAL_RCC_OscConfig+0x2ea>
 8006738:	4b66      	ldr	r3, [pc, #408]	; (80068d4 <HAL_RCC_OscConfig+0x478>)
 800673a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673c:	4a65      	ldr	r2, [pc, #404]	; (80068d4 <HAL_RCC_OscConfig+0x478>)
 800673e:	f043 0301 	orr.w	r3, r3, #1
 8006742:	6713      	str	r3, [r2, #112]	; 0x70
 8006744:	e01c      	b.n	8006780 <HAL_RCC_OscConfig+0x324>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	2b05      	cmp	r3, #5
 800674c:	d10c      	bne.n	8006768 <HAL_RCC_OscConfig+0x30c>
 800674e:	4b61      	ldr	r3, [pc, #388]	; (80068d4 <HAL_RCC_OscConfig+0x478>)
 8006750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006752:	4a60      	ldr	r2, [pc, #384]	; (80068d4 <HAL_RCC_OscConfig+0x478>)
 8006754:	f043 0304 	orr.w	r3, r3, #4
 8006758:	6713      	str	r3, [r2, #112]	; 0x70
 800675a:	4b5e      	ldr	r3, [pc, #376]	; (80068d4 <HAL_RCC_OscConfig+0x478>)
 800675c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675e:	4a5d      	ldr	r2, [pc, #372]	; (80068d4 <HAL_RCC_OscConfig+0x478>)
 8006760:	f043 0301 	orr.w	r3, r3, #1
 8006764:	6713      	str	r3, [r2, #112]	; 0x70
 8006766:	e00b      	b.n	8006780 <HAL_RCC_OscConfig+0x324>
 8006768:	4b5a      	ldr	r3, [pc, #360]	; (80068d4 <HAL_RCC_OscConfig+0x478>)
 800676a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676c:	4a59      	ldr	r2, [pc, #356]	; (80068d4 <HAL_RCC_OscConfig+0x478>)
 800676e:	f023 0301 	bic.w	r3, r3, #1
 8006772:	6713      	str	r3, [r2, #112]	; 0x70
 8006774:	4b57      	ldr	r3, [pc, #348]	; (80068d4 <HAL_RCC_OscConfig+0x478>)
 8006776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006778:	4a56      	ldr	r2, [pc, #344]	; (80068d4 <HAL_RCC_OscConfig+0x478>)
 800677a:	f023 0304 	bic.w	r3, r3, #4
 800677e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d015      	beq.n	80067b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006788:	f7fd f9da 	bl	8003b40 <HAL_GetTick>
 800678c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800678e:	e00a      	b.n	80067a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006790:	f7fd f9d6 	bl	8003b40 <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	f241 3288 	movw	r2, #5000	; 0x1388
 800679e:	4293      	cmp	r3, r2
 80067a0:	d901      	bls.n	80067a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e0d7      	b.n	8006956 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067a6:	4b4b      	ldr	r3, [pc, #300]	; (80068d4 <HAL_RCC_OscConfig+0x478>)
 80067a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067aa:	f003 0302 	and.w	r3, r3, #2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d0ee      	beq.n	8006790 <HAL_RCC_OscConfig+0x334>
 80067b2:	e014      	b.n	80067de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067b4:	f7fd f9c4 	bl	8003b40 <HAL_GetTick>
 80067b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067ba:	e00a      	b.n	80067d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067bc:	f7fd f9c0 	bl	8003b40 <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d901      	bls.n	80067d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e0c1      	b.n	8006956 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067d2:	4b40      	ldr	r3, [pc, #256]	; (80068d4 <HAL_RCC_OscConfig+0x478>)
 80067d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d6:	f003 0302 	and.w	r3, r3, #2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1ee      	bne.n	80067bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067de:	7dfb      	ldrb	r3, [r7, #23]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d105      	bne.n	80067f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067e4:	4b3b      	ldr	r3, [pc, #236]	; (80068d4 <HAL_RCC_OscConfig+0x478>)
 80067e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e8:	4a3a      	ldr	r2, [pc, #232]	; (80068d4 <HAL_RCC_OscConfig+0x478>)
 80067ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 80ad 	beq.w	8006954 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067fa:	4b36      	ldr	r3, [pc, #216]	; (80068d4 <HAL_RCC_OscConfig+0x478>)
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f003 030c 	and.w	r3, r3, #12
 8006802:	2b08      	cmp	r3, #8
 8006804:	d060      	beq.n	80068c8 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	2b02      	cmp	r3, #2
 800680c:	d145      	bne.n	800689a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800680e:	4b33      	ldr	r3, [pc, #204]	; (80068dc <HAL_RCC_OscConfig+0x480>)
 8006810:	2200      	movs	r2, #0
 8006812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006814:	f7fd f994 	bl	8003b40 <HAL_GetTick>
 8006818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800681a:	e008      	b.n	800682e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800681c:	f7fd f990 	bl	8003b40 <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	2b02      	cmp	r3, #2
 8006828:	d901      	bls.n	800682e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e093      	b.n	8006956 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800682e:	4b29      	ldr	r3, [pc, #164]	; (80068d4 <HAL_RCC_OscConfig+0x478>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1f0      	bne.n	800681c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	69da      	ldr	r2, [r3, #28]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	431a      	orrs	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	019b      	lsls	r3, r3, #6
 800684a:	431a      	orrs	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006850:	085b      	lsrs	r3, r3, #1
 8006852:	3b01      	subs	r3, #1
 8006854:	041b      	lsls	r3, r3, #16
 8006856:	431a      	orrs	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685c:	061b      	lsls	r3, r3, #24
 800685e:	431a      	orrs	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006864:	071b      	lsls	r3, r3, #28
 8006866:	491b      	ldr	r1, [pc, #108]	; (80068d4 <HAL_RCC_OscConfig+0x478>)
 8006868:	4313      	orrs	r3, r2
 800686a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800686c:	4b1b      	ldr	r3, [pc, #108]	; (80068dc <HAL_RCC_OscConfig+0x480>)
 800686e:	2201      	movs	r2, #1
 8006870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006872:	f7fd f965 	bl	8003b40 <HAL_GetTick>
 8006876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006878:	e008      	b.n	800688c <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800687a:	f7fd f961 	bl	8003b40 <HAL_GetTick>
 800687e:	4602      	mov	r2, r0
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	2b02      	cmp	r3, #2
 8006886:	d901      	bls.n	800688c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	e064      	b.n	8006956 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800688c:	4b11      	ldr	r3, [pc, #68]	; (80068d4 <HAL_RCC_OscConfig+0x478>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d0f0      	beq.n	800687a <HAL_RCC_OscConfig+0x41e>
 8006898:	e05c      	b.n	8006954 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800689a:	4b10      	ldr	r3, [pc, #64]	; (80068dc <HAL_RCC_OscConfig+0x480>)
 800689c:	2200      	movs	r2, #0
 800689e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a0:	f7fd f94e 	bl	8003b40 <HAL_GetTick>
 80068a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068a6:	e008      	b.n	80068ba <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068a8:	f7fd f94a 	bl	8003b40 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d901      	bls.n	80068ba <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e04d      	b.n	8006956 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068ba:	4b06      	ldr	r3, [pc, #24]	; (80068d4 <HAL_RCC_OscConfig+0x478>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1f0      	bne.n	80068a8 <HAL_RCC_OscConfig+0x44c>
 80068c6:	e045      	b.n	8006954 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d107      	bne.n	80068e0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e040      	b.n	8006956 <HAL_RCC_OscConfig+0x4fa>
 80068d4:	40023800 	.word	0x40023800
 80068d8:	40007000 	.word	0x40007000
 80068dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80068e0:	4b1f      	ldr	r3, [pc, #124]	; (8006960 <HAL_RCC_OscConfig+0x504>)
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d030      	beq.n	8006950 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d129      	bne.n	8006950 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006906:	429a      	cmp	r2, r3
 8006908:	d122      	bne.n	8006950 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006910:	4013      	ands	r3, r2
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006916:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006918:	4293      	cmp	r3, r2
 800691a:	d119      	bne.n	8006950 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006926:	085b      	lsrs	r3, r3, #1
 8006928:	3b01      	subs	r3, #1
 800692a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800692c:	429a      	cmp	r2, r3
 800692e:	d10f      	bne.n	8006950 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800693c:	429a      	cmp	r2, r3
 800693e:	d107      	bne.n	8006950 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800694c:	429a      	cmp	r2, r3
 800694e:	d001      	beq.n	8006954 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e000      	b.n	8006956 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3718      	adds	r7, #24
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	40023800 	.word	0x40023800

08006964 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d101      	bne.n	8006976 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e041      	b.n	80069fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b00      	cmp	r3, #0
 8006980:	d106      	bne.n	8006990 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7fc fe98 	bl	80036c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2202      	movs	r2, #2
 8006994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	3304      	adds	r3, #4
 80069a0:	4619      	mov	r1, r3
 80069a2:	4610      	mov	r0, r2
 80069a4:	f000 fa10 	bl	8006dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b082      	sub	sp, #8
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e041      	b.n	8006a98 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d106      	bne.n	8006a2e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f839 	bl	8006aa0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2202      	movs	r2, #2
 8006a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	3304      	adds	r3, #4
 8006a3e:	4619      	mov	r1, r3
 8006a40:	4610      	mov	r0, r2
 8006a42:	f000 f9c1 	bl	8006dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d101      	bne.n	8006ad2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ace:	2302      	movs	r3, #2
 8006ad0:	e0ae      	b.n	8006c30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b0c      	cmp	r3, #12
 8006ade:	f200 809f 	bhi.w	8006c20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006ae2:	a201      	add	r2, pc, #4	; (adr r2, 8006ae8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae8:	08006b1d 	.word	0x08006b1d
 8006aec:	08006c21 	.word	0x08006c21
 8006af0:	08006c21 	.word	0x08006c21
 8006af4:	08006c21 	.word	0x08006c21
 8006af8:	08006b5d 	.word	0x08006b5d
 8006afc:	08006c21 	.word	0x08006c21
 8006b00:	08006c21 	.word	0x08006c21
 8006b04:	08006c21 	.word	0x08006c21
 8006b08:	08006b9f 	.word	0x08006b9f
 8006b0c:	08006c21 	.word	0x08006c21
 8006b10:	08006c21 	.word	0x08006c21
 8006b14:	08006c21 	.word	0x08006c21
 8006b18:	08006bdf 	.word	0x08006bdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68b9      	ldr	r1, [r7, #8]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 f9f0 	bl	8006f08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	699a      	ldr	r2, [r3, #24]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f042 0208 	orr.w	r2, r2, #8
 8006b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699a      	ldr	r2, [r3, #24]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f022 0204 	bic.w	r2, r2, #4
 8006b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6999      	ldr	r1, [r3, #24]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	691a      	ldr	r2, [r3, #16]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	430a      	orrs	r2, r1
 8006b58:	619a      	str	r2, [r3, #24]
      break;
 8006b5a:	e064      	b.n	8006c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68b9      	ldr	r1, [r7, #8]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 fa40 	bl	8006fe8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	699a      	ldr	r2, [r3, #24]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	699a      	ldr	r2, [r3, #24]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6999      	ldr	r1, [r3, #24]
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	021a      	lsls	r2, r3, #8
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	619a      	str	r2, [r3, #24]
      break;
 8006b9c:	e043      	b.n	8006c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68b9      	ldr	r1, [r7, #8]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 fa95 	bl	80070d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	69da      	ldr	r2, [r3, #28]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f042 0208 	orr.w	r2, r2, #8
 8006bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	69da      	ldr	r2, [r3, #28]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f022 0204 	bic.w	r2, r2, #4
 8006bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	69d9      	ldr	r1, [r3, #28]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	691a      	ldr	r2, [r3, #16]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	61da      	str	r2, [r3, #28]
      break;
 8006bdc:	e023      	b.n	8006c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68b9      	ldr	r1, [r7, #8]
 8006be4:	4618      	mov	r0, r3
 8006be6:	f000 fae9 	bl	80071bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	69da      	ldr	r2, [r3, #28]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	69da      	ldr	r2, [r3, #28]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	69d9      	ldr	r1, [r3, #28]
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	021a      	lsls	r2, r3, #8
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	430a      	orrs	r2, r1
 8006c1c:	61da      	str	r2, [r3, #28]
      break;
 8006c1e:	e002      	b.n	8006c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	75fb      	strb	r3, [r7, #23]
      break;
 8006c24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c42:	2300      	movs	r3, #0
 8006c44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d101      	bne.n	8006c54 <HAL_TIM_ConfigClockSource+0x1c>
 8006c50:	2302      	movs	r3, #2
 8006c52:	e0b4      	b.n	8006dbe <HAL_TIM_ConfigClockSource+0x186>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c8c:	d03e      	beq.n	8006d0c <HAL_TIM_ConfigClockSource+0xd4>
 8006c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c92:	f200 8087 	bhi.w	8006da4 <HAL_TIM_ConfigClockSource+0x16c>
 8006c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c9a:	f000 8086 	beq.w	8006daa <HAL_TIM_ConfigClockSource+0x172>
 8006c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ca2:	d87f      	bhi.n	8006da4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ca4:	2b70      	cmp	r3, #112	; 0x70
 8006ca6:	d01a      	beq.n	8006cde <HAL_TIM_ConfigClockSource+0xa6>
 8006ca8:	2b70      	cmp	r3, #112	; 0x70
 8006caa:	d87b      	bhi.n	8006da4 <HAL_TIM_ConfigClockSource+0x16c>
 8006cac:	2b60      	cmp	r3, #96	; 0x60
 8006cae:	d050      	beq.n	8006d52 <HAL_TIM_ConfigClockSource+0x11a>
 8006cb0:	2b60      	cmp	r3, #96	; 0x60
 8006cb2:	d877      	bhi.n	8006da4 <HAL_TIM_ConfigClockSource+0x16c>
 8006cb4:	2b50      	cmp	r3, #80	; 0x50
 8006cb6:	d03c      	beq.n	8006d32 <HAL_TIM_ConfigClockSource+0xfa>
 8006cb8:	2b50      	cmp	r3, #80	; 0x50
 8006cba:	d873      	bhi.n	8006da4 <HAL_TIM_ConfigClockSource+0x16c>
 8006cbc:	2b40      	cmp	r3, #64	; 0x40
 8006cbe:	d058      	beq.n	8006d72 <HAL_TIM_ConfigClockSource+0x13a>
 8006cc0:	2b40      	cmp	r3, #64	; 0x40
 8006cc2:	d86f      	bhi.n	8006da4 <HAL_TIM_ConfigClockSource+0x16c>
 8006cc4:	2b30      	cmp	r3, #48	; 0x30
 8006cc6:	d064      	beq.n	8006d92 <HAL_TIM_ConfigClockSource+0x15a>
 8006cc8:	2b30      	cmp	r3, #48	; 0x30
 8006cca:	d86b      	bhi.n	8006da4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ccc:	2b20      	cmp	r3, #32
 8006cce:	d060      	beq.n	8006d92 <HAL_TIM_ConfigClockSource+0x15a>
 8006cd0:	2b20      	cmp	r3, #32
 8006cd2:	d867      	bhi.n	8006da4 <HAL_TIM_ConfigClockSource+0x16c>
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d05c      	beq.n	8006d92 <HAL_TIM_ConfigClockSource+0x15a>
 8006cd8:	2b10      	cmp	r3, #16
 8006cda:	d05a      	beq.n	8006d92 <HAL_TIM_ConfigClockSource+0x15a>
 8006cdc:	e062      	b.n	8006da4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6818      	ldr	r0, [r3, #0]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	6899      	ldr	r1, [r3, #8]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	685a      	ldr	r2, [r3, #4]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	f000 fb35 	bl	800735c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	609a      	str	r2, [r3, #8]
      break;
 8006d0a:	e04f      	b.n	8006dac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6818      	ldr	r0, [r3, #0]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	6899      	ldr	r1, [r3, #8]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	f000 fb1e 	bl	800735c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689a      	ldr	r2, [r3, #8]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d2e:	609a      	str	r2, [r3, #8]
      break;
 8006d30:	e03c      	b.n	8006dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6818      	ldr	r0, [r3, #0]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	6859      	ldr	r1, [r3, #4]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	f000 fa92 	bl	8007268 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2150      	movs	r1, #80	; 0x50
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 faeb 	bl	8007326 <TIM_ITRx_SetConfig>
      break;
 8006d50:	e02c      	b.n	8006dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6818      	ldr	r0, [r3, #0]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	6859      	ldr	r1, [r3, #4]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	f000 fab1 	bl	80072c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2160      	movs	r1, #96	; 0x60
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f000 fadb 	bl	8007326 <TIM_ITRx_SetConfig>
      break;
 8006d70:	e01c      	b.n	8006dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6818      	ldr	r0, [r3, #0]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	6859      	ldr	r1, [r3, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	f000 fa72 	bl	8007268 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2140      	movs	r1, #64	; 0x40
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 facb 	bl	8007326 <TIM_ITRx_SetConfig>
      break;
 8006d90:	e00c      	b.n	8006dac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	f000 fac2 	bl	8007326 <TIM_ITRx_SetConfig>
      break;
 8006da2:	e003      	b.n	8006dac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	73fb      	strb	r3, [r7, #15]
      break;
 8006da8:	e000      	b.n	8006dac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006daa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
	...

08006dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a40      	ldr	r2, [pc, #256]	; (8006edc <TIM_Base_SetConfig+0x114>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d013      	beq.n	8006e08 <TIM_Base_SetConfig+0x40>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006de6:	d00f      	beq.n	8006e08 <TIM_Base_SetConfig+0x40>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a3d      	ldr	r2, [pc, #244]	; (8006ee0 <TIM_Base_SetConfig+0x118>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d00b      	beq.n	8006e08 <TIM_Base_SetConfig+0x40>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a3c      	ldr	r2, [pc, #240]	; (8006ee4 <TIM_Base_SetConfig+0x11c>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d007      	beq.n	8006e08 <TIM_Base_SetConfig+0x40>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a3b      	ldr	r2, [pc, #236]	; (8006ee8 <TIM_Base_SetConfig+0x120>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d003      	beq.n	8006e08 <TIM_Base_SetConfig+0x40>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a3a      	ldr	r2, [pc, #232]	; (8006eec <TIM_Base_SetConfig+0x124>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d108      	bne.n	8006e1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a2f      	ldr	r2, [pc, #188]	; (8006edc <TIM_Base_SetConfig+0x114>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d02b      	beq.n	8006e7a <TIM_Base_SetConfig+0xb2>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e28:	d027      	beq.n	8006e7a <TIM_Base_SetConfig+0xb2>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a2c      	ldr	r2, [pc, #176]	; (8006ee0 <TIM_Base_SetConfig+0x118>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d023      	beq.n	8006e7a <TIM_Base_SetConfig+0xb2>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a2b      	ldr	r2, [pc, #172]	; (8006ee4 <TIM_Base_SetConfig+0x11c>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d01f      	beq.n	8006e7a <TIM_Base_SetConfig+0xb2>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a2a      	ldr	r2, [pc, #168]	; (8006ee8 <TIM_Base_SetConfig+0x120>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d01b      	beq.n	8006e7a <TIM_Base_SetConfig+0xb2>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a29      	ldr	r2, [pc, #164]	; (8006eec <TIM_Base_SetConfig+0x124>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d017      	beq.n	8006e7a <TIM_Base_SetConfig+0xb2>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a28      	ldr	r2, [pc, #160]	; (8006ef0 <TIM_Base_SetConfig+0x128>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d013      	beq.n	8006e7a <TIM_Base_SetConfig+0xb2>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a27      	ldr	r2, [pc, #156]	; (8006ef4 <TIM_Base_SetConfig+0x12c>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d00f      	beq.n	8006e7a <TIM_Base_SetConfig+0xb2>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a26      	ldr	r2, [pc, #152]	; (8006ef8 <TIM_Base_SetConfig+0x130>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d00b      	beq.n	8006e7a <TIM_Base_SetConfig+0xb2>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a25      	ldr	r2, [pc, #148]	; (8006efc <TIM_Base_SetConfig+0x134>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d007      	beq.n	8006e7a <TIM_Base_SetConfig+0xb2>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a24      	ldr	r2, [pc, #144]	; (8006f00 <TIM_Base_SetConfig+0x138>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d003      	beq.n	8006e7a <TIM_Base_SetConfig+0xb2>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a23      	ldr	r2, [pc, #140]	; (8006f04 <TIM_Base_SetConfig+0x13c>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d108      	bne.n	8006e8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	695b      	ldr	r3, [r3, #20]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	689a      	ldr	r2, [r3, #8]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a0a      	ldr	r2, [pc, #40]	; (8006edc <TIM_Base_SetConfig+0x114>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d003      	beq.n	8006ec0 <TIM_Base_SetConfig+0xf8>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a0c      	ldr	r2, [pc, #48]	; (8006eec <TIM_Base_SetConfig+0x124>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d103      	bne.n	8006ec8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	691a      	ldr	r2, [r3, #16]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	615a      	str	r2, [r3, #20]
}
 8006ece:	bf00      	nop
 8006ed0:	3714      	adds	r7, #20
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	40010000 	.word	0x40010000
 8006ee0:	40000400 	.word	0x40000400
 8006ee4:	40000800 	.word	0x40000800
 8006ee8:	40000c00 	.word	0x40000c00
 8006eec:	40010400 	.word	0x40010400
 8006ef0:	40014000 	.word	0x40014000
 8006ef4:	40014400 	.word	0x40014400
 8006ef8:	40014800 	.word	0x40014800
 8006efc:	40001800 	.word	0x40001800
 8006f00:	40001c00 	.word	0x40001c00
 8006f04:	40002000 	.word	0x40002000

08006f08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b087      	sub	sp, #28
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	f023 0201 	bic.w	r2, r3, #1
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f023 0303 	bic.w	r3, r3, #3
 8006f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	f023 0302 	bic.w	r3, r3, #2
 8006f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	697a      	ldr	r2, [r7, #20]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a20      	ldr	r2, [pc, #128]	; (8006fe0 <TIM_OC1_SetConfig+0xd8>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d003      	beq.n	8006f6c <TIM_OC1_SetConfig+0x64>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a1f      	ldr	r2, [pc, #124]	; (8006fe4 <TIM_OC1_SetConfig+0xdc>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d10c      	bne.n	8006f86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	f023 0308 	bic.w	r3, r3, #8
 8006f72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	f023 0304 	bic.w	r3, r3, #4
 8006f84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a15      	ldr	r2, [pc, #84]	; (8006fe0 <TIM_OC1_SetConfig+0xd8>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d003      	beq.n	8006f96 <TIM_OC1_SetConfig+0x8e>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a14      	ldr	r2, [pc, #80]	; (8006fe4 <TIM_OC1_SetConfig+0xdc>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d111      	bne.n	8006fba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	621a      	str	r2, [r3, #32]
}
 8006fd4:	bf00      	nop
 8006fd6:	371c      	adds	r7, #28
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr
 8006fe0:	40010000 	.word	0x40010000
 8006fe4:	40010400 	.word	0x40010400

08006fe8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b087      	sub	sp, #28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	f023 0210 	bic.w	r2, r3, #16
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800701e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	021b      	lsls	r3, r3, #8
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	4313      	orrs	r3, r2
 800702a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	f023 0320 	bic.w	r3, r3, #32
 8007032:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	011b      	lsls	r3, r3, #4
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	4313      	orrs	r3, r2
 800703e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a22      	ldr	r2, [pc, #136]	; (80070cc <TIM_OC2_SetConfig+0xe4>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d003      	beq.n	8007050 <TIM_OC2_SetConfig+0x68>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a21      	ldr	r2, [pc, #132]	; (80070d0 <TIM_OC2_SetConfig+0xe8>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d10d      	bne.n	800706c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	011b      	lsls	r3, r3, #4
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	4313      	orrs	r3, r2
 8007062:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800706a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a17      	ldr	r2, [pc, #92]	; (80070cc <TIM_OC2_SetConfig+0xe4>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d003      	beq.n	800707c <TIM_OC2_SetConfig+0x94>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a16      	ldr	r2, [pc, #88]	; (80070d0 <TIM_OC2_SetConfig+0xe8>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d113      	bne.n	80070a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007082:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800708a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	4313      	orrs	r3, r2
 8007096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	621a      	str	r2, [r3, #32]
}
 80070be:	bf00      	nop
 80070c0:	371c      	adds	r7, #28
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	40010000 	.word	0x40010000
 80070d0:	40010400 	.word	0x40010400

080070d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b087      	sub	sp, #28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f023 0303 	bic.w	r3, r3, #3
 800710a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	4313      	orrs	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800711c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	021b      	lsls	r3, r3, #8
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	4313      	orrs	r3, r2
 8007128:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a21      	ldr	r2, [pc, #132]	; (80071b4 <TIM_OC3_SetConfig+0xe0>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d003      	beq.n	800713a <TIM_OC3_SetConfig+0x66>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a20      	ldr	r2, [pc, #128]	; (80071b8 <TIM_OC3_SetConfig+0xe4>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d10d      	bne.n	8007156 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007140:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	021b      	lsls	r3, r3, #8
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	4313      	orrs	r3, r2
 800714c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007154:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a16      	ldr	r2, [pc, #88]	; (80071b4 <TIM_OC3_SetConfig+0xe0>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d003      	beq.n	8007166 <TIM_OC3_SetConfig+0x92>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a15      	ldr	r2, [pc, #84]	; (80071b8 <TIM_OC3_SetConfig+0xe4>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d113      	bne.n	800718e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800716c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	011b      	lsls	r3, r3, #4
 800717c:	693a      	ldr	r2, [r7, #16]
 800717e:	4313      	orrs	r3, r2
 8007180:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	011b      	lsls	r3, r3, #4
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	4313      	orrs	r3, r2
 800718c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	621a      	str	r2, [r3, #32]
}
 80071a8:	bf00      	nop
 80071aa:	371c      	adds	r7, #28
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr
 80071b4:	40010000 	.word	0x40010000
 80071b8:	40010400 	.word	0x40010400

080071bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071bc:	b480      	push	{r7}
 80071be:	b087      	sub	sp, #28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a1b      	ldr	r3, [r3, #32]
 80071d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	69db      	ldr	r3, [r3, #28]
 80071e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	021b      	lsls	r3, r3, #8
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007206:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	031b      	lsls	r3, r3, #12
 800720e:	693a      	ldr	r2, [r7, #16]
 8007210:	4313      	orrs	r3, r2
 8007212:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a12      	ldr	r2, [pc, #72]	; (8007260 <TIM_OC4_SetConfig+0xa4>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d003      	beq.n	8007224 <TIM_OC4_SetConfig+0x68>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a11      	ldr	r2, [pc, #68]	; (8007264 <TIM_OC4_SetConfig+0xa8>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d109      	bne.n	8007238 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800722a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	695b      	ldr	r3, [r3, #20]
 8007230:	019b      	lsls	r3, r3, #6
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	4313      	orrs	r3, r2
 8007236:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	693a      	ldr	r2, [r7, #16]
 8007250:	621a      	str	r2, [r3, #32]
}
 8007252:	bf00      	nop
 8007254:	371c      	adds	r7, #28
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	40010000 	.word	0x40010000
 8007264:	40010400 	.word	0x40010400

08007268 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007268:	b480      	push	{r7}
 800726a:	b087      	sub	sp, #28
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6a1b      	ldr	r3, [r3, #32]
 8007278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	f023 0201 	bic.w	r2, r3, #1
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	011b      	lsls	r3, r3, #4
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	4313      	orrs	r3, r2
 800729c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f023 030a 	bic.w	r3, r3, #10
 80072a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	621a      	str	r2, [r3, #32]
}
 80072ba:	bf00      	nop
 80072bc:	371c      	adds	r7, #28
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b087      	sub	sp, #28
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	60f8      	str	r0, [r7, #12]
 80072ce:	60b9      	str	r1, [r7, #8]
 80072d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	f023 0210 	bic.w	r2, r3, #16
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6a1b      	ldr	r3, [r3, #32]
 80072e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	031b      	lsls	r3, r3, #12
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007302:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	011b      	lsls	r3, r3, #4
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	4313      	orrs	r3, r2
 800730c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	621a      	str	r2, [r3, #32]
}
 800731a:	bf00      	nop
 800731c:	371c      	adds	r7, #28
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr

08007326 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007326:	b480      	push	{r7}
 8007328:	b085      	sub	sp, #20
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800733c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	4313      	orrs	r3, r2
 8007344:	f043 0307 	orr.w	r3, r3, #7
 8007348:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	609a      	str	r2, [r3, #8]
}
 8007350:	bf00      	nop
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800735c:	b480      	push	{r7}
 800735e:	b087      	sub	sp, #28
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
 8007368:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007376:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	021a      	lsls	r2, r3, #8
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	431a      	orrs	r2, r3
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	4313      	orrs	r3, r2
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	4313      	orrs	r3, r2
 8007388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	609a      	str	r2, [r3, #8]
}
 8007390:	bf00      	nop
 8007392:	371c      	adds	r7, #28
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d101      	bne.n	80073b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073b0:	2302      	movs	r3, #2
 80073b2:	e05a      	b.n	800746a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2202      	movs	r2, #2
 80073c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a21      	ldr	r2, [pc, #132]	; (8007478 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d022      	beq.n	800743e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007400:	d01d      	beq.n	800743e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a1d      	ldr	r2, [pc, #116]	; (800747c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d018      	beq.n	800743e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a1b      	ldr	r2, [pc, #108]	; (8007480 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d013      	beq.n	800743e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a1a      	ldr	r2, [pc, #104]	; (8007484 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d00e      	beq.n	800743e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a18      	ldr	r2, [pc, #96]	; (8007488 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d009      	beq.n	800743e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a17      	ldr	r2, [pc, #92]	; (800748c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d004      	beq.n	800743e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a15      	ldr	r2, [pc, #84]	; (8007490 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d10c      	bne.n	8007458 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007444:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	4313      	orrs	r3, r2
 800744e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	40010000 	.word	0x40010000
 800747c:	40000400 	.word	0x40000400
 8007480:	40000800 	.word	0x40000800
 8007484:	40000c00 	.word	0x40000c00
 8007488:	40010400 	.word	0x40010400
 800748c:	40014000 	.word	0x40014000
 8007490:	40001800 	.word	0x40001800

08007494 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d101      	bne.n	80074b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80074ac:	2302      	movs	r3, #2
 80074ae:	e03d      	b.n	800752c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	4313      	orrs	r3, r2
 80074e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	4313      	orrs	r3, r2
 800750a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	69db      	ldr	r3, [r3, #28]
 8007516:	4313      	orrs	r3, r2
 8007518:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3714      	adds	r7, #20
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e03f      	b.n	80075ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007550:	b2db      	uxtb	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d106      	bne.n	8007564 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7fc f90a 	bl	8003778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2224      	movs	r2, #36	; 0x24
 8007568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68da      	ldr	r2, [r3, #12]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800757a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f929 	bl	80077d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	691a      	ldr	r2, [r3, #16]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007590:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	695a      	ldr	r2, [r3, #20]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68da      	ldr	r2, [r3, #12]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2220      	movs	r2, #32
 80075bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2220      	movs	r2, #32
 80075c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b08a      	sub	sp, #40	; 0x28
 80075d6:	af02      	add	r7, sp, #8
 80075d8:	60f8      	str	r0, [r7, #12]
 80075da:	60b9      	str	r1, [r7, #8]
 80075dc:	603b      	str	r3, [r7, #0]
 80075de:	4613      	mov	r3, r2
 80075e0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80075e2:	2300      	movs	r3, #0
 80075e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b20      	cmp	r3, #32
 80075f0:	d17c      	bne.n	80076ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d002      	beq.n	80075fe <HAL_UART_Transmit+0x2c>
 80075f8:	88fb      	ldrh	r3, [r7, #6]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e075      	b.n	80076ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007608:	2b01      	cmp	r3, #1
 800760a:	d101      	bne.n	8007610 <HAL_UART_Transmit+0x3e>
 800760c:	2302      	movs	r3, #2
 800760e:	e06e      	b.n	80076ee <HAL_UART_Transmit+0x11c>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2221      	movs	r2, #33	; 0x21
 8007622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007626:	f7fc fa8b 	bl	8003b40 <HAL_GetTick>
 800762a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	88fa      	ldrh	r2, [r7, #6]
 8007630:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	88fa      	ldrh	r2, [r7, #6]
 8007636:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007640:	d108      	bne.n	8007654 <HAL_UART_Transmit+0x82>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d104      	bne.n	8007654 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800764a:	2300      	movs	r3, #0
 800764c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	61bb      	str	r3, [r7, #24]
 8007652:	e003      	b.n	800765c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007658:	2300      	movs	r3, #0
 800765a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007664:	e02a      	b.n	80076bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	2200      	movs	r2, #0
 800766e:	2180      	movs	r1, #128	; 0x80
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f000 f840 	bl	80076f6 <UART_WaitOnFlagUntilTimeout>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d001      	beq.n	8007680 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	e036      	b.n	80076ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10b      	bne.n	800769e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	461a      	mov	r2, r3
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007694:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	3302      	adds	r3, #2
 800769a:	61bb      	str	r3, [r7, #24]
 800769c:	e007      	b.n	80076ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	781a      	ldrb	r2, [r3, #0]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	3301      	adds	r3, #1
 80076ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	3b01      	subs	r3, #1
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1cf      	bne.n	8007666 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	2200      	movs	r2, #0
 80076ce:	2140      	movs	r1, #64	; 0x40
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f000 f810 	bl	80076f6 <UART_WaitOnFlagUntilTimeout>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d001      	beq.n	80076e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80076dc:	2303      	movs	r3, #3
 80076de:	e006      	b.n	80076ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2220      	movs	r2, #32
 80076e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80076e8:	2300      	movs	r3, #0
 80076ea:	e000      	b.n	80076ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80076ec:	2302      	movs	r3, #2
  }
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3720      	adds	r7, #32
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b090      	sub	sp, #64	; 0x40
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	60f8      	str	r0, [r7, #12]
 80076fe:	60b9      	str	r1, [r7, #8]
 8007700:	603b      	str	r3, [r7, #0]
 8007702:	4613      	mov	r3, r2
 8007704:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007706:	e050      	b.n	80077aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800770a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800770e:	d04c      	beq.n	80077aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007712:	2b00      	cmp	r3, #0
 8007714:	d007      	beq.n	8007726 <UART_WaitOnFlagUntilTimeout+0x30>
 8007716:	f7fc fa13 	bl	8003b40 <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007722:	429a      	cmp	r2, r3
 8007724:	d241      	bcs.n	80077aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	330c      	adds	r3, #12
 800772c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007730:	e853 3f00 	ldrex	r3, [r3]
 8007734:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007738:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800773c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	330c      	adds	r3, #12
 8007744:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007746:	637a      	str	r2, [r7, #52]	; 0x34
 8007748:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800774c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800774e:	e841 2300 	strex	r3, r2, [r1]
 8007752:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1e5      	bne.n	8007726 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	3314      	adds	r3, #20
 8007760:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	e853 3f00 	ldrex	r3, [r3]
 8007768:	613b      	str	r3, [r7, #16]
   return(result);
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	f023 0301 	bic.w	r3, r3, #1
 8007770:	63bb      	str	r3, [r7, #56]	; 0x38
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	3314      	adds	r3, #20
 8007778:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800777a:	623a      	str	r2, [r7, #32]
 800777c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777e:	69f9      	ldr	r1, [r7, #28]
 8007780:	6a3a      	ldr	r2, [r7, #32]
 8007782:	e841 2300 	strex	r3, r2, [r1]
 8007786:	61bb      	str	r3, [r7, #24]
   return(result);
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1e5      	bne.n	800775a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2220      	movs	r2, #32
 8007792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2220      	movs	r2, #32
 800779a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e00f      	b.n	80077ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	4013      	ands	r3, r2
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	bf0c      	ite	eq
 80077ba:	2301      	moveq	r3, #1
 80077bc:	2300      	movne	r3, #0
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	461a      	mov	r2, r3
 80077c2:	79fb      	ldrb	r3, [r7, #7]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d09f      	beq.n	8007708 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3740      	adds	r7, #64	; 0x40
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
	...

080077d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077d8:	b0c0      	sub	sp, #256	; 0x100
 80077da:	af00      	add	r7, sp, #0
 80077dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80077ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077f0:	68d9      	ldr	r1, [r3, #12]
 80077f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	ea40 0301 	orr.w	r3, r0, r1
 80077fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80077fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007802:	689a      	ldr	r2, [r3, #8]
 8007804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	431a      	orrs	r2, r3
 800780c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	431a      	orrs	r2, r3
 8007814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	4313      	orrs	r3, r2
 800781c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800782c:	f021 010c 	bic.w	r1, r1, #12
 8007830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800783a:	430b      	orrs	r3, r1
 800783c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800783e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800784a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800784e:	6999      	ldr	r1, [r3, #24]
 8007850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	ea40 0301 	orr.w	r3, r0, r1
 800785a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800785c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	4b8f      	ldr	r3, [pc, #572]	; (8007aa0 <UART_SetConfig+0x2cc>)
 8007864:	429a      	cmp	r2, r3
 8007866:	d005      	beq.n	8007874 <UART_SetConfig+0xa0>
 8007868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	4b8d      	ldr	r3, [pc, #564]	; (8007aa4 <UART_SetConfig+0x2d0>)
 8007870:	429a      	cmp	r2, r3
 8007872:	d104      	bne.n	800787e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007874:	f7fe fdde 	bl	8006434 <HAL_RCC_GetPCLK2Freq>
 8007878:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800787c:	e003      	b.n	8007886 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800787e:	f7fe fdc5 	bl	800640c <HAL_RCC_GetPCLK1Freq>
 8007882:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800788a:	69db      	ldr	r3, [r3, #28]
 800788c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007890:	f040 810c 	bne.w	8007aac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007898:	2200      	movs	r2, #0
 800789a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800789e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80078a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80078a6:	4622      	mov	r2, r4
 80078a8:	462b      	mov	r3, r5
 80078aa:	1891      	adds	r1, r2, r2
 80078ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80078ae:	415b      	adcs	r3, r3
 80078b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80078b6:	4621      	mov	r1, r4
 80078b8:	eb12 0801 	adds.w	r8, r2, r1
 80078bc:	4629      	mov	r1, r5
 80078be:	eb43 0901 	adc.w	r9, r3, r1
 80078c2:	f04f 0200 	mov.w	r2, #0
 80078c6:	f04f 0300 	mov.w	r3, #0
 80078ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80078ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80078d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80078d6:	4690      	mov	r8, r2
 80078d8:	4699      	mov	r9, r3
 80078da:	4623      	mov	r3, r4
 80078dc:	eb18 0303 	adds.w	r3, r8, r3
 80078e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80078e4:	462b      	mov	r3, r5
 80078e6:	eb49 0303 	adc.w	r3, r9, r3
 80078ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80078ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80078fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80078fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007902:	460b      	mov	r3, r1
 8007904:	18db      	adds	r3, r3, r3
 8007906:	653b      	str	r3, [r7, #80]	; 0x50
 8007908:	4613      	mov	r3, r2
 800790a:	eb42 0303 	adc.w	r3, r2, r3
 800790e:	657b      	str	r3, [r7, #84]	; 0x54
 8007910:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007914:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007918:	f7f9 f9b6 	bl	8000c88 <__aeabi_uldivmod>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	4b61      	ldr	r3, [pc, #388]	; (8007aa8 <UART_SetConfig+0x2d4>)
 8007922:	fba3 2302 	umull	r2, r3, r3, r2
 8007926:	095b      	lsrs	r3, r3, #5
 8007928:	011c      	lsls	r4, r3, #4
 800792a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800792e:	2200      	movs	r2, #0
 8007930:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007934:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007938:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800793c:	4642      	mov	r2, r8
 800793e:	464b      	mov	r3, r9
 8007940:	1891      	adds	r1, r2, r2
 8007942:	64b9      	str	r1, [r7, #72]	; 0x48
 8007944:	415b      	adcs	r3, r3
 8007946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007948:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800794c:	4641      	mov	r1, r8
 800794e:	eb12 0a01 	adds.w	sl, r2, r1
 8007952:	4649      	mov	r1, r9
 8007954:	eb43 0b01 	adc.w	fp, r3, r1
 8007958:	f04f 0200 	mov.w	r2, #0
 800795c:	f04f 0300 	mov.w	r3, #0
 8007960:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007964:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007968:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800796c:	4692      	mov	sl, r2
 800796e:	469b      	mov	fp, r3
 8007970:	4643      	mov	r3, r8
 8007972:	eb1a 0303 	adds.w	r3, sl, r3
 8007976:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800797a:	464b      	mov	r3, r9
 800797c:	eb4b 0303 	adc.w	r3, fp, r3
 8007980:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007990:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007994:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007998:	460b      	mov	r3, r1
 800799a:	18db      	adds	r3, r3, r3
 800799c:	643b      	str	r3, [r7, #64]	; 0x40
 800799e:	4613      	mov	r3, r2
 80079a0:	eb42 0303 	adc.w	r3, r2, r3
 80079a4:	647b      	str	r3, [r7, #68]	; 0x44
 80079a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80079aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80079ae:	f7f9 f96b 	bl	8000c88 <__aeabi_uldivmod>
 80079b2:	4602      	mov	r2, r0
 80079b4:	460b      	mov	r3, r1
 80079b6:	4611      	mov	r1, r2
 80079b8:	4b3b      	ldr	r3, [pc, #236]	; (8007aa8 <UART_SetConfig+0x2d4>)
 80079ba:	fba3 2301 	umull	r2, r3, r3, r1
 80079be:	095b      	lsrs	r3, r3, #5
 80079c0:	2264      	movs	r2, #100	; 0x64
 80079c2:	fb02 f303 	mul.w	r3, r2, r3
 80079c6:	1acb      	subs	r3, r1, r3
 80079c8:	00db      	lsls	r3, r3, #3
 80079ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80079ce:	4b36      	ldr	r3, [pc, #216]	; (8007aa8 <UART_SetConfig+0x2d4>)
 80079d0:	fba3 2302 	umull	r2, r3, r3, r2
 80079d4:	095b      	lsrs	r3, r3, #5
 80079d6:	005b      	lsls	r3, r3, #1
 80079d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80079dc:	441c      	add	r4, r3
 80079de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079e2:	2200      	movs	r2, #0
 80079e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80079ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80079f0:	4642      	mov	r2, r8
 80079f2:	464b      	mov	r3, r9
 80079f4:	1891      	adds	r1, r2, r2
 80079f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80079f8:	415b      	adcs	r3, r3
 80079fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a00:	4641      	mov	r1, r8
 8007a02:	1851      	adds	r1, r2, r1
 8007a04:	6339      	str	r1, [r7, #48]	; 0x30
 8007a06:	4649      	mov	r1, r9
 8007a08:	414b      	adcs	r3, r1
 8007a0a:	637b      	str	r3, [r7, #52]	; 0x34
 8007a0c:	f04f 0200 	mov.w	r2, #0
 8007a10:	f04f 0300 	mov.w	r3, #0
 8007a14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007a18:	4659      	mov	r1, fp
 8007a1a:	00cb      	lsls	r3, r1, #3
 8007a1c:	4651      	mov	r1, sl
 8007a1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a22:	4651      	mov	r1, sl
 8007a24:	00ca      	lsls	r2, r1, #3
 8007a26:	4610      	mov	r0, r2
 8007a28:	4619      	mov	r1, r3
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	4642      	mov	r2, r8
 8007a2e:	189b      	adds	r3, r3, r2
 8007a30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a34:	464b      	mov	r3, r9
 8007a36:	460a      	mov	r2, r1
 8007a38:	eb42 0303 	adc.w	r3, r2, r3
 8007a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007a4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007a50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007a54:	460b      	mov	r3, r1
 8007a56:	18db      	adds	r3, r3, r3
 8007a58:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	eb42 0303 	adc.w	r3, r2, r3
 8007a60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007a6a:	f7f9 f90d 	bl	8000c88 <__aeabi_uldivmod>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	460b      	mov	r3, r1
 8007a72:	4b0d      	ldr	r3, [pc, #52]	; (8007aa8 <UART_SetConfig+0x2d4>)
 8007a74:	fba3 1302 	umull	r1, r3, r3, r2
 8007a78:	095b      	lsrs	r3, r3, #5
 8007a7a:	2164      	movs	r1, #100	; 0x64
 8007a7c:	fb01 f303 	mul.w	r3, r1, r3
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	00db      	lsls	r3, r3, #3
 8007a84:	3332      	adds	r3, #50	; 0x32
 8007a86:	4a08      	ldr	r2, [pc, #32]	; (8007aa8 <UART_SetConfig+0x2d4>)
 8007a88:	fba2 2303 	umull	r2, r3, r2, r3
 8007a8c:	095b      	lsrs	r3, r3, #5
 8007a8e:	f003 0207 	and.w	r2, r3, #7
 8007a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4422      	add	r2, r4
 8007a9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007a9c:	e106      	b.n	8007cac <UART_SetConfig+0x4d8>
 8007a9e:	bf00      	nop
 8007aa0:	40011000 	.word	0x40011000
 8007aa4:	40011400 	.word	0x40011400
 8007aa8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007aac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007ab6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007aba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007abe:	4642      	mov	r2, r8
 8007ac0:	464b      	mov	r3, r9
 8007ac2:	1891      	adds	r1, r2, r2
 8007ac4:	6239      	str	r1, [r7, #32]
 8007ac6:	415b      	adcs	r3, r3
 8007ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8007aca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ace:	4641      	mov	r1, r8
 8007ad0:	1854      	adds	r4, r2, r1
 8007ad2:	4649      	mov	r1, r9
 8007ad4:	eb43 0501 	adc.w	r5, r3, r1
 8007ad8:	f04f 0200 	mov.w	r2, #0
 8007adc:	f04f 0300 	mov.w	r3, #0
 8007ae0:	00eb      	lsls	r3, r5, #3
 8007ae2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ae6:	00e2      	lsls	r2, r4, #3
 8007ae8:	4614      	mov	r4, r2
 8007aea:	461d      	mov	r5, r3
 8007aec:	4643      	mov	r3, r8
 8007aee:	18e3      	adds	r3, r4, r3
 8007af0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007af4:	464b      	mov	r3, r9
 8007af6:	eb45 0303 	adc.w	r3, r5, r3
 8007afa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007b0e:	f04f 0200 	mov.w	r2, #0
 8007b12:	f04f 0300 	mov.w	r3, #0
 8007b16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007b1a:	4629      	mov	r1, r5
 8007b1c:	008b      	lsls	r3, r1, #2
 8007b1e:	4621      	mov	r1, r4
 8007b20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b24:	4621      	mov	r1, r4
 8007b26:	008a      	lsls	r2, r1, #2
 8007b28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007b2c:	f7f9 f8ac 	bl	8000c88 <__aeabi_uldivmod>
 8007b30:	4602      	mov	r2, r0
 8007b32:	460b      	mov	r3, r1
 8007b34:	4b60      	ldr	r3, [pc, #384]	; (8007cb8 <UART_SetConfig+0x4e4>)
 8007b36:	fba3 2302 	umull	r2, r3, r3, r2
 8007b3a:	095b      	lsrs	r3, r3, #5
 8007b3c:	011c      	lsls	r4, r3, #4
 8007b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b42:	2200      	movs	r2, #0
 8007b44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007b4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007b50:	4642      	mov	r2, r8
 8007b52:	464b      	mov	r3, r9
 8007b54:	1891      	adds	r1, r2, r2
 8007b56:	61b9      	str	r1, [r7, #24]
 8007b58:	415b      	adcs	r3, r3
 8007b5a:	61fb      	str	r3, [r7, #28]
 8007b5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b60:	4641      	mov	r1, r8
 8007b62:	1851      	adds	r1, r2, r1
 8007b64:	6139      	str	r1, [r7, #16]
 8007b66:	4649      	mov	r1, r9
 8007b68:	414b      	adcs	r3, r1
 8007b6a:	617b      	str	r3, [r7, #20]
 8007b6c:	f04f 0200 	mov.w	r2, #0
 8007b70:	f04f 0300 	mov.w	r3, #0
 8007b74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007b78:	4659      	mov	r1, fp
 8007b7a:	00cb      	lsls	r3, r1, #3
 8007b7c:	4651      	mov	r1, sl
 8007b7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b82:	4651      	mov	r1, sl
 8007b84:	00ca      	lsls	r2, r1, #3
 8007b86:	4610      	mov	r0, r2
 8007b88:	4619      	mov	r1, r3
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	4642      	mov	r2, r8
 8007b8e:	189b      	adds	r3, r3, r2
 8007b90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b94:	464b      	mov	r3, r9
 8007b96:	460a      	mov	r2, r1
 8007b98:	eb42 0303 	adc.w	r3, r2, r3
 8007b9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	67bb      	str	r3, [r7, #120]	; 0x78
 8007baa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007bac:	f04f 0200 	mov.w	r2, #0
 8007bb0:	f04f 0300 	mov.w	r3, #0
 8007bb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007bb8:	4649      	mov	r1, r9
 8007bba:	008b      	lsls	r3, r1, #2
 8007bbc:	4641      	mov	r1, r8
 8007bbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bc2:	4641      	mov	r1, r8
 8007bc4:	008a      	lsls	r2, r1, #2
 8007bc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007bca:	f7f9 f85d 	bl	8000c88 <__aeabi_uldivmod>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	4611      	mov	r1, r2
 8007bd4:	4b38      	ldr	r3, [pc, #224]	; (8007cb8 <UART_SetConfig+0x4e4>)
 8007bd6:	fba3 2301 	umull	r2, r3, r3, r1
 8007bda:	095b      	lsrs	r3, r3, #5
 8007bdc:	2264      	movs	r2, #100	; 0x64
 8007bde:	fb02 f303 	mul.w	r3, r2, r3
 8007be2:	1acb      	subs	r3, r1, r3
 8007be4:	011b      	lsls	r3, r3, #4
 8007be6:	3332      	adds	r3, #50	; 0x32
 8007be8:	4a33      	ldr	r2, [pc, #204]	; (8007cb8 <UART_SetConfig+0x4e4>)
 8007bea:	fba2 2303 	umull	r2, r3, r2, r3
 8007bee:	095b      	lsrs	r3, r3, #5
 8007bf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bf4:	441c      	add	r4, r3
 8007bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	673b      	str	r3, [r7, #112]	; 0x70
 8007bfe:	677a      	str	r2, [r7, #116]	; 0x74
 8007c00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007c04:	4642      	mov	r2, r8
 8007c06:	464b      	mov	r3, r9
 8007c08:	1891      	adds	r1, r2, r2
 8007c0a:	60b9      	str	r1, [r7, #8]
 8007c0c:	415b      	adcs	r3, r3
 8007c0e:	60fb      	str	r3, [r7, #12]
 8007c10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c14:	4641      	mov	r1, r8
 8007c16:	1851      	adds	r1, r2, r1
 8007c18:	6039      	str	r1, [r7, #0]
 8007c1a:	4649      	mov	r1, r9
 8007c1c:	414b      	adcs	r3, r1
 8007c1e:	607b      	str	r3, [r7, #4]
 8007c20:	f04f 0200 	mov.w	r2, #0
 8007c24:	f04f 0300 	mov.w	r3, #0
 8007c28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007c2c:	4659      	mov	r1, fp
 8007c2e:	00cb      	lsls	r3, r1, #3
 8007c30:	4651      	mov	r1, sl
 8007c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c36:	4651      	mov	r1, sl
 8007c38:	00ca      	lsls	r2, r1, #3
 8007c3a:	4610      	mov	r0, r2
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	4603      	mov	r3, r0
 8007c40:	4642      	mov	r2, r8
 8007c42:	189b      	adds	r3, r3, r2
 8007c44:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c46:	464b      	mov	r3, r9
 8007c48:	460a      	mov	r2, r1
 8007c4a:	eb42 0303 	adc.w	r3, r2, r3
 8007c4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	663b      	str	r3, [r7, #96]	; 0x60
 8007c5a:	667a      	str	r2, [r7, #100]	; 0x64
 8007c5c:	f04f 0200 	mov.w	r2, #0
 8007c60:	f04f 0300 	mov.w	r3, #0
 8007c64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007c68:	4649      	mov	r1, r9
 8007c6a:	008b      	lsls	r3, r1, #2
 8007c6c:	4641      	mov	r1, r8
 8007c6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c72:	4641      	mov	r1, r8
 8007c74:	008a      	lsls	r2, r1, #2
 8007c76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007c7a:	f7f9 f805 	bl	8000c88 <__aeabi_uldivmod>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	460b      	mov	r3, r1
 8007c82:	4b0d      	ldr	r3, [pc, #52]	; (8007cb8 <UART_SetConfig+0x4e4>)
 8007c84:	fba3 1302 	umull	r1, r3, r3, r2
 8007c88:	095b      	lsrs	r3, r3, #5
 8007c8a:	2164      	movs	r1, #100	; 0x64
 8007c8c:	fb01 f303 	mul.w	r3, r1, r3
 8007c90:	1ad3      	subs	r3, r2, r3
 8007c92:	011b      	lsls	r3, r3, #4
 8007c94:	3332      	adds	r3, #50	; 0x32
 8007c96:	4a08      	ldr	r2, [pc, #32]	; (8007cb8 <UART_SetConfig+0x4e4>)
 8007c98:	fba2 2303 	umull	r2, r3, r2, r3
 8007c9c:	095b      	lsrs	r3, r3, #5
 8007c9e:	f003 020f 	and.w	r2, r3, #15
 8007ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4422      	add	r2, r4
 8007caa:	609a      	str	r2, [r3, #8]
}
 8007cac:	bf00      	nop
 8007cae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cb8:	51eb851f 	.word	0x51eb851f

08007cbc <arm_biquad_cascade_df1_init_f32>:
 8007cbc:	b510      	push	{r4, lr}
 8007cbe:	6082      	str	r2, [r0, #8]
 8007cc0:	6001      	str	r1, [r0, #0]
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	010a      	lsls	r2, r1, #4
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	2100      	movs	r1, #0
 8007cca:	f000 fe7a 	bl	80089c2 <memset>
 8007cce:	6060      	str	r0, [r4, #4]
 8007cd0:	bd10      	pop	{r4, pc}
 8007cd2:	bf00      	nop

08007cd4 <arm_biquad_cascade_df1_f32>:
 8007cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd8:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
 8007cdc:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8007ce0:	f003 0e03 	and.w	lr, r3, #3
 8007ce4:	ea4f 190c 	mov.w	r9, ip, lsl #4
 8007ce8:	6807      	ldr	r7, [r0, #0]
 8007cea:	eb02 0a09 	add.w	sl, r2, r9
 8007cee:	f10e 38ff 	add.w	r8, lr, #4294967295	; 0xffffffff
 8007cf2:	3614      	adds	r6, #20
 8007cf4:	3510      	adds	r5, #16
 8007cf6:	ed16 4a05 	vldr	s8, [r6, #-20]	; 0xffffffec
 8007cfa:	ed16 2a04 	vldr	s4, [r6, #-16]
 8007cfe:	ed56 2a03 	vldr	s5, [r6, #-12]
 8007d02:	ed16 3a02 	vldr	s6, [r6, #-8]
 8007d06:	ed56 3a01 	vldr	s7, [r6, #-4]
 8007d0a:	ed55 5a04 	vldr	s11, [r5, #-16]
 8007d0e:	ed15 5a03 	vldr	s10, [r5, #-12]
 8007d12:	ed15 7a02 	vldr	s14, [r5, #-8]
 8007d16:	ed55 7a01 	vldr	s15, [r5, #-4]
 8007d1a:	f1bc 0f00 	cmp.w	ip, #0
 8007d1e:	f000 80d4 	beq.w	8007eca <arm_biquad_cascade_df1_f32+0x1f6>
 8007d22:	f101 0010 	add.w	r0, r1, #16
 8007d26:	f102 0310 	add.w	r3, r2, #16
 8007d2a:	4664      	mov	r4, ip
 8007d2c:	ed10 6a04 	vldr	s12, [r0, #-16]
 8007d30:	ee62 4a25 	vmul.f32	s9, s4, s11
 8007d34:	ee64 6a06 	vmul.f32	s13, s8, s12
 8007d38:	ee22 5a85 	vmul.f32	s10, s5, s10
 8007d3c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8007d40:	ee63 4a07 	vmul.f32	s9, s6, s14
 8007d44:	ee76 6a85 	vadd.f32	s13, s13, s10
 8007d48:	ee23 5aa7 	vmul.f32	s10, s7, s15
 8007d4c:	ee76 7aa4 	vadd.f32	s15, s13, s9
 8007d50:	ee22 1a06 	vmul.f32	s2, s4, s12
 8007d54:	ee77 7a85 	vadd.f32	s15, s15, s10
 8007d58:	ee62 1aa5 	vmul.f32	s3, s5, s11
 8007d5c:	ed43 7a04 	vstr	s15, [r3, #-16]
 8007d60:	ed50 4a03 	vldr	s9, [r0, #-12]
 8007d64:	ee64 6a24 	vmul.f32	s13, s8, s9
 8007d68:	ee23 5a27 	vmul.f32	s10, s6, s15
 8007d6c:	ee76 6a81 	vadd.f32	s13, s13, s2
 8007d70:	ee63 5a87 	vmul.f32	s11, s7, s14
 8007d74:	ee36 7aa1 	vadd.f32	s14, s13, s3
 8007d78:	ee62 1a24 	vmul.f32	s3, s4, s9
 8007d7c:	ee37 7a05 	vadd.f32	s14, s14, s10
 8007d80:	ee22 6a86 	vmul.f32	s12, s5, s12
 8007d84:	ee37 7a25 	vadd.f32	s14, s14, s11
 8007d88:	ee63 7aa7 	vmul.f32	s15, s7, s15
 8007d8c:	ed03 7a03 	vstr	s14, [r3, #-12]
 8007d90:	ed10 5a02 	vldr	s10, [r0, #-8]
 8007d94:	ee64 5a05 	vmul.f32	s11, s8, s10
 8007d98:	ee63 6a07 	vmul.f32	s13, s6, s14
 8007d9c:	ee75 5aa1 	vadd.f32	s11, s11, s3
 8007da0:	ee62 1a05 	vmul.f32	s3, s4, s10
 8007da4:	ee75 5a86 	vadd.f32	s11, s11, s12
 8007da8:	ee62 4aa4 	vmul.f32	s9, s5, s9
 8007dac:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8007db0:	ee23 7a87 	vmul.f32	s14, s7, s14
 8007db4:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8007db8:	3c01      	subs	r4, #1
 8007dba:	ed43 7a02 	vstr	s15, [r3, #-8]
 8007dbe:	ed50 5a01 	vldr	s11, [r0, #-4]
 8007dc2:	ee24 6a25 	vmul.f32	s12, s8, s11
 8007dc6:	ee63 6a27 	vmul.f32	s13, s6, s15
 8007dca:	ee36 6a21 	vadd.f32	s12, s12, s3
 8007dce:	f100 0010 	add.w	r0, r0, #16
 8007dd2:	ee36 6a24 	vadd.f32	s12, s12, s9
 8007dd6:	f103 0310 	add.w	r3, r3, #16
 8007dda:	ee36 6a26 	vadd.f32	s12, s12, s13
 8007dde:	ee36 7a07 	vadd.f32	s14, s12, s14
 8007de2:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8007de6:	d1a1      	bne.n	8007d2c <arm_biquad_cascade_df1_f32+0x58>
 8007de8:	4449      	add	r1, r9
 8007dea:	4653      	mov	r3, sl
 8007dec:	f1be 0f00 	cmp.w	lr, #0
 8007df0:	d047      	beq.n	8007e82 <arm_biquad_cascade_df1_f32+0x1ae>
 8007df2:	edd1 4a00 	vldr	s9, [r1]
 8007df6:	ee22 6a25 	vmul.f32	s12, s4, s11
 8007dfa:	ee64 1a24 	vmul.f32	s3, s8, s9
 8007dfe:	ee62 6a85 	vmul.f32	s13, s5, s10
 8007e02:	ee36 5a21 	vadd.f32	s10, s12, s3
 8007e06:	ee23 6a07 	vmul.f32	s12, s6, s14
 8007e0a:	ee35 5a26 	vadd.f32	s10, s10, s13
 8007e0e:	ee63 7aa7 	vmul.f32	s15, s7, s15
 8007e12:	ee35 6a06 	vadd.f32	s12, s10, s12
 8007e16:	ee36 6a27 	vadd.f32	s12, s12, s15
 8007e1a:	ed83 6a00 	vstr	s12, [r3]
 8007e1e:	f1b8 0f00 	cmp.w	r8, #0
 8007e22:	d040      	beq.n	8007ea6 <arm_biquad_cascade_df1_f32+0x1d2>
 8007e24:	ed91 5a01 	vldr	s10, [r1, #4]
 8007e28:	ee62 7a24 	vmul.f32	s15, s4, s9
 8007e2c:	ee65 1a04 	vmul.f32	s3, s10, s8
 8007e30:	ee62 6aa5 	vmul.f32	s13, s5, s11
 8007e34:	ee77 5aa1 	vadd.f32	s11, s15, s3
 8007e38:	ee63 7a06 	vmul.f32	s15, s6, s12
 8007e3c:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8007e40:	ee23 7a87 	vmul.f32	s14, s7, s14
 8007e44:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8007e48:	f1b8 0f01 	cmp.w	r8, #1
 8007e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e50:	edc3 7a01 	vstr	s15, [r3, #4]
 8007e54:	d030      	beq.n	8007eb8 <arm_biquad_cascade_df1_f32+0x1e4>
 8007e56:	edd1 5a02 	vldr	s11, [r1, #8]
 8007e5a:	ee25 2a02 	vmul.f32	s4, s10, s4
 8007e5e:	ee64 6a25 	vmul.f32	s13, s8, s11
 8007e62:	ee62 2aa4 	vmul.f32	s5, s5, s9
 8007e66:	ee76 6a82 	vadd.f32	s13, s13, s4
 8007e6a:	ee27 3a83 	vmul.f32	s6, s15, s6
 8007e6e:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8007e72:	ee63 3a86 	vmul.f32	s7, s7, s12
 8007e76:	ee76 6a83 	vadd.f32	s13, s13, s6
 8007e7a:	ee36 7aa3 	vadd.f32	s14, s13, s7
 8007e7e:	ed83 7a02 	vstr	s14, [r3, #8]
 8007e82:	3f01      	subs	r7, #1
 8007e84:	ed45 5a04 	vstr	s11, [r5, #-16]
 8007e88:	ed05 5a03 	vstr	s10, [r5, #-12]
 8007e8c:	ed05 7a02 	vstr	s14, [r5, #-8]
 8007e90:	ed45 7a01 	vstr	s15, [r5, #-4]
 8007e94:	f106 0614 	add.w	r6, r6, #20
 8007e98:	f105 0510 	add.w	r5, r5, #16
 8007e9c:	4611      	mov	r1, r2
 8007e9e:	f47f af2a 	bne.w	8007cf6 <arm_biquad_cascade_df1_f32+0x22>
 8007ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ea6:	eef0 7a47 	vmov.f32	s15, s14
 8007eaa:	eeb0 5a65 	vmov.f32	s10, s11
 8007eae:	eeb0 7a46 	vmov.f32	s14, s12
 8007eb2:	eef0 5a64 	vmov.f32	s11, s9
 8007eb6:	e7e4      	b.n	8007e82 <arm_biquad_cascade_df1_f32+0x1ae>
 8007eb8:	eeb0 7a67 	vmov.f32	s14, s15
 8007ebc:	eef0 5a45 	vmov.f32	s11, s10
 8007ec0:	eef0 7a46 	vmov.f32	s15, s12
 8007ec4:	eeb0 5a64 	vmov.f32	s10, s9
 8007ec8:	e7db      	b.n	8007e82 <arm_biquad_cascade_df1_f32+0x1ae>
 8007eca:	4613      	mov	r3, r2
 8007ecc:	e78e      	b.n	8007dec <arm_biquad_cascade_df1_f32+0x118>
 8007ece:	bf00      	nop

08007ed0 <__cvt>:
 8007ed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ed4:	ec55 4b10 	vmov	r4, r5, d0
 8007ed8:	2d00      	cmp	r5, #0
 8007eda:	460e      	mov	r6, r1
 8007edc:	4619      	mov	r1, r3
 8007ede:	462b      	mov	r3, r5
 8007ee0:	bfbb      	ittet	lt
 8007ee2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007ee6:	461d      	movlt	r5, r3
 8007ee8:	2300      	movge	r3, #0
 8007eea:	232d      	movlt	r3, #45	; 0x2d
 8007eec:	700b      	strb	r3, [r1, #0]
 8007eee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ef0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007ef4:	4691      	mov	r9, r2
 8007ef6:	f023 0820 	bic.w	r8, r3, #32
 8007efa:	bfbc      	itt	lt
 8007efc:	4622      	movlt	r2, r4
 8007efe:	4614      	movlt	r4, r2
 8007f00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f04:	d005      	beq.n	8007f12 <__cvt+0x42>
 8007f06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007f0a:	d100      	bne.n	8007f0e <__cvt+0x3e>
 8007f0c:	3601      	adds	r6, #1
 8007f0e:	2102      	movs	r1, #2
 8007f10:	e000      	b.n	8007f14 <__cvt+0x44>
 8007f12:	2103      	movs	r1, #3
 8007f14:	ab03      	add	r3, sp, #12
 8007f16:	9301      	str	r3, [sp, #4]
 8007f18:	ab02      	add	r3, sp, #8
 8007f1a:	9300      	str	r3, [sp, #0]
 8007f1c:	ec45 4b10 	vmov	d0, r4, r5
 8007f20:	4653      	mov	r3, sl
 8007f22:	4632      	mov	r2, r6
 8007f24:	f000 fe64 	bl	8008bf0 <_dtoa_r>
 8007f28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007f2c:	4607      	mov	r7, r0
 8007f2e:	d102      	bne.n	8007f36 <__cvt+0x66>
 8007f30:	f019 0f01 	tst.w	r9, #1
 8007f34:	d022      	beq.n	8007f7c <__cvt+0xac>
 8007f36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f3a:	eb07 0906 	add.w	r9, r7, r6
 8007f3e:	d110      	bne.n	8007f62 <__cvt+0x92>
 8007f40:	783b      	ldrb	r3, [r7, #0]
 8007f42:	2b30      	cmp	r3, #48	; 0x30
 8007f44:	d10a      	bne.n	8007f5c <__cvt+0x8c>
 8007f46:	2200      	movs	r2, #0
 8007f48:	2300      	movs	r3, #0
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	f7f8 fddb 	bl	8000b08 <__aeabi_dcmpeq>
 8007f52:	b918      	cbnz	r0, 8007f5c <__cvt+0x8c>
 8007f54:	f1c6 0601 	rsb	r6, r6, #1
 8007f58:	f8ca 6000 	str.w	r6, [sl]
 8007f5c:	f8da 3000 	ldr.w	r3, [sl]
 8007f60:	4499      	add	r9, r3
 8007f62:	2200      	movs	r2, #0
 8007f64:	2300      	movs	r3, #0
 8007f66:	4620      	mov	r0, r4
 8007f68:	4629      	mov	r1, r5
 8007f6a:	f7f8 fdcd 	bl	8000b08 <__aeabi_dcmpeq>
 8007f6e:	b108      	cbz	r0, 8007f74 <__cvt+0xa4>
 8007f70:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f74:	2230      	movs	r2, #48	; 0x30
 8007f76:	9b03      	ldr	r3, [sp, #12]
 8007f78:	454b      	cmp	r3, r9
 8007f7a:	d307      	bcc.n	8007f8c <__cvt+0xbc>
 8007f7c:	9b03      	ldr	r3, [sp, #12]
 8007f7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f80:	1bdb      	subs	r3, r3, r7
 8007f82:	4638      	mov	r0, r7
 8007f84:	6013      	str	r3, [r2, #0]
 8007f86:	b004      	add	sp, #16
 8007f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f8c:	1c59      	adds	r1, r3, #1
 8007f8e:	9103      	str	r1, [sp, #12]
 8007f90:	701a      	strb	r2, [r3, #0]
 8007f92:	e7f0      	b.n	8007f76 <__cvt+0xa6>

08007f94 <__exponent>:
 8007f94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f96:	4603      	mov	r3, r0
 8007f98:	2900      	cmp	r1, #0
 8007f9a:	bfb8      	it	lt
 8007f9c:	4249      	neglt	r1, r1
 8007f9e:	f803 2b02 	strb.w	r2, [r3], #2
 8007fa2:	bfb4      	ite	lt
 8007fa4:	222d      	movlt	r2, #45	; 0x2d
 8007fa6:	222b      	movge	r2, #43	; 0x2b
 8007fa8:	2909      	cmp	r1, #9
 8007faa:	7042      	strb	r2, [r0, #1]
 8007fac:	dd2a      	ble.n	8008004 <__exponent+0x70>
 8007fae:	f10d 0207 	add.w	r2, sp, #7
 8007fb2:	4617      	mov	r7, r2
 8007fb4:	260a      	movs	r6, #10
 8007fb6:	4694      	mov	ip, r2
 8007fb8:	fb91 f5f6 	sdiv	r5, r1, r6
 8007fbc:	fb06 1415 	mls	r4, r6, r5, r1
 8007fc0:	3430      	adds	r4, #48	; 0x30
 8007fc2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007fc6:	460c      	mov	r4, r1
 8007fc8:	2c63      	cmp	r4, #99	; 0x63
 8007fca:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8007fce:	4629      	mov	r1, r5
 8007fd0:	dcf1      	bgt.n	8007fb6 <__exponent+0x22>
 8007fd2:	3130      	adds	r1, #48	; 0x30
 8007fd4:	f1ac 0402 	sub.w	r4, ip, #2
 8007fd8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007fdc:	1c41      	adds	r1, r0, #1
 8007fde:	4622      	mov	r2, r4
 8007fe0:	42ba      	cmp	r2, r7
 8007fe2:	d30a      	bcc.n	8007ffa <__exponent+0x66>
 8007fe4:	f10d 0209 	add.w	r2, sp, #9
 8007fe8:	eba2 020c 	sub.w	r2, r2, ip
 8007fec:	42bc      	cmp	r4, r7
 8007fee:	bf88      	it	hi
 8007ff0:	2200      	movhi	r2, #0
 8007ff2:	4413      	add	r3, r2
 8007ff4:	1a18      	subs	r0, r3, r0
 8007ff6:	b003      	add	sp, #12
 8007ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ffa:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007ffe:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008002:	e7ed      	b.n	8007fe0 <__exponent+0x4c>
 8008004:	2330      	movs	r3, #48	; 0x30
 8008006:	3130      	adds	r1, #48	; 0x30
 8008008:	7083      	strb	r3, [r0, #2]
 800800a:	70c1      	strb	r1, [r0, #3]
 800800c:	1d03      	adds	r3, r0, #4
 800800e:	e7f1      	b.n	8007ff4 <__exponent+0x60>

08008010 <_printf_float>:
 8008010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008014:	ed2d 8b02 	vpush	{d8}
 8008018:	b08d      	sub	sp, #52	; 0x34
 800801a:	460c      	mov	r4, r1
 800801c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008020:	4616      	mov	r6, r2
 8008022:	461f      	mov	r7, r3
 8008024:	4605      	mov	r5, r0
 8008026:	f000 fcd5 	bl	80089d4 <_localeconv_r>
 800802a:	f8d0 a000 	ldr.w	sl, [r0]
 800802e:	4650      	mov	r0, sl
 8008030:	f7f8 f93e 	bl	80002b0 <strlen>
 8008034:	2300      	movs	r3, #0
 8008036:	930a      	str	r3, [sp, #40]	; 0x28
 8008038:	6823      	ldr	r3, [r4, #0]
 800803a:	9305      	str	r3, [sp, #20]
 800803c:	f8d8 3000 	ldr.w	r3, [r8]
 8008040:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008044:	3307      	adds	r3, #7
 8008046:	f023 0307 	bic.w	r3, r3, #7
 800804a:	f103 0208 	add.w	r2, r3, #8
 800804e:	f8c8 2000 	str.w	r2, [r8]
 8008052:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008056:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800805a:	9307      	str	r3, [sp, #28]
 800805c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008060:	ee08 0a10 	vmov	s16, r0
 8008064:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008068:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800806c:	4b9e      	ldr	r3, [pc, #632]	; (80082e8 <_printf_float+0x2d8>)
 800806e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008072:	f7f8 fd7b 	bl	8000b6c <__aeabi_dcmpun>
 8008076:	bb88      	cbnz	r0, 80080dc <_printf_float+0xcc>
 8008078:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800807c:	4b9a      	ldr	r3, [pc, #616]	; (80082e8 <_printf_float+0x2d8>)
 800807e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008082:	f7f8 fd55 	bl	8000b30 <__aeabi_dcmple>
 8008086:	bb48      	cbnz	r0, 80080dc <_printf_float+0xcc>
 8008088:	2200      	movs	r2, #0
 800808a:	2300      	movs	r3, #0
 800808c:	4640      	mov	r0, r8
 800808e:	4649      	mov	r1, r9
 8008090:	f7f8 fd44 	bl	8000b1c <__aeabi_dcmplt>
 8008094:	b110      	cbz	r0, 800809c <_printf_float+0x8c>
 8008096:	232d      	movs	r3, #45	; 0x2d
 8008098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800809c:	4a93      	ldr	r2, [pc, #588]	; (80082ec <_printf_float+0x2dc>)
 800809e:	4b94      	ldr	r3, [pc, #592]	; (80082f0 <_printf_float+0x2e0>)
 80080a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80080a4:	bf94      	ite	ls
 80080a6:	4690      	movls	r8, r2
 80080a8:	4698      	movhi	r8, r3
 80080aa:	2303      	movs	r3, #3
 80080ac:	6123      	str	r3, [r4, #16]
 80080ae:	9b05      	ldr	r3, [sp, #20]
 80080b0:	f023 0304 	bic.w	r3, r3, #4
 80080b4:	6023      	str	r3, [r4, #0]
 80080b6:	f04f 0900 	mov.w	r9, #0
 80080ba:	9700      	str	r7, [sp, #0]
 80080bc:	4633      	mov	r3, r6
 80080be:	aa0b      	add	r2, sp, #44	; 0x2c
 80080c0:	4621      	mov	r1, r4
 80080c2:	4628      	mov	r0, r5
 80080c4:	f000 f9da 	bl	800847c <_printf_common>
 80080c8:	3001      	adds	r0, #1
 80080ca:	f040 8090 	bne.w	80081ee <_printf_float+0x1de>
 80080ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080d2:	b00d      	add	sp, #52	; 0x34
 80080d4:	ecbd 8b02 	vpop	{d8}
 80080d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080dc:	4642      	mov	r2, r8
 80080de:	464b      	mov	r3, r9
 80080e0:	4640      	mov	r0, r8
 80080e2:	4649      	mov	r1, r9
 80080e4:	f7f8 fd42 	bl	8000b6c <__aeabi_dcmpun>
 80080e8:	b140      	cbz	r0, 80080fc <_printf_float+0xec>
 80080ea:	464b      	mov	r3, r9
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	bfbc      	itt	lt
 80080f0:	232d      	movlt	r3, #45	; 0x2d
 80080f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80080f6:	4a7f      	ldr	r2, [pc, #508]	; (80082f4 <_printf_float+0x2e4>)
 80080f8:	4b7f      	ldr	r3, [pc, #508]	; (80082f8 <_printf_float+0x2e8>)
 80080fa:	e7d1      	b.n	80080a0 <_printf_float+0x90>
 80080fc:	6863      	ldr	r3, [r4, #4]
 80080fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008102:	9206      	str	r2, [sp, #24]
 8008104:	1c5a      	adds	r2, r3, #1
 8008106:	d13f      	bne.n	8008188 <_printf_float+0x178>
 8008108:	2306      	movs	r3, #6
 800810a:	6063      	str	r3, [r4, #4]
 800810c:	9b05      	ldr	r3, [sp, #20]
 800810e:	6861      	ldr	r1, [r4, #4]
 8008110:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008114:	2300      	movs	r3, #0
 8008116:	9303      	str	r3, [sp, #12]
 8008118:	ab0a      	add	r3, sp, #40	; 0x28
 800811a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800811e:	ab09      	add	r3, sp, #36	; 0x24
 8008120:	ec49 8b10 	vmov	d0, r8, r9
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	6022      	str	r2, [r4, #0]
 8008128:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800812c:	4628      	mov	r0, r5
 800812e:	f7ff fecf 	bl	8007ed0 <__cvt>
 8008132:	9b06      	ldr	r3, [sp, #24]
 8008134:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008136:	2b47      	cmp	r3, #71	; 0x47
 8008138:	4680      	mov	r8, r0
 800813a:	d108      	bne.n	800814e <_printf_float+0x13e>
 800813c:	1cc8      	adds	r0, r1, #3
 800813e:	db02      	blt.n	8008146 <_printf_float+0x136>
 8008140:	6863      	ldr	r3, [r4, #4]
 8008142:	4299      	cmp	r1, r3
 8008144:	dd41      	ble.n	80081ca <_printf_float+0x1ba>
 8008146:	f1ab 0302 	sub.w	r3, fp, #2
 800814a:	fa5f fb83 	uxtb.w	fp, r3
 800814e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008152:	d820      	bhi.n	8008196 <_printf_float+0x186>
 8008154:	3901      	subs	r1, #1
 8008156:	465a      	mov	r2, fp
 8008158:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800815c:	9109      	str	r1, [sp, #36]	; 0x24
 800815e:	f7ff ff19 	bl	8007f94 <__exponent>
 8008162:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008164:	1813      	adds	r3, r2, r0
 8008166:	2a01      	cmp	r2, #1
 8008168:	4681      	mov	r9, r0
 800816a:	6123      	str	r3, [r4, #16]
 800816c:	dc02      	bgt.n	8008174 <_printf_float+0x164>
 800816e:	6822      	ldr	r2, [r4, #0]
 8008170:	07d2      	lsls	r2, r2, #31
 8008172:	d501      	bpl.n	8008178 <_printf_float+0x168>
 8008174:	3301      	adds	r3, #1
 8008176:	6123      	str	r3, [r4, #16]
 8008178:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800817c:	2b00      	cmp	r3, #0
 800817e:	d09c      	beq.n	80080ba <_printf_float+0xaa>
 8008180:	232d      	movs	r3, #45	; 0x2d
 8008182:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008186:	e798      	b.n	80080ba <_printf_float+0xaa>
 8008188:	9a06      	ldr	r2, [sp, #24]
 800818a:	2a47      	cmp	r2, #71	; 0x47
 800818c:	d1be      	bne.n	800810c <_printf_float+0xfc>
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1bc      	bne.n	800810c <_printf_float+0xfc>
 8008192:	2301      	movs	r3, #1
 8008194:	e7b9      	b.n	800810a <_printf_float+0xfa>
 8008196:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800819a:	d118      	bne.n	80081ce <_printf_float+0x1be>
 800819c:	2900      	cmp	r1, #0
 800819e:	6863      	ldr	r3, [r4, #4]
 80081a0:	dd0b      	ble.n	80081ba <_printf_float+0x1aa>
 80081a2:	6121      	str	r1, [r4, #16]
 80081a4:	b913      	cbnz	r3, 80081ac <_printf_float+0x19c>
 80081a6:	6822      	ldr	r2, [r4, #0]
 80081a8:	07d0      	lsls	r0, r2, #31
 80081aa:	d502      	bpl.n	80081b2 <_printf_float+0x1a2>
 80081ac:	3301      	adds	r3, #1
 80081ae:	440b      	add	r3, r1
 80081b0:	6123      	str	r3, [r4, #16]
 80081b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80081b4:	f04f 0900 	mov.w	r9, #0
 80081b8:	e7de      	b.n	8008178 <_printf_float+0x168>
 80081ba:	b913      	cbnz	r3, 80081c2 <_printf_float+0x1b2>
 80081bc:	6822      	ldr	r2, [r4, #0]
 80081be:	07d2      	lsls	r2, r2, #31
 80081c0:	d501      	bpl.n	80081c6 <_printf_float+0x1b6>
 80081c2:	3302      	adds	r3, #2
 80081c4:	e7f4      	b.n	80081b0 <_printf_float+0x1a0>
 80081c6:	2301      	movs	r3, #1
 80081c8:	e7f2      	b.n	80081b0 <_printf_float+0x1a0>
 80081ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80081ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081d0:	4299      	cmp	r1, r3
 80081d2:	db05      	blt.n	80081e0 <_printf_float+0x1d0>
 80081d4:	6823      	ldr	r3, [r4, #0]
 80081d6:	6121      	str	r1, [r4, #16]
 80081d8:	07d8      	lsls	r0, r3, #31
 80081da:	d5ea      	bpl.n	80081b2 <_printf_float+0x1a2>
 80081dc:	1c4b      	adds	r3, r1, #1
 80081de:	e7e7      	b.n	80081b0 <_printf_float+0x1a0>
 80081e0:	2900      	cmp	r1, #0
 80081e2:	bfd4      	ite	le
 80081e4:	f1c1 0202 	rsble	r2, r1, #2
 80081e8:	2201      	movgt	r2, #1
 80081ea:	4413      	add	r3, r2
 80081ec:	e7e0      	b.n	80081b0 <_printf_float+0x1a0>
 80081ee:	6823      	ldr	r3, [r4, #0]
 80081f0:	055a      	lsls	r2, r3, #21
 80081f2:	d407      	bmi.n	8008204 <_printf_float+0x1f4>
 80081f4:	6923      	ldr	r3, [r4, #16]
 80081f6:	4642      	mov	r2, r8
 80081f8:	4631      	mov	r1, r6
 80081fa:	4628      	mov	r0, r5
 80081fc:	47b8      	blx	r7
 80081fe:	3001      	adds	r0, #1
 8008200:	d12c      	bne.n	800825c <_printf_float+0x24c>
 8008202:	e764      	b.n	80080ce <_printf_float+0xbe>
 8008204:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008208:	f240 80e0 	bls.w	80083cc <_printf_float+0x3bc>
 800820c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008210:	2200      	movs	r2, #0
 8008212:	2300      	movs	r3, #0
 8008214:	f7f8 fc78 	bl	8000b08 <__aeabi_dcmpeq>
 8008218:	2800      	cmp	r0, #0
 800821a:	d034      	beq.n	8008286 <_printf_float+0x276>
 800821c:	4a37      	ldr	r2, [pc, #220]	; (80082fc <_printf_float+0x2ec>)
 800821e:	2301      	movs	r3, #1
 8008220:	4631      	mov	r1, r6
 8008222:	4628      	mov	r0, r5
 8008224:	47b8      	blx	r7
 8008226:	3001      	adds	r0, #1
 8008228:	f43f af51 	beq.w	80080ce <_printf_float+0xbe>
 800822c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008230:	429a      	cmp	r2, r3
 8008232:	db02      	blt.n	800823a <_printf_float+0x22a>
 8008234:	6823      	ldr	r3, [r4, #0]
 8008236:	07d8      	lsls	r0, r3, #31
 8008238:	d510      	bpl.n	800825c <_printf_float+0x24c>
 800823a:	ee18 3a10 	vmov	r3, s16
 800823e:	4652      	mov	r2, sl
 8008240:	4631      	mov	r1, r6
 8008242:	4628      	mov	r0, r5
 8008244:	47b8      	blx	r7
 8008246:	3001      	adds	r0, #1
 8008248:	f43f af41 	beq.w	80080ce <_printf_float+0xbe>
 800824c:	f04f 0800 	mov.w	r8, #0
 8008250:	f104 091a 	add.w	r9, r4, #26
 8008254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008256:	3b01      	subs	r3, #1
 8008258:	4543      	cmp	r3, r8
 800825a:	dc09      	bgt.n	8008270 <_printf_float+0x260>
 800825c:	6823      	ldr	r3, [r4, #0]
 800825e:	079b      	lsls	r3, r3, #30
 8008260:	f100 8107 	bmi.w	8008472 <_printf_float+0x462>
 8008264:	68e0      	ldr	r0, [r4, #12]
 8008266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008268:	4298      	cmp	r0, r3
 800826a:	bfb8      	it	lt
 800826c:	4618      	movlt	r0, r3
 800826e:	e730      	b.n	80080d2 <_printf_float+0xc2>
 8008270:	2301      	movs	r3, #1
 8008272:	464a      	mov	r2, r9
 8008274:	4631      	mov	r1, r6
 8008276:	4628      	mov	r0, r5
 8008278:	47b8      	blx	r7
 800827a:	3001      	adds	r0, #1
 800827c:	f43f af27 	beq.w	80080ce <_printf_float+0xbe>
 8008280:	f108 0801 	add.w	r8, r8, #1
 8008284:	e7e6      	b.n	8008254 <_printf_float+0x244>
 8008286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008288:	2b00      	cmp	r3, #0
 800828a:	dc39      	bgt.n	8008300 <_printf_float+0x2f0>
 800828c:	4a1b      	ldr	r2, [pc, #108]	; (80082fc <_printf_float+0x2ec>)
 800828e:	2301      	movs	r3, #1
 8008290:	4631      	mov	r1, r6
 8008292:	4628      	mov	r0, r5
 8008294:	47b8      	blx	r7
 8008296:	3001      	adds	r0, #1
 8008298:	f43f af19 	beq.w	80080ce <_printf_float+0xbe>
 800829c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80082a0:	4313      	orrs	r3, r2
 80082a2:	d102      	bne.n	80082aa <_printf_float+0x29a>
 80082a4:	6823      	ldr	r3, [r4, #0]
 80082a6:	07d9      	lsls	r1, r3, #31
 80082a8:	d5d8      	bpl.n	800825c <_printf_float+0x24c>
 80082aa:	ee18 3a10 	vmov	r3, s16
 80082ae:	4652      	mov	r2, sl
 80082b0:	4631      	mov	r1, r6
 80082b2:	4628      	mov	r0, r5
 80082b4:	47b8      	blx	r7
 80082b6:	3001      	adds	r0, #1
 80082b8:	f43f af09 	beq.w	80080ce <_printf_float+0xbe>
 80082bc:	f04f 0900 	mov.w	r9, #0
 80082c0:	f104 0a1a 	add.w	sl, r4, #26
 80082c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082c6:	425b      	negs	r3, r3
 80082c8:	454b      	cmp	r3, r9
 80082ca:	dc01      	bgt.n	80082d0 <_printf_float+0x2c0>
 80082cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082ce:	e792      	b.n	80081f6 <_printf_float+0x1e6>
 80082d0:	2301      	movs	r3, #1
 80082d2:	4652      	mov	r2, sl
 80082d4:	4631      	mov	r1, r6
 80082d6:	4628      	mov	r0, r5
 80082d8:	47b8      	blx	r7
 80082da:	3001      	adds	r0, #1
 80082dc:	f43f aef7 	beq.w	80080ce <_printf_float+0xbe>
 80082e0:	f109 0901 	add.w	r9, r9, #1
 80082e4:	e7ee      	b.n	80082c4 <_printf_float+0x2b4>
 80082e6:	bf00      	nop
 80082e8:	7fefffff 	.word	0x7fefffff
 80082ec:	0800af10 	.word	0x0800af10
 80082f0:	0800af14 	.word	0x0800af14
 80082f4:	0800af18 	.word	0x0800af18
 80082f8:	0800af1c 	.word	0x0800af1c
 80082fc:	0800af20 	.word	0x0800af20
 8008300:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008302:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008304:	429a      	cmp	r2, r3
 8008306:	bfa8      	it	ge
 8008308:	461a      	movge	r2, r3
 800830a:	2a00      	cmp	r2, #0
 800830c:	4691      	mov	r9, r2
 800830e:	dc37      	bgt.n	8008380 <_printf_float+0x370>
 8008310:	f04f 0b00 	mov.w	fp, #0
 8008314:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008318:	f104 021a 	add.w	r2, r4, #26
 800831c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800831e:	9305      	str	r3, [sp, #20]
 8008320:	eba3 0309 	sub.w	r3, r3, r9
 8008324:	455b      	cmp	r3, fp
 8008326:	dc33      	bgt.n	8008390 <_printf_float+0x380>
 8008328:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800832c:	429a      	cmp	r2, r3
 800832e:	db3b      	blt.n	80083a8 <_printf_float+0x398>
 8008330:	6823      	ldr	r3, [r4, #0]
 8008332:	07da      	lsls	r2, r3, #31
 8008334:	d438      	bmi.n	80083a8 <_printf_float+0x398>
 8008336:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800833a:	eba2 0903 	sub.w	r9, r2, r3
 800833e:	9b05      	ldr	r3, [sp, #20]
 8008340:	1ad2      	subs	r2, r2, r3
 8008342:	4591      	cmp	r9, r2
 8008344:	bfa8      	it	ge
 8008346:	4691      	movge	r9, r2
 8008348:	f1b9 0f00 	cmp.w	r9, #0
 800834c:	dc35      	bgt.n	80083ba <_printf_float+0x3aa>
 800834e:	f04f 0800 	mov.w	r8, #0
 8008352:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008356:	f104 0a1a 	add.w	sl, r4, #26
 800835a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800835e:	1a9b      	subs	r3, r3, r2
 8008360:	eba3 0309 	sub.w	r3, r3, r9
 8008364:	4543      	cmp	r3, r8
 8008366:	f77f af79 	ble.w	800825c <_printf_float+0x24c>
 800836a:	2301      	movs	r3, #1
 800836c:	4652      	mov	r2, sl
 800836e:	4631      	mov	r1, r6
 8008370:	4628      	mov	r0, r5
 8008372:	47b8      	blx	r7
 8008374:	3001      	adds	r0, #1
 8008376:	f43f aeaa 	beq.w	80080ce <_printf_float+0xbe>
 800837a:	f108 0801 	add.w	r8, r8, #1
 800837e:	e7ec      	b.n	800835a <_printf_float+0x34a>
 8008380:	4613      	mov	r3, r2
 8008382:	4631      	mov	r1, r6
 8008384:	4642      	mov	r2, r8
 8008386:	4628      	mov	r0, r5
 8008388:	47b8      	blx	r7
 800838a:	3001      	adds	r0, #1
 800838c:	d1c0      	bne.n	8008310 <_printf_float+0x300>
 800838e:	e69e      	b.n	80080ce <_printf_float+0xbe>
 8008390:	2301      	movs	r3, #1
 8008392:	4631      	mov	r1, r6
 8008394:	4628      	mov	r0, r5
 8008396:	9205      	str	r2, [sp, #20]
 8008398:	47b8      	blx	r7
 800839a:	3001      	adds	r0, #1
 800839c:	f43f ae97 	beq.w	80080ce <_printf_float+0xbe>
 80083a0:	9a05      	ldr	r2, [sp, #20]
 80083a2:	f10b 0b01 	add.w	fp, fp, #1
 80083a6:	e7b9      	b.n	800831c <_printf_float+0x30c>
 80083a8:	ee18 3a10 	vmov	r3, s16
 80083ac:	4652      	mov	r2, sl
 80083ae:	4631      	mov	r1, r6
 80083b0:	4628      	mov	r0, r5
 80083b2:	47b8      	blx	r7
 80083b4:	3001      	adds	r0, #1
 80083b6:	d1be      	bne.n	8008336 <_printf_float+0x326>
 80083b8:	e689      	b.n	80080ce <_printf_float+0xbe>
 80083ba:	9a05      	ldr	r2, [sp, #20]
 80083bc:	464b      	mov	r3, r9
 80083be:	4442      	add	r2, r8
 80083c0:	4631      	mov	r1, r6
 80083c2:	4628      	mov	r0, r5
 80083c4:	47b8      	blx	r7
 80083c6:	3001      	adds	r0, #1
 80083c8:	d1c1      	bne.n	800834e <_printf_float+0x33e>
 80083ca:	e680      	b.n	80080ce <_printf_float+0xbe>
 80083cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083ce:	2a01      	cmp	r2, #1
 80083d0:	dc01      	bgt.n	80083d6 <_printf_float+0x3c6>
 80083d2:	07db      	lsls	r3, r3, #31
 80083d4:	d53a      	bpl.n	800844c <_printf_float+0x43c>
 80083d6:	2301      	movs	r3, #1
 80083d8:	4642      	mov	r2, r8
 80083da:	4631      	mov	r1, r6
 80083dc:	4628      	mov	r0, r5
 80083de:	47b8      	blx	r7
 80083e0:	3001      	adds	r0, #1
 80083e2:	f43f ae74 	beq.w	80080ce <_printf_float+0xbe>
 80083e6:	ee18 3a10 	vmov	r3, s16
 80083ea:	4652      	mov	r2, sl
 80083ec:	4631      	mov	r1, r6
 80083ee:	4628      	mov	r0, r5
 80083f0:	47b8      	blx	r7
 80083f2:	3001      	adds	r0, #1
 80083f4:	f43f ae6b 	beq.w	80080ce <_printf_float+0xbe>
 80083f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083fc:	2200      	movs	r2, #0
 80083fe:	2300      	movs	r3, #0
 8008400:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008404:	f7f8 fb80 	bl	8000b08 <__aeabi_dcmpeq>
 8008408:	b9d8      	cbnz	r0, 8008442 <_printf_float+0x432>
 800840a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800840e:	f108 0201 	add.w	r2, r8, #1
 8008412:	4631      	mov	r1, r6
 8008414:	4628      	mov	r0, r5
 8008416:	47b8      	blx	r7
 8008418:	3001      	adds	r0, #1
 800841a:	d10e      	bne.n	800843a <_printf_float+0x42a>
 800841c:	e657      	b.n	80080ce <_printf_float+0xbe>
 800841e:	2301      	movs	r3, #1
 8008420:	4652      	mov	r2, sl
 8008422:	4631      	mov	r1, r6
 8008424:	4628      	mov	r0, r5
 8008426:	47b8      	blx	r7
 8008428:	3001      	adds	r0, #1
 800842a:	f43f ae50 	beq.w	80080ce <_printf_float+0xbe>
 800842e:	f108 0801 	add.w	r8, r8, #1
 8008432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008434:	3b01      	subs	r3, #1
 8008436:	4543      	cmp	r3, r8
 8008438:	dcf1      	bgt.n	800841e <_printf_float+0x40e>
 800843a:	464b      	mov	r3, r9
 800843c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008440:	e6da      	b.n	80081f8 <_printf_float+0x1e8>
 8008442:	f04f 0800 	mov.w	r8, #0
 8008446:	f104 0a1a 	add.w	sl, r4, #26
 800844a:	e7f2      	b.n	8008432 <_printf_float+0x422>
 800844c:	2301      	movs	r3, #1
 800844e:	4642      	mov	r2, r8
 8008450:	e7df      	b.n	8008412 <_printf_float+0x402>
 8008452:	2301      	movs	r3, #1
 8008454:	464a      	mov	r2, r9
 8008456:	4631      	mov	r1, r6
 8008458:	4628      	mov	r0, r5
 800845a:	47b8      	blx	r7
 800845c:	3001      	adds	r0, #1
 800845e:	f43f ae36 	beq.w	80080ce <_printf_float+0xbe>
 8008462:	f108 0801 	add.w	r8, r8, #1
 8008466:	68e3      	ldr	r3, [r4, #12]
 8008468:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800846a:	1a5b      	subs	r3, r3, r1
 800846c:	4543      	cmp	r3, r8
 800846e:	dcf0      	bgt.n	8008452 <_printf_float+0x442>
 8008470:	e6f8      	b.n	8008264 <_printf_float+0x254>
 8008472:	f04f 0800 	mov.w	r8, #0
 8008476:	f104 0919 	add.w	r9, r4, #25
 800847a:	e7f4      	b.n	8008466 <_printf_float+0x456>

0800847c <_printf_common>:
 800847c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008480:	4616      	mov	r6, r2
 8008482:	4699      	mov	r9, r3
 8008484:	688a      	ldr	r2, [r1, #8]
 8008486:	690b      	ldr	r3, [r1, #16]
 8008488:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800848c:	4293      	cmp	r3, r2
 800848e:	bfb8      	it	lt
 8008490:	4613      	movlt	r3, r2
 8008492:	6033      	str	r3, [r6, #0]
 8008494:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008498:	4607      	mov	r7, r0
 800849a:	460c      	mov	r4, r1
 800849c:	b10a      	cbz	r2, 80084a2 <_printf_common+0x26>
 800849e:	3301      	adds	r3, #1
 80084a0:	6033      	str	r3, [r6, #0]
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	0699      	lsls	r1, r3, #26
 80084a6:	bf42      	ittt	mi
 80084a8:	6833      	ldrmi	r3, [r6, #0]
 80084aa:	3302      	addmi	r3, #2
 80084ac:	6033      	strmi	r3, [r6, #0]
 80084ae:	6825      	ldr	r5, [r4, #0]
 80084b0:	f015 0506 	ands.w	r5, r5, #6
 80084b4:	d106      	bne.n	80084c4 <_printf_common+0x48>
 80084b6:	f104 0a19 	add.w	sl, r4, #25
 80084ba:	68e3      	ldr	r3, [r4, #12]
 80084bc:	6832      	ldr	r2, [r6, #0]
 80084be:	1a9b      	subs	r3, r3, r2
 80084c0:	42ab      	cmp	r3, r5
 80084c2:	dc26      	bgt.n	8008512 <_printf_common+0x96>
 80084c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084c8:	1e13      	subs	r3, r2, #0
 80084ca:	6822      	ldr	r2, [r4, #0]
 80084cc:	bf18      	it	ne
 80084ce:	2301      	movne	r3, #1
 80084d0:	0692      	lsls	r2, r2, #26
 80084d2:	d42b      	bmi.n	800852c <_printf_common+0xb0>
 80084d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084d8:	4649      	mov	r1, r9
 80084da:	4638      	mov	r0, r7
 80084dc:	47c0      	blx	r8
 80084de:	3001      	adds	r0, #1
 80084e0:	d01e      	beq.n	8008520 <_printf_common+0xa4>
 80084e2:	6823      	ldr	r3, [r4, #0]
 80084e4:	6922      	ldr	r2, [r4, #16]
 80084e6:	f003 0306 	and.w	r3, r3, #6
 80084ea:	2b04      	cmp	r3, #4
 80084ec:	bf02      	ittt	eq
 80084ee:	68e5      	ldreq	r5, [r4, #12]
 80084f0:	6833      	ldreq	r3, [r6, #0]
 80084f2:	1aed      	subeq	r5, r5, r3
 80084f4:	68a3      	ldr	r3, [r4, #8]
 80084f6:	bf0c      	ite	eq
 80084f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084fc:	2500      	movne	r5, #0
 80084fe:	4293      	cmp	r3, r2
 8008500:	bfc4      	itt	gt
 8008502:	1a9b      	subgt	r3, r3, r2
 8008504:	18ed      	addgt	r5, r5, r3
 8008506:	2600      	movs	r6, #0
 8008508:	341a      	adds	r4, #26
 800850a:	42b5      	cmp	r5, r6
 800850c:	d11a      	bne.n	8008544 <_printf_common+0xc8>
 800850e:	2000      	movs	r0, #0
 8008510:	e008      	b.n	8008524 <_printf_common+0xa8>
 8008512:	2301      	movs	r3, #1
 8008514:	4652      	mov	r2, sl
 8008516:	4649      	mov	r1, r9
 8008518:	4638      	mov	r0, r7
 800851a:	47c0      	blx	r8
 800851c:	3001      	adds	r0, #1
 800851e:	d103      	bne.n	8008528 <_printf_common+0xac>
 8008520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008528:	3501      	adds	r5, #1
 800852a:	e7c6      	b.n	80084ba <_printf_common+0x3e>
 800852c:	18e1      	adds	r1, r4, r3
 800852e:	1c5a      	adds	r2, r3, #1
 8008530:	2030      	movs	r0, #48	; 0x30
 8008532:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008536:	4422      	add	r2, r4
 8008538:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800853c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008540:	3302      	adds	r3, #2
 8008542:	e7c7      	b.n	80084d4 <_printf_common+0x58>
 8008544:	2301      	movs	r3, #1
 8008546:	4622      	mov	r2, r4
 8008548:	4649      	mov	r1, r9
 800854a:	4638      	mov	r0, r7
 800854c:	47c0      	blx	r8
 800854e:	3001      	adds	r0, #1
 8008550:	d0e6      	beq.n	8008520 <_printf_common+0xa4>
 8008552:	3601      	adds	r6, #1
 8008554:	e7d9      	b.n	800850a <_printf_common+0x8e>
	...

08008558 <_printf_i>:
 8008558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800855c:	7e0f      	ldrb	r7, [r1, #24]
 800855e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008560:	2f78      	cmp	r7, #120	; 0x78
 8008562:	4691      	mov	r9, r2
 8008564:	4680      	mov	r8, r0
 8008566:	460c      	mov	r4, r1
 8008568:	469a      	mov	sl, r3
 800856a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800856e:	d807      	bhi.n	8008580 <_printf_i+0x28>
 8008570:	2f62      	cmp	r7, #98	; 0x62
 8008572:	d80a      	bhi.n	800858a <_printf_i+0x32>
 8008574:	2f00      	cmp	r7, #0
 8008576:	f000 80d4 	beq.w	8008722 <_printf_i+0x1ca>
 800857a:	2f58      	cmp	r7, #88	; 0x58
 800857c:	f000 80c0 	beq.w	8008700 <_printf_i+0x1a8>
 8008580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008584:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008588:	e03a      	b.n	8008600 <_printf_i+0xa8>
 800858a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800858e:	2b15      	cmp	r3, #21
 8008590:	d8f6      	bhi.n	8008580 <_printf_i+0x28>
 8008592:	a101      	add	r1, pc, #4	; (adr r1, 8008598 <_printf_i+0x40>)
 8008594:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008598:	080085f1 	.word	0x080085f1
 800859c:	08008605 	.word	0x08008605
 80085a0:	08008581 	.word	0x08008581
 80085a4:	08008581 	.word	0x08008581
 80085a8:	08008581 	.word	0x08008581
 80085ac:	08008581 	.word	0x08008581
 80085b0:	08008605 	.word	0x08008605
 80085b4:	08008581 	.word	0x08008581
 80085b8:	08008581 	.word	0x08008581
 80085bc:	08008581 	.word	0x08008581
 80085c0:	08008581 	.word	0x08008581
 80085c4:	08008709 	.word	0x08008709
 80085c8:	08008631 	.word	0x08008631
 80085cc:	080086c3 	.word	0x080086c3
 80085d0:	08008581 	.word	0x08008581
 80085d4:	08008581 	.word	0x08008581
 80085d8:	0800872b 	.word	0x0800872b
 80085dc:	08008581 	.word	0x08008581
 80085e0:	08008631 	.word	0x08008631
 80085e4:	08008581 	.word	0x08008581
 80085e8:	08008581 	.word	0x08008581
 80085ec:	080086cb 	.word	0x080086cb
 80085f0:	682b      	ldr	r3, [r5, #0]
 80085f2:	1d1a      	adds	r2, r3, #4
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	602a      	str	r2, [r5, #0]
 80085f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008600:	2301      	movs	r3, #1
 8008602:	e09f      	b.n	8008744 <_printf_i+0x1ec>
 8008604:	6820      	ldr	r0, [r4, #0]
 8008606:	682b      	ldr	r3, [r5, #0]
 8008608:	0607      	lsls	r7, r0, #24
 800860a:	f103 0104 	add.w	r1, r3, #4
 800860e:	6029      	str	r1, [r5, #0]
 8008610:	d501      	bpl.n	8008616 <_printf_i+0xbe>
 8008612:	681e      	ldr	r6, [r3, #0]
 8008614:	e003      	b.n	800861e <_printf_i+0xc6>
 8008616:	0646      	lsls	r6, r0, #25
 8008618:	d5fb      	bpl.n	8008612 <_printf_i+0xba>
 800861a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800861e:	2e00      	cmp	r6, #0
 8008620:	da03      	bge.n	800862a <_printf_i+0xd2>
 8008622:	232d      	movs	r3, #45	; 0x2d
 8008624:	4276      	negs	r6, r6
 8008626:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800862a:	485a      	ldr	r0, [pc, #360]	; (8008794 <_printf_i+0x23c>)
 800862c:	230a      	movs	r3, #10
 800862e:	e012      	b.n	8008656 <_printf_i+0xfe>
 8008630:	682b      	ldr	r3, [r5, #0]
 8008632:	6820      	ldr	r0, [r4, #0]
 8008634:	1d19      	adds	r1, r3, #4
 8008636:	6029      	str	r1, [r5, #0]
 8008638:	0605      	lsls	r5, r0, #24
 800863a:	d501      	bpl.n	8008640 <_printf_i+0xe8>
 800863c:	681e      	ldr	r6, [r3, #0]
 800863e:	e002      	b.n	8008646 <_printf_i+0xee>
 8008640:	0641      	lsls	r1, r0, #25
 8008642:	d5fb      	bpl.n	800863c <_printf_i+0xe4>
 8008644:	881e      	ldrh	r6, [r3, #0]
 8008646:	4853      	ldr	r0, [pc, #332]	; (8008794 <_printf_i+0x23c>)
 8008648:	2f6f      	cmp	r7, #111	; 0x6f
 800864a:	bf0c      	ite	eq
 800864c:	2308      	moveq	r3, #8
 800864e:	230a      	movne	r3, #10
 8008650:	2100      	movs	r1, #0
 8008652:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008656:	6865      	ldr	r5, [r4, #4]
 8008658:	60a5      	str	r5, [r4, #8]
 800865a:	2d00      	cmp	r5, #0
 800865c:	bfa2      	ittt	ge
 800865e:	6821      	ldrge	r1, [r4, #0]
 8008660:	f021 0104 	bicge.w	r1, r1, #4
 8008664:	6021      	strge	r1, [r4, #0]
 8008666:	b90e      	cbnz	r6, 800866c <_printf_i+0x114>
 8008668:	2d00      	cmp	r5, #0
 800866a:	d04b      	beq.n	8008704 <_printf_i+0x1ac>
 800866c:	4615      	mov	r5, r2
 800866e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008672:	fb03 6711 	mls	r7, r3, r1, r6
 8008676:	5dc7      	ldrb	r7, [r0, r7]
 8008678:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800867c:	4637      	mov	r7, r6
 800867e:	42bb      	cmp	r3, r7
 8008680:	460e      	mov	r6, r1
 8008682:	d9f4      	bls.n	800866e <_printf_i+0x116>
 8008684:	2b08      	cmp	r3, #8
 8008686:	d10b      	bne.n	80086a0 <_printf_i+0x148>
 8008688:	6823      	ldr	r3, [r4, #0]
 800868a:	07de      	lsls	r6, r3, #31
 800868c:	d508      	bpl.n	80086a0 <_printf_i+0x148>
 800868e:	6923      	ldr	r3, [r4, #16]
 8008690:	6861      	ldr	r1, [r4, #4]
 8008692:	4299      	cmp	r1, r3
 8008694:	bfde      	ittt	le
 8008696:	2330      	movle	r3, #48	; 0x30
 8008698:	f805 3c01 	strble.w	r3, [r5, #-1]
 800869c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80086a0:	1b52      	subs	r2, r2, r5
 80086a2:	6122      	str	r2, [r4, #16]
 80086a4:	f8cd a000 	str.w	sl, [sp]
 80086a8:	464b      	mov	r3, r9
 80086aa:	aa03      	add	r2, sp, #12
 80086ac:	4621      	mov	r1, r4
 80086ae:	4640      	mov	r0, r8
 80086b0:	f7ff fee4 	bl	800847c <_printf_common>
 80086b4:	3001      	adds	r0, #1
 80086b6:	d14a      	bne.n	800874e <_printf_i+0x1f6>
 80086b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086bc:	b004      	add	sp, #16
 80086be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086c2:	6823      	ldr	r3, [r4, #0]
 80086c4:	f043 0320 	orr.w	r3, r3, #32
 80086c8:	6023      	str	r3, [r4, #0]
 80086ca:	4833      	ldr	r0, [pc, #204]	; (8008798 <_printf_i+0x240>)
 80086cc:	2778      	movs	r7, #120	; 0x78
 80086ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80086d2:	6823      	ldr	r3, [r4, #0]
 80086d4:	6829      	ldr	r1, [r5, #0]
 80086d6:	061f      	lsls	r7, r3, #24
 80086d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80086dc:	d402      	bmi.n	80086e4 <_printf_i+0x18c>
 80086de:	065f      	lsls	r7, r3, #25
 80086e0:	bf48      	it	mi
 80086e2:	b2b6      	uxthmi	r6, r6
 80086e4:	07df      	lsls	r7, r3, #31
 80086e6:	bf48      	it	mi
 80086e8:	f043 0320 	orrmi.w	r3, r3, #32
 80086ec:	6029      	str	r1, [r5, #0]
 80086ee:	bf48      	it	mi
 80086f0:	6023      	strmi	r3, [r4, #0]
 80086f2:	b91e      	cbnz	r6, 80086fc <_printf_i+0x1a4>
 80086f4:	6823      	ldr	r3, [r4, #0]
 80086f6:	f023 0320 	bic.w	r3, r3, #32
 80086fa:	6023      	str	r3, [r4, #0]
 80086fc:	2310      	movs	r3, #16
 80086fe:	e7a7      	b.n	8008650 <_printf_i+0xf8>
 8008700:	4824      	ldr	r0, [pc, #144]	; (8008794 <_printf_i+0x23c>)
 8008702:	e7e4      	b.n	80086ce <_printf_i+0x176>
 8008704:	4615      	mov	r5, r2
 8008706:	e7bd      	b.n	8008684 <_printf_i+0x12c>
 8008708:	682b      	ldr	r3, [r5, #0]
 800870a:	6826      	ldr	r6, [r4, #0]
 800870c:	6961      	ldr	r1, [r4, #20]
 800870e:	1d18      	adds	r0, r3, #4
 8008710:	6028      	str	r0, [r5, #0]
 8008712:	0635      	lsls	r5, r6, #24
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	d501      	bpl.n	800871c <_printf_i+0x1c4>
 8008718:	6019      	str	r1, [r3, #0]
 800871a:	e002      	b.n	8008722 <_printf_i+0x1ca>
 800871c:	0670      	lsls	r0, r6, #25
 800871e:	d5fb      	bpl.n	8008718 <_printf_i+0x1c0>
 8008720:	8019      	strh	r1, [r3, #0]
 8008722:	2300      	movs	r3, #0
 8008724:	6123      	str	r3, [r4, #16]
 8008726:	4615      	mov	r5, r2
 8008728:	e7bc      	b.n	80086a4 <_printf_i+0x14c>
 800872a:	682b      	ldr	r3, [r5, #0]
 800872c:	1d1a      	adds	r2, r3, #4
 800872e:	602a      	str	r2, [r5, #0]
 8008730:	681d      	ldr	r5, [r3, #0]
 8008732:	6862      	ldr	r2, [r4, #4]
 8008734:	2100      	movs	r1, #0
 8008736:	4628      	mov	r0, r5
 8008738:	f7f7 fd6a 	bl	8000210 <memchr>
 800873c:	b108      	cbz	r0, 8008742 <_printf_i+0x1ea>
 800873e:	1b40      	subs	r0, r0, r5
 8008740:	6060      	str	r0, [r4, #4]
 8008742:	6863      	ldr	r3, [r4, #4]
 8008744:	6123      	str	r3, [r4, #16]
 8008746:	2300      	movs	r3, #0
 8008748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800874c:	e7aa      	b.n	80086a4 <_printf_i+0x14c>
 800874e:	6923      	ldr	r3, [r4, #16]
 8008750:	462a      	mov	r2, r5
 8008752:	4649      	mov	r1, r9
 8008754:	4640      	mov	r0, r8
 8008756:	47d0      	blx	sl
 8008758:	3001      	adds	r0, #1
 800875a:	d0ad      	beq.n	80086b8 <_printf_i+0x160>
 800875c:	6823      	ldr	r3, [r4, #0]
 800875e:	079b      	lsls	r3, r3, #30
 8008760:	d413      	bmi.n	800878a <_printf_i+0x232>
 8008762:	68e0      	ldr	r0, [r4, #12]
 8008764:	9b03      	ldr	r3, [sp, #12]
 8008766:	4298      	cmp	r0, r3
 8008768:	bfb8      	it	lt
 800876a:	4618      	movlt	r0, r3
 800876c:	e7a6      	b.n	80086bc <_printf_i+0x164>
 800876e:	2301      	movs	r3, #1
 8008770:	4632      	mov	r2, r6
 8008772:	4649      	mov	r1, r9
 8008774:	4640      	mov	r0, r8
 8008776:	47d0      	blx	sl
 8008778:	3001      	adds	r0, #1
 800877a:	d09d      	beq.n	80086b8 <_printf_i+0x160>
 800877c:	3501      	adds	r5, #1
 800877e:	68e3      	ldr	r3, [r4, #12]
 8008780:	9903      	ldr	r1, [sp, #12]
 8008782:	1a5b      	subs	r3, r3, r1
 8008784:	42ab      	cmp	r3, r5
 8008786:	dcf2      	bgt.n	800876e <_printf_i+0x216>
 8008788:	e7eb      	b.n	8008762 <_printf_i+0x20a>
 800878a:	2500      	movs	r5, #0
 800878c:	f104 0619 	add.w	r6, r4, #25
 8008790:	e7f5      	b.n	800877e <_printf_i+0x226>
 8008792:	bf00      	nop
 8008794:	0800af22 	.word	0x0800af22
 8008798:	0800af33 	.word	0x0800af33

0800879c <std>:
 800879c:	2300      	movs	r3, #0
 800879e:	b510      	push	{r4, lr}
 80087a0:	4604      	mov	r4, r0
 80087a2:	e9c0 3300 	strd	r3, r3, [r0]
 80087a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087aa:	6083      	str	r3, [r0, #8]
 80087ac:	8181      	strh	r1, [r0, #12]
 80087ae:	6643      	str	r3, [r0, #100]	; 0x64
 80087b0:	81c2      	strh	r2, [r0, #14]
 80087b2:	6183      	str	r3, [r0, #24]
 80087b4:	4619      	mov	r1, r3
 80087b6:	2208      	movs	r2, #8
 80087b8:	305c      	adds	r0, #92	; 0x5c
 80087ba:	f000 f902 	bl	80089c2 <memset>
 80087be:	4b05      	ldr	r3, [pc, #20]	; (80087d4 <std+0x38>)
 80087c0:	6263      	str	r3, [r4, #36]	; 0x24
 80087c2:	4b05      	ldr	r3, [pc, #20]	; (80087d8 <std+0x3c>)
 80087c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80087c6:	4b05      	ldr	r3, [pc, #20]	; (80087dc <std+0x40>)
 80087c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087ca:	4b05      	ldr	r3, [pc, #20]	; (80087e0 <std+0x44>)
 80087cc:	6224      	str	r4, [r4, #32]
 80087ce:	6323      	str	r3, [r4, #48]	; 0x30
 80087d0:	bd10      	pop	{r4, pc}
 80087d2:	bf00      	nop
 80087d4:	0800893d 	.word	0x0800893d
 80087d8:	0800895f 	.word	0x0800895f
 80087dc:	08008997 	.word	0x08008997
 80087e0:	080089bb 	.word	0x080089bb

080087e4 <stdio_exit_handler>:
 80087e4:	4a02      	ldr	r2, [pc, #8]	; (80087f0 <stdio_exit_handler+0xc>)
 80087e6:	4903      	ldr	r1, [pc, #12]	; (80087f4 <stdio_exit_handler+0x10>)
 80087e8:	4803      	ldr	r0, [pc, #12]	; (80087f8 <stdio_exit_handler+0x14>)
 80087ea:	f000 b869 	b.w	80088c0 <_fwalk_sglue>
 80087ee:	bf00      	nop
 80087f0:	20000034 	.word	0x20000034
 80087f4:	0800a489 	.word	0x0800a489
 80087f8:	20000040 	.word	0x20000040

080087fc <cleanup_stdio>:
 80087fc:	6841      	ldr	r1, [r0, #4]
 80087fe:	4b0c      	ldr	r3, [pc, #48]	; (8008830 <cleanup_stdio+0x34>)
 8008800:	4299      	cmp	r1, r3
 8008802:	b510      	push	{r4, lr}
 8008804:	4604      	mov	r4, r0
 8008806:	d001      	beq.n	800880c <cleanup_stdio+0x10>
 8008808:	f001 fe3e 	bl	800a488 <_fflush_r>
 800880c:	68a1      	ldr	r1, [r4, #8]
 800880e:	4b09      	ldr	r3, [pc, #36]	; (8008834 <cleanup_stdio+0x38>)
 8008810:	4299      	cmp	r1, r3
 8008812:	d002      	beq.n	800881a <cleanup_stdio+0x1e>
 8008814:	4620      	mov	r0, r4
 8008816:	f001 fe37 	bl	800a488 <_fflush_r>
 800881a:	68e1      	ldr	r1, [r4, #12]
 800881c:	4b06      	ldr	r3, [pc, #24]	; (8008838 <cleanup_stdio+0x3c>)
 800881e:	4299      	cmp	r1, r3
 8008820:	d004      	beq.n	800882c <cleanup_stdio+0x30>
 8008822:	4620      	mov	r0, r4
 8008824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008828:	f001 be2e 	b.w	800a488 <_fflush_r>
 800882c:	bd10      	pop	{r4, pc}
 800882e:	bf00      	nop
 8008830:	200004b0 	.word	0x200004b0
 8008834:	20000518 	.word	0x20000518
 8008838:	20000580 	.word	0x20000580

0800883c <global_stdio_init.part.0>:
 800883c:	b510      	push	{r4, lr}
 800883e:	4b0b      	ldr	r3, [pc, #44]	; (800886c <global_stdio_init.part.0+0x30>)
 8008840:	4c0b      	ldr	r4, [pc, #44]	; (8008870 <global_stdio_init.part.0+0x34>)
 8008842:	4a0c      	ldr	r2, [pc, #48]	; (8008874 <global_stdio_init.part.0+0x38>)
 8008844:	601a      	str	r2, [r3, #0]
 8008846:	4620      	mov	r0, r4
 8008848:	2200      	movs	r2, #0
 800884a:	2104      	movs	r1, #4
 800884c:	f7ff ffa6 	bl	800879c <std>
 8008850:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008854:	2201      	movs	r2, #1
 8008856:	2109      	movs	r1, #9
 8008858:	f7ff ffa0 	bl	800879c <std>
 800885c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008860:	2202      	movs	r2, #2
 8008862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008866:	2112      	movs	r1, #18
 8008868:	f7ff bf98 	b.w	800879c <std>
 800886c:	200005e8 	.word	0x200005e8
 8008870:	200004b0 	.word	0x200004b0
 8008874:	080087e5 	.word	0x080087e5

08008878 <__sfp_lock_acquire>:
 8008878:	4801      	ldr	r0, [pc, #4]	; (8008880 <__sfp_lock_acquire+0x8>)
 800887a:	f000 b91f 	b.w	8008abc <__retarget_lock_acquire_recursive>
 800887e:	bf00      	nop
 8008880:	200005f1 	.word	0x200005f1

08008884 <__sfp_lock_release>:
 8008884:	4801      	ldr	r0, [pc, #4]	; (800888c <__sfp_lock_release+0x8>)
 8008886:	f000 b91a 	b.w	8008abe <__retarget_lock_release_recursive>
 800888a:	bf00      	nop
 800888c:	200005f1 	.word	0x200005f1

08008890 <__sinit>:
 8008890:	b510      	push	{r4, lr}
 8008892:	4604      	mov	r4, r0
 8008894:	f7ff fff0 	bl	8008878 <__sfp_lock_acquire>
 8008898:	6a23      	ldr	r3, [r4, #32]
 800889a:	b11b      	cbz	r3, 80088a4 <__sinit+0x14>
 800889c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088a0:	f7ff bff0 	b.w	8008884 <__sfp_lock_release>
 80088a4:	4b04      	ldr	r3, [pc, #16]	; (80088b8 <__sinit+0x28>)
 80088a6:	6223      	str	r3, [r4, #32]
 80088a8:	4b04      	ldr	r3, [pc, #16]	; (80088bc <__sinit+0x2c>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1f5      	bne.n	800889c <__sinit+0xc>
 80088b0:	f7ff ffc4 	bl	800883c <global_stdio_init.part.0>
 80088b4:	e7f2      	b.n	800889c <__sinit+0xc>
 80088b6:	bf00      	nop
 80088b8:	080087fd 	.word	0x080087fd
 80088bc:	200005e8 	.word	0x200005e8

080088c0 <_fwalk_sglue>:
 80088c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088c4:	4607      	mov	r7, r0
 80088c6:	4688      	mov	r8, r1
 80088c8:	4614      	mov	r4, r2
 80088ca:	2600      	movs	r6, #0
 80088cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088d0:	f1b9 0901 	subs.w	r9, r9, #1
 80088d4:	d505      	bpl.n	80088e2 <_fwalk_sglue+0x22>
 80088d6:	6824      	ldr	r4, [r4, #0]
 80088d8:	2c00      	cmp	r4, #0
 80088da:	d1f7      	bne.n	80088cc <_fwalk_sglue+0xc>
 80088dc:	4630      	mov	r0, r6
 80088de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088e2:	89ab      	ldrh	r3, [r5, #12]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d907      	bls.n	80088f8 <_fwalk_sglue+0x38>
 80088e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088ec:	3301      	adds	r3, #1
 80088ee:	d003      	beq.n	80088f8 <_fwalk_sglue+0x38>
 80088f0:	4629      	mov	r1, r5
 80088f2:	4638      	mov	r0, r7
 80088f4:	47c0      	blx	r8
 80088f6:	4306      	orrs	r6, r0
 80088f8:	3568      	adds	r5, #104	; 0x68
 80088fa:	e7e9      	b.n	80088d0 <_fwalk_sglue+0x10>

080088fc <siprintf>:
 80088fc:	b40e      	push	{r1, r2, r3}
 80088fe:	b500      	push	{lr}
 8008900:	b09c      	sub	sp, #112	; 0x70
 8008902:	ab1d      	add	r3, sp, #116	; 0x74
 8008904:	9002      	str	r0, [sp, #8]
 8008906:	9006      	str	r0, [sp, #24]
 8008908:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800890c:	4809      	ldr	r0, [pc, #36]	; (8008934 <siprintf+0x38>)
 800890e:	9107      	str	r1, [sp, #28]
 8008910:	9104      	str	r1, [sp, #16]
 8008912:	4909      	ldr	r1, [pc, #36]	; (8008938 <siprintf+0x3c>)
 8008914:	f853 2b04 	ldr.w	r2, [r3], #4
 8008918:	9105      	str	r1, [sp, #20]
 800891a:	6800      	ldr	r0, [r0, #0]
 800891c:	9301      	str	r3, [sp, #4]
 800891e:	a902      	add	r1, sp, #8
 8008920:	f001 fc2e 	bl	800a180 <_svfiprintf_r>
 8008924:	9b02      	ldr	r3, [sp, #8]
 8008926:	2200      	movs	r2, #0
 8008928:	701a      	strb	r2, [r3, #0]
 800892a:	b01c      	add	sp, #112	; 0x70
 800892c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008930:	b003      	add	sp, #12
 8008932:	4770      	bx	lr
 8008934:	2000008c 	.word	0x2000008c
 8008938:	ffff0208 	.word	0xffff0208

0800893c <__sread>:
 800893c:	b510      	push	{r4, lr}
 800893e:	460c      	mov	r4, r1
 8008940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008944:	f000 f86c 	bl	8008a20 <_read_r>
 8008948:	2800      	cmp	r0, #0
 800894a:	bfab      	itete	ge
 800894c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800894e:	89a3      	ldrhlt	r3, [r4, #12]
 8008950:	181b      	addge	r3, r3, r0
 8008952:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008956:	bfac      	ite	ge
 8008958:	6563      	strge	r3, [r4, #84]	; 0x54
 800895a:	81a3      	strhlt	r3, [r4, #12]
 800895c:	bd10      	pop	{r4, pc}

0800895e <__swrite>:
 800895e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008962:	461f      	mov	r7, r3
 8008964:	898b      	ldrh	r3, [r1, #12]
 8008966:	05db      	lsls	r3, r3, #23
 8008968:	4605      	mov	r5, r0
 800896a:	460c      	mov	r4, r1
 800896c:	4616      	mov	r6, r2
 800896e:	d505      	bpl.n	800897c <__swrite+0x1e>
 8008970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008974:	2302      	movs	r3, #2
 8008976:	2200      	movs	r2, #0
 8008978:	f000 f840 	bl	80089fc <_lseek_r>
 800897c:	89a3      	ldrh	r3, [r4, #12]
 800897e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008982:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008986:	81a3      	strh	r3, [r4, #12]
 8008988:	4632      	mov	r2, r6
 800898a:	463b      	mov	r3, r7
 800898c:	4628      	mov	r0, r5
 800898e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008992:	f000 b857 	b.w	8008a44 <_write_r>

08008996 <__sseek>:
 8008996:	b510      	push	{r4, lr}
 8008998:	460c      	mov	r4, r1
 800899a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800899e:	f000 f82d 	bl	80089fc <_lseek_r>
 80089a2:	1c43      	adds	r3, r0, #1
 80089a4:	89a3      	ldrh	r3, [r4, #12]
 80089a6:	bf15      	itete	ne
 80089a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80089aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80089ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80089b2:	81a3      	strheq	r3, [r4, #12]
 80089b4:	bf18      	it	ne
 80089b6:	81a3      	strhne	r3, [r4, #12]
 80089b8:	bd10      	pop	{r4, pc}

080089ba <__sclose>:
 80089ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089be:	f000 b80d 	b.w	80089dc <_close_r>

080089c2 <memset>:
 80089c2:	4402      	add	r2, r0
 80089c4:	4603      	mov	r3, r0
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d100      	bne.n	80089cc <memset+0xa>
 80089ca:	4770      	bx	lr
 80089cc:	f803 1b01 	strb.w	r1, [r3], #1
 80089d0:	e7f9      	b.n	80089c6 <memset+0x4>
	...

080089d4 <_localeconv_r>:
 80089d4:	4800      	ldr	r0, [pc, #0]	; (80089d8 <_localeconv_r+0x4>)
 80089d6:	4770      	bx	lr
 80089d8:	20000180 	.word	0x20000180

080089dc <_close_r>:
 80089dc:	b538      	push	{r3, r4, r5, lr}
 80089de:	4d06      	ldr	r5, [pc, #24]	; (80089f8 <_close_r+0x1c>)
 80089e0:	2300      	movs	r3, #0
 80089e2:	4604      	mov	r4, r0
 80089e4:	4608      	mov	r0, r1
 80089e6:	602b      	str	r3, [r5, #0]
 80089e8:	f7fa ff9d 	bl	8003926 <_close>
 80089ec:	1c43      	adds	r3, r0, #1
 80089ee:	d102      	bne.n	80089f6 <_close_r+0x1a>
 80089f0:	682b      	ldr	r3, [r5, #0]
 80089f2:	b103      	cbz	r3, 80089f6 <_close_r+0x1a>
 80089f4:	6023      	str	r3, [r4, #0]
 80089f6:	bd38      	pop	{r3, r4, r5, pc}
 80089f8:	200005ec 	.word	0x200005ec

080089fc <_lseek_r>:
 80089fc:	b538      	push	{r3, r4, r5, lr}
 80089fe:	4d07      	ldr	r5, [pc, #28]	; (8008a1c <_lseek_r+0x20>)
 8008a00:	4604      	mov	r4, r0
 8008a02:	4608      	mov	r0, r1
 8008a04:	4611      	mov	r1, r2
 8008a06:	2200      	movs	r2, #0
 8008a08:	602a      	str	r2, [r5, #0]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	f7fa ffb2 	bl	8003974 <_lseek>
 8008a10:	1c43      	adds	r3, r0, #1
 8008a12:	d102      	bne.n	8008a1a <_lseek_r+0x1e>
 8008a14:	682b      	ldr	r3, [r5, #0]
 8008a16:	b103      	cbz	r3, 8008a1a <_lseek_r+0x1e>
 8008a18:	6023      	str	r3, [r4, #0]
 8008a1a:	bd38      	pop	{r3, r4, r5, pc}
 8008a1c:	200005ec 	.word	0x200005ec

08008a20 <_read_r>:
 8008a20:	b538      	push	{r3, r4, r5, lr}
 8008a22:	4d07      	ldr	r5, [pc, #28]	; (8008a40 <_read_r+0x20>)
 8008a24:	4604      	mov	r4, r0
 8008a26:	4608      	mov	r0, r1
 8008a28:	4611      	mov	r1, r2
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	602a      	str	r2, [r5, #0]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	f7fa ff40 	bl	80038b4 <_read>
 8008a34:	1c43      	adds	r3, r0, #1
 8008a36:	d102      	bne.n	8008a3e <_read_r+0x1e>
 8008a38:	682b      	ldr	r3, [r5, #0]
 8008a3a:	b103      	cbz	r3, 8008a3e <_read_r+0x1e>
 8008a3c:	6023      	str	r3, [r4, #0]
 8008a3e:	bd38      	pop	{r3, r4, r5, pc}
 8008a40:	200005ec 	.word	0x200005ec

08008a44 <_write_r>:
 8008a44:	b538      	push	{r3, r4, r5, lr}
 8008a46:	4d07      	ldr	r5, [pc, #28]	; (8008a64 <_write_r+0x20>)
 8008a48:	4604      	mov	r4, r0
 8008a4a:	4608      	mov	r0, r1
 8008a4c:	4611      	mov	r1, r2
 8008a4e:	2200      	movs	r2, #0
 8008a50:	602a      	str	r2, [r5, #0]
 8008a52:	461a      	mov	r2, r3
 8008a54:	f7fa ff4b 	bl	80038ee <_write>
 8008a58:	1c43      	adds	r3, r0, #1
 8008a5a:	d102      	bne.n	8008a62 <_write_r+0x1e>
 8008a5c:	682b      	ldr	r3, [r5, #0]
 8008a5e:	b103      	cbz	r3, 8008a62 <_write_r+0x1e>
 8008a60:	6023      	str	r3, [r4, #0]
 8008a62:	bd38      	pop	{r3, r4, r5, pc}
 8008a64:	200005ec 	.word	0x200005ec

08008a68 <__errno>:
 8008a68:	4b01      	ldr	r3, [pc, #4]	; (8008a70 <__errno+0x8>)
 8008a6a:	6818      	ldr	r0, [r3, #0]
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	2000008c 	.word	0x2000008c

08008a74 <__libc_init_array>:
 8008a74:	b570      	push	{r4, r5, r6, lr}
 8008a76:	4d0d      	ldr	r5, [pc, #52]	; (8008aac <__libc_init_array+0x38>)
 8008a78:	4c0d      	ldr	r4, [pc, #52]	; (8008ab0 <__libc_init_array+0x3c>)
 8008a7a:	1b64      	subs	r4, r4, r5
 8008a7c:	10a4      	asrs	r4, r4, #2
 8008a7e:	2600      	movs	r6, #0
 8008a80:	42a6      	cmp	r6, r4
 8008a82:	d109      	bne.n	8008a98 <__libc_init_array+0x24>
 8008a84:	4d0b      	ldr	r5, [pc, #44]	; (8008ab4 <__libc_init_array+0x40>)
 8008a86:	4c0c      	ldr	r4, [pc, #48]	; (8008ab8 <__libc_init_array+0x44>)
 8008a88:	f002 fa12 	bl	800aeb0 <_init>
 8008a8c:	1b64      	subs	r4, r4, r5
 8008a8e:	10a4      	asrs	r4, r4, #2
 8008a90:	2600      	movs	r6, #0
 8008a92:	42a6      	cmp	r6, r4
 8008a94:	d105      	bne.n	8008aa2 <__libc_init_array+0x2e>
 8008a96:	bd70      	pop	{r4, r5, r6, pc}
 8008a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a9c:	4798      	blx	r3
 8008a9e:	3601      	adds	r6, #1
 8008aa0:	e7ee      	b.n	8008a80 <__libc_init_array+0xc>
 8008aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aa6:	4798      	blx	r3
 8008aa8:	3601      	adds	r6, #1
 8008aaa:	e7f2      	b.n	8008a92 <__libc_init_array+0x1e>
 8008aac:	0800b2c4 	.word	0x0800b2c4
 8008ab0:	0800b2c4 	.word	0x0800b2c4
 8008ab4:	0800b2c4 	.word	0x0800b2c4
 8008ab8:	0800b2c8 	.word	0x0800b2c8

08008abc <__retarget_lock_acquire_recursive>:
 8008abc:	4770      	bx	lr

08008abe <__retarget_lock_release_recursive>:
 8008abe:	4770      	bx	lr

08008ac0 <memcpy>:
 8008ac0:	440a      	add	r2, r1
 8008ac2:	4291      	cmp	r1, r2
 8008ac4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008ac8:	d100      	bne.n	8008acc <memcpy+0xc>
 8008aca:	4770      	bx	lr
 8008acc:	b510      	push	{r4, lr}
 8008ace:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ad2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ad6:	4291      	cmp	r1, r2
 8008ad8:	d1f9      	bne.n	8008ace <memcpy+0xe>
 8008ada:	bd10      	pop	{r4, pc}

08008adc <quorem>:
 8008adc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae0:	6903      	ldr	r3, [r0, #16]
 8008ae2:	690c      	ldr	r4, [r1, #16]
 8008ae4:	42a3      	cmp	r3, r4
 8008ae6:	4607      	mov	r7, r0
 8008ae8:	db7e      	blt.n	8008be8 <quorem+0x10c>
 8008aea:	3c01      	subs	r4, #1
 8008aec:	f101 0814 	add.w	r8, r1, #20
 8008af0:	f100 0514 	add.w	r5, r0, #20
 8008af4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008af8:	9301      	str	r3, [sp, #4]
 8008afa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008afe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b02:	3301      	adds	r3, #1
 8008b04:	429a      	cmp	r2, r3
 8008b06:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b0a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b0e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b12:	d331      	bcc.n	8008b78 <quorem+0x9c>
 8008b14:	f04f 0e00 	mov.w	lr, #0
 8008b18:	4640      	mov	r0, r8
 8008b1a:	46ac      	mov	ip, r5
 8008b1c:	46f2      	mov	sl, lr
 8008b1e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b22:	b293      	uxth	r3, r2
 8008b24:	fb06 e303 	mla	r3, r6, r3, lr
 8008b28:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b2c:	0c1a      	lsrs	r2, r3, #16
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	ebaa 0303 	sub.w	r3, sl, r3
 8008b34:	f8dc a000 	ldr.w	sl, [ip]
 8008b38:	fa13 f38a 	uxtah	r3, r3, sl
 8008b3c:	fb06 220e 	mla	r2, r6, lr, r2
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	9b00      	ldr	r3, [sp, #0]
 8008b44:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b48:	b292      	uxth	r2, r2
 8008b4a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008b4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b52:	f8bd 3000 	ldrh.w	r3, [sp]
 8008b56:	4581      	cmp	r9, r0
 8008b58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b5c:	f84c 3b04 	str.w	r3, [ip], #4
 8008b60:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b64:	d2db      	bcs.n	8008b1e <quorem+0x42>
 8008b66:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b6a:	b92b      	cbnz	r3, 8008b78 <quorem+0x9c>
 8008b6c:	9b01      	ldr	r3, [sp, #4]
 8008b6e:	3b04      	subs	r3, #4
 8008b70:	429d      	cmp	r5, r3
 8008b72:	461a      	mov	r2, r3
 8008b74:	d32c      	bcc.n	8008bd0 <quorem+0xf4>
 8008b76:	613c      	str	r4, [r7, #16]
 8008b78:	4638      	mov	r0, r7
 8008b7a:	f001 f9a7 	bl	8009ecc <__mcmp>
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	db22      	blt.n	8008bc8 <quorem+0xec>
 8008b82:	3601      	adds	r6, #1
 8008b84:	4629      	mov	r1, r5
 8008b86:	2000      	movs	r0, #0
 8008b88:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b8c:	f8d1 c000 	ldr.w	ip, [r1]
 8008b90:	b293      	uxth	r3, r2
 8008b92:	1ac3      	subs	r3, r0, r3
 8008b94:	0c12      	lsrs	r2, r2, #16
 8008b96:	fa13 f38c 	uxtah	r3, r3, ip
 8008b9a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008b9e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ba8:	45c1      	cmp	r9, r8
 8008baa:	f841 3b04 	str.w	r3, [r1], #4
 8008bae:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008bb2:	d2e9      	bcs.n	8008b88 <quorem+0xac>
 8008bb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bbc:	b922      	cbnz	r2, 8008bc8 <quorem+0xec>
 8008bbe:	3b04      	subs	r3, #4
 8008bc0:	429d      	cmp	r5, r3
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	d30a      	bcc.n	8008bdc <quorem+0x100>
 8008bc6:	613c      	str	r4, [r7, #16]
 8008bc8:	4630      	mov	r0, r6
 8008bca:	b003      	add	sp, #12
 8008bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bd0:	6812      	ldr	r2, [r2, #0]
 8008bd2:	3b04      	subs	r3, #4
 8008bd4:	2a00      	cmp	r2, #0
 8008bd6:	d1ce      	bne.n	8008b76 <quorem+0x9a>
 8008bd8:	3c01      	subs	r4, #1
 8008bda:	e7c9      	b.n	8008b70 <quorem+0x94>
 8008bdc:	6812      	ldr	r2, [r2, #0]
 8008bde:	3b04      	subs	r3, #4
 8008be0:	2a00      	cmp	r2, #0
 8008be2:	d1f0      	bne.n	8008bc6 <quorem+0xea>
 8008be4:	3c01      	subs	r4, #1
 8008be6:	e7eb      	b.n	8008bc0 <quorem+0xe4>
 8008be8:	2000      	movs	r0, #0
 8008bea:	e7ee      	b.n	8008bca <quorem+0xee>
 8008bec:	0000      	movs	r0, r0
	...

08008bf0 <_dtoa_r>:
 8008bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf4:	ed2d 8b04 	vpush	{d8-d9}
 8008bf8:	69c5      	ldr	r5, [r0, #28]
 8008bfa:	b093      	sub	sp, #76	; 0x4c
 8008bfc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008c00:	ec57 6b10 	vmov	r6, r7, d0
 8008c04:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008c08:	9107      	str	r1, [sp, #28]
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	920a      	str	r2, [sp, #40]	; 0x28
 8008c0e:	930d      	str	r3, [sp, #52]	; 0x34
 8008c10:	b975      	cbnz	r5, 8008c30 <_dtoa_r+0x40>
 8008c12:	2010      	movs	r0, #16
 8008c14:	f000 fe2a 	bl	800986c <malloc>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	61e0      	str	r0, [r4, #28]
 8008c1c:	b920      	cbnz	r0, 8008c28 <_dtoa_r+0x38>
 8008c1e:	4bae      	ldr	r3, [pc, #696]	; (8008ed8 <_dtoa_r+0x2e8>)
 8008c20:	21ef      	movs	r1, #239	; 0xef
 8008c22:	48ae      	ldr	r0, [pc, #696]	; (8008edc <_dtoa_r+0x2ec>)
 8008c24:	f001 fc82 	bl	800a52c <__assert_func>
 8008c28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c2c:	6005      	str	r5, [r0, #0]
 8008c2e:	60c5      	str	r5, [r0, #12]
 8008c30:	69e3      	ldr	r3, [r4, #28]
 8008c32:	6819      	ldr	r1, [r3, #0]
 8008c34:	b151      	cbz	r1, 8008c4c <_dtoa_r+0x5c>
 8008c36:	685a      	ldr	r2, [r3, #4]
 8008c38:	604a      	str	r2, [r1, #4]
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	4093      	lsls	r3, r2
 8008c3e:	608b      	str	r3, [r1, #8]
 8008c40:	4620      	mov	r0, r4
 8008c42:	f000 ff07 	bl	8009a54 <_Bfree>
 8008c46:	69e3      	ldr	r3, [r4, #28]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	601a      	str	r2, [r3, #0]
 8008c4c:	1e3b      	subs	r3, r7, #0
 8008c4e:	bfbb      	ittet	lt
 8008c50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008c54:	9303      	strlt	r3, [sp, #12]
 8008c56:	2300      	movge	r3, #0
 8008c58:	2201      	movlt	r2, #1
 8008c5a:	bfac      	ite	ge
 8008c5c:	f8c8 3000 	strge.w	r3, [r8]
 8008c60:	f8c8 2000 	strlt.w	r2, [r8]
 8008c64:	4b9e      	ldr	r3, [pc, #632]	; (8008ee0 <_dtoa_r+0x2f0>)
 8008c66:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008c6a:	ea33 0308 	bics.w	r3, r3, r8
 8008c6e:	d11b      	bne.n	8008ca8 <_dtoa_r+0xb8>
 8008c70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c72:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c76:	6013      	str	r3, [r2, #0]
 8008c78:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008c7c:	4333      	orrs	r3, r6
 8008c7e:	f000 8593 	beq.w	80097a8 <_dtoa_r+0xbb8>
 8008c82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c84:	b963      	cbnz	r3, 8008ca0 <_dtoa_r+0xb0>
 8008c86:	4b97      	ldr	r3, [pc, #604]	; (8008ee4 <_dtoa_r+0x2f4>)
 8008c88:	e027      	b.n	8008cda <_dtoa_r+0xea>
 8008c8a:	4b97      	ldr	r3, [pc, #604]	; (8008ee8 <_dtoa_r+0x2f8>)
 8008c8c:	9300      	str	r3, [sp, #0]
 8008c8e:	3308      	adds	r3, #8
 8008c90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c92:	6013      	str	r3, [r2, #0]
 8008c94:	9800      	ldr	r0, [sp, #0]
 8008c96:	b013      	add	sp, #76	; 0x4c
 8008c98:	ecbd 8b04 	vpop	{d8-d9}
 8008c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca0:	4b90      	ldr	r3, [pc, #576]	; (8008ee4 <_dtoa_r+0x2f4>)
 8008ca2:	9300      	str	r3, [sp, #0]
 8008ca4:	3303      	adds	r3, #3
 8008ca6:	e7f3      	b.n	8008c90 <_dtoa_r+0xa0>
 8008ca8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008cac:	2200      	movs	r2, #0
 8008cae:	ec51 0b17 	vmov	r0, r1, d7
 8008cb2:	eeb0 8a47 	vmov.f32	s16, s14
 8008cb6:	eef0 8a67 	vmov.f32	s17, s15
 8008cba:	2300      	movs	r3, #0
 8008cbc:	f7f7 ff24 	bl	8000b08 <__aeabi_dcmpeq>
 8008cc0:	4681      	mov	r9, r0
 8008cc2:	b160      	cbz	r0, 8008cde <_dtoa_r+0xee>
 8008cc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	6013      	str	r3, [r2, #0]
 8008cca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f000 8568 	beq.w	80097a2 <_dtoa_r+0xbb2>
 8008cd2:	4b86      	ldr	r3, [pc, #536]	; (8008eec <_dtoa_r+0x2fc>)
 8008cd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008cd6:	6013      	str	r3, [r2, #0]
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	9300      	str	r3, [sp, #0]
 8008cdc:	e7da      	b.n	8008c94 <_dtoa_r+0xa4>
 8008cde:	aa10      	add	r2, sp, #64	; 0x40
 8008ce0:	a911      	add	r1, sp, #68	; 0x44
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	eeb0 0a48 	vmov.f32	s0, s16
 8008ce8:	eef0 0a68 	vmov.f32	s1, s17
 8008cec:	f001 f994 	bl	800a018 <__d2b>
 8008cf0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008cf4:	4682      	mov	sl, r0
 8008cf6:	2d00      	cmp	r5, #0
 8008cf8:	d07f      	beq.n	8008dfa <_dtoa_r+0x20a>
 8008cfa:	ee18 3a90 	vmov	r3, s17
 8008cfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d02:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008d06:	ec51 0b18 	vmov	r0, r1, d8
 8008d0a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008d0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008d12:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008d16:	4619      	mov	r1, r3
 8008d18:	2200      	movs	r2, #0
 8008d1a:	4b75      	ldr	r3, [pc, #468]	; (8008ef0 <_dtoa_r+0x300>)
 8008d1c:	f7f7 fad4 	bl	80002c8 <__aeabi_dsub>
 8008d20:	a367      	add	r3, pc, #412	; (adr r3, 8008ec0 <_dtoa_r+0x2d0>)
 8008d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d26:	f7f7 fc87 	bl	8000638 <__aeabi_dmul>
 8008d2a:	a367      	add	r3, pc, #412	; (adr r3, 8008ec8 <_dtoa_r+0x2d8>)
 8008d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d30:	f7f7 facc 	bl	80002cc <__adddf3>
 8008d34:	4606      	mov	r6, r0
 8008d36:	4628      	mov	r0, r5
 8008d38:	460f      	mov	r7, r1
 8008d3a:	f7f7 fc13 	bl	8000564 <__aeabi_i2d>
 8008d3e:	a364      	add	r3, pc, #400	; (adr r3, 8008ed0 <_dtoa_r+0x2e0>)
 8008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d44:	f7f7 fc78 	bl	8000638 <__aeabi_dmul>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	4639      	mov	r1, r7
 8008d50:	f7f7 fabc 	bl	80002cc <__adddf3>
 8008d54:	4606      	mov	r6, r0
 8008d56:	460f      	mov	r7, r1
 8008d58:	f7f7 ff1e 	bl	8000b98 <__aeabi_d2iz>
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	4683      	mov	fp, r0
 8008d60:	2300      	movs	r3, #0
 8008d62:	4630      	mov	r0, r6
 8008d64:	4639      	mov	r1, r7
 8008d66:	f7f7 fed9 	bl	8000b1c <__aeabi_dcmplt>
 8008d6a:	b148      	cbz	r0, 8008d80 <_dtoa_r+0x190>
 8008d6c:	4658      	mov	r0, fp
 8008d6e:	f7f7 fbf9 	bl	8000564 <__aeabi_i2d>
 8008d72:	4632      	mov	r2, r6
 8008d74:	463b      	mov	r3, r7
 8008d76:	f7f7 fec7 	bl	8000b08 <__aeabi_dcmpeq>
 8008d7a:	b908      	cbnz	r0, 8008d80 <_dtoa_r+0x190>
 8008d7c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008d80:	f1bb 0f16 	cmp.w	fp, #22
 8008d84:	d857      	bhi.n	8008e36 <_dtoa_r+0x246>
 8008d86:	4b5b      	ldr	r3, [pc, #364]	; (8008ef4 <_dtoa_r+0x304>)
 8008d88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d90:	ec51 0b18 	vmov	r0, r1, d8
 8008d94:	f7f7 fec2 	bl	8000b1c <__aeabi_dcmplt>
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	d04e      	beq.n	8008e3a <_dtoa_r+0x24a>
 8008d9c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008da0:	2300      	movs	r3, #0
 8008da2:	930c      	str	r3, [sp, #48]	; 0x30
 8008da4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008da6:	1b5b      	subs	r3, r3, r5
 8008da8:	1e5a      	subs	r2, r3, #1
 8008daa:	bf45      	ittet	mi
 8008dac:	f1c3 0301 	rsbmi	r3, r3, #1
 8008db0:	9305      	strmi	r3, [sp, #20]
 8008db2:	2300      	movpl	r3, #0
 8008db4:	2300      	movmi	r3, #0
 8008db6:	9206      	str	r2, [sp, #24]
 8008db8:	bf54      	ite	pl
 8008dba:	9305      	strpl	r3, [sp, #20]
 8008dbc:	9306      	strmi	r3, [sp, #24]
 8008dbe:	f1bb 0f00 	cmp.w	fp, #0
 8008dc2:	db3c      	blt.n	8008e3e <_dtoa_r+0x24e>
 8008dc4:	9b06      	ldr	r3, [sp, #24]
 8008dc6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008dca:	445b      	add	r3, fp
 8008dcc:	9306      	str	r3, [sp, #24]
 8008dce:	2300      	movs	r3, #0
 8008dd0:	9308      	str	r3, [sp, #32]
 8008dd2:	9b07      	ldr	r3, [sp, #28]
 8008dd4:	2b09      	cmp	r3, #9
 8008dd6:	d868      	bhi.n	8008eaa <_dtoa_r+0x2ba>
 8008dd8:	2b05      	cmp	r3, #5
 8008dda:	bfc4      	itt	gt
 8008ddc:	3b04      	subgt	r3, #4
 8008dde:	9307      	strgt	r3, [sp, #28]
 8008de0:	9b07      	ldr	r3, [sp, #28]
 8008de2:	f1a3 0302 	sub.w	r3, r3, #2
 8008de6:	bfcc      	ite	gt
 8008de8:	2500      	movgt	r5, #0
 8008dea:	2501      	movle	r5, #1
 8008dec:	2b03      	cmp	r3, #3
 8008dee:	f200 8085 	bhi.w	8008efc <_dtoa_r+0x30c>
 8008df2:	e8df f003 	tbb	[pc, r3]
 8008df6:	3b2e      	.short	0x3b2e
 8008df8:	5839      	.short	0x5839
 8008dfa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008dfe:	441d      	add	r5, r3
 8008e00:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008e04:	2b20      	cmp	r3, #32
 8008e06:	bfc1      	itttt	gt
 8008e08:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008e0c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008e10:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008e14:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008e18:	bfd6      	itet	le
 8008e1a:	f1c3 0320 	rsble	r3, r3, #32
 8008e1e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008e22:	fa06 f003 	lslle.w	r0, r6, r3
 8008e26:	f7f7 fb8d 	bl	8000544 <__aeabi_ui2d>
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008e30:	3d01      	subs	r5, #1
 8008e32:	920e      	str	r2, [sp, #56]	; 0x38
 8008e34:	e76f      	b.n	8008d16 <_dtoa_r+0x126>
 8008e36:	2301      	movs	r3, #1
 8008e38:	e7b3      	b.n	8008da2 <_dtoa_r+0x1b2>
 8008e3a:	900c      	str	r0, [sp, #48]	; 0x30
 8008e3c:	e7b2      	b.n	8008da4 <_dtoa_r+0x1b4>
 8008e3e:	9b05      	ldr	r3, [sp, #20]
 8008e40:	eba3 030b 	sub.w	r3, r3, fp
 8008e44:	9305      	str	r3, [sp, #20]
 8008e46:	f1cb 0300 	rsb	r3, fp, #0
 8008e4a:	9308      	str	r3, [sp, #32]
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e50:	e7bf      	b.n	8008dd2 <_dtoa_r+0x1e2>
 8008e52:	2300      	movs	r3, #0
 8008e54:	9309      	str	r3, [sp, #36]	; 0x24
 8008e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	dc52      	bgt.n	8008f02 <_dtoa_r+0x312>
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	9301      	str	r3, [sp, #4]
 8008e60:	9304      	str	r3, [sp, #16]
 8008e62:	461a      	mov	r2, r3
 8008e64:	920a      	str	r2, [sp, #40]	; 0x28
 8008e66:	e00b      	b.n	8008e80 <_dtoa_r+0x290>
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e7f3      	b.n	8008e54 <_dtoa_r+0x264>
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e72:	445b      	add	r3, fp
 8008e74:	9301      	str	r3, [sp, #4]
 8008e76:	3301      	adds	r3, #1
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	9304      	str	r3, [sp, #16]
 8008e7c:	bfb8      	it	lt
 8008e7e:	2301      	movlt	r3, #1
 8008e80:	69e0      	ldr	r0, [r4, #28]
 8008e82:	2100      	movs	r1, #0
 8008e84:	2204      	movs	r2, #4
 8008e86:	f102 0614 	add.w	r6, r2, #20
 8008e8a:	429e      	cmp	r6, r3
 8008e8c:	d93d      	bls.n	8008f0a <_dtoa_r+0x31a>
 8008e8e:	6041      	str	r1, [r0, #4]
 8008e90:	4620      	mov	r0, r4
 8008e92:	f000 fd9f 	bl	80099d4 <_Balloc>
 8008e96:	9000      	str	r0, [sp, #0]
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d139      	bne.n	8008f10 <_dtoa_r+0x320>
 8008e9c:	4b16      	ldr	r3, [pc, #88]	; (8008ef8 <_dtoa_r+0x308>)
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	f240 11af 	movw	r1, #431	; 0x1af
 8008ea4:	e6bd      	b.n	8008c22 <_dtoa_r+0x32>
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e7e1      	b.n	8008e6e <_dtoa_r+0x27e>
 8008eaa:	2501      	movs	r5, #1
 8008eac:	2300      	movs	r3, #0
 8008eae:	9307      	str	r3, [sp, #28]
 8008eb0:	9509      	str	r5, [sp, #36]	; 0x24
 8008eb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008eb6:	9301      	str	r3, [sp, #4]
 8008eb8:	9304      	str	r3, [sp, #16]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	2312      	movs	r3, #18
 8008ebe:	e7d1      	b.n	8008e64 <_dtoa_r+0x274>
 8008ec0:	636f4361 	.word	0x636f4361
 8008ec4:	3fd287a7 	.word	0x3fd287a7
 8008ec8:	8b60c8b3 	.word	0x8b60c8b3
 8008ecc:	3fc68a28 	.word	0x3fc68a28
 8008ed0:	509f79fb 	.word	0x509f79fb
 8008ed4:	3fd34413 	.word	0x3fd34413
 8008ed8:	0800af51 	.word	0x0800af51
 8008edc:	0800af68 	.word	0x0800af68
 8008ee0:	7ff00000 	.word	0x7ff00000
 8008ee4:	0800af4d 	.word	0x0800af4d
 8008ee8:	0800af44 	.word	0x0800af44
 8008eec:	0800af21 	.word	0x0800af21
 8008ef0:	3ff80000 	.word	0x3ff80000
 8008ef4:	0800b058 	.word	0x0800b058
 8008ef8:	0800afc0 	.word	0x0800afc0
 8008efc:	2301      	movs	r3, #1
 8008efe:	9309      	str	r3, [sp, #36]	; 0x24
 8008f00:	e7d7      	b.n	8008eb2 <_dtoa_r+0x2c2>
 8008f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f04:	9301      	str	r3, [sp, #4]
 8008f06:	9304      	str	r3, [sp, #16]
 8008f08:	e7ba      	b.n	8008e80 <_dtoa_r+0x290>
 8008f0a:	3101      	adds	r1, #1
 8008f0c:	0052      	lsls	r2, r2, #1
 8008f0e:	e7ba      	b.n	8008e86 <_dtoa_r+0x296>
 8008f10:	69e3      	ldr	r3, [r4, #28]
 8008f12:	9a00      	ldr	r2, [sp, #0]
 8008f14:	601a      	str	r2, [r3, #0]
 8008f16:	9b04      	ldr	r3, [sp, #16]
 8008f18:	2b0e      	cmp	r3, #14
 8008f1a:	f200 80a8 	bhi.w	800906e <_dtoa_r+0x47e>
 8008f1e:	2d00      	cmp	r5, #0
 8008f20:	f000 80a5 	beq.w	800906e <_dtoa_r+0x47e>
 8008f24:	f1bb 0f00 	cmp.w	fp, #0
 8008f28:	dd38      	ble.n	8008f9c <_dtoa_r+0x3ac>
 8008f2a:	4bc0      	ldr	r3, [pc, #768]	; (800922c <_dtoa_r+0x63c>)
 8008f2c:	f00b 020f 	and.w	r2, fp, #15
 8008f30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f34:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008f38:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008f3c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008f40:	d019      	beq.n	8008f76 <_dtoa_r+0x386>
 8008f42:	4bbb      	ldr	r3, [pc, #748]	; (8009230 <_dtoa_r+0x640>)
 8008f44:	ec51 0b18 	vmov	r0, r1, d8
 8008f48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f4c:	f7f7 fc9e 	bl	800088c <__aeabi_ddiv>
 8008f50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f54:	f008 080f 	and.w	r8, r8, #15
 8008f58:	2503      	movs	r5, #3
 8008f5a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009230 <_dtoa_r+0x640>
 8008f5e:	f1b8 0f00 	cmp.w	r8, #0
 8008f62:	d10a      	bne.n	8008f7a <_dtoa_r+0x38a>
 8008f64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f68:	4632      	mov	r2, r6
 8008f6a:	463b      	mov	r3, r7
 8008f6c:	f7f7 fc8e 	bl	800088c <__aeabi_ddiv>
 8008f70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f74:	e02b      	b.n	8008fce <_dtoa_r+0x3de>
 8008f76:	2502      	movs	r5, #2
 8008f78:	e7ef      	b.n	8008f5a <_dtoa_r+0x36a>
 8008f7a:	f018 0f01 	tst.w	r8, #1
 8008f7e:	d008      	beq.n	8008f92 <_dtoa_r+0x3a2>
 8008f80:	4630      	mov	r0, r6
 8008f82:	4639      	mov	r1, r7
 8008f84:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008f88:	f7f7 fb56 	bl	8000638 <__aeabi_dmul>
 8008f8c:	3501      	adds	r5, #1
 8008f8e:	4606      	mov	r6, r0
 8008f90:	460f      	mov	r7, r1
 8008f92:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008f96:	f109 0908 	add.w	r9, r9, #8
 8008f9a:	e7e0      	b.n	8008f5e <_dtoa_r+0x36e>
 8008f9c:	f000 809f 	beq.w	80090de <_dtoa_r+0x4ee>
 8008fa0:	f1cb 0600 	rsb	r6, fp, #0
 8008fa4:	4ba1      	ldr	r3, [pc, #644]	; (800922c <_dtoa_r+0x63c>)
 8008fa6:	4fa2      	ldr	r7, [pc, #648]	; (8009230 <_dtoa_r+0x640>)
 8008fa8:	f006 020f 	and.w	r2, r6, #15
 8008fac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb4:	ec51 0b18 	vmov	r0, r1, d8
 8008fb8:	f7f7 fb3e 	bl	8000638 <__aeabi_dmul>
 8008fbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fc0:	1136      	asrs	r6, r6, #4
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	2502      	movs	r5, #2
 8008fc6:	2e00      	cmp	r6, #0
 8008fc8:	d17e      	bne.n	80090c8 <_dtoa_r+0x4d8>
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1d0      	bne.n	8008f70 <_dtoa_r+0x380>
 8008fce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fd0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f000 8084 	beq.w	80090e2 <_dtoa_r+0x4f2>
 8008fda:	4b96      	ldr	r3, [pc, #600]	; (8009234 <_dtoa_r+0x644>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	4640      	mov	r0, r8
 8008fe0:	4649      	mov	r1, r9
 8008fe2:	f7f7 fd9b 	bl	8000b1c <__aeabi_dcmplt>
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	d07b      	beq.n	80090e2 <_dtoa_r+0x4f2>
 8008fea:	9b04      	ldr	r3, [sp, #16]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d078      	beq.n	80090e2 <_dtoa_r+0x4f2>
 8008ff0:	9b01      	ldr	r3, [sp, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	dd39      	ble.n	800906a <_dtoa_r+0x47a>
 8008ff6:	4b90      	ldr	r3, [pc, #576]	; (8009238 <_dtoa_r+0x648>)
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	4640      	mov	r0, r8
 8008ffc:	4649      	mov	r1, r9
 8008ffe:	f7f7 fb1b 	bl	8000638 <__aeabi_dmul>
 8009002:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009006:	9e01      	ldr	r6, [sp, #4]
 8009008:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800900c:	3501      	adds	r5, #1
 800900e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009012:	4628      	mov	r0, r5
 8009014:	f7f7 faa6 	bl	8000564 <__aeabi_i2d>
 8009018:	4642      	mov	r2, r8
 800901a:	464b      	mov	r3, r9
 800901c:	f7f7 fb0c 	bl	8000638 <__aeabi_dmul>
 8009020:	4b86      	ldr	r3, [pc, #536]	; (800923c <_dtoa_r+0x64c>)
 8009022:	2200      	movs	r2, #0
 8009024:	f7f7 f952 	bl	80002cc <__adddf3>
 8009028:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800902c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009030:	9303      	str	r3, [sp, #12]
 8009032:	2e00      	cmp	r6, #0
 8009034:	d158      	bne.n	80090e8 <_dtoa_r+0x4f8>
 8009036:	4b82      	ldr	r3, [pc, #520]	; (8009240 <_dtoa_r+0x650>)
 8009038:	2200      	movs	r2, #0
 800903a:	4640      	mov	r0, r8
 800903c:	4649      	mov	r1, r9
 800903e:	f7f7 f943 	bl	80002c8 <__aeabi_dsub>
 8009042:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009046:	4680      	mov	r8, r0
 8009048:	4689      	mov	r9, r1
 800904a:	f7f7 fd85 	bl	8000b58 <__aeabi_dcmpgt>
 800904e:	2800      	cmp	r0, #0
 8009050:	f040 8296 	bne.w	8009580 <_dtoa_r+0x990>
 8009054:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009058:	4640      	mov	r0, r8
 800905a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800905e:	4649      	mov	r1, r9
 8009060:	f7f7 fd5c 	bl	8000b1c <__aeabi_dcmplt>
 8009064:	2800      	cmp	r0, #0
 8009066:	f040 8289 	bne.w	800957c <_dtoa_r+0x98c>
 800906a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800906e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009070:	2b00      	cmp	r3, #0
 8009072:	f2c0 814e 	blt.w	8009312 <_dtoa_r+0x722>
 8009076:	f1bb 0f0e 	cmp.w	fp, #14
 800907a:	f300 814a 	bgt.w	8009312 <_dtoa_r+0x722>
 800907e:	4b6b      	ldr	r3, [pc, #428]	; (800922c <_dtoa_r+0x63c>)
 8009080:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009084:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800908a:	2b00      	cmp	r3, #0
 800908c:	f280 80dc 	bge.w	8009248 <_dtoa_r+0x658>
 8009090:	9b04      	ldr	r3, [sp, #16]
 8009092:	2b00      	cmp	r3, #0
 8009094:	f300 80d8 	bgt.w	8009248 <_dtoa_r+0x658>
 8009098:	f040 826f 	bne.w	800957a <_dtoa_r+0x98a>
 800909c:	4b68      	ldr	r3, [pc, #416]	; (8009240 <_dtoa_r+0x650>)
 800909e:	2200      	movs	r2, #0
 80090a0:	4640      	mov	r0, r8
 80090a2:	4649      	mov	r1, r9
 80090a4:	f7f7 fac8 	bl	8000638 <__aeabi_dmul>
 80090a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090ac:	f7f7 fd4a 	bl	8000b44 <__aeabi_dcmpge>
 80090b0:	9e04      	ldr	r6, [sp, #16]
 80090b2:	4637      	mov	r7, r6
 80090b4:	2800      	cmp	r0, #0
 80090b6:	f040 8245 	bne.w	8009544 <_dtoa_r+0x954>
 80090ba:	9d00      	ldr	r5, [sp, #0]
 80090bc:	2331      	movs	r3, #49	; 0x31
 80090be:	f805 3b01 	strb.w	r3, [r5], #1
 80090c2:	f10b 0b01 	add.w	fp, fp, #1
 80090c6:	e241      	b.n	800954c <_dtoa_r+0x95c>
 80090c8:	07f2      	lsls	r2, r6, #31
 80090ca:	d505      	bpl.n	80090d8 <_dtoa_r+0x4e8>
 80090cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090d0:	f7f7 fab2 	bl	8000638 <__aeabi_dmul>
 80090d4:	3501      	adds	r5, #1
 80090d6:	2301      	movs	r3, #1
 80090d8:	1076      	asrs	r6, r6, #1
 80090da:	3708      	adds	r7, #8
 80090dc:	e773      	b.n	8008fc6 <_dtoa_r+0x3d6>
 80090de:	2502      	movs	r5, #2
 80090e0:	e775      	b.n	8008fce <_dtoa_r+0x3de>
 80090e2:	9e04      	ldr	r6, [sp, #16]
 80090e4:	465f      	mov	r7, fp
 80090e6:	e792      	b.n	800900e <_dtoa_r+0x41e>
 80090e8:	9900      	ldr	r1, [sp, #0]
 80090ea:	4b50      	ldr	r3, [pc, #320]	; (800922c <_dtoa_r+0x63c>)
 80090ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80090f0:	4431      	add	r1, r6
 80090f2:	9102      	str	r1, [sp, #8]
 80090f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090f6:	eeb0 9a47 	vmov.f32	s18, s14
 80090fa:	eef0 9a67 	vmov.f32	s19, s15
 80090fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009102:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009106:	2900      	cmp	r1, #0
 8009108:	d044      	beq.n	8009194 <_dtoa_r+0x5a4>
 800910a:	494e      	ldr	r1, [pc, #312]	; (8009244 <_dtoa_r+0x654>)
 800910c:	2000      	movs	r0, #0
 800910e:	f7f7 fbbd 	bl	800088c <__aeabi_ddiv>
 8009112:	ec53 2b19 	vmov	r2, r3, d9
 8009116:	f7f7 f8d7 	bl	80002c8 <__aeabi_dsub>
 800911a:	9d00      	ldr	r5, [sp, #0]
 800911c:	ec41 0b19 	vmov	d9, r0, r1
 8009120:	4649      	mov	r1, r9
 8009122:	4640      	mov	r0, r8
 8009124:	f7f7 fd38 	bl	8000b98 <__aeabi_d2iz>
 8009128:	4606      	mov	r6, r0
 800912a:	f7f7 fa1b 	bl	8000564 <__aeabi_i2d>
 800912e:	4602      	mov	r2, r0
 8009130:	460b      	mov	r3, r1
 8009132:	4640      	mov	r0, r8
 8009134:	4649      	mov	r1, r9
 8009136:	f7f7 f8c7 	bl	80002c8 <__aeabi_dsub>
 800913a:	3630      	adds	r6, #48	; 0x30
 800913c:	f805 6b01 	strb.w	r6, [r5], #1
 8009140:	ec53 2b19 	vmov	r2, r3, d9
 8009144:	4680      	mov	r8, r0
 8009146:	4689      	mov	r9, r1
 8009148:	f7f7 fce8 	bl	8000b1c <__aeabi_dcmplt>
 800914c:	2800      	cmp	r0, #0
 800914e:	d164      	bne.n	800921a <_dtoa_r+0x62a>
 8009150:	4642      	mov	r2, r8
 8009152:	464b      	mov	r3, r9
 8009154:	4937      	ldr	r1, [pc, #220]	; (8009234 <_dtoa_r+0x644>)
 8009156:	2000      	movs	r0, #0
 8009158:	f7f7 f8b6 	bl	80002c8 <__aeabi_dsub>
 800915c:	ec53 2b19 	vmov	r2, r3, d9
 8009160:	f7f7 fcdc 	bl	8000b1c <__aeabi_dcmplt>
 8009164:	2800      	cmp	r0, #0
 8009166:	f040 80b6 	bne.w	80092d6 <_dtoa_r+0x6e6>
 800916a:	9b02      	ldr	r3, [sp, #8]
 800916c:	429d      	cmp	r5, r3
 800916e:	f43f af7c 	beq.w	800906a <_dtoa_r+0x47a>
 8009172:	4b31      	ldr	r3, [pc, #196]	; (8009238 <_dtoa_r+0x648>)
 8009174:	ec51 0b19 	vmov	r0, r1, d9
 8009178:	2200      	movs	r2, #0
 800917a:	f7f7 fa5d 	bl	8000638 <__aeabi_dmul>
 800917e:	4b2e      	ldr	r3, [pc, #184]	; (8009238 <_dtoa_r+0x648>)
 8009180:	ec41 0b19 	vmov	d9, r0, r1
 8009184:	2200      	movs	r2, #0
 8009186:	4640      	mov	r0, r8
 8009188:	4649      	mov	r1, r9
 800918a:	f7f7 fa55 	bl	8000638 <__aeabi_dmul>
 800918e:	4680      	mov	r8, r0
 8009190:	4689      	mov	r9, r1
 8009192:	e7c5      	b.n	8009120 <_dtoa_r+0x530>
 8009194:	ec51 0b17 	vmov	r0, r1, d7
 8009198:	f7f7 fa4e 	bl	8000638 <__aeabi_dmul>
 800919c:	9b02      	ldr	r3, [sp, #8]
 800919e:	9d00      	ldr	r5, [sp, #0]
 80091a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80091a2:	ec41 0b19 	vmov	d9, r0, r1
 80091a6:	4649      	mov	r1, r9
 80091a8:	4640      	mov	r0, r8
 80091aa:	f7f7 fcf5 	bl	8000b98 <__aeabi_d2iz>
 80091ae:	4606      	mov	r6, r0
 80091b0:	f7f7 f9d8 	bl	8000564 <__aeabi_i2d>
 80091b4:	3630      	adds	r6, #48	; 0x30
 80091b6:	4602      	mov	r2, r0
 80091b8:	460b      	mov	r3, r1
 80091ba:	4640      	mov	r0, r8
 80091bc:	4649      	mov	r1, r9
 80091be:	f7f7 f883 	bl	80002c8 <__aeabi_dsub>
 80091c2:	f805 6b01 	strb.w	r6, [r5], #1
 80091c6:	9b02      	ldr	r3, [sp, #8]
 80091c8:	429d      	cmp	r5, r3
 80091ca:	4680      	mov	r8, r0
 80091cc:	4689      	mov	r9, r1
 80091ce:	f04f 0200 	mov.w	r2, #0
 80091d2:	d124      	bne.n	800921e <_dtoa_r+0x62e>
 80091d4:	4b1b      	ldr	r3, [pc, #108]	; (8009244 <_dtoa_r+0x654>)
 80091d6:	ec51 0b19 	vmov	r0, r1, d9
 80091da:	f7f7 f877 	bl	80002cc <__adddf3>
 80091de:	4602      	mov	r2, r0
 80091e0:	460b      	mov	r3, r1
 80091e2:	4640      	mov	r0, r8
 80091e4:	4649      	mov	r1, r9
 80091e6:	f7f7 fcb7 	bl	8000b58 <__aeabi_dcmpgt>
 80091ea:	2800      	cmp	r0, #0
 80091ec:	d173      	bne.n	80092d6 <_dtoa_r+0x6e6>
 80091ee:	ec53 2b19 	vmov	r2, r3, d9
 80091f2:	4914      	ldr	r1, [pc, #80]	; (8009244 <_dtoa_r+0x654>)
 80091f4:	2000      	movs	r0, #0
 80091f6:	f7f7 f867 	bl	80002c8 <__aeabi_dsub>
 80091fa:	4602      	mov	r2, r0
 80091fc:	460b      	mov	r3, r1
 80091fe:	4640      	mov	r0, r8
 8009200:	4649      	mov	r1, r9
 8009202:	f7f7 fc8b 	bl	8000b1c <__aeabi_dcmplt>
 8009206:	2800      	cmp	r0, #0
 8009208:	f43f af2f 	beq.w	800906a <_dtoa_r+0x47a>
 800920c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800920e:	1e6b      	subs	r3, r5, #1
 8009210:	930f      	str	r3, [sp, #60]	; 0x3c
 8009212:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009216:	2b30      	cmp	r3, #48	; 0x30
 8009218:	d0f8      	beq.n	800920c <_dtoa_r+0x61c>
 800921a:	46bb      	mov	fp, r7
 800921c:	e04a      	b.n	80092b4 <_dtoa_r+0x6c4>
 800921e:	4b06      	ldr	r3, [pc, #24]	; (8009238 <_dtoa_r+0x648>)
 8009220:	f7f7 fa0a 	bl	8000638 <__aeabi_dmul>
 8009224:	4680      	mov	r8, r0
 8009226:	4689      	mov	r9, r1
 8009228:	e7bd      	b.n	80091a6 <_dtoa_r+0x5b6>
 800922a:	bf00      	nop
 800922c:	0800b058 	.word	0x0800b058
 8009230:	0800b030 	.word	0x0800b030
 8009234:	3ff00000 	.word	0x3ff00000
 8009238:	40240000 	.word	0x40240000
 800923c:	401c0000 	.word	0x401c0000
 8009240:	40140000 	.word	0x40140000
 8009244:	3fe00000 	.word	0x3fe00000
 8009248:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800924c:	9d00      	ldr	r5, [sp, #0]
 800924e:	4642      	mov	r2, r8
 8009250:	464b      	mov	r3, r9
 8009252:	4630      	mov	r0, r6
 8009254:	4639      	mov	r1, r7
 8009256:	f7f7 fb19 	bl	800088c <__aeabi_ddiv>
 800925a:	f7f7 fc9d 	bl	8000b98 <__aeabi_d2iz>
 800925e:	9001      	str	r0, [sp, #4]
 8009260:	f7f7 f980 	bl	8000564 <__aeabi_i2d>
 8009264:	4642      	mov	r2, r8
 8009266:	464b      	mov	r3, r9
 8009268:	f7f7 f9e6 	bl	8000638 <__aeabi_dmul>
 800926c:	4602      	mov	r2, r0
 800926e:	460b      	mov	r3, r1
 8009270:	4630      	mov	r0, r6
 8009272:	4639      	mov	r1, r7
 8009274:	f7f7 f828 	bl	80002c8 <__aeabi_dsub>
 8009278:	9e01      	ldr	r6, [sp, #4]
 800927a:	9f04      	ldr	r7, [sp, #16]
 800927c:	3630      	adds	r6, #48	; 0x30
 800927e:	f805 6b01 	strb.w	r6, [r5], #1
 8009282:	9e00      	ldr	r6, [sp, #0]
 8009284:	1bae      	subs	r6, r5, r6
 8009286:	42b7      	cmp	r7, r6
 8009288:	4602      	mov	r2, r0
 800928a:	460b      	mov	r3, r1
 800928c:	d134      	bne.n	80092f8 <_dtoa_r+0x708>
 800928e:	f7f7 f81d 	bl	80002cc <__adddf3>
 8009292:	4642      	mov	r2, r8
 8009294:	464b      	mov	r3, r9
 8009296:	4606      	mov	r6, r0
 8009298:	460f      	mov	r7, r1
 800929a:	f7f7 fc5d 	bl	8000b58 <__aeabi_dcmpgt>
 800929e:	b9c8      	cbnz	r0, 80092d4 <_dtoa_r+0x6e4>
 80092a0:	4642      	mov	r2, r8
 80092a2:	464b      	mov	r3, r9
 80092a4:	4630      	mov	r0, r6
 80092a6:	4639      	mov	r1, r7
 80092a8:	f7f7 fc2e 	bl	8000b08 <__aeabi_dcmpeq>
 80092ac:	b110      	cbz	r0, 80092b4 <_dtoa_r+0x6c4>
 80092ae:	9b01      	ldr	r3, [sp, #4]
 80092b0:	07db      	lsls	r3, r3, #31
 80092b2:	d40f      	bmi.n	80092d4 <_dtoa_r+0x6e4>
 80092b4:	4651      	mov	r1, sl
 80092b6:	4620      	mov	r0, r4
 80092b8:	f000 fbcc 	bl	8009a54 <_Bfree>
 80092bc:	2300      	movs	r3, #0
 80092be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80092c0:	702b      	strb	r3, [r5, #0]
 80092c2:	f10b 0301 	add.w	r3, fp, #1
 80092c6:	6013      	str	r3, [r2, #0]
 80092c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	f43f ace2 	beq.w	8008c94 <_dtoa_r+0xa4>
 80092d0:	601d      	str	r5, [r3, #0]
 80092d2:	e4df      	b.n	8008c94 <_dtoa_r+0xa4>
 80092d4:	465f      	mov	r7, fp
 80092d6:	462b      	mov	r3, r5
 80092d8:	461d      	mov	r5, r3
 80092da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092de:	2a39      	cmp	r2, #57	; 0x39
 80092e0:	d106      	bne.n	80092f0 <_dtoa_r+0x700>
 80092e2:	9a00      	ldr	r2, [sp, #0]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d1f7      	bne.n	80092d8 <_dtoa_r+0x6e8>
 80092e8:	9900      	ldr	r1, [sp, #0]
 80092ea:	2230      	movs	r2, #48	; 0x30
 80092ec:	3701      	adds	r7, #1
 80092ee:	700a      	strb	r2, [r1, #0]
 80092f0:	781a      	ldrb	r2, [r3, #0]
 80092f2:	3201      	adds	r2, #1
 80092f4:	701a      	strb	r2, [r3, #0]
 80092f6:	e790      	b.n	800921a <_dtoa_r+0x62a>
 80092f8:	4ba3      	ldr	r3, [pc, #652]	; (8009588 <_dtoa_r+0x998>)
 80092fa:	2200      	movs	r2, #0
 80092fc:	f7f7 f99c 	bl	8000638 <__aeabi_dmul>
 8009300:	2200      	movs	r2, #0
 8009302:	2300      	movs	r3, #0
 8009304:	4606      	mov	r6, r0
 8009306:	460f      	mov	r7, r1
 8009308:	f7f7 fbfe 	bl	8000b08 <__aeabi_dcmpeq>
 800930c:	2800      	cmp	r0, #0
 800930e:	d09e      	beq.n	800924e <_dtoa_r+0x65e>
 8009310:	e7d0      	b.n	80092b4 <_dtoa_r+0x6c4>
 8009312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009314:	2a00      	cmp	r2, #0
 8009316:	f000 80ca 	beq.w	80094ae <_dtoa_r+0x8be>
 800931a:	9a07      	ldr	r2, [sp, #28]
 800931c:	2a01      	cmp	r2, #1
 800931e:	f300 80ad 	bgt.w	800947c <_dtoa_r+0x88c>
 8009322:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009324:	2a00      	cmp	r2, #0
 8009326:	f000 80a5 	beq.w	8009474 <_dtoa_r+0x884>
 800932a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800932e:	9e08      	ldr	r6, [sp, #32]
 8009330:	9d05      	ldr	r5, [sp, #20]
 8009332:	9a05      	ldr	r2, [sp, #20]
 8009334:	441a      	add	r2, r3
 8009336:	9205      	str	r2, [sp, #20]
 8009338:	9a06      	ldr	r2, [sp, #24]
 800933a:	2101      	movs	r1, #1
 800933c:	441a      	add	r2, r3
 800933e:	4620      	mov	r0, r4
 8009340:	9206      	str	r2, [sp, #24]
 8009342:	f000 fc3d 	bl	8009bc0 <__i2b>
 8009346:	4607      	mov	r7, r0
 8009348:	b165      	cbz	r5, 8009364 <_dtoa_r+0x774>
 800934a:	9b06      	ldr	r3, [sp, #24]
 800934c:	2b00      	cmp	r3, #0
 800934e:	dd09      	ble.n	8009364 <_dtoa_r+0x774>
 8009350:	42ab      	cmp	r3, r5
 8009352:	9a05      	ldr	r2, [sp, #20]
 8009354:	bfa8      	it	ge
 8009356:	462b      	movge	r3, r5
 8009358:	1ad2      	subs	r2, r2, r3
 800935a:	9205      	str	r2, [sp, #20]
 800935c:	9a06      	ldr	r2, [sp, #24]
 800935e:	1aed      	subs	r5, r5, r3
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	9306      	str	r3, [sp, #24]
 8009364:	9b08      	ldr	r3, [sp, #32]
 8009366:	b1f3      	cbz	r3, 80093a6 <_dtoa_r+0x7b6>
 8009368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800936a:	2b00      	cmp	r3, #0
 800936c:	f000 80a3 	beq.w	80094b6 <_dtoa_r+0x8c6>
 8009370:	2e00      	cmp	r6, #0
 8009372:	dd10      	ble.n	8009396 <_dtoa_r+0x7a6>
 8009374:	4639      	mov	r1, r7
 8009376:	4632      	mov	r2, r6
 8009378:	4620      	mov	r0, r4
 800937a:	f000 fce1 	bl	8009d40 <__pow5mult>
 800937e:	4652      	mov	r2, sl
 8009380:	4601      	mov	r1, r0
 8009382:	4607      	mov	r7, r0
 8009384:	4620      	mov	r0, r4
 8009386:	f000 fc31 	bl	8009bec <__multiply>
 800938a:	4651      	mov	r1, sl
 800938c:	4680      	mov	r8, r0
 800938e:	4620      	mov	r0, r4
 8009390:	f000 fb60 	bl	8009a54 <_Bfree>
 8009394:	46c2      	mov	sl, r8
 8009396:	9b08      	ldr	r3, [sp, #32]
 8009398:	1b9a      	subs	r2, r3, r6
 800939a:	d004      	beq.n	80093a6 <_dtoa_r+0x7b6>
 800939c:	4651      	mov	r1, sl
 800939e:	4620      	mov	r0, r4
 80093a0:	f000 fcce 	bl	8009d40 <__pow5mult>
 80093a4:	4682      	mov	sl, r0
 80093a6:	2101      	movs	r1, #1
 80093a8:	4620      	mov	r0, r4
 80093aa:	f000 fc09 	bl	8009bc0 <__i2b>
 80093ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	4606      	mov	r6, r0
 80093b4:	f340 8081 	ble.w	80094ba <_dtoa_r+0x8ca>
 80093b8:	461a      	mov	r2, r3
 80093ba:	4601      	mov	r1, r0
 80093bc:	4620      	mov	r0, r4
 80093be:	f000 fcbf 	bl	8009d40 <__pow5mult>
 80093c2:	9b07      	ldr	r3, [sp, #28]
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	4606      	mov	r6, r0
 80093c8:	dd7a      	ble.n	80094c0 <_dtoa_r+0x8d0>
 80093ca:	f04f 0800 	mov.w	r8, #0
 80093ce:	6933      	ldr	r3, [r6, #16]
 80093d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80093d4:	6918      	ldr	r0, [r3, #16]
 80093d6:	f000 fba5 	bl	8009b24 <__hi0bits>
 80093da:	f1c0 0020 	rsb	r0, r0, #32
 80093de:	9b06      	ldr	r3, [sp, #24]
 80093e0:	4418      	add	r0, r3
 80093e2:	f010 001f 	ands.w	r0, r0, #31
 80093e6:	f000 8094 	beq.w	8009512 <_dtoa_r+0x922>
 80093ea:	f1c0 0320 	rsb	r3, r0, #32
 80093ee:	2b04      	cmp	r3, #4
 80093f0:	f340 8085 	ble.w	80094fe <_dtoa_r+0x90e>
 80093f4:	9b05      	ldr	r3, [sp, #20]
 80093f6:	f1c0 001c 	rsb	r0, r0, #28
 80093fa:	4403      	add	r3, r0
 80093fc:	9305      	str	r3, [sp, #20]
 80093fe:	9b06      	ldr	r3, [sp, #24]
 8009400:	4403      	add	r3, r0
 8009402:	4405      	add	r5, r0
 8009404:	9306      	str	r3, [sp, #24]
 8009406:	9b05      	ldr	r3, [sp, #20]
 8009408:	2b00      	cmp	r3, #0
 800940a:	dd05      	ble.n	8009418 <_dtoa_r+0x828>
 800940c:	4651      	mov	r1, sl
 800940e:	461a      	mov	r2, r3
 8009410:	4620      	mov	r0, r4
 8009412:	f000 fcef 	bl	8009df4 <__lshift>
 8009416:	4682      	mov	sl, r0
 8009418:	9b06      	ldr	r3, [sp, #24]
 800941a:	2b00      	cmp	r3, #0
 800941c:	dd05      	ble.n	800942a <_dtoa_r+0x83a>
 800941e:	4631      	mov	r1, r6
 8009420:	461a      	mov	r2, r3
 8009422:	4620      	mov	r0, r4
 8009424:	f000 fce6 	bl	8009df4 <__lshift>
 8009428:	4606      	mov	r6, r0
 800942a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800942c:	2b00      	cmp	r3, #0
 800942e:	d072      	beq.n	8009516 <_dtoa_r+0x926>
 8009430:	4631      	mov	r1, r6
 8009432:	4650      	mov	r0, sl
 8009434:	f000 fd4a 	bl	8009ecc <__mcmp>
 8009438:	2800      	cmp	r0, #0
 800943a:	da6c      	bge.n	8009516 <_dtoa_r+0x926>
 800943c:	2300      	movs	r3, #0
 800943e:	4651      	mov	r1, sl
 8009440:	220a      	movs	r2, #10
 8009442:	4620      	mov	r0, r4
 8009444:	f000 fb28 	bl	8009a98 <__multadd>
 8009448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800944a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800944e:	4682      	mov	sl, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	f000 81b0 	beq.w	80097b6 <_dtoa_r+0xbc6>
 8009456:	2300      	movs	r3, #0
 8009458:	4639      	mov	r1, r7
 800945a:	220a      	movs	r2, #10
 800945c:	4620      	mov	r0, r4
 800945e:	f000 fb1b 	bl	8009a98 <__multadd>
 8009462:	9b01      	ldr	r3, [sp, #4]
 8009464:	2b00      	cmp	r3, #0
 8009466:	4607      	mov	r7, r0
 8009468:	f300 8096 	bgt.w	8009598 <_dtoa_r+0x9a8>
 800946c:	9b07      	ldr	r3, [sp, #28]
 800946e:	2b02      	cmp	r3, #2
 8009470:	dc59      	bgt.n	8009526 <_dtoa_r+0x936>
 8009472:	e091      	b.n	8009598 <_dtoa_r+0x9a8>
 8009474:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009476:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800947a:	e758      	b.n	800932e <_dtoa_r+0x73e>
 800947c:	9b04      	ldr	r3, [sp, #16]
 800947e:	1e5e      	subs	r6, r3, #1
 8009480:	9b08      	ldr	r3, [sp, #32]
 8009482:	42b3      	cmp	r3, r6
 8009484:	bfbf      	itttt	lt
 8009486:	9b08      	ldrlt	r3, [sp, #32]
 8009488:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800948a:	9608      	strlt	r6, [sp, #32]
 800948c:	1af3      	sublt	r3, r6, r3
 800948e:	bfb4      	ite	lt
 8009490:	18d2      	addlt	r2, r2, r3
 8009492:	1b9e      	subge	r6, r3, r6
 8009494:	9b04      	ldr	r3, [sp, #16]
 8009496:	bfbc      	itt	lt
 8009498:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800949a:	2600      	movlt	r6, #0
 800949c:	2b00      	cmp	r3, #0
 800949e:	bfb7      	itett	lt
 80094a0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80094a4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80094a8:	1a9d      	sublt	r5, r3, r2
 80094aa:	2300      	movlt	r3, #0
 80094ac:	e741      	b.n	8009332 <_dtoa_r+0x742>
 80094ae:	9e08      	ldr	r6, [sp, #32]
 80094b0:	9d05      	ldr	r5, [sp, #20]
 80094b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80094b4:	e748      	b.n	8009348 <_dtoa_r+0x758>
 80094b6:	9a08      	ldr	r2, [sp, #32]
 80094b8:	e770      	b.n	800939c <_dtoa_r+0x7ac>
 80094ba:	9b07      	ldr	r3, [sp, #28]
 80094bc:	2b01      	cmp	r3, #1
 80094be:	dc19      	bgt.n	80094f4 <_dtoa_r+0x904>
 80094c0:	9b02      	ldr	r3, [sp, #8]
 80094c2:	b9bb      	cbnz	r3, 80094f4 <_dtoa_r+0x904>
 80094c4:	9b03      	ldr	r3, [sp, #12]
 80094c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094ca:	b99b      	cbnz	r3, 80094f4 <_dtoa_r+0x904>
 80094cc:	9b03      	ldr	r3, [sp, #12]
 80094ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094d2:	0d1b      	lsrs	r3, r3, #20
 80094d4:	051b      	lsls	r3, r3, #20
 80094d6:	b183      	cbz	r3, 80094fa <_dtoa_r+0x90a>
 80094d8:	9b05      	ldr	r3, [sp, #20]
 80094da:	3301      	adds	r3, #1
 80094dc:	9305      	str	r3, [sp, #20]
 80094de:	9b06      	ldr	r3, [sp, #24]
 80094e0:	3301      	adds	r3, #1
 80094e2:	9306      	str	r3, [sp, #24]
 80094e4:	f04f 0801 	mov.w	r8, #1
 80094e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	f47f af6f 	bne.w	80093ce <_dtoa_r+0x7de>
 80094f0:	2001      	movs	r0, #1
 80094f2:	e774      	b.n	80093de <_dtoa_r+0x7ee>
 80094f4:	f04f 0800 	mov.w	r8, #0
 80094f8:	e7f6      	b.n	80094e8 <_dtoa_r+0x8f8>
 80094fa:	4698      	mov	r8, r3
 80094fc:	e7f4      	b.n	80094e8 <_dtoa_r+0x8f8>
 80094fe:	d082      	beq.n	8009406 <_dtoa_r+0x816>
 8009500:	9a05      	ldr	r2, [sp, #20]
 8009502:	331c      	adds	r3, #28
 8009504:	441a      	add	r2, r3
 8009506:	9205      	str	r2, [sp, #20]
 8009508:	9a06      	ldr	r2, [sp, #24]
 800950a:	441a      	add	r2, r3
 800950c:	441d      	add	r5, r3
 800950e:	9206      	str	r2, [sp, #24]
 8009510:	e779      	b.n	8009406 <_dtoa_r+0x816>
 8009512:	4603      	mov	r3, r0
 8009514:	e7f4      	b.n	8009500 <_dtoa_r+0x910>
 8009516:	9b04      	ldr	r3, [sp, #16]
 8009518:	2b00      	cmp	r3, #0
 800951a:	dc37      	bgt.n	800958c <_dtoa_r+0x99c>
 800951c:	9b07      	ldr	r3, [sp, #28]
 800951e:	2b02      	cmp	r3, #2
 8009520:	dd34      	ble.n	800958c <_dtoa_r+0x99c>
 8009522:	9b04      	ldr	r3, [sp, #16]
 8009524:	9301      	str	r3, [sp, #4]
 8009526:	9b01      	ldr	r3, [sp, #4]
 8009528:	b963      	cbnz	r3, 8009544 <_dtoa_r+0x954>
 800952a:	4631      	mov	r1, r6
 800952c:	2205      	movs	r2, #5
 800952e:	4620      	mov	r0, r4
 8009530:	f000 fab2 	bl	8009a98 <__multadd>
 8009534:	4601      	mov	r1, r0
 8009536:	4606      	mov	r6, r0
 8009538:	4650      	mov	r0, sl
 800953a:	f000 fcc7 	bl	8009ecc <__mcmp>
 800953e:	2800      	cmp	r0, #0
 8009540:	f73f adbb 	bgt.w	80090ba <_dtoa_r+0x4ca>
 8009544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009546:	9d00      	ldr	r5, [sp, #0]
 8009548:	ea6f 0b03 	mvn.w	fp, r3
 800954c:	f04f 0800 	mov.w	r8, #0
 8009550:	4631      	mov	r1, r6
 8009552:	4620      	mov	r0, r4
 8009554:	f000 fa7e 	bl	8009a54 <_Bfree>
 8009558:	2f00      	cmp	r7, #0
 800955a:	f43f aeab 	beq.w	80092b4 <_dtoa_r+0x6c4>
 800955e:	f1b8 0f00 	cmp.w	r8, #0
 8009562:	d005      	beq.n	8009570 <_dtoa_r+0x980>
 8009564:	45b8      	cmp	r8, r7
 8009566:	d003      	beq.n	8009570 <_dtoa_r+0x980>
 8009568:	4641      	mov	r1, r8
 800956a:	4620      	mov	r0, r4
 800956c:	f000 fa72 	bl	8009a54 <_Bfree>
 8009570:	4639      	mov	r1, r7
 8009572:	4620      	mov	r0, r4
 8009574:	f000 fa6e 	bl	8009a54 <_Bfree>
 8009578:	e69c      	b.n	80092b4 <_dtoa_r+0x6c4>
 800957a:	2600      	movs	r6, #0
 800957c:	4637      	mov	r7, r6
 800957e:	e7e1      	b.n	8009544 <_dtoa_r+0x954>
 8009580:	46bb      	mov	fp, r7
 8009582:	4637      	mov	r7, r6
 8009584:	e599      	b.n	80090ba <_dtoa_r+0x4ca>
 8009586:	bf00      	nop
 8009588:	40240000 	.word	0x40240000
 800958c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800958e:	2b00      	cmp	r3, #0
 8009590:	f000 80c8 	beq.w	8009724 <_dtoa_r+0xb34>
 8009594:	9b04      	ldr	r3, [sp, #16]
 8009596:	9301      	str	r3, [sp, #4]
 8009598:	2d00      	cmp	r5, #0
 800959a:	dd05      	ble.n	80095a8 <_dtoa_r+0x9b8>
 800959c:	4639      	mov	r1, r7
 800959e:	462a      	mov	r2, r5
 80095a0:	4620      	mov	r0, r4
 80095a2:	f000 fc27 	bl	8009df4 <__lshift>
 80095a6:	4607      	mov	r7, r0
 80095a8:	f1b8 0f00 	cmp.w	r8, #0
 80095ac:	d05b      	beq.n	8009666 <_dtoa_r+0xa76>
 80095ae:	6879      	ldr	r1, [r7, #4]
 80095b0:	4620      	mov	r0, r4
 80095b2:	f000 fa0f 	bl	80099d4 <_Balloc>
 80095b6:	4605      	mov	r5, r0
 80095b8:	b928      	cbnz	r0, 80095c6 <_dtoa_r+0x9d6>
 80095ba:	4b83      	ldr	r3, [pc, #524]	; (80097c8 <_dtoa_r+0xbd8>)
 80095bc:	4602      	mov	r2, r0
 80095be:	f240 21ef 	movw	r1, #751	; 0x2ef
 80095c2:	f7ff bb2e 	b.w	8008c22 <_dtoa_r+0x32>
 80095c6:	693a      	ldr	r2, [r7, #16]
 80095c8:	3202      	adds	r2, #2
 80095ca:	0092      	lsls	r2, r2, #2
 80095cc:	f107 010c 	add.w	r1, r7, #12
 80095d0:	300c      	adds	r0, #12
 80095d2:	f7ff fa75 	bl	8008ac0 <memcpy>
 80095d6:	2201      	movs	r2, #1
 80095d8:	4629      	mov	r1, r5
 80095da:	4620      	mov	r0, r4
 80095dc:	f000 fc0a 	bl	8009df4 <__lshift>
 80095e0:	9b00      	ldr	r3, [sp, #0]
 80095e2:	3301      	adds	r3, #1
 80095e4:	9304      	str	r3, [sp, #16]
 80095e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095ea:	4413      	add	r3, r2
 80095ec:	9308      	str	r3, [sp, #32]
 80095ee:	9b02      	ldr	r3, [sp, #8]
 80095f0:	f003 0301 	and.w	r3, r3, #1
 80095f4:	46b8      	mov	r8, r7
 80095f6:	9306      	str	r3, [sp, #24]
 80095f8:	4607      	mov	r7, r0
 80095fa:	9b04      	ldr	r3, [sp, #16]
 80095fc:	4631      	mov	r1, r6
 80095fe:	3b01      	subs	r3, #1
 8009600:	4650      	mov	r0, sl
 8009602:	9301      	str	r3, [sp, #4]
 8009604:	f7ff fa6a 	bl	8008adc <quorem>
 8009608:	4641      	mov	r1, r8
 800960a:	9002      	str	r0, [sp, #8]
 800960c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009610:	4650      	mov	r0, sl
 8009612:	f000 fc5b 	bl	8009ecc <__mcmp>
 8009616:	463a      	mov	r2, r7
 8009618:	9005      	str	r0, [sp, #20]
 800961a:	4631      	mov	r1, r6
 800961c:	4620      	mov	r0, r4
 800961e:	f000 fc71 	bl	8009f04 <__mdiff>
 8009622:	68c2      	ldr	r2, [r0, #12]
 8009624:	4605      	mov	r5, r0
 8009626:	bb02      	cbnz	r2, 800966a <_dtoa_r+0xa7a>
 8009628:	4601      	mov	r1, r0
 800962a:	4650      	mov	r0, sl
 800962c:	f000 fc4e 	bl	8009ecc <__mcmp>
 8009630:	4602      	mov	r2, r0
 8009632:	4629      	mov	r1, r5
 8009634:	4620      	mov	r0, r4
 8009636:	9209      	str	r2, [sp, #36]	; 0x24
 8009638:	f000 fa0c 	bl	8009a54 <_Bfree>
 800963c:	9b07      	ldr	r3, [sp, #28]
 800963e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009640:	9d04      	ldr	r5, [sp, #16]
 8009642:	ea43 0102 	orr.w	r1, r3, r2
 8009646:	9b06      	ldr	r3, [sp, #24]
 8009648:	4319      	orrs	r1, r3
 800964a:	d110      	bne.n	800966e <_dtoa_r+0xa7e>
 800964c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009650:	d029      	beq.n	80096a6 <_dtoa_r+0xab6>
 8009652:	9b05      	ldr	r3, [sp, #20]
 8009654:	2b00      	cmp	r3, #0
 8009656:	dd02      	ble.n	800965e <_dtoa_r+0xa6e>
 8009658:	9b02      	ldr	r3, [sp, #8]
 800965a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800965e:	9b01      	ldr	r3, [sp, #4]
 8009660:	f883 9000 	strb.w	r9, [r3]
 8009664:	e774      	b.n	8009550 <_dtoa_r+0x960>
 8009666:	4638      	mov	r0, r7
 8009668:	e7ba      	b.n	80095e0 <_dtoa_r+0x9f0>
 800966a:	2201      	movs	r2, #1
 800966c:	e7e1      	b.n	8009632 <_dtoa_r+0xa42>
 800966e:	9b05      	ldr	r3, [sp, #20]
 8009670:	2b00      	cmp	r3, #0
 8009672:	db04      	blt.n	800967e <_dtoa_r+0xa8e>
 8009674:	9907      	ldr	r1, [sp, #28]
 8009676:	430b      	orrs	r3, r1
 8009678:	9906      	ldr	r1, [sp, #24]
 800967a:	430b      	orrs	r3, r1
 800967c:	d120      	bne.n	80096c0 <_dtoa_r+0xad0>
 800967e:	2a00      	cmp	r2, #0
 8009680:	dded      	ble.n	800965e <_dtoa_r+0xa6e>
 8009682:	4651      	mov	r1, sl
 8009684:	2201      	movs	r2, #1
 8009686:	4620      	mov	r0, r4
 8009688:	f000 fbb4 	bl	8009df4 <__lshift>
 800968c:	4631      	mov	r1, r6
 800968e:	4682      	mov	sl, r0
 8009690:	f000 fc1c 	bl	8009ecc <__mcmp>
 8009694:	2800      	cmp	r0, #0
 8009696:	dc03      	bgt.n	80096a0 <_dtoa_r+0xab0>
 8009698:	d1e1      	bne.n	800965e <_dtoa_r+0xa6e>
 800969a:	f019 0f01 	tst.w	r9, #1
 800969e:	d0de      	beq.n	800965e <_dtoa_r+0xa6e>
 80096a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80096a4:	d1d8      	bne.n	8009658 <_dtoa_r+0xa68>
 80096a6:	9a01      	ldr	r2, [sp, #4]
 80096a8:	2339      	movs	r3, #57	; 0x39
 80096aa:	7013      	strb	r3, [r2, #0]
 80096ac:	462b      	mov	r3, r5
 80096ae:	461d      	mov	r5, r3
 80096b0:	3b01      	subs	r3, #1
 80096b2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80096b6:	2a39      	cmp	r2, #57	; 0x39
 80096b8:	d06c      	beq.n	8009794 <_dtoa_r+0xba4>
 80096ba:	3201      	adds	r2, #1
 80096bc:	701a      	strb	r2, [r3, #0]
 80096be:	e747      	b.n	8009550 <_dtoa_r+0x960>
 80096c0:	2a00      	cmp	r2, #0
 80096c2:	dd07      	ble.n	80096d4 <_dtoa_r+0xae4>
 80096c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80096c8:	d0ed      	beq.n	80096a6 <_dtoa_r+0xab6>
 80096ca:	9a01      	ldr	r2, [sp, #4]
 80096cc:	f109 0301 	add.w	r3, r9, #1
 80096d0:	7013      	strb	r3, [r2, #0]
 80096d2:	e73d      	b.n	8009550 <_dtoa_r+0x960>
 80096d4:	9b04      	ldr	r3, [sp, #16]
 80096d6:	9a08      	ldr	r2, [sp, #32]
 80096d8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80096dc:	4293      	cmp	r3, r2
 80096de:	d043      	beq.n	8009768 <_dtoa_r+0xb78>
 80096e0:	4651      	mov	r1, sl
 80096e2:	2300      	movs	r3, #0
 80096e4:	220a      	movs	r2, #10
 80096e6:	4620      	mov	r0, r4
 80096e8:	f000 f9d6 	bl	8009a98 <__multadd>
 80096ec:	45b8      	cmp	r8, r7
 80096ee:	4682      	mov	sl, r0
 80096f0:	f04f 0300 	mov.w	r3, #0
 80096f4:	f04f 020a 	mov.w	r2, #10
 80096f8:	4641      	mov	r1, r8
 80096fa:	4620      	mov	r0, r4
 80096fc:	d107      	bne.n	800970e <_dtoa_r+0xb1e>
 80096fe:	f000 f9cb 	bl	8009a98 <__multadd>
 8009702:	4680      	mov	r8, r0
 8009704:	4607      	mov	r7, r0
 8009706:	9b04      	ldr	r3, [sp, #16]
 8009708:	3301      	adds	r3, #1
 800970a:	9304      	str	r3, [sp, #16]
 800970c:	e775      	b.n	80095fa <_dtoa_r+0xa0a>
 800970e:	f000 f9c3 	bl	8009a98 <__multadd>
 8009712:	4639      	mov	r1, r7
 8009714:	4680      	mov	r8, r0
 8009716:	2300      	movs	r3, #0
 8009718:	220a      	movs	r2, #10
 800971a:	4620      	mov	r0, r4
 800971c:	f000 f9bc 	bl	8009a98 <__multadd>
 8009720:	4607      	mov	r7, r0
 8009722:	e7f0      	b.n	8009706 <_dtoa_r+0xb16>
 8009724:	9b04      	ldr	r3, [sp, #16]
 8009726:	9301      	str	r3, [sp, #4]
 8009728:	9d00      	ldr	r5, [sp, #0]
 800972a:	4631      	mov	r1, r6
 800972c:	4650      	mov	r0, sl
 800972e:	f7ff f9d5 	bl	8008adc <quorem>
 8009732:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009736:	9b00      	ldr	r3, [sp, #0]
 8009738:	f805 9b01 	strb.w	r9, [r5], #1
 800973c:	1aea      	subs	r2, r5, r3
 800973e:	9b01      	ldr	r3, [sp, #4]
 8009740:	4293      	cmp	r3, r2
 8009742:	dd07      	ble.n	8009754 <_dtoa_r+0xb64>
 8009744:	4651      	mov	r1, sl
 8009746:	2300      	movs	r3, #0
 8009748:	220a      	movs	r2, #10
 800974a:	4620      	mov	r0, r4
 800974c:	f000 f9a4 	bl	8009a98 <__multadd>
 8009750:	4682      	mov	sl, r0
 8009752:	e7ea      	b.n	800972a <_dtoa_r+0xb3a>
 8009754:	9b01      	ldr	r3, [sp, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	bfc8      	it	gt
 800975a:	461d      	movgt	r5, r3
 800975c:	9b00      	ldr	r3, [sp, #0]
 800975e:	bfd8      	it	le
 8009760:	2501      	movle	r5, #1
 8009762:	441d      	add	r5, r3
 8009764:	f04f 0800 	mov.w	r8, #0
 8009768:	4651      	mov	r1, sl
 800976a:	2201      	movs	r2, #1
 800976c:	4620      	mov	r0, r4
 800976e:	f000 fb41 	bl	8009df4 <__lshift>
 8009772:	4631      	mov	r1, r6
 8009774:	4682      	mov	sl, r0
 8009776:	f000 fba9 	bl	8009ecc <__mcmp>
 800977a:	2800      	cmp	r0, #0
 800977c:	dc96      	bgt.n	80096ac <_dtoa_r+0xabc>
 800977e:	d102      	bne.n	8009786 <_dtoa_r+0xb96>
 8009780:	f019 0f01 	tst.w	r9, #1
 8009784:	d192      	bne.n	80096ac <_dtoa_r+0xabc>
 8009786:	462b      	mov	r3, r5
 8009788:	461d      	mov	r5, r3
 800978a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800978e:	2a30      	cmp	r2, #48	; 0x30
 8009790:	d0fa      	beq.n	8009788 <_dtoa_r+0xb98>
 8009792:	e6dd      	b.n	8009550 <_dtoa_r+0x960>
 8009794:	9a00      	ldr	r2, [sp, #0]
 8009796:	429a      	cmp	r2, r3
 8009798:	d189      	bne.n	80096ae <_dtoa_r+0xabe>
 800979a:	f10b 0b01 	add.w	fp, fp, #1
 800979e:	2331      	movs	r3, #49	; 0x31
 80097a0:	e796      	b.n	80096d0 <_dtoa_r+0xae0>
 80097a2:	4b0a      	ldr	r3, [pc, #40]	; (80097cc <_dtoa_r+0xbdc>)
 80097a4:	f7ff ba99 	b.w	8008cda <_dtoa_r+0xea>
 80097a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	f47f aa6d 	bne.w	8008c8a <_dtoa_r+0x9a>
 80097b0:	4b07      	ldr	r3, [pc, #28]	; (80097d0 <_dtoa_r+0xbe0>)
 80097b2:	f7ff ba92 	b.w	8008cda <_dtoa_r+0xea>
 80097b6:	9b01      	ldr	r3, [sp, #4]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	dcb5      	bgt.n	8009728 <_dtoa_r+0xb38>
 80097bc:	9b07      	ldr	r3, [sp, #28]
 80097be:	2b02      	cmp	r3, #2
 80097c0:	f73f aeb1 	bgt.w	8009526 <_dtoa_r+0x936>
 80097c4:	e7b0      	b.n	8009728 <_dtoa_r+0xb38>
 80097c6:	bf00      	nop
 80097c8:	0800afc0 	.word	0x0800afc0
 80097cc:	0800af20 	.word	0x0800af20
 80097d0:	0800af44 	.word	0x0800af44

080097d4 <_free_r>:
 80097d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097d6:	2900      	cmp	r1, #0
 80097d8:	d044      	beq.n	8009864 <_free_r+0x90>
 80097da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097de:	9001      	str	r0, [sp, #4]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f1a1 0404 	sub.w	r4, r1, #4
 80097e6:	bfb8      	it	lt
 80097e8:	18e4      	addlt	r4, r4, r3
 80097ea:	f000 f8e7 	bl	80099bc <__malloc_lock>
 80097ee:	4a1e      	ldr	r2, [pc, #120]	; (8009868 <_free_r+0x94>)
 80097f0:	9801      	ldr	r0, [sp, #4]
 80097f2:	6813      	ldr	r3, [r2, #0]
 80097f4:	b933      	cbnz	r3, 8009804 <_free_r+0x30>
 80097f6:	6063      	str	r3, [r4, #4]
 80097f8:	6014      	str	r4, [r2, #0]
 80097fa:	b003      	add	sp, #12
 80097fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009800:	f000 b8e2 	b.w	80099c8 <__malloc_unlock>
 8009804:	42a3      	cmp	r3, r4
 8009806:	d908      	bls.n	800981a <_free_r+0x46>
 8009808:	6825      	ldr	r5, [r4, #0]
 800980a:	1961      	adds	r1, r4, r5
 800980c:	428b      	cmp	r3, r1
 800980e:	bf01      	itttt	eq
 8009810:	6819      	ldreq	r1, [r3, #0]
 8009812:	685b      	ldreq	r3, [r3, #4]
 8009814:	1949      	addeq	r1, r1, r5
 8009816:	6021      	streq	r1, [r4, #0]
 8009818:	e7ed      	b.n	80097f6 <_free_r+0x22>
 800981a:	461a      	mov	r2, r3
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	b10b      	cbz	r3, 8009824 <_free_r+0x50>
 8009820:	42a3      	cmp	r3, r4
 8009822:	d9fa      	bls.n	800981a <_free_r+0x46>
 8009824:	6811      	ldr	r1, [r2, #0]
 8009826:	1855      	adds	r5, r2, r1
 8009828:	42a5      	cmp	r5, r4
 800982a:	d10b      	bne.n	8009844 <_free_r+0x70>
 800982c:	6824      	ldr	r4, [r4, #0]
 800982e:	4421      	add	r1, r4
 8009830:	1854      	adds	r4, r2, r1
 8009832:	42a3      	cmp	r3, r4
 8009834:	6011      	str	r1, [r2, #0]
 8009836:	d1e0      	bne.n	80097fa <_free_r+0x26>
 8009838:	681c      	ldr	r4, [r3, #0]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	6053      	str	r3, [r2, #4]
 800983e:	440c      	add	r4, r1
 8009840:	6014      	str	r4, [r2, #0]
 8009842:	e7da      	b.n	80097fa <_free_r+0x26>
 8009844:	d902      	bls.n	800984c <_free_r+0x78>
 8009846:	230c      	movs	r3, #12
 8009848:	6003      	str	r3, [r0, #0]
 800984a:	e7d6      	b.n	80097fa <_free_r+0x26>
 800984c:	6825      	ldr	r5, [r4, #0]
 800984e:	1961      	adds	r1, r4, r5
 8009850:	428b      	cmp	r3, r1
 8009852:	bf04      	itt	eq
 8009854:	6819      	ldreq	r1, [r3, #0]
 8009856:	685b      	ldreq	r3, [r3, #4]
 8009858:	6063      	str	r3, [r4, #4]
 800985a:	bf04      	itt	eq
 800985c:	1949      	addeq	r1, r1, r5
 800985e:	6021      	streq	r1, [r4, #0]
 8009860:	6054      	str	r4, [r2, #4]
 8009862:	e7ca      	b.n	80097fa <_free_r+0x26>
 8009864:	b003      	add	sp, #12
 8009866:	bd30      	pop	{r4, r5, pc}
 8009868:	200005f4 	.word	0x200005f4

0800986c <malloc>:
 800986c:	4b02      	ldr	r3, [pc, #8]	; (8009878 <malloc+0xc>)
 800986e:	4601      	mov	r1, r0
 8009870:	6818      	ldr	r0, [r3, #0]
 8009872:	f000 b823 	b.w	80098bc <_malloc_r>
 8009876:	bf00      	nop
 8009878:	2000008c 	.word	0x2000008c

0800987c <sbrk_aligned>:
 800987c:	b570      	push	{r4, r5, r6, lr}
 800987e:	4e0e      	ldr	r6, [pc, #56]	; (80098b8 <sbrk_aligned+0x3c>)
 8009880:	460c      	mov	r4, r1
 8009882:	6831      	ldr	r1, [r6, #0]
 8009884:	4605      	mov	r5, r0
 8009886:	b911      	cbnz	r1, 800988e <sbrk_aligned+0x12>
 8009888:	f000 fe40 	bl	800a50c <_sbrk_r>
 800988c:	6030      	str	r0, [r6, #0]
 800988e:	4621      	mov	r1, r4
 8009890:	4628      	mov	r0, r5
 8009892:	f000 fe3b 	bl	800a50c <_sbrk_r>
 8009896:	1c43      	adds	r3, r0, #1
 8009898:	d00a      	beq.n	80098b0 <sbrk_aligned+0x34>
 800989a:	1cc4      	adds	r4, r0, #3
 800989c:	f024 0403 	bic.w	r4, r4, #3
 80098a0:	42a0      	cmp	r0, r4
 80098a2:	d007      	beq.n	80098b4 <sbrk_aligned+0x38>
 80098a4:	1a21      	subs	r1, r4, r0
 80098a6:	4628      	mov	r0, r5
 80098a8:	f000 fe30 	bl	800a50c <_sbrk_r>
 80098ac:	3001      	adds	r0, #1
 80098ae:	d101      	bne.n	80098b4 <sbrk_aligned+0x38>
 80098b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80098b4:	4620      	mov	r0, r4
 80098b6:	bd70      	pop	{r4, r5, r6, pc}
 80098b8:	200005f8 	.word	0x200005f8

080098bc <_malloc_r>:
 80098bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098c0:	1ccd      	adds	r5, r1, #3
 80098c2:	f025 0503 	bic.w	r5, r5, #3
 80098c6:	3508      	adds	r5, #8
 80098c8:	2d0c      	cmp	r5, #12
 80098ca:	bf38      	it	cc
 80098cc:	250c      	movcc	r5, #12
 80098ce:	2d00      	cmp	r5, #0
 80098d0:	4607      	mov	r7, r0
 80098d2:	db01      	blt.n	80098d8 <_malloc_r+0x1c>
 80098d4:	42a9      	cmp	r1, r5
 80098d6:	d905      	bls.n	80098e4 <_malloc_r+0x28>
 80098d8:	230c      	movs	r3, #12
 80098da:	603b      	str	r3, [r7, #0]
 80098dc:	2600      	movs	r6, #0
 80098de:	4630      	mov	r0, r6
 80098e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80099b8 <_malloc_r+0xfc>
 80098e8:	f000 f868 	bl	80099bc <__malloc_lock>
 80098ec:	f8d8 3000 	ldr.w	r3, [r8]
 80098f0:	461c      	mov	r4, r3
 80098f2:	bb5c      	cbnz	r4, 800994c <_malloc_r+0x90>
 80098f4:	4629      	mov	r1, r5
 80098f6:	4638      	mov	r0, r7
 80098f8:	f7ff ffc0 	bl	800987c <sbrk_aligned>
 80098fc:	1c43      	adds	r3, r0, #1
 80098fe:	4604      	mov	r4, r0
 8009900:	d155      	bne.n	80099ae <_malloc_r+0xf2>
 8009902:	f8d8 4000 	ldr.w	r4, [r8]
 8009906:	4626      	mov	r6, r4
 8009908:	2e00      	cmp	r6, #0
 800990a:	d145      	bne.n	8009998 <_malloc_r+0xdc>
 800990c:	2c00      	cmp	r4, #0
 800990e:	d048      	beq.n	80099a2 <_malloc_r+0xe6>
 8009910:	6823      	ldr	r3, [r4, #0]
 8009912:	4631      	mov	r1, r6
 8009914:	4638      	mov	r0, r7
 8009916:	eb04 0903 	add.w	r9, r4, r3
 800991a:	f000 fdf7 	bl	800a50c <_sbrk_r>
 800991e:	4581      	cmp	r9, r0
 8009920:	d13f      	bne.n	80099a2 <_malloc_r+0xe6>
 8009922:	6821      	ldr	r1, [r4, #0]
 8009924:	1a6d      	subs	r5, r5, r1
 8009926:	4629      	mov	r1, r5
 8009928:	4638      	mov	r0, r7
 800992a:	f7ff ffa7 	bl	800987c <sbrk_aligned>
 800992e:	3001      	adds	r0, #1
 8009930:	d037      	beq.n	80099a2 <_malloc_r+0xe6>
 8009932:	6823      	ldr	r3, [r4, #0]
 8009934:	442b      	add	r3, r5
 8009936:	6023      	str	r3, [r4, #0]
 8009938:	f8d8 3000 	ldr.w	r3, [r8]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d038      	beq.n	80099b2 <_malloc_r+0xf6>
 8009940:	685a      	ldr	r2, [r3, #4]
 8009942:	42a2      	cmp	r2, r4
 8009944:	d12b      	bne.n	800999e <_malloc_r+0xe2>
 8009946:	2200      	movs	r2, #0
 8009948:	605a      	str	r2, [r3, #4]
 800994a:	e00f      	b.n	800996c <_malloc_r+0xb0>
 800994c:	6822      	ldr	r2, [r4, #0]
 800994e:	1b52      	subs	r2, r2, r5
 8009950:	d41f      	bmi.n	8009992 <_malloc_r+0xd6>
 8009952:	2a0b      	cmp	r2, #11
 8009954:	d917      	bls.n	8009986 <_malloc_r+0xca>
 8009956:	1961      	adds	r1, r4, r5
 8009958:	42a3      	cmp	r3, r4
 800995a:	6025      	str	r5, [r4, #0]
 800995c:	bf18      	it	ne
 800995e:	6059      	strne	r1, [r3, #4]
 8009960:	6863      	ldr	r3, [r4, #4]
 8009962:	bf08      	it	eq
 8009964:	f8c8 1000 	streq.w	r1, [r8]
 8009968:	5162      	str	r2, [r4, r5]
 800996a:	604b      	str	r3, [r1, #4]
 800996c:	4638      	mov	r0, r7
 800996e:	f104 060b 	add.w	r6, r4, #11
 8009972:	f000 f829 	bl	80099c8 <__malloc_unlock>
 8009976:	f026 0607 	bic.w	r6, r6, #7
 800997a:	1d23      	adds	r3, r4, #4
 800997c:	1af2      	subs	r2, r6, r3
 800997e:	d0ae      	beq.n	80098de <_malloc_r+0x22>
 8009980:	1b9b      	subs	r3, r3, r6
 8009982:	50a3      	str	r3, [r4, r2]
 8009984:	e7ab      	b.n	80098de <_malloc_r+0x22>
 8009986:	42a3      	cmp	r3, r4
 8009988:	6862      	ldr	r2, [r4, #4]
 800998a:	d1dd      	bne.n	8009948 <_malloc_r+0x8c>
 800998c:	f8c8 2000 	str.w	r2, [r8]
 8009990:	e7ec      	b.n	800996c <_malloc_r+0xb0>
 8009992:	4623      	mov	r3, r4
 8009994:	6864      	ldr	r4, [r4, #4]
 8009996:	e7ac      	b.n	80098f2 <_malloc_r+0x36>
 8009998:	4634      	mov	r4, r6
 800999a:	6876      	ldr	r6, [r6, #4]
 800999c:	e7b4      	b.n	8009908 <_malloc_r+0x4c>
 800999e:	4613      	mov	r3, r2
 80099a0:	e7cc      	b.n	800993c <_malloc_r+0x80>
 80099a2:	230c      	movs	r3, #12
 80099a4:	603b      	str	r3, [r7, #0]
 80099a6:	4638      	mov	r0, r7
 80099a8:	f000 f80e 	bl	80099c8 <__malloc_unlock>
 80099ac:	e797      	b.n	80098de <_malloc_r+0x22>
 80099ae:	6025      	str	r5, [r4, #0]
 80099b0:	e7dc      	b.n	800996c <_malloc_r+0xb0>
 80099b2:	605b      	str	r3, [r3, #4]
 80099b4:	deff      	udf	#255	; 0xff
 80099b6:	bf00      	nop
 80099b8:	200005f4 	.word	0x200005f4

080099bc <__malloc_lock>:
 80099bc:	4801      	ldr	r0, [pc, #4]	; (80099c4 <__malloc_lock+0x8>)
 80099be:	f7ff b87d 	b.w	8008abc <__retarget_lock_acquire_recursive>
 80099c2:	bf00      	nop
 80099c4:	200005f0 	.word	0x200005f0

080099c8 <__malloc_unlock>:
 80099c8:	4801      	ldr	r0, [pc, #4]	; (80099d0 <__malloc_unlock+0x8>)
 80099ca:	f7ff b878 	b.w	8008abe <__retarget_lock_release_recursive>
 80099ce:	bf00      	nop
 80099d0:	200005f0 	.word	0x200005f0

080099d4 <_Balloc>:
 80099d4:	b570      	push	{r4, r5, r6, lr}
 80099d6:	69c6      	ldr	r6, [r0, #28]
 80099d8:	4604      	mov	r4, r0
 80099da:	460d      	mov	r5, r1
 80099dc:	b976      	cbnz	r6, 80099fc <_Balloc+0x28>
 80099de:	2010      	movs	r0, #16
 80099e0:	f7ff ff44 	bl	800986c <malloc>
 80099e4:	4602      	mov	r2, r0
 80099e6:	61e0      	str	r0, [r4, #28]
 80099e8:	b920      	cbnz	r0, 80099f4 <_Balloc+0x20>
 80099ea:	4b18      	ldr	r3, [pc, #96]	; (8009a4c <_Balloc+0x78>)
 80099ec:	4818      	ldr	r0, [pc, #96]	; (8009a50 <_Balloc+0x7c>)
 80099ee:	216b      	movs	r1, #107	; 0x6b
 80099f0:	f000 fd9c 	bl	800a52c <__assert_func>
 80099f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099f8:	6006      	str	r6, [r0, #0]
 80099fa:	60c6      	str	r6, [r0, #12]
 80099fc:	69e6      	ldr	r6, [r4, #28]
 80099fe:	68f3      	ldr	r3, [r6, #12]
 8009a00:	b183      	cbz	r3, 8009a24 <_Balloc+0x50>
 8009a02:	69e3      	ldr	r3, [r4, #28]
 8009a04:	68db      	ldr	r3, [r3, #12]
 8009a06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a0a:	b9b8      	cbnz	r0, 8009a3c <_Balloc+0x68>
 8009a0c:	2101      	movs	r1, #1
 8009a0e:	fa01 f605 	lsl.w	r6, r1, r5
 8009a12:	1d72      	adds	r2, r6, #5
 8009a14:	0092      	lsls	r2, r2, #2
 8009a16:	4620      	mov	r0, r4
 8009a18:	f000 fda6 	bl	800a568 <_calloc_r>
 8009a1c:	b160      	cbz	r0, 8009a38 <_Balloc+0x64>
 8009a1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a22:	e00e      	b.n	8009a42 <_Balloc+0x6e>
 8009a24:	2221      	movs	r2, #33	; 0x21
 8009a26:	2104      	movs	r1, #4
 8009a28:	4620      	mov	r0, r4
 8009a2a:	f000 fd9d 	bl	800a568 <_calloc_r>
 8009a2e:	69e3      	ldr	r3, [r4, #28]
 8009a30:	60f0      	str	r0, [r6, #12]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d1e4      	bne.n	8009a02 <_Balloc+0x2e>
 8009a38:	2000      	movs	r0, #0
 8009a3a:	bd70      	pop	{r4, r5, r6, pc}
 8009a3c:	6802      	ldr	r2, [r0, #0]
 8009a3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a42:	2300      	movs	r3, #0
 8009a44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a48:	e7f7      	b.n	8009a3a <_Balloc+0x66>
 8009a4a:	bf00      	nop
 8009a4c:	0800af51 	.word	0x0800af51
 8009a50:	0800afd1 	.word	0x0800afd1

08009a54 <_Bfree>:
 8009a54:	b570      	push	{r4, r5, r6, lr}
 8009a56:	69c6      	ldr	r6, [r0, #28]
 8009a58:	4605      	mov	r5, r0
 8009a5a:	460c      	mov	r4, r1
 8009a5c:	b976      	cbnz	r6, 8009a7c <_Bfree+0x28>
 8009a5e:	2010      	movs	r0, #16
 8009a60:	f7ff ff04 	bl	800986c <malloc>
 8009a64:	4602      	mov	r2, r0
 8009a66:	61e8      	str	r0, [r5, #28]
 8009a68:	b920      	cbnz	r0, 8009a74 <_Bfree+0x20>
 8009a6a:	4b09      	ldr	r3, [pc, #36]	; (8009a90 <_Bfree+0x3c>)
 8009a6c:	4809      	ldr	r0, [pc, #36]	; (8009a94 <_Bfree+0x40>)
 8009a6e:	218f      	movs	r1, #143	; 0x8f
 8009a70:	f000 fd5c 	bl	800a52c <__assert_func>
 8009a74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a78:	6006      	str	r6, [r0, #0]
 8009a7a:	60c6      	str	r6, [r0, #12]
 8009a7c:	b13c      	cbz	r4, 8009a8e <_Bfree+0x3a>
 8009a7e:	69eb      	ldr	r3, [r5, #28]
 8009a80:	6862      	ldr	r2, [r4, #4]
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a88:	6021      	str	r1, [r4, #0]
 8009a8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a8e:	bd70      	pop	{r4, r5, r6, pc}
 8009a90:	0800af51 	.word	0x0800af51
 8009a94:	0800afd1 	.word	0x0800afd1

08009a98 <__multadd>:
 8009a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a9c:	690d      	ldr	r5, [r1, #16]
 8009a9e:	4607      	mov	r7, r0
 8009aa0:	460c      	mov	r4, r1
 8009aa2:	461e      	mov	r6, r3
 8009aa4:	f101 0c14 	add.w	ip, r1, #20
 8009aa8:	2000      	movs	r0, #0
 8009aaa:	f8dc 3000 	ldr.w	r3, [ip]
 8009aae:	b299      	uxth	r1, r3
 8009ab0:	fb02 6101 	mla	r1, r2, r1, r6
 8009ab4:	0c1e      	lsrs	r6, r3, #16
 8009ab6:	0c0b      	lsrs	r3, r1, #16
 8009ab8:	fb02 3306 	mla	r3, r2, r6, r3
 8009abc:	b289      	uxth	r1, r1
 8009abe:	3001      	adds	r0, #1
 8009ac0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ac4:	4285      	cmp	r5, r0
 8009ac6:	f84c 1b04 	str.w	r1, [ip], #4
 8009aca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009ace:	dcec      	bgt.n	8009aaa <__multadd+0x12>
 8009ad0:	b30e      	cbz	r6, 8009b16 <__multadd+0x7e>
 8009ad2:	68a3      	ldr	r3, [r4, #8]
 8009ad4:	42ab      	cmp	r3, r5
 8009ad6:	dc19      	bgt.n	8009b0c <__multadd+0x74>
 8009ad8:	6861      	ldr	r1, [r4, #4]
 8009ada:	4638      	mov	r0, r7
 8009adc:	3101      	adds	r1, #1
 8009ade:	f7ff ff79 	bl	80099d4 <_Balloc>
 8009ae2:	4680      	mov	r8, r0
 8009ae4:	b928      	cbnz	r0, 8009af2 <__multadd+0x5a>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	4b0c      	ldr	r3, [pc, #48]	; (8009b1c <__multadd+0x84>)
 8009aea:	480d      	ldr	r0, [pc, #52]	; (8009b20 <__multadd+0x88>)
 8009aec:	21ba      	movs	r1, #186	; 0xba
 8009aee:	f000 fd1d 	bl	800a52c <__assert_func>
 8009af2:	6922      	ldr	r2, [r4, #16]
 8009af4:	3202      	adds	r2, #2
 8009af6:	f104 010c 	add.w	r1, r4, #12
 8009afa:	0092      	lsls	r2, r2, #2
 8009afc:	300c      	adds	r0, #12
 8009afe:	f7fe ffdf 	bl	8008ac0 <memcpy>
 8009b02:	4621      	mov	r1, r4
 8009b04:	4638      	mov	r0, r7
 8009b06:	f7ff ffa5 	bl	8009a54 <_Bfree>
 8009b0a:	4644      	mov	r4, r8
 8009b0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b10:	3501      	adds	r5, #1
 8009b12:	615e      	str	r6, [r3, #20]
 8009b14:	6125      	str	r5, [r4, #16]
 8009b16:	4620      	mov	r0, r4
 8009b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b1c:	0800afc0 	.word	0x0800afc0
 8009b20:	0800afd1 	.word	0x0800afd1

08009b24 <__hi0bits>:
 8009b24:	0c03      	lsrs	r3, r0, #16
 8009b26:	041b      	lsls	r3, r3, #16
 8009b28:	b9d3      	cbnz	r3, 8009b60 <__hi0bits+0x3c>
 8009b2a:	0400      	lsls	r0, r0, #16
 8009b2c:	2310      	movs	r3, #16
 8009b2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009b32:	bf04      	itt	eq
 8009b34:	0200      	lsleq	r0, r0, #8
 8009b36:	3308      	addeq	r3, #8
 8009b38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b3c:	bf04      	itt	eq
 8009b3e:	0100      	lsleq	r0, r0, #4
 8009b40:	3304      	addeq	r3, #4
 8009b42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b46:	bf04      	itt	eq
 8009b48:	0080      	lsleq	r0, r0, #2
 8009b4a:	3302      	addeq	r3, #2
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	db05      	blt.n	8009b5c <__hi0bits+0x38>
 8009b50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b54:	f103 0301 	add.w	r3, r3, #1
 8009b58:	bf08      	it	eq
 8009b5a:	2320      	moveq	r3, #32
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	4770      	bx	lr
 8009b60:	2300      	movs	r3, #0
 8009b62:	e7e4      	b.n	8009b2e <__hi0bits+0xa>

08009b64 <__lo0bits>:
 8009b64:	6803      	ldr	r3, [r0, #0]
 8009b66:	f013 0207 	ands.w	r2, r3, #7
 8009b6a:	d00c      	beq.n	8009b86 <__lo0bits+0x22>
 8009b6c:	07d9      	lsls	r1, r3, #31
 8009b6e:	d422      	bmi.n	8009bb6 <__lo0bits+0x52>
 8009b70:	079a      	lsls	r2, r3, #30
 8009b72:	bf49      	itett	mi
 8009b74:	085b      	lsrmi	r3, r3, #1
 8009b76:	089b      	lsrpl	r3, r3, #2
 8009b78:	6003      	strmi	r3, [r0, #0]
 8009b7a:	2201      	movmi	r2, #1
 8009b7c:	bf5c      	itt	pl
 8009b7e:	6003      	strpl	r3, [r0, #0]
 8009b80:	2202      	movpl	r2, #2
 8009b82:	4610      	mov	r0, r2
 8009b84:	4770      	bx	lr
 8009b86:	b299      	uxth	r1, r3
 8009b88:	b909      	cbnz	r1, 8009b8e <__lo0bits+0x2a>
 8009b8a:	0c1b      	lsrs	r3, r3, #16
 8009b8c:	2210      	movs	r2, #16
 8009b8e:	b2d9      	uxtb	r1, r3
 8009b90:	b909      	cbnz	r1, 8009b96 <__lo0bits+0x32>
 8009b92:	3208      	adds	r2, #8
 8009b94:	0a1b      	lsrs	r3, r3, #8
 8009b96:	0719      	lsls	r1, r3, #28
 8009b98:	bf04      	itt	eq
 8009b9a:	091b      	lsreq	r3, r3, #4
 8009b9c:	3204      	addeq	r2, #4
 8009b9e:	0799      	lsls	r1, r3, #30
 8009ba0:	bf04      	itt	eq
 8009ba2:	089b      	lsreq	r3, r3, #2
 8009ba4:	3202      	addeq	r2, #2
 8009ba6:	07d9      	lsls	r1, r3, #31
 8009ba8:	d403      	bmi.n	8009bb2 <__lo0bits+0x4e>
 8009baa:	085b      	lsrs	r3, r3, #1
 8009bac:	f102 0201 	add.w	r2, r2, #1
 8009bb0:	d003      	beq.n	8009bba <__lo0bits+0x56>
 8009bb2:	6003      	str	r3, [r0, #0]
 8009bb4:	e7e5      	b.n	8009b82 <__lo0bits+0x1e>
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	e7e3      	b.n	8009b82 <__lo0bits+0x1e>
 8009bba:	2220      	movs	r2, #32
 8009bbc:	e7e1      	b.n	8009b82 <__lo0bits+0x1e>
	...

08009bc0 <__i2b>:
 8009bc0:	b510      	push	{r4, lr}
 8009bc2:	460c      	mov	r4, r1
 8009bc4:	2101      	movs	r1, #1
 8009bc6:	f7ff ff05 	bl	80099d4 <_Balloc>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	b928      	cbnz	r0, 8009bda <__i2b+0x1a>
 8009bce:	4b05      	ldr	r3, [pc, #20]	; (8009be4 <__i2b+0x24>)
 8009bd0:	4805      	ldr	r0, [pc, #20]	; (8009be8 <__i2b+0x28>)
 8009bd2:	f240 1145 	movw	r1, #325	; 0x145
 8009bd6:	f000 fca9 	bl	800a52c <__assert_func>
 8009bda:	2301      	movs	r3, #1
 8009bdc:	6144      	str	r4, [r0, #20]
 8009bde:	6103      	str	r3, [r0, #16]
 8009be0:	bd10      	pop	{r4, pc}
 8009be2:	bf00      	nop
 8009be4:	0800afc0 	.word	0x0800afc0
 8009be8:	0800afd1 	.word	0x0800afd1

08009bec <__multiply>:
 8009bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf0:	4691      	mov	r9, r2
 8009bf2:	690a      	ldr	r2, [r1, #16]
 8009bf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	bfb8      	it	lt
 8009bfc:	460b      	movlt	r3, r1
 8009bfe:	460c      	mov	r4, r1
 8009c00:	bfbc      	itt	lt
 8009c02:	464c      	movlt	r4, r9
 8009c04:	4699      	movlt	r9, r3
 8009c06:	6927      	ldr	r7, [r4, #16]
 8009c08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009c0c:	68a3      	ldr	r3, [r4, #8]
 8009c0e:	6861      	ldr	r1, [r4, #4]
 8009c10:	eb07 060a 	add.w	r6, r7, sl
 8009c14:	42b3      	cmp	r3, r6
 8009c16:	b085      	sub	sp, #20
 8009c18:	bfb8      	it	lt
 8009c1a:	3101      	addlt	r1, #1
 8009c1c:	f7ff feda 	bl	80099d4 <_Balloc>
 8009c20:	b930      	cbnz	r0, 8009c30 <__multiply+0x44>
 8009c22:	4602      	mov	r2, r0
 8009c24:	4b44      	ldr	r3, [pc, #272]	; (8009d38 <__multiply+0x14c>)
 8009c26:	4845      	ldr	r0, [pc, #276]	; (8009d3c <__multiply+0x150>)
 8009c28:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009c2c:	f000 fc7e 	bl	800a52c <__assert_func>
 8009c30:	f100 0514 	add.w	r5, r0, #20
 8009c34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c38:	462b      	mov	r3, r5
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	4543      	cmp	r3, r8
 8009c3e:	d321      	bcc.n	8009c84 <__multiply+0x98>
 8009c40:	f104 0314 	add.w	r3, r4, #20
 8009c44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009c48:	f109 0314 	add.w	r3, r9, #20
 8009c4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009c50:	9202      	str	r2, [sp, #8]
 8009c52:	1b3a      	subs	r2, r7, r4
 8009c54:	3a15      	subs	r2, #21
 8009c56:	f022 0203 	bic.w	r2, r2, #3
 8009c5a:	3204      	adds	r2, #4
 8009c5c:	f104 0115 	add.w	r1, r4, #21
 8009c60:	428f      	cmp	r7, r1
 8009c62:	bf38      	it	cc
 8009c64:	2204      	movcc	r2, #4
 8009c66:	9201      	str	r2, [sp, #4]
 8009c68:	9a02      	ldr	r2, [sp, #8]
 8009c6a:	9303      	str	r3, [sp, #12]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d80c      	bhi.n	8009c8a <__multiply+0x9e>
 8009c70:	2e00      	cmp	r6, #0
 8009c72:	dd03      	ble.n	8009c7c <__multiply+0x90>
 8009c74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d05b      	beq.n	8009d34 <__multiply+0x148>
 8009c7c:	6106      	str	r6, [r0, #16]
 8009c7e:	b005      	add	sp, #20
 8009c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c84:	f843 2b04 	str.w	r2, [r3], #4
 8009c88:	e7d8      	b.n	8009c3c <__multiply+0x50>
 8009c8a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c8e:	f1ba 0f00 	cmp.w	sl, #0
 8009c92:	d024      	beq.n	8009cde <__multiply+0xf2>
 8009c94:	f104 0e14 	add.w	lr, r4, #20
 8009c98:	46a9      	mov	r9, r5
 8009c9a:	f04f 0c00 	mov.w	ip, #0
 8009c9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009ca2:	f8d9 1000 	ldr.w	r1, [r9]
 8009ca6:	fa1f fb82 	uxth.w	fp, r2
 8009caa:	b289      	uxth	r1, r1
 8009cac:	fb0a 110b 	mla	r1, sl, fp, r1
 8009cb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009cb4:	f8d9 2000 	ldr.w	r2, [r9]
 8009cb8:	4461      	add	r1, ip
 8009cba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009cbe:	fb0a c20b 	mla	r2, sl, fp, ip
 8009cc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009cc6:	b289      	uxth	r1, r1
 8009cc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ccc:	4577      	cmp	r7, lr
 8009cce:	f849 1b04 	str.w	r1, [r9], #4
 8009cd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009cd6:	d8e2      	bhi.n	8009c9e <__multiply+0xb2>
 8009cd8:	9a01      	ldr	r2, [sp, #4]
 8009cda:	f845 c002 	str.w	ip, [r5, r2]
 8009cde:	9a03      	ldr	r2, [sp, #12]
 8009ce0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009ce4:	3304      	adds	r3, #4
 8009ce6:	f1b9 0f00 	cmp.w	r9, #0
 8009cea:	d021      	beq.n	8009d30 <__multiply+0x144>
 8009cec:	6829      	ldr	r1, [r5, #0]
 8009cee:	f104 0c14 	add.w	ip, r4, #20
 8009cf2:	46ae      	mov	lr, r5
 8009cf4:	f04f 0a00 	mov.w	sl, #0
 8009cf8:	f8bc b000 	ldrh.w	fp, [ip]
 8009cfc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009d00:	fb09 220b 	mla	r2, r9, fp, r2
 8009d04:	4452      	add	r2, sl
 8009d06:	b289      	uxth	r1, r1
 8009d08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d0c:	f84e 1b04 	str.w	r1, [lr], #4
 8009d10:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009d14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d18:	f8be 1000 	ldrh.w	r1, [lr]
 8009d1c:	fb09 110a 	mla	r1, r9, sl, r1
 8009d20:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009d24:	4567      	cmp	r7, ip
 8009d26:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d2a:	d8e5      	bhi.n	8009cf8 <__multiply+0x10c>
 8009d2c:	9a01      	ldr	r2, [sp, #4]
 8009d2e:	50a9      	str	r1, [r5, r2]
 8009d30:	3504      	adds	r5, #4
 8009d32:	e799      	b.n	8009c68 <__multiply+0x7c>
 8009d34:	3e01      	subs	r6, #1
 8009d36:	e79b      	b.n	8009c70 <__multiply+0x84>
 8009d38:	0800afc0 	.word	0x0800afc0
 8009d3c:	0800afd1 	.word	0x0800afd1

08009d40 <__pow5mult>:
 8009d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d44:	4615      	mov	r5, r2
 8009d46:	f012 0203 	ands.w	r2, r2, #3
 8009d4a:	4606      	mov	r6, r0
 8009d4c:	460f      	mov	r7, r1
 8009d4e:	d007      	beq.n	8009d60 <__pow5mult+0x20>
 8009d50:	4c25      	ldr	r4, [pc, #148]	; (8009de8 <__pow5mult+0xa8>)
 8009d52:	3a01      	subs	r2, #1
 8009d54:	2300      	movs	r3, #0
 8009d56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d5a:	f7ff fe9d 	bl	8009a98 <__multadd>
 8009d5e:	4607      	mov	r7, r0
 8009d60:	10ad      	asrs	r5, r5, #2
 8009d62:	d03d      	beq.n	8009de0 <__pow5mult+0xa0>
 8009d64:	69f4      	ldr	r4, [r6, #28]
 8009d66:	b97c      	cbnz	r4, 8009d88 <__pow5mult+0x48>
 8009d68:	2010      	movs	r0, #16
 8009d6a:	f7ff fd7f 	bl	800986c <malloc>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	61f0      	str	r0, [r6, #28]
 8009d72:	b928      	cbnz	r0, 8009d80 <__pow5mult+0x40>
 8009d74:	4b1d      	ldr	r3, [pc, #116]	; (8009dec <__pow5mult+0xac>)
 8009d76:	481e      	ldr	r0, [pc, #120]	; (8009df0 <__pow5mult+0xb0>)
 8009d78:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009d7c:	f000 fbd6 	bl	800a52c <__assert_func>
 8009d80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d84:	6004      	str	r4, [r0, #0]
 8009d86:	60c4      	str	r4, [r0, #12]
 8009d88:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009d8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d90:	b94c      	cbnz	r4, 8009da6 <__pow5mult+0x66>
 8009d92:	f240 2171 	movw	r1, #625	; 0x271
 8009d96:	4630      	mov	r0, r6
 8009d98:	f7ff ff12 	bl	8009bc0 <__i2b>
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009da2:	4604      	mov	r4, r0
 8009da4:	6003      	str	r3, [r0, #0]
 8009da6:	f04f 0900 	mov.w	r9, #0
 8009daa:	07eb      	lsls	r3, r5, #31
 8009dac:	d50a      	bpl.n	8009dc4 <__pow5mult+0x84>
 8009dae:	4639      	mov	r1, r7
 8009db0:	4622      	mov	r2, r4
 8009db2:	4630      	mov	r0, r6
 8009db4:	f7ff ff1a 	bl	8009bec <__multiply>
 8009db8:	4639      	mov	r1, r7
 8009dba:	4680      	mov	r8, r0
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	f7ff fe49 	bl	8009a54 <_Bfree>
 8009dc2:	4647      	mov	r7, r8
 8009dc4:	106d      	asrs	r5, r5, #1
 8009dc6:	d00b      	beq.n	8009de0 <__pow5mult+0xa0>
 8009dc8:	6820      	ldr	r0, [r4, #0]
 8009dca:	b938      	cbnz	r0, 8009ddc <__pow5mult+0x9c>
 8009dcc:	4622      	mov	r2, r4
 8009dce:	4621      	mov	r1, r4
 8009dd0:	4630      	mov	r0, r6
 8009dd2:	f7ff ff0b 	bl	8009bec <__multiply>
 8009dd6:	6020      	str	r0, [r4, #0]
 8009dd8:	f8c0 9000 	str.w	r9, [r0]
 8009ddc:	4604      	mov	r4, r0
 8009dde:	e7e4      	b.n	8009daa <__pow5mult+0x6a>
 8009de0:	4638      	mov	r0, r7
 8009de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009de6:	bf00      	nop
 8009de8:	0800b120 	.word	0x0800b120
 8009dec:	0800af51 	.word	0x0800af51
 8009df0:	0800afd1 	.word	0x0800afd1

08009df4 <__lshift>:
 8009df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009df8:	460c      	mov	r4, r1
 8009dfa:	6849      	ldr	r1, [r1, #4]
 8009dfc:	6923      	ldr	r3, [r4, #16]
 8009dfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e02:	68a3      	ldr	r3, [r4, #8]
 8009e04:	4607      	mov	r7, r0
 8009e06:	4691      	mov	r9, r2
 8009e08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e0c:	f108 0601 	add.w	r6, r8, #1
 8009e10:	42b3      	cmp	r3, r6
 8009e12:	db0b      	blt.n	8009e2c <__lshift+0x38>
 8009e14:	4638      	mov	r0, r7
 8009e16:	f7ff fddd 	bl	80099d4 <_Balloc>
 8009e1a:	4605      	mov	r5, r0
 8009e1c:	b948      	cbnz	r0, 8009e32 <__lshift+0x3e>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	4b28      	ldr	r3, [pc, #160]	; (8009ec4 <__lshift+0xd0>)
 8009e22:	4829      	ldr	r0, [pc, #164]	; (8009ec8 <__lshift+0xd4>)
 8009e24:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009e28:	f000 fb80 	bl	800a52c <__assert_func>
 8009e2c:	3101      	adds	r1, #1
 8009e2e:	005b      	lsls	r3, r3, #1
 8009e30:	e7ee      	b.n	8009e10 <__lshift+0x1c>
 8009e32:	2300      	movs	r3, #0
 8009e34:	f100 0114 	add.w	r1, r0, #20
 8009e38:	f100 0210 	add.w	r2, r0, #16
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	4553      	cmp	r3, sl
 8009e40:	db33      	blt.n	8009eaa <__lshift+0xb6>
 8009e42:	6920      	ldr	r0, [r4, #16]
 8009e44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e48:	f104 0314 	add.w	r3, r4, #20
 8009e4c:	f019 091f 	ands.w	r9, r9, #31
 8009e50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009e58:	d02b      	beq.n	8009eb2 <__lshift+0xbe>
 8009e5a:	f1c9 0e20 	rsb	lr, r9, #32
 8009e5e:	468a      	mov	sl, r1
 8009e60:	2200      	movs	r2, #0
 8009e62:	6818      	ldr	r0, [r3, #0]
 8009e64:	fa00 f009 	lsl.w	r0, r0, r9
 8009e68:	4310      	orrs	r0, r2
 8009e6a:	f84a 0b04 	str.w	r0, [sl], #4
 8009e6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e72:	459c      	cmp	ip, r3
 8009e74:	fa22 f20e 	lsr.w	r2, r2, lr
 8009e78:	d8f3      	bhi.n	8009e62 <__lshift+0x6e>
 8009e7a:	ebac 0304 	sub.w	r3, ip, r4
 8009e7e:	3b15      	subs	r3, #21
 8009e80:	f023 0303 	bic.w	r3, r3, #3
 8009e84:	3304      	adds	r3, #4
 8009e86:	f104 0015 	add.w	r0, r4, #21
 8009e8a:	4584      	cmp	ip, r0
 8009e8c:	bf38      	it	cc
 8009e8e:	2304      	movcc	r3, #4
 8009e90:	50ca      	str	r2, [r1, r3]
 8009e92:	b10a      	cbz	r2, 8009e98 <__lshift+0xa4>
 8009e94:	f108 0602 	add.w	r6, r8, #2
 8009e98:	3e01      	subs	r6, #1
 8009e9a:	4638      	mov	r0, r7
 8009e9c:	612e      	str	r6, [r5, #16]
 8009e9e:	4621      	mov	r1, r4
 8009ea0:	f7ff fdd8 	bl	8009a54 <_Bfree>
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eaa:	f842 0f04 	str.w	r0, [r2, #4]!
 8009eae:	3301      	adds	r3, #1
 8009eb0:	e7c5      	b.n	8009e3e <__lshift+0x4a>
 8009eb2:	3904      	subs	r1, #4
 8009eb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eb8:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ebc:	459c      	cmp	ip, r3
 8009ebe:	d8f9      	bhi.n	8009eb4 <__lshift+0xc0>
 8009ec0:	e7ea      	b.n	8009e98 <__lshift+0xa4>
 8009ec2:	bf00      	nop
 8009ec4:	0800afc0 	.word	0x0800afc0
 8009ec8:	0800afd1 	.word	0x0800afd1

08009ecc <__mcmp>:
 8009ecc:	b530      	push	{r4, r5, lr}
 8009ece:	6902      	ldr	r2, [r0, #16]
 8009ed0:	690c      	ldr	r4, [r1, #16]
 8009ed2:	1b12      	subs	r2, r2, r4
 8009ed4:	d10e      	bne.n	8009ef4 <__mcmp+0x28>
 8009ed6:	f100 0314 	add.w	r3, r0, #20
 8009eda:	3114      	adds	r1, #20
 8009edc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ee0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ee4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009ee8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009eec:	42a5      	cmp	r5, r4
 8009eee:	d003      	beq.n	8009ef8 <__mcmp+0x2c>
 8009ef0:	d305      	bcc.n	8009efe <__mcmp+0x32>
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	4610      	mov	r0, r2
 8009ef6:	bd30      	pop	{r4, r5, pc}
 8009ef8:	4283      	cmp	r3, r0
 8009efa:	d3f3      	bcc.n	8009ee4 <__mcmp+0x18>
 8009efc:	e7fa      	b.n	8009ef4 <__mcmp+0x28>
 8009efe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f02:	e7f7      	b.n	8009ef4 <__mcmp+0x28>

08009f04 <__mdiff>:
 8009f04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f08:	460c      	mov	r4, r1
 8009f0a:	4606      	mov	r6, r0
 8009f0c:	4611      	mov	r1, r2
 8009f0e:	4620      	mov	r0, r4
 8009f10:	4690      	mov	r8, r2
 8009f12:	f7ff ffdb 	bl	8009ecc <__mcmp>
 8009f16:	1e05      	subs	r5, r0, #0
 8009f18:	d110      	bne.n	8009f3c <__mdiff+0x38>
 8009f1a:	4629      	mov	r1, r5
 8009f1c:	4630      	mov	r0, r6
 8009f1e:	f7ff fd59 	bl	80099d4 <_Balloc>
 8009f22:	b930      	cbnz	r0, 8009f32 <__mdiff+0x2e>
 8009f24:	4b3a      	ldr	r3, [pc, #232]	; (800a010 <__mdiff+0x10c>)
 8009f26:	4602      	mov	r2, r0
 8009f28:	f240 2137 	movw	r1, #567	; 0x237
 8009f2c:	4839      	ldr	r0, [pc, #228]	; (800a014 <__mdiff+0x110>)
 8009f2e:	f000 fafd 	bl	800a52c <__assert_func>
 8009f32:	2301      	movs	r3, #1
 8009f34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f3c:	bfa4      	itt	ge
 8009f3e:	4643      	movge	r3, r8
 8009f40:	46a0      	movge	r8, r4
 8009f42:	4630      	mov	r0, r6
 8009f44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009f48:	bfa6      	itte	ge
 8009f4a:	461c      	movge	r4, r3
 8009f4c:	2500      	movge	r5, #0
 8009f4e:	2501      	movlt	r5, #1
 8009f50:	f7ff fd40 	bl	80099d4 <_Balloc>
 8009f54:	b920      	cbnz	r0, 8009f60 <__mdiff+0x5c>
 8009f56:	4b2e      	ldr	r3, [pc, #184]	; (800a010 <__mdiff+0x10c>)
 8009f58:	4602      	mov	r2, r0
 8009f5a:	f240 2145 	movw	r1, #581	; 0x245
 8009f5e:	e7e5      	b.n	8009f2c <__mdiff+0x28>
 8009f60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009f64:	6926      	ldr	r6, [r4, #16]
 8009f66:	60c5      	str	r5, [r0, #12]
 8009f68:	f104 0914 	add.w	r9, r4, #20
 8009f6c:	f108 0514 	add.w	r5, r8, #20
 8009f70:	f100 0e14 	add.w	lr, r0, #20
 8009f74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009f78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009f7c:	f108 0210 	add.w	r2, r8, #16
 8009f80:	46f2      	mov	sl, lr
 8009f82:	2100      	movs	r1, #0
 8009f84:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009f8c:	fa11 f88b 	uxtah	r8, r1, fp
 8009f90:	b299      	uxth	r1, r3
 8009f92:	0c1b      	lsrs	r3, r3, #16
 8009f94:	eba8 0801 	sub.w	r8, r8, r1
 8009f98:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f9c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009fa0:	fa1f f888 	uxth.w	r8, r8
 8009fa4:	1419      	asrs	r1, r3, #16
 8009fa6:	454e      	cmp	r6, r9
 8009fa8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009fac:	f84a 3b04 	str.w	r3, [sl], #4
 8009fb0:	d8e8      	bhi.n	8009f84 <__mdiff+0x80>
 8009fb2:	1b33      	subs	r3, r6, r4
 8009fb4:	3b15      	subs	r3, #21
 8009fb6:	f023 0303 	bic.w	r3, r3, #3
 8009fba:	3304      	adds	r3, #4
 8009fbc:	3415      	adds	r4, #21
 8009fbe:	42a6      	cmp	r6, r4
 8009fc0:	bf38      	it	cc
 8009fc2:	2304      	movcc	r3, #4
 8009fc4:	441d      	add	r5, r3
 8009fc6:	4473      	add	r3, lr
 8009fc8:	469e      	mov	lr, r3
 8009fca:	462e      	mov	r6, r5
 8009fcc:	4566      	cmp	r6, ip
 8009fce:	d30e      	bcc.n	8009fee <__mdiff+0xea>
 8009fd0:	f10c 0203 	add.w	r2, ip, #3
 8009fd4:	1b52      	subs	r2, r2, r5
 8009fd6:	f022 0203 	bic.w	r2, r2, #3
 8009fda:	3d03      	subs	r5, #3
 8009fdc:	45ac      	cmp	ip, r5
 8009fde:	bf38      	it	cc
 8009fe0:	2200      	movcc	r2, #0
 8009fe2:	4413      	add	r3, r2
 8009fe4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009fe8:	b17a      	cbz	r2, 800a00a <__mdiff+0x106>
 8009fea:	6107      	str	r7, [r0, #16]
 8009fec:	e7a4      	b.n	8009f38 <__mdiff+0x34>
 8009fee:	f856 8b04 	ldr.w	r8, [r6], #4
 8009ff2:	fa11 f288 	uxtah	r2, r1, r8
 8009ff6:	1414      	asrs	r4, r2, #16
 8009ff8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009ffc:	b292      	uxth	r2, r2
 8009ffe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a002:	f84e 2b04 	str.w	r2, [lr], #4
 800a006:	1421      	asrs	r1, r4, #16
 800a008:	e7e0      	b.n	8009fcc <__mdiff+0xc8>
 800a00a:	3f01      	subs	r7, #1
 800a00c:	e7ea      	b.n	8009fe4 <__mdiff+0xe0>
 800a00e:	bf00      	nop
 800a010:	0800afc0 	.word	0x0800afc0
 800a014:	0800afd1 	.word	0x0800afd1

0800a018 <__d2b>:
 800a018:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a01c:	460f      	mov	r7, r1
 800a01e:	2101      	movs	r1, #1
 800a020:	ec59 8b10 	vmov	r8, r9, d0
 800a024:	4616      	mov	r6, r2
 800a026:	f7ff fcd5 	bl	80099d4 <_Balloc>
 800a02a:	4604      	mov	r4, r0
 800a02c:	b930      	cbnz	r0, 800a03c <__d2b+0x24>
 800a02e:	4602      	mov	r2, r0
 800a030:	4b24      	ldr	r3, [pc, #144]	; (800a0c4 <__d2b+0xac>)
 800a032:	4825      	ldr	r0, [pc, #148]	; (800a0c8 <__d2b+0xb0>)
 800a034:	f240 310f 	movw	r1, #783	; 0x30f
 800a038:	f000 fa78 	bl	800a52c <__assert_func>
 800a03c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a040:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a044:	bb2d      	cbnz	r5, 800a092 <__d2b+0x7a>
 800a046:	9301      	str	r3, [sp, #4]
 800a048:	f1b8 0300 	subs.w	r3, r8, #0
 800a04c:	d026      	beq.n	800a09c <__d2b+0x84>
 800a04e:	4668      	mov	r0, sp
 800a050:	9300      	str	r3, [sp, #0]
 800a052:	f7ff fd87 	bl	8009b64 <__lo0bits>
 800a056:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a05a:	b1e8      	cbz	r0, 800a098 <__d2b+0x80>
 800a05c:	f1c0 0320 	rsb	r3, r0, #32
 800a060:	fa02 f303 	lsl.w	r3, r2, r3
 800a064:	430b      	orrs	r3, r1
 800a066:	40c2      	lsrs	r2, r0
 800a068:	6163      	str	r3, [r4, #20]
 800a06a:	9201      	str	r2, [sp, #4]
 800a06c:	9b01      	ldr	r3, [sp, #4]
 800a06e:	61a3      	str	r3, [r4, #24]
 800a070:	2b00      	cmp	r3, #0
 800a072:	bf14      	ite	ne
 800a074:	2202      	movne	r2, #2
 800a076:	2201      	moveq	r2, #1
 800a078:	6122      	str	r2, [r4, #16]
 800a07a:	b1bd      	cbz	r5, 800a0ac <__d2b+0x94>
 800a07c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a080:	4405      	add	r5, r0
 800a082:	603d      	str	r5, [r7, #0]
 800a084:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a088:	6030      	str	r0, [r6, #0]
 800a08a:	4620      	mov	r0, r4
 800a08c:	b003      	add	sp, #12
 800a08e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a092:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a096:	e7d6      	b.n	800a046 <__d2b+0x2e>
 800a098:	6161      	str	r1, [r4, #20]
 800a09a:	e7e7      	b.n	800a06c <__d2b+0x54>
 800a09c:	a801      	add	r0, sp, #4
 800a09e:	f7ff fd61 	bl	8009b64 <__lo0bits>
 800a0a2:	9b01      	ldr	r3, [sp, #4]
 800a0a4:	6163      	str	r3, [r4, #20]
 800a0a6:	3020      	adds	r0, #32
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	e7e5      	b.n	800a078 <__d2b+0x60>
 800a0ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a0b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a0b4:	6038      	str	r0, [r7, #0]
 800a0b6:	6918      	ldr	r0, [r3, #16]
 800a0b8:	f7ff fd34 	bl	8009b24 <__hi0bits>
 800a0bc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a0c0:	e7e2      	b.n	800a088 <__d2b+0x70>
 800a0c2:	bf00      	nop
 800a0c4:	0800afc0 	.word	0x0800afc0
 800a0c8:	0800afd1 	.word	0x0800afd1

0800a0cc <__ssputs_r>:
 800a0cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0d0:	688e      	ldr	r6, [r1, #8]
 800a0d2:	461f      	mov	r7, r3
 800a0d4:	42be      	cmp	r6, r7
 800a0d6:	680b      	ldr	r3, [r1, #0]
 800a0d8:	4682      	mov	sl, r0
 800a0da:	460c      	mov	r4, r1
 800a0dc:	4690      	mov	r8, r2
 800a0de:	d82c      	bhi.n	800a13a <__ssputs_r+0x6e>
 800a0e0:	898a      	ldrh	r2, [r1, #12]
 800a0e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a0e6:	d026      	beq.n	800a136 <__ssputs_r+0x6a>
 800a0e8:	6965      	ldr	r5, [r4, #20]
 800a0ea:	6909      	ldr	r1, [r1, #16]
 800a0ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0f0:	eba3 0901 	sub.w	r9, r3, r1
 800a0f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0f8:	1c7b      	adds	r3, r7, #1
 800a0fa:	444b      	add	r3, r9
 800a0fc:	106d      	asrs	r5, r5, #1
 800a0fe:	429d      	cmp	r5, r3
 800a100:	bf38      	it	cc
 800a102:	461d      	movcc	r5, r3
 800a104:	0553      	lsls	r3, r2, #21
 800a106:	d527      	bpl.n	800a158 <__ssputs_r+0x8c>
 800a108:	4629      	mov	r1, r5
 800a10a:	f7ff fbd7 	bl	80098bc <_malloc_r>
 800a10e:	4606      	mov	r6, r0
 800a110:	b360      	cbz	r0, 800a16c <__ssputs_r+0xa0>
 800a112:	6921      	ldr	r1, [r4, #16]
 800a114:	464a      	mov	r2, r9
 800a116:	f7fe fcd3 	bl	8008ac0 <memcpy>
 800a11a:	89a3      	ldrh	r3, [r4, #12]
 800a11c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a124:	81a3      	strh	r3, [r4, #12]
 800a126:	6126      	str	r6, [r4, #16]
 800a128:	6165      	str	r5, [r4, #20]
 800a12a:	444e      	add	r6, r9
 800a12c:	eba5 0509 	sub.w	r5, r5, r9
 800a130:	6026      	str	r6, [r4, #0]
 800a132:	60a5      	str	r5, [r4, #8]
 800a134:	463e      	mov	r6, r7
 800a136:	42be      	cmp	r6, r7
 800a138:	d900      	bls.n	800a13c <__ssputs_r+0x70>
 800a13a:	463e      	mov	r6, r7
 800a13c:	6820      	ldr	r0, [r4, #0]
 800a13e:	4632      	mov	r2, r6
 800a140:	4641      	mov	r1, r8
 800a142:	f000 f9c9 	bl	800a4d8 <memmove>
 800a146:	68a3      	ldr	r3, [r4, #8]
 800a148:	1b9b      	subs	r3, r3, r6
 800a14a:	60a3      	str	r3, [r4, #8]
 800a14c:	6823      	ldr	r3, [r4, #0]
 800a14e:	4433      	add	r3, r6
 800a150:	6023      	str	r3, [r4, #0]
 800a152:	2000      	movs	r0, #0
 800a154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a158:	462a      	mov	r2, r5
 800a15a:	f000 fa2d 	bl	800a5b8 <_realloc_r>
 800a15e:	4606      	mov	r6, r0
 800a160:	2800      	cmp	r0, #0
 800a162:	d1e0      	bne.n	800a126 <__ssputs_r+0x5a>
 800a164:	6921      	ldr	r1, [r4, #16]
 800a166:	4650      	mov	r0, sl
 800a168:	f7ff fb34 	bl	80097d4 <_free_r>
 800a16c:	230c      	movs	r3, #12
 800a16e:	f8ca 3000 	str.w	r3, [sl]
 800a172:	89a3      	ldrh	r3, [r4, #12]
 800a174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a178:	81a3      	strh	r3, [r4, #12]
 800a17a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a17e:	e7e9      	b.n	800a154 <__ssputs_r+0x88>

0800a180 <_svfiprintf_r>:
 800a180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a184:	4698      	mov	r8, r3
 800a186:	898b      	ldrh	r3, [r1, #12]
 800a188:	061b      	lsls	r3, r3, #24
 800a18a:	b09d      	sub	sp, #116	; 0x74
 800a18c:	4607      	mov	r7, r0
 800a18e:	460d      	mov	r5, r1
 800a190:	4614      	mov	r4, r2
 800a192:	d50e      	bpl.n	800a1b2 <_svfiprintf_r+0x32>
 800a194:	690b      	ldr	r3, [r1, #16]
 800a196:	b963      	cbnz	r3, 800a1b2 <_svfiprintf_r+0x32>
 800a198:	2140      	movs	r1, #64	; 0x40
 800a19a:	f7ff fb8f 	bl	80098bc <_malloc_r>
 800a19e:	6028      	str	r0, [r5, #0]
 800a1a0:	6128      	str	r0, [r5, #16]
 800a1a2:	b920      	cbnz	r0, 800a1ae <_svfiprintf_r+0x2e>
 800a1a4:	230c      	movs	r3, #12
 800a1a6:	603b      	str	r3, [r7, #0]
 800a1a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1ac:	e0d0      	b.n	800a350 <_svfiprintf_r+0x1d0>
 800a1ae:	2340      	movs	r3, #64	; 0x40
 800a1b0:	616b      	str	r3, [r5, #20]
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a1b6:	2320      	movs	r3, #32
 800a1b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1c0:	2330      	movs	r3, #48	; 0x30
 800a1c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a368 <_svfiprintf_r+0x1e8>
 800a1c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1ca:	f04f 0901 	mov.w	r9, #1
 800a1ce:	4623      	mov	r3, r4
 800a1d0:	469a      	mov	sl, r3
 800a1d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1d6:	b10a      	cbz	r2, 800a1dc <_svfiprintf_r+0x5c>
 800a1d8:	2a25      	cmp	r2, #37	; 0x25
 800a1da:	d1f9      	bne.n	800a1d0 <_svfiprintf_r+0x50>
 800a1dc:	ebba 0b04 	subs.w	fp, sl, r4
 800a1e0:	d00b      	beq.n	800a1fa <_svfiprintf_r+0x7a>
 800a1e2:	465b      	mov	r3, fp
 800a1e4:	4622      	mov	r2, r4
 800a1e6:	4629      	mov	r1, r5
 800a1e8:	4638      	mov	r0, r7
 800a1ea:	f7ff ff6f 	bl	800a0cc <__ssputs_r>
 800a1ee:	3001      	adds	r0, #1
 800a1f0:	f000 80a9 	beq.w	800a346 <_svfiprintf_r+0x1c6>
 800a1f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1f6:	445a      	add	r2, fp
 800a1f8:	9209      	str	r2, [sp, #36]	; 0x24
 800a1fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	f000 80a1 	beq.w	800a346 <_svfiprintf_r+0x1c6>
 800a204:	2300      	movs	r3, #0
 800a206:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a20a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a20e:	f10a 0a01 	add.w	sl, sl, #1
 800a212:	9304      	str	r3, [sp, #16]
 800a214:	9307      	str	r3, [sp, #28]
 800a216:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a21a:	931a      	str	r3, [sp, #104]	; 0x68
 800a21c:	4654      	mov	r4, sl
 800a21e:	2205      	movs	r2, #5
 800a220:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a224:	4850      	ldr	r0, [pc, #320]	; (800a368 <_svfiprintf_r+0x1e8>)
 800a226:	f7f5 fff3 	bl	8000210 <memchr>
 800a22a:	9a04      	ldr	r2, [sp, #16]
 800a22c:	b9d8      	cbnz	r0, 800a266 <_svfiprintf_r+0xe6>
 800a22e:	06d0      	lsls	r0, r2, #27
 800a230:	bf44      	itt	mi
 800a232:	2320      	movmi	r3, #32
 800a234:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a238:	0711      	lsls	r1, r2, #28
 800a23a:	bf44      	itt	mi
 800a23c:	232b      	movmi	r3, #43	; 0x2b
 800a23e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a242:	f89a 3000 	ldrb.w	r3, [sl]
 800a246:	2b2a      	cmp	r3, #42	; 0x2a
 800a248:	d015      	beq.n	800a276 <_svfiprintf_r+0xf6>
 800a24a:	9a07      	ldr	r2, [sp, #28]
 800a24c:	4654      	mov	r4, sl
 800a24e:	2000      	movs	r0, #0
 800a250:	f04f 0c0a 	mov.w	ip, #10
 800a254:	4621      	mov	r1, r4
 800a256:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a25a:	3b30      	subs	r3, #48	; 0x30
 800a25c:	2b09      	cmp	r3, #9
 800a25e:	d94d      	bls.n	800a2fc <_svfiprintf_r+0x17c>
 800a260:	b1b0      	cbz	r0, 800a290 <_svfiprintf_r+0x110>
 800a262:	9207      	str	r2, [sp, #28]
 800a264:	e014      	b.n	800a290 <_svfiprintf_r+0x110>
 800a266:	eba0 0308 	sub.w	r3, r0, r8
 800a26a:	fa09 f303 	lsl.w	r3, r9, r3
 800a26e:	4313      	orrs	r3, r2
 800a270:	9304      	str	r3, [sp, #16]
 800a272:	46a2      	mov	sl, r4
 800a274:	e7d2      	b.n	800a21c <_svfiprintf_r+0x9c>
 800a276:	9b03      	ldr	r3, [sp, #12]
 800a278:	1d19      	adds	r1, r3, #4
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	9103      	str	r1, [sp, #12]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	bfbb      	ittet	lt
 800a282:	425b      	neglt	r3, r3
 800a284:	f042 0202 	orrlt.w	r2, r2, #2
 800a288:	9307      	strge	r3, [sp, #28]
 800a28a:	9307      	strlt	r3, [sp, #28]
 800a28c:	bfb8      	it	lt
 800a28e:	9204      	strlt	r2, [sp, #16]
 800a290:	7823      	ldrb	r3, [r4, #0]
 800a292:	2b2e      	cmp	r3, #46	; 0x2e
 800a294:	d10c      	bne.n	800a2b0 <_svfiprintf_r+0x130>
 800a296:	7863      	ldrb	r3, [r4, #1]
 800a298:	2b2a      	cmp	r3, #42	; 0x2a
 800a29a:	d134      	bne.n	800a306 <_svfiprintf_r+0x186>
 800a29c:	9b03      	ldr	r3, [sp, #12]
 800a29e:	1d1a      	adds	r2, r3, #4
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	9203      	str	r2, [sp, #12]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	bfb8      	it	lt
 800a2a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a2ac:	3402      	adds	r4, #2
 800a2ae:	9305      	str	r3, [sp, #20]
 800a2b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a378 <_svfiprintf_r+0x1f8>
 800a2b4:	7821      	ldrb	r1, [r4, #0]
 800a2b6:	2203      	movs	r2, #3
 800a2b8:	4650      	mov	r0, sl
 800a2ba:	f7f5 ffa9 	bl	8000210 <memchr>
 800a2be:	b138      	cbz	r0, 800a2d0 <_svfiprintf_r+0x150>
 800a2c0:	9b04      	ldr	r3, [sp, #16]
 800a2c2:	eba0 000a 	sub.w	r0, r0, sl
 800a2c6:	2240      	movs	r2, #64	; 0x40
 800a2c8:	4082      	lsls	r2, r0
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	3401      	adds	r4, #1
 800a2ce:	9304      	str	r3, [sp, #16]
 800a2d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2d4:	4825      	ldr	r0, [pc, #148]	; (800a36c <_svfiprintf_r+0x1ec>)
 800a2d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2da:	2206      	movs	r2, #6
 800a2dc:	f7f5 ff98 	bl	8000210 <memchr>
 800a2e0:	2800      	cmp	r0, #0
 800a2e2:	d038      	beq.n	800a356 <_svfiprintf_r+0x1d6>
 800a2e4:	4b22      	ldr	r3, [pc, #136]	; (800a370 <_svfiprintf_r+0x1f0>)
 800a2e6:	bb1b      	cbnz	r3, 800a330 <_svfiprintf_r+0x1b0>
 800a2e8:	9b03      	ldr	r3, [sp, #12]
 800a2ea:	3307      	adds	r3, #7
 800a2ec:	f023 0307 	bic.w	r3, r3, #7
 800a2f0:	3308      	adds	r3, #8
 800a2f2:	9303      	str	r3, [sp, #12]
 800a2f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2f6:	4433      	add	r3, r6
 800a2f8:	9309      	str	r3, [sp, #36]	; 0x24
 800a2fa:	e768      	b.n	800a1ce <_svfiprintf_r+0x4e>
 800a2fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a300:	460c      	mov	r4, r1
 800a302:	2001      	movs	r0, #1
 800a304:	e7a6      	b.n	800a254 <_svfiprintf_r+0xd4>
 800a306:	2300      	movs	r3, #0
 800a308:	3401      	adds	r4, #1
 800a30a:	9305      	str	r3, [sp, #20]
 800a30c:	4619      	mov	r1, r3
 800a30e:	f04f 0c0a 	mov.w	ip, #10
 800a312:	4620      	mov	r0, r4
 800a314:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a318:	3a30      	subs	r2, #48	; 0x30
 800a31a:	2a09      	cmp	r2, #9
 800a31c:	d903      	bls.n	800a326 <_svfiprintf_r+0x1a6>
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d0c6      	beq.n	800a2b0 <_svfiprintf_r+0x130>
 800a322:	9105      	str	r1, [sp, #20]
 800a324:	e7c4      	b.n	800a2b0 <_svfiprintf_r+0x130>
 800a326:	fb0c 2101 	mla	r1, ip, r1, r2
 800a32a:	4604      	mov	r4, r0
 800a32c:	2301      	movs	r3, #1
 800a32e:	e7f0      	b.n	800a312 <_svfiprintf_r+0x192>
 800a330:	ab03      	add	r3, sp, #12
 800a332:	9300      	str	r3, [sp, #0]
 800a334:	462a      	mov	r2, r5
 800a336:	4b0f      	ldr	r3, [pc, #60]	; (800a374 <_svfiprintf_r+0x1f4>)
 800a338:	a904      	add	r1, sp, #16
 800a33a:	4638      	mov	r0, r7
 800a33c:	f7fd fe68 	bl	8008010 <_printf_float>
 800a340:	1c42      	adds	r2, r0, #1
 800a342:	4606      	mov	r6, r0
 800a344:	d1d6      	bne.n	800a2f4 <_svfiprintf_r+0x174>
 800a346:	89ab      	ldrh	r3, [r5, #12]
 800a348:	065b      	lsls	r3, r3, #25
 800a34a:	f53f af2d 	bmi.w	800a1a8 <_svfiprintf_r+0x28>
 800a34e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a350:	b01d      	add	sp, #116	; 0x74
 800a352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a356:	ab03      	add	r3, sp, #12
 800a358:	9300      	str	r3, [sp, #0]
 800a35a:	462a      	mov	r2, r5
 800a35c:	4b05      	ldr	r3, [pc, #20]	; (800a374 <_svfiprintf_r+0x1f4>)
 800a35e:	a904      	add	r1, sp, #16
 800a360:	4638      	mov	r0, r7
 800a362:	f7fe f8f9 	bl	8008558 <_printf_i>
 800a366:	e7eb      	b.n	800a340 <_svfiprintf_r+0x1c0>
 800a368:	0800b12c 	.word	0x0800b12c
 800a36c:	0800b136 	.word	0x0800b136
 800a370:	08008011 	.word	0x08008011
 800a374:	0800a0cd 	.word	0x0800a0cd
 800a378:	0800b132 	.word	0x0800b132

0800a37c <__sflush_r>:
 800a37c:	898a      	ldrh	r2, [r1, #12]
 800a37e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a382:	4605      	mov	r5, r0
 800a384:	0710      	lsls	r0, r2, #28
 800a386:	460c      	mov	r4, r1
 800a388:	d458      	bmi.n	800a43c <__sflush_r+0xc0>
 800a38a:	684b      	ldr	r3, [r1, #4]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	dc05      	bgt.n	800a39c <__sflush_r+0x20>
 800a390:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a392:	2b00      	cmp	r3, #0
 800a394:	dc02      	bgt.n	800a39c <__sflush_r+0x20>
 800a396:	2000      	movs	r0, #0
 800a398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a39c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a39e:	2e00      	cmp	r6, #0
 800a3a0:	d0f9      	beq.n	800a396 <__sflush_r+0x1a>
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a3a8:	682f      	ldr	r7, [r5, #0]
 800a3aa:	6a21      	ldr	r1, [r4, #32]
 800a3ac:	602b      	str	r3, [r5, #0]
 800a3ae:	d032      	beq.n	800a416 <__sflush_r+0x9a>
 800a3b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3b2:	89a3      	ldrh	r3, [r4, #12]
 800a3b4:	075a      	lsls	r2, r3, #29
 800a3b6:	d505      	bpl.n	800a3c4 <__sflush_r+0x48>
 800a3b8:	6863      	ldr	r3, [r4, #4]
 800a3ba:	1ac0      	subs	r0, r0, r3
 800a3bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3be:	b10b      	cbz	r3, 800a3c4 <__sflush_r+0x48>
 800a3c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3c2:	1ac0      	subs	r0, r0, r3
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3ca:	6a21      	ldr	r1, [r4, #32]
 800a3cc:	4628      	mov	r0, r5
 800a3ce:	47b0      	blx	r6
 800a3d0:	1c43      	adds	r3, r0, #1
 800a3d2:	89a3      	ldrh	r3, [r4, #12]
 800a3d4:	d106      	bne.n	800a3e4 <__sflush_r+0x68>
 800a3d6:	6829      	ldr	r1, [r5, #0]
 800a3d8:	291d      	cmp	r1, #29
 800a3da:	d82b      	bhi.n	800a434 <__sflush_r+0xb8>
 800a3dc:	4a29      	ldr	r2, [pc, #164]	; (800a484 <__sflush_r+0x108>)
 800a3de:	410a      	asrs	r2, r1
 800a3e0:	07d6      	lsls	r6, r2, #31
 800a3e2:	d427      	bmi.n	800a434 <__sflush_r+0xb8>
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	6062      	str	r2, [r4, #4]
 800a3e8:	04d9      	lsls	r1, r3, #19
 800a3ea:	6922      	ldr	r2, [r4, #16]
 800a3ec:	6022      	str	r2, [r4, #0]
 800a3ee:	d504      	bpl.n	800a3fa <__sflush_r+0x7e>
 800a3f0:	1c42      	adds	r2, r0, #1
 800a3f2:	d101      	bne.n	800a3f8 <__sflush_r+0x7c>
 800a3f4:	682b      	ldr	r3, [r5, #0]
 800a3f6:	b903      	cbnz	r3, 800a3fa <__sflush_r+0x7e>
 800a3f8:	6560      	str	r0, [r4, #84]	; 0x54
 800a3fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3fc:	602f      	str	r7, [r5, #0]
 800a3fe:	2900      	cmp	r1, #0
 800a400:	d0c9      	beq.n	800a396 <__sflush_r+0x1a>
 800a402:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a406:	4299      	cmp	r1, r3
 800a408:	d002      	beq.n	800a410 <__sflush_r+0x94>
 800a40a:	4628      	mov	r0, r5
 800a40c:	f7ff f9e2 	bl	80097d4 <_free_r>
 800a410:	2000      	movs	r0, #0
 800a412:	6360      	str	r0, [r4, #52]	; 0x34
 800a414:	e7c0      	b.n	800a398 <__sflush_r+0x1c>
 800a416:	2301      	movs	r3, #1
 800a418:	4628      	mov	r0, r5
 800a41a:	47b0      	blx	r6
 800a41c:	1c41      	adds	r1, r0, #1
 800a41e:	d1c8      	bne.n	800a3b2 <__sflush_r+0x36>
 800a420:	682b      	ldr	r3, [r5, #0]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d0c5      	beq.n	800a3b2 <__sflush_r+0x36>
 800a426:	2b1d      	cmp	r3, #29
 800a428:	d001      	beq.n	800a42e <__sflush_r+0xb2>
 800a42a:	2b16      	cmp	r3, #22
 800a42c:	d101      	bne.n	800a432 <__sflush_r+0xb6>
 800a42e:	602f      	str	r7, [r5, #0]
 800a430:	e7b1      	b.n	800a396 <__sflush_r+0x1a>
 800a432:	89a3      	ldrh	r3, [r4, #12]
 800a434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a438:	81a3      	strh	r3, [r4, #12]
 800a43a:	e7ad      	b.n	800a398 <__sflush_r+0x1c>
 800a43c:	690f      	ldr	r7, [r1, #16]
 800a43e:	2f00      	cmp	r7, #0
 800a440:	d0a9      	beq.n	800a396 <__sflush_r+0x1a>
 800a442:	0793      	lsls	r3, r2, #30
 800a444:	680e      	ldr	r6, [r1, #0]
 800a446:	bf08      	it	eq
 800a448:	694b      	ldreq	r3, [r1, #20]
 800a44a:	600f      	str	r7, [r1, #0]
 800a44c:	bf18      	it	ne
 800a44e:	2300      	movne	r3, #0
 800a450:	eba6 0807 	sub.w	r8, r6, r7
 800a454:	608b      	str	r3, [r1, #8]
 800a456:	f1b8 0f00 	cmp.w	r8, #0
 800a45a:	dd9c      	ble.n	800a396 <__sflush_r+0x1a>
 800a45c:	6a21      	ldr	r1, [r4, #32]
 800a45e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a460:	4643      	mov	r3, r8
 800a462:	463a      	mov	r2, r7
 800a464:	4628      	mov	r0, r5
 800a466:	47b0      	blx	r6
 800a468:	2800      	cmp	r0, #0
 800a46a:	dc06      	bgt.n	800a47a <__sflush_r+0xfe>
 800a46c:	89a3      	ldrh	r3, [r4, #12]
 800a46e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a472:	81a3      	strh	r3, [r4, #12]
 800a474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a478:	e78e      	b.n	800a398 <__sflush_r+0x1c>
 800a47a:	4407      	add	r7, r0
 800a47c:	eba8 0800 	sub.w	r8, r8, r0
 800a480:	e7e9      	b.n	800a456 <__sflush_r+0xda>
 800a482:	bf00      	nop
 800a484:	dfbffffe 	.word	0xdfbffffe

0800a488 <_fflush_r>:
 800a488:	b538      	push	{r3, r4, r5, lr}
 800a48a:	690b      	ldr	r3, [r1, #16]
 800a48c:	4605      	mov	r5, r0
 800a48e:	460c      	mov	r4, r1
 800a490:	b913      	cbnz	r3, 800a498 <_fflush_r+0x10>
 800a492:	2500      	movs	r5, #0
 800a494:	4628      	mov	r0, r5
 800a496:	bd38      	pop	{r3, r4, r5, pc}
 800a498:	b118      	cbz	r0, 800a4a2 <_fflush_r+0x1a>
 800a49a:	6a03      	ldr	r3, [r0, #32]
 800a49c:	b90b      	cbnz	r3, 800a4a2 <_fflush_r+0x1a>
 800a49e:	f7fe f9f7 	bl	8008890 <__sinit>
 800a4a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d0f3      	beq.n	800a492 <_fflush_r+0xa>
 800a4aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a4ac:	07d0      	lsls	r0, r2, #31
 800a4ae:	d404      	bmi.n	800a4ba <_fflush_r+0x32>
 800a4b0:	0599      	lsls	r1, r3, #22
 800a4b2:	d402      	bmi.n	800a4ba <_fflush_r+0x32>
 800a4b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4b6:	f7fe fb01 	bl	8008abc <__retarget_lock_acquire_recursive>
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	4621      	mov	r1, r4
 800a4be:	f7ff ff5d 	bl	800a37c <__sflush_r>
 800a4c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4c4:	07da      	lsls	r2, r3, #31
 800a4c6:	4605      	mov	r5, r0
 800a4c8:	d4e4      	bmi.n	800a494 <_fflush_r+0xc>
 800a4ca:	89a3      	ldrh	r3, [r4, #12]
 800a4cc:	059b      	lsls	r3, r3, #22
 800a4ce:	d4e1      	bmi.n	800a494 <_fflush_r+0xc>
 800a4d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4d2:	f7fe faf4 	bl	8008abe <__retarget_lock_release_recursive>
 800a4d6:	e7dd      	b.n	800a494 <_fflush_r+0xc>

0800a4d8 <memmove>:
 800a4d8:	4288      	cmp	r0, r1
 800a4da:	b510      	push	{r4, lr}
 800a4dc:	eb01 0402 	add.w	r4, r1, r2
 800a4e0:	d902      	bls.n	800a4e8 <memmove+0x10>
 800a4e2:	4284      	cmp	r4, r0
 800a4e4:	4623      	mov	r3, r4
 800a4e6:	d807      	bhi.n	800a4f8 <memmove+0x20>
 800a4e8:	1e43      	subs	r3, r0, #1
 800a4ea:	42a1      	cmp	r1, r4
 800a4ec:	d008      	beq.n	800a500 <memmove+0x28>
 800a4ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a4f6:	e7f8      	b.n	800a4ea <memmove+0x12>
 800a4f8:	4402      	add	r2, r0
 800a4fa:	4601      	mov	r1, r0
 800a4fc:	428a      	cmp	r2, r1
 800a4fe:	d100      	bne.n	800a502 <memmove+0x2a>
 800a500:	bd10      	pop	{r4, pc}
 800a502:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a506:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a50a:	e7f7      	b.n	800a4fc <memmove+0x24>

0800a50c <_sbrk_r>:
 800a50c:	b538      	push	{r3, r4, r5, lr}
 800a50e:	4d06      	ldr	r5, [pc, #24]	; (800a528 <_sbrk_r+0x1c>)
 800a510:	2300      	movs	r3, #0
 800a512:	4604      	mov	r4, r0
 800a514:	4608      	mov	r0, r1
 800a516:	602b      	str	r3, [r5, #0]
 800a518:	f7f9 fa3a 	bl	8003990 <_sbrk>
 800a51c:	1c43      	adds	r3, r0, #1
 800a51e:	d102      	bne.n	800a526 <_sbrk_r+0x1a>
 800a520:	682b      	ldr	r3, [r5, #0]
 800a522:	b103      	cbz	r3, 800a526 <_sbrk_r+0x1a>
 800a524:	6023      	str	r3, [r4, #0]
 800a526:	bd38      	pop	{r3, r4, r5, pc}
 800a528:	200005ec 	.word	0x200005ec

0800a52c <__assert_func>:
 800a52c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a52e:	4614      	mov	r4, r2
 800a530:	461a      	mov	r2, r3
 800a532:	4b09      	ldr	r3, [pc, #36]	; (800a558 <__assert_func+0x2c>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4605      	mov	r5, r0
 800a538:	68d8      	ldr	r0, [r3, #12]
 800a53a:	b14c      	cbz	r4, 800a550 <__assert_func+0x24>
 800a53c:	4b07      	ldr	r3, [pc, #28]	; (800a55c <__assert_func+0x30>)
 800a53e:	9100      	str	r1, [sp, #0]
 800a540:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a544:	4906      	ldr	r1, [pc, #24]	; (800a560 <__assert_func+0x34>)
 800a546:	462b      	mov	r3, r5
 800a548:	f000 f872 	bl	800a630 <fiprintf>
 800a54c:	f000 f882 	bl	800a654 <abort>
 800a550:	4b04      	ldr	r3, [pc, #16]	; (800a564 <__assert_func+0x38>)
 800a552:	461c      	mov	r4, r3
 800a554:	e7f3      	b.n	800a53e <__assert_func+0x12>
 800a556:	bf00      	nop
 800a558:	2000008c 	.word	0x2000008c
 800a55c:	0800b147 	.word	0x0800b147
 800a560:	0800b154 	.word	0x0800b154
 800a564:	0800b182 	.word	0x0800b182

0800a568 <_calloc_r>:
 800a568:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a56a:	fba1 2402 	umull	r2, r4, r1, r2
 800a56e:	b94c      	cbnz	r4, 800a584 <_calloc_r+0x1c>
 800a570:	4611      	mov	r1, r2
 800a572:	9201      	str	r2, [sp, #4]
 800a574:	f7ff f9a2 	bl	80098bc <_malloc_r>
 800a578:	9a01      	ldr	r2, [sp, #4]
 800a57a:	4605      	mov	r5, r0
 800a57c:	b930      	cbnz	r0, 800a58c <_calloc_r+0x24>
 800a57e:	4628      	mov	r0, r5
 800a580:	b003      	add	sp, #12
 800a582:	bd30      	pop	{r4, r5, pc}
 800a584:	220c      	movs	r2, #12
 800a586:	6002      	str	r2, [r0, #0]
 800a588:	2500      	movs	r5, #0
 800a58a:	e7f8      	b.n	800a57e <_calloc_r+0x16>
 800a58c:	4621      	mov	r1, r4
 800a58e:	f7fe fa18 	bl	80089c2 <memset>
 800a592:	e7f4      	b.n	800a57e <_calloc_r+0x16>

0800a594 <__ascii_mbtowc>:
 800a594:	b082      	sub	sp, #8
 800a596:	b901      	cbnz	r1, 800a59a <__ascii_mbtowc+0x6>
 800a598:	a901      	add	r1, sp, #4
 800a59a:	b142      	cbz	r2, 800a5ae <__ascii_mbtowc+0x1a>
 800a59c:	b14b      	cbz	r3, 800a5b2 <__ascii_mbtowc+0x1e>
 800a59e:	7813      	ldrb	r3, [r2, #0]
 800a5a0:	600b      	str	r3, [r1, #0]
 800a5a2:	7812      	ldrb	r2, [r2, #0]
 800a5a4:	1e10      	subs	r0, r2, #0
 800a5a6:	bf18      	it	ne
 800a5a8:	2001      	movne	r0, #1
 800a5aa:	b002      	add	sp, #8
 800a5ac:	4770      	bx	lr
 800a5ae:	4610      	mov	r0, r2
 800a5b0:	e7fb      	b.n	800a5aa <__ascii_mbtowc+0x16>
 800a5b2:	f06f 0001 	mvn.w	r0, #1
 800a5b6:	e7f8      	b.n	800a5aa <__ascii_mbtowc+0x16>

0800a5b8 <_realloc_r>:
 800a5b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5bc:	4680      	mov	r8, r0
 800a5be:	4614      	mov	r4, r2
 800a5c0:	460e      	mov	r6, r1
 800a5c2:	b921      	cbnz	r1, 800a5ce <_realloc_r+0x16>
 800a5c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c8:	4611      	mov	r1, r2
 800a5ca:	f7ff b977 	b.w	80098bc <_malloc_r>
 800a5ce:	b92a      	cbnz	r2, 800a5dc <_realloc_r+0x24>
 800a5d0:	f7ff f900 	bl	80097d4 <_free_r>
 800a5d4:	4625      	mov	r5, r4
 800a5d6:	4628      	mov	r0, r5
 800a5d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5dc:	f000 f841 	bl	800a662 <_malloc_usable_size_r>
 800a5e0:	4284      	cmp	r4, r0
 800a5e2:	4607      	mov	r7, r0
 800a5e4:	d802      	bhi.n	800a5ec <_realloc_r+0x34>
 800a5e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a5ea:	d812      	bhi.n	800a612 <_realloc_r+0x5a>
 800a5ec:	4621      	mov	r1, r4
 800a5ee:	4640      	mov	r0, r8
 800a5f0:	f7ff f964 	bl	80098bc <_malloc_r>
 800a5f4:	4605      	mov	r5, r0
 800a5f6:	2800      	cmp	r0, #0
 800a5f8:	d0ed      	beq.n	800a5d6 <_realloc_r+0x1e>
 800a5fa:	42bc      	cmp	r4, r7
 800a5fc:	4622      	mov	r2, r4
 800a5fe:	4631      	mov	r1, r6
 800a600:	bf28      	it	cs
 800a602:	463a      	movcs	r2, r7
 800a604:	f7fe fa5c 	bl	8008ac0 <memcpy>
 800a608:	4631      	mov	r1, r6
 800a60a:	4640      	mov	r0, r8
 800a60c:	f7ff f8e2 	bl	80097d4 <_free_r>
 800a610:	e7e1      	b.n	800a5d6 <_realloc_r+0x1e>
 800a612:	4635      	mov	r5, r6
 800a614:	e7df      	b.n	800a5d6 <_realloc_r+0x1e>

0800a616 <__ascii_wctomb>:
 800a616:	b149      	cbz	r1, 800a62c <__ascii_wctomb+0x16>
 800a618:	2aff      	cmp	r2, #255	; 0xff
 800a61a:	bf85      	ittet	hi
 800a61c:	238a      	movhi	r3, #138	; 0x8a
 800a61e:	6003      	strhi	r3, [r0, #0]
 800a620:	700a      	strbls	r2, [r1, #0]
 800a622:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a626:	bf98      	it	ls
 800a628:	2001      	movls	r0, #1
 800a62a:	4770      	bx	lr
 800a62c:	4608      	mov	r0, r1
 800a62e:	4770      	bx	lr

0800a630 <fiprintf>:
 800a630:	b40e      	push	{r1, r2, r3}
 800a632:	b503      	push	{r0, r1, lr}
 800a634:	4601      	mov	r1, r0
 800a636:	ab03      	add	r3, sp, #12
 800a638:	4805      	ldr	r0, [pc, #20]	; (800a650 <fiprintf+0x20>)
 800a63a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a63e:	6800      	ldr	r0, [r0, #0]
 800a640:	9301      	str	r3, [sp, #4]
 800a642:	f000 f83f 	bl	800a6c4 <_vfiprintf_r>
 800a646:	b002      	add	sp, #8
 800a648:	f85d eb04 	ldr.w	lr, [sp], #4
 800a64c:	b003      	add	sp, #12
 800a64e:	4770      	bx	lr
 800a650:	2000008c 	.word	0x2000008c

0800a654 <abort>:
 800a654:	b508      	push	{r3, lr}
 800a656:	2006      	movs	r0, #6
 800a658:	f000 fa0c 	bl	800aa74 <raise>
 800a65c:	2001      	movs	r0, #1
 800a65e:	f7f9 f91f 	bl	80038a0 <_exit>

0800a662 <_malloc_usable_size_r>:
 800a662:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a666:	1f18      	subs	r0, r3, #4
 800a668:	2b00      	cmp	r3, #0
 800a66a:	bfbc      	itt	lt
 800a66c:	580b      	ldrlt	r3, [r1, r0]
 800a66e:	18c0      	addlt	r0, r0, r3
 800a670:	4770      	bx	lr

0800a672 <__sfputc_r>:
 800a672:	6893      	ldr	r3, [r2, #8]
 800a674:	3b01      	subs	r3, #1
 800a676:	2b00      	cmp	r3, #0
 800a678:	b410      	push	{r4}
 800a67a:	6093      	str	r3, [r2, #8]
 800a67c:	da08      	bge.n	800a690 <__sfputc_r+0x1e>
 800a67e:	6994      	ldr	r4, [r2, #24]
 800a680:	42a3      	cmp	r3, r4
 800a682:	db01      	blt.n	800a688 <__sfputc_r+0x16>
 800a684:	290a      	cmp	r1, #10
 800a686:	d103      	bne.n	800a690 <__sfputc_r+0x1e>
 800a688:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a68c:	f000 b934 	b.w	800a8f8 <__swbuf_r>
 800a690:	6813      	ldr	r3, [r2, #0]
 800a692:	1c58      	adds	r0, r3, #1
 800a694:	6010      	str	r0, [r2, #0]
 800a696:	7019      	strb	r1, [r3, #0]
 800a698:	4608      	mov	r0, r1
 800a69a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a69e:	4770      	bx	lr

0800a6a0 <__sfputs_r>:
 800a6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6a2:	4606      	mov	r6, r0
 800a6a4:	460f      	mov	r7, r1
 800a6a6:	4614      	mov	r4, r2
 800a6a8:	18d5      	adds	r5, r2, r3
 800a6aa:	42ac      	cmp	r4, r5
 800a6ac:	d101      	bne.n	800a6b2 <__sfputs_r+0x12>
 800a6ae:	2000      	movs	r0, #0
 800a6b0:	e007      	b.n	800a6c2 <__sfputs_r+0x22>
 800a6b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6b6:	463a      	mov	r2, r7
 800a6b8:	4630      	mov	r0, r6
 800a6ba:	f7ff ffda 	bl	800a672 <__sfputc_r>
 800a6be:	1c43      	adds	r3, r0, #1
 800a6c0:	d1f3      	bne.n	800a6aa <__sfputs_r+0xa>
 800a6c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a6c4 <_vfiprintf_r>:
 800a6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c8:	460d      	mov	r5, r1
 800a6ca:	b09d      	sub	sp, #116	; 0x74
 800a6cc:	4614      	mov	r4, r2
 800a6ce:	4698      	mov	r8, r3
 800a6d0:	4606      	mov	r6, r0
 800a6d2:	b118      	cbz	r0, 800a6dc <_vfiprintf_r+0x18>
 800a6d4:	6a03      	ldr	r3, [r0, #32]
 800a6d6:	b90b      	cbnz	r3, 800a6dc <_vfiprintf_r+0x18>
 800a6d8:	f7fe f8da 	bl	8008890 <__sinit>
 800a6dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6de:	07d9      	lsls	r1, r3, #31
 800a6e0:	d405      	bmi.n	800a6ee <_vfiprintf_r+0x2a>
 800a6e2:	89ab      	ldrh	r3, [r5, #12]
 800a6e4:	059a      	lsls	r2, r3, #22
 800a6e6:	d402      	bmi.n	800a6ee <_vfiprintf_r+0x2a>
 800a6e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6ea:	f7fe f9e7 	bl	8008abc <__retarget_lock_acquire_recursive>
 800a6ee:	89ab      	ldrh	r3, [r5, #12]
 800a6f0:	071b      	lsls	r3, r3, #28
 800a6f2:	d501      	bpl.n	800a6f8 <_vfiprintf_r+0x34>
 800a6f4:	692b      	ldr	r3, [r5, #16]
 800a6f6:	b99b      	cbnz	r3, 800a720 <_vfiprintf_r+0x5c>
 800a6f8:	4629      	mov	r1, r5
 800a6fa:	4630      	mov	r0, r6
 800a6fc:	f000 f93a 	bl	800a974 <__swsetup_r>
 800a700:	b170      	cbz	r0, 800a720 <_vfiprintf_r+0x5c>
 800a702:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a704:	07dc      	lsls	r4, r3, #31
 800a706:	d504      	bpl.n	800a712 <_vfiprintf_r+0x4e>
 800a708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a70c:	b01d      	add	sp, #116	; 0x74
 800a70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a712:	89ab      	ldrh	r3, [r5, #12]
 800a714:	0598      	lsls	r0, r3, #22
 800a716:	d4f7      	bmi.n	800a708 <_vfiprintf_r+0x44>
 800a718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a71a:	f7fe f9d0 	bl	8008abe <__retarget_lock_release_recursive>
 800a71e:	e7f3      	b.n	800a708 <_vfiprintf_r+0x44>
 800a720:	2300      	movs	r3, #0
 800a722:	9309      	str	r3, [sp, #36]	; 0x24
 800a724:	2320      	movs	r3, #32
 800a726:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a72a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a72e:	2330      	movs	r3, #48	; 0x30
 800a730:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a8e4 <_vfiprintf_r+0x220>
 800a734:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a738:	f04f 0901 	mov.w	r9, #1
 800a73c:	4623      	mov	r3, r4
 800a73e:	469a      	mov	sl, r3
 800a740:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a744:	b10a      	cbz	r2, 800a74a <_vfiprintf_r+0x86>
 800a746:	2a25      	cmp	r2, #37	; 0x25
 800a748:	d1f9      	bne.n	800a73e <_vfiprintf_r+0x7a>
 800a74a:	ebba 0b04 	subs.w	fp, sl, r4
 800a74e:	d00b      	beq.n	800a768 <_vfiprintf_r+0xa4>
 800a750:	465b      	mov	r3, fp
 800a752:	4622      	mov	r2, r4
 800a754:	4629      	mov	r1, r5
 800a756:	4630      	mov	r0, r6
 800a758:	f7ff ffa2 	bl	800a6a0 <__sfputs_r>
 800a75c:	3001      	adds	r0, #1
 800a75e:	f000 80a9 	beq.w	800a8b4 <_vfiprintf_r+0x1f0>
 800a762:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a764:	445a      	add	r2, fp
 800a766:	9209      	str	r2, [sp, #36]	; 0x24
 800a768:	f89a 3000 	ldrb.w	r3, [sl]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	f000 80a1 	beq.w	800a8b4 <_vfiprintf_r+0x1f0>
 800a772:	2300      	movs	r3, #0
 800a774:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a778:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a77c:	f10a 0a01 	add.w	sl, sl, #1
 800a780:	9304      	str	r3, [sp, #16]
 800a782:	9307      	str	r3, [sp, #28]
 800a784:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a788:	931a      	str	r3, [sp, #104]	; 0x68
 800a78a:	4654      	mov	r4, sl
 800a78c:	2205      	movs	r2, #5
 800a78e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a792:	4854      	ldr	r0, [pc, #336]	; (800a8e4 <_vfiprintf_r+0x220>)
 800a794:	f7f5 fd3c 	bl	8000210 <memchr>
 800a798:	9a04      	ldr	r2, [sp, #16]
 800a79a:	b9d8      	cbnz	r0, 800a7d4 <_vfiprintf_r+0x110>
 800a79c:	06d1      	lsls	r1, r2, #27
 800a79e:	bf44      	itt	mi
 800a7a0:	2320      	movmi	r3, #32
 800a7a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7a6:	0713      	lsls	r3, r2, #28
 800a7a8:	bf44      	itt	mi
 800a7aa:	232b      	movmi	r3, #43	; 0x2b
 800a7ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a7b4:	2b2a      	cmp	r3, #42	; 0x2a
 800a7b6:	d015      	beq.n	800a7e4 <_vfiprintf_r+0x120>
 800a7b8:	9a07      	ldr	r2, [sp, #28]
 800a7ba:	4654      	mov	r4, sl
 800a7bc:	2000      	movs	r0, #0
 800a7be:	f04f 0c0a 	mov.w	ip, #10
 800a7c2:	4621      	mov	r1, r4
 800a7c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7c8:	3b30      	subs	r3, #48	; 0x30
 800a7ca:	2b09      	cmp	r3, #9
 800a7cc:	d94d      	bls.n	800a86a <_vfiprintf_r+0x1a6>
 800a7ce:	b1b0      	cbz	r0, 800a7fe <_vfiprintf_r+0x13a>
 800a7d0:	9207      	str	r2, [sp, #28]
 800a7d2:	e014      	b.n	800a7fe <_vfiprintf_r+0x13a>
 800a7d4:	eba0 0308 	sub.w	r3, r0, r8
 800a7d8:	fa09 f303 	lsl.w	r3, r9, r3
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	9304      	str	r3, [sp, #16]
 800a7e0:	46a2      	mov	sl, r4
 800a7e2:	e7d2      	b.n	800a78a <_vfiprintf_r+0xc6>
 800a7e4:	9b03      	ldr	r3, [sp, #12]
 800a7e6:	1d19      	adds	r1, r3, #4
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	9103      	str	r1, [sp, #12]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	bfbb      	ittet	lt
 800a7f0:	425b      	neglt	r3, r3
 800a7f2:	f042 0202 	orrlt.w	r2, r2, #2
 800a7f6:	9307      	strge	r3, [sp, #28]
 800a7f8:	9307      	strlt	r3, [sp, #28]
 800a7fa:	bfb8      	it	lt
 800a7fc:	9204      	strlt	r2, [sp, #16]
 800a7fe:	7823      	ldrb	r3, [r4, #0]
 800a800:	2b2e      	cmp	r3, #46	; 0x2e
 800a802:	d10c      	bne.n	800a81e <_vfiprintf_r+0x15a>
 800a804:	7863      	ldrb	r3, [r4, #1]
 800a806:	2b2a      	cmp	r3, #42	; 0x2a
 800a808:	d134      	bne.n	800a874 <_vfiprintf_r+0x1b0>
 800a80a:	9b03      	ldr	r3, [sp, #12]
 800a80c:	1d1a      	adds	r2, r3, #4
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	9203      	str	r2, [sp, #12]
 800a812:	2b00      	cmp	r3, #0
 800a814:	bfb8      	it	lt
 800a816:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a81a:	3402      	adds	r4, #2
 800a81c:	9305      	str	r3, [sp, #20]
 800a81e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a8f4 <_vfiprintf_r+0x230>
 800a822:	7821      	ldrb	r1, [r4, #0]
 800a824:	2203      	movs	r2, #3
 800a826:	4650      	mov	r0, sl
 800a828:	f7f5 fcf2 	bl	8000210 <memchr>
 800a82c:	b138      	cbz	r0, 800a83e <_vfiprintf_r+0x17a>
 800a82e:	9b04      	ldr	r3, [sp, #16]
 800a830:	eba0 000a 	sub.w	r0, r0, sl
 800a834:	2240      	movs	r2, #64	; 0x40
 800a836:	4082      	lsls	r2, r0
 800a838:	4313      	orrs	r3, r2
 800a83a:	3401      	adds	r4, #1
 800a83c:	9304      	str	r3, [sp, #16]
 800a83e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a842:	4829      	ldr	r0, [pc, #164]	; (800a8e8 <_vfiprintf_r+0x224>)
 800a844:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a848:	2206      	movs	r2, #6
 800a84a:	f7f5 fce1 	bl	8000210 <memchr>
 800a84e:	2800      	cmp	r0, #0
 800a850:	d03f      	beq.n	800a8d2 <_vfiprintf_r+0x20e>
 800a852:	4b26      	ldr	r3, [pc, #152]	; (800a8ec <_vfiprintf_r+0x228>)
 800a854:	bb1b      	cbnz	r3, 800a89e <_vfiprintf_r+0x1da>
 800a856:	9b03      	ldr	r3, [sp, #12]
 800a858:	3307      	adds	r3, #7
 800a85a:	f023 0307 	bic.w	r3, r3, #7
 800a85e:	3308      	adds	r3, #8
 800a860:	9303      	str	r3, [sp, #12]
 800a862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a864:	443b      	add	r3, r7
 800a866:	9309      	str	r3, [sp, #36]	; 0x24
 800a868:	e768      	b.n	800a73c <_vfiprintf_r+0x78>
 800a86a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a86e:	460c      	mov	r4, r1
 800a870:	2001      	movs	r0, #1
 800a872:	e7a6      	b.n	800a7c2 <_vfiprintf_r+0xfe>
 800a874:	2300      	movs	r3, #0
 800a876:	3401      	adds	r4, #1
 800a878:	9305      	str	r3, [sp, #20]
 800a87a:	4619      	mov	r1, r3
 800a87c:	f04f 0c0a 	mov.w	ip, #10
 800a880:	4620      	mov	r0, r4
 800a882:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a886:	3a30      	subs	r2, #48	; 0x30
 800a888:	2a09      	cmp	r2, #9
 800a88a:	d903      	bls.n	800a894 <_vfiprintf_r+0x1d0>
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d0c6      	beq.n	800a81e <_vfiprintf_r+0x15a>
 800a890:	9105      	str	r1, [sp, #20]
 800a892:	e7c4      	b.n	800a81e <_vfiprintf_r+0x15a>
 800a894:	fb0c 2101 	mla	r1, ip, r1, r2
 800a898:	4604      	mov	r4, r0
 800a89a:	2301      	movs	r3, #1
 800a89c:	e7f0      	b.n	800a880 <_vfiprintf_r+0x1bc>
 800a89e:	ab03      	add	r3, sp, #12
 800a8a0:	9300      	str	r3, [sp, #0]
 800a8a2:	462a      	mov	r2, r5
 800a8a4:	4b12      	ldr	r3, [pc, #72]	; (800a8f0 <_vfiprintf_r+0x22c>)
 800a8a6:	a904      	add	r1, sp, #16
 800a8a8:	4630      	mov	r0, r6
 800a8aa:	f7fd fbb1 	bl	8008010 <_printf_float>
 800a8ae:	4607      	mov	r7, r0
 800a8b0:	1c78      	adds	r0, r7, #1
 800a8b2:	d1d6      	bne.n	800a862 <_vfiprintf_r+0x19e>
 800a8b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8b6:	07d9      	lsls	r1, r3, #31
 800a8b8:	d405      	bmi.n	800a8c6 <_vfiprintf_r+0x202>
 800a8ba:	89ab      	ldrh	r3, [r5, #12]
 800a8bc:	059a      	lsls	r2, r3, #22
 800a8be:	d402      	bmi.n	800a8c6 <_vfiprintf_r+0x202>
 800a8c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8c2:	f7fe f8fc 	bl	8008abe <__retarget_lock_release_recursive>
 800a8c6:	89ab      	ldrh	r3, [r5, #12]
 800a8c8:	065b      	lsls	r3, r3, #25
 800a8ca:	f53f af1d 	bmi.w	800a708 <_vfiprintf_r+0x44>
 800a8ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8d0:	e71c      	b.n	800a70c <_vfiprintf_r+0x48>
 800a8d2:	ab03      	add	r3, sp, #12
 800a8d4:	9300      	str	r3, [sp, #0]
 800a8d6:	462a      	mov	r2, r5
 800a8d8:	4b05      	ldr	r3, [pc, #20]	; (800a8f0 <_vfiprintf_r+0x22c>)
 800a8da:	a904      	add	r1, sp, #16
 800a8dc:	4630      	mov	r0, r6
 800a8de:	f7fd fe3b 	bl	8008558 <_printf_i>
 800a8e2:	e7e4      	b.n	800a8ae <_vfiprintf_r+0x1ea>
 800a8e4:	0800b12c 	.word	0x0800b12c
 800a8e8:	0800b136 	.word	0x0800b136
 800a8ec:	08008011 	.word	0x08008011
 800a8f0:	0800a6a1 	.word	0x0800a6a1
 800a8f4:	0800b132 	.word	0x0800b132

0800a8f8 <__swbuf_r>:
 800a8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8fa:	460e      	mov	r6, r1
 800a8fc:	4614      	mov	r4, r2
 800a8fe:	4605      	mov	r5, r0
 800a900:	b118      	cbz	r0, 800a90a <__swbuf_r+0x12>
 800a902:	6a03      	ldr	r3, [r0, #32]
 800a904:	b90b      	cbnz	r3, 800a90a <__swbuf_r+0x12>
 800a906:	f7fd ffc3 	bl	8008890 <__sinit>
 800a90a:	69a3      	ldr	r3, [r4, #24]
 800a90c:	60a3      	str	r3, [r4, #8]
 800a90e:	89a3      	ldrh	r3, [r4, #12]
 800a910:	071a      	lsls	r2, r3, #28
 800a912:	d525      	bpl.n	800a960 <__swbuf_r+0x68>
 800a914:	6923      	ldr	r3, [r4, #16]
 800a916:	b31b      	cbz	r3, 800a960 <__swbuf_r+0x68>
 800a918:	6823      	ldr	r3, [r4, #0]
 800a91a:	6922      	ldr	r2, [r4, #16]
 800a91c:	1a98      	subs	r0, r3, r2
 800a91e:	6963      	ldr	r3, [r4, #20]
 800a920:	b2f6      	uxtb	r6, r6
 800a922:	4283      	cmp	r3, r0
 800a924:	4637      	mov	r7, r6
 800a926:	dc04      	bgt.n	800a932 <__swbuf_r+0x3a>
 800a928:	4621      	mov	r1, r4
 800a92a:	4628      	mov	r0, r5
 800a92c:	f7ff fdac 	bl	800a488 <_fflush_r>
 800a930:	b9e0      	cbnz	r0, 800a96c <__swbuf_r+0x74>
 800a932:	68a3      	ldr	r3, [r4, #8]
 800a934:	3b01      	subs	r3, #1
 800a936:	60a3      	str	r3, [r4, #8]
 800a938:	6823      	ldr	r3, [r4, #0]
 800a93a:	1c5a      	adds	r2, r3, #1
 800a93c:	6022      	str	r2, [r4, #0]
 800a93e:	701e      	strb	r6, [r3, #0]
 800a940:	6962      	ldr	r2, [r4, #20]
 800a942:	1c43      	adds	r3, r0, #1
 800a944:	429a      	cmp	r2, r3
 800a946:	d004      	beq.n	800a952 <__swbuf_r+0x5a>
 800a948:	89a3      	ldrh	r3, [r4, #12]
 800a94a:	07db      	lsls	r3, r3, #31
 800a94c:	d506      	bpl.n	800a95c <__swbuf_r+0x64>
 800a94e:	2e0a      	cmp	r6, #10
 800a950:	d104      	bne.n	800a95c <__swbuf_r+0x64>
 800a952:	4621      	mov	r1, r4
 800a954:	4628      	mov	r0, r5
 800a956:	f7ff fd97 	bl	800a488 <_fflush_r>
 800a95a:	b938      	cbnz	r0, 800a96c <__swbuf_r+0x74>
 800a95c:	4638      	mov	r0, r7
 800a95e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a960:	4621      	mov	r1, r4
 800a962:	4628      	mov	r0, r5
 800a964:	f000 f806 	bl	800a974 <__swsetup_r>
 800a968:	2800      	cmp	r0, #0
 800a96a:	d0d5      	beq.n	800a918 <__swbuf_r+0x20>
 800a96c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a970:	e7f4      	b.n	800a95c <__swbuf_r+0x64>
	...

0800a974 <__swsetup_r>:
 800a974:	b538      	push	{r3, r4, r5, lr}
 800a976:	4b2a      	ldr	r3, [pc, #168]	; (800aa20 <__swsetup_r+0xac>)
 800a978:	4605      	mov	r5, r0
 800a97a:	6818      	ldr	r0, [r3, #0]
 800a97c:	460c      	mov	r4, r1
 800a97e:	b118      	cbz	r0, 800a988 <__swsetup_r+0x14>
 800a980:	6a03      	ldr	r3, [r0, #32]
 800a982:	b90b      	cbnz	r3, 800a988 <__swsetup_r+0x14>
 800a984:	f7fd ff84 	bl	8008890 <__sinit>
 800a988:	89a3      	ldrh	r3, [r4, #12]
 800a98a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a98e:	0718      	lsls	r0, r3, #28
 800a990:	d422      	bmi.n	800a9d8 <__swsetup_r+0x64>
 800a992:	06d9      	lsls	r1, r3, #27
 800a994:	d407      	bmi.n	800a9a6 <__swsetup_r+0x32>
 800a996:	2309      	movs	r3, #9
 800a998:	602b      	str	r3, [r5, #0]
 800a99a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a99e:	81a3      	strh	r3, [r4, #12]
 800a9a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a9a4:	e034      	b.n	800aa10 <__swsetup_r+0x9c>
 800a9a6:	0758      	lsls	r0, r3, #29
 800a9a8:	d512      	bpl.n	800a9d0 <__swsetup_r+0x5c>
 800a9aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9ac:	b141      	cbz	r1, 800a9c0 <__swsetup_r+0x4c>
 800a9ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9b2:	4299      	cmp	r1, r3
 800a9b4:	d002      	beq.n	800a9bc <__swsetup_r+0x48>
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	f7fe ff0c 	bl	80097d4 <_free_r>
 800a9bc:	2300      	movs	r3, #0
 800a9be:	6363      	str	r3, [r4, #52]	; 0x34
 800a9c0:	89a3      	ldrh	r3, [r4, #12]
 800a9c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a9c6:	81a3      	strh	r3, [r4, #12]
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	6063      	str	r3, [r4, #4]
 800a9cc:	6923      	ldr	r3, [r4, #16]
 800a9ce:	6023      	str	r3, [r4, #0]
 800a9d0:	89a3      	ldrh	r3, [r4, #12]
 800a9d2:	f043 0308 	orr.w	r3, r3, #8
 800a9d6:	81a3      	strh	r3, [r4, #12]
 800a9d8:	6923      	ldr	r3, [r4, #16]
 800a9da:	b94b      	cbnz	r3, 800a9f0 <__swsetup_r+0x7c>
 800a9dc:	89a3      	ldrh	r3, [r4, #12]
 800a9de:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a9e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9e6:	d003      	beq.n	800a9f0 <__swsetup_r+0x7c>
 800a9e8:	4621      	mov	r1, r4
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	f000 f884 	bl	800aaf8 <__smakebuf_r>
 800a9f0:	89a0      	ldrh	r0, [r4, #12]
 800a9f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9f6:	f010 0301 	ands.w	r3, r0, #1
 800a9fa:	d00a      	beq.n	800aa12 <__swsetup_r+0x9e>
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	60a3      	str	r3, [r4, #8]
 800aa00:	6963      	ldr	r3, [r4, #20]
 800aa02:	425b      	negs	r3, r3
 800aa04:	61a3      	str	r3, [r4, #24]
 800aa06:	6923      	ldr	r3, [r4, #16]
 800aa08:	b943      	cbnz	r3, 800aa1c <__swsetup_r+0xa8>
 800aa0a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa0e:	d1c4      	bne.n	800a99a <__swsetup_r+0x26>
 800aa10:	bd38      	pop	{r3, r4, r5, pc}
 800aa12:	0781      	lsls	r1, r0, #30
 800aa14:	bf58      	it	pl
 800aa16:	6963      	ldrpl	r3, [r4, #20]
 800aa18:	60a3      	str	r3, [r4, #8]
 800aa1a:	e7f4      	b.n	800aa06 <__swsetup_r+0x92>
 800aa1c:	2000      	movs	r0, #0
 800aa1e:	e7f7      	b.n	800aa10 <__swsetup_r+0x9c>
 800aa20:	2000008c 	.word	0x2000008c

0800aa24 <_raise_r>:
 800aa24:	291f      	cmp	r1, #31
 800aa26:	b538      	push	{r3, r4, r5, lr}
 800aa28:	4604      	mov	r4, r0
 800aa2a:	460d      	mov	r5, r1
 800aa2c:	d904      	bls.n	800aa38 <_raise_r+0x14>
 800aa2e:	2316      	movs	r3, #22
 800aa30:	6003      	str	r3, [r0, #0]
 800aa32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa36:	bd38      	pop	{r3, r4, r5, pc}
 800aa38:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800aa3a:	b112      	cbz	r2, 800aa42 <_raise_r+0x1e>
 800aa3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa40:	b94b      	cbnz	r3, 800aa56 <_raise_r+0x32>
 800aa42:	4620      	mov	r0, r4
 800aa44:	f000 f830 	bl	800aaa8 <_getpid_r>
 800aa48:	462a      	mov	r2, r5
 800aa4a:	4601      	mov	r1, r0
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa52:	f000 b817 	b.w	800aa84 <_kill_r>
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d00a      	beq.n	800aa70 <_raise_r+0x4c>
 800aa5a:	1c59      	adds	r1, r3, #1
 800aa5c:	d103      	bne.n	800aa66 <_raise_r+0x42>
 800aa5e:	2316      	movs	r3, #22
 800aa60:	6003      	str	r3, [r0, #0]
 800aa62:	2001      	movs	r0, #1
 800aa64:	e7e7      	b.n	800aa36 <_raise_r+0x12>
 800aa66:	2400      	movs	r4, #0
 800aa68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	4798      	blx	r3
 800aa70:	2000      	movs	r0, #0
 800aa72:	e7e0      	b.n	800aa36 <_raise_r+0x12>

0800aa74 <raise>:
 800aa74:	4b02      	ldr	r3, [pc, #8]	; (800aa80 <raise+0xc>)
 800aa76:	4601      	mov	r1, r0
 800aa78:	6818      	ldr	r0, [r3, #0]
 800aa7a:	f7ff bfd3 	b.w	800aa24 <_raise_r>
 800aa7e:	bf00      	nop
 800aa80:	2000008c 	.word	0x2000008c

0800aa84 <_kill_r>:
 800aa84:	b538      	push	{r3, r4, r5, lr}
 800aa86:	4d07      	ldr	r5, [pc, #28]	; (800aaa4 <_kill_r+0x20>)
 800aa88:	2300      	movs	r3, #0
 800aa8a:	4604      	mov	r4, r0
 800aa8c:	4608      	mov	r0, r1
 800aa8e:	4611      	mov	r1, r2
 800aa90:	602b      	str	r3, [r5, #0]
 800aa92:	f7f8 fef5 	bl	8003880 <_kill>
 800aa96:	1c43      	adds	r3, r0, #1
 800aa98:	d102      	bne.n	800aaa0 <_kill_r+0x1c>
 800aa9a:	682b      	ldr	r3, [r5, #0]
 800aa9c:	b103      	cbz	r3, 800aaa0 <_kill_r+0x1c>
 800aa9e:	6023      	str	r3, [r4, #0]
 800aaa0:	bd38      	pop	{r3, r4, r5, pc}
 800aaa2:	bf00      	nop
 800aaa4:	200005ec 	.word	0x200005ec

0800aaa8 <_getpid_r>:
 800aaa8:	f7f8 bee2 	b.w	8003870 <_getpid>

0800aaac <__swhatbuf_r>:
 800aaac:	b570      	push	{r4, r5, r6, lr}
 800aaae:	460c      	mov	r4, r1
 800aab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aab4:	2900      	cmp	r1, #0
 800aab6:	b096      	sub	sp, #88	; 0x58
 800aab8:	4615      	mov	r5, r2
 800aaba:	461e      	mov	r6, r3
 800aabc:	da0d      	bge.n	800aada <__swhatbuf_r+0x2e>
 800aabe:	89a3      	ldrh	r3, [r4, #12]
 800aac0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800aac4:	f04f 0100 	mov.w	r1, #0
 800aac8:	bf0c      	ite	eq
 800aaca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800aace:	2340      	movne	r3, #64	; 0x40
 800aad0:	2000      	movs	r0, #0
 800aad2:	6031      	str	r1, [r6, #0]
 800aad4:	602b      	str	r3, [r5, #0]
 800aad6:	b016      	add	sp, #88	; 0x58
 800aad8:	bd70      	pop	{r4, r5, r6, pc}
 800aada:	466a      	mov	r2, sp
 800aadc:	f000 f848 	bl	800ab70 <_fstat_r>
 800aae0:	2800      	cmp	r0, #0
 800aae2:	dbec      	blt.n	800aabe <__swhatbuf_r+0x12>
 800aae4:	9901      	ldr	r1, [sp, #4]
 800aae6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800aaea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800aaee:	4259      	negs	r1, r3
 800aaf0:	4159      	adcs	r1, r3
 800aaf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aaf6:	e7eb      	b.n	800aad0 <__swhatbuf_r+0x24>

0800aaf8 <__smakebuf_r>:
 800aaf8:	898b      	ldrh	r3, [r1, #12]
 800aafa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aafc:	079d      	lsls	r5, r3, #30
 800aafe:	4606      	mov	r6, r0
 800ab00:	460c      	mov	r4, r1
 800ab02:	d507      	bpl.n	800ab14 <__smakebuf_r+0x1c>
 800ab04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab08:	6023      	str	r3, [r4, #0]
 800ab0a:	6123      	str	r3, [r4, #16]
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	6163      	str	r3, [r4, #20]
 800ab10:	b002      	add	sp, #8
 800ab12:	bd70      	pop	{r4, r5, r6, pc}
 800ab14:	ab01      	add	r3, sp, #4
 800ab16:	466a      	mov	r2, sp
 800ab18:	f7ff ffc8 	bl	800aaac <__swhatbuf_r>
 800ab1c:	9900      	ldr	r1, [sp, #0]
 800ab1e:	4605      	mov	r5, r0
 800ab20:	4630      	mov	r0, r6
 800ab22:	f7fe fecb 	bl	80098bc <_malloc_r>
 800ab26:	b948      	cbnz	r0, 800ab3c <__smakebuf_r+0x44>
 800ab28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab2c:	059a      	lsls	r2, r3, #22
 800ab2e:	d4ef      	bmi.n	800ab10 <__smakebuf_r+0x18>
 800ab30:	f023 0303 	bic.w	r3, r3, #3
 800ab34:	f043 0302 	orr.w	r3, r3, #2
 800ab38:	81a3      	strh	r3, [r4, #12]
 800ab3a:	e7e3      	b.n	800ab04 <__smakebuf_r+0xc>
 800ab3c:	89a3      	ldrh	r3, [r4, #12]
 800ab3e:	6020      	str	r0, [r4, #0]
 800ab40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab44:	81a3      	strh	r3, [r4, #12]
 800ab46:	9b00      	ldr	r3, [sp, #0]
 800ab48:	6163      	str	r3, [r4, #20]
 800ab4a:	9b01      	ldr	r3, [sp, #4]
 800ab4c:	6120      	str	r0, [r4, #16]
 800ab4e:	b15b      	cbz	r3, 800ab68 <__smakebuf_r+0x70>
 800ab50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab54:	4630      	mov	r0, r6
 800ab56:	f000 f81d 	bl	800ab94 <_isatty_r>
 800ab5a:	b128      	cbz	r0, 800ab68 <__smakebuf_r+0x70>
 800ab5c:	89a3      	ldrh	r3, [r4, #12]
 800ab5e:	f023 0303 	bic.w	r3, r3, #3
 800ab62:	f043 0301 	orr.w	r3, r3, #1
 800ab66:	81a3      	strh	r3, [r4, #12]
 800ab68:	89a3      	ldrh	r3, [r4, #12]
 800ab6a:	431d      	orrs	r5, r3
 800ab6c:	81a5      	strh	r5, [r4, #12]
 800ab6e:	e7cf      	b.n	800ab10 <__smakebuf_r+0x18>

0800ab70 <_fstat_r>:
 800ab70:	b538      	push	{r3, r4, r5, lr}
 800ab72:	4d07      	ldr	r5, [pc, #28]	; (800ab90 <_fstat_r+0x20>)
 800ab74:	2300      	movs	r3, #0
 800ab76:	4604      	mov	r4, r0
 800ab78:	4608      	mov	r0, r1
 800ab7a:	4611      	mov	r1, r2
 800ab7c:	602b      	str	r3, [r5, #0]
 800ab7e:	f7f8 fede 	bl	800393e <_fstat>
 800ab82:	1c43      	adds	r3, r0, #1
 800ab84:	d102      	bne.n	800ab8c <_fstat_r+0x1c>
 800ab86:	682b      	ldr	r3, [r5, #0]
 800ab88:	b103      	cbz	r3, 800ab8c <_fstat_r+0x1c>
 800ab8a:	6023      	str	r3, [r4, #0]
 800ab8c:	bd38      	pop	{r3, r4, r5, pc}
 800ab8e:	bf00      	nop
 800ab90:	200005ec 	.word	0x200005ec

0800ab94 <_isatty_r>:
 800ab94:	b538      	push	{r3, r4, r5, lr}
 800ab96:	4d06      	ldr	r5, [pc, #24]	; (800abb0 <_isatty_r+0x1c>)
 800ab98:	2300      	movs	r3, #0
 800ab9a:	4604      	mov	r4, r0
 800ab9c:	4608      	mov	r0, r1
 800ab9e:	602b      	str	r3, [r5, #0]
 800aba0:	f7f8 fedd 	bl	800395e <_isatty>
 800aba4:	1c43      	adds	r3, r0, #1
 800aba6:	d102      	bne.n	800abae <_isatty_r+0x1a>
 800aba8:	682b      	ldr	r3, [r5, #0]
 800abaa:	b103      	cbz	r3, 800abae <_isatty_r+0x1a>
 800abac:	6023      	str	r3, [r4, #0]
 800abae:	bd38      	pop	{r3, r4, r5, pc}
 800abb0:	200005ec 	.word	0x200005ec

0800abb4 <atan2f>:
 800abb4:	f000 b800 	b.w	800abb8 <__ieee754_atan2f>

0800abb8 <__ieee754_atan2f>:
 800abb8:	ee10 2a90 	vmov	r2, s1
 800abbc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800abc0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800abc4:	b510      	push	{r4, lr}
 800abc6:	eef0 7a40 	vmov.f32	s15, s0
 800abca:	dc06      	bgt.n	800abda <__ieee754_atan2f+0x22>
 800abcc:	ee10 0a10 	vmov	r0, s0
 800abd0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800abd4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800abd8:	dd04      	ble.n	800abe4 <__ieee754_atan2f+0x2c>
 800abda:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800abde:	eeb0 0a67 	vmov.f32	s0, s15
 800abe2:	bd10      	pop	{r4, pc}
 800abe4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800abe8:	d103      	bne.n	800abf2 <__ieee754_atan2f+0x3a>
 800abea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abee:	f000 b883 	b.w	800acf8 <atanf>
 800abf2:	1794      	asrs	r4, r2, #30
 800abf4:	f004 0402 	and.w	r4, r4, #2
 800abf8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800abfc:	b943      	cbnz	r3, 800ac10 <__ieee754_atan2f+0x58>
 800abfe:	2c02      	cmp	r4, #2
 800ac00:	d05e      	beq.n	800acc0 <__ieee754_atan2f+0x108>
 800ac02:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800acd4 <__ieee754_atan2f+0x11c>
 800ac06:	2c03      	cmp	r4, #3
 800ac08:	bf08      	it	eq
 800ac0a:	eef0 7a47 	vmoveq.f32	s15, s14
 800ac0e:	e7e6      	b.n	800abde <__ieee754_atan2f+0x26>
 800ac10:	b941      	cbnz	r1, 800ac24 <__ieee754_atan2f+0x6c>
 800ac12:	eddf 7a31 	vldr	s15, [pc, #196]	; 800acd8 <__ieee754_atan2f+0x120>
 800ac16:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800acdc <__ieee754_atan2f+0x124>
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	bfb8      	it	lt
 800ac1e:	eef0 7a47 	vmovlt.f32	s15, s14
 800ac22:	e7dc      	b.n	800abde <__ieee754_atan2f+0x26>
 800ac24:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ac28:	d110      	bne.n	800ac4c <__ieee754_atan2f+0x94>
 800ac2a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ac2e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800ac32:	d107      	bne.n	800ac44 <__ieee754_atan2f+0x8c>
 800ac34:	2c02      	cmp	r4, #2
 800ac36:	d846      	bhi.n	800acc6 <__ieee754_atan2f+0x10e>
 800ac38:	4b29      	ldr	r3, [pc, #164]	; (800ace0 <__ieee754_atan2f+0x128>)
 800ac3a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ac3e:	edd3 7a00 	vldr	s15, [r3]
 800ac42:	e7cc      	b.n	800abde <__ieee754_atan2f+0x26>
 800ac44:	2c02      	cmp	r4, #2
 800ac46:	d841      	bhi.n	800accc <__ieee754_atan2f+0x114>
 800ac48:	4b26      	ldr	r3, [pc, #152]	; (800ace4 <__ieee754_atan2f+0x12c>)
 800ac4a:	e7f6      	b.n	800ac3a <__ieee754_atan2f+0x82>
 800ac4c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ac50:	d0df      	beq.n	800ac12 <__ieee754_atan2f+0x5a>
 800ac52:	1a5b      	subs	r3, r3, r1
 800ac54:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800ac58:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800ac5c:	da1a      	bge.n	800ac94 <__ieee754_atan2f+0xdc>
 800ac5e:	2a00      	cmp	r2, #0
 800ac60:	da01      	bge.n	800ac66 <__ieee754_atan2f+0xae>
 800ac62:	313c      	adds	r1, #60	; 0x3c
 800ac64:	db19      	blt.n	800ac9a <__ieee754_atan2f+0xe2>
 800ac66:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800ac6a:	f000 f919 	bl	800aea0 <fabsf>
 800ac6e:	f000 f843 	bl	800acf8 <atanf>
 800ac72:	eef0 7a40 	vmov.f32	s15, s0
 800ac76:	2c01      	cmp	r4, #1
 800ac78:	d012      	beq.n	800aca0 <__ieee754_atan2f+0xe8>
 800ac7a:	2c02      	cmp	r4, #2
 800ac7c:	d017      	beq.n	800acae <__ieee754_atan2f+0xf6>
 800ac7e:	2c00      	cmp	r4, #0
 800ac80:	d0ad      	beq.n	800abde <__ieee754_atan2f+0x26>
 800ac82:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800ace8 <__ieee754_atan2f+0x130>
 800ac86:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac8a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800acec <__ieee754_atan2f+0x134>
 800ac8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac92:	e7a4      	b.n	800abde <__ieee754_atan2f+0x26>
 800ac94:	eddf 7a10 	vldr	s15, [pc, #64]	; 800acd8 <__ieee754_atan2f+0x120>
 800ac98:	e7ed      	b.n	800ac76 <__ieee754_atan2f+0xbe>
 800ac9a:	eddf 7a15 	vldr	s15, [pc, #84]	; 800acf0 <__ieee754_atan2f+0x138>
 800ac9e:	e7ea      	b.n	800ac76 <__ieee754_atan2f+0xbe>
 800aca0:	ee17 3a90 	vmov	r3, s15
 800aca4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aca8:	ee07 3a90 	vmov	s15, r3
 800acac:	e797      	b.n	800abde <__ieee754_atan2f+0x26>
 800acae:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800ace8 <__ieee754_atan2f+0x130>
 800acb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800acb6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800acec <__ieee754_atan2f+0x134>
 800acba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acbe:	e78e      	b.n	800abde <__ieee754_atan2f+0x26>
 800acc0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800acec <__ieee754_atan2f+0x134>
 800acc4:	e78b      	b.n	800abde <__ieee754_atan2f+0x26>
 800acc6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800acf4 <__ieee754_atan2f+0x13c>
 800acca:	e788      	b.n	800abde <__ieee754_atan2f+0x26>
 800accc:	eddf 7a08 	vldr	s15, [pc, #32]	; 800acf0 <__ieee754_atan2f+0x138>
 800acd0:	e785      	b.n	800abde <__ieee754_atan2f+0x26>
 800acd2:	bf00      	nop
 800acd4:	c0490fdb 	.word	0xc0490fdb
 800acd8:	3fc90fdb 	.word	0x3fc90fdb
 800acdc:	bfc90fdb 	.word	0xbfc90fdb
 800ace0:	0800b284 	.word	0x0800b284
 800ace4:	0800b290 	.word	0x0800b290
 800ace8:	33bbbd2e 	.word	0x33bbbd2e
 800acec:	40490fdb 	.word	0x40490fdb
 800acf0:	00000000 	.word	0x00000000
 800acf4:	3f490fdb 	.word	0x3f490fdb

0800acf8 <atanf>:
 800acf8:	b538      	push	{r3, r4, r5, lr}
 800acfa:	ee10 5a10 	vmov	r5, s0
 800acfe:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800ad02:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800ad06:	eef0 7a40 	vmov.f32	s15, s0
 800ad0a:	db10      	blt.n	800ad2e <atanf+0x36>
 800ad0c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800ad10:	dd04      	ble.n	800ad1c <atanf+0x24>
 800ad12:	ee70 7a00 	vadd.f32	s15, s0, s0
 800ad16:	eeb0 0a67 	vmov.f32	s0, s15
 800ad1a:	bd38      	pop	{r3, r4, r5, pc}
 800ad1c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800ae54 <atanf+0x15c>
 800ad20:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800ae58 <atanf+0x160>
 800ad24:	2d00      	cmp	r5, #0
 800ad26:	bfd8      	it	le
 800ad28:	eef0 7a47 	vmovle.f32	s15, s14
 800ad2c:	e7f3      	b.n	800ad16 <atanf+0x1e>
 800ad2e:	4b4b      	ldr	r3, [pc, #300]	; (800ae5c <atanf+0x164>)
 800ad30:	429c      	cmp	r4, r3
 800ad32:	dc10      	bgt.n	800ad56 <atanf+0x5e>
 800ad34:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800ad38:	da0a      	bge.n	800ad50 <atanf+0x58>
 800ad3a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ae60 <atanf+0x168>
 800ad3e:	ee30 7a07 	vadd.f32	s14, s0, s14
 800ad42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad46:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ad4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad4e:	dce2      	bgt.n	800ad16 <atanf+0x1e>
 800ad50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad54:	e013      	b.n	800ad7e <atanf+0x86>
 800ad56:	f000 f8a3 	bl	800aea0 <fabsf>
 800ad5a:	4b42      	ldr	r3, [pc, #264]	; (800ae64 <atanf+0x16c>)
 800ad5c:	429c      	cmp	r4, r3
 800ad5e:	dc4f      	bgt.n	800ae00 <atanf+0x108>
 800ad60:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800ad64:	429c      	cmp	r4, r3
 800ad66:	dc41      	bgt.n	800adec <atanf+0xf4>
 800ad68:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800ad6c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ad70:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ad74:	2300      	movs	r3, #0
 800ad76:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ad7a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ad7e:	1c5a      	adds	r2, r3, #1
 800ad80:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ad84:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800ae68 <atanf+0x170>
 800ad88:	eddf 5a38 	vldr	s11, [pc, #224]	; 800ae6c <atanf+0x174>
 800ad8c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800ae70 <atanf+0x178>
 800ad90:	ee66 6a06 	vmul.f32	s13, s12, s12
 800ad94:	eee6 5a87 	vfma.f32	s11, s13, s14
 800ad98:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800ae74 <atanf+0x17c>
 800ad9c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ada0:	eddf 5a35 	vldr	s11, [pc, #212]	; 800ae78 <atanf+0x180>
 800ada4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ada8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800ae7c <atanf+0x184>
 800adac:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800adb0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ae80 <atanf+0x188>
 800adb4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800adb8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800ae84 <atanf+0x18c>
 800adbc:	eea6 5a87 	vfma.f32	s10, s13, s14
 800adc0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800ae88 <atanf+0x190>
 800adc4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800adc8:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800ae8c <atanf+0x194>
 800adcc:	eea7 5a26 	vfma.f32	s10, s14, s13
 800add0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800ae90 <atanf+0x198>
 800add4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800add8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800addc:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ade0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ade4:	d121      	bne.n	800ae2a <atanf+0x132>
 800ade6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800adea:	e794      	b.n	800ad16 <atanf+0x1e>
 800adec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800adf0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800adf4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800adf8:	2301      	movs	r3, #1
 800adfa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800adfe:	e7be      	b.n	800ad7e <atanf+0x86>
 800ae00:	4b24      	ldr	r3, [pc, #144]	; (800ae94 <atanf+0x19c>)
 800ae02:	429c      	cmp	r4, r3
 800ae04:	dc0b      	bgt.n	800ae1e <atanf+0x126>
 800ae06:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800ae0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae0e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ae12:	2302      	movs	r3, #2
 800ae14:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ae18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae1c:	e7af      	b.n	800ad7e <atanf+0x86>
 800ae1e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ae22:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ae26:	2303      	movs	r3, #3
 800ae28:	e7a9      	b.n	800ad7e <atanf+0x86>
 800ae2a:	4a1b      	ldr	r2, [pc, #108]	; (800ae98 <atanf+0x1a0>)
 800ae2c:	491b      	ldr	r1, [pc, #108]	; (800ae9c <atanf+0x1a4>)
 800ae2e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ae32:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ae36:	edd3 6a00 	vldr	s13, [r3]
 800ae3a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ae3e:	2d00      	cmp	r5, #0
 800ae40:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ae44:	edd2 7a00 	vldr	s15, [r2]
 800ae48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ae4c:	bfb8      	it	lt
 800ae4e:	eef1 7a67 	vneglt.f32	s15, s15
 800ae52:	e760      	b.n	800ad16 <atanf+0x1e>
 800ae54:	3fc90fdb 	.word	0x3fc90fdb
 800ae58:	bfc90fdb 	.word	0xbfc90fdb
 800ae5c:	3edfffff 	.word	0x3edfffff
 800ae60:	7149f2ca 	.word	0x7149f2ca
 800ae64:	3f97ffff 	.word	0x3f97ffff
 800ae68:	3c8569d7 	.word	0x3c8569d7
 800ae6c:	3d4bda59 	.word	0x3d4bda59
 800ae70:	bd6ef16b 	.word	0xbd6ef16b
 800ae74:	3d886b35 	.word	0x3d886b35
 800ae78:	3dba2e6e 	.word	0x3dba2e6e
 800ae7c:	3e124925 	.word	0x3e124925
 800ae80:	3eaaaaab 	.word	0x3eaaaaab
 800ae84:	bd15a221 	.word	0xbd15a221
 800ae88:	bd9d8795 	.word	0xbd9d8795
 800ae8c:	bde38e38 	.word	0xbde38e38
 800ae90:	be4ccccd 	.word	0xbe4ccccd
 800ae94:	401bffff 	.word	0x401bffff
 800ae98:	0800b29c 	.word	0x0800b29c
 800ae9c:	0800b2ac 	.word	0x0800b2ac

0800aea0 <fabsf>:
 800aea0:	ee10 3a10 	vmov	r3, s0
 800aea4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aea8:	ee00 3a10 	vmov	s0, r3
 800aeac:	4770      	bx	lr
	...

0800aeb0 <_init>:
 800aeb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeb2:	bf00      	nop
 800aeb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeb6:	bc08      	pop	{r3}
 800aeb8:	469e      	mov	lr, r3
 800aeba:	4770      	bx	lr

0800aebc <_fini>:
 800aebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aebe:	bf00      	nop
 800aec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aec2:	bc08      	pop	{r3}
 800aec4:	469e      	mov	lr, r3
 800aec6:	4770      	bx	lr
