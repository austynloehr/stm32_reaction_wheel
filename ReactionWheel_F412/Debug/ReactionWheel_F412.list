
ReactionWheel_F412.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adb8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  0800af88  0800af88  0001af88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b394  0800b394  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b394  0800b394  0001b394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b39c  0800b39c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b39c  0800b39c  0001b39c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3a0  0800b3a0  0001b3a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b3a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  200001dc  0800b580  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  0800b580  00020550  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a319  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dd2  00000000  00000000  0003a5dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  0003e3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000efd  00000000  00000000  0003f758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000233c1  00000000  00000000  00040655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e96e  00000000  00000000  00063a16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c17e9  00000000  00000000  00082384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006474  00000000  00000000  00143b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00149fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000880  00000000  00000000  0014a04d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  0014a8cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800af70 	.word	0x0800af70

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800af70 	.word	0x0800af70

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <App_Config>:
 */

#include "Application.h"

/* Start global function definition */
Config_Bus_t App_Config(Config_HAL_Bus_t Config_HAL_Bus){
 8000f84:	b084      	sub	sp, #16
 8000f86:	b5b0      	push	{r4, r5, r7, lr}
 8000f88:	b0a8      	sub	sp, #160	; 0xa0
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000f8e:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 8000f92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Config_Bus_t Config_Bus;

	HAL_Delay(200);
 8000f96:	20c8      	movs	r0, #200	; 0xc8
 8000f98:	f002 f9a4 	bl	80032e4 <HAL_Delay>

	Config_Bus.Config_HAL_Bus = Config_HAL_Bus;
 8000f9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fa0:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8000fa4:	224c      	movs	r2, #76	; 0x4c
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f007 fa12 	bl	80083d0 <memcpy>
	Config_Bus.Config_MPU6050_Bus = Config_MPU6050(Config_HAL_Bus.hi2c);
 8000fac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 f8a3 	bl	8001100 <Config_MPU6050>
 8000fba:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8000fbe:	463d      	mov	r5, r7
 8000fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc8:	682b      	ldr	r3, [r5, #0]
 8000fca:	6023      	str	r3, [r4, #0]

	Config_DSP();
 8000fcc:	f000 f87e 	bl	80010cc <Config_DSP>
	Config_VESC(Config_HAL_Bus.hcan);
 8000fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 faad 	bl	8001534 <Config_VESC>

	return Config_Bus;
 8000fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fe2:	2270      	movs	r2, #112	; 0x70
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f007 f9f3 	bl	80083d0 <memcpy>
}
 8000fea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000fec:	37a0      	adds	r7, #160	; 0xa0
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000ff4:	b004      	add	sp, #16
 8000ff6:	4770      	bx	lr

08000ff8 <App_Main>:

void App_Main(Config_Bus_t Config_Bus){
 8000ff8:	b084      	sub	sp, #16
 8000ffa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ffc:	b0b9      	sub	sp, #228	; 0xe4
 8000ffe:	af1c      	add	r7, sp, #112	; 0x70
 8001000:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8001004:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HI_Bus_t HI_Bus;
	IP_Bus_t IP_Bus;
	CT_Bus_t CT_Bus;
	OP_Bus_t OP_Bus;

	HI_Bus = IO_HardwareInputs(Config_Bus);
 8001008:	f107 0464 	add.w	r4, r7, #100	; 0x64
 800100c:	4668      	mov	r0, sp
 800100e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001012:	2264      	movs	r2, #100	; 0x64
 8001014:	4619      	mov	r1, r3
 8001016:	f007 f9db 	bl	80083d0 <memcpy>
 800101a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800101e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001020:	4620      	mov	r0, r4
 8001022:	f000 ffcd 	bl	8001fc0 <IO_HardwareInputs>
	IP_Bus = PR_InputProcessing(Config_Bus, HI_Bus);
 8001026:	f107 054c 	add.w	r5, r7, #76	; 0x4c
 800102a:	ac19      	add	r4, sp, #100	; 0x64
 800102c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001030:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001034:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001038:	4668      	mov	r0, sp
 800103a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800103e:	2264      	movs	r2, #100	; 0x64
 8001040:	4619      	mov	r1, r3
 8001042:	f007 f9c5 	bl	80083d0 <memcpy>
 8001046:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800104a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800104c:	4628      	mov	r0, r5
 800104e:	f001 fba1 	bl	8002794 <PR_InputProcessing>
	CT_Bus = CT_Control(IP_Bus);
 8001052:	f107 050c 	add.w	r5, r7, #12
 8001056:	466c      	mov	r4, sp
 8001058:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800105c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001060:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001064:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001068:	cb0e      	ldmia	r3, {r1, r2, r3}
 800106a:	4628      	mov	r0, r5
 800106c:	f000 fac0 	bl	80015f0 <CT_Control>
	OP_Bus = PR_OutputProcessing(CT_Bus);
 8001070:	463e      	mov	r6, r7
 8001072:	466d      	mov	r5, sp
 8001074:	f107 0418 	add.w	r4, r7, #24
 8001078:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800107a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800107c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800107e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001082:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001084:	6823      	ldr	r3, [r4, #0]
 8001086:	602b      	str	r3, [r5, #0]
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800108e:	4630      	mov	r0, r6
 8001090:	f001 fbb3 	bl	80027fa <PR_OutputProcessing>
	IO_HardwareOutputs(Config_Bus, OP_Bus);
 8001094:	ac18      	add	r4, sp, #96	; 0x60
 8001096:	463b      	mov	r3, r7
 8001098:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800109c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010a0:	4668      	mov	r0, sp
 80010a2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80010a6:	2260      	movs	r2, #96	; 0x60
 80010a8:	4619      	mov	r1, r3
 80010aa:	f007 f991 	bl	80083d0 <memcpy>
 80010ae:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80010b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010b4:	f000 ffa9 	bl	800200a <IO_HardwareOutputs>

	HAL_Delay(4);
 80010b8:	2004      	movs	r0, #4
 80010ba:	f002 f913 	bl	80032e4 <HAL_Delay>
}
 80010be:	bf00      	nop
 80010c0:	3774      	adds	r7, #116	; 0x74
 80010c2:	46bd      	mov	sp, r7
 80010c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80010c8:	b004      	add	sp, #16
 80010ca:	4770      	bx	lr

080010cc <Config_DSP>:

static const float iirAccelCoeffs[IIR_NUM_COEFF] = {0.010432413371093418, 0.020864826742186836, 0.010432413371093418, 1.6909963768874425, -0.7327260303718163};
/*End global variable definitions */


void Config_DSP(void){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df1_init_f32(&S_AccelRoll, IIR_NUM_STAGES, (float32_t *) &iirAccelCoeffs[0], (float32_t *) &FiltAccelRollState[0]);
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <Config_DSP+0x20>)
 80010d2:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <Config_DSP+0x24>)
 80010d4:	2101      	movs	r1, #1
 80010d6:	4807      	ldr	r0, [pc, #28]	; (80010f4 <Config_DSP+0x28>)
 80010d8:	f006 fa78 	bl	80075cc <arm_biquad_cascade_df1_init_f32>
	arm_biquad_cascade_df1_init_f32(&S_AccelPitch, IIR_NUM_STAGES, (float32_t *) &iirAccelCoeffs[0], (float32_t *) &FiltAccelPitchState[0]);
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <Config_DSP+0x2c>)
 80010de:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <Config_DSP+0x24>)
 80010e0:	2101      	movs	r1, #1
 80010e2:	4806      	ldr	r0, [pc, #24]	; (80010fc <Config_DSP+0x30>)
 80010e4:	f006 fa72 	bl	80075cc <arm_biquad_cascade_df1_init_f32>
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000210 	.word	0x20000210
 80010f0:	0800afa0 	.word	0x0800afa0
 80010f4:	200001f8 	.word	0x200001f8
 80010f8:	20000220 	.word	0x20000220
 80010fc:	20000204 	.word	0x20000204

08001100 <Config_MPU6050>:
static MPU6050_IMUSensitivityData_t MPU6050_GetSens(const AFS_SEL_enum_t accelRange, const FS_SEL_enum_t gyroRange);
static MPU6050_IMUOffsetData_t MPU6050_CalibrateOffsets(I2C_HandleTypeDef *hi2c, Config_MPU6050_Bus_t Config_MPU6050_Bus);
/* Start static function prototypes */

/* Start global function definitions */
Config_MPU6050_Bus_t Config_MPU6050(I2C_HandleTypeDef *hi2c){
 8001100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001102:	b0a3      	sub	sp, #140	; 0x8c
 8001104:	af08      	add	r7, sp, #32
 8001106:	6278      	str	r0, [r7, #36]	; 0x24
 8001108:	6239      	str	r1, [r7, #32]
	Config_MPU6050_Bus_t Config_MPU6050_Bus;

	MPU6050_Init(hi2c);
 800110a:	6a38      	ldr	r0, [r7, #32]
 800110c:	f000 f840 	bl	8001190 <MPU6050_Init>

	Config_MPU6050_Bus.Sensitivity = MPU6050_GetSens(accelRange, gyroRange);
 8001110:	2301      	movs	r3, #1
 8001112:	2201      	movs	r2, #1
 8001114:	4611      	mov	r1, r2
 8001116:	4618      	mov	r0, r3
 8001118:	f000 f8ac 	bl	8001274 <MPU6050_GetSens>
 800111c:	eeb0 7a40 	vmov.f32	s14, s0
 8001120:	eef0 7a60 	vmov.f32	s15, s1
 8001124:	ed87 7a11 	vstr	s14, [r7, #68]	; 0x44
 8001128:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

	Config_MPU6050_Bus.Offsets = (MPU6050_IMUOffsetData_t) {0, 0, 0, 0, 0, 0, 0};
 800112c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
 800113c:	615a      	str	r2, [r3, #20]
 800113e:	619a      	str	r2, [r3, #24]
	Config_MPU6050_Bus.Offsets = MPU6050_CalibrateOffsets(hi2c, Config_MPU6050_Bus);
 8001140:	463e      	mov	r6, r7
 8001142:	466d      	mov	r5, sp
 8001144:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001148:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800114a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800114c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001150:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001154:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001158:	cb0c      	ldmia	r3, {r2, r3}
 800115a:	6a39      	ldr	r1, [r7, #32]
 800115c:	4630      	mov	r0, r6
 800115e:	f000 f8f3 	bl	8001348 <MPU6050_CalibrateOffsets>
 8001162:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001166:	463d      	mov	r5, r7
 8001168:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800116a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800116c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001170:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return Config_MPU6050_Bus;
 8001174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001176:	461d      	mov	r5, r3
 8001178:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800117c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800117e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001180:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001182:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001184:	6823      	ldr	r3, [r4, #0]
 8001186:	602b      	str	r3, [r5, #0]
}
 8001188:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800118a:	376c      	adds	r7, #108	; 0x6c
 800118c:	46bd      	mov	sp, r7
 800118e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001190 <MPU6050_Init>:
/* End global function definitions */

/* Start static function definitions */
static void MPU6050_Init(I2C_HandleTypeDef *hi2c){
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af04      	add	r7, sp, #16
 8001196:	6078      	str	r0, [r7, #4]
	static uint8_t regData;
	static uint8_t numReg = 1;

	/* I2C device check */
	// Raise error later
	HAL_StatusTypeDef deviceCheck = HAL_I2C_IsDeviceReady(hi2c, MPU6050_ADDR, 1, I2C_TIMEOUT);
 8001198:	2332      	movs	r3, #50	; 0x32
 800119a:	2201      	movs	r2, #1
 800119c:	21d0      	movs	r1, #208	; 0xd0
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f003 ff3c 	bl	800501c <HAL_I2C_IsDeviceReady>
 80011a4:	4603      	mov	r3, r0
 80011a6:	73fb      	strb	r3, [r7, #15]

	if (deviceCheck != HAL_OK){
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MPU6050_Init+0x22>
		Error_Handler();
 80011ae:	f001 fd87 	bl	8002cc0 <Error_Handler>
	}

	/* Wake IMU */
	regData = CLKSEL;
 80011b2:	4b2e      	ldr	r3, [pc, #184]	; (800126c <MPU6050_Init+0xdc>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, PWR_MGMT1_REG, REG_LEN, &regData, numReg, I2C_TIMEOUT);
 80011b8:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <MPU6050_Init+0xe0>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b29b      	uxth	r3, r3
 80011be:	2232      	movs	r2, #50	; 0x32
 80011c0:	9202      	str	r2, [sp, #8]
 80011c2:	9301      	str	r3, [sp, #4]
 80011c4:	4b29      	ldr	r3, [pc, #164]	; (800126c <MPU6050_Init+0xdc>)
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2301      	movs	r3, #1
 80011ca:	226b      	movs	r2, #107	; 0x6b
 80011cc:	21d0      	movs	r1, #208	; 0xd0
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f003 fc04 	bl	80049dc <HAL_I2C_Mem_Write>

	/* Calculate SMPLRT_DIV from desired sample rate */
	regData = SMPLRT_DIV;
 80011d4:	4b25      	ldr	r3, [pc, #148]	; (800126c <MPU6050_Init+0xdc>)
 80011d6:	2207      	movs	r2, #7
 80011d8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, SMPRT_DIV_REG, REG_LEN, &regData, numReg, I2C_TIMEOUT);
 80011da:	4b25      	ldr	r3, [pc, #148]	; (8001270 <MPU6050_Init+0xe0>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	2232      	movs	r2, #50	; 0x32
 80011e2:	9202      	str	r2, [sp, #8]
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	4b21      	ldr	r3, [pc, #132]	; (800126c <MPU6050_Init+0xdc>)
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2301      	movs	r3, #1
 80011ec:	2219      	movs	r2, #25
 80011ee:	21d0      	movs	r1, #208	; 0xd0
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f003 fbf3 	bl	80049dc <HAL_I2C_Mem_Write>

	/* Set gyro config */
	regData = (uint8_t) (gyroRange << 3);
 80011f6:	2301      	movs	r3, #1
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <MPU6050_Init+0xdc>)
 80011fe:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, GYRO_CONFIG_REG, REG_LEN, &regData, numReg, I2C_TIMEOUT);
 8001200:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <MPU6050_Init+0xe0>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b29b      	uxth	r3, r3
 8001206:	2232      	movs	r2, #50	; 0x32
 8001208:	9202      	str	r2, [sp, #8]
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <MPU6050_Init+0xdc>)
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2301      	movs	r3, #1
 8001212:	221b      	movs	r2, #27
 8001214:	21d0      	movs	r1, #208	; 0xd0
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f003 fbe0 	bl	80049dc <HAL_I2C_Mem_Write>

	/* Set accel config */
	regData = (uint8_t) (accelRange << 3);
 800121c:	2301      	movs	r3, #1
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <MPU6050_Init+0xdc>)
 8001224:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, ACCEL_CONFIG_REG, REG_LEN, &regData, numReg, I2C_TIMEOUT);
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <MPU6050_Init+0xe0>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	b29b      	uxth	r3, r3
 800122c:	2232      	movs	r2, #50	; 0x32
 800122e:	9202      	str	r2, [sp, #8]
 8001230:	9301      	str	r3, [sp, #4]
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MPU6050_Init+0xdc>)
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2301      	movs	r3, #1
 8001238:	221c      	movs	r2, #28
 800123a:	21d0      	movs	r1, #208	; 0xd0
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f003 fbcd 	bl	80049dc <HAL_I2C_Mem_Write>

	/*Configure low pass filter*/
	regData = DLPF_CFG;
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <MPU6050_Init+0xdc>)
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, CONFIG_REG, REG_LEN, &regData, numReg, I2C_TIMEOUT);
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <MPU6050_Init+0xe0>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b29b      	uxth	r3, r3
 800124e:	2232      	movs	r2, #50	; 0x32
 8001250:	9202      	str	r2, [sp, #8]
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <MPU6050_Init+0xdc>)
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2301      	movs	r3, #1
 800125a:	221a      	movs	r2, #26
 800125c:	21d0      	movs	r1, #208	; 0xd0
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f003 fbbc 	bl	80049dc <HAL_I2C_Mem_Write>
}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000230 	.word	0x20000230
 8001270:	20000004 	.word	0x20000004

08001274 <MPU6050_GetSens>:

static MPU6050_IMUSensitivityData_t MPU6050_GetSens(const AFS_SEL_enum_t accelRange, const FS_SEL_enum_t gyroRange){
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	460a      	mov	r2, r1
 800127e:	73fb      	strb	r3, [r7, #15]
 8001280:	4613      	mov	r3, r2
 8001282:	73bb      	strb	r3, [r7, #14]
	MPU6050_IMUSensitivityData_t IMUSensitivity;

	/* Determine sensor sensitivity based on sensor range */
	switch (accelRange){
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	2b03      	cmp	r3, #3
 8001288:	d81a      	bhi.n	80012c0 <MPU6050_GetSens+0x4c>
 800128a:	a201      	add	r2, pc, #4	; (adr r2, 8001290 <MPU6050_GetSens+0x1c>)
 800128c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001290:	080012a1 	.word	0x080012a1
 8001294:	080012a9 	.word	0x080012a9
 8001298:	080012b1 	.word	0x080012b1
 800129c:	080012b9 	.word	0x080012b9
	case g2:
		IMUSensitivity.AccelSens = 16384.0;
 80012a0:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 80012a4:	613b      	str	r3, [r7, #16]
		break;
 80012a6:	e010      	b.n	80012ca <MPU6050_GetSens+0x56>
	case g4:
		IMUSensitivity.AccelSens = 8192.0;
 80012a8:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 80012ac:	613b      	str	r3, [r7, #16]
		break;
 80012ae:	e00c      	b.n	80012ca <MPU6050_GetSens+0x56>
	case g8:
		IMUSensitivity.AccelSens = 4096.0;
 80012b0:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 80012b4:	613b      	str	r3, [r7, #16]
		break;
 80012b6:	e008      	b.n	80012ca <MPU6050_GetSens+0x56>
	case g16:
		IMUSensitivity.AccelSens = 2048.0;
 80012b8:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 80012bc:	613b      	str	r3, [r7, #16]
		break;
 80012be:	e004      	b.n	80012ca <MPU6050_GetSens+0x56>
	default:
		IMUSensitivity.AccelSens = 0;
 80012c0:	f04f 0300 	mov.w	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
		Error_Handler();
 80012c6:	f001 fcfb 	bl	8002cc0 <Error_Handler>
	}

	/* Determine sensor sensitivity based on sensor range */
	switch (gyroRange){
 80012ca:	7bbb      	ldrb	r3, [r7, #14]
 80012cc:	2b03      	cmp	r3, #3
 80012ce:	d817      	bhi.n	8001300 <MPU6050_GetSens+0x8c>
 80012d0:	a201      	add	r2, pc, #4	; (adr r2, 80012d8 <MPU6050_GetSens+0x64>)
 80012d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d6:	bf00      	nop
 80012d8:	080012e9 	.word	0x080012e9
 80012dc:	080012ef 	.word	0x080012ef
 80012e0:	080012f5 	.word	0x080012f5
 80012e4:	080012fb 	.word	0x080012fb
	case w250:
		IMUSensitivity.GyroSens = 131.0;
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <MPU6050_GetSens+0xc0>)
 80012ea:	617b      	str	r3, [r7, #20]
		break;
 80012ec:	e00d      	b.n	800130a <MPU6050_GetSens+0x96>
	case w500:
		IMUSensitivity.GyroSens = 65.5;
 80012ee:	4b12      	ldr	r3, [pc, #72]	; (8001338 <MPU6050_GetSens+0xc4>)
 80012f0:	617b      	str	r3, [r7, #20]
		break;
 80012f2:	e00a      	b.n	800130a <MPU6050_GetSens+0x96>
	case w1000:
		IMUSensitivity.GyroSens = 32.8;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <MPU6050_GetSens+0xc8>)
 80012f6:	617b      	str	r3, [r7, #20]
		break;
 80012f8:	e007      	b.n	800130a <MPU6050_GetSens+0x96>
	case w2000:
		IMUSensitivity.GyroSens = 16.4;
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <MPU6050_GetSens+0xcc>)
 80012fc:	617b      	str	r3, [r7, #20]
		break;
 80012fe:	e004      	b.n	800130a <MPU6050_GetSens+0x96>
	default:
		IMUSensitivity.GyroSens = 0;
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
		Error_Handler();
 8001306:	f001 fcdb 	bl	8002cc0 <Error_Handler>
	}

	return IMUSensitivity;
 800130a:	f107 0318 	add.w	r3, r7, #24
 800130e:	f107 0210 	add.w	r2, r7, #16
 8001312:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001316:	e883 0003 	stmia.w	r3, {r0, r1}
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	ee07 2a10 	vmov	s14, r2
 8001322:	ee07 3a90 	vmov	s15, r3
}
 8001326:	eeb0 0a47 	vmov.f32	s0, s14
 800132a:	eef0 0a67 	vmov.f32	s1, s15
 800132e:	3720      	adds	r7, #32
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	43030000 	.word	0x43030000
 8001338:	42830000 	.word	0x42830000
 800133c:	42033333 	.word	0x42033333
 8001340:	41833333 	.word	0x41833333
 8001344:	00000000 	.word	0x00000000

08001348 <MPU6050_CalibrateOffsets>:

static MPU6050_IMUOffsetData_t MPU6050_CalibrateOffsets(I2C_HandleTypeDef *hi2c, Config_MPU6050_Bus_t Config_MPU6050_Bus){
 8001348:	b082      	sub	sp, #8
 800134a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800134c:	b0a5      	sub	sp, #148	; 0x94
 800134e:	af0a      	add	r7, sp, #40	; 0x28
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	6039      	str	r1, [r7, #0]
 8001354:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001358:	e881 000c 	stmia.w	r1, {r2, r3}
	MPU6050_IMUOffsetData_t IMUOffsets;
	HI_MPU6050_Bus_t HI_MPU6050_Bus;
	IP_MPU6050_Bus_t IP_MPU6050_Bus;

	uint32_t numSamples = 2000;
 800135c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001360:	64bb      	str	r3, [r7, #72]	; 0x48

	float sumAx = 0;
 8001362:	f04f 0300 	mov.w	r3, #0
 8001366:	667b      	str	r3, [r7, #100]	; 0x64
	float sumAy = 0;
 8001368:	f04f 0300 	mov.w	r3, #0
 800136c:	663b      	str	r3, [r7, #96]	; 0x60
	float sumAz = 0;
 800136e:	f04f 0300 	mov.w	r3, #0
 8001372:	65fb      	str	r3, [r7, #92]	; 0x5c
	float sumWx = 0;
 8001374:	f04f 0300 	mov.w	r3, #0
 8001378:	65bb      	str	r3, [r7, #88]	; 0x58
	float sumWy = 0;
 800137a:	f04f 0300 	mov.w	r3, #0
 800137e:	657b      	str	r3, [r7, #84]	; 0x54
	float sumWz = 0;
 8001380:	f04f 0300 	mov.w	r3, #0
 8001384:	653b      	str	r3, [r7, #80]	; 0x50

	for(uint32_t i = 0; i < numSamples; i++){
 8001386:	2300      	movs	r3, #0
 8001388:	64fb      	str	r3, [r7, #76]	; 0x4c
 800138a:	e04c      	b.n	8001426 <MPU6050_CalibrateOffsets+0xde>
		HI_MPU6050_Bus = HI_MPU6050(hi2c);
 800138c:	f107 0320 	add.w	r3, r7, #32
 8001390:	6839      	ldr	r1, [r7, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f000 fe79 	bl	800208a <HI_MPU6050>
		IP_MPU6050_Bus = IP_MPU6050(HI_MPU6050_Bus, Config_MPU6050_Bus);
 8001398:	f107 0608 	add.w	r6, r7, #8
 800139c:	466c      	mov	r4, sp
 800139e:	f107 0580 	add.w	r5, r7, #128	; 0x80
 80013a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013aa:	682b      	ldr	r3, [r5, #0]
 80013ac:	6023      	str	r3, [r4, #0]
 80013ae:	f107 0320 	add.w	r3, r7, #32
 80013b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013b4:	4630      	mov	r0, r6
 80013b6:	f000 ff96 	bl	80022e6 <IP_MPU6050>

		sumAx += IP_MPU6050_Bus.accel.XOUT_ms2;
 80013ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80013be:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80013c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		sumAy += IP_MPU6050_Bus.accel.YOUT_ms2;
 80013ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ce:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80013d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		sumAz += IP_MPU6050_Bus.accel.ZOUT_ms2;
 80013da:	edd7 7a04 	vldr	s15, [r7, #16]
 80013de:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80013e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

		sumWx += IP_MPU6050_Bus.gyro.XOUT_dps;
 80013ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80013ee:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80013f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		sumWy += IP_MPU6050_Bus.gyro.YOUT_dps;
 80013fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80013fe:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001406:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		sumWz += IP_MPU6050_Bus.gyro.ZOUT_dps;
 800140a:	edd7 7a07 	vldr	s15, [r7, #28]
 800140e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001416:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

		HAL_Delay(5);
 800141a:	2005      	movs	r0, #5
 800141c:	f001 ff62 	bl	80032e4 <HAL_Delay>
	for(uint32_t i = 0; i < numSamples; i++){
 8001420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001422:	3301      	adds	r3, #1
 8001424:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001426:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800142a:	429a      	cmp	r2, r3
 800142c:	d3ae      	bcc.n	800138c <MPU6050_CalibrateOffsets+0x44>
	}

	IMUOffsets.AxOffset = 0 - (sumAx / numSamples);
 800142e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001430:	ee07 3a90 	vmov	s15, r3
 8001434:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001438:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800143c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001440:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001530 <MPU6050_CalibrateOffsets+0x1e8>
 8001444:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001448:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	IMUOffsets.AyOffset = 0 - (sumAy / numSamples); // (9.80665 * sin(0 * PI / 180))
 800144c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800144e:	ee07 3a90 	vmov	s15, r3
 8001452:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001456:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800145a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800145e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001530 <MPU6050_CalibrateOffsets+0x1e8>
 8001462:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001466:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	IMUOffsets.AzOffset = 9.80665 - (sumAz / numSamples);
 800146a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800146c:	ee07 3a90 	vmov	s15, r3
 8001470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001474:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001478:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800147c:	ee16 0a90 	vmov	r0, s13
 8001480:	f7ff f882 	bl	8000588 <__aeabi_f2d>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	a127      	add	r1, pc, #156	; (adr r1, 8001528 <MPU6050_CalibrateOffsets+0x1e0>)
 800148a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800148e:	f7fe ff1b 	bl	80002c8 <__aeabi_dsub>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	4610      	mov	r0, r2
 8001498:	4619      	mov	r1, r3
 800149a:	f7ff fba5 	bl	8000be8 <__aeabi_d2f>
 800149e:	4603      	mov	r3, r0
 80014a0:	637b      	str	r3, [r7, #52]	; 0x34

	IMUOffsets.WxOffset = 0 - (sumWx / numSamples);
 80014a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014ac:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80014b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014b4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001530 <MPU6050_CalibrateOffsets+0x1e8>
 80014b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014bc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	IMUOffsets.WyOffset = 0 - (sumWy / numSamples);
 80014c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014ca:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80014ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014d2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001530 <MPU6050_CalibrateOffsets+0x1e8>
 80014d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014da:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	IMUOffsets.WzOffset = 0 - (sumWz / numSamples);
 80014de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014e0:	ee07 3a90 	vmov	s15, r3
 80014e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014e8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80014ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014f0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001530 <MPU6050_CalibrateOffsets+0x1e8>
 80014f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	IMUOffsets.SensCalibrated_bool = 1;
 80014fc:	2301      	movs	r3, #1
 80014fe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	return IMUOffsets;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	461d      	mov	r5, r3
 8001506:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800150a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800150c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800150e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001512:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	376c      	adds	r7, #108	; 0x6c
 800151a:	46bd      	mov	sp, r7
 800151c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001520:	b002      	add	sp, #8
 8001522:	4770      	bx	lr
 8001524:	f3af 8000 	nop.w
 8001528:	3a92a305 	.word	0x3a92a305
 800152c:	40239d01 	.word	0x40239d01
 8001530:	00000000 	.word	0x00000000

08001534 <Config_VESC>:
CAN_RxHeaderTypeDef RxHeader;
uint8_t RxData[8];
/* End global variables */

/* Start global function definitions */
void Config_VESC(CAN_HandleTypeDef *hcan){
 8001534:	b580      	push	{r7, lr}
 8001536:	b08e      	sub	sp, #56	; 0x38
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800153c:	2301      	movs	r3, #1
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
	canfilterconfig.FilterBank = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001544:	2300      	movs	r3, #0
 8001546:	61fb      	str	r3, [r7, #28]
	canfilterconfig.FilterIdHigh = 0x0000;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterIdLow = ((CAN_ID1 << 3) ^ (CAN_IDE1 << 2)) ^ (CAN_RTR1 << 1);
 800154c:	f644 030c 	movw	r3, #18444	; 0x480c
 8001550:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterMaskIdHigh = 0x0000;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8001556:	2300      	movs	r3, #0
 8001558:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDLIST;
 800155a:	2301      	movs	r3, #1
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800155e:	2301      	movs	r3, #1
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28

	HAL_CAN_ConfigFilter(hcan, &canfilterconfig);
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	4619      	mov	r1, r3
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f002 f8d5 	bl	8003718 <HAL_CAN_ConfigFilter>

	void (*pCAN_RxCallback)(CAN_HandleTypeDef *_hcan) = &CAN_HAL_RxFifo0MsgPendingCallback;
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <Config_VESC+0x90>)
 8001570:	637b      	str	r3, [r7, #52]	; 0x34

	if(HAL_CAN_RegisterCallback(hcan, HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID, pCAN_RxCallback) != HAL_OK){
 8001572:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001574:	2106      	movs	r1, #6
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f002 f81e 	bl	80035b8 <HAL_CAN_RegisterCallback>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <Config_VESC+0x52>
	  Error_Handler();
 8001582:	f001 fb9d 	bl	8002cc0 <Error_Handler>
	}

	HAL_CAN_Start(hcan);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f002 f9a6 	bl	80038d8 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800158c:	2102      	movs	r1, #2
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f002 fbd3 	bl	8003d3a <HAL_CAN_ActivateNotification>

	TxHeader.DLC = 4;
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <Config_VESC+0x94>)
 8001596:	2204      	movs	r2, #4
 8001598:	611a      	str	r2, [r3, #16]
	TxHeader.ExtId = 0x301;
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <Config_VESC+0x94>)
 800159c:	f240 3201 	movw	r2, #769	; 0x301
 80015a0:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_EXT;
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <Config_VESC+0x94>)
 80015a4:	2204      	movs	r2, #4
 80015a6:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80015a8:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <Config_VESC+0x94>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0;
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <Config_VESC+0x94>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
	TxHeader.TransmitGlobalTime = DISABLE;
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <Config_VESC+0x94>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	751a      	strb	r2, [r3, #20]
}
 80015ba:	bf00      	nop
 80015bc:	3738      	adds	r7, #56	; 0x38
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	080015cd 	.word	0x080015cd
 80015c8:	20000234 	.word	0x20000234

080015cc <CAN_HAL_RxFifo0MsgPendingCallback>:

void CAN_HAL_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <CAN_HAL_RxFifo0MsgPendingCallback+0x1c>)
 80015d6:	4a05      	ldr	r2, [pc, #20]	; (80015ec <CAN_HAL_RxFifo0MsgPendingCallback+0x20>)
 80015d8:	2100      	movs	r1, #0
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f002 fa9b 	bl	8003b16 <HAL_CAN_GetRxMessage>
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	2000026c 	.word	0x2000026c
 80015ec:	20000250 	.word	0x20000250

080015f0 <CT_Control>:
static VS_Bus_t CT_VirtualSensors(IP_Bus_t IP_Bus);
static CT_Bus_t CT_Controllers(IP_Bus_t IP_Bus, VS_Bus_t VS_Bus);
/* End Static function prototypes */

/* Start global function definitions */
CT_Bus_t CT_Control(IP_Bus_t IP_Bus){
 80015f0:	b084      	sub	sp, #16
 80015f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f4:	b0af      	sub	sp, #188	; 0xbc
 80015f6:	af10      	add	r7, sp, #64	; 0x40
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80015fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	VS_Bus_t VS_Bus;
	CT_Bus_t CT_Bus;

	VS_Bus = CT_VirtualSensors(IP_Bus);
 8001602:	f107 0548 	add.w	r5, r7, #72	; 0x48
 8001606:	466c      	mov	r4, sp
 8001608:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800160c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001610:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001614:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001618:	cb0e      	ldmia	r3, {r1, r2, r3}
 800161a:	4628      	mov	r0, r5
 800161c:	f000 f82f 	bl	800167e <CT_VirtualSensors>
	CT_Bus = CT_Controllers(IP_Bus, VS_Bus);
 8001620:	f107 0608 	add.w	r6, r7, #8
 8001624:	ad03      	add	r5, sp, #12
 8001626:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800162a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800162c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800162e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001632:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001636:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800163a:	466c      	mov	r4, sp
 800163c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001640:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001644:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001648:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800164c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800164e:	4630      	mov	r0, r6
 8001650:	f000 f84a 	bl	80016e8 <CT_Controllers>

	return CT_Bus;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	461d      	mov	r5, r3
 8001658:	f107 0408 	add.w	r4, r7, #8
 800165c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800165e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001660:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001662:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001664:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001666:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001668:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800166c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	377c      	adds	r7, #124	; 0x7c
 8001674:	46bd      	mov	sp, r7
 8001676:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800167a:	b004      	add	sp, #16
 800167c:	4770      	bx	lr

0800167e <CT_VirtualSensors>:
/* End global function definitions */

/* Start Static function definitions */
static VS_Bus_t CT_VirtualSensors(IP_Bus_t IP_Bus){
 800167e:	b084      	sub	sp, #16
 8001680:	b5b0      	push	{r4, r5, r7, lr}
 8001682:	b09e      	sub	sp, #120	; 0x78
 8001684:	af04      	add	r7, sp, #16
 8001686:	6378      	str	r0, [r7, #52]	; 0x34
 8001688:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 800168c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	VS_Bus_t VS_Bus;

	VS_Bus.VS_Orientation_Bus = EstimateOrientation(IP_Bus.IP_MPU6050_Bus);
 8001690:	463d      	mov	r5, r7
 8001692:	466c      	mov	r4, sp
 8001694:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001698:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800169c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80016a0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80016a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016a6:	4628      	mov	r0, r5
 80016a8:	f000 f96e 	bl	8001988 <EstimateOrientation>
 80016ac:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80016b0:	463d      	mov	r5, r7
 80016b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80016be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	return VS_Bus;
 80016c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c4:	461d      	mov	r5, r3
 80016c6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80016ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016d6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80016da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80016dc:	3768      	adds	r7, #104	; 0x68
 80016de:	46bd      	mov	sp, r7
 80016e0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80016e4:	b004      	add	sp, #16
 80016e6:	4770      	bx	lr

080016e8 <CT_Controllers>:

static CT_Bus_t CT_Controllers(IP_Bus_t IP_Bus, VS_Bus_t VS_Bus){
 80016e8:	b084      	sub	sp, #16
 80016ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ec:	b0a5      	sub	sp, #148	; 0x94
 80016ee:	af10      	add	r7, sp, #64	; 0x40
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80016f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	CT_Bus_t CT_Bus;

	CT_Bus.VS_Bus = VS_Bus;
 80016fa:	f107 0410 	add.w	r4, r7, #16
 80016fe:	f107 0584 	add.w	r5, r7, #132	; 0x84
 8001702:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001704:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001706:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800170a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800170e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	CT_Bus.CT_Log_Bus = CT_Logging(IP_Bus.IP_MPU6050_Bus, VS_Bus.VS_Orientation_Bus);
 8001712:	463e      	mov	r6, r7
 8001714:	ad03      	add	r5, sp, #12
 8001716:	f107 0484 	add.w	r4, r7, #132	; 0x84
 800171a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800171c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800171e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001720:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001722:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001726:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800172a:	466c      	mov	r4, sp
 800172c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001730:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001734:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001738:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800173c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800173e:	4630      	mov	r0, r6
 8001740:	f000 f8b0 	bl	80018a4 <CT_Logging>
 8001744:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001748:	463a      	mov	r2, r7
 800174a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800174e:	e883 0003 	stmia.w	r3, {r0, r1}
	CT_Bus.CT_Balance_Bus = CT_BalanceController(0, VS_Bus.VS_Orientation_Bus.CompFiltOrientation.roll_deg);
 8001752:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001756:	463b      	mov	r3, r7
 8001758:	eeb0 0a67 	vmov.f32	s0, s15
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f000 f81c 	bl	800179c <CT_BalanceController>
 8001764:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001768:	463a      	mov	r2, r7
 800176a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800176e:	e883 0003 	stmia.w	r3, {r0, r1}

	return CT_Bus;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	461d      	mov	r5, r3
 8001776:	f107 0410 	add.w	r4, r7, #16
 800177a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800177c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800177e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001780:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001782:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001784:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001786:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800178a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	3754      	adds	r7, #84	; 0x54
 8001792:	46bd      	mov	sp, r7
 8001794:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001798:	b004      	add	sp, #16
 800179a:	4770      	bx	lr

0800179c <CT_BalanceController>:
/* Start Static function prototypes */
static int8_t signf(float x);
/* End Static function prototypes */

/* Start Global Function Definitions */
CT_Balance_Bus_t CT_BalanceController(uint8_t BalanceEnable_bool, float RollAng_deg){
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	460b      	mov	r3, r1
 80017a6:	ed87 0a01 	vstr	s0, [r7, #4]
 80017aa:	72fb      	strb	r3, [r7, #11]
	CT_Balance_Bus_t CT_Balance_Bus;

	uint32_t MaxMotorSpeed_rpm = 11000;
 80017ac:	f642 23f8 	movw	r3, #11000	; 0x2af8
 80017b0:	623b      	str	r3, [r7, #32]
	uint32_t MaxRollAng_deg = 45;
 80017b2:	232d      	movs	r3, #45	; 0x2d
 80017b4:	61fb      	str	r3, [r7, #28]

	// Limit throttle request to -1 / 1
	float ThrottleReq_pct = RollAng_deg / MaxRollAng_deg;
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	ee07 3a90 	vmov	s15, r3
 80017bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017c0:	edd7 6a01 	vldr	s13, [r7, #4]
 80017c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017c8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	if(fabsf(ThrottleReq_pct) > 1){
 80017cc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80017d0:	eef0 7ae7 	vabs.f32	s15, s15
 80017d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e0:	dd0a      	ble.n	80017f8 <CT_BalanceController+0x5c>
		ThrottleReq_pct = 1 * signf(ThrottleReq_pct);
 80017e2:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80017e6:	f000 f839 	bl	800185c <signf>
 80017ea:	4603      	mov	r3, r0
 80017ec:	ee07 3a90 	vmov	s15, r3
 80017f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017f4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	}

	// Throttle deadzone
	if(fabsf(RollAng_deg) < 2){
 80017f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80017fc:	eef0 7ae7 	vabs.f32	s15, s15
 8001800:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001804:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180c:	d502      	bpl.n	8001814 <CT_BalanceController+0x78>
		BalanceEnable_bool = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	72fb      	strb	r3, [r7, #11]
 8001812:	e001      	b.n	8001818 <CT_BalanceController+0x7c>
	} else{
		BalanceEnable_bool = 1;
 8001814:	2301      	movs	r3, #1
 8001816:	72fb      	strb	r3, [r7, #11]
	}

	// Zero out throttle if not enabled
	if(!BalanceEnable_bool){
 8001818:	7afb      	ldrb	r3, [r7, #11]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d102      	bne.n	8001824 <CT_BalanceController+0x88>
		ThrottleReq_pct = 0;
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
	}

	CT_Balance_Bus.MotorSpeedReq_rpm = ThrottleReq_pct * MaxMotorSpeed_rpm;
 8001824:	6a3b      	ldr	r3, [r7, #32]
 8001826:	ee07 3a90 	vmov	s15, r3
 800182a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800182e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001836:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800183a:	ee17 3a90 	vmov	r3, s15
 800183e:	617b      	str	r3, [r7, #20]
	CT_Balance_Bus.ThrottleReq_pct = ThrottleReq_pct;
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	61bb      	str	r3, [r7, #24]

	return CT_Balance_Bus;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	461a      	mov	r2, r3
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001850:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	3728      	adds	r7, #40	; 0x28
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <signf>:
/* End Global Function Definitions */

/* Start Static Function Definitions */
static int8_t signf(float x){
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	ed87 0a01 	vstr	s0, [r7, #4]
	int8_t sign;

	if (x > 0){
 8001866:	edd7 7a01 	vldr	s15, [r7, #4]
 800186a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800186e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001872:	dd02      	ble.n	800187a <signf+0x1e>
		sign = 1;
 8001874:	2301      	movs	r3, #1
 8001876:	73fb      	strb	r3, [r7, #15]
 8001878:	e00b      	b.n	8001892 <signf+0x36>
	}
	else if (x < 0) {
 800187a:	edd7 7a01 	vldr	s15, [r7, #4]
 800187e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001886:	d502      	bpl.n	800188e <signf+0x32>
		sign = -1;
 8001888:	23ff      	movs	r3, #255	; 0xff
 800188a:	73fb      	strb	r3, [r7, #15]
 800188c:	e001      	b.n	8001892 <signf+0x36>
	}
	else {
		sign = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	73fb      	strb	r3, [r7, #15]
	}

	return sign;
 8001892:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <CT_Logging>:
/* Start Function Prototypes */
static StringPacket_t MakeLogString(uint8_t *msg, uint16_t msgLen, IP_MPU6050_Bus_t IP_MPU6050_Bus, VS_Orientation_Bus_t VS_Orientation_Bus);
/* End Function Prototypes */

/* Start Global Function Definitions */
CT_Log_Bus_t CT_Logging(IP_MPU6050_Bus_t IP_MPU6050_Bus, VS_Orientation_Bus_t VS_Orientation_Bus){
 80018a4:	b084      	sub	sp, #16
 80018a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a8:	b099      	sub	sp, #100	; 0x64
 80018aa:	af12      	add	r7, sp, #72	; 0x48
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80018b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	StringPacket_t StringPacket;
	CT_Log_Bus_t Log_Bus;

	StringPacket = MakeLogString(msg, msgLen, IP_MPU6050_Bus, VS_Orientation_Bus);
 80018b6:	4b18      	ldr	r3, [pc, #96]	; (8001918 <CT_Logging+0x74>)
 80018b8:	f8b3 c000 	ldrh.w	ip, [r3]
 80018bc:	f107 0610 	add.w	r6, r7, #16
 80018c0:	ad05      	add	r5, sp, #20
 80018c2:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80018c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018d2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80018d6:	466d      	mov	r5, sp
 80018d8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80018dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018e0:	6823      	ldr	r3, [r4, #0]
 80018e2:	602b      	str	r3, [r5, #0]
 80018e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e6:	4662      	mov	r2, ip
 80018e8:	490c      	ldr	r1, [pc, #48]	; (800191c <CT_Logging+0x78>)
 80018ea:	4630      	mov	r0, r6
 80018ec:	f000 f818 	bl	8001920 <MakeLogString>

	Log_Bus.pData = StringPacket.pData;
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	60bb      	str	r3, [r7, #8]
	Log_Bus.Size = StringPacket.Size;
 80018f4:	8abb      	ldrh	r3, [r7, #20]
 80018f6:	81bb      	strh	r3, [r7, #12]

	return Log_Bus;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	461a      	mov	r2, r3
 80018fc:	f107 0308 	add.w	r3, r7, #8
 8001900:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001904:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	371c      	adds	r7, #28
 800190c:	46bd      	mov	sp, r7
 800190e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001912:	b004      	add	sp, #16
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20000006 	.word	0x20000006
 800191c:	20000274 	.word	0x20000274

08001920 <MakeLogString>:
/* End Global Function Definitions */

/* Start Static Function Definitions */
static StringPacket_t MakeLogString(uint8_t *msg, uint16_t msgLen, IP_MPU6050_Bus_t IP_MPU6050_Bus, VS_Orientation_Bus_t VS_Orientation_Bus){
 8001920:	b082      	sub	sp, #8
 8001922:	b580      	push	{r7, lr}
 8001924:	b08a      	sub	sp, #40	; 0x28
 8001926:	af02      	add	r7, sp, #8
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800192e:	4613      	mov	r3, r2
 8001930:	80fb      	strh	r3, [r7, #6]
	StringPacket_t StringPacket;

	uint32_t tick = HAL_GetTick();
 8001932:	f001 fccb 	bl	80032cc <HAL_GetTick>
 8001936:	61f8      	str	r0, [r7, #28]

	memset(msg, '\0', msgLen);  // Set unused indexes to null char
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	461a      	mov	r2, r3
 800193c:	2100      	movs	r1, #0
 800193e:	68b8      	ldr	r0, [r7, #8]
 8001940:	f006 fcc7 	bl	80082d2 <memset>
//	sprintf((char*) msg, "TK:%lu,AX:%.3f,AY:%.3f,AZ:%.3f,WX:%.3f,WY:%.3f,WZ:%.3f\n\r",
//			tick,
//			IP_MPU6050_Bus.accel.XOUT_ms2, IP_MPU6050_Bus.accel.YOUT_ms2, IP_MPU6050_Bus.accel.ZOUT_ms2,
//			IP_MPU6050_Bus.gyro.XOUT_dps, IP_MPU6050_Bus.gyro.YOUT_dps, IP_MPU6050_Bus.gyro.ZOUT_dps);

	sprintf((char*) msg, "TK:%lu,compRoll:%.5f\n\r", tick, VS_Orientation_Bus.CompFiltOrientation.roll_deg);
 8001944:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fe1e 	bl	8000588 <__aeabi_f2d>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	e9cd 2300 	strd	r2, r3, [sp]
 8001954:	69fa      	ldr	r2, [r7, #28]
 8001956:	490b      	ldr	r1, [pc, #44]	; (8001984 <MakeLogString+0x64>)
 8001958:	68b8      	ldr	r0, [r7, #8]
 800195a:	f006 fc57 	bl	800820c <siprintf>

	StringPacket.pData = msg;
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	617b      	str	r3, [r7, #20]
	StringPacket.Size = msgLen;
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	833b      	strh	r3, [r7, #24]

	return StringPacket;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	461a      	mov	r2, r3
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001972:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	3720      	adds	r7, #32
 800197a:	46bd      	mov	sp, r7
 800197c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001980:	b002      	add	sp, #8
 8001982:	4770      	bx	lr
 8001984:	0800af88 	.word	0x0800af88

08001988 <EstimateOrientation>:
static VS_OrientationData_t AccelLowPassFilt(VS_OrientationData_t AccelOrientation);
static VS_OrientationData_t ComplimentaryFilter(VS_OrientationData_t GyroOrientation, VS_OrientationData_t FiltAccelOrientation);
/* End Static Function Prototypes */

/* Start Global Function Definitions */
VS_Orientation_Bus_t EstimateOrientation(IP_MPU6050_Bus_t IP_MPU6050_Bus){
 8001988:	b084      	sub	sp, #16
 800198a:	b5b0      	push	{r4, r5, r7, lr}
 800198c:	b08e      	sub	sp, #56	; 0x38
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8001996:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	VS_Orientation_Bus_t VS_Orientation_Bus;

	VS_Orientation_Bus.AccelOrientation = CalcAccelAngle(IP_MPU6050_Bus.accel);
 800199a:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800199e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80019a2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80019a6:	eeb0 0a66 	vmov.f32	s0, s13
 80019aa:	eef0 0a47 	vmov.f32	s1, s14
 80019ae:	eeb0 1a67 	vmov.f32	s2, s15
 80019b2:	f000 f891 	bl	8001ad8 <CalcAccelAngle>
 80019b6:	eef0 6a40 	vmov.f32	s13, s0
 80019ba:	eeb0 7a60 	vmov.f32	s14, s1
 80019be:	eef0 7a41 	vmov.f32	s15, s2
 80019c2:	edc7 6a02 	vstr	s13, [r7, #8]
 80019c6:	ed87 7a03 	vstr	s14, [r7, #12]
 80019ca:	edc7 7a04 	vstr	s15, [r7, #16]

	ResetGyroIntegrators(VS_Orientation_Bus.AccelOrientation.roll_deg, VS_Orientation_Bus.AccelOrientation.pitch_deg);
 80019ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80019d2:	ed97 7a03 	vldr	s14, [r7, #12]
 80019d6:	eef0 0a47 	vmov.f32	s1, s14
 80019da:	eeb0 0a67 	vmov.f32	s0, s15
 80019de:	f000 f9a7 	bl	8001d30 <ResetGyroIntegrators>

	VS_Orientation_Bus.FiltAccelOrientation = AccelLowPassFilt(VS_Orientation_Bus.AccelOrientation);
 80019e2:	edd7 6a02 	vldr	s13, [r7, #8]
 80019e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80019ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80019ee:	eeb0 0a66 	vmov.f32	s0, s13
 80019f2:	eef0 0a47 	vmov.f32	s1, s14
 80019f6:	eeb0 1a67 	vmov.f32	s2, s15
 80019fa:	f000 fa35 	bl	8001e68 <AccelLowPassFilt>
 80019fe:	eef0 6a40 	vmov.f32	s13, s0
 8001a02:	eeb0 7a60 	vmov.f32	s14, s1
 8001a06:	eef0 7a41 	vmov.f32	s15, s2
 8001a0a:	edc7 6a08 	vstr	s13, [r7, #32]
 8001a0e:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8001a12:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	VS_Orientation_Bus.GyroOrientation = CalcGyroAngle(IP_MPU6050_Bus.gyro, VS_Orientation_Bus.FiltAccelOrientation);
 8001a16:	ed97 5a08 	vldr	s10, [r7, #32]
 8001a1a:	edd7 5a09 	vldr	s11, [r7, #36]	; 0x24
 8001a1e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8001a22:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001a26:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001a2a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a2e:	eef0 1a45 	vmov.f32	s3, s10
 8001a32:	eeb0 2a65 	vmov.f32	s4, s11
 8001a36:	eef0 2a46 	vmov.f32	s5, s12
 8001a3a:	eeb0 0a66 	vmov.f32	s0, s13
 8001a3e:	eef0 0a47 	vmov.f32	s1, s14
 8001a42:	eeb0 1a67 	vmov.f32	s2, s15
 8001a46:	f000 f8e1 	bl	8001c0c <CalcGyroAngle>
 8001a4a:	eef0 6a40 	vmov.f32	s13, s0
 8001a4e:	eeb0 7a60 	vmov.f32	s14, s1
 8001a52:	eef0 7a41 	vmov.f32	s15, s2
 8001a56:	edc7 6a05 	vstr	s13, [r7, #20]
 8001a5a:	ed87 7a06 	vstr	s14, [r7, #24]
 8001a5e:	edc7 7a07 	vstr	s15, [r7, #28]

	VS_Orientation_Bus.CompFiltOrientation = ComplimentaryFilter(VS_Orientation_Bus.GyroOrientation, VS_Orientation_Bus.FiltAccelOrientation);
 8001a62:	ed97 5a08 	vldr	s10, [r7, #32]
 8001a66:	edd7 5a09 	vldr	s11, [r7, #36]	; 0x24
 8001a6a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8001a6e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001a72:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a76:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a7a:	eef0 1a45 	vmov.f32	s3, s10
 8001a7e:	eeb0 2a65 	vmov.f32	s4, s11
 8001a82:	eef0 2a46 	vmov.f32	s5, s12
 8001a86:	eeb0 0a66 	vmov.f32	s0, s13
 8001a8a:	eef0 0a47 	vmov.f32	s1, s14
 8001a8e:	eeb0 1a67 	vmov.f32	s2, s15
 8001a92:	f000 fa2f 	bl	8001ef4 <ComplimentaryFilter>
 8001a96:	eef0 6a40 	vmov.f32	s13, s0
 8001a9a:	eeb0 7a60 	vmov.f32	s14, s1
 8001a9e:	eef0 7a41 	vmov.f32	s15, s2
 8001aa2:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8001aa6:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8001aaa:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	return VS_Orientation_Bus;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	461d      	mov	r5, r3
 8001ab2:	f107 0408 	add.w	r4, r7, #8
 8001ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001abc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001abe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ac2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	3738      	adds	r7, #56	; 0x38
 8001aca:	46bd      	mov	sp, r7
 8001acc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001ad0:	b004      	add	sp, #16
 8001ad2:	4770      	bx	lr
 8001ad4:	0000      	movs	r0, r0
	...

08001ad8 <CalcAccelAngle>:
/* End Global Function Definitions */

/* Start Static Function Definitions */
static VS_OrientationData_t CalcAccelAngle(MPU6050_AccelData_t MPU6050_AccelData){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	ed2d 8b02 	vpush	{d8}
 8001ade:	b090      	sub	sp, #64	; 0x40
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	eef0 6a40 	vmov.f32	s13, s0
 8001ae6:	eeb0 7a60 	vmov.f32	s14, s1
 8001aea:	eef0 7a41 	vmov.f32	s15, s2
 8001aee:	edc7 6a05 	vstr	s13, [r7, #20]
 8001af2:	ed87 7a06 	vstr	s14, [r7, #24]
 8001af6:	edc7 7a07 	vstr	s15, [r7, #28]
	VS_OrientationData_t AccelOrientation;

	float roll_rad = atan2f(MPU6050_AccelData.YOUT_ms2, MPU6050_AccelData.ZOUT_ms2);
 8001afa:	edd7 7a06 	vldr	s15, [r7, #24]
 8001afe:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b02:	eef0 0a47 	vmov.f32	s1, s14
 8001b06:	eeb0 0a67 	vmov.f32	s0, s15
 8001b0a:	f008 fcdb 	bl	800a4c4 <atan2f>
 8001b0e:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
	float pitch_rad = atan2f(-1 * MPU6050_AccelData.XOUT_ms2, sqrtf(powf(MPU6050_AccelData.YOUT_ms2, 2) + powf(MPU6050_AccelData.ZOUT_ms2, 2)));
 8001b12:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b16:	eeb1 8a67 	vneg.f32	s16, s15
 8001b1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b1e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001b22:	eeb0 0a67 	vmov.f32	s0, s15
 8001b26:	f008 fccf 	bl	800a4c8 <powf>
 8001b2a:	eef0 8a40 	vmov.f32	s17, s0
 8001b2e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b32:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001b36:	eeb0 0a67 	vmov.f32	s0, s15
 8001b3a:	f008 fcc5 	bl	800a4c8 <powf>
 8001b3e:	eef0 7a40 	vmov.f32	s15, s0
 8001b42:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8001b46:	eeb0 0a67 	vmov.f32	s0, s15
 8001b4a:	f008 fd15 	bl	800a578 <sqrtf>
 8001b4e:	eef0 7a40 	vmov.f32	s15, s0
 8001b52:	eef0 0a67 	vmov.f32	s1, s15
 8001b56:	eeb0 0a48 	vmov.f32	s0, s16
 8001b5a:	f008 fcb3 	bl	800a4c4 <atan2f>
 8001b5e:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

	AccelOrientation.roll_deg = roll_rad * 180 / M_PI;
 8001b62:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b66:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001c08 <CalcAccelAngle+0x130>
 8001b6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b6e:	ee17 0a90 	vmov	r0, s15
 8001b72:	f7fe fd09 	bl	8000588 <__aeabi_f2d>
 8001b76:	a322      	add	r3, pc, #136	; (adr r3, 8001c00 <CalcAccelAngle+0x128>)
 8001b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7c:	f7fe fe86 	bl	800088c <__aeabi_ddiv>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4610      	mov	r0, r2
 8001b86:	4619      	mov	r1, r3
 8001b88:	f7ff f82e 	bl	8000be8 <__aeabi_d2f>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	623b      	str	r3, [r7, #32]
	AccelOrientation.pitch_deg = pitch_rad * 180 / M_PI;
 8001b90:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001b94:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001c08 <CalcAccelAngle+0x130>
 8001b98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b9c:	ee17 0a90 	vmov	r0, s15
 8001ba0:	f7fe fcf2 	bl	8000588 <__aeabi_f2d>
 8001ba4:	a316      	add	r3, pc, #88	; (adr r3, 8001c00 <CalcAccelAngle+0x128>)
 8001ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001baa:	f7fe fe6f 	bl	800088c <__aeabi_ddiv>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f7ff f817 	bl	8000be8 <__aeabi_d2f>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
	AccelOrientation.yaw_deg = 0;  // No accurate way to calculate this
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	62bb      	str	r3, [r7, #40]	; 0x28

	return AccelOrientation;
 8001bc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bc8:	f107 0220 	add.w	r2, r7, #32
 8001bcc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001bd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd8:	ee06 1a90 	vmov	s13, r1
 8001bdc:	ee07 2a10 	vmov	s14, r2
 8001be0:	ee07 3a90 	vmov	s15, r3
}
 8001be4:	eeb0 0a66 	vmov.f32	s0, s13
 8001be8:	eef0 0a47 	vmov.f32	s1, s14
 8001bec:	eeb0 1a67 	vmov.f32	s2, s15
 8001bf0:	3740      	adds	r7, #64	; 0x40
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	ecbd 8b02 	vpop	{d8}
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	f3af 8000 	nop.w
 8001c00:	54442d18 	.word	0x54442d18
 8001c04:	400921fb 	.word	0x400921fb
 8001c08:	43340000 	.word	0x43340000

08001c0c <CalcGyroAngle>:

static VS_OrientationData_t CalcGyroAngle(MPU6050_GyroData_t MPU6050_GyroData, VS_OrientationData_t FiltAccelOrientation){
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b092      	sub	sp, #72	; 0x48
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	eeb0 5a40 	vmov.f32	s10, s0
 8001c16:	eef0 5a60 	vmov.f32	s11, s1
 8001c1a:	eeb0 6a41 	vmov.f32	s12, s2
 8001c1e:	eef0 6a61 	vmov.f32	s13, s3
 8001c22:	eeb0 7a42 	vmov.f32	s14, s4
 8001c26:	eef0 7a62 	vmov.f32	s15, s5
 8001c2a:	ed87 5a07 	vstr	s10, [r7, #28]
 8001c2e:	edc7 5a08 	vstr	s11, [r7, #32]
 8001c32:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001c36:	edc7 6a04 	vstr	s13, [r7, #16]
 8001c3a:	ed87 7a05 	vstr	s14, [r7, #20]
 8001c3e:	edc7 7a06 	vstr	s15, [r7, #24]
	VS_OrientationData_t GyroOrientation;
	uint32_t currentTick = HAL_GetTick();
 8001c42:	f001 fb43 	bl	80032cc <HAL_GetTick>
 8001c46:	6478      	str	r0, [r7, #68]	; 0x44
	float dt = ((float) currentTick - (float) lastTick) / 1000;
 8001c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c4a:	ee07 3a90 	vmov	s15, r3
 8001c4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c52:	4b31      	ldr	r3, [pc, #196]	; (8001d18 <CalcGyroAngle+0x10c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	ee07 3a90 	vmov	s15, r3
 8001c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c62:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001d1c <CalcGyroAngle+0x110>
 8001c66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c6a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	// Integrator reset logic
	if(resetGyroRoll_bool){
 8001c6e:	4b2c      	ldr	r3, [pc, #176]	; (8001d20 <CalcGyroAngle+0x114>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d005      	beq.n	8001c82 <CalcGyroAngle+0x76>
		lastRollAng_deg = FiltAccelOrientation.roll_deg;
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	4a2a      	ldr	r2, [pc, #168]	; (8001d24 <CalcGyroAngle+0x118>)
 8001c7a:	6013      	str	r3, [r2, #0]
		resetGyroRoll_bool = 0;
 8001c7c:	4b28      	ldr	r3, [pc, #160]	; (8001d20 <CalcGyroAngle+0x114>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]
	}

	if(resetGyroPitch_bool){
 8001c82:	4b29      	ldr	r3, [pc, #164]	; (8001d28 <CalcGyroAngle+0x11c>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d006      	beq.n	8001c98 <CalcGyroAngle+0x8c>
		lastPitchAng_deg = 0;
 8001c8a:	4b28      	ldr	r3, [pc, #160]	; (8001d2c <CalcGyroAngle+0x120>)
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
		resetGyroPitch_bool = 0;
 8001c92:	4b25      	ldr	r3, [pc, #148]	; (8001d28 <CalcGyroAngle+0x11c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
	}

	// Integrate angular velocities
	GyroOrientation.roll_deg = lastRollAng_deg + MPU6050_GyroData.XOUT_dps * dt;
 8001c98:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c9c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001ca0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ca4:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <CalcGyroAngle+0x118>)
 8001ca6:	edd3 7a00 	vldr	s15, [r3]
 8001caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cae:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	GyroOrientation.pitch_deg = lastPitchAng_deg + MPU6050_GyroData.YOUT_dps * dt;
 8001cb2:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cb6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001cba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cbe:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <CalcGyroAngle+0x120>)
 8001cc0:	edd3 7a00 	vldr	s15, [r3]
 8001cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	GyroOrientation.yaw_deg = 0;  // No accurate way to calculate this
 8001ccc:	f04f 0300 	mov.w	r3, #0
 8001cd0:	633b      	str	r3, [r7, #48]	; 0x30

	// Store previous values
	lastTick = currentTick;
 8001cd2:	4a11      	ldr	r2, [pc, #68]	; (8001d18 <CalcGyroAngle+0x10c>)
 8001cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cd6:	6013      	str	r3, [r2, #0]
	lastRollAng_deg = GyroOrientation.roll_deg;
 8001cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cda:	4a12      	ldr	r2, [pc, #72]	; (8001d24 <CalcGyroAngle+0x118>)
 8001cdc:	6013      	str	r3, [r2, #0]
	lastPitchAng_deg = GyroOrientation.pitch_deg;
 8001cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce0:	4a12      	ldr	r2, [pc, #72]	; (8001d2c <CalcGyroAngle+0x120>)
 8001ce2:	6013      	str	r3, [r2, #0]

	return GyroOrientation;
 8001ce4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ce8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cec:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001cf2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001cf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cf8:	ee06 1a90 	vmov	s13, r1
 8001cfc:	ee07 2a10 	vmov	s14, r2
 8001d00:	ee07 3a90 	vmov	s15, r3
}
 8001d04:	eeb0 0a66 	vmov.f32	s0, s13
 8001d08:	eef0 0a47 	vmov.f32	s1, s14
 8001d0c:	eeb0 1a67 	vmov.f32	s2, s15
 8001d10:	3748      	adds	r7, #72	; 0x48
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200002a8 	.word	0x200002a8
 8001d1c:	447a0000 	.word	0x447a0000
 8001d20:	2000029c 	.word	0x2000029c
 8001d24:	200002ac 	.word	0x200002ac
 8001d28:	2000029d 	.word	0x2000029d
 8001d2c:	200002b0 	.word	0x200002b0

08001d30 <ResetGyroIntegrators>:

static void ResetGyroIntegrators(float accelRoll_deg, float accelPitch_deg){
 8001d30:	b480      	push	{r7}
 8001d32:	b08b      	sub	sp, #44	; 0x2c
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d3a:	edc7 0a00 	vstr	s1, [r7]
	// Reset gyro integrators if accel values are near 45 for X consecutive cycles

	float resetAccelTolerance_deg = 1.0;
 8001d3e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
	float resetAccelRollAngle_deg = 0;
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	623b      	str	r3, [r7, #32]
	float resetAccelPitchAngle_deg = 0;// Angle of system when integrator can be reset
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	61fb      	str	r3, [r7, #28]
	uint8_t resetAccelCntThreshold = 20;
 8001d50:	2314      	movs	r3, #20
 8001d52:	76fb      	strb	r3, [r7, #27]

	float zeroAccelRollUpperThreshold = resetAccelRollAngle_deg + resetAccelTolerance_deg;
 8001d54:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d58:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d60:	edc7 7a05 	vstr	s15, [r7, #20]
	float zeroAccelRollLowerThreshold = resetAccelRollAngle_deg - resetAccelTolerance_deg;
 8001d64:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d68:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d70:	edc7 7a04 	vstr	s15, [r7, #16]

	float zeroAccelPitchUpperThreshold = resetAccelPitchAngle_deg + resetAccelTolerance_deg;
 8001d74:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d78:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d80:	edc7 7a03 	vstr	s15, [r7, #12]
	float zeroAccelPitchLowerThreshold = resetAccelPitchAngle_deg - resetAccelTolerance_deg;
 8001d84:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d88:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d90:	edc7 7a02 	vstr	s15, [r7, #8]

	if (fabsf(accelRoll_deg) < zeroAccelRollUpperThreshold && fabsf(accelRoll_deg) > zeroAccelRollLowerThreshold){
 8001d94:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d98:	eef0 7ae7 	vabs.f32	s15, s15
 8001d9c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001da0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da8:	dd10      	ble.n	8001dcc <ResetGyroIntegrators+0x9c>
 8001daa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dae:	eef0 7ae7 	vabs.f32	s15, s15
 8001db2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001db6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbe:	d505      	bpl.n	8001dcc <ResetGyroIntegrators+0x9c>
		resetAccelRollCount++;
 8001dc0:	4b25      	ldr	r3, [pc, #148]	; (8001e58 <ResetGyroIntegrators+0x128>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	4a24      	ldr	r2, [pc, #144]	; (8001e58 <ResetGyroIntegrators+0x128>)
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	e002      	b.n	8001dd2 <ResetGyroIntegrators+0xa2>
	}else{
		resetAccelRollCount = 0;
 8001dcc:	4b22      	ldr	r3, [pc, #136]	; (8001e58 <ResetGyroIntegrators+0x128>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
	}

	if (fabsf(accelPitch_deg) < zeroAccelPitchUpperThreshold && fabsf(accelPitch_deg) > zeroAccelPitchLowerThreshold){
 8001dd2:	edd7 7a00 	vldr	s15, [r7]
 8001dd6:	eef0 7ae7 	vabs.f32	s15, s15
 8001dda:	ed97 7a03 	vldr	s14, [r7, #12]
 8001dde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de6:	dd10      	ble.n	8001e0a <ResetGyroIntegrators+0xda>
 8001de8:	edd7 7a00 	vldr	s15, [r7]
 8001dec:	eef0 7ae7 	vabs.f32	s15, s15
 8001df0:	ed97 7a02 	vldr	s14, [r7, #8]
 8001df4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfc:	d505      	bpl.n	8001e0a <ResetGyroIntegrators+0xda>
		resetAccelPitchCount++;
 8001dfe:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <ResetGyroIntegrators+0x12c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	3301      	adds	r3, #1
 8001e04:	4a15      	ldr	r2, [pc, #84]	; (8001e5c <ResetGyroIntegrators+0x12c>)
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	e002      	b.n	8001e10 <ResetGyroIntegrators+0xe0>
	}else{
		resetAccelPitchCount = 0;
 8001e0a:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <ResetGyroIntegrators+0x12c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
	}

	if (resetAccelRollCount == resetAccelCntThreshold){
 8001e10:	7efa      	ldrb	r2, [r7, #27]
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <ResetGyroIntegrators+0x128>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d106      	bne.n	8001e28 <ResetGyroIntegrators+0xf8>
		resetGyroRoll_bool = 1;
 8001e1a:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <ResetGyroIntegrators+0x130>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	701a      	strb	r2, [r3, #0]
		resetAccelRollCount = 0;
 8001e20:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <ResetGyroIntegrators+0x128>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	e002      	b.n	8001e2e <ResetGyroIntegrators+0xfe>
	}else{
		resetGyroRoll_bool = 0;
 8001e28:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <ResetGyroIntegrators+0x130>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
	}

	if (resetAccelPitchCount == resetAccelCntThreshold){
 8001e2e:	7efa      	ldrb	r2, [r7, #27]
 8001e30:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <ResetGyroIntegrators+0x12c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d106      	bne.n	8001e46 <ResetGyroIntegrators+0x116>
		resetGyroPitch_bool = 1;
 8001e38:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <ResetGyroIntegrators+0x134>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	701a      	strb	r2, [r3, #0]
		resetAccelPitchCount = 0;
 8001e3e:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <ResetGyroIntegrators+0x12c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
	}else{
		resetGyroPitch_bool = 0;
	}
}
 8001e44:	e002      	b.n	8001e4c <ResetGyroIntegrators+0x11c>
		resetGyroPitch_bool = 0;
 8001e46:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <ResetGyroIntegrators+0x134>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
}
 8001e4c:	bf00      	nop
 8001e4e:	372c      	adds	r7, #44	; 0x2c
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	200002a0 	.word	0x200002a0
 8001e5c:	200002a4 	.word	0x200002a4
 8001e60:	2000029c 	.word	0x2000029c
 8001e64:	2000029d 	.word	0x2000029d

08001e68 <AccelLowPassFilt>:

static VS_OrientationData_t AccelLowPassFilt(VS_OrientationData_t AccelOrientation){
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08e      	sub	sp, #56	; 0x38
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	eef0 6a40 	vmov.f32	s13, s0
 8001e72:	eeb0 7a60 	vmov.f32	s14, s1
 8001e76:	eef0 7a41 	vmov.f32	s15, s2
 8001e7a:	edc7 6a05 	vstr	s13, [r7, #20]
 8001e7e:	ed87 7a06 	vstr	s14, [r7, #24]
 8001e82:	edc7 7a07 	vstr	s15, [r7, #28]
	VS_OrientationData_t FiltAccelOrientation;

	arm_biquad_cascade_df1_f32(&S_AccelRoll, &AccelOrientation.roll_deg, &FiltAccelOrientation.roll_deg, blockSize);
 8001e86:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <AccelLowPassFilt+0x80>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f107 0220 	add.w	r2, r7, #32
 8001e8e:	f107 0114 	add.w	r1, r7, #20
 8001e92:	4816      	ldr	r0, [pc, #88]	; (8001eec <AccelLowPassFilt+0x84>)
 8001e94:	f005 fba6 	bl	80075e4 <arm_biquad_cascade_df1_f32>
	arm_biquad_cascade_df1_f32(&S_AccelPitch, &AccelOrientation.pitch_deg, &FiltAccelOrientation.pitch_deg, blockSize);
 8001e98:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <AccelLowPassFilt+0x80>)
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	f107 0320 	add.w	r3, r7, #32
 8001ea0:	1d1a      	adds	r2, r3, #4
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	1d19      	adds	r1, r3, #4
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	4811      	ldr	r0, [pc, #68]	; (8001ef0 <AccelLowPassFilt+0x88>)
 8001eac:	f005 fb9a 	bl	80075e4 <arm_biquad_cascade_df1_f32>

	FiltAccelOrientation.yaw_deg = 0;
 8001eb0:	f04f 0300 	mov.w	r3, #0
 8001eb4:	62bb      	str	r3, [r7, #40]	; 0x28

	return FiltAccelOrientation;
 8001eb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eba:	f107 0220 	add.w	r2, r7, #32
 8001ebe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ec0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ec4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eca:	ee06 1a90 	vmov	s13, r1
 8001ece:	ee07 2a10 	vmov	s14, r2
 8001ed2:	ee07 3a90 	vmov	s15, r3
}
 8001ed6:	eeb0 0a66 	vmov.f32	s0, s13
 8001eda:	eef0 0a47 	vmov.f32	s1, s14
 8001ede:	eeb0 1a67 	vmov.f32	s2, s15
 8001ee2:	3738      	adds	r7, #56	; 0x38
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	200001f8 	.word	0x200001f8
 8001ef0:	20000204 	.word	0x20000204

08001ef4 <ComplimentaryFilter>:

static VS_OrientationData_t ComplimentaryFilter(VS_OrientationData_t GyroOrientation, VS_OrientationData_t FiltAccelOrientation){
 8001ef4:	b480      	push	{r7}
 8001ef6:	b093      	sub	sp, #76	; 0x4c
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	eeb0 5a40 	vmov.f32	s10, s0
 8001efe:	eef0 5a60 	vmov.f32	s11, s1
 8001f02:	eeb0 6a41 	vmov.f32	s12, s2
 8001f06:	eef0 6a61 	vmov.f32	s13, s3
 8001f0a:	eeb0 7a42 	vmov.f32	s14, s4
 8001f0e:	eef0 7a62 	vmov.f32	s15, s5
 8001f12:	ed87 5a07 	vstr	s10, [r7, #28]
 8001f16:	edc7 5a08 	vstr	s11, [r7, #32]
 8001f1a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001f1e:	edc7 6a04 	vstr	s13, [r7, #16]
 8001f22:	ed87 7a05 	vstr	s14, [r7, #20]
 8001f26:	edc7 7a06 	vstr	s15, [r7, #24]
	VS_OrientationData_t CompFiltOrientation;

	float alpha = .90;
 8001f2a:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <ComplimentaryFilter+0xc8>)
 8001f2c:	647b      	str	r3, [r7, #68]	; 0x44

	CompFiltOrientation.roll_deg = GyroOrientation.roll_deg * alpha + FiltAccelOrientation.roll_deg * (1 - alpha);
 8001f2e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f32:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f3a:	edd7 6a04 	vldr	s13, [r7, #16]
 8001f3e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001f42:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f46:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001f4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f52:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	CompFiltOrientation.pitch_deg = GyroOrientation.pitch_deg * alpha + FiltAccelOrientation.pitch_deg * (1 - alpha);
 8001f56:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f5a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f62:	edd7 6a05 	vldr	s13, [r7, #20]
 8001f66:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001f6a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f6e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001f72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f7a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	CompFiltOrientation.yaw_deg = 0;
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	637b      	str	r3, [r7, #52]	; 0x34

	return CompFiltOrientation;
 8001f84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f88:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001f8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001f92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f98:	ee06 1a90 	vmov	s13, r1
 8001f9c:	ee07 2a10 	vmov	s14, r2
 8001fa0:	ee07 3a90 	vmov	s15, r3
}
 8001fa4:	eeb0 0a66 	vmov.f32	s0, s13
 8001fa8:	eef0 0a47 	vmov.f32	s1, s14
 8001fac:	eeb0 1a67 	vmov.f32	s2, s15
 8001fb0:	374c      	adds	r7, #76	; 0x4c
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	3f666666 	.word	0x3f666666

08001fc0 <IO_HardwareInputs>:
 *      Author: aloehr
 */
#include "IO.h"

/* Start global function definitions */
HI_Bus_t IO_HardwareInputs(Config_Bus_t Config_Bus){
 8001fc0:	b084      	sub	sp, #16
 8001fc2:	b590      	push	{r4, r7, lr}
 8001fc4:	b08b      	sub	sp, #44	; 0x2c
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6178      	str	r0, [r7, #20]
 8001fca:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001fce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HI_Bus_t HI_Bus;

	HI_Bus.HI_MPU6050_Bus = HI_MPU6050(Config_Bus.Config_HAL_Bus.hi2c);
 8001fd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fd4:	463b      	mov	r3, r7
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 f856 	bl	800208a <HI_MPU6050>
 8001fde:	f107 031c 	add.w	r3, r7, #28
 8001fe2:	463a      	mov	r2, r7
 8001fe4:	6810      	ldr	r0, [r2, #0]
 8001fe6:	6851      	ldr	r1, [r2, #4]
 8001fe8:	6892      	ldr	r2, [r2, #8]
 8001fea:	c307      	stmia	r3!, {r0, r1, r2}

	return HI_Bus;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	461c      	mov	r4, r3
 8001ff0:	f107 031c 	add.w	r3, r7, #28
 8001ff4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001ff6:	6020      	str	r0, [r4, #0]
 8001ff8:	6061      	str	r1, [r4, #4]
 8001ffa:	60a2      	str	r2, [r4, #8]
}
 8001ffc:	6978      	ldr	r0, [r7, #20]
 8001ffe:	372c      	adds	r7, #44	; 0x2c
 8002000:	46bd      	mov	sp, r7
 8002002:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002006:	b004      	add	sp, #16
 8002008:	4770      	bx	lr

0800200a <IO_HardwareOutputs>:

void IO_HardwareOutputs(Config_Bus_t Config_Bus, OP_Bus_t OP_Bus){
 800200a:	b084      	sub	sp, #16
 800200c:	b5b0      	push	{r4, r5, r7, lr}
 800200e:	b090      	sub	sp, #64	; 0x40
 8002010:	af10      	add	r7, sp, #64	; 0x40
 8002012:	f107 0410 	add.w	r4, r7, #16
 8002016:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HO_VESC(Config_Bus.Config_HAL_Bus.hcan, OP_Bus.OP_VESC_Bus.pTxData);
 800201a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800201c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002020:	4611      	mov	r1, r2
 8002022:	4618      	mov	r0, r3
 8002024:	f000 f92e 	bl	8002284 <HO_VESC>
	HO_HCO5(Config_Bus.Config_HAL_Bus.huart2, OP_Bus.OP_HC05_Bus.pData, OP_Bus.OP_HC05_Bus.Size);
 8002028:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800202c:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8002030:	920e      	str	r2, [sp, #56]	; 0x38
 8002032:	930d      	str	r3, [sp, #52]	; 0x34
 8002034:	466d      	mov	r5, sp
 8002036:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800203a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800203c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800203e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002040:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002042:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002044:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002046:	6823      	ldr	r3, [r4, #0]
 8002048:	602b      	str	r3, [r5, #0]
 800204a:	f107 0314 	add.w	r3, r7, #20
 800204e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002050:	f000 f806 	bl	8002060 <HO_HCO5>
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800205c:	b004      	add	sp, #16
 800205e:	4770      	bx	lr

08002060 <HO_HCO5>:
/* Start Defines */
#define UART_TIMEOUT 50 //MS
/* End Defines */

/* Start Global Function Definitions */
void HO_HCO5(UART_HandleTypeDef huart, const uint8_t *pData, uint16_t Size){
 8002060:	b084      	sub	sp, #16
 8002062:	b580      	push	{r7, lr}
 8002064:	af00      	add	r7, sp, #0
 8002066:	f107 0c08 	add.w	ip, r7, #8
 800206a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart, pData, Size, (uint32_t) UART_TIMEOUT);
 800206e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002072:	2332      	movs	r3, #50	; 0x32
 8002074:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002076:	f107 0008 	add.w	r0, r7, #8
 800207a:	f004 ff32 	bl	8006ee2 <HAL_UART_Transmit>
}
 800207e:	bf00      	nop
 8002080:	46bd      	mov	sp, r7
 8002082:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002086:	b004      	add	sp, #16
 8002088:	4770      	bx	lr

0800208a <HI_MPU6050>:
static MPU6050_RawIMUDataSet_t MPU6050_GetRawAccel(I2C_HandleTypeDef *hi2c);
static MPU6050_RawIMUDataSet_t MPU6050_GetRawGyro(I2C_HandleTypeDef *hi2c);
/* End function prototypes */

/* Start global function definitions */
HI_MPU6050_Bus_t HI_MPU6050(I2C_HandleTypeDef *hi2c){
 800208a:	b590      	push	{r4, r7, lr}
 800208c:	b089      	sub	sp, #36	; 0x24
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
	HI_MPU6050_Bus_t HI_MPU6050_Bus;

	HI_MPU6050_Bus.RawAccel = MPU6050_GetRawAccel(hi2c);
 8002094:	463b      	mov	r3, r7
 8002096:	68b9      	ldr	r1, [r7, #8]
 8002098:	4618      	mov	r0, r3
 800209a:	f000 f81f 	bl	80020dc <MPU6050_GetRawAccel>
 800209e:	f107 0314 	add.w	r3, r7, #20
 80020a2:	463a      	mov	r2, r7
 80020a4:	6810      	ldr	r0, [r2, #0]
 80020a6:	6018      	str	r0, [r3, #0]
 80020a8:	8892      	ldrh	r2, [r2, #4]
 80020aa:	809a      	strh	r2, [r3, #4]
	HI_MPU6050_Bus.RawGyro = MPU6050_GetRawGyro(hi2c);
 80020ac:	463b      	mov	r3, r7
 80020ae:	68b9      	ldr	r1, [r7, #8]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f000 f87d 	bl	80021b0 <MPU6050_GetRawGyro>
 80020b6:	f107 031a 	add.w	r3, r7, #26
 80020ba:	463a      	mov	r2, r7
 80020bc:	6811      	ldr	r1, [r2, #0]
 80020be:	6019      	str	r1, [r3, #0]
 80020c0:	8892      	ldrh	r2, [r2, #4]
 80020c2:	809a      	strh	r2, [r3, #4]

	return HI_MPU6050_Bus;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	461c      	mov	r4, r3
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80020ce:	6020      	str	r0, [r4, #0]
 80020d0:	6061      	str	r1, [r4, #4]
 80020d2:	60a2      	str	r2, [r4, #8]
}
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	3724      	adds	r7, #36	; 0x24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd90      	pop	{r4, r7, pc}

080020dc <MPU6050_GetRawAccel>:
/* End global function definitions */

/* Start static function definitions */
static MPU6050_RawIMUDataSet_t MPU6050_GetRawAccel(I2C_HandleTypeDef *hi2c){
 80020dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80020e0:	b08d      	sub	sp, #52	; 0x34
 80020e2:	af04      	add	r7, sp, #16
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	6039      	str	r1, [r7, #0]
 80020e8:	466b      	mov	r3, sp
 80020ea:	461e      	mov	r6, r3
	MPU6050_RawIMUDataSet_t RawAccel;
	uint8_t	numReg = 6;
 80020ec:	2306      	movs	r3, #6
 80020ee:	77fb      	strb	r3, [r7, #31]
	uint8_t regData[numReg];
 80020f0:	7ff9      	ldrb	r1, [r7, #31]
 80020f2:	460b      	mov	r3, r1
 80020f4:	3b01      	subs	r3, #1
 80020f6:	61bb      	str	r3, [r7, #24]
 80020f8:	b2cb      	uxtb	r3, r1
 80020fa:	2200      	movs	r2, #0
 80020fc:	4698      	mov	r8, r3
 80020fe:	4691      	mov	r9, r2
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800210c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002110:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002114:	b2cb      	uxtb	r3, r1
 8002116:	2200      	movs	r2, #0
 8002118:	461c      	mov	r4, r3
 800211a:	4615      	mov	r5, r2
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	00eb      	lsls	r3, r5, #3
 8002126:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800212a:	00e2      	lsls	r2, r4, #3
 800212c:	460b      	mov	r3, r1
 800212e:	3307      	adds	r3, #7
 8002130:	08db      	lsrs	r3, r3, #3
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	ebad 0d03 	sub.w	sp, sp, r3
 8002138:	ab04      	add	r3, sp, #16
 800213a:	3300      	adds	r3, #0
 800213c:	617b      	str	r3, [r7, #20]

	/* Read accel measurement registers and store in regData array */
	HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, ACCEL_OUT_START_REG, REG_LEN, (uint8_t*) &regData, numReg, I2C_TIMEOUT);
 800213e:	7ffb      	ldrb	r3, [r7, #31]
 8002140:	b29b      	uxth	r3, r3
 8002142:	2232      	movs	r2, #50	; 0x32
 8002144:	9202      	str	r2, [sp, #8]
 8002146:	9301      	str	r3, [sp, #4]
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	2301      	movs	r3, #1
 800214e:	223b      	movs	r2, #59	; 0x3b
 8002150:	21d0      	movs	r1, #208	; 0xd0
 8002152:	6838      	ldr	r0, [r7, #0]
 8002154:	f002 fd3c 	bl	8004bd0 <HAL_I2C_Mem_Read>

	/* Combine high and low bits to 16 bit integer, update struct contents*/
	RawAccel.XOUT_na = (int16_t) ((regData[0] << 8) | (regData[1]));
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	021b      	lsls	r3, r3, #8
 800215e:	b21a      	sxth	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	785b      	ldrb	r3, [r3, #1]
 8002164:	b21b      	sxth	r3, r3
 8002166:	4313      	orrs	r3, r2
 8002168:	b21b      	sxth	r3, r3
 800216a:	81bb      	strh	r3, [r7, #12]
	RawAccel.YOUT_na = (int16_t) ((regData[2] << 8) | (regData[3]));
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	789b      	ldrb	r3, [r3, #2]
 8002170:	021b      	lsls	r3, r3, #8
 8002172:	b21a      	sxth	r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	78db      	ldrb	r3, [r3, #3]
 8002178:	b21b      	sxth	r3, r3
 800217a:	4313      	orrs	r3, r2
 800217c:	b21b      	sxth	r3, r3
 800217e:	81fb      	strh	r3, [r7, #14]
	RawAccel.ZOUT_na = (int16_t) ((regData[4] << 8) | (regData[5]));
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	791b      	ldrb	r3, [r3, #4]
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	b21a      	sxth	r2, r3
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	795b      	ldrb	r3, [r3, #5]
 800218c:	b21b      	sxth	r3, r3
 800218e:	4313      	orrs	r3, r2
 8002190:	b21b      	sxth	r3, r3
 8002192:	823b      	strh	r3, [r7, #16]

	/* Return RawAccel struct*/
	return RawAccel;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	461a      	mov	r2, r3
 8002198:	f107 030c 	add.w	r3, r7, #12
 800219c:	6818      	ldr	r0, [r3, #0]
 800219e:	6010      	str	r0, [r2, #0]
 80021a0:	889b      	ldrh	r3, [r3, #4]
 80021a2:	8093      	strh	r3, [r2, #4]
 80021a4:	46b5      	mov	sp, r6
}
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	3724      	adds	r7, #36	; 0x24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080021b0 <MPU6050_GetRawGyro>:

static MPU6050_RawIMUDataSet_t MPU6050_GetRawGyro(I2C_HandleTypeDef *hi2c){
 80021b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80021b4:	b08d      	sub	sp, #52	; 0x34
 80021b6:	af04      	add	r7, sp, #16
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	6039      	str	r1, [r7, #0]
 80021bc:	466b      	mov	r3, sp
 80021be:	461e      	mov	r6, r3
	MPU6050_RawIMUDataSet_t RawGyro;
	uint8_t	numReg = 6;
 80021c0:	2306      	movs	r3, #6
 80021c2:	77fb      	strb	r3, [r7, #31]
	uint8_t regData[numReg];
 80021c4:	7ff9      	ldrb	r1, [r7, #31]
 80021c6:	460b      	mov	r3, r1
 80021c8:	3b01      	subs	r3, #1
 80021ca:	61bb      	str	r3, [r7, #24]
 80021cc:	b2cb      	uxtb	r3, r1
 80021ce:	2200      	movs	r2, #0
 80021d0:	4698      	mov	r8, r3
 80021d2:	4691      	mov	r9, r2
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021e8:	b2cb      	uxtb	r3, r1
 80021ea:	2200      	movs	r2, #0
 80021ec:	461c      	mov	r4, r3
 80021ee:	4615      	mov	r5, r2
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	f04f 0300 	mov.w	r3, #0
 80021f8:	00eb      	lsls	r3, r5, #3
 80021fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021fe:	00e2      	lsls	r2, r4, #3
 8002200:	460b      	mov	r3, r1
 8002202:	3307      	adds	r3, #7
 8002204:	08db      	lsrs	r3, r3, #3
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	ebad 0d03 	sub.w	sp, sp, r3
 800220c:	ab04      	add	r3, sp, #16
 800220e:	3300      	adds	r3, #0
 8002210:	617b      	str	r3, [r7, #20]

	/* Read gyro measurement registers and store in regData array */
	HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, GYRO_OUT_START_REG, REG_LEN, (uint8_t*) &regData, numReg, I2C_TIMEOUT);
 8002212:	7ffb      	ldrb	r3, [r7, #31]
 8002214:	b29b      	uxth	r3, r3
 8002216:	2232      	movs	r2, #50	; 0x32
 8002218:	9202      	str	r2, [sp, #8]
 800221a:	9301      	str	r3, [sp, #4]
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	2301      	movs	r3, #1
 8002222:	2243      	movs	r2, #67	; 0x43
 8002224:	21d0      	movs	r1, #208	; 0xd0
 8002226:	6838      	ldr	r0, [r7, #0]
 8002228:	f002 fcd2 	bl	8004bd0 <HAL_I2C_Mem_Read>

	/* Combine high and low bits to 16 bit integer, update struct contents*/
	RawGyro.XOUT_na = (int16_t) ((regData[0] << 8) | (regData[1]));
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	021b      	lsls	r3, r3, #8
 8002232:	b21a      	sxth	r2, r3
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	785b      	ldrb	r3, [r3, #1]
 8002238:	b21b      	sxth	r3, r3
 800223a:	4313      	orrs	r3, r2
 800223c:	b21b      	sxth	r3, r3
 800223e:	81bb      	strh	r3, [r7, #12]
	RawGyro.YOUT_na = (int16_t) ((regData[2] << 8) | (regData[3]));
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	789b      	ldrb	r3, [r3, #2]
 8002244:	021b      	lsls	r3, r3, #8
 8002246:	b21a      	sxth	r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	78db      	ldrb	r3, [r3, #3]
 800224c:	b21b      	sxth	r3, r3
 800224e:	4313      	orrs	r3, r2
 8002250:	b21b      	sxth	r3, r3
 8002252:	81fb      	strh	r3, [r7, #14]
	RawGyro.ZOUT_na = (int16_t) ((regData[4] << 8) | (regData[5]));
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	791b      	ldrb	r3, [r3, #4]
 8002258:	021b      	lsls	r3, r3, #8
 800225a:	b21a      	sxth	r2, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	795b      	ldrb	r3, [r3, #5]
 8002260:	b21b      	sxth	r3, r3
 8002262:	4313      	orrs	r3, r2
 8002264:	b21b      	sxth	r3, r3
 8002266:	823b      	strh	r3, [r7, #16]

	/* Return RawGyro struct*/
	return RawGyro;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	461a      	mov	r2, r3
 800226c:	f107 030c 	add.w	r3, r7, #12
 8002270:	6818      	ldr	r0, [r3, #0]
 8002272:	6010      	str	r0, [r2, #0]
 8002274:	889b      	ldrh	r3, [r3, #4]
 8002276:	8093      	strh	r3, [r2, #4]
 8002278:	46b5      	mov	sp, r6
}
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	3724      	adds	r7, #36	; 0x24
 800227e:	46bd      	mov	sp, r7
 8002280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002284 <HO_VESC>:
 */

#include "IO_VESC.h"

/* Start global function definitions */
void HO_VESC(CAN_HandleTypeDef *hcan, uint8_t *TxData){
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800228e:	4b07      	ldr	r3, [pc, #28]	; (80022ac <HO_VESC+0x28>)
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	4907      	ldr	r1, [pc, #28]	; (80022b0 <HO_VESC+0x2c>)
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f001 fb63 	bl	8003960 <HAL_CAN_AddTxMessage>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <HO_VESC+0x20>
		Error_Handler();
 80022a0:	f000 fd0e 	bl	8002cc0 <Error_Handler>
	}
}
 80022a4:	bf00      	nop
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	2000024c 	.word	0x2000024c
 80022b0:	20000234 	.word	0x20000234

080022b4 <OP_HC05>:
 *  Created on: Jul 8, 2023
 *      Author: aloehr
 */
#include "PR_HC05.h"

OP_HC05_Bus_t OP_HC05(CT_Log_Bus_t CT_Log_Bus){
 80022b4:	b480      	push	{r7}
 80022b6:	b087      	sub	sp, #28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	1d3b      	adds	r3, r7, #4
 80022be:	e883 0006 	stmia.w	r3, {r1, r2}
	OP_HC05_Bus_t OP_HC05_Bus;

	OP_HC05_Bus.pData = CT_Log_Bus.pData;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	613b      	str	r3, [r7, #16]
	OP_HC05_Bus.Size = CT_Log_Bus.Size;
 80022c6:	893b      	ldrh	r3, [r7, #8]
 80022c8:	82bb      	strh	r3, [r7, #20]

	return OP_HC05_Bus;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	461a      	mov	r2, r3
 80022ce:	f107 0310 	add.w	r3, r7, #16
 80022d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80022d6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	371c      	adds	r7, #28
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <IP_MPU6050>:
static MPU6050_AccelData_t MPU6050_CalcAccel(MPU6050_RawIMUDataSet_t RawAccel, float accelSens, MPU6050_IMUOffsetData_t IMUOffsets);
static MPU6050_GyroData_t MPU6050_CalcGyro(MPU6050_RawIMUDataSet_t RawGyro, float gyroSens, MPU6050_IMUOffsetData_t IMUOffsets);
/* End Function Prototypes */

/* Start Global Function Definition */
IP_MPU6050_Bus_t IP_MPU6050(HI_MPU6050_Bus_t HI_MPU6050_Bus, Config_MPU6050_Bus_t Config_MPU6050_Bus){
 80022e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e8:	b091      	sub	sp, #68	; 0x44
 80022ea:	af06      	add	r7, sp, #24
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	4638      	mov	r0, r7
 80022f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	IP_MPU6050_Bus_t IP_MPU6050_Bus;

	IP_MPU6050_Bus.accel = MPU6050_CalcAccel(HI_MPU6050_Bus.RawAccel, Config_MPU6050_Bus.Sensitivity.AccelSens, Config_MPU6050_Bus.Offsets);
 80022f4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80022f8:	466d      	mov	r5, sp
 80022fa:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80022fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002300:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002302:	6823      	ldr	r3, [r4, #0]
 8002304:	602b      	str	r3, [r5, #0]
 8002306:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800230a:	cb0c      	ldmia	r3, {r2, r3}
 800230c:	eeb0 0a67 	vmov.f32	s0, s15
 8002310:	4639      	mov	r1, r7
 8002312:	c903      	ldmia	r1, {r0, r1}
 8002314:	f000 f852 	bl	80023bc <MPU6050_CalcAccel>
 8002318:	eef0 6a40 	vmov.f32	s13, s0
 800231c:	eeb0 7a60 	vmov.f32	s14, s1
 8002320:	eef0 7a41 	vmov.f32	s15, s2
 8002324:	edc7 6a04 	vstr	s13, [r7, #16]
 8002328:	ed87 7a05 	vstr	s14, [r7, #20]
 800232c:	edc7 7a06 	vstr	s15, [r7, #24]
	IP_MPU6050_Bus.gyro = MPU6050_CalcGyro(HI_MPU6050_Bus.RawGyro, Config_MPU6050_Bus.Sensitivity.GyroSens, Config_MPU6050_Bus.Offsets);
 8002330:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002334:	f8d7 3006 	ldr.w	r3, [r7, #6]
 8002338:	469c      	mov	ip, r3
 800233a:	897b      	ldrh	r3, [r7, #10]
 800233c:	2600      	movs	r6, #0
 800233e:	f363 060f 	bfi	r6, r3, #0, #16
 8002342:	466d      	mov	r5, sp
 8002344:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8002348:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800234a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800234c:	6823      	ldr	r3, [r4, #0]
 800234e:	602b      	str	r3, [r5, #0]
 8002350:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002354:	cb0c      	ldmia	r3, {r2, r3}
 8002356:	eeb0 0a67 	vmov.f32	s0, s15
 800235a:	4660      	mov	r0, ip
 800235c:	4631      	mov	r1, r6
 800235e:	f000 f895 	bl	800248c <MPU6050_CalcGyro>
 8002362:	eef0 6a40 	vmov.f32	s13, s0
 8002366:	eeb0 7a60 	vmov.f32	s14, s1
 800236a:	eef0 7a41 	vmov.f32	s15, s2
 800236e:	edc7 6a07 	vstr	s13, [r7, #28]
 8002372:	ed87 7a08 	vstr	s14, [r7, #32]
 8002376:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	if(Config_MPU6050_Bus.Offsets.SensCalibrated_bool){
 800237a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00e      	beq.n	80023a0 <IP_MPU6050+0xba>
		IP_MPU6050_Bus = MPU6050_IMUDataClamp(IP_MPU6050_Bus);
 8002382:	f107 0510 	add.w	r5, r7, #16
 8002386:	466c      	mov	r4, sp
 8002388:	f107 031c 	add.w	r3, r7, #28
 800238c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002390:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002394:	f107 0310 	add.w	r3, r7, #16
 8002398:	cb0e      	ldmia	r3, {r1, r2, r3}
 800239a:	4628      	mov	r0, r5
 800239c:	f000 f914 	bl	80025c8 <MPU6050_IMUDataClamp>
	}

	return IP_MPU6050_Bus;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	461d      	mov	r5, r3
 80023a4:	f107 0410 	add.w	r4, r7, #16
 80023a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023b0:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	372c      	adds	r7, #44	; 0x2c
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023bc <MPU6050_CalcAccel>:
/* End Global Function Definition */

/* Start Static Function Definition */
static MPU6050_AccelData_t MPU6050_CalcAccel(MPU6050_RawIMUDataSet_t RawAccel, float accelSens, MPU6050_IMUOffsetData_t IMUOffsets){
 80023bc:	b082      	sub	sp, #8
 80023be:	b490      	push	{r4, r7}
 80023c0:	b08e      	sub	sp, #56	; 0x38
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	f107 0418 	add.w	r4, r7, #24
 80023c8:	e884 0003 	stmia.w	r4, {r0, r1}
 80023cc:	ed87 0a05 	vstr	s0, [r7, #20]
 80023d0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80023d4:	e881 000c 	stmia.w	r1, {r2, r3}
	MPU6050_AccelData_t Accel;

	/* Convert bits to g's, store in Accel struct*/
	Accel.XOUT_ms2 = (RawAccel.XOUT_na / accelSens) * g + IMUOffsets.AxOffset;
 80023d8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80023dc:	ee07 3a90 	vmov	s15, r3
 80023e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80023e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80023e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023ec:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002488 <MPU6050_CalcAccel+0xcc>
 80023f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023f4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80023f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023fc:	edc7 7a08 	vstr	s15, [r7, #32]
	Accel.YOUT_ms2 = (RawAccel.YOUT_na / accelSens) * g + IMUOffsets.AyOffset;
 8002400:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002404:	ee07 3a90 	vmov	s15, r3
 8002408:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800240c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002414:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002488 <MPU6050_CalcAccel+0xcc>
 8002418:	ee27 7a87 	vmul.f32	s14, s15, s14
 800241c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002420:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002424:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	Accel.ZOUT_ms2 = (RawAccel.ZOUT_na / accelSens) * g + IMUOffsets.AzOffset;
 8002428:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800242c:	ee07 3a90 	vmov	s15, r3
 8002430:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002434:	ed97 7a05 	vldr	s14, [r7, #20]
 8002438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800243c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002488 <MPU6050_CalcAccel+0xcc>
 8002440:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002444:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800244c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	/* Return Accel struct */
	return Accel;
 8002450:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002454:	f107 0220 	add.w	r2, r7, #32
 8002458:	ca07      	ldmia	r2, {r0, r1, r2}
 800245a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800245e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002464:	ee06 1a90 	vmov	s13, r1
 8002468:	ee07 2a10 	vmov	s14, r2
 800246c:	ee07 3a90 	vmov	s15, r3
}
 8002470:	eeb0 0a66 	vmov.f32	s0, s13
 8002474:	eef0 0a47 	vmov.f32	s1, s14
 8002478:	eeb0 1a67 	vmov.f32	s2, s15
 800247c:	3738      	adds	r7, #56	; 0x38
 800247e:	46bd      	mov	sp, r7
 8002480:	bc90      	pop	{r4, r7}
 8002482:	b002      	add	sp, #8
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	411ce7d5 	.word	0x411ce7d5

0800248c <MPU6050_CalcGyro>:

static MPU6050_GyroData_t MPU6050_CalcGyro(MPU6050_RawIMUDataSet_t RawGyro, float gyroSens, MPU6050_IMUOffsetData_t IMUOffsets){
 800248c:	b082      	sub	sp, #8
 800248e:	b490      	push	{r4, r7}
 8002490:	b08e      	sub	sp, #56	; 0x38
 8002492:	af00      	add	r7, sp, #0
 8002494:	f107 0418 	add.w	r4, r7, #24
 8002498:	e884 0003 	stmia.w	r4, {r0, r1}
 800249c:	ed87 0a05 	vstr	s0, [r7, #20]
 80024a0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80024a4:	e881 000c 	stmia.w	r1, {r2, r3}
	MPU6050_GyroData_t Gyro;

	/* Convert bits to deg/s, store in Gyro struct*/
	Gyro.XOUT_dps = RawGyro.XOUT_na / gyroSens + IMUOffsets.WxOffset;
 80024a8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80024ac:	ee07 3a90 	vmov	s15, r3
 80024b0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80024b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80024b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024bc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80024c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024c4:	edc7 7a08 	vstr	s15, [r7, #32]
	Gyro.YOUT_dps = RawGyro.YOUT_na / gyroSens + IMUOffsets.WyOffset;
 80024c8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80024cc:	ee07 3a90 	vmov	s15, r3
 80024d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80024d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80024d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024dc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80024e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	Gyro.ZOUT_dps = RawGyro.ZOUT_na / gyroSens + IMUOffsets.WzOffset;
 80024e8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80024ec:	ee07 3a90 	vmov	s15, r3
 80024f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80024f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80024f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024fc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002500:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002504:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	/* Return Gyro struct */
	return Gyro;
 8002508:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800250c:	f107 0220 	add.w	r2, r7, #32
 8002510:	ca07      	ldmia	r2, {r0, r1, r2}
 8002512:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002516:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800251a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251c:	ee06 1a90 	vmov	s13, r1
 8002520:	ee07 2a10 	vmov	s14, r2
 8002524:	ee07 3a90 	vmov	s15, r3
}
 8002528:	eeb0 0a66 	vmov.f32	s0, s13
 800252c:	eef0 0a47 	vmov.f32	s1, s14
 8002530:	eeb0 1a67 	vmov.f32	s2, s15
 8002534:	3738      	adds	r7, #56	; 0x38
 8002536:	46bd      	mov	sp, r7
 8002538:	bc90      	pop	{r4, r7}
 800253a:	b002      	add	sp, #8
 800253c:	4770      	bx	lr

0800253e <clamp>:

static float clamp(float data, float clampVal, float threshold, uint8_t mode){
 800253e:	b480      	push	{r7}
 8002540:	b087      	sub	sp, #28
 8002542:	af00      	add	r7, sp, #0
 8002544:	ed87 0a03 	vstr	s0, [r7, #12]
 8002548:	edc7 0a02 	vstr	s1, [r7, #8]
 800254c:	ed87 1a01 	vstr	s2, [r7, #4]
 8002550:	4603      	mov	r3, r0
 8002552:	70fb      	strb	r3, [r7, #3]
	// mode = 0: Clamp to clampVal if data below threshold
	// mode = 1: Clamp to clampVal if data above threshold
	float result;

	uint8_t applyClamp_bool = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	74fb      	strb	r3, [r7, #19]

	// Check mode and if clamp is required
	switch(mode){
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <clamp+0x26>
 800255e:	2b01      	cmp	r3, #1
 8002560:	d010      	beq.n	8002584 <clamp+0x46>
 8002562:	e01f      	b.n	80025a4 <clamp+0x66>
	case 0:
		applyClamp_bool = (fabsf(data) < threshold);
 8002564:	edd7 7a03 	vldr	s15, [r7, #12]
 8002568:	eef0 7ae7 	vabs.f32	s15, s15
 800256c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002570:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002578:	bfcc      	ite	gt
 800257a:	2301      	movgt	r3, #1
 800257c:	2300      	movle	r3, #0
 800257e:	b2db      	uxtb	r3, r3
 8002580:	74fb      	strb	r3, [r7, #19]
		break;
 8002582:	e00f      	b.n	80025a4 <clamp+0x66>

	case 1:
		applyClamp_bool = (fabsf(data) > threshold);
 8002584:	edd7 7a03 	vldr	s15, [r7, #12]
 8002588:	eef0 7ae7 	vabs.f32	s15, s15
 800258c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002590:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002598:	bf4c      	ite	mi
 800259a:	2301      	movmi	r3, #1
 800259c:	2300      	movpl	r3, #0
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	74fb      	strb	r3, [r7, #19]
		break;
 80025a2:	bf00      	nop
	}

	// Apply clamp if above criteria are met
	if(applyClamp_bool){
 80025a4:	7cfb      	ldrb	r3, [r7, #19]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <clamp+0x72>
		result = clampVal;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	e001      	b.n	80025b4 <clamp+0x76>
	} else{
		result = data;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	617b      	str	r3, [r7, #20]
	}

	return result;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	ee07 3a90 	vmov	s15, r3
}
 80025ba:	eeb0 0a67 	vmov.f32	s0, s15
 80025be:	371c      	adds	r7, #28
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <MPU6050_IMUDataClamp>:

static IP_MPU6050_Bus_t MPU6050_IMUDataClamp(IP_MPU6050_Bus_t MPU6050_Bus){
 80025c8:	b084      	sub	sp, #16
 80025ca:	b5b0      	push	{r4, r5, r7, lr}
 80025cc:	b08c      	sub	sp, #48	; 0x30
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
 80025d2:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80025d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	IP_MPU6050_Bus_t Result_Bus;

	float clampVal = 0;
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	62fb      	str	r3, [r7, #44]	; 0x2c
	float clampThreshold = .05;
 80025e0:	4b3d      	ldr	r3, [pc, #244]	; (80026d8 <MPU6050_IMUDataClamp+0x110>)
 80025e2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t clampMode = 0;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	Result_Bus.accel.XOUT_ms2 = clamp(MPU6050_Bus.accel.XOUT_ms2, clampVal, clampThreshold, clampMode);
 80025ea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80025ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025f2:	4618      	mov	r0, r3
 80025f4:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 80025f8:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 80025fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002600:	f7ff ff9d 	bl	800253e <clamp>
 8002604:	eef0 7a40 	vmov.f32	s15, s0
 8002608:	edc7 7a03 	vstr	s15, [r7, #12]
	Result_Bus.accel.YOUT_ms2 = clamp(MPU6050_Bus.accel.YOUT_ms2, clampVal, clampThreshold, clampMode);
 800260c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002614:	4618      	mov	r0, r3
 8002616:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 800261a:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 800261e:	eeb0 0a67 	vmov.f32	s0, s15
 8002622:	f7ff ff8c 	bl	800253e <clamp>
 8002626:	eef0 7a40 	vmov.f32	s15, s0
 800262a:	edc7 7a04 	vstr	s15, [r7, #16]
	Result_Bus.accel.ZOUT_ms2 = clamp(MPU6050_Bus.accel.ZOUT_ms2, clampVal, clampThreshold, clampMode);
 800262e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002632:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002636:	4618      	mov	r0, r3
 8002638:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 800263c:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8002640:	eeb0 0a67 	vmov.f32	s0, s15
 8002644:	f7ff ff7b 	bl	800253e <clamp>
 8002648:	eef0 7a40 	vmov.f32	s15, s0
 800264c:	edc7 7a05 	vstr	s15, [r7, #20]

	Result_Bus.gyro.XOUT_dps = clamp(MPU6050_Bus.gyro.XOUT_dps , clampVal, clampThreshold, clampMode);
 8002650:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002658:	4618      	mov	r0, r3
 800265a:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 800265e:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8002662:	eeb0 0a67 	vmov.f32	s0, s15
 8002666:	f7ff ff6a 	bl	800253e <clamp>
 800266a:	eef0 7a40 	vmov.f32	s15, s0
 800266e:	edc7 7a06 	vstr	s15, [r7, #24]
	Result_Bus.gyro.YOUT_dps = clamp(MPU6050_Bus.gyro.YOUT_dps , clampVal, clampThreshold, clampMode);
 8002672:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002676:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800267a:	4618      	mov	r0, r3
 800267c:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 8002680:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8002684:	eeb0 0a67 	vmov.f32	s0, s15
 8002688:	f7ff ff59 	bl	800253e <clamp>
 800268c:	eef0 7a40 	vmov.f32	s15, s0
 8002690:	edc7 7a07 	vstr	s15, [r7, #28]
	Result_Bus.gyro.ZOUT_dps = clamp(MPU6050_Bus.gyro.ZOUT_dps , clampVal, clampThreshold, clampMode);
 8002694:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800269c:	4618      	mov	r0, r3
 800269e:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 80026a2:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 80026a6:	eeb0 0a67 	vmov.f32	s0, s15
 80026aa:	f7ff ff48 	bl	800253e <clamp>
 80026ae:	eef0 7a40 	vmov.f32	s15, s0
 80026b2:	edc7 7a08 	vstr	s15, [r7, #32]

	return Result_Bus;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	461d      	mov	r5, r3
 80026ba:	f107 040c 	add.w	r4, r7, #12
 80026be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026c6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	3730      	adds	r7, #48	; 0x30
 80026ce:	46bd      	mov	sp, r7
 80026d0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80026d4:	b004      	add	sp, #16
 80026d6:	4770      	bx	lr
 80026d8:	3d4ccccd 	.word	0x3d4ccccd

080026dc <OP_VESC>:
static void CANPackMotorSpeed(int32_t speed);
static int8_t llsign(uint32_t x);
/* End function prototypes */

/* Start global function definitions */
OP_VESC_Bus_t OP_VESC(int32_t MotorSpeed_rpm){
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
	OP_VESC_Bus_t OP_VESC_Bus;

	int32_t MotorSpeed_erpm = MotorSpeed_rpm * (NUM_POLE_PAIRS);
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	1a9b      	subs	r3, r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]

	// Limit speed request
	if(llabs(MotorSpeed_erpm) > MAX_SPEED_ERPM){
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	bfb8      	it	lt
 80026f4:	425b      	neglt	r3, r3
 80026f6:	4a0b      	ldr	r2, [pc, #44]	; (8002724 <OP_VESC+0x48>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d909      	bls.n	8002710 <OP_VESC+0x34>
		MotorSpeed_erpm = MAX_SPEED_ERPM * llsign(MotorSpeed_erpm);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 f834 	bl	800276c <llsign>
 8002704:	4603      	mov	r3, r0
 8002706:	461a      	mov	r2, r3
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <OP_VESC+0x48>)
 800270a:	fb02 f303 	mul.w	r3, r2, r3
 800270e:	60fb      	str	r3, [r7, #12]
	}

	CANPackMotorSpeed(MotorSpeed_erpm);
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 f80b 	bl	800272c <CANPackMotorSpeed>

	OP_VESC_Bus.pTxData = SpeedReqPayload;
 8002716:	4b04      	ldr	r3, [pc, #16]	; (8002728 <OP_VESC+0x4c>)
 8002718:	60bb      	str	r3, [r7, #8]

	return OP_VESC_Bus;
 800271a:	68bb      	ldr	r3, [r7, #8]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	00012cc8 	.word	0x00012cc8
 8002728:	200002b4 	.word	0x200002b4

0800272c <CANPackMotorSpeed>:

/* End global function definitions */

/* Start static function definitions */
static void CANPackMotorSpeed(int32_t speed){
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
	SpeedReqPayload[0] = speed >> 24;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	161b      	asrs	r3, r3, #24
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <CANPackMotorSpeed+0x3c>)
 800273c:	701a      	strb	r2, [r3, #0]
	SpeedReqPayload[1] = (speed >> 16) & 0xFF;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	141b      	asrs	r3, r3, #16
 8002742:	b2da      	uxtb	r2, r3
 8002744:	4b08      	ldr	r3, [pc, #32]	; (8002768 <CANPackMotorSpeed+0x3c>)
 8002746:	705a      	strb	r2, [r3, #1]
	SpeedReqPayload[2] = (speed >> 8) & 0xFF;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	121b      	asrs	r3, r3, #8
 800274c:	b2da      	uxtb	r2, r3
 800274e:	4b06      	ldr	r3, [pc, #24]	; (8002768 <CANPackMotorSpeed+0x3c>)
 8002750:	709a      	strb	r2, [r3, #2]
	SpeedReqPayload[3] = speed & 0xFF;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	b2da      	uxtb	r2, r3
 8002756:	4b04      	ldr	r3, [pc, #16]	; (8002768 <CANPackMotorSpeed+0x3c>)
 8002758:	70da      	strb	r2, [r3, #3]
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	200002b4 	.word	0x200002b4

0800276c <llsign>:

static int8_t llsign(uint32_t x){
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
	int8_t sign;

	if (x > 0){
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <llsign+0x14>
		sign = 1;
 800277a:	2301      	movs	r3, #1
 800277c:	73fb      	strb	r3, [r7, #15]
 800277e:	e001      	b.n	8002784 <llsign+0x18>
	}
	else if (x < 0) {
		sign = -1;
	}
	else {
		sign = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	73fb      	strb	r3, [r7, #15]
	}

	return sign;
 8002784:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <PR_InputProcessing>:
 */

#include "Processing.h"

/* Start global function definitions */
IP_Bus_t PR_InputProcessing(Config_Bus_t Config_Bus, HI_Bus_t HI_Bus){
 8002794:	b084      	sub	sp, #16
 8002796:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002798:	b099      	sub	sp, #100	; 0x64
 800279a:	af0a      	add	r7, sp, #40	; 0x28
 800279c:	61f8      	str	r0, [r7, #28]
 800279e:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80027a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	IP_Bus_t IP_Bus;

	IP_Bus.IP_MPU6050_Bus = IP_MPU6050(HI_Bus.HI_MPU6050_Bus, Config_Bus.Config_MPU6050_Bus);
 80027a6:	463e      	mov	r6, r7
 80027a8:	466d      	mov	r5, sp
 80027aa:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 80027ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027b6:	6823      	ldr	r3, [r4, #0]
 80027b8:	602b      	str	r3, [r5, #0]
 80027ba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80027be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027c0:	4630      	mov	r0, r6
 80027c2:	f7ff fd90 	bl	80022e6 <IP_MPU6050>
 80027c6:	f107 0420 	add.w	r4, r7, #32
 80027ca:	463d      	mov	r5, r7
 80027cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80027d4:	e884 0003 	stmia.w	r4, {r0, r1}

	return IP_Bus;
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	461d      	mov	r5, r3
 80027dc:	f107 0420 	add.w	r4, r7, #32
 80027e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027e8:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80027ec:	69f8      	ldr	r0, [r7, #28]
 80027ee:	373c      	adds	r7, #60	; 0x3c
 80027f0:	46bd      	mov	sp, r7
 80027f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80027f6:	b004      	add	sp, #16
 80027f8:	4770      	bx	lr

080027fa <PR_OutputProcessing>:

OP_Bus_t PR_OutputProcessing(CT_Bus_t CT_Bus){
 80027fa:	b084      	sub	sp, #16
 80027fc:	b590      	push	{r4, r7, lr}
 80027fe:	b089      	sub	sp, #36	; 0x24
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8002808:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	OP_Bus_t OP_Bus;

	OP_Bus.OP_HC05_Bus = OP_HC05(CT_Bus.CT_Log_Bus);
 800280c:	4638      	mov	r0, r7
 800280e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002812:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002816:	f7ff fd4d 	bl	80022b4 <OP_HC05>
 800281a:	f107 0314 	add.w	r3, r7, #20
 800281e:	463a      	mov	r2, r7
 8002820:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002824:	e883 0003 	stmia.w	r3, {r0, r1}
	OP_Bus.OP_VESC_Bus = OP_VESC(CT_Bus.CT_Balance_Bus.MotorSpeedReq_rpm);
 8002828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff ff56 	bl	80026dc <OP_VESC>
 8002830:	61f8      	str	r0, [r7, #28]

	return OP_Bus;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	461c      	mov	r4, r3
 8002836:	f107 0314 	add.w	r3, r7, #20
 800283a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800283e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	3724      	adds	r7, #36	; 0x24
 8002846:	46bd      	mov	sp, r7
 8002848:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800284c:	b004      	add	sp, #16
 800284e:	4770      	bx	lr

08002850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002852:	b0c9      	sub	sp, #292	; 0x124
 8002854:	af18      	add	r7, sp, #96	; 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002856:	f000 fcd3 	bl	8003200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800285a:	f000 f83d 	bl	80028d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800285e:	f000 f9d3 	bl	8002c08 <MX_GPIO_Init>
  MX_CAN1_Init();
 8002862:	f000 f8a3 	bl	80029ac <MX_CAN1_Init>
  MX_I2C1_Init();
 8002866:	f000 f8d7 	bl	8002a18 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800286a:	f000 f9a3 	bl	8002bb4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800286e:	f000 f901 	bl	8002a74 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // Make these all pointers later
  // Req for CAN or else you won't actually be updating the CAN peripheral. This will cause an infinite loop in RxInterupt
  Config_HAL_Bus_t Config_HAL_Bus = {&hi2c1, huart2, &hcan1};
 8002872:	4b16      	ldr	r3, [pc, #88]	; (80028cc <main+0x7c>)
 8002874:	677b      	str	r3, [r7, #116]	; 0x74
 8002876:	4a16      	ldr	r2, [pc, #88]	; (80028d0 <main+0x80>)
 8002878:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800287c:	4611      	mov	r1, r2
 800287e:	2244      	movs	r2, #68	; 0x44
 8002880:	4618      	mov	r0, r3
 8002882:	f005 fda5 	bl	80083d0 <memcpy>
 8002886:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <main+0x84>)
 8002888:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  Config_Bus_t Config_Bus;
  Config_Bus = App_Config(Config_HAL_Bus);
 800288c:	1d3e      	adds	r6, r7, #4
 800288e:	466d      	mov	r5, sp
 8002890:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8002894:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002896:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002898:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800289a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800289c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800289e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80028a4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80028a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80028ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028ae:	4630      	mov	r0, r6
 80028b0:	f7fe fb68 	bl	8000f84 <App_Config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  App_Main(Config_Bus);
 80028b4:	4668      	mov	r0, sp
 80028b6:	f107 0314 	add.w	r3, r7, #20
 80028ba:	2260      	movs	r2, #96	; 0x60
 80028bc:	4619      	mov	r1, r3
 80028be:	f005 fd87 	bl	80083d0 <memcpy>
 80028c2:	1d3b      	adds	r3, r7, #4
 80028c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028c6:	f7fe fb97 	bl	8000ff8 <App_Main>
 80028ca:	e7f3      	b.n	80028b4 <main+0x64>
 80028cc:	2000031c 	.word	0x2000031c
 80028d0:	200003b8 	.word	0x200003b8
 80028d4:	200002b8 	.word	0x200002b8

080028d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b094      	sub	sp, #80	; 0x50
 80028dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028de:	f107 031c 	add.w	r3, r7, #28
 80028e2:	2234      	movs	r2, #52	; 0x34
 80028e4:	2100      	movs	r1, #0
 80028e6:	4618      	mov	r0, r3
 80028e8:	f005 fcf3 	bl	80082d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028ec:	f107 0308 	add.w	r3, r7, #8
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028fc:	2300      	movs	r3, #0
 80028fe:	607b      	str	r3, [r7, #4]
 8002900:	4b28      	ldr	r3, [pc, #160]	; (80029a4 <SystemClock_Config+0xcc>)
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	4a27      	ldr	r2, [pc, #156]	; (80029a4 <SystemClock_Config+0xcc>)
 8002906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290a:	6413      	str	r3, [r2, #64]	; 0x40
 800290c:	4b25      	ldr	r3, [pc, #148]	; (80029a4 <SystemClock_Config+0xcc>)
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002914:	607b      	str	r3, [r7, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002918:	2300      	movs	r3, #0
 800291a:	603b      	str	r3, [r7, #0]
 800291c:	4b22      	ldr	r3, [pc, #136]	; (80029a8 <SystemClock_Config+0xd0>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a21      	ldr	r2, [pc, #132]	; (80029a8 <SystemClock_Config+0xd0>)
 8002922:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002926:	6013      	str	r3, [r2, #0]
 8002928:	4b1f      	ldr	r3, [pc, #124]	; (80029a8 <SystemClock_Config+0xd0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002930:	603b      	str	r3, [r7, #0]
 8002932:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002934:	2301      	movs	r3, #1
 8002936:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002938:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800293c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800293e:	2302      	movs	r3, #2
 8002940:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002942:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002946:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002948:	2308      	movs	r3, #8
 800294a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 800294c:	2364      	movs	r3, #100	; 0x64
 800294e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002950:	2302      	movs	r3, #2
 8002952:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002954:	2302      	movs	r3, #2
 8002956:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002958:	2302      	movs	r3, #2
 800295a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800295c:	f107 031c 	add.w	r3, r7, #28
 8002960:	4618      	mov	r0, r3
 8002962:	f003 fa03 	bl	8005d6c <HAL_RCC_OscConfig>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800296c:	f000 f9a8 	bl	8002cc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002970:	230f      	movs	r3, #15
 8002972:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002974:	2302      	movs	r3, #2
 8002976:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002978:	2300      	movs	r3, #0
 800297a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800297c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002980:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002982:	2300      	movs	r3, #0
 8002984:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002986:	f107 0308 	add.w	r3, r7, #8
 800298a:	2103      	movs	r1, #3
 800298c:	4618      	mov	r0, r3
 800298e:	f002 ffcf 	bl	8005930 <HAL_RCC_ClockConfig>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002998:	f000 f992 	bl	8002cc0 <Error_Handler>
  }
}
 800299c:	bf00      	nop
 800299e:	3750      	adds	r7, #80	; 0x50
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40007000 	.word	0x40007000

080029ac <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80029b0:	4b17      	ldr	r3, [pc, #92]	; (8002a10 <MX_CAN1_Init+0x64>)
 80029b2:	4a18      	ldr	r2, [pc, #96]	; (8002a14 <MX_CAN1_Init+0x68>)
 80029b4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 80029b6:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <MX_CAN1_Init+0x64>)
 80029b8:	220a      	movs	r2, #10
 80029ba:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80029bc:	4b14      	ldr	r3, [pc, #80]	; (8002a10 <MX_CAN1_Init+0x64>)
 80029be:	2200      	movs	r2, #0
 80029c0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80029c2:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <MX_CAN1_Init+0x64>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80029c8:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <MX_CAN1_Init+0x64>)
 80029ca:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80029ce:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80029d0:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <MX_CAN1_Init+0x64>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80029d6:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <MX_CAN1_Init+0x64>)
 80029d8:	2200      	movs	r2, #0
 80029da:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80029dc:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <MX_CAN1_Init+0x64>)
 80029de:	2201      	movs	r2, #1
 80029e0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80029e2:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <MX_CAN1_Init+0x64>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80029e8:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <MX_CAN1_Init+0x64>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80029ee:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <MX_CAN1_Init+0x64>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <MX_CAN1_Init+0x64>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80029fa:	4805      	ldr	r0, [pc, #20]	; (8002a10 <MX_CAN1_Init+0x64>)
 80029fc:	f000 fc96 	bl	800332c <HAL_CAN_Init>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8002a06:	f000 f95b 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	200002b8 	.word	0x200002b8
 8002a14:	40006400 	.word	0x40006400

08002a18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a1c:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <MX_I2C1_Init+0x50>)
 8002a1e:	4a13      	ldr	r2, [pc, #76]	; (8002a6c <MX_I2C1_Init+0x54>)
 8002a20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002a22:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <MX_I2C1_Init+0x50>)
 8002a24:	4a12      	ldr	r2, [pc, #72]	; (8002a70 <MX_I2C1_Init+0x58>)
 8002a26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a28:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <MX_I2C1_Init+0x50>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <MX_I2C1_Init+0x50>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <MX_I2C1_Init+0x50>)
 8002a36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a3c:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <MX_I2C1_Init+0x50>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002a42:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <MX_I2C1_Init+0x50>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a48:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <MX_I2C1_Init+0x50>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a4e:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <MX_I2C1_Init+0x50>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a54:	4804      	ldr	r0, [pc, #16]	; (8002a68 <MX_I2C1_Init+0x50>)
 8002a56:	f001 fe7d 	bl	8004754 <HAL_I2C_Init>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002a60:	f000 f92e 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a64:	bf00      	nop
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	2000031c 	.word	0x2000031c
 8002a6c:	40005400 	.word	0x40005400
 8002a70:	00061a80 	.word	0x00061a80

08002a74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b096      	sub	sp, #88	; 0x58
 8002a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	605a      	str	r2, [r3, #4]
 8002a84:	609a      	str	r2, [r3, #8]
 8002a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	605a      	str	r2, [r3, #4]
 8002a9c:	609a      	str	r2, [r3, #8]
 8002a9e:	60da      	str	r2, [r3, #12]
 8002aa0:	611a      	str	r2, [r3, #16]
 8002aa2:	615a      	str	r2, [r3, #20]
 8002aa4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002aa6:	1d3b      	adds	r3, r7, #4
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	2100      	movs	r1, #0
 8002aac:	4618      	mov	r0, r3
 8002aae:	f005 fc10 	bl	80082d2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ab2:	4b3e      	ldr	r3, [pc, #248]	; (8002bac <MX_TIM1_Init+0x138>)
 8002ab4:	4a3e      	ldr	r2, [pc, #248]	; (8002bb0 <MX_TIM1_Init+0x13c>)
 8002ab6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002ab8:	4b3c      	ldr	r3, [pc, #240]	; (8002bac <MX_TIM1_Init+0x138>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002abe:	4b3b      	ldr	r3, [pc, #236]	; (8002bac <MX_TIM1_Init+0x138>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002ac4:	4b39      	ldr	r3, [pc, #228]	; (8002bac <MX_TIM1_Init+0x138>)
 8002ac6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002acc:	4b37      	ldr	r3, [pc, #220]	; (8002bac <MX_TIM1_Init+0x138>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ad2:	4b36      	ldr	r3, [pc, #216]	; (8002bac <MX_TIM1_Init+0x138>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ad8:	4b34      	ldr	r3, [pc, #208]	; (8002bac <MX_TIM1_Init+0x138>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ade:	4833      	ldr	r0, [pc, #204]	; (8002bac <MX_TIM1_Init+0x138>)
 8002ae0:	f003 fbc8 	bl	8006274 <HAL_TIM_Base_Init>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002aea:	f000 f8e9 	bl	8002cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002af2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002af4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002af8:	4619      	mov	r1, r3
 8002afa:	482c      	ldr	r0, [pc, #176]	; (8002bac <MX_TIM1_Init+0x138>)
 8002afc:	f003 fd24 	bl	8006548 <HAL_TIM_ConfigClockSource>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002b06:	f000 f8db 	bl	8002cc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002b0a:	4828      	ldr	r0, [pc, #160]	; (8002bac <MX_TIM1_Init+0x138>)
 8002b0c:	f003 fc01 	bl	8006312 <HAL_TIM_PWM_Init>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002b16:	f000 f8d3 	bl	8002cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b26:	4619      	mov	r1, r3
 8002b28:	4820      	ldr	r0, [pc, #128]	; (8002bac <MX_TIM1_Init+0x138>)
 8002b2a:	f004 f8bf 	bl	8006cac <HAL_TIMEx_MasterConfigSynchronization>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002b34:	f000 f8c4 	bl	8002cc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b38:	2360      	movs	r3, #96	; 0x60
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b40:	2300      	movs	r3, #0
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b44:	2300      	movs	r3, #0
 8002b46:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b50:	2300      	movs	r3, #0
 8002b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b58:	2200      	movs	r2, #0
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4813      	ldr	r0, [pc, #76]	; (8002bac <MX_TIM1_Init+0x138>)
 8002b5e:	f003 fc31 	bl	80063c4 <HAL_TIM_PWM_ConfigChannel>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002b68:	f000 f8aa 	bl	8002cc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b84:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b8a:	1d3b      	adds	r3, r7, #4
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4807      	ldr	r0, [pc, #28]	; (8002bac <MX_TIM1_Init+0x138>)
 8002b90:	f004 f908 	bl	8006da4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8002b9a:	f000 f891 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002b9e:	4803      	ldr	r0, [pc, #12]	; (8002bac <MX_TIM1_Init+0x138>)
 8002ba0:	f000 f976 	bl	8002e90 <HAL_TIM_MspPostInit>

}
 8002ba4:	bf00      	nop
 8002ba6:	3758      	adds	r7, #88	; 0x58
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	20000370 	.word	0x20000370
 8002bb0:	40010000 	.word	0x40010000

08002bb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002bb8:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <MX_USART2_UART_Init+0x4c>)
 8002bba:	4a12      	ldr	r2, [pc, #72]	; (8002c04 <MX_USART2_UART_Init+0x50>)
 8002bbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002bbe:	4b10      	ldr	r3, [pc, #64]	; (8002c00 <MX_USART2_UART_Init+0x4c>)
 8002bc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bc6:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <MX_USART2_UART_Init+0x4c>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <MX_USART2_UART_Init+0x4c>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bd2:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <MX_USART2_UART_Init+0x4c>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002bd8:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <MX_USART2_UART_Init+0x4c>)
 8002bda:	220c      	movs	r2, #12
 8002bdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bde:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <MX_USART2_UART_Init+0x4c>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002be4:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <MX_USART2_UART_Init+0x4c>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002bea:	4805      	ldr	r0, [pc, #20]	; (8002c00 <MX_USART2_UART_Init+0x4c>)
 8002bec:	f004 f92c 	bl	8006e48 <HAL_UART_Init>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002bf6:	f000 f863 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bfa:	bf00      	nop
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	200003b8 	.word	0x200003b8
 8002c04:	40004400 	.word	0x40004400

08002c08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b088      	sub	sp, #32
 8002c0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c0e:	f107 030c 	add.w	r3, r7, #12
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	605a      	str	r2, [r3, #4]
 8002c18:	609a      	str	r2, [r3, #8]
 8002c1a:	60da      	str	r2, [r3, #12]
 8002c1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	4b25      	ldr	r3, [pc, #148]	; (8002cb8 <MX_GPIO_Init+0xb0>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	4a24      	ldr	r2, [pc, #144]	; (8002cb8 <MX_GPIO_Init+0xb0>)
 8002c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2e:	4b22      	ldr	r3, [pc, #136]	; (8002cb8 <MX_GPIO_Init+0xb0>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c36:	60bb      	str	r3, [r7, #8]
 8002c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	607b      	str	r3, [r7, #4]
 8002c3e:	4b1e      	ldr	r3, [pc, #120]	; (8002cb8 <MX_GPIO_Init+0xb0>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	4a1d      	ldr	r2, [pc, #116]	; (8002cb8 <MX_GPIO_Init+0xb0>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4a:	4b1b      	ldr	r3, [pc, #108]	; (8002cb8 <MX_GPIO_Init+0xb0>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	607b      	str	r3, [r7, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	603b      	str	r3, [r7, #0]
 8002c5a:	4b17      	ldr	r3, [pc, #92]	; (8002cb8 <MX_GPIO_Init+0xb0>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	4a16      	ldr	r2, [pc, #88]	; (8002cb8 <MX_GPIO_Init+0xb0>)
 8002c60:	f043 0302 	orr.w	r3, r3, #2
 8002c64:	6313      	str	r3, [r2, #48]	; 0x30
 8002c66:	4b14      	ldr	r3, [pc, #80]	; (8002cb8 <MX_GPIO_Init+0xb0>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	603b      	str	r3, [r7, #0]
 8002c70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8002c72:	2200      	movs	r2, #0
 8002c74:	2180      	movs	r1, #128	; 0x80
 8002c76:	4811      	ldr	r0, [pc, #68]	; (8002cbc <MX_GPIO_Init+0xb4>)
 8002c78:	f001 fd52 	bl	8004720 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002c7c:	2370      	movs	r3, #112	; 0x70
 8002c7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c80:	2300      	movs	r3, #0
 8002c82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c88:	f107 030c 	add.w	r3, r7, #12
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	480b      	ldr	r0, [pc, #44]	; (8002cbc <MX_GPIO_Init+0xb4>)
 8002c90:	f001 fbd2 	bl	8004438 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002c94:	2380      	movs	r3, #128	; 0x80
 8002c96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca4:	f107 030c 	add.w	r3, r7, #12
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4804      	ldr	r0, [pc, #16]	; (8002cbc <MX_GPIO_Init+0xb4>)
 8002cac:	f001 fbc4 	bl	8004438 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002cb0:	bf00      	nop
 8002cb2:	3720      	adds	r7, #32
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40020000 	.word	0x40020000

08002cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cc4:	b672      	cpsid	i
}
 8002cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cc8:	e7fe      	b.n	8002cc8 <Error_Handler+0x8>
	...

08002ccc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	607b      	str	r3, [r7, #4]
 8002cd6:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <HAL_MspInit+0x4c>)
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cda:	4a0f      	ldr	r2, [pc, #60]	; (8002d18 <HAL_MspInit+0x4c>)
 8002cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ce2:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <HAL_MspInit+0x4c>)
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cea:	607b      	str	r3, [r7, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	603b      	str	r3, [r7, #0]
 8002cf2:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <HAL_MspInit+0x4c>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	4a08      	ldr	r2, [pc, #32]	; (8002d18 <HAL_MspInit+0x4c>)
 8002cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cfe:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <HAL_MspInit+0x4c>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d06:	603b      	str	r3, [r7, #0]
 8002d08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	40023800 	.word	0x40023800

08002d1c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08a      	sub	sp, #40	; 0x28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d24:	f107 0314 	add.w	r3, r7, #20
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	605a      	str	r2, [r3, #4]
 8002d2e:	609a      	str	r2, [r3, #8]
 8002d30:	60da      	str	r2, [r3, #12]
 8002d32:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a1d      	ldr	r2, [pc, #116]	; (8002db0 <HAL_CAN_MspInit+0x94>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d134      	bne.n	8002da8 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	4b1c      	ldr	r3, [pc, #112]	; (8002db4 <HAL_CAN_MspInit+0x98>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	4a1b      	ldr	r2, [pc, #108]	; (8002db4 <HAL_CAN_MspInit+0x98>)
 8002d48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d4e:	4b19      	ldr	r3, [pc, #100]	; (8002db4 <HAL_CAN_MspInit+0x98>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	4b15      	ldr	r3, [pc, #84]	; (8002db4 <HAL_CAN_MspInit+0x98>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	4a14      	ldr	r2, [pc, #80]	; (8002db4 <HAL_CAN_MspInit+0x98>)
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <HAL_CAN_MspInit+0x98>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002d76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d84:	2303      	movs	r3, #3
 8002d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002d88:	2309      	movs	r3, #9
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8c:	f107 0314 	add.w	r3, r7, #20
 8002d90:	4619      	mov	r1, r3
 8002d92:	4809      	ldr	r0, [pc, #36]	; (8002db8 <HAL_CAN_MspInit+0x9c>)
 8002d94:	f001 fb50 	bl	8004438 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002d98:	2200      	movs	r2, #0
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	2014      	movs	r0, #20
 8002d9e:	f001 fb14 	bl	80043ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002da2:	2014      	movs	r0, #20
 8002da4:	f001 fb2d 	bl	8004402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002da8:	bf00      	nop
 8002daa:	3728      	adds	r7, #40	; 0x28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40006400 	.word	0x40006400
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40020000 	.word	0x40020000

08002dbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08a      	sub	sp, #40	; 0x28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc4:	f107 0314 	add.w	r3, r7, #20
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	60da      	str	r2, [r3, #12]
 8002dd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a19      	ldr	r2, [pc, #100]	; (8002e40 <HAL_I2C_MspInit+0x84>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d12b      	bne.n	8002e36 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	4b18      	ldr	r3, [pc, #96]	; (8002e44 <HAL_I2C_MspInit+0x88>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	4a17      	ldr	r2, [pc, #92]	; (8002e44 <HAL_I2C_MspInit+0x88>)
 8002de8:	f043 0302 	orr.w	r3, r3, #2
 8002dec:	6313      	str	r3, [r2, #48]	; 0x30
 8002dee:	4b15      	ldr	r3, [pc, #84]	; (8002e44 <HAL_I2C_MspInit+0x88>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002dfa:	23c0      	movs	r3, #192	; 0xc0
 8002dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dfe:	2312      	movs	r3, #18
 8002e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e02:	2300      	movs	r3, #0
 8002e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e06:	2303      	movs	r3, #3
 8002e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e0a:	2304      	movs	r3, #4
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e0e:	f107 0314 	add.w	r3, r7, #20
 8002e12:	4619      	mov	r1, r3
 8002e14:	480c      	ldr	r0, [pc, #48]	; (8002e48 <HAL_I2C_MspInit+0x8c>)
 8002e16:	f001 fb0f 	bl	8004438 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <HAL_I2C_MspInit+0x88>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	4a08      	ldr	r2, [pc, #32]	; (8002e44 <HAL_I2C_MspInit+0x88>)
 8002e24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e28:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2a:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <HAL_I2C_MspInit+0x88>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e36:	bf00      	nop
 8002e38:	3728      	adds	r7, #40	; 0x28
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40005400 	.word	0x40005400
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40020400 	.word	0x40020400

08002e4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a0b      	ldr	r2, [pc, #44]	; (8002e88 <HAL_TIM_Base_MspInit+0x3c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d10d      	bne.n	8002e7a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <HAL_TIM_Base_MspInit+0x40>)
 8002e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e66:	4a09      	ldr	r2, [pc, #36]	; (8002e8c <HAL_TIM_Base_MspInit+0x40>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e6e:	4b07      	ldr	r3, [pc, #28]	; (8002e8c <HAL_TIM_Base_MspInit+0x40>)
 8002e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002e7a:	bf00      	nop
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	40010000 	.word	0x40010000
 8002e8c:	40023800 	.word	0x40023800

08002e90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e98:	f107 030c 	add.w	r3, r7, #12
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a12      	ldr	r2, [pc, #72]	; (8002ef8 <HAL_TIM_MspPostInit+0x68>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d11e      	bne.n	8002ef0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60bb      	str	r3, [r7, #8]
 8002eb6:	4b11      	ldr	r3, [pc, #68]	; (8002efc <HAL_TIM_MspPostInit+0x6c>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	4a10      	ldr	r2, [pc, #64]	; (8002efc <HAL_TIM_MspPostInit+0x6c>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec2:	4b0e      	ldr	r3, [pc, #56]	; (8002efc <HAL_TIM_MspPostInit+0x6c>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	60bb      	str	r3, [r7, #8]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ece:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ed2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002edc:	2300      	movs	r3, #0
 8002ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee4:	f107 030c 	add.w	r3, r7, #12
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4805      	ldr	r0, [pc, #20]	; (8002f00 <HAL_TIM_MspPostInit+0x70>)
 8002eec:	f001 faa4 	bl	8004438 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002ef0:	bf00      	nop
 8002ef2:	3720      	adds	r7, #32
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40010000 	.word	0x40010000
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40020000 	.word	0x40020000

08002f04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08a      	sub	sp, #40	; 0x28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f0c:	f107 0314 	add.w	r3, r7, #20
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	605a      	str	r2, [r3, #4]
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	60da      	str	r2, [r3, #12]
 8002f1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a19      	ldr	r2, [pc, #100]	; (8002f88 <HAL_UART_MspInit+0x84>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d12b      	bne.n	8002f7e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	4b18      	ldr	r3, [pc, #96]	; (8002f8c <HAL_UART_MspInit+0x88>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	4a17      	ldr	r2, [pc, #92]	; (8002f8c <HAL_UART_MspInit+0x88>)
 8002f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f34:	6413      	str	r3, [r2, #64]	; 0x40
 8002f36:	4b15      	ldr	r3, [pc, #84]	; (8002f8c <HAL_UART_MspInit+0x88>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3e:	613b      	str	r3, [r7, #16]
 8002f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	4b11      	ldr	r3, [pc, #68]	; (8002f8c <HAL_UART_MspInit+0x88>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	4a10      	ldr	r2, [pc, #64]	; (8002f8c <HAL_UART_MspInit+0x88>)
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	6313      	str	r3, [r2, #48]	; 0x30
 8002f52:	4b0e      	ldr	r3, [pc, #56]	; (8002f8c <HAL_UART_MspInit+0x88>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f5e:	230c      	movs	r3, #12
 8002f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f62:	2302      	movs	r3, #2
 8002f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f6e:	2307      	movs	r3, #7
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f72:	f107 0314 	add.w	r3, r7, #20
 8002f76:	4619      	mov	r1, r3
 8002f78:	4805      	ldr	r0, [pc, #20]	; (8002f90 <HAL_UART_MspInit+0x8c>)
 8002f7a:	f001 fa5d 	bl	8004438 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f7e:	bf00      	nop
 8002f80:	3728      	adds	r7, #40	; 0x28
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40004400 	.word	0x40004400
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	40020000 	.word	0x40020000

08002f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f98:	e7fe      	b.n	8002f98 <NMI_Handler+0x4>

08002f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f9e:	e7fe      	b.n	8002f9e <HardFault_Handler+0x4>

08002fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fa4:	e7fe      	b.n	8002fa4 <MemManage_Handler+0x4>

08002fa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002faa:	e7fe      	b.n	8002faa <BusFault_Handler+0x4>

08002fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fb0:	e7fe      	b.n	8002fb0 <UsageFault_Handler+0x4>

08002fb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fd2:	bf00      	nop
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fe0:	f000 f960 	bl	80032a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fe4:	bf00      	nop
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002fec:	4802      	ldr	r0, [pc, #8]	; (8002ff8 <CAN1_RX0_IRQHandler+0x10>)
 8002fee:	f000 feca 	bl	8003d86 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	200002b8 	.word	0x200002b8

08002ffc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return 1;
 8003000:	2301      	movs	r3, #1
}
 8003002:	4618      	mov	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <_kill>:

int _kill(int pid, int sig)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003016:	f005 f9af 	bl	8008378 <__errno>
 800301a:	4603      	mov	r3, r0
 800301c:	2216      	movs	r2, #22
 800301e:	601a      	str	r2, [r3, #0]
  return -1;
 8003020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003024:	4618      	mov	r0, r3
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <_exit>:

void _exit (int status)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003034:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff ffe7 	bl	800300c <_kill>
  while (1) {}    /* Make sure we hang here */
 800303e:	e7fe      	b.n	800303e <_exit+0x12>

08003040 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	e00a      	b.n	8003068 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003052:	f3af 8000 	nop.w
 8003056:	4601      	mov	r1, r0
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	60ba      	str	r2, [r7, #8]
 800305e:	b2ca      	uxtb	r2, r1
 8003060:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	3301      	adds	r3, #1
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	429a      	cmp	r2, r3
 800306e:	dbf0      	blt.n	8003052 <_read+0x12>
  }

  return len;
 8003070:	687b      	ldr	r3, [r7, #4]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b086      	sub	sp, #24
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	e009      	b.n	80030a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	60ba      	str	r2, [r7, #8]
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	3301      	adds	r3, #1
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	dbf1      	blt.n	800308c <_write+0x12>
  }
  return len;
 80030a8:	687b      	ldr	r3, [r7, #4]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <_close>:

int _close(int file)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80030be:	4618      	mov	r0, r3
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030da:	605a      	str	r2, [r3, #4]
  return 0;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <_isatty>:

int _isatty(int file)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030f2:	2301      	movs	r3, #1
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
	...

0800311c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003124:	4a14      	ldr	r2, [pc, #80]	; (8003178 <_sbrk+0x5c>)
 8003126:	4b15      	ldr	r3, [pc, #84]	; (800317c <_sbrk+0x60>)
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003130:	4b13      	ldr	r3, [pc, #76]	; (8003180 <_sbrk+0x64>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d102      	bne.n	800313e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003138:	4b11      	ldr	r3, [pc, #68]	; (8003180 <_sbrk+0x64>)
 800313a:	4a12      	ldr	r2, [pc, #72]	; (8003184 <_sbrk+0x68>)
 800313c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800313e:	4b10      	ldr	r3, [pc, #64]	; (8003180 <_sbrk+0x64>)
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4413      	add	r3, r2
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	429a      	cmp	r2, r3
 800314a:	d207      	bcs.n	800315c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800314c:	f005 f914 	bl	8008378 <__errno>
 8003150:	4603      	mov	r3, r0
 8003152:	220c      	movs	r2, #12
 8003154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800315a:	e009      	b.n	8003170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800315c:	4b08      	ldr	r3, [pc, #32]	; (8003180 <_sbrk+0x64>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003162:	4b07      	ldr	r3, [pc, #28]	; (8003180 <_sbrk+0x64>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4413      	add	r3, r2
 800316a:	4a05      	ldr	r2, [pc, #20]	; (8003180 <_sbrk+0x64>)
 800316c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800316e:	68fb      	ldr	r3, [r7, #12]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	20040000 	.word	0x20040000
 800317c:	00000400 	.word	0x00000400
 8003180:	200003fc 	.word	0x200003fc
 8003184:	20000550 	.word	0x20000550

08003188 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800318c:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <SystemInit+0x20>)
 800318e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003192:	4a05      	ldr	r2, [pc, #20]	; (80031a8 <SystemInit+0x20>)
 8003194:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003198:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800319c:	bf00      	nop
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	e000ed00 	.word	0xe000ed00

080031ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80031ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031b0:	480d      	ldr	r0, [pc, #52]	; (80031e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031b2:	490e      	ldr	r1, [pc, #56]	; (80031ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031b4:	4a0e      	ldr	r2, [pc, #56]	; (80031f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031b8:	e002      	b.n	80031c0 <LoopCopyDataInit>

080031ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031be:	3304      	adds	r3, #4

080031c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031c4:	d3f9      	bcc.n	80031ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031c6:	4a0b      	ldr	r2, [pc, #44]	; (80031f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031c8:	4c0b      	ldr	r4, [pc, #44]	; (80031f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031cc:	e001      	b.n	80031d2 <LoopFillZerobss>

080031ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031d0:	3204      	adds	r2, #4

080031d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031d4:	d3fb      	bcc.n	80031ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031d6:	f7ff ffd7 	bl	8003188 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031da:	f005 f8d3 	bl	8008384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031de:	f7ff fb37 	bl	8002850 <main>
  bx  lr    
 80031e2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80031e4:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80031e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031ec:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80031f0:	0800b3a4 	.word	0x0800b3a4
  ldr r2, =_sbss
 80031f4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80031f8:	20000550 	.word	0x20000550

080031fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031fc:	e7fe      	b.n	80031fc <ADC_IRQHandler>
	...

08003200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003204:	4b0e      	ldr	r3, [pc, #56]	; (8003240 <HAL_Init+0x40>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a0d      	ldr	r2, [pc, #52]	; (8003240 <HAL_Init+0x40>)
 800320a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800320e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_Init+0x40>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a0a      	ldr	r2, [pc, #40]	; (8003240 <HAL_Init+0x40>)
 8003216:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800321a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800321c:	4b08      	ldr	r3, [pc, #32]	; (8003240 <HAL_Init+0x40>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a07      	ldr	r2, [pc, #28]	; (8003240 <HAL_Init+0x40>)
 8003222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003226:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003228:	2003      	movs	r0, #3
 800322a:	f001 f8c3 	bl	80043b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800322e:	200f      	movs	r0, #15
 8003230:	f000 f808 	bl	8003244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003234:	f7ff fd4a 	bl	8002ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40023c00 	.word	0x40023c00

08003244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800324c:	4b12      	ldr	r3, [pc, #72]	; (8003298 <HAL_InitTick+0x54>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	4b12      	ldr	r3, [pc, #72]	; (800329c <HAL_InitTick+0x58>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	4619      	mov	r1, r3
 8003256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800325a:	fbb3 f3f1 	udiv	r3, r3, r1
 800325e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003262:	4618      	mov	r0, r3
 8003264:	f001 f8db 	bl	800441e <HAL_SYSTICK_Config>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e00e      	b.n	8003290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b0f      	cmp	r3, #15
 8003276:	d80a      	bhi.n	800328e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003278:	2200      	movs	r2, #0
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003280:	f001 f8a3 	bl	80043ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003284:	4a06      	ldr	r2, [pc, #24]	; (80032a0 <HAL_InitTick+0x5c>)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	e000      	b.n	8003290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
}
 8003290:	4618      	mov	r0, r3
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	20000008 	.word	0x20000008
 800329c:	20000010 	.word	0x20000010
 80032a0:	2000000c 	.word	0x2000000c

080032a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032a8:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_IncTick+0x20>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	461a      	mov	r2, r3
 80032ae:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <HAL_IncTick+0x24>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4413      	add	r3, r2
 80032b4:	4a04      	ldr	r2, [pc, #16]	; (80032c8 <HAL_IncTick+0x24>)
 80032b6:	6013      	str	r3, [r2, #0]
}
 80032b8:	bf00      	nop
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	20000010 	.word	0x20000010
 80032c8:	20000400 	.word	0x20000400

080032cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  return uwTick;
 80032d0:	4b03      	ldr	r3, [pc, #12]	; (80032e0 <HAL_GetTick+0x14>)
 80032d2:	681b      	ldr	r3, [r3, #0]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	20000400 	.word	0x20000400

080032e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032ec:	f7ff ffee 	bl	80032cc <HAL_GetTick>
 80032f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032fc:	d005      	beq.n	800330a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032fe:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <HAL_Delay+0x44>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4413      	add	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800330a:	bf00      	nop
 800330c:	f7ff ffde 	bl	80032cc <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	429a      	cmp	r2, r3
 800331a:	d8f7      	bhi.n	800330c <HAL_Delay+0x28>
  {
  }
}
 800331c:	bf00      	nop
 800331e:	bf00      	nop
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000010 	.word	0x20000010

0800332c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e11c      	b.n	8003578 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d131      	bne.n	80033ae <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a8c      	ldr	r2, [pc, #560]	; (8003580 <HAL_CAN_Init+0x254>)
 800334e:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a8c      	ldr	r2, [pc, #560]	; (8003584 <HAL_CAN_Init+0x258>)
 8003354:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a8b      	ldr	r2, [pc, #556]	; (8003588 <HAL_CAN_Init+0x25c>)
 800335a:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a8b      	ldr	r2, [pc, #556]	; (800358c <HAL_CAN_Init+0x260>)
 8003360:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a8a      	ldr	r2, [pc, #552]	; (8003590 <HAL_CAN_Init+0x264>)
 8003366:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a8a      	ldr	r2, [pc, #552]	; (8003594 <HAL_CAN_Init+0x268>)
 800336c:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a89      	ldr	r2, [pc, #548]	; (8003598 <HAL_CAN_Init+0x26c>)
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a89      	ldr	r2, [pc, #548]	; (800359c <HAL_CAN_Init+0x270>)
 8003378:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a88      	ldr	r2, [pc, #544]	; (80035a0 <HAL_CAN_Init+0x274>)
 800337e:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a88      	ldr	r2, [pc, #544]	; (80035a4 <HAL_CAN_Init+0x278>)
 8003384:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a87      	ldr	r2, [pc, #540]	; (80035a8 <HAL_CAN_Init+0x27c>)
 800338a:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a87      	ldr	r2, [pc, #540]	; (80035ac <HAL_CAN_Init+0x280>)
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a86      	ldr	r2, [pc, #536]	; (80035b0 <HAL_CAN_Init+0x284>)
 8003396:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339c:	2b00      	cmp	r3, #0
 800339e:	d102      	bne.n	80033a6 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a84      	ldr	r2, [pc, #528]	; (80035b4 <HAL_CAN_Init+0x288>)
 80033a4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f042 0201 	orr.w	r2, r2, #1
 80033bc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033be:	f7ff ff85 	bl	80032cc <HAL_GetTick>
 80033c2:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80033c4:	e012      	b.n	80033ec <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80033c6:	f7ff ff81 	bl	80032cc <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b0a      	cmp	r3, #10
 80033d2:	d90b      	bls.n	80033ec <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2205      	movs	r2, #5
 80033e4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0c5      	b.n	8003578 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0e5      	beq.n	80033c6 <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0202 	bic.w	r2, r2, #2
 8003408:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800340a:	f7ff ff5f 	bl	80032cc <HAL_GetTick>
 800340e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003410:	e012      	b.n	8003438 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003412:	f7ff ff5b 	bl	80032cc <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b0a      	cmp	r3, #10
 800341e:	d90b      	bls.n	8003438 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2205      	movs	r2, #5
 8003430:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e09f      	b.n	8003578 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1e5      	bne.n	8003412 <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	7e1b      	ldrb	r3, [r3, #24]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d108      	bne.n	8003460 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	e007      	b.n	8003470 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800346e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	7e5b      	ldrb	r3, [r3, #25]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d108      	bne.n	800348a <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	e007      	b.n	800349a <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003498:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	7e9b      	ldrb	r3, [r3, #26]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d108      	bne.n	80034b4 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 0220 	orr.w	r2, r2, #32
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	e007      	b.n	80034c4 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0220 	bic.w	r2, r2, #32
 80034c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	7edb      	ldrb	r3, [r3, #27]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d108      	bne.n	80034de <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0210 	bic.w	r2, r2, #16
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	e007      	b.n	80034ee <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0210 	orr.w	r2, r2, #16
 80034ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	7f1b      	ldrb	r3, [r3, #28]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d108      	bne.n	8003508 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f042 0208 	orr.w	r2, r2, #8
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	e007      	b.n	8003518 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0208 	bic.w	r2, r2, #8
 8003516:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	7f5b      	ldrb	r3, [r3, #29]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d108      	bne.n	8003532 <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0204 	orr.w	r2, r2, #4
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	e007      	b.n	8003542 <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0204 	bic.w	r2, r2, #4
 8003540:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	431a      	orrs	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	ea42 0103 	orr.w	r1, r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	1e5a      	subs	r2, r3, #1
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	08004189 	.word	0x08004189
 8003584:	0800419d 	.word	0x0800419d
 8003588:	080041b1 	.word	0x080041b1
 800358c:	080041c5 	.word	0x080041c5
 8003590:	08004111 	.word	0x08004111
 8003594:	08004125 	.word	0x08004125
 8003598:	08004139 	.word	0x08004139
 800359c:	0800414d 	.word	0x0800414d
 80035a0:	08004161 	.word	0x08004161
 80035a4:	08004175 	.word	0x08004175
 80035a8:	080041d9 	.word	0x080041d9
 80035ac:	080041ed 	.word	0x080041ed
 80035b0:	08004201 	.word	0x08004201
 80035b4:	08002d1d 	.word	0x08002d1d

080035b8 <HAL_CAN_RegisterCallback>:
  *           @arg @ref HAL_CAN_MSPDEINIT_CB_ID MspDeInit callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_RegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef CallbackID, void (* pCallback)(CAN_HandleTypeDef *_hcan))
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	460b      	mov	r3, r1
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d107      	bne.n	80035e0 <HAL_CAN_RegisterCallback+0x28>
  {
    /* Update the error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e094      	b.n	800370a <HAL_CAN_RegisterCallback+0x152>
  }

  if (hcan->State == HAL_CAN_STATE_READY)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d168      	bne.n	80036be <HAL_CAN_RegisterCallback+0x106>
  {
    switch (CallbackID)
 80035ec:	7afb      	ldrb	r3, [r7, #11]
 80035ee:	2b0e      	cmp	r3, #14
 80035f0:	d85c      	bhi.n	80036ac <HAL_CAN_RegisterCallback+0xf4>
 80035f2:	a201      	add	r2, pc, #4	; (adr r2, 80035f8 <HAL_CAN_RegisterCallback+0x40>)
 80035f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f8:	08003635 	.word	0x08003635
 80035fc:	0800363d 	.word	0x0800363d
 8003600:	08003645 	.word	0x08003645
 8003604:	0800364d 	.word	0x0800364d
 8003608:	08003655 	.word	0x08003655
 800360c:	0800365d 	.word	0x0800365d
 8003610:	08003665 	.word	0x08003665
 8003614:	0800366d 	.word	0x0800366d
 8003618:	08003675 	.word	0x08003675
 800361c:	0800367d 	.word	0x0800367d
 8003620:	08003685 	.word	0x08003685
 8003624:	0800368d 	.word	0x0800368d
 8003628:	08003695 	.word	0x08003695
 800362c:	0800369d 	.word	0x0800369d
 8003630:	080036a5 	.word	0x080036a5
    {
      case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
        hcan->TxMailbox0CompleteCallback = pCallback;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 800363a:	e065      	b.n	8003708 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
        hcan->TxMailbox1CompleteCallback = pCallback;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8003642:	e061      	b.n	8003708 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
        hcan->TxMailbox2CompleteCallback = pCallback;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 800364a:	e05d      	b.n	8003708 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
        hcan->TxMailbox0AbortCallback = pCallback;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 8003652:	e059      	b.n	8003708 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
        hcan->TxMailbox1AbortCallback = pCallback;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 800365a:	e055      	b.n	8003708 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
        hcan->TxMailbox2AbortCallback = pCallback;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	63da      	str	r2, [r3, #60]	; 0x3c
        break;
 8003662:	e051      	b.n	8003708 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
        hcan->RxFifo0MsgPendingCallback = pCallback;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	641a      	str	r2, [r3, #64]	; 0x40
        break;
 800366a:	e04d      	b.n	8003708 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO0_FULL_CB_ID :
        hcan->RxFifo0FullCallback = pCallback;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8003672:	e049      	b.n	8003708 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
        hcan->RxFifo1MsgPendingCallback = pCallback;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800367a:	e045      	b.n	8003708 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO1_FULL_CB_ID :
        hcan->RxFifo1FullCallback = pCallback;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8003682:	e041      	b.n	8003708 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_SLEEP_CB_ID :
        hcan->SleepCallback = pCallback;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800368a:	e03d      	b.n	8003708 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
        hcan->WakeUpFromRxMsgCallback = pCallback;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8003692:	e039      	b.n	8003708 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_ERROR_CB_ID :
        hcan->ErrorCallback = pCallback;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800369a:	e035      	b.n	8003708 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPINIT_CB_ID :
        hcan->MspInitCallback = pCallback;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80036a2:	e031      	b.n	8003708 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPDEINIT_CB_ID :
        hcan->MspDeInitCallback = pCallback;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80036aa:	e02d      	b.n	8003708 <HAL_CAN_RegisterCallback+0x150>

      default :
        /* Update the error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Return error status */
        status =  HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	75fb      	strb	r3, [r7, #23]
        break;
 80036bc:	e024      	b.n	8003708 <HAL_CAN_RegisterCallback+0x150>
    }
  }
  else if (hcan->State == HAL_CAN_STATE_RESET)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d116      	bne.n	80036f8 <HAL_CAN_RegisterCallback+0x140>
  {
    switch (CallbackID)
 80036ca:	7afb      	ldrb	r3, [r7, #11]
 80036cc:	2b0d      	cmp	r3, #13
 80036ce:	d002      	beq.n	80036d6 <HAL_CAN_RegisterCallback+0x11e>
 80036d0:	2b0e      	cmp	r3, #14
 80036d2:	d004      	beq.n	80036de <HAL_CAN_RegisterCallback+0x126>
 80036d4:	e007      	b.n	80036e6 <HAL_CAN_RegisterCallback+0x12e>
    {
      case HAL_CAN_MSPINIT_CB_ID :
        hcan->MspInitCallback = pCallback;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80036dc:	e014      	b.n	8003708 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPDEINIT_CB_ID :
        hcan->MspDeInitCallback = pCallback;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80036e4:	e010      	b.n	8003708 <HAL_CAN_RegisterCallback+0x150>

      default :
        /* Update the error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Return error status */
        status =  HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	75fb      	strb	r3, [r7, #23]
        break;
 80036f6:	e007      	b.n	8003708 <HAL_CAN_RegisterCallback+0x150>
    }
  }
  else
  {
    /* Update the error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return error status */
    status =  HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003708:	7dfb      	ldrb	r3, [r7, #23]
}
 800370a:	4618      	mov	r0, r3
 800370c:	371c      	adds	r7, #28
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop

08003718 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800372e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003730:	7cfb      	ldrb	r3, [r7, #19]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d003      	beq.n	800373e <HAL_CAN_ConfigFilter+0x26>
 8003736:	7cfb      	ldrb	r3, [r7, #19]
 8003738:	2b02      	cmp	r3, #2
 800373a:	f040 80be 	bne.w	80038ba <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800373e:	4b65      	ldr	r3, [pc, #404]	; (80038d4 <HAL_CAN_ConfigFilter+0x1bc>)
 8003740:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003748:	f043 0201 	orr.w	r2, r3, #1
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003758:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	431a      	orrs	r2, r3
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f003 031f 	and.w	r3, r3, #31
 800377e:	2201      	movs	r2, #1
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	43db      	mvns	r3, r3
 8003790:	401a      	ands	r2, r3
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d123      	bne.n	80037e8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	43db      	mvns	r3, r3
 80037aa:	401a      	ands	r2, r3
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80037c2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	3248      	adds	r2, #72	; 0x48
 80037c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037dc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037de:	6979      	ldr	r1, [r7, #20]
 80037e0:	3348      	adds	r3, #72	; 0x48
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	440b      	add	r3, r1
 80037e6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d122      	bne.n	8003836 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	431a      	orrs	r2, r3
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003810:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	3248      	adds	r2, #72	; 0x48
 8003816:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800382a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800382c:	6979      	ldr	r1, [r7, #20]
 800382e:	3348      	adds	r3, #72	; 0x48
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	440b      	add	r3, r1
 8003834:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d109      	bne.n	8003852 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	43db      	mvns	r3, r3
 8003848:	401a      	ands	r2, r3
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003850:	e007      	b.n	8003862 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	431a      	orrs	r2, r3
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d109      	bne.n	800387e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	43db      	mvns	r3, r3
 8003874:	401a      	ands	r2, r3
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800387c:	e007      	b.n	800388e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	431a      	orrs	r2, r3
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d107      	bne.n	80038a6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	431a      	orrs	r2, r3
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80038ac:	f023 0201 	bic.w	r2, r3, #1
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80038b6:	2300      	movs	r3, #0
 80038b8:	e006      	b.n	80038c8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
  }
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	371c      	adds	r7, #28
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	40006400 	.word	0x40006400

080038d8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d12e      	bne.n	800394a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0201 	bic.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003904:	f7ff fce2 	bl	80032cc <HAL_GetTick>
 8003908:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800390a:	e012      	b.n	8003932 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800390c:	f7ff fcde 	bl	80032cc <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b0a      	cmp	r3, #10
 8003918:	d90b      	bls.n	8003932 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2205      	movs	r2, #5
 800392a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e012      	b.n	8003958 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1e5      	bne.n	800390c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	e006      	b.n	8003958 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
  }
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003960:	b480      	push	{r7}
 8003962:	b089      	sub	sp, #36	; 0x24
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
 800396c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003974:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800397e:	7ffb      	ldrb	r3, [r7, #31]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d003      	beq.n	800398c <HAL_CAN_AddTxMessage+0x2c>
 8003984:	7ffb      	ldrb	r3, [r7, #31]
 8003986:	2b02      	cmp	r3, #2
 8003988:	f040 80b8 	bne.w	8003afc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10a      	bne.n	80039ac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800399c:	2b00      	cmp	r3, #0
 800399e:	d105      	bne.n	80039ac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 80a0 	beq.w	8003aec <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	0e1b      	lsrs	r3, r3, #24
 80039b0:	f003 0303 	and.w	r3, r3, #3
 80039b4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d907      	bls.n	80039cc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e09e      	b.n	8003b0a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80039cc:	2201      	movs	r2, #1
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	409a      	lsls	r2, r3
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10d      	bne.n	80039fa <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80039e8:	68f9      	ldr	r1, [r7, #12]
 80039ea:	6809      	ldr	r1, [r1, #0]
 80039ec:	431a      	orrs	r2, r3
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	3318      	adds	r3, #24
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	440b      	add	r3, r1
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	e00f      	b.n	8003a1a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a04:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a0a:	68f9      	ldr	r1, [r7, #12]
 8003a0c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003a0e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	3318      	adds	r3, #24
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	440b      	add	r3, r1
 8003a18:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6819      	ldr	r1, [r3, #0]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	691a      	ldr	r2, [r3, #16]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	3318      	adds	r3, #24
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	440b      	add	r3, r1
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	7d1b      	ldrb	r3, [r3, #20]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d111      	bne.n	8003a5a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	3318      	adds	r3, #24
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	4413      	add	r3, r2
 8003a42:	3304      	adds	r3, #4
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	6811      	ldr	r1, [r2, #0]
 8003a4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	3318      	adds	r3, #24
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	440b      	add	r3, r1
 8003a56:	3304      	adds	r3, #4
 8003a58:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3307      	adds	r3, #7
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	061a      	lsls	r2, r3, #24
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	3306      	adds	r3, #6
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	041b      	lsls	r3, r3, #16
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3305      	adds	r3, #5
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	021b      	lsls	r3, r3, #8
 8003a74:	4313      	orrs	r3, r2
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	3204      	adds	r2, #4
 8003a7a:	7812      	ldrb	r2, [r2, #0]
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	6811      	ldr	r1, [r2, #0]
 8003a82:	ea43 0200 	orr.w	r2, r3, r0
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	440b      	add	r3, r1
 8003a8c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003a90:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3303      	adds	r3, #3
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	061a      	lsls	r2, r3, #24
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3302      	adds	r3, #2
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	041b      	lsls	r3, r3, #16
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	4313      	orrs	r3, r2
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	7812      	ldrb	r2, [r2, #0]
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	6811      	ldr	r1, [r2, #0]
 8003ab8:	ea43 0200 	orr.w	r2, r3, r0
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	440b      	add	r3, r1
 8003ac2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003ac6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	3318      	adds	r3, #24
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	4413      	add	r3, r2
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	6811      	ldr	r1, [r2, #0]
 8003ada:	f043 0201 	orr.w	r2, r3, #1
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	3318      	adds	r3, #24
 8003ae2:	011b      	lsls	r3, r3, #4
 8003ae4:	440b      	add	r3, r1
 8003ae6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	e00e      	b.n	8003b0a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e006      	b.n	8003b0a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
  }
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3724      	adds	r7, #36	; 0x24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003b16:	b480      	push	{r7}
 8003b18:	b087      	sub	sp, #28
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	60f8      	str	r0, [r7, #12]
 8003b1e:	60b9      	str	r1, [r7, #8]
 8003b20:	607a      	str	r2, [r7, #4]
 8003b22:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b2a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b2c:	7dfb      	ldrb	r3, [r7, #23]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d003      	beq.n	8003b3a <HAL_CAN_GetRxMessage+0x24>
 8003b32:	7dfb      	ldrb	r3, [r7, #23]
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	f040 80f3 	bne.w	8003d20 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10e      	bne.n	8003b5e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d116      	bne.n	8003b7c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e0e7      	b.n	8003d2e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	f003 0303 	and.w	r3, r3, #3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d107      	bne.n	8003b7c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e0d8      	b.n	8003d2e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	331b      	adds	r3, #27
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	4413      	add	r3, r2
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0204 	and.w	r2, r3, #4
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10c      	bne.n	8003bb4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	331b      	adds	r3, #27
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	4413      	add	r3, r2
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	0d5b      	lsrs	r3, r3, #21
 8003baa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	e00b      	b.n	8003bcc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	331b      	adds	r3, #27
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	4413      	add	r3, r2
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	08db      	lsrs	r3, r3, #3
 8003bc4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	331b      	adds	r3, #27
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	4413      	add	r3, r2
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0202 	and.w	r2, r3, #2
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	331b      	adds	r3, #27
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	4413      	add	r3, r2
 8003bee:	3304      	adds	r3, #4
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 020f 	and.w	r2, r3, #15
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	331b      	adds	r3, #27
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	4413      	add	r3, r2
 8003c06:	3304      	adds	r3, #4
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	0a1b      	lsrs	r3, r3, #8
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	331b      	adds	r3, #27
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	4413      	add	r3, r2
 8003c1e:	3304      	adds	r3, #4
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	0c1b      	lsrs	r3, r3, #16
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	0a1a      	lsrs	r2, r3, #8
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	3301      	adds	r3, #1
 8003c56:	b2d2      	uxtb	r2, r2
 8003c58:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	011b      	lsls	r3, r3, #4
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	0c1a      	lsrs	r2, r3, #16
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	3302      	adds	r3, #2
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	0e1a      	lsrs	r2, r3, #24
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	3303      	adds	r3, #3
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	4413      	add	r3, r2
 8003cb0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	0a1a      	lsrs	r2, r3, #8
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	3305      	adds	r3, #5
 8003cbc:	b2d2      	uxtb	r2, r2
 8003cbe:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	0c1a      	lsrs	r2, r3, #16
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	3306      	adds	r3, #6
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	0e1a      	lsrs	r2, r3, #24
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	3307      	adds	r3, #7
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d108      	bne.n	8003d0c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f042 0220 	orr.w	r2, r2, #32
 8003d08:	60da      	str	r2, [r3, #12]
 8003d0a:	e007      	b.n	8003d1c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691a      	ldr	r2, [r3, #16]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0220 	orr.w	r2, r2, #32
 8003d1a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	e006      	b.n	8003d2e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
  }
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	371c      	adds	r7, #28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b085      	sub	sp, #20
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d4a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d002      	beq.n	8003d58 <HAL_CAN_ActivateNotification+0x1e>
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d109      	bne.n	8003d6c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6959      	ldr	r1, [r3, #20]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	e006      	b.n	8003d7a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
  }
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b08a      	sub	sp, #40	; 0x28
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 8083 	beq.w	8003ed4 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d025      	beq.n	8003e24 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d004      	beq.n	8003df4 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	4798      	blx	r3
 8003df2:	e017      	b.n	8003e24 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d004      	beq.n	8003e08 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
 8003e06:	e00d      	b.n	8003e24 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d004      	beq.n	8003e1c <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e18:	627b      	str	r3, [r7, #36]	; 0x24
 8003e1a:	e003      	b.n	8003e24 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d026      	beq.n	8003e7c <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e36:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d004      	beq.n	8003e4c <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	4798      	blx	r3
 8003e4a:	e017      	b.n	8003e7c <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d004      	beq.n	8003e60 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5e:	e00d      	b.n	8003e7c <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d004      	beq.n	8003e74 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e70:	627b      	str	r3, [r7, #36]	; 0x24
 8003e72:	e003      	b.n	8003e7c <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d026      	beq.n	8003ed4 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e8e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d004      	beq.n	8003ea4 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	4798      	blx	r3
 8003ea2:	e017      	b.n	8003ed4 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d004      	beq.n	8003eb8 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb6:	e00d      	b.n	8003ed4 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d004      	beq.n	8003ecc <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eca:	e003      	b.n	8003ed4 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00c      	beq.n	8003ef8 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f003 0310 	and.w	r3, r3, #16
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d007      	beq.n	8003ef8 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2210      	movs	r2, #16
 8003ef6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00c      	beq.n	8003f1c <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d007      	beq.n	8003f1c <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2208      	movs	r2, #8
 8003f12:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f003 0303 	and.w	r3, r3, #3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d003      	beq.n	8003f3c <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00c      	beq.n	8003f60 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f003 0310 	and.w	r3, r3, #16
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d007      	beq.n	8003f60 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2210      	movs	r2, #16
 8003f5e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	f003 0320 	and.w	r3, r3, #32
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00c      	beq.n	8003f84 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d007      	beq.n	8003f84 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2208      	movs	r2, #8
 8003f7a:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00c      	beq.n	8003fc8 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	f003 0310 	and.w	r3, r3, #16
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d007      	beq.n	8003fc8 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2210      	movs	r2, #16
 8003fbe:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00c      	beq.n	8003fec <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d007      	beq.n	8003fec <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2208      	movs	r2, #8
 8003fe2:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d07b      	beq.n	80040ee <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d072      	beq.n	80040e6 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004006:	2b00      	cmp	r3, #0
 8004008:	d008      	beq.n	800401c <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	f043 0301 	orr.w	r3, r3, #1
 800401a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004022:	2b00      	cmp	r3, #0
 8004024:	d008      	beq.n	8004038 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	f043 0302 	orr.w	r3, r3, #2
 8004036:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800403e:	2b00      	cmp	r3, #0
 8004040:	d008      	beq.n	8004054 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	f043 0304 	orr.w	r3, r3, #4
 8004052:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800405a:	2b00      	cmp	r3, #0
 800405c:	d043      	beq.n	80040e6 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004064:	2b00      	cmp	r3, #0
 8004066:	d03e      	beq.n	80040e6 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800406e:	2b60      	cmp	r3, #96	; 0x60
 8004070:	d02b      	beq.n	80040ca <HAL_CAN_IRQHandler+0x344>
 8004072:	2b60      	cmp	r3, #96	; 0x60
 8004074:	d82e      	bhi.n	80040d4 <HAL_CAN_IRQHandler+0x34e>
 8004076:	2b50      	cmp	r3, #80	; 0x50
 8004078:	d022      	beq.n	80040c0 <HAL_CAN_IRQHandler+0x33a>
 800407a:	2b50      	cmp	r3, #80	; 0x50
 800407c:	d82a      	bhi.n	80040d4 <HAL_CAN_IRQHandler+0x34e>
 800407e:	2b40      	cmp	r3, #64	; 0x40
 8004080:	d019      	beq.n	80040b6 <HAL_CAN_IRQHandler+0x330>
 8004082:	2b40      	cmp	r3, #64	; 0x40
 8004084:	d826      	bhi.n	80040d4 <HAL_CAN_IRQHandler+0x34e>
 8004086:	2b30      	cmp	r3, #48	; 0x30
 8004088:	d010      	beq.n	80040ac <HAL_CAN_IRQHandler+0x326>
 800408a:	2b30      	cmp	r3, #48	; 0x30
 800408c:	d822      	bhi.n	80040d4 <HAL_CAN_IRQHandler+0x34e>
 800408e:	2b10      	cmp	r3, #16
 8004090:	d002      	beq.n	8004098 <HAL_CAN_IRQHandler+0x312>
 8004092:	2b20      	cmp	r3, #32
 8004094:	d005      	beq.n	80040a2 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004096:	e01d      	b.n	80040d4 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	f043 0308 	orr.w	r3, r3, #8
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040a0:	e019      	b.n	80040d6 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	f043 0310 	orr.w	r3, r3, #16
 80040a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040aa:	e014      	b.n	80040d6 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	f043 0320 	orr.w	r3, r3, #32
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040b4:	e00f      	b.n	80040d6 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040be:	e00a      	b.n	80040d6 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040c8:	e005      	b.n	80040d6 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040d2:	e000      	b.n	80040d6 <HAL_CAN_IRQHandler+0x350>
            break;
 80040d4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	699a      	ldr	r2, [r3, #24]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80040e4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2204      	movs	r2, #4
 80040ec:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d009      	beq.n	8004108 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004108:	bf00      	nop
 800410a:	3728      	adds	r7, #40	; 0x28
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004224:	4b0c      	ldr	r3, [pc, #48]	; (8004258 <__NVIC_SetPriorityGrouping+0x44>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004230:	4013      	ands	r3, r2
 8004232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800423c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004246:	4a04      	ldr	r2, [pc, #16]	; (8004258 <__NVIC_SetPriorityGrouping+0x44>)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	60d3      	str	r3, [r2, #12]
}
 800424c:	bf00      	nop
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	e000ed00 	.word	0xe000ed00

0800425c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004260:	4b04      	ldr	r3, [pc, #16]	; (8004274 <__NVIC_GetPriorityGrouping+0x18>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	0a1b      	lsrs	r3, r3, #8
 8004266:	f003 0307 	and.w	r3, r3, #7
}
 800426a:	4618      	mov	r0, r3
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	e000ed00 	.word	0xe000ed00

08004278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	4603      	mov	r3, r0
 8004280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004286:	2b00      	cmp	r3, #0
 8004288:	db0b      	blt.n	80042a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	f003 021f 	and.w	r2, r3, #31
 8004290:	4907      	ldr	r1, [pc, #28]	; (80042b0 <__NVIC_EnableIRQ+0x38>)
 8004292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	2001      	movs	r0, #1
 800429a:	fa00 f202 	lsl.w	r2, r0, r2
 800429e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	e000e100 	.word	0xe000e100

080042b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	4603      	mov	r3, r0
 80042bc:	6039      	str	r1, [r7, #0]
 80042be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	db0a      	blt.n	80042de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	490c      	ldr	r1, [pc, #48]	; (8004300 <__NVIC_SetPriority+0x4c>)
 80042ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d2:	0112      	lsls	r2, r2, #4
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	440b      	add	r3, r1
 80042d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042dc:	e00a      	b.n	80042f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	4908      	ldr	r1, [pc, #32]	; (8004304 <__NVIC_SetPriority+0x50>)
 80042e4:	79fb      	ldrb	r3, [r7, #7]
 80042e6:	f003 030f 	and.w	r3, r3, #15
 80042ea:	3b04      	subs	r3, #4
 80042ec:	0112      	lsls	r2, r2, #4
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	440b      	add	r3, r1
 80042f2:	761a      	strb	r2, [r3, #24]
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	e000e100 	.word	0xe000e100
 8004304:	e000ed00 	.word	0xe000ed00

08004308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004308:	b480      	push	{r7}
 800430a:	b089      	sub	sp, #36	; 0x24
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f1c3 0307 	rsb	r3, r3, #7
 8004322:	2b04      	cmp	r3, #4
 8004324:	bf28      	it	cs
 8004326:	2304      	movcs	r3, #4
 8004328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	3304      	adds	r3, #4
 800432e:	2b06      	cmp	r3, #6
 8004330:	d902      	bls.n	8004338 <NVIC_EncodePriority+0x30>
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	3b03      	subs	r3, #3
 8004336:	e000      	b.n	800433a <NVIC_EncodePriority+0x32>
 8004338:	2300      	movs	r3, #0
 800433a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800433c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	43da      	mvns	r2, r3
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	401a      	ands	r2, r3
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004350:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	fa01 f303 	lsl.w	r3, r1, r3
 800435a:	43d9      	mvns	r1, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004360:	4313      	orrs	r3, r2
         );
}
 8004362:	4618      	mov	r0, r3
 8004364:	3724      	adds	r7, #36	; 0x24
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
	...

08004370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3b01      	subs	r3, #1
 800437c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004380:	d301      	bcc.n	8004386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004382:	2301      	movs	r3, #1
 8004384:	e00f      	b.n	80043a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004386:	4a0a      	ldr	r2, [pc, #40]	; (80043b0 <SysTick_Config+0x40>)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3b01      	subs	r3, #1
 800438c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800438e:	210f      	movs	r1, #15
 8004390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004394:	f7ff ff8e 	bl	80042b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004398:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <SysTick_Config+0x40>)
 800439a:	2200      	movs	r2, #0
 800439c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800439e:	4b04      	ldr	r3, [pc, #16]	; (80043b0 <SysTick_Config+0x40>)
 80043a0:	2207      	movs	r2, #7
 80043a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	e000e010 	.word	0xe000e010

080043b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff ff29 	bl	8004214 <__NVIC_SetPriorityGrouping>
}
 80043c2:	bf00      	nop
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b086      	sub	sp, #24
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	4603      	mov	r3, r0
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	607a      	str	r2, [r7, #4]
 80043d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043d8:	2300      	movs	r3, #0
 80043da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043dc:	f7ff ff3e 	bl	800425c <__NVIC_GetPriorityGrouping>
 80043e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	68b9      	ldr	r1, [r7, #8]
 80043e6:	6978      	ldr	r0, [r7, #20]
 80043e8:	f7ff ff8e 	bl	8004308 <NVIC_EncodePriority>
 80043ec:	4602      	mov	r2, r0
 80043ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043f2:	4611      	mov	r1, r2
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff ff5d 	bl	80042b4 <__NVIC_SetPriority>
}
 80043fa:	bf00      	nop
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b082      	sub	sp, #8
 8004406:	af00      	add	r7, sp, #0
 8004408:	4603      	mov	r3, r0
 800440a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800440c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff ff31 	bl	8004278 <__NVIC_EnableIRQ>
}
 8004416:	bf00      	nop
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b082      	sub	sp, #8
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7ff ffa2 	bl	8004370 <SysTick_Config>
 800442c:	4603      	mov	r3, r0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004438:	b480      	push	{r7}
 800443a:	b089      	sub	sp, #36	; 0x24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004442:	2300      	movs	r3, #0
 8004444:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004446:	2300      	movs	r3, #0
 8004448:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800444a:	2300      	movs	r3, #0
 800444c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800444e:	2300      	movs	r3, #0
 8004450:	61fb      	str	r3, [r7, #28]
 8004452:	e14d      	b.n	80046f0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004454:	2201      	movs	r2, #1
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	fa02 f303 	lsl.w	r3, r2, r3
 800445c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	4013      	ands	r3, r2
 8004466:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	429a      	cmp	r2, r3
 800446e:	f040 813c 	bne.w	80046ea <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	2b01      	cmp	r3, #1
 800447c:	d005      	beq.n	800448a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004486:	2b02      	cmp	r3, #2
 8004488:	d130      	bne.n	80044ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	2203      	movs	r2, #3
 8004496:	fa02 f303 	lsl.w	r3, r2, r3
 800449a:	43db      	mvns	r3, r3
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	4013      	ands	r3, r2
 80044a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	fa02 f303 	lsl.w	r3, r2, r3
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044c0:	2201      	movs	r2, #1
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	43db      	mvns	r3, r3
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	4013      	ands	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	091b      	lsrs	r3, r3, #4
 80044d6:	f003 0201 	and.w	r2, r3, #1
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f003 0303 	and.w	r3, r3, #3
 80044f4:	2b03      	cmp	r3, #3
 80044f6:	d017      	beq.n	8004528 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	2203      	movs	r2, #3
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	43db      	mvns	r3, r3
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	4013      	ands	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	4313      	orrs	r3, r2
 8004520:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f003 0303 	and.w	r3, r3, #3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d123      	bne.n	800457c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	08da      	lsrs	r2, r3, #3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	3208      	adds	r2, #8
 800453c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004540:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	220f      	movs	r2, #15
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	43db      	mvns	r3, r3
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	4013      	ands	r3, r2
 8004556:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	f003 0307 	and.w	r3, r3, #7
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	fa02 f303 	lsl.w	r3, r2, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	4313      	orrs	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	08da      	lsrs	r2, r3, #3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	3208      	adds	r2, #8
 8004576:	69b9      	ldr	r1, [r7, #24]
 8004578:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	2203      	movs	r2, #3
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	43db      	mvns	r3, r3
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	4013      	ands	r3, r2
 8004592:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f003 0203 	and.w	r2, r3, #3
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 8096 	beq.w	80046ea <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045be:	2300      	movs	r3, #0
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	4b51      	ldr	r3, [pc, #324]	; (8004708 <HAL_GPIO_Init+0x2d0>)
 80045c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c6:	4a50      	ldr	r2, [pc, #320]	; (8004708 <HAL_GPIO_Init+0x2d0>)
 80045c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045cc:	6453      	str	r3, [r2, #68]	; 0x44
 80045ce:	4b4e      	ldr	r3, [pc, #312]	; (8004708 <HAL_GPIO_Init+0x2d0>)
 80045d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045da:	4a4c      	ldr	r2, [pc, #304]	; (800470c <HAL_GPIO_Init+0x2d4>)
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	089b      	lsrs	r3, r3, #2
 80045e0:	3302      	adds	r3, #2
 80045e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	f003 0303 	and.w	r3, r3, #3
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	220f      	movs	r2, #15
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	43db      	mvns	r3, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4013      	ands	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a43      	ldr	r2, [pc, #268]	; (8004710 <HAL_GPIO_Init+0x2d8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d00d      	beq.n	8004622 <HAL_GPIO_Init+0x1ea>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a42      	ldr	r2, [pc, #264]	; (8004714 <HAL_GPIO_Init+0x2dc>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d007      	beq.n	800461e <HAL_GPIO_Init+0x1e6>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a41      	ldr	r2, [pc, #260]	; (8004718 <HAL_GPIO_Init+0x2e0>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d101      	bne.n	800461a <HAL_GPIO_Init+0x1e2>
 8004616:	2302      	movs	r3, #2
 8004618:	e004      	b.n	8004624 <HAL_GPIO_Init+0x1ec>
 800461a:	2307      	movs	r3, #7
 800461c:	e002      	b.n	8004624 <HAL_GPIO_Init+0x1ec>
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <HAL_GPIO_Init+0x1ec>
 8004622:	2300      	movs	r3, #0
 8004624:	69fa      	ldr	r2, [r7, #28]
 8004626:	f002 0203 	and.w	r2, r2, #3
 800462a:	0092      	lsls	r2, r2, #2
 800462c:	4093      	lsls	r3, r2
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	4313      	orrs	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004634:	4935      	ldr	r1, [pc, #212]	; (800470c <HAL_GPIO_Init+0x2d4>)
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	089b      	lsrs	r3, r3, #2
 800463a:	3302      	adds	r3, #2
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004642:	4b36      	ldr	r3, [pc, #216]	; (800471c <HAL_GPIO_Init+0x2e4>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	43db      	mvns	r3, r3
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	4013      	ands	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	4313      	orrs	r3, r2
 8004664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004666:	4a2d      	ldr	r2, [pc, #180]	; (800471c <HAL_GPIO_Init+0x2e4>)
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800466c:	4b2b      	ldr	r3, [pc, #172]	; (800471c <HAL_GPIO_Init+0x2e4>)
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	43db      	mvns	r3, r3
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	4013      	ands	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	4313      	orrs	r3, r2
 800468e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004690:	4a22      	ldr	r2, [pc, #136]	; (800471c <HAL_GPIO_Init+0x2e4>)
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004696:	4b21      	ldr	r3, [pc, #132]	; (800471c <HAL_GPIO_Init+0x2e4>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	43db      	mvns	r3, r3
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	4013      	ands	r3, r2
 80046a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046ba:	4a18      	ldr	r2, [pc, #96]	; (800471c <HAL_GPIO_Init+0x2e4>)
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046c0:	4b16      	ldr	r3, [pc, #88]	; (800471c <HAL_GPIO_Init+0x2e4>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	43db      	mvns	r3, r3
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	4013      	ands	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d003      	beq.n	80046e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046e4:	4a0d      	ldr	r2, [pc, #52]	; (800471c <HAL_GPIO_Init+0x2e4>)
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	3301      	adds	r3, #1
 80046ee:	61fb      	str	r3, [r7, #28]
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	2b0f      	cmp	r3, #15
 80046f4:	f67f aeae 	bls.w	8004454 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046f8:	bf00      	nop
 80046fa:	bf00      	nop
 80046fc:	3724      	adds	r7, #36	; 0x24
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	40023800 	.word	0x40023800
 800470c:	40013800 	.word	0x40013800
 8004710:	40020000 	.word	0x40020000
 8004714:	40020400 	.word	0x40020400
 8004718:	40020800 	.word	0x40020800
 800471c:	40013c00 	.word	0x40013c00

08004720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	460b      	mov	r3, r1
 800472a:	807b      	strh	r3, [r7, #2]
 800472c:	4613      	mov	r3, r2
 800472e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004730:	787b      	ldrb	r3, [r7, #1]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004736:	887a      	ldrh	r2, [r7, #2]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800473c:	e003      	b.n	8004746 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800473e:	887b      	ldrh	r3, [r7, #2]
 8004740:	041a      	lsls	r2, r3, #16
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	619a      	str	r2, [r3, #24]
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
	...

08004754 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e12b      	b.n	80049be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d106      	bne.n	8004780 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fe fb1e 	bl	8002dbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2224      	movs	r2, #36	; 0x24
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0201 	bic.w	r2, r2, #1
 8004796:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047b8:	f001 fab0 	bl	8005d1c <HAL_RCC_GetPCLK1Freq>
 80047bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	4a81      	ldr	r2, [pc, #516]	; (80049c8 <HAL_I2C_Init+0x274>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d807      	bhi.n	80047d8 <HAL_I2C_Init+0x84>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4a80      	ldr	r2, [pc, #512]	; (80049cc <HAL_I2C_Init+0x278>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	bf94      	ite	ls
 80047d0:	2301      	movls	r3, #1
 80047d2:	2300      	movhi	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	e006      	b.n	80047e6 <HAL_I2C_Init+0x92>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4a7d      	ldr	r2, [pc, #500]	; (80049d0 <HAL_I2C_Init+0x27c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	bf94      	ite	ls
 80047e0:	2301      	movls	r3, #1
 80047e2:	2300      	movhi	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e0e7      	b.n	80049be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	4a78      	ldr	r2, [pc, #480]	; (80049d4 <HAL_I2C_Init+0x280>)
 80047f2:	fba2 2303 	umull	r2, r3, r2, r3
 80047f6:	0c9b      	lsrs	r3, r3, #18
 80047f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	430a      	orrs	r2, r1
 800480c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	4a6a      	ldr	r2, [pc, #424]	; (80049c8 <HAL_I2C_Init+0x274>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d802      	bhi.n	8004828 <HAL_I2C_Init+0xd4>
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	3301      	adds	r3, #1
 8004826:	e009      	b.n	800483c <HAL_I2C_Init+0xe8>
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800482e:	fb02 f303 	mul.w	r3, r2, r3
 8004832:	4a69      	ldr	r2, [pc, #420]	; (80049d8 <HAL_I2C_Init+0x284>)
 8004834:	fba2 2303 	umull	r2, r3, r2, r3
 8004838:	099b      	lsrs	r3, r3, #6
 800483a:	3301      	adds	r3, #1
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6812      	ldr	r2, [r2, #0]
 8004840:	430b      	orrs	r3, r1
 8004842:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800484e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	495c      	ldr	r1, [pc, #368]	; (80049c8 <HAL_I2C_Init+0x274>)
 8004858:	428b      	cmp	r3, r1
 800485a:	d819      	bhi.n	8004890 <HAL_I2C_Init+0x13c>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	1e59      	subs	r1, r3, #1
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	fbb1 f3f3 	udiv	r3, r1, r3
 800486a:	1c59      	adds	r1, r3, #1
 800486c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004870:	400b      	ands	r3, r1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <HAL_I2C_Init+0x138>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	1e59      	subs	r1, r3, #1
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	fbb1 f3f3 	udiv	r3, r1, r3
 8004884:	3301      	adds	r3, #1
 8004886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800488a:	e051      	b.n	8004930 <HAL_I2C_Init+0x1dc>
 800488c:	2304      	movs	r3, #4
 800488e:	e04f      	b.n	8004930 <HAL_I2C_Init+0x1dc>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d111      	bne.n	80048bc <HAL_I2C_Init+0x168>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	1e58      	subs	r0, r3, #1
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6859      	ldr	r1, [r3, #4]
 80048a0:	460b      	mov	r3, r1
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	440b      	add	r3, r1
 80048a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80048aa:	3301      	adds	r3, #1
 80048ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	bf0c      	ite	eq
 80048b4:	2301      	moveq	r3, #1
 80048b6:	2300      	movne	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	e012      	b.n	80048e2 <HAL_I2C_Init+0x18e>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	1e58      	subs	r0, r3, #1
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6859      	ldr	r1, [r3, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	0099      	lsls	r1, r3, #2
 80048cc:	440b      	add	r3, r1
 80048ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80048d2:	3301      	adds	r3, #1
 80048d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bf0c      	ite	eq
 80048dc:	2301      	moveq	r3, #1
 80048de:	2300      	movne	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <HAL_I2C_Init+0x196>
 80048e6:	2301      	movs	r3, #1
 80048e8:	e022      	b.n	8004930 <HAL_I2C_Init+0x1dc>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10e      	bne.n	8004910 <HAL_I2C_Init+0x1bc>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	1e58      	subs	r0, r3, #1
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6859      	ldr	r1, [r3, #4]
 80048fa:	460b      	mov	r3, r1
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	440b      	add	r3, r1
 8004900:	fbb0 f3f3 	udiv	r3, r0, r3
 8004904:	3301      	adds	r3, #1
 8004906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800490a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800490e:	e00f      	b.n	8004930 <HAL_I2C_Init+0x1dc>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	1e58      	subs	r0, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6859      	ldr	r1, [r3, #4]
 8004918:	460b      	mov	r3, r1
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	440b      	add	r3, r1
 800491e:	0099      	lsls	r1, r3, #2
 8004920:	440b      	add	r3, r1
 8004922:	fbb0 f3f3 	udiv	r3, r0, r3
 8004926:	3301      	adds	r3, #1
 8004928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800492c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004930:	6879      	ldr	r1, [r7, #4]
 8004932:	6809      	ldr	r1, [r1, #0]
 8004934:	4313      	orrs	r3, r2
 8004936:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69da      	ldr	r2, [r3, #28]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	431a      	orrs	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800495e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6911      	ldr	r1, [r2, #16]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	68d2      	ldr	r2, [r2, #12]
 800496a:	4311      	orrs	r1, r2
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6812      	ldr	r2, [r2, #0]
 8004970:	430b      	orrs	r3, r1
 8004972:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	695a      	ldr	r2, [r3, #20]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2220      	movs	r2, #32
 80049aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	000186a0 	.word	0x000186a0
 80049cc:	001e847f 	.word	0x001e847f
 80049d0:	003d08ff 	.word	0x003d08ff
 80049d4:	431bde83 	.word	0x431bde83
 80049d8:	10624dd3 	.word	0x10624dd3

080049dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b088      	sub	sp, #32
 80049e0:	af02      	add	r7, sp, #8
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	4608      	mov	r0, r1
 80049e6:	4611      	mov	r1, r2
 80049e8:	461a      	mov	r2, r3
 80049ea:	4603      	mov	r3, r0
 80049ec:	817b      	strh	r3, [r7, #10]
 80049ee:	460b      	mov	r3, r1
 80049f0:	813b      	strh	r3, [r7, #8]
 80049f2:	4613      	mov	r3, r2
 80049f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049f6:	f7fe fc69 	bl	80032cc <HAL_GetTick>
 80049fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b20      	cmp	r3, #32
 8004a06:	f040 80d9 	bne.w	8004bbc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	2319      	movs	r3, #25
 8004a10:	2201      	movs	r2, #1
 8004a12:	496d      	ldr	r1, [pc, #436]	; (8004bc8 <HAL_I2C_Mem_Write+0x1ec>)
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 fdad 	bl	8005574 <I2C_WaitOnFlagUntilTimeout>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004a20:	2302      	movs	r3, #2
 8004a22:	e0cc      	b.n	8004bbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d101      	bne.n	8004a32 <HAL_I2C_Mem_Write+0x56>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	e0c5      	b.n	8004bbe <HAL_I2C_Mem_Write+0x1e2>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d007      	beq.n	8004a58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0201 	orr.w	r2, r2, #1
 8004a56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2221      	movs	r2, #33	; 0x21
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2240      	movs	r2, #64	; 0x40
 8004a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6a3a      	ldr	r2, [r7, #32]
 8004a82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4a4d      	ldr	r2, [pc, #308]	; (8004bcc <HAL_I2C_Mem_Write+0x1f0>)
 8004a98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a9a:	88f8      	ldrh	r0, [r7, #6]
 8004a9c:	893a      	ldrh	r2, [r7, #8]
 8004a9e:	8979      	ldrh	r1, [r7, #10]
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	9301      	str	r3, [sp, #4]
 8004aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 fbe4 	bl	8005278 <I2C_RequestMemoryWrite>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d052      	beq.n	8004b5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e081      	b.n	8004bbe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 fe2e 	bl	8005720 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00d      	beq.n	8004ae6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	d107      	bne.n	8004ae2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ae0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e06b      	b.n	8004bbe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	781a      	ldrb	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b00:	3b01      	subs	r3, #1
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	2b04      	cmp	r3, #4
 8004b22:	d11b      	bne.n	8004b5c <HAL_I2C_Mem_Write+0x180>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d017      	beq.n	8004b5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	781a      	ldrb	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	1c5a      	adds	r2, r3, #1
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b46:	3b01      	subs	r3, #1
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1aa      	bne.n	8004aba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 fe1a 	bl	80057a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00d      	beq.n	8004b90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	d107      	bne.n	8004b8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e016      	b.n	8004bbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	e000      	b.n	8004bbe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004bbc:	2302      	movs	r3, #2
  }
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	00100002 	.word	0x00100002
 8004bcc:	ffff0000 	.word	0xffff0000

08004bd0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08c      	sub	sp, #48	; 0x30
 8004bd4:	af02      	add	r7, sp, #8
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	4608      	mov	r0, r1
 8004bda:	4611      	mov	r1, r2
 8004bdc:	461a      	mov	r2, r3
 8004bde:	4603      	mov	r3, r0
 8004be0:	817b      	strh	r3, [r7, #10]
 8004be2:	460b      	mov	r3, r1
 8004be4:	813b      	strh	r3, [r7, #8]
 8004be6:	4613      	mov	r3, r2
 8004be8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bea:	f7fe fb6f 	bl	80032cc <HAL_GetTick>
 8004bee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b20      	cmp	r3, #32
 8004bfa:	f040 8208 	bne.w	800500e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	2319      	movs	r3, #25
 8004c04:	2201      	movs	r2, #1
 8004c06:	497b      	ldr	r1, [pc, #492]	; (8004df4 <HAL_I2C_Mem_Read+0x224>)
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 fcb3 	bl	8005574 <I2C_WaitOnFlagUntilTimeout>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004c14:	2302      	movs	r3, #2
 8004c16:	e1fb      	b.n	8005010 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d101      	bne.n	8004c26 <HAL_I2C_Mem_Read+0x56>
 8004c22:	2302      	movs	r3, #2
 8004c24:	e1f4      	b.n	8005010 <HAL_I2C_Mem_Read+0x440>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d007      	beq.n	8004c4c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0201 	orr.w	r2, r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2222      	movs	r2, #34	; 0x22
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2240      	movs	r2, #64	; 0x40
 8004c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4a5b      	ldr	r2, [pc, #364]	; (8004df8 <HAL_I2C_Mem_Read+0x228>)
 8004c8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c8e:	88f8      	ldrh	r0, [r7, #6]
 8004c90:	893a      	ldrh	r2, [r7, #8]
 8004c92:	8979      	ldrh	r1, [r7, #10]
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	9301      	str	r3, [sp, #4]
 8004c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 fb80 	bl	80053a4 <I2C_RequestMemoryRead>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e1b0      	b.n	8005010 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d113      	bne.n	8004cde <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	623b      	str	r3, [r7, #32]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	623b      	str	r3, [r7, #32]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	623b      	str	r3, [r7, #32]
 8004cca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	e184      	b.n	8004fe8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d11b      	bne.n	8004d1e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cf4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61fb      	str	r3, [r7, #28]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	61fb      	str	r3, [r7, #28]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	61fb      	str	r3, [r7, #28]
 8004d0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	e164      	b.n	8004fe8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d11b      	bne.n	8004d5e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d34:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d46:	2300      	movs	r3, #0
 8004d48:	61bb      	str	r3, [r7, #24]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	61bb      	str	r3, [r7, #24]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	61bb      	str	r3, [r7, #24]
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	e144      	b.n	8004fe8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d5e:	2300      	movs	r3, #0
 8004d60:	617b      	str	r3, [r7, #20]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	617b      	str	r3, [r7, #20]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	617b      	str	r3, [r7, #20]
 8004d72:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004d74:	e138      	b.n	8004fe8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7a:	2b03      	cmp	r3, #3
 8004d7c:	f200 80f1 	bhi.w	8004f62 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d123      	bne.n	8004dd0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 fd49 	bl	8005824 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e139      	b.n	8005010 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dce:	e10b      	b.n	8004fe8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d14e      	bne.n	8004e76 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dde:	2200      	movs	r2, #0
 8004de0:	4906      	ldr	r1, [pc, #24]	; (8004dfc <HAL_I2C_Mem_Read+0x22c>)
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 fbc6 	bl	8005574 <I2C_WaitOnFlagUntilTimeout>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d008      	beq.n	8004e00 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e10e      	b.n	8005010 <HAL_I2C_Mem_Read+0x440>
 8004df2:	bf00      	nop
 8004df4:	00100002 	.word	0x00100002
 8004df8:	ffff0000 	.word	0xffff0000
 8004dfc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	691a      	ldr	r2, [r3, #16]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	691a      	ldr	r2, [r3, #16]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	b2d2      	uxtb	r2, r2
 8004e4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e74:	e0b8      	b.n	8004fe8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	4966      	ldr	r1, [pc, #408]	; (8005018 <HAL_I2C_Mem_Read+0x448>)
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 fb77 	bl	8005574 <I2C_WaitOnFlagUntilTimeout>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e0bf      	b.n	8005010 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	691a      	ldr	r2, [r3, #16]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	b2d2      	uxtb	r2, r2
 8004eac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	1c5a      	adds	r2, r3, #1
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed8:	2200      	movs	r2, #0
 8004eda:	494f      	ldr	r1, [pc, #316]	; (8005018 <HAL_I2C_Mem_Read+0x448>)
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f000 fb49 	bl	8005574 <I2C_WaitOnFlagUntilTimeout>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e091      	b.n	8005010 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004efa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	691a      	ldr	r2, [r3, #16]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	b2d2      	uxtb	r2, r2
 8004f08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	691a      	ldr	r2, [r3, #16]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f38:	b2d2      	uxtb	r2, r2
 8004f3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	1c5a      	adds	r2, r3, #1
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f60:	e042      	b.n	8004fe8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 fc5c 	bl	8005824 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e04c      	b.n	8005010 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	691a      	ldr	r2, [r3, #16]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	b2d2      	uxtb	r2, r2
 8004f82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d118      	bne.n	8004fe8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	691a      	ldr	r2, [r3, #16]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	b2d2      	uxtb	r2, r2
 8004fc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	1c5a      	adds	r2, r3, #1
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f47f aec2 	bne.w	8004d76 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800500a:	2300      	movs	r3, #0
 800500c:	e000      	b.n	8005010 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800500e:	2302      	movs	r3, #2
  }
}
 8005010:	4618      	mov	r0, r3
 8005012:	3728      	adds	r7, #40	; 0x28
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	00010004 	.word	0x00010004

0800501c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b08a      	sub	sp, #40	; 0x28
 8005020:	af02      	add	r7, sp, #8
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	607a      	str	r2, [r7, #4]
 8005026:	603b      	str	r3, [r7, #0]
 8005028:	460b      	mov	r3, r1
 800502a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800502c:	f7fe f94e 	bl	80032cc <HAL_GetTick>
 8005030:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005032:	2300      	movs	r3, #0
 8005034:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b20      	cmp	r3, #32
 8005040:	f040 8111 	bne.w	8005266 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	2319      	movs	r3, #25
 800504a:	2201      	movs	r2, #1
 800504c:	4988      	ldr	r1, [pc, #544]	; (8005270 <HAL_I2C_IsDeviceReady+0x254>)
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 fa90 	bl	8005574 <I2C_WaitOnFlagUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800505a:	2302      	movs	r3, #2
 800505c:	e104      	b.n	8005268 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005064:	2b01      	cmp	r3, #1
 8005066:	d101      	bne.n	800506c <HAL_I2C_IsDeviceReady+0x50>
 8005068:	2302      	movs	r3, #2
 800506a:	e0fd      	b.n	8005268 <HAL_I2C_IsDeviceReady+0x24c>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b01      	cmp	r3, #1
 8005080:	d007      	beq.n	8005092 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f042 0201 	orr.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2224      	movs	r2, #36	; 0x24
 80050a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4a70      	ldr	r2, [pc, #448]	; (8005274 <HAL_I2C_IsDeviceReady+0x258>)
 80050b4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050c4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 fa4e 	bl	8005574 <I2C_WaitOnFlagUntilTimeout>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00d      	beq.n	80050fa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ec:	d103      	bne.n	80050f6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050f4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e0b6      	b.n	8005268 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050fa:	897b      	ldrh	r3, [r7, #10]
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	461a      	mov	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005108:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800510a:	f7fe f8df 	bl	80032cc <HAL_GetTick>
 800510e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b02      	cmp	r3, #2
 800511c:	bf0c      	ite	eq
 800511e:	2301      	moveq	r3, #1
 8005120:	2300      	movne	r3, #0
 8005122:	b2db      	uxtb	r3, r3
 8005124:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005134:	bf0c      	ite	eq
 8005136:	2301      	moveq	r3, #1
 8005138:	2300      	movne	r3, #0
 800513a:	b2db      	uxtb	r3, r3
 800513c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800513e:	e025      	b.n	800518c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005140:	f7fe f8c4 	bl	80032cc <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d302      	bcc.n	8005156 <HAL_I2C_IsDeviceReady+0x13a>
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d103      	bne.n	800515e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	22a0      	movs	r2, #160	; 0xa0
 800515a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b02      	cmp	r3, #2
 800516a:	bf0c      	ite	eq
 800516c:	2301      	moveq	r3, #1
 800516e:	2300      	movne	r3, #0
 8005170:	b2db      	uxtb	r3, r3
 8005172:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800517e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005182:	bf0c      	ite	eq
 8005184:	2301      	moveq	r3, #1
 8005186:	2300      	movne	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2ba0      	cmp	r3, #160	; 0xa0
 8005196:	d005      	beq.n	80051a4 <HAL_I2C_IsDeviceReady+0x188>
 8005198:	7dfb      	ldrb	r3, [r7, #23]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d102      	bne.n	80051a4 <HAL_I2C_IsDeviceReady+0x188>
 800519e:	7dbb      	ldrb	r3, [r7, #22]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d0cd      	beq.n	8005140 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d129      	bne.n	800520e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051c8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ca:	2300      	movs	r3, #0
 80051cc:	613b      	str	r3, [r7, #16]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	613b      	str	r3, [r7, #16]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	613b      	str	r3, [r7, #16]
 80051de:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	2319      	movs	r3, #25
 80051e6:	2201      	movs	r2, #1
 80051e8:	4921      	ldr	r1, [pc, #132]	; (8005270 <HAL_I2C_IsDeviceReady+0x254>)
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 f9c2 	bl	8005574 <I2C_WaitOnFlagUntilTimeout>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e036      	b.n	8005268 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2220      	movs	r2, #32
 80051fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	e02c      	b.n	8005268 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800521c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005226:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	2319      	movs	r3, #25
 800522e:	2201      	movs	r2, #1
 8005230:	490f      	ldr	r1, [pc, #60]	; (8005270 <HAL_I2C_IsDeviceReady+0x254>)
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f000 f99e 	bl	8005574 <I2C_WaitOnFlagUntilTimeout>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e012      	b.n	8005268 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	3301      	adds	r3, #1
 8005246:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	429a      	cmp	r2, r3
 800524e:	f4ff af32 	bcc.w	80050b6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2220      	movs	r2, #32
 8005256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e000      	b.n	8005268 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005266:	2302      	movs	r3, #2
  }
}
 8005268:	4618      	mov	r0, r3
 800526a:	3720      	adds	r7, #32
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	00100002 	.word	0x00100002
 8005274:	ffff0000 	.word	0xffff0000

08005278 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af02      	add	r7, sp, #8
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	4608      	mov	r0, r1
 8005282:	4611      	mov	r1, r2
 8005284:	461a      	mov	r2, r3
 8005286:	4603      	mov	r3, r0
 8005288:	817b      	strh	r3, [r7, #10]
 800528a:	460b      	mov	r3, r1
 800528c:	813b      	strh	r3, [r7, #8]
 800528e:	4613      	mov	r3, r2
 8005290:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 f960 	bl	8005574 <I2C_WaitOnFlagUntilTimeout>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00d      	beq.n	80052d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c8:	d103      	bne.n	80052d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e05f      	b.n	8005396 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052d6:	897b      	ldrh	r3, [r7, #10]
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	461a      	mov	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	6a3a      	ldr	r2, [r7, #32]
 80052ea:	492d      	ldr	r1, [pc, #180]	; (80053a0 <I2C_RequestMemoryWrite+0x128>)
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 f998 	bl	8005622 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e04c      	b.n	8005396 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052fc:	2300      	movs	r3, #0
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005314:	6a39      	ldr	r1, [r7, #32]
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 fa02 	bl	8005720 <I2C_WaitOnTXEFlagUntilTimeout>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00d      	beq.n	800533e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	2b04      	cmp	r3, #4
 8005328:	d107      	bne.n	800533a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005338:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e02b      	b.n	8005396 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800533e:	88fb      	ldrh	r3, [r7, #6]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d105      	bne.n	8005350 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005344:	893b      	ldrh	r3, [r7, #8]
 8005346:	b2da      	uxtb	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	611a      	str	r2, [r3, #16]
 800534e:	e021      	b.n	8005394 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005350:	893b      	ldrh	r3, [r7, #8]
 8005352:	0a1b      	lsrs	r3, r3, #8
 8005354:	b29b      	uxth	r3, r3
 8005356:	b2da      	uxtb	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800535e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005360:	6a39      	ldr	r1, [r7, #32]
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 f9dc 	bl	8005720 <I2C_WaitOnTXEFlagUntilTimeout>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00d      	beq.n	800538a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	2b04      	cmp	r3, #4
 8005374:	d107      	bne.n	8005386 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005384:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e005      	b.n	8005396 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800538a:	893b      	ldrh	r3, [r7, #8]
 800538c:	b2da      	uxtb	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	00010002 	.word	0x00010002

080053a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af02      	add	r7, sp, #8
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	4608      	mov	r0, r1
 80053ae:	4611      	mov	r1, r2
 80053b0:	461a      	mov	r2, r3
 80053b2:	4603      	mov	r3, r0
 80053b4:	817b      	strh	r3, [r7, #10]
 80053b6:	460b      	mov	r3, r1
 80053b8:	813b      	strh	r3, [r7, #8]
 80053ba:	4613      	mov	r3, r2
 80053bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f000 f8c2 	bl	8005574 <I2C_WaitOnFlagUntilTimeout>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00d      	beq.n	8005412 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005400:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005404:	d103      	bne.n	800540e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f44f 7200 	mov.w	r2, #512	; 0x200
 800540c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e0aa      	b.n	8005568 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005412:	897b      	ldrh	r3, [r7, #10]
 8005414:	b2db      	uxtb	r3, r3
 8005416:	461a      	mov	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005420:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005424:	6a3a      	ldr	r2, [r7, #32]
 8005426:	4952      	ldr	r1, [pc, #328]	; (8005570 <I2C_RequestMemoryRead+0x1cc>)
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 f8fa 	bl	8005622 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e097      	b.n	8005568 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005438:	2300      	movs	r3, #0
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	617b      	str	r3, [r7, #20]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	617b      	str	r3, [r7, #20]
 800544c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800544e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005450:	6a39      	ldr	r1, [r7, #32]
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 f964 	bl	8005720 <I2C_WaitOnTXEFlagUntilTimeout>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00d      	beq.n	800547a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	2b04      	cmp	r3, #4
 8005464:	d107      	bne.n	8005476 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005474:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e076      	b.n	8005568 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800547a:	88fb      	ldrh	r3, [r7, #6]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d105      	bne.n	800548c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005480:	893b      	ldrh	r3, [r7, #8]
 8005482:	b2da      	uxtb	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	611a      	str	r2, [r3, #16]
 800548a:	e021      	b.n	80054d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800548c:	893b      	ldrh	r3, [r7, #8]
 800548e:	0a1b      	lsrs	r3, r3, #8
 8005490:	b29b      	uxth	r3, r3
 8005492:	b2da      	uxtb	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800549a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800549c:	6a39      	ldr	r1, [r7, #32]
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f000 f93e 	bl	8005720 <I2C_WaitOnTXEFlagUntilTimeout>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00d      	beq.n	80054c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	d107      	bne.n	80054c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e050      	b.n	8005568 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054c6:	893b      	ldrh	r3, [r7, #8]
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d2:	6a39      	ldr	r1, [r7, #32]
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 f923 	bl	8005720 <I2C_WaitOnTXEFlagUntilTimeout>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00d      	beq.n	80054fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e4:	2b04      	cmp	r3, #4
 80054e6:	d107      	bne.n	80054f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e035      	b.n	8005568 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800550a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	2200      	movs	r2, #0
 8005514:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 f82b 	bl	8005574 <I2C_WaitOnFlagUntilTimeout>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00d      	beq.n	8005540 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005532:	d103      	bne.n	800553c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800553a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e013      	b.n	8005568 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005540:	897b      	ldrh	r3, [r7, #10]
 8005542:	b2db      	uxtb	r3, r3
 8005544:	f043 0301 	orr.w	r3, r3, #1
 8005548:	b2da      	uxtb	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	6a3a      	ldr	r2, [r7, #32]
 8005554:	4906      	ldr	r1, [pc, #24]	; (8005570 <I2C_RequestMemoryRead+0x1cc>)
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f000 f863 	bl	8005622 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e000      	b.n	8005568 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3718      	adds	r7, #24
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	00010002 	.word	0x00010002

08005574 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	603b      	str	r3, [r7, #0]
 8005580:	4613      	mov	r3, r2
 8005582:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005584:	e025      	b.n	80055d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800558c:	d021      	beq.n	80055d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800558e:	f7fd fe9d 	bl	80032cc <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	429a      	cmp	r2, r3
 800559c:	d302      	bcc.n	80055a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d116      	bne.n	80055d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	f043 0220 	orr.w	r2, r3, #32
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e023      	b.n	800561a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	0c1b      	lsrs	r3, r3, #16
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d10d      	bne.n	80055f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	43da      	mvns	r2, r3
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	4013      	ands	r3, r2
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	bf0c      	ite	eq
 80055ee:	2301      	moveq	r3, #1
 80055f0:	2300      	movne	r3, #0
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	461a      	mov	r2, r3
 80055f6:	e00c      	b.n	8005612 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	43da      	mvns	r2, r3
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4013      	ands	r3, r2
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	bf0c      	ite	eq
 800560a:	2301      	moveq	r3, #1
 800560c:	2300      	movne	r3, #0
 800560e:	b2db      	uxtb	r3, r3
 8005610:	461a      	mov	r2, r3
 8005612:	79fb      	ldrb	r3, [r7, #7]
 8005614:	429a      	cmp	r2, r3
 8005616:	d0b6      	beq.n	8005586 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b084      	sub	sp, #16
 8005626:	af00      	add	r7, sp, #0
 8005628:	60f8      	str	r0, [r7, #12]
 800562a:	60b9      	str	r1, [r7, #8]
 800562c:	607a      	str	r2, [r7, #4]
 800562e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005630:	e051      	b.n	80056d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800563c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005640:	d123      	bne.n	800568a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005650:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800565a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2220      	movs	r2, #32
 8005666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	f043 0204 	orr.w	r2, r3, #4
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e046      	b.n	8005718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005690:	d021      	beq.n	80056d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005692:	f7fd fe1b 	bl	80032cc <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d302      	bcc.n	80056a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d116      	bne.n	80056d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2220      	movs	r2, #32
 80056b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c2:	f043 0220 	orr.w	r2, r3, #32
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e020      	b.n	8005718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	0c1b      	lsrs	r3, r3, #16
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d10c      	bne.n	80056fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	43da      	mvns	r2, r3
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	4013      	ands	r3, r2
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	bf14      	ite	ne
 80056f2:	2301      	movne	r3, #1
 80056f4:	2300      	moveq	r3, #0
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	e00b      	b.n	8005712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	43da      	mvns	r2, r3
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	4013      	ands	r3, r2
 8005706:	b29b      	uxth	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	bf14      	ite	ne
 800570c:	2301      	movne	r3, #1
 800570e:	2300      	moveq	r3, #0
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d18d      	bne.n	8005632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800572c:	e02d      	b.n	800578a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 f8ce 	bl	80058d0 <I2C_IsAcknowledgeFailed>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d001      	beq.n	800573e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e02d      	b.n	800579a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005744:	d021      	beq.n	800578a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005746:	f7fd fdc1 	bl	80032cc <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	429a      	cmp	r2, r3
 8005754:	d302      	bcc.n	800575c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d116      	bne.n	800578a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2220      	movs	r2, #32
 8005766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005776:	f043 0220 	orr.w	r2, r3, #32
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e007      	b.n	800579a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005794:	2b80      	cmp	r3, #128	; 0x80
 8005796:	d1ca      	bne.n	800572e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b084      	sub	sp, #16
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057ae:	e02d      	b.n	800580c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f000 f88d 	bl	80058d0 <I2C_IsAcknowledgeFailed>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d001      	beq.n	80057c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e02d      	b.n	800581c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057c6:	d021      	beq.n	800580c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c8:	f7fd fd80 	bl	80032cc <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d302      	bcc.n	80057de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d116      	bne.n	800580c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2220      	movs	r2, #32
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f8:	f043 0220 	orr.w	r2, r3, #32
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e007      	b.n	800581c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	f003 0304 	and.w	r3, r3, #4
 8005816:	2b04      	cmp	r3, #4
 8005818:	d1ca      	bne.n	80057b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005830:	e042      	b.n	80058b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	f003 0310 	and.w	r3, r3, #16
 800583c:	2b10      	cmp	r3, #16
 800583e:	d119      	bne.n	8005874 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f06f 0210 	mvn.w	r2, #16
 8005848:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e029      	b.n	80058c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005874:	f7fd fd2a 	bl	80032cc <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	429a      	cmp	r2, r3
 8005882:	d302      	bcc.n	800588a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d116      	bne.n	80058b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2220      	movs	r2, #32
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a4:	f043 0220 	orr.w	r2, r3, #32
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e007      	b.n	80058c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c2:	2b40      	cmp	r3, #64	; 0x40
 80058c4:	d1b5      	bne.n	8005832 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058e6:	d11b      	bne.n	8005920 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590c:	f043 0204 	orr.w	r2, r3, #4
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e000      	b.n	8005922 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
	...

08005930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d101      	bne.n	8005944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e0cc      	b.n	8005ade <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005944:	4b68      	ldr	r3, [pc, #416]	; (8005ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0307 	and.w	r3, r3, #7
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	429a      	cmp	r2, r3
 8005950:	d90c      	bls.n	800596c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005952:	4b65      	ldr	r3, [pc, #404]	; (8005ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8005954:	683a      	ldr	r2, [r7, #0]
 8005956:	b2d2      	uxtb	r2, r2
 8005958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800595a:	4b63      	ldr	r3, [pc, #396]	; (8005ae8 <HAL_RCC_ClockConfig+0x1b8>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0307 	and.w	r3, r3, #7
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	429a      	cmp	r2, r3
 8005966:	d001      	beq.n	800596c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e0b8      	b.n	8005ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0302 	and.w	r3, r3, #2
 8005974:	2b00      	cmp	r3, #0
 8005976:	d020      	beq.n	80059ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0304 	and.w	r3, r3, #4
 8005980:	2b00      	cmp	r3, #0
 8005982:	d005      	beq.n	8005990 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005984:	4b59      	ldr	r3, [pc, #356]	; (8005aec <HAL_RCC_ClockConfig+0x1bc>)
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	4a58      	ldr	r2, [pc, #352]	; (8005aec <HAL_RCC_ClockConfig+0x1bc>)
 800598a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800598e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0308 	and.w	r3, r3, #8
 8005998:	2b00      	cmp	r3, #0
 800599a:	d005      	beq.n	80059a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800599c:	4b53      	ldr	r3, [pc, #332]	; (8005aec <HAL_RCC_ClockConfig+0x1bc>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	4a52      	ldr	r2, [pc, #328]	; (8005aec <HAL_RCC_ClockConfig+0x1bc>)
 80059a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059a8:	4b50      	ldr	r3, [pc, #320]	; (8005aec <HAL_RCC_ClockConfig+0x1bc>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	494d      	ldr	r1, [pc, #308]	; (8005aec <HAL_RCC_ClockConfig+0x1bc>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d044      	beq.n	8005a50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d107      	bne.n	80059de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ce:	4b47      	ldr	r3, [pc, #284]	; (8005aec <HAL_RCC_ClockConfig+0x1bc>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d119      	bne.n	8005a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e07f      	b.n	8005ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d003      	beq.n	80059ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	d107      	bne.n	80059fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ee:	4b3f      	ldr	r3, [pc, #252]	; (8005aec <HAL_RCC_ClockConfig+0x1bc>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d109      	bne.n	8005a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e06f      	b.n	8005ade <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059fe:	4b3b      	ldr	r3, [pc, #236]	; (8005aec <HAL_RCC_ClockConfig+0x1bc>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e067      	b.n	8005ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a0e:	4b37      	ldr	r3, [pc, #220]	; (8005aec <HAL_RCC_ClockConfig+0x1bc>)
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f023 0203 	bic.w	r2, r3, #3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	4934      	ldr	r1, [pc, #208]	; (8005aec <HAL_RCC_ClockConfig+0x1bc>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a20:	f7fd fc54 	bl	80032cc <HAL_GetTick>
 8005a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a26:	e00a      	b.n	8005a3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a28:	f7fd fc50 	bl	80032cc <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e04f      	b.n	8005ade <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a3e:	4b2b      	ldr	r3, [pc, #172]	; (8005aec <HAL_RCC_ClockConfig+0x1bc>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f003 020c 	and.w	r2, r3, #12
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d1eb      	bne.n	8005a28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a50:	4b25      	ldr	r3, [pc, #148]	; (8005ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0307 	and.w	r3, r3, #7
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d20c      	bcs.n	8005a78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a5e:	4b22      	ldr	r3, [pc, #136]	; (8005ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	b2d2      	uxtb	r2, r2
 8005a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a66:	4b20      	ldr	r3, [pc, #128]	; (8005ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0307 	and.w	r3, r3, #7
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d001      	beq.n	8005a78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e032      	b.n	8005ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d008      	beq.n	8005a96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a84:	4b19      	ldr	r3, [pc, #100]	; (8005aec <HAL_RCC_ClockConfig+0x1bc>)
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	4916      	ldr	r1, [pc, #88]	; (8005aec <HAL_RCC_ClockConfig+0x1bc>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0308 	and.w	r3, r3, #8
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d009      	beq.n	8005ab6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005aa2:	4b12      	ldr	r3, [pc, #72]	; (8005aec <HAL_RCC_ClockConfig+0x1bc>)
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	00db      	lsls	r3, r3, #3
 8005ab0:	490e      	ldr	r1, [pc, #56]	; (8005aec <HAL_RCC_ClockConfig+0x1bc>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ab6:	f000 f821 	bl	8005afc <HAL_RCC_GetSysClockFreq>
 8005aba:	4602      	mov	r2, r0
 8005abc:	4b0b      	ldr	r3, [pc, #44]	; (8005aec <HAL_RCC_ClockConfig+0x1bc>)
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	091b      	lsrs	r3, r3, #4
 8005ac2:	f003 030f 	and.w	r3, r3, #15
 8005ac6:	490a      	ldr	r1, [pc, #40]	; (8005af0 <HAL_RCC_ClockConfig+0x1c0>)
 8005ac8:	5ccb      	ldrb	r3, [r1, r3]
 8005aca:	fa22 f303 	lsr.w	r3, r2, r3
 8005ace:	4a09      	ldr	r2, [pc, #36]	; (8005af4 <HAL_RCC_ClockConfig+0x1c4>)
 8005ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ad2:	4b09      	ldr	r3, [pc, #36]	; (8005af8 <HAL_RCC_ClockConfig+0x1c8>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fd fbb4 	bl	8003244 <HAL_InitTick>

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	40023c00 	.word	0x40023c00
 8005aec:	40023800 	.word	0x40023800
 8005af0:	0800afb8 	.word	0x0800afb8
 8005af4:	20000008 	.word	0x20000008
 8005af8:	2000000c 	.word	0x2000000c

08005afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b00:	b094      	sub	sp, #80	; 0x50
 8005b02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b04:	2300      	movs	r3, #0
 8005b06:	647b      	str	r3, [r7, #68]	; 0x44
 8005b08:	2300      	movs	r3, #0
 8005b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005b10:	2300      	movs	r3, #0
 8005b12:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b14:	4b79      	ldr	r3, [pc, #484]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f003 030c 	and.w	r3, r3, #12
 8005b1c:	2b08      	cmp	r3, #8
 8005b1e:	d00d      	beq.n	8005b3c <HAL_RCC_GetSysClockFreq+0x40>
 8005b20:	2b08      	cmp	r3, #8
 8005b22:	f200 80e1 	bhi.w	8005ce8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d002      	beq.n	8005b30 <HAL_RCC_GetSysClockFreq+0x34>
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	d003      	beq.n	8005b36 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b2e:	e0db      	b.n	8005ce8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b30:	4b73      	ldr	r3, [pc, #460]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b32:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005b34:	e0db      	b.n	8005cee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b36:	4b72      	ldr	r3, [pc, #456]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b3a:	e0d8      	b.n	8005cee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b3c:	4b6f      	ldr	r3, [pc, #444]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b44:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b46:	4b6d      	ldr	r3, [pc, #436]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d063      	beq.n	8005c1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b52:	4b6a      	ldr	r3, [pc, #424]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	099b      	lsrs	r3, r3, #6
 8005b58:	2200      	movs	r2, #0
 8005b5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b64:	633b      	str	r3, [r7, #48]	; 0x30
 8005b66:	2300      	movs	r3, #0
 8005b68:	637b      	str	r3, [r7, #52]	; 0x34
 8005b6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005b6e:	4622      	mov	r2, r4
 8005b70:	462b      	mov	r3, r5
 8005b72:	f04f 0000 	mov.w	r0, #0
 8005b76:	f04f 0100 	mov.w	r1, #0
 8005b7a:	0159      	lsls	r1, r3, #5
 8005b7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b80:	0150      	lsls	r0, r2, #5
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	4621      	mov	r1, r4
 8005b88:	1a51      	subs	r1, r2, r1
 8005b8a:	6139      	str	r1, [r7, #16]
 8005b8c:	4629      	mov	r1, r5
 8005b8e:	eb63 0301 	sbc.w	r3, r3, r1
 8005b92:	617b      	str	r3, [r7, #20]
 8005b94:	f04f 0200 	mov.w	r2, #0
 8005b98:	f04f 0300 	mov.w	r3, #0
 8005b9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ba0:	4659      	mov	r1, fp
 8005ba2:	018b      	lsls	r3, r1, #6
 8005ba4:	4651      	mov	r1, sl
 8005ba6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005baa:	4651      	mov	r1, sl
 8005bac:	018a      	lsls	r2, r1, #6
 8005bae:	4651      	mov	r1, sl
 8005bb0:	ebb2 0801 	subs.w	r8, r2, r1
 8005bb4:	4659      	mov	r1, fp
 8005bb6:	eb63 0901 	sbc.w	r9, r3, r1
 8005bba:	f04f 0200 	mov.w	r2, #0
 8005bbe:	f04f 0300 	mov.w	r3, #0
 8005bc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bce:	4690      	mov	r8, r2
 8005bd0:	4699      	mov	r9, r3
 8005bd2:	4623      	mov	r3, r4
 8005bd4:	eb18 0303 	adds.w	r3, r8, r3
 8005bd8:	60bb      	str	r3, [r7, #8]
 8005bda:	462b      	mov	r3, r5
 8005bdc:	eb49 0303 	adc.w	r3, r9, r3
 8005be0:	60fb      	str	r3, [r7, #12]
 8005be2:	f04f 0200 	mov.w	r2, #0
 8005be6:	f04f 0300 	mov.w	r3, #0
 8005bea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005bee:	4629      	mov	r1, r5
 8005bf0:	028b      	lsls	r3, r1, #10
 8005bf2:	4621      	mov	r1, r4
 8005bf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bf8:	4621      	mov	r1, r4
 8005bfa:	028a      	lsls	r2, r1, #10
 8005bfc:	4610      	mov	r0, r2
 8005bfe:	4619      	mov	r1, r3
 8005c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c02:	2200      	movs	r2, #0
 8005c04:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c0c:	f7fb f83c 	bl	8000c88 <__aeabi_uldivmod>
 8005c10:	4602      	mov	r2, r0
 8005c12:	460b      	mov	r3, r1
 8005c14:	4613      	mov	r3, r2
 8005c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c18:	e058      	b.n	8005ccc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c1a:	4b38      	ldr	r3, [pc, #224]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	099b      	lsrs	r3, r3, #6
 8005c20:	2200      	movs	r2, #0
 8005c22:	4618      	mov	r0, r3
 8005c24:	4611      	mov	r1, r2
 8005c26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c2a:	623b      	str	r3, [r7, #32]
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c34:	4642      	mov	r2, r8
 8005c36:	464b      	mov	r3, r9
 8005c38:	f04f 0000 	mov.w	r0, #0
 8005c3c:	f04f 0100 	mov.w	r1, #0
 8005c40:	0159      	lsls	r1, r3, #5
 8005c42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c46:	0150      	lsls	r0, r2, #5
 8005c48:	4602      	mov	r2, r0
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	4641      	mov	r1, r8
 8005c4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c52:	4649      	mov	r1, r9
 8005c54:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c58:	f04f 0200 	mov.w	r2, #0
 8005c5c:	f04f 0300 	mov.w	r3, #0
 8005c60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c6c:	ebb2 040a 	subs.w	r4, r2, sl
 8005c70:	eb63 050b 	sbc.w	r5, r3, fp
 8005c74:	f04f 0200 	mov.w	r2, #0
 8005c78:	f04f 0300 	mov.w	r3, #0
 8005c7c:	00eb      	lsls	r3, r5, #3
 8005c7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c82:	00e2      	lsls	r2, r4, #3
 8005c84:	4614      	mov	r4, r2
 8005c86:	461d      	mov	r5, r3
 8005c88:	4643      	mov	r3, r8
 8005c8a:	18e3      	adds	r3, r4, r3
 8005c8c:	603b      	str	r3, [r7, #0]
 8005c8e:	464b      	mov	r3, r9
 8005c90:	eb45 0303 	adc.w	r3, r5, r3
 8005c94:	607b      	str	r3, [r7, #4]
 8005c96:	f04f 0200 	mov.w	r2, #0
 8005c9a:	f04f 0300 	mov.w	r3, #0
 8005c9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ca2:	4629      	mov	r1, r5
 8005ca4:	028b      	lsls	r3, r1, #10
 8005ca6:	4621      	mov	r1, r4
 8005ca8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005cac:	4621      	mov	r1, r4
 8005cae:	028a      	lsls	r2, r1, #10
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	61bb      	str	r3, [r7, #24]
 8005cba:	61fa      	str	r2, [r7, #28]
 8005cbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cc0:	f7fa ffe2 	bl	8000c88 <__aeabi_uldivmod>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	4613      	mov	r3, r2
 8005cca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ccc:	4b0b      	ldr	r3, [pc, #44]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	0c1b      	lsrs	r3, r3, #16
 8005cd2:	f003 0303 	and.w	r3, r3, #3
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005cdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ce6:	e002      	b.n	8005cee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ce8:	4b05      	ldr	r3, [pc, #20]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x204>)
 8005cea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005cec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3750      	adds	r7, #80	; 0x50
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cfa:	bf00      	nop
 8005cfc:	40023800 	.word	0x40023800
 8005d00:	00f42400 	.word	0x00f42400

08005d04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d04:	b480      	push	{r7}
 8005d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d08:	4b03      	ldr	r3, [pc, #12]	; (8005d18 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	20000008 	.word	0x20000008

08005d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d20:	f7ff fff0 	bl	8005d04 <HAL_RCC_GetHCLKFreq>
 8005d24:	4602      	mov	r2, r0
 8005d26:	4b05      	ldr	r3, [pc, #20]	; (8005d3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	0a9b      	lsrs	r3, r3, #10
 8005d2c:	f003 0307 	and.w	r3, r3, #7
 8005d30:	4903      	ldr	r1, [pc, #12]	; (8005d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d32:	5ccb      	ldrb	r3, [r1, r3]
 8005d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	40023800 	.word	0x40023800
 8005d40:	0800afc8 	.word	0x0800afc8

08005d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d48:	f7ff ffdc 	bl	8005d04 <HAL_RCC_GetHCLKFreq>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	4b05      	ldr	r3, [pc, #20]	; (8005d64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	0b5b      	lsrs	r3, r3, #13
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	4903      	ldr	r1, [pc, #12]	; (8005d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d5a:	5ccb      	ldrb	r3, [r1, r3]
 8005d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	40023800 	.word	0x40023800
 8005d68:	0800afc8 	.word	0x0800afc8

08005d6c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e273      	b.n	8006266 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d075      	beq.n	8005e76 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005d8a:	4b88      	ldr	r3, [pc, #544]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f003 030c 	and.w	r3, r3, #12
 8005d92:	2b04      	cmp	r3, #4
 8005d94:	d00c      	beq.n	8005db0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d96:	4b85      	ldr	r3, [pc, #532]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005d9e:	2b08      	cmp	r3, #8
 8005da0:	d112      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005da2:	4b82      	ldr	r3, [pc, #520]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005daa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dae:	d10b      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005db0:	4b7e      	ldr	r3, [pc, #504]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d05b      	beq.n	8005e74 <HAL_RCC_OscConfig+0x108>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d157      	bne.n	8005e74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e24e      	b.n	8006266 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd0:	d106      	bne.n	8005de0 <HAL_RCC_OscConfig+0x74>
 8005dd2:	4b76      	ldr	r3, [pc, #472]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a75      	ldr	r2, [pc, #468]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ddc:	6013      	str	r3, [r2, #0]
 8005dde:	e01d      	b.n	8005e1c <HAL_RCC_OscConfig+0xb0>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005de8:	d10c      	bne.n	8005e04 <HAL_RCC_OscConfig+0x98>
 8005dea:	4b70      	ldr	r3, [pc, #448]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a6f      	ldr	r2, [pc, #444]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	4b6d      	ldr	r3, [pc, #436]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a6c      	ldr	r2, [pc, #432]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e00:	6013      	str	r3, [r2, #0]
 8005e02:	e00b      	b.n	8005e1c <HAL_RCC_OscConfig+0xb0>
 8005e04:	4b69      	ldr	r3, [pc, #420]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a68      	ldr	r2, [pc, #416]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e0e:	6013      	str	r3, [r2, #0]
 8005e10:	4b66      	ldr	r3, [pc, #408]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a65      	ldr	r2, [pc, #404]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d013      	beq.n	8005e4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e24:	f7fd fa52 	bl	80032cc <HAL_GetTick>
 8005e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e2a:	e008      	b.n	8005e3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e2c:	f7fd fa4e 	bl	80032cc <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	2b64      	cmp	r3, #100	; 0x64
 8005e38:	d901      	bls.n	8005e3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e213      	b.n	8006266 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e3e:	4b5b      	ldr	r3, [pc, #364]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d0f0      	beq.n	8005e2c <HAL_RCC_OscConfig+0xc0>
 8005e4a:	e014      	b.n	8005e76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e4c:	f7fd fa3e 	bl	80032cc <HAL_GetTick>
 8005e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e52:	e008      	b.n	8005e66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e54:	f7fd fa3a 	bl	80032cc <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b64      	cmp	r3, #100	; 0x64
 8005e60:	d901      	bls.n	8005e66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e1ff      	b.n	8006266 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e66:	4b51      	ldr	r3, [pc, #324]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1f0      	bne.n	8005e54 <HAL_RCC_OscConfig+0xe8>
 8005e72:	e000      	b.n	8005e76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d063      	beq.n	8005f4a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005e82:	4b4a      	ldr	r3, [pc, #296]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f003 030c 	and.w	r3, r3, #12
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00b      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e8e:	4b47      	ldr	r3, [pc, #284]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005e96:	2b08      	cmp	r3, #8
 8005e98:	d11c      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e9a:	4b44      	ldr	r3, [pc, #272]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d116      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ea6:	4b41      	ldr	r3, [pc, #260]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d005      	beq.n	8005ebe <HAL_RCC_OscConfig+0x152>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d001      	beq.n	8005ebe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e1d3      	b.n	8006266 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ebe:	4b3b      	ldr	r3, [pc, #236]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	4937      	ldr	r1, [pc, #220]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ed2:	e03a      	b.n	8005f4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d020      	beq.n	8005f1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005edc:	4b34      	ldr	r3, [pc, #208]	; (8005fb0 <HAL_RCC_OscConfig+0x244>)
 8005ede:	2201      	movs	r2, #1
 8005ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee2:	f7fd f9f3 	bl	80032cc <HAL_GetTick>
 8005ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ee8:	e008      	b.n	8005efc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005eea:	f7fd f9ef 	bl	80032cc <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d901      	bls.n	8005efc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e1b4      	b.n	8006266 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005efc:	4b2b      	ldr	r3, [pc, #172]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d0f0      	beq.n	8005eea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f08:	4b28      	ldr	r3, [pc, #160]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	00db      	lsls	r3, r3, #3
 8005f16:	4925      	ldr	r1, [pc, #148]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	600b      	str	r3, [r1, #0]
 8005f1c:	e015      	b.n	8005f4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f1e:	4b24      	ldr	r3, [pc, #144]	; (8005fb0 <HAL_RCC_OscConfig+0x244>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f24:	f7fd f9d2 	bl	80032cc <HAL_GetTick>
 8005f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f2a:	e008      	b.n	8005f3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f2c:	f7fd f9ce 	bl	80032cc <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d901      	bls.n	8005f3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e193      	b.n	8006266 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f3e:	4b1b      	ldr	r3, [pc, #108]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1f0      	bne.n	8005f2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0308 	and.w	r3, r3, #8
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d036      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d016      	beq.n	8005f8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f5e:	4b15      	ldr	r3, [pc, #84]	; (8005fb4 <HAL_RCC_OscConfig+0x248>)
 8005f60:	2201      	movs	r2, #1
 8005f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f64:	f7fd f9b2 	bl	80032cc <HAL_GetTick>
 8005f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f6a:	e008      	b.n	8005f7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f6c:	f7fd f9ae 	bl	80032cc <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d901      	bls.n	8005f7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e173      	b.n	8006266 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f7e:	4b0b      	ldr	r3, [pc, #44]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d0f0      	beq.n	8005f6c <HAL_RCC_OscConfig+0x200>
 8005f8a:	e01b      	b.n	8005fc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f8c:	4b09      	ldr	r3, [pc, #36]	; (8005fb4 <HAL_RCC_OscConfig+0x248>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f92:	f7fd f99b 	bl	80032cc <HAL_GetTick>
 8005f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f98:	e00e      	b.n	8005fb8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f9a:	f7fd f997 	bl	80032cc <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d907      	bls.n	8005fb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e15c      	b.n	8006266 <HAL_RCC_OscConfig+0x4fa>
 8005fac:	40023800 	.word	0x40023800
 8005fb0:	42470000 	.word	0x42470000
 8005fb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fb8:	4b8a      	ldr	r3, [pc, #552]	; (80061e4 <HAL_RCC_OscConfig+0x478>)
 8005fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1ea      	bne.n	8005f9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 8097 	beq.w	8006100 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fd6:	4b83      	ldr	r3, [pc, #524]	; (80061e4 <HAL_RCC_OscConfig+0x478>)
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10f      	bne.n	8006002 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60bb      	str	r3, [r7, #8]
 8005fe6:	4b7f      	ldr	r3, [pc, #508]	; (80061e4 <HAL_RCC_OscConfig+0x478>)
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	4a7e      	ldr	r2, [pc, #504]	; (80061e4 <HAL_RCC_OscConfig+0x478>)
 8005fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ff2:	4b7c      	ldr	r3, [pc, #496]	; (80061e4 <HAL_RCC_OscConfig+0x478>)
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ffa:	60bb      	str	r3, [r7, #8]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ffe:	2301      	movs	r3, #1
 8006000:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006002:	4b79      	ldr	r3, [pc, #484]	; (80061e8 <HAL_RCC_OscConfig+0x47c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600a:	2b00      	cmp	r3, #0
 800600c:	d118      	bne.n	8006040 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800600e:	4b76      	ldr	r3, [pc, #472]	; (80061e8 <HAL_RCC_OscConfig+0x47c>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a75      	ldr	r2, [pc, #468]	; (80061e8 <HAL_RCC_OscConfig+0x47c>)
 8006014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800601a:	f7fd f957 	bl	80032cc <HAL_GetTick>
 800601e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006020:	e008      	b.n	8006034 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006022:	f7fd f953 	bl	80032cc <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	2b02      	cmp	r3, #2
 800602e:	d901      	bls.n	8006034 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e118      	b.n	8006266 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006034:	4b6c      	ldr	r3, [pc, #432]	; (80061e8 <HAL_RCC_OscConfig+0x47c>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800603c:	2b00      	cmp	r3, #0
 800603e:	d0f0      	beq.n	8006022 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d106      	bne.n	8006056 <HAL_RCC_OscConfig+0x2ea>
 8006048:	4b66      	ldr	r3, [pc, #408]	; (80061e4 <HAL_RCC_OscConfig+0x478>)
 800604a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604c:	4a65      	ldr	r2, [pc, #404]	; (80061e4 <HAL_RCC_OscConfig+0x478>)
 800604e:	f043 0301 	orr.w	r3, r3, #1
 8006052:	6713      	str	r3, [r2, #112]	; 0x70
 8006054:	e01c      	b.n	8006090 <HAL_RCC_OscConfig+0x324>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	2b05      	cmp	r3, #5
 800605c:	d10c      	bne.n	8006078 <HAL_RCC_OscConfig+0x30c>
 800605e:	4b61      	ldr	r3, [pc, #388]	; (80061e4 <HAL_RCC_OscConfig+0x478>)
 8006060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006062:	4a60      	ldr	r2, [pc, #384]	; (80061e4 <HAL_RCC_OscConfig+0x478>)
 8006064:	f043 0304 	orr.w	r3, r3, #4
 8006068:	6713      	str	r3, [r2, #112]	; 0x70
 800606a:	4b5e      	ldr	r3, [pc, #376]	; (80061e4 <HAL_RCC_OscConfig+0x478>)
 800606c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800606e:	4a5d      	ldr	r2, [pc, #372]	; (80061e4 <HAL_RCC_OscConfig+0x478>)
 8006070:	f043 0301 	orr.w	r3, r3, #1
 8006074:	6713      	str	r3, [r2, #112]	; 0x70
 8006076:	e00b      	b.n	8006090 <HAL_RCC_OscConfig+0x324>
 8006078:	4b5a      	ldr	r3, [pc, #360]	; (80061e4 <HAL_RCC_OscConfig+0x478>)
 800607a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607c:	4a59      	ldr	r2, [pc, #356]	; (80061e4 <HAL_RCC_OscConfig+0x478>)
 800607e:	f023 0301 	bic.w	r3, r3, #1
 8006082:	6713      	str	r3, [r2, #112]	; 0x70
 8006084:	4b57      	ldr	r3, [pc, #348]	; (80061e4 <HAL_RCC_OscConfig+0x478>)
 8006086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006088:	4a56      	ldr	r2, [pc, #344]	; (80061e4 <HAL_RCC_OscConfig+0x478>)
 800608a:	f023 0304 	bic.w	r3, r3, #4
 800608e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d015      	beq.n	80060c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006098:	f7fd f918 	bl	80032cc <HAL_GetTick>
 800609c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800609e:	e00a      	b.n	80060b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060a0:	f7fd f914 	bl	80032cc <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e0d7      	b.n	8006266 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060b6:	4b4b      	ldr	r3, [pc, #300]	; (80061e4 <HAL_RCC_OscConfig+0x478>)
 80060b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0ee      	beq.n	80060a0 <HAL_RCC_OscConfig+0x334>
 80060c2:	e014      	b.n	80060ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060c4:	f7fd f902 	bl	80032cc <HAL_GetTick>
 80060c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060ca:	e00a      	b.n	80060e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060cc:	f7fd f8fe 	bl	80032cc <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060da:	4293      	cmp	r3, r2
 80060dc:	d901      	bls.n	80060e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e0c1      	b.n	8006266 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060e2:	4b40      	ldr	r3, [pc, #256]	; (80061e4 <HAL_RCC_OscConfig+0x478>)
 80060e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1ee      	bne.n	80060cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060ee:	7dfb      	ldrb	r3, [r7, #23]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d105      	bne.n	8006100 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060f4:	4b3b      	ldr	r3, [pc, #236]	; (80061e4 <HAL_RCC_OscConfig+0x478>)
 80060f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f8:	4a3a      	ldr	r2, [pc, #232]	; (80061e4 <HAL_RCC_OscConfig+0x478>)
 80060fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	2b00      	cmp	r3, #0
 8006106:	f000 80ad 	beq.w	8006264 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800610a:	4b36      	ldr	r3, [pc, #216]	; (80061e4 <HAL_RCC_OscConfig+0x478>)
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f003 030c 	and.w	r3, r3, #12
 8006112:	2b08      	cmp	r3, #8
 8006114:	d060      	beq.n	80061d8 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	2b02      	cmp	r3, #2
 800611c:	d145      	bne.n	80061aa <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800611e:	4b33      	ldr	r3, [pc, #204]	; (80061ec <HAL_RCC_OscConfig+0x480>)
 8006120:	2200      	movs	r2, #0
 8006122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006124:	f7fd f8d2 	bl	80032cc <HAL_GetTick>
 8006128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800612a:	e008      	b.n	800613e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800612c:	f7fd f8ce 	bl	80032cc <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b02      	cmp	r3, #2
 8006138:	d901      	bls.n	800613e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e093      	b.n	8006266 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800613e:	4b29      	ldr	r3, [pc, #164]	; (80061e4 <HAL_RCC_OscConfig+0x478>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1f0      	bne.n	800612c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	69da      	ldr	r2, [r3, #28]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	431a      	orrs	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006158:	019b      	lsls	r3, r3, #6
 800615a:	431a      	orrs	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006160:	085b      	lsrs	r3, r3, #1
 8006162:	3b01      	subs	r3, #1
 8006164:	041b      	lsls	r3, r3, #16
 8006166:	431a      	orrs	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616c:	061b      	lsls	r3, r3, #24
 800616e:	431a      	orrs	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006174:	071b      	lsls	r3, r3, #28
 8006176:	491b      	ldr	r1, [pc, #108]	; (80061e4 <HAL_RCC_OscConfig+0x478>)
 8006178:	4313      	orrs	r3, r2
 800617a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800617c:	4b1b      	ldr	r3, [pc, #108]	; (80061ec <HAL_RCC_OscConfig+0x480>)
 800617e:	2201      	movs	r2, #1
 8006180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006182:	f7fd f8a3 	bl	80032cc <HAL_GetTick>
 8006186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006188:	e008      	b.n	800619c <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800618a:	f7fd f89f 	bl	80032cc <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	2b02      	cmp	r3, #2
 8006196:	d901      	bls.n	800619c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e064      	b.n	8006266 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800619c:	4b11      	ldr	r3, [pc, #68]	; (80061e4 <HAL_RCC_OscConfig+0x478>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d0f0      	beq.n	800618a <HAL_RCC_OscConfig+0x41e>
 80061a8:	e05c      	b.n	8006264 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061aa:	4b10      	ldr	r3, [pc, #64]	; (80061ec <HAL_RCC_OscConfig+0x480>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b0:	f7fd f88c 	bl	80032cc <HAL_GetTick>
 80061b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061b6:	e008      	b.n	80061ca <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061b8:	f7fd f888 	bl	80032cc <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e04d      	b.n	8006266 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ca:	4b06      	ldr	r3, [pc, #24]	; (80061e4 <HAL_RCC_OscConfig+0x478>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1f0      	bne.n	80061b8 <HAL_RCC_OscConfig+0x44c>
 80061d6:	e045      	b.n	8006264 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d107      	bne.n	80061f0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e040      	b.n	8006266 <HAL_RCC_OscConfig+0x4fa>
 80061e4:	40023800 	.word	0x40023800
 80061e8:	40007000 	.word	0x40007000
 80061ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061f0:	4b1f      	ldr	r3, [pc, #124]	; (8006270 <HAL_RCC_OscConfig+0x504>)
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d030      	beq.n	8006260 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006208:	429a      	cmp	r2, r3
 800620a:	d129      	bne.n	8006260 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006216:	429a      	cmp	r2, r3
 8006218:	d122      	bne.n	8006260 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006220:	4013      	ands	r3, r2
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006226:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006228:	4293      	cmp	r3, r2
 800622a:	d119      	bne.n	8006260 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006236:	085b      	lsrs	r3, r3, #1
 8006238:	3b01      	subs	r3, #1
 800623a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800623c:	429a      	cmp	r2, r3
 800623e:	d10f      	bne.n	8006260 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800624c:	429a      	cmp	r2, r3
 800624e:	d107      	bne.n	8006260 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800625c:	429a      	cmp	r2, r3
 800625e:	d001      	beq.n	8006264 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e000      	b.n	8006266 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3718      	adds	r7, #24
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	40023800 	.word	0x40023800

08006274 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e041      	b.n	800630a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d106      	bne.n	80062a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f7fc fdd6 	bl	8002e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2202      	movs	r2, #2
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	3304      	adds	r3, #4
 80062b0:	4619      	mov	r1, r3
 80062b2:	4610      	mov	r0, r2
 80062b4:	f000 fa10 	bl	80066d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3708      	adds	r7, #8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b082      	sub	sp, #8
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d101      	bne.n	8006324 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e041      	b.n	80063a8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b00      	cmp	r3, #0
 800632e:	d106      	bne.n	800633e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f839 	bl	80063b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2202      	movs	r2, #2
 8006342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	3304      	adds	r3, #4
 800634e:	4619      	mov	r1, r3
 8006350:	4610      	mov	r0, r2
 8006352:	f000 f9c1 	bl	80066d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3708      	adds	r7, #8
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063d0:	2300      	movs	r3, #0
 80063d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d101      	bne.n	80063e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063de:	2302      	movs	r3, #2
 80063e0:	e0ae      	b.n	8006540 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b0c      	cmp	r3, #12
 80063ee:	f200 809f 	bhi.w	8006530 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80063f2:	a201      	add	r2, pc, #4	; (adr r2, 80063f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f8:	0800642d 	.word	0x0800642d
 80063fc:	08006531 	.word	0x08006531
 8006400:	08006531 	.word	0x08006531
 8006404:	08006531 	.word	0x08006531
 8006408:	0800646d 	.word	0x0800646d
 800640c:	08006531 	.word	0x08006531
 8006410:	08006531 	.word	0x08006531
 8006414:	08006531 	.word	0x08006531
 8006418:	080064af 	.word	0x080064af
 800641c:	08006531 	.word	0x08006531
 8006420:	08006531 	.word	0x08006531
 8006424:	08006531 	.word	0x08006531
 8006428:	080064ef 	.word	0x080064ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68b9      	ldr	r1, [r7, #8]
 8006432:	4618      	mov	r0, r3
 8006434:	f000 f9f0 	bl	8006818 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	699a      	ldr	r2, [r3, #24]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0208 	orr.w	r2, r2, #8
 8006446:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699a      	ldr	r2, [r3, #24]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f022 0204 	bic.w	r2, r2, #4
 8006456:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6999      	ldr	r1, [r3, #24]
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	691a      	ldr	r2, [r3, #16]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	430a      	orrs	r2, r1
 8006468:	619a      	str	r2, [r3, #24]
      break;
 800646a:	e064      	b.n	8006536 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68b9      	ldr	r1, [r7, #8]
 8006472:	4618      	mov	r0, r3
 8006474:	f000 fa40 	bl	80068f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	699a      	ldr	r2, [r3, #24]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006486:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	699a      	ldr	r2, [r3, #24]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006496:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6999      	ldr	r1, [r3, #24]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	021a      	lsls	r2, r3, #8
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	430a      	orrs	r2, r1
 80064aa:	619a      	str	r2, [r3, #24]
      break;
 80064ac:	e043      	b.n	8006536 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68b9      	ldr	r1, [r7, #8]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 fa95 	bl	80069e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	69da      	ldr	r2, [r3, #28]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f042 0208 	orr.w	r2, r2, #8
 80064c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	69da      	ldr	r2, [r3, #28]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f022 0204 	bic.w	r2, r2, #4
 80064d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	69d9      	ldr	r1, [r3, #28]
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	691a      	ldr	r2, [r3, #16]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	61da      	str	r2, [r3, #28]
      break;
 80064ec:	e023      	b.n	8006536 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68b9      	ldr	r1, [r7, #8]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 fae9 	bl	8006acc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	69da      	ldr	r2, [r3, #28]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006508:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	69da      	ldr	r2, [r3, #28]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	69d9      	ldr	r1, [r3, #28]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	021a      	lsls	r2, r3, #8
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	430a      	orrs	r2, r1
 800652c:	61da      	str	r2, [r3, #28]
      break;
 800652e:	e002      	b.n	8006536 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	75fb      	strb	r3, [r7, #23]
      break;
 8006534:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800653e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006540:	4618      	mov	r0, r3
 8006542:	3718      	adds	r7, #24
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800655c:	2b01      	cmp	r3, #1
 800655e:	d101      	bne.n	8006564 <HAL_TIM_ConfigClockSource+0x1c>
 8006560:	2302      	movs	r3, #2
 8006562:	e0b4      	b.n	80066ce <HAL_TIM_ConfigClockSource+0x186>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2202      	movs	r2, #2
 8006570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006582:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800658a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800659c:	d03e      	beq.n	800661c <HAL_TIM_ConfigClockSource+0xd4>
 800659e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065a2:	f200 8087 	bhi.w	80066b4 <HAL_TIM_ConfigClockSource+0x16c>
 80065a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065aa:	f000 8086 	beq.w	80066ba <HAL_TIM_ConfigClockSource+0x172>
 80065ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b2:	d87f      	bhi.n	80066b4 <HAL_TIM_ConfigClockSource+0x16c>
 80065b4:	2b70      	cmp	r3, #112	; 0x70
 80065b6:	d01a      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0xa6>
 80065b8:	2b70      	cmp	r3, #112	; 0x70
 80065ba:	d87b      	bhi.n	80066b4 <HAL_TIM_ConfigClockSource+0x16c>
 80065bc:	2b60      	cmp	r3, #96	; 0x60
 80065be:	d050      	beq.n	8006662 <HAL_TIM_ConfigClockSource+0x11a>
 80065c0:	2b60      	cmp	r3, #96	; 0x60
 80065c2:	d877      	bhi.n	80066b4 <HAL_TIM_ConfigClockSource+0x16c>
 80065c4:	2b50      	cmp	r3, #80	; 0x50
 80065c6:	d03c      	beq.n	8006642 <HAL_TIM_ConfigClockSource+0xfa>
 80065c8:	2b50      	cmp	r3, #80	; 0x50
 80065ca:	d873      	bhi.n	80066b4 <HAL_TIM_ConfigClockSource+0x16c>
 80065cc:	2b40      	cmp	r3, #64	; 0x40
 80065ce:	d058      	beq.n	8006682 <HAL_TIM_ConfigClockSource+0x13a>
 80065d0:	2b40      	cmp	r3, #64	; 0x40
 80065d2:	d86f      	bhi.n	80066b4 <HAL_TIM_ConfigClockSource+0x16c>
 80065d4:	2b30      	cmp	r3, #48	; 0x30
 80065d6:	d064      	beq.n	80066a2 <HAL_TIM_ConfigClockSource+0x15a>
 80065d8:	2b30      	cmp	r3, #48	; 0x30
 80065da:	d86b      	bhi.n	80066b4 <HAL_TIM_ConfigClockSource+0x16c>
 80065dc:	2b20      	cmp	r3, #32
 80065de:	d060      	beq.n	80066a2 <HAL_TIM_ConfigClockSource+0x15a>
 80065e0:	2b20      	cmp	r3, #32
 80065e2:	d867      	bhi.n	80066b4 <HAL_TIM_ConfigClockSource+0x16c>
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d05c      	beq.n	80066a2 <HAL_TIM_ConfigClockSource+0x15a>
 80065e8:	2b10      	cmp	r3, #16
 80065ea:	d05a      	beq.n	80066a2 <HAL_TIM_ConfigClockSource+0x15a>
 80065ec:	e062      	b.n	80066b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6818      	ldr	r0, [r3, #0]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	6899      	ldr	r1, [r3, #8]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	f000 fb35 	bl	8006c6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006610:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	609a      	str	r2, [r3, #8]
      break;
 800661a:	e04f      	b.n	80066bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6818      	ldr	r0, [r3, #0]
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	6899      	ldr	r1, [r3, #8]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f000 fb1e 	bl	8006c6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689a      	ldr	r2, [r3, #8]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800663e:	609a      	str	r2, [r3, #8]
      break;
 8006640:	e03c      	b.n	80066bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6818      	ldr	r0, [r3, #0]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	6859      	ldr	r1, [r3, #4]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	461a      	mov	r2, r3
 8006650:	f000 fa92 	bl	8006b78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2150      	movs	r1, #80	; 0x50
 800665a:	4618      	mov	r0, r3
 800665c:	f000 faeb 	bl	8006c36 <TIM_ITRx_SetConfig>
      break;
 8006660:	e02c      	b.n	80066bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6818      	ldr	r0, [r3, #0]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	6859      	ldr	r1, [r3, #4]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	461a      	mov	r2, r3
 8006670:	f000 fab1 	bl	8006bd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2160      	movs	r1, #96	; 0x60
 800667a:	4618      	mov	r0, r3
 800667c:	f000 fadb 	bl	8006c36 <TIM_ITRx_SetConfig>
      break;
 8006680:	e01c      	b.n	80066bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6818      	ldr	r0, [r3, #0]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	6859      	ldr	r1, [r3, #4]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	461a      	mov	r2, r3
 8006690:	f000 fa72 	bl	8006b78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2140      	movs	r1, #64	; 0x40
 800669a:	4618      	mov	r0, r3
 800669c:	f000 facb 	bl	8006c36 <TIM_ITRx_SetConfig>
      break;
 80066a0:	e00c      	b.n	80066bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4619      	mov	r1, r3
 80066ac:	4610      	mov	r0, r2
 80066ae:	f000 fac2 	bl	8006c36 <TIM_ITRx_SetConfig>
      break;
 80066b2:	e003      	b.n	80066bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	73fb      	strb	r3, [r7, #15]
      break;
 80066b8:	e000      	b.n	80066bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80066ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
	...

080066d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a40      	ldr	r2, [pc, #256]	; (80067ec <TIM_Base_SetConfig+0x114>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d013      	beq.n	8006718 <TIM_Base_SetConfig+0x40>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066f6:	d00f      	beq.n	8006718 <TIM_Base_SetConfig+0x40>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a3d      	ldr	r2, [pc, #244]	; (80067f0 <TIM_Base_SetConfig+0x118>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d00b      	beq.n	8006718 <TIM_Base_SetConfig+0x40>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a3c      	ldr	r2, [pc, #240]	; (80067f4 <TIM_Base_SetConfig+0x11c>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d007      	beq.n	8006718 <TIM_Base_SetConfig+0x40>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a3b      	ldr	r2, [pc, #236]	; (80067f8 <TIM_Base_SetConfig+0x120>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d003      	beq.n	8006718 <TIM_Base_SetConfig+0x40>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a3a      	ldr	r2, [pc, #232]	; (80067fc <TIM_Base_SetConfig+0x124>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d108      	bne.n	800672a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800671e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	4313      	orrs	r3, r2
 8006728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a2f      	ldr	r2, [pc, #188]	; (80067ec <TIM_Base_SetConfig+0x114>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d02b      	beq.n	800678a <TIM_Base_SetConfig+0xb2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006738:	d027      	beq.n	800678a <TIM_Base_SetConfig+0xb2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a2c      	ldr	r2, [pc, #176]	; (80067f0 <TIM_Base_SetConfig+0x118>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d023      	beq.n	800678a <TIM_Base_SetConfig+0xb2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a2b      	ldr	r2, [pc, #172]	; (80067f4 <TIM_Base_SetConfig+0x11c>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d01f      	beq.n	800678a <TIM_Base_SetConfig+0xb2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a2a      	ldr	r2, [pc, #168]	; (80067f8 <TIM_Base_SetConfig+0x120>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d01b      	beq.n	800678a <TIM_Base_SetConfig+0xb2>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a29      	ldr	r2, [pc, #164]	; (80067fc <TIM_Base_SetConfig+0x124>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d017      	beq.n	800678a <TIM_Base_SetConfig+0xb2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a28      	ldr	r2, [pc, #160]	; (8006800 <TIM_Base_SetConfig+0x128>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d013      	beq.n	800678a <TIM_Base_SetConfig+0xb2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a27      	ldr	r2, [pc, #156]	; (8006804 <TIM_Base_SetConfig+0x12c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d00f      	beq.n	800678a <TIM_Base_SetConfig+0xb2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a26      	ldr	r2, [pc, #152]	; (8006808 <TIM_Base_SetConfig+0x130>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d00b      	beq.n	800678a <TIM_Base_SetConfig+0xb2>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a25      	ldr	r2, [pc, #148]	; (800680c <TIM_Base_SetConfig+0x134>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d007      	beq.n	800678a <TIM_Base_SetConfig+0xb2>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a24      	ldr	r2, [pc, #144]	; (8006810 <TIM_Base_SetConfig+0x138>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d003      	beq.n	800678a <TIM_Base_SetConfig+0xb2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a23      	ldr	r2, [pc, #140]	; (8006814 <TIM_Base_SetConfig+0x13c>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d108      	bne.n	800679c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	4313      	orrs	r3, r2
 800679a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	689a      	ldr	r2, [r3, #8]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a0a      	ldr	r2, [pc, #40]	; (80067ec <TIM_Base_SetConfig+0x114>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d003      	beq.n	80067d0 <TIM_Base_SetConfig+0xf8>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a0c      	ldr	r2, [pc, #48]	; (80067fc <TIM_Base_SetConfig+0x124>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d103      	bne.n	80067d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	691a      	ldr	r2, [r3, #16]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	615a      	str	r2, [r3, #20]
}
 80067de:	bf00      	nop
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	40010000 	.word	0x40010000
 80067f0:	40000400 	.word	0x40000400
 80067f4:	40000800 	.word	0x40000800
 80067f8:	40000c00 	.word	0x40000c00
 80067fc:	40010400 	.word	0x40010400
 8006800:	40014000 	.word	0x40014000
 8006804:	40014400 	.word	0x40014400
 8006808:	40014800 	.word	0x40014800
 800680c:	40001800 	.word	0x40001800
 8006810:	40001c00 	.word	0x40001c00
 8006814:	40002000 	.word	0x40002000

08006818 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006818:	b480      	push	{r7}
 800681a:	b087      	sub	sp, #28
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	f023 0201 	bic.w	r2, r3, #1
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 0303 	bic.w	r3, r3, #3
 800684e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	4313      	orrs	r3, r2
 8006858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f023 0302 	bic.w	r3, r3, #2
 8006860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	4313      	orrs	r3, r2
 800686a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a20      	ldr	r2, [pc, #128]	; (80068f0 <TIM_OC1_SetConfig+0xd8>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d003      	beq.n	800687c <TIM_OC1_SetConfig+0x64>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a1f      	ldr	r2, [pc, #124]	; (80068f4 <TIM_OC1_SetConfig+0xdc>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d10c      	bne.n	8006896 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	f023 0308 	bic.w	r3, r3, #8
 8006882:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	4313      	orrs	r3, r2
 800688c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f023 0304 	bic.w	r3, r3, #4
 8006894:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a15      	ldr	r2, [pc, #84]	; (80068f0 <TIM_OC1_SetConfig+0xd8>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d003      	beq.n	80068a6 <TIM_OC1_SetConfig+0x8e>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a14      	ldr	r2, [pc, #80]	; (80068f4 <TIM_OC1_SetConfig+0xdc>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d111      	bne.n	80068ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	4313      	orrs	r3, r2
 80068be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	685a      	ldr	r2, [r3, #4]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	621a      	str	r2, [r3, #32]
}
 80068e4:	bf00      	nop
 80068e6:	371c      	adds	r7, #28
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr
 80068f0:	40010000 	.word	0x40010000
 80068f4:	40010400 	.word	0x40010400

080068f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	f023 0210 	bic.w	r2, r3, #16
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800692e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	021b      	lsls	r3, r3, #8
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	4313      	orrs	r3, r2
 800693a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f023 0320 	bic.w	r3, r3, #32
 8006942:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	011b      	lsls	r3, r3, #4
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	4313      	orrs	r3, r2
 800694e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a22      	ldr	r2, [pc, #136]	; (80069dc <TIM_OC2_SetConfig+0xe4>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d003      	beq.n	8006960 <TIM_OC2_SetConfig+0x68>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a21      	ldr	r2, [pc, #132]	; (80069e0 <TIM_OC2_SetConfig+0xe8>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d10d      	bne.n	800697c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006966:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	011b      	lsls	r3, r3, #4
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	4313      	orrs	r3, r2
 8006972:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800697a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a17      	ldr	r2, [pc, #92]	; (80069dc <TIM_OC2_SetConfig+0xe4>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d003      	beq.n	800698c <TIM_OC2_SetConfig+0x94>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a16      	ldr	r2, [pc, #88]	; (80069e0 <TIM_OC2_SetConfig+0xe8>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d113      	bne.n	80069b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006992:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800699a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	621a      	str	r2, [r3, #32]
}
 80069ce:	bf00      	nop
 80069d0:	371c      	adds	r7, #28
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	40010000 	.word	0x40010000
 80069e0:	40010400 	.word	0x40010400

080069e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	69db      	ldr	r3, [r3, #28]
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f023 0303 	bic.w	r3, r3, #3
 8006a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	021b      	lsls	r3, r3, #8
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a21      	ldr	r2, [pc, #132]	; (8006ac4 <TIM_OC3_SetConfig+0xe0>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d003      	beq.n	8006a4a <TIM_OC3_SetConfig+0x66>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a20      	ldr	r2, [pc, #128]	; (8006ac8 <TIM_OC3_SetConfig+0xe4>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d10d      	bne.n	8006a66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	021b      	lsls	r3, r3, #8
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a16      	ldr	r2, [pc, #88]	; (8006ac4 <TIM_OC3_SetConfig+0xe0>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d003      	beq.n	8006a76 <TIM_OC3_SetConfig+0x92>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a15      	ldr	r2, [pc, #84]	; (8006ac8 <TIM_OC3_SetConfig+0xe4>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d113      	bne.n	8006a9e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	011b      	lsls	r3, r3, #4
 8006a8c:	693a      	ldr	r2, [r7, #16]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	011b      	lsls	r3, r3, #4
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	621a      	str	r2, [r3, #32]
}
 8006ab8:	bf00      	nop
 8006aba:	371c      	adds	r7, #28
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr
 8006ac4:	40010000 	.word	0x40010000
 8006ac8:	40010400 	.word	0x40010400

08006acc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b087      	sub	sp, #28
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	021b      	lsls	r3, r3, #8
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	031b      	lsls	r3, r3, #12
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a12      	ldr	r2, [pc, #72]	; (8006b70 <TIM_OC4_SetConfig+0xa4>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d003      	beq.n	8006b34 <TIM_OC4_SetConfig+0x68>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a11      	ldr	r2, [pc, #68]	; (8006b74 <TIM_OC4_SetConfig+0xa8>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d109      	bne.n	8006b48 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	019b      	lsls	r3, r3, #6
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	621a      	str	r2, [r3, #32]
}
 8006b62:	bf00      	nop
 8006b64:	371c      	adds	r7, #28
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	40010000 	.word	0x40010000
 8006b74:	40010400 	.word	0x40010400

08006b78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b087      	sub	sp, #28
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6a1b      	ldr	r3, [r3, #32]
 8006b88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	f023 0201 	bic.w	r2, r3, #1
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	011b      	lsls	r3, r3, #4
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f023 030a 	bic.w	r3, r3, #10
 8006bb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	621a      	str	r2, [r3, #32]
}
 8006bca:	bf00      	nop
 8006bcc:	371c      	adds	r7, #28
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b087      	sub	sp, #28
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	60f8      	str	r0, [r7, #12]
 8006bde:	60b9      	str	r1, [r7, #8]
 8006be0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	f023 0210 	bic.w	r2, r3, #16
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6a1b      	ldr	r3, [r3, #32]
 8006bf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	031b      	lsls	r3, r3, #12
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	011b      	lsls	r3, r3, #4
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	621a      	str	r2, [r3, #32]
}
 8006c2a:	bf00      	nop
 8006c2c:	371c      	adds	r7, #28
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b085      	sub	sp, #20
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	f043 0307 	orr.w	r3, r3, #7
 8006c58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	609a      	str	r2, [r3, #8]
}
 8006c60:	bf00      	nop
 8006c62:	3714      	adds	r7, #20
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b087      	sub	sp, #28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
 8006c78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	021a      	lsls	r2, r3, #8
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	431a      	orrs	r2, r3
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	609a      	str	r2, [r3, #8]
}
 8006ca0:	bf00      	nop
 8006ca2:	371c      	adds	r7, #28
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d101      	bne.n	8006cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	e05a      	b.n	8006d7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a21      	ldr	r2, [pc, #132]	; (8006d88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d022      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d10:	d01d      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a1d      	ldr	r2, [pc, #116]	; (8006d8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d018      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a1b      	ldr	r2, [pc, #108]	; (8006d90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d013      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a1a      	ldr	r2, [pc, #104]	; (8006d94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d00e      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a18      	ldr	r2, [pc, #96]	; (8006d98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d009      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a17      	ldr	r2, [pc, #92]	; (8006d9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d004      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a15      	ldr	r2, [pc, #84]	; (8006da0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d10c      	bne.n	8006d68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3714      	adds	r7, #20
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	40010000 	.word	0x40010000
 8006d8c:	40000400 	.word	0x40000400
 8006d90:	40000800 	.word	0x40000800
 8006d94:	40000c00 	.word	0x40000c00
 8006d98:	40010400 	.word	0x40010400
 8006d9c:	40014000 	.word	0x40014000
 8006da0:	40001800 	.word	0x40001800

08006da4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d101      	bne.n	8006dc0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	e03d      	b.n	8006e3c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	69db      	ldr	r3, [r3, #28]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3714      	adds	r7, #20
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d101      	bne.n	8006e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e03f      	b.n	8006eda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d106      	bne.n	8006e74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7fc f848 	bl	8002f04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2224      	movs	r2, #36	; 0x24
 8006e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68da      	ldr	r2, [r3, #12]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f929 	bl	80070e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	691a      	ldr	r2, [r3, #16]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ea0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	695a      	ldr	r2, [r3, #20]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006eb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68da      	ldr	r2, [r3, #12]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ec0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3708      	adds	r7, #8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b08a      	sub	sp, #40	; 0x28
 8006ee6:	af02      	add	r7, sp, #8
 8006ee8:	60f8      	str	r0, [r7, #12]
 8006eea:	60b9      	str	r1, [r7, #8]
 8006eec:	603b      	str	r3, [r7, #0]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b20      	cmp	r3, #32
 8006f00:	d17c      	bne.n	8006ffc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <HAL_UART_Transmit+0x2c>
 8006f08:	88fb      	ldrh	r3, [r7, #6]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e075      	b.n	8006ffe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d101      	bne.n	8006f20 <HAL_UART_Transmit+0x3e>
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	e06e      	b.n	8006ffe <HAL_UART_Transmit+0x11c>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2221      	movs	r2, #33	; 0x21
 8006f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f36:	f7fc f9c9 	bl	80032cc <HAL_GetTick>
 8006f3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	88fa      	ldrh	r2, [r7, #6]
 8006f40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	88fa      	ldrh	r2, [r7, #6]
 8006f46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f50:	d108      	bne.n	8006f64 <HAL_UART_Transmit+0x82>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d104      	bne.n	8006f64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	61bb      	str	r3, [r7, #24]
 8006f62:	e003      	b.n	8006f6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006f74:	e02a      	b.n	8006fcc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	2180      	movs	r1, #128	; 0x80
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f000 f840 	bl	8007006 <UART_WaitOnFlagUntilTimeout>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d001      	beq.n	8006f90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e036      	b.n	8006ffe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10b      	bne.n	8006fae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fa4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	3302      	adds	r3, #2
 8006faa:	61bb      	str	r3, [r7, #24]
 8006fac:	e007      	b.n	8006fbe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	781a      	ldrb	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1cf      	bne.n	8006f76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2140      	movs	r1, #64	; 0x40
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f000 f810 	bl	8007006 <UART_WaitOnFlagUntilTimeout>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d001      	beq.n	8006ff0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e006      	b.n	8006ffe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	e000      	b.n	8006ffe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006ffc:	2302      	movs	r3, #2
  }
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3720      	adds	r7, #32
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b090      	sub	sp, #64	; 0x40
 800700a:	af00      	add	r7, sp, #0
 800700c:	60f8      	str	r0, [r7, #12]
 800700e:	60b9      	str	r1, [r7, #8]
 8007010:	603b      	str	r3, [r7, #0]
 8007012:	4613      	mov	r3, r2
 8007014:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007016:	e050      	b.n	80070ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800701a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800701e:	d04c      	beq.n	80070ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007022:	2b00      	cmp	r3, #0
 8007024:	d007      	beq.n	8007036 <UART_WaitOnFlagUntilTimeout+0x30>
 8007026:	f7fc f951 	bl	80032cc <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007032:	429a      	cmp	r2, r3
 8007034:	d241      	bcs.n	80070ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	330c      	adds	r3, #12
 800703c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007040:	e853 3f00 	ldrex	r3, [r3]
 8007044:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007048:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800704c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	330c      	adds	r3, #12
 8007054:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007056:	637a      	str	r2, [r7, #52]	; 0x34
 8007058:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800705c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800705e:	e841 2300 	strex	r3, r2, [r1]
 8007062:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1e5      	bne.n	8007036 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	3314      	adds	r3, #20
 8007070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	e853 3f00 	ldrex	r3, [r3]
 8007078:	613b      	str	r3, [r7, #16]
   return(result);
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	f023 0301 	bic.w	r3, r3, #1
 8007080:	63bb      	str	r3, [r7, #56]	; 0x38
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	3314      	adds	r3, #20
 8007088:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800708a:	623a      	str	r2, [r7, #32]
 800708c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708e:	69f9      	ldr	r1, [r7, #28]
 8007090:	6a3a      	ldr	r2, [r7, #32]
 8007092:	e841 2300 	strex	r3, r2, [r1]
 8007096:	61bb      	str	r3, [r7, #24]
   return(result);
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1e5      	bne.n	800706a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2220      	movs	r2, #32
 80070a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2220      	movs	r2, #32
 80070aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e00f      	b.n	80070da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	4013      	ands	r3, r2
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	bf0c      	ite	eq
 80070ca:	2301      	moveq	r3, #1
 80070cc:	2300      	movne	r3, #0
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	461a      	mov	r2, r3
 80070d2:	79fb      	ldrb	r3, [r7, #7]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d09f      	beq.n	8007018 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3740      	adds	r7, #64	; 0x40
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
	...

080070e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070e8:	b0c0      	sub	sp, #256	; 0x100
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80070fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007100:	68d9      	ldr	r1, [r3, #12]
 8007102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	ea40 0301 	orr.w	r3, r0, r1
 800710c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800710e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007112:	689a      	ldr	r2, [r3, #8]
 8007114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	431a      	orrs	r2, r3
 800711c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	431a      	orrs	r2, r3
 8007124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007128:	69db      	ldr	r3, [r3, #28]
 800712a:	4313      	orrs	r3, r2
 800712c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800713c:	f021 010c 	bic.w	r1, r1, #12
 8007140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800714a:	430b      	orrs	r3, r1
 800714c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800714e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800715a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800715e:	6999      	ldr	r1, [r3, #24]
 8007160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	ea40 0301 	orr.w	r3, r0, r1
 800716a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800716c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	4b8f      	ldr	r3, [pc, #572]	; (80073b0 <UART_SetConfig+0x2cc>)
 8007174:	429a      	cmp	r2, r3
 8007176:	d005      	beq.n	8007184 <UART_SetConfig+0xa0>
 8007178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	4b8d      	ldr	r3, [pc, #564]	; (80073b4 <UART_SetConfig+0x2d0>)
 8007180:	429a      	cmp	r2, r3
 8007182:	d104      	bne.n	800718e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007184:	f7fe fdde 	bl	8005d44 <HAL_RCC_GetPCLK2Freq>
 8007188:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800718c:	e003      	b.n	8007196 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800718e:	f7fe fdc5 	bl	8005d1c <HAL_RCC_GetPCLK1Freq>
 8007192:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800719a:	69db      	ldr	r3, [r3, #28]
 800719c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071a0:	f040 810c 	bne.w	80073bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071a8:	2200      	movs	r2, #0
 80071aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80071b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80071b6:	4622      	mov	r2, r4
 80071b8:	462b      	mov	r3, r5
 80071ba:	1891      	adds	r1, r2, r2
 80071bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80071be:	415b      	adcs	r3, r3
 80071c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80071c6:	4621      	mov	r1, r4
 80071c8:	eb12 0801 	adds.w	r8, r2, r1
 80071cc:	4629      	mov	r1, r5
 80071ce:	eb43 0901 	adc.w	r9, r3, r1
 80071d2:	f04f 0200 	mov.w	r2, #0
 80071d6:	f04f 0300 	mov.w	r3, #0
 80071da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071e6:	4690      	mov	r8, r2
 80071e8:	4699      	mov	r9, r3
 80071ea:	4623      	mov	r3, r4
 80071ec:	eb18 0303 	adds.w	r3, r8, r3
 80071f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80071f4:	462b      	mov	r3, r5
 80071f6:	eb49 0303 	adc.w	r3, r9, r3
 80071fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80071fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800720a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800720e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007212:	460b      	mov	r3, r1
 8007214:	18db      	adds	r3, r3, r3
 8007216:	653b      	str	r3, [r7, #80]	; 0x50
 8007218:	4613      	mov	r3, r2
 800721a:	eb42 0303 	adc.w	r3, r2, r3
 800721e:	657b      	str	r3, [r7, #84]	; 0x54
 8007220:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007224:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007228:	f7f9 fd2e 	bl	8000c88 <__aeabi_uldivmod>
 800722c:	4602      	mov	r2, r0
 800722e:	460b      	mov	r3, r1
 8007230:	4b61      	ldr	r3, [pc, #388]	; (80073b8 <UART_SetConfig+0x2d4>)
 8007232:	fba3 2302 	umull	r2, r3, r3, r2
 8007236:	095b      	lsrs	r3, r3, #5
 8007238:	011c      	lsls	r4, r3, #4
 800723a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800723e:	2200      	movs	r2, #0
 8007240:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007244:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007248:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800724c:	4642      	mov	r2, r8
 800724e:	464b      	mov	r3, r9
 8007250:	1891      	adds	r1, r2, r2
 8007252:	64b9      	str	r1, [r7, #72]	; 0x48
 8007254:	415b      	adcs	r3, r3
 8007256:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007258:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800725c:	4641      	mov	r1, r8
 800725e:	eb12 0a01 	adds.w	sl, r2, r1
 8007262:	4649      	mov	r1, r9
 8007264:	eb43 0b01 	adc.w	fp, r3, r1
 8007268:	f04f 0200 	mov.w	r2, #0
 800726c:	f04f 0300 	mov.w	r3, #0
 8007270:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007274:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007278:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800727c:	4692      	mov	sl, r2
 800727e:	469b      	mov	fp, r3
 8007280:	4643      	mov	r3, r8
 8007282:	eb1a 0303 	adds.w	r3, sl, r3
 8007286:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800728a:	464b      	mov	r3, r9
 800728c:	eb4b 0303 	adc.w	r3, fp, r3
 8007290:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80072a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80072a8:	460b      	mov	r3, r1
 80072aa:	18db      	adds	r3, r3, r3
 80072ac:	643b      	str	r3, [r7, #64]	; 0x40
 80072ae:	4613      	mov	r3, r2
 80072b0:	eb42 0303 	adc.w	r3, r2, r3
 80072b4:	647b      	str	r3, [r7, #68]	; 0x44
 80072b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80072ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80072be:	f7f9 fce3 	bl	8000c88 <__aeabi_uldivmod>
 80072c2:	4602      	mov	r2, r0
 80072c4:	460b      	mov	r3, r1
 80072c6:	4611      	mov	r1, r2
 80072c8:	4b3b      	ldr	r3, [pc, #236]	; (80073b8 <UART_SetConfig+0x2d4>)
 80072ca:	fba3 2301 	umull	r2, r3, r3, r1
 80072ce:	095b      	lsrs	r3, r3, #5
 80072d0:	2264      	movs	r2, #100	; 0x64
 80072d2:	fb02 f303 	mul.w	r3, r2, r3
 80072d6:	1acb      	subs	r3, r1, r3
 80072d8:	00db      	lsls	r3, r3, #3
 80072da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80072de:	4b36      	ldr	r3, [pc, #216]	; (80073b8 <UART_SetConfig+0x2d4>)
 80072e0:	fba3 2302 	umull	r2, r3, r3, r2
 80072e4:	095b      	lsrs	r3, r3, #5
 80072e6:	005b      	lsls	r3, r3, #1
 80072e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80072ec:	441c      	add	r4, r3
 80072ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072f2:	2200      	movs	r2, #0
 80072f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80072fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007300:	4642      	mov	r2, r8
 8007302:	464b      	mov	r3, r9
 8007304:	1891      	adds	r1, r2, r2
 8007306:	63b9      	str	r1, [r7, #56]	; 0x38
 8007308:	415b      	adcs	r3, r3
 800730a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800730c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007310:	4641      	mov	r1, r8
 8007312:	1851      	adds	r1, r2, r1
 8007314:	6339      	str	r1, [r7, #48]	; 0x30
 8007316:	4649      	mov	r1, r9
 8007318:	414b      	adcs	r3, r1
 800731a:	637b      	str	r3, [r7, #52]	; 0x34
 800731c:	f04f 0200 	mov.w	r2, #0
 8007320:	f04f 0300 	mov.w	r3, #0
 8007324:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007328:	4659      	mov	r1, fp
 800732a:	00cb      	lsls	r3, r1, #3
 800732c:	4651      	mov	r1, sl
 800732e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007332:	4651      	mov	r1, sl
 8007334:	00ca      	lsls	r2, r1, #3
 8007336:	4610      	mov	r0, r2
 8007338:	4619      	mov	r1, r3
 800733a:	4603      	mov	r3, r0
 800733c:	4642      	mov	r2, r8
 800733e:	189b      	adds	r3, r3, r2
 8007340:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007344:	464b      	mov	r3, r9
 8007346:	460a      	mov	r2, r1
 8007348:	eb42 0303 	adc.w	r3, r2, r3
 800734c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800735c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007360:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007364:	460b      	mov	r3, r1
 8007366:	18db      	adds	r3, r3, r3
 8007368:	62bb      	str	r3, [r7, #40]	; 0x28
 800736a:	4613      	mov	r3, r2
 800736c:	eb42 0303 	adc.w	r3, r2, r3
 8007370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007372:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007376:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800737a:	f7f9 fc85 	bl	8000c88 <__aeabi_uldivmod>
 800737e:	4602      	mov	r2, r0
 8007380:	460b      	mov	r3, r1
 8007382:	4b0d      	ldr	r3, [pc, #52]	; (80073b8 <UART_SetConfig+0x2d4>)
 8007384:	fba3 1302 	umull	r1, r3, r3, r2
 8007388:	095b      	lsrs	r3, r3, #5
 800738a:	2164      	movs	r1, #100	; 0x64
 800738c:	fb01 f303 	mul.w	r3, r1, r3
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	00db      	lsls	r3, r3, #3
 8007394:	3332      	adds	r3, #50	; 0x32
 8007396:	4a08      	ldr	r2, [pc, #32]	; (80073b8 <UART_SetConfig+0x2d4>)
 8007398:	fba2 2303 	umull	r2, r3, r2, r3
 800739c:	095b      	lsrs	r3, r3, #5
 800739e:	f003 0207 	and.w	r2, r3, #7
 80073a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4422      	add	r2, r4
 80073aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80073ac:	e106      	b.n	80075bc <UART_SetConfig+0x4d8>
 80073ae:	bf00      	nop
 80073b0:	40011000 	.word	0x40011000
 80073b4:	40011400 	.word	0x40011400
 80073b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073c0:	2200      	movs	r2, #0
 80073c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80073ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80073ce:	4642      	mov	r2, r8
 80073d0:	464b      	mov	r3, r9
 80073d2:	1891      	adds	r1, r2, r2
 80073d4:	6239      	str	r1, [r7, #32]
 80073d6:	415b      	adcs	r3, r3
 80073d8:	627b      	str	r3, [r7, #36]	; 0x24
 80073da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073de:	4641      	mov	r1, r8
 80073e0:	1854      	adds	r4, r2, r1
 80073e2:	4649      	mov	r1, r9
 80073e4:	eb43 0501 	adc.w	r5, r3, r1
 80073e8:	f04f 0200 	mov.w	r2, #0
 80073ec:	f04f 0300 	mov.w	r3, #0
 80073f0:	00eb      	lsls	r3, r5, #3
 80073f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073f6:	00e2      	lsls	r2, r4, #3
 80073f8:	4614      	mov	r4, r2
 80073fa:	461d      	mov	r5, r3
 80073fc:	4643      	mov	r3, r8
 80073fe:	18e3      	adds	r3, r4, r3
 8007400:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007404:	464b      	mov	r3, r9
 8007406:	eb45 0303 	adc.w	r3, r5, r3
 800740a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800740e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800741a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800741e:	f04f 0200 	mov.w	r2, #0
 8007422:	f04f 0300 	mov.w	r3, #0
 8007426:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800742a:	4629      	mov	r1, r5
 800742c:	008b      	lsls	r3, r1, #2
 800742e:	4621      	mov	r1, r4
 8007430:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007434:	4621      	mov	r1, r4
 8007436:	008a      	lsls	r2, r1, #2
 8007438:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800743c:	f7f9 fc24 	bl	8000c88 <__aeabi_uldivmod>
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	4b60      	ldr	r3, [pc, #384]	; (80075c8 <UART_SetConfig+0x4e4>)
 8007446:	fba3 2302 	umull	r2, r3, r3, r2
 800744a:	095b      	lsrs	r3, r3, #5
 800744c:	011c      	lsls	r4, r3, #4
 800744e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007452:	2200      	movs	r2, #0
 8007454:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007458:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800745c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007460:	4642      	mov	r2, r8
 8007462:	464b      	mov	r3, r9
 8007464:	1891      	adds	r1, r2, r2
 8007466:	61b9      	str	r1, [r7, #24]
 8007468:	415b      	adcs	r3, r3
 800746a:	61fb      	str	r3, [r7, #28]
 800746c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007470:	4641      	mov	r1, r8
 8007472:	1851      	adds	r1, r2, r1
 8007474:	6139      	str	r1, [r7, #16]
 8007476:	4649      	mov	r1, r9
 8007478:	414b      	adcs	r3, r1
 800747a:	617b      	str	r3, [r7, #20]
 800747c:	f04f 0200 	mov.w	r2, #0
 8007480:	f04f 0300 	mov.w	r3, #0
 8007484:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007488:	4659      	mov	r1, fp
 800748a:	00cb      	lsls	r3, r1, #3
 800748c:	4651      	mov	r1, sl
 800748e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007492:	4651      	mov	r1, sl
 8007494:	00ca      	lsls	r2, r1, #3
 8007496:	4610      	mov	r0, r2
 8007498:	4619      	mov	r1, r3
 800749a:	4603      	mov	r3, r0
 800749c:	4642      	mov	r2, r8
 800749e:	189b      	adds	r3, r3, r2
 80074a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074a4:	464b      	mov	r3, r9
 80074a6:	460a      	mov	r2, r1
 80074a8:	eb42 0303 	adc.w	r3, r2, r3
 80074ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80074ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80074bc:	f04f 0200 	mov.w	r2, #0
 80074c0:	f04f 0300 	mov.w	r3, #0
 80074c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80074c8:	4649      	mov	r1, r9
 80074ca:	008b      	lsls	r3, r1, #2
 80074cc:	4641      	mov	r1, r8
 80074ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074d2:	4641      	mov	r1, r8
 80074d4:	008a      	lsls	r2, r1, #2
 80074d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80074da:	f7f9 fbd5 	bl	8000c88 <__aeabi_uldivmod>
 80074de:	4602      	mov	r2, r0
 80074e0:	460b      	mov	r3, r1
 80074e2:	4611      	mov	r1, r2
 80074e4:	4b38      	ldr	r3, [pc, #224]	; (80075c8 <UART_SetConfig+0x4e4>)
 80074e6:	fba3 2301 	umull	r2, r3, r3, r1
 80074ea:	095b      	lsrs	r3, r3, #5
 80074ec:	2264      	movs	r2, #100	; 0x64
 80074ee:	fb02 f303 	mul.w	r3, r2, r3
 80074f2:	1acb      	subs	r3, r1, r3
 80074f4:	011b      	lsls	r3, r3, #4
 80074f6:	3332      	adds	r3, #50	; 0x32
 80074f8:	4a33      	ldr	r2, [pc, #204]	; (80075c8 <UART_SetConfig+0x4e4>)
 80074fa:	fba2 2303 	umull	r2, r3, r2, r3
 80074fe:	095b      	lsrs	r3, r3, #5
 8007500:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007504:	441c      	add	r4, r3
 8007506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800750a:	2200      	movs	r2, #0
 800750c:	673b      	str	r3, [r7, #112]	; 0x70
 800750e:	677a      	str	r2, [r7, #116]	; 0x74
 8007510:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007514:	4642      	mov	r2, r8
 8007516:	464b      	mov	r3, r9
 8007518:	1891      	adds	r1, r2, r2
 800751a:	60b9      	str	r1, [r7, #8]
 800751c:	415b      	adcs	r3, r3
 800751e:	60fb      	str	r3, [r7, #12]
 8007520:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007524:	4641      	mov	r1, r8
 8007526:	1851      	adds	r1, r2, r1
 8007528:	6039      	str	r1, [r7, #0]
 800752a:	4649      	mov	r1, r9
 800752c:	414b      	adcs	r3, r1
 800752e:	607b      	str	r3, [r7, #4]
 8007530:	f04f 0200 	mov.w	r2, #0
 8007534:	f04f 0300 	mov.w	r3, #0
 8007538:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800753c:	4659      	mov	r1, fp
 800753e:	00cb      	lsls	r3, r1, #3
 8007540:	4651      	mov	r1, sl
 8007542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007546:	4651      	mov	r1, sl
 8007548:	00ca      	lsls	r2, r1, #3
 800754a:	4610      	mov	r0, r2
 800754c:	4619      	mov	r1, r3
 800754e:	4603      	mov	r3, r0
 8007550:	4642      	mov	r2, r8
 8007552:	189b      	adds	r3, r3, r2
 8007554:	66bb      	str	r3, [r7, #104]	; 0x68
 8007556:	464b      	mov	r3, r9
 8007558:	460a      	mov	r2, r1
 800755a:	eb42 0303 	adc.w	r3, r2, r3
 800755e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	663b      	str	r3, [r7, #96]	; 0x60
 800756a:	667a      	str	r2, [r7, #100]	; 0x64
 800756c:	f04f 0200 	mov.w	r2, #0
 8007570:	f04f 0300 	mov.w	r3, #0
 8007574:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007578:	4649      	mov	r1, r9
 800757a:	008b      	lsls	r3, r1, #2
 800757c:	4641      	mov	r1, r8
 800757e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007582:	4641      	mov	r1, r8
 8007584:	008a      	lsls	r2, r1, #2
 8007586:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800758a:	f7f9 fb7d 	bl	8000c88 <__aeabi_uldivmod>
 800758e:	4602      	mov	r2, r0
 8007590:	460b      	mov	r3, r1
 8007592:	4b0d      	ldr	r3, [pc, #52]	; (80075c8 <UART_SetConfig+0x4e4>)
 8007594:	fba3 1302 	umull	r1, r3, r3, r2
 8007598:	095b      	lsrs	r3, r3, #5
 800759a:	2164      	movs	r1, #100	; 0x64
 800759c:	fb01 f303 	mul.w	r3, r1, r3
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	011b      	lsls	r3, r3, #4
 80075a4:	3332      	adds	r3, #50	; 0x32
 80075a6:	4a08      	ldr	r2, [pc, #32]	; (80075c8 <UART_SetConfig+0x4e4>)
 80075a8:	fba2 2303 	umull	r2, r3, r2, r3
 80075ac:	095b      	lsrs	r3, r3, #5
 80075ae:	f003 020f 	and.w	r2, r3, #15
 80075b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4422      	add	r2, r4
 80075ba:	609a      	str	r2, [r3, #8]
}
 80075bc:	bf00      	nop
 80075be:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80075c2:	46bd      	mov	sp, r7
 80075c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075c8:	51eb851f 	.word	0x51eb851f

080075cc <arm_biquad_cascade_df1_init_f32>:
 80075cc:	b510      	push	{r4, lr}
 80075ce:	6082      	str	r2, [r0, #8]
 80075d0:	6001      	str	r1, [r0, #0]
 80075d2:	4604      	mov	r4, r0
 80075d4:	010a      	lsls	r2, r1, #4
 80075d6:	4618      	mov	r0, r3
 80075d8:	2100      	movs	r1, #0
 80075da:	f000 fe7a 	bl	80082d2 <memset>
 80075de:	6060      	str	r0, [r4, #4]
 80075e0:	bd10      	pop	{r4, pc}
 80075e2:	bf00      	nop

080075e4 <arm_biquad_cascade_df1_f32>:
 80075e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075e8:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
 80075ec:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80075f0:	f003 0e03 	and.w	lr, r3, #3
 80075f4:	ea4f 190c 	mov.w	r9, ip, lsl #4
 80075f8:	6807      	ldr	r7, [r0, #0]
 80075fa:	eb02 0a09 	add.w	sl, r2, r9
 80075fe:	f10e 38ff 	add.w	r8, lr, #4294967295	; 0xffffffff
 8007602:	3614      	adds	r6, #20
 8007604:	3510      	adds	r5, #16
 8007606:	ed16 4a05 	vldr	s8, [r6, #-20]	; 0xffffffec
 800760a:	ed16 2a04 	vldr	s4, [r6, #-16]
 800760e:	ed56 2a03 	vldr	s5, [r6, #-12]
 8007612:	ed16 3a02 	vldr	s6, [r6, #-8]
 8007616:	ed56 3a01 	vldr	s7, [r6, #-4]
 800761a:	ed55 5a04 	vldr	s11, [r5, #-16]
 800761e:	ed15 5a03 	vldr	s10, [r5, #-12]
 8007622:	ed15 7a02 	vldr	s14, [r5, #-8]
 8007626:	ed55 7a01 	vldr	s15, [r5, #-4]
 800762a:	f1bc 0f00 	cmp.w	ip, #0
 800762e:	f000 80d4 	beq.w	80077da <arm_biquad_cascade_df1_f32+0x1f6>
 8007632:	f101 0010 	add.w	r0, r1, #16
 8007636:	f102 0310 	add.w	r3, r2, #16
 800763a:	4664      	mov	r4, ip
 800763c:	ed10 6a04 	vldr	s12, [r0, #-16]
 8007640:	ee62 4a25 	vmul.f32	s9, s4, s11
 8007644:	ee64 6a06 	vmul.f32	s13, s8, s12
 8007648:	ee22 5a85 	vmul.f32	s10, s5, s10
 800764c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8007650:	ee63 4a07 	vmul.f32	s9, s6, s14
 8007654:	ee76 6a85 	vadd.f32	s13, s13, s10
 8007658:	ee23 5aa7 	vmul.f32	s10, s7, s15
 800765c:	ee76 7aa4 	vadd.f32	s15, s13, s9
 8007660:	ee22 1a06 	vmul.f32	s2, s4, s12
 8007664:	ee77 7a85 	vadd.f32	s15, s15, s10
 8007668:	ee62 1aa5 	vmul.f32	s3, s5, s11
 800766c:	ed43 7a04 	vstr	s15, [r3, #-16]
 8007670:	ed50 4a03 	vldr	s9, [r0, #-12]
 8007674:	ee64 6a24 	vmul.f32	s13, s8, s9
 8007678:	ee23 5a27 	vmul.f32	s10, s6, s15
 800767c:	ee76 6a81 	vadd.f32	s13, s13, s2
 8007680:	ee63 5a87 	vmul.f32	s11, s7, s14
 8007684:	ee36 7aa1 	vadd.f32	s14, s13, s3
 8007688:	ee62 1a24 	vmul.f32	s3, s4, s9
 800768c:	ee37 7a05 	vadd.f32	s14, s14, s10
 8007690:	ee22 6a86 	vmul.f32	s12, s5, s12
 8007694:	ee37 7a25 	vadd.f32	s14, s14, s11
 8007698:	ee63 7aa7 	vmul.f32	s15, s7, s15
 800769c:	ed03 7a03 	vstr	s14, [r3, #-12]
 80076a0:	ed10 5a02 	vldr	s10, [r0, #-8]
 80076a4:	ee64 5a05 	vmul.f32	s11, s8, s10
 80076a8:	ee63 6a07 	vmul.f32	s13, s6, s14
 80076ac:	ee75 5aa1 	vadd.f32	s11, s11, s3
 80076b0:	ee62 1a05 	vmul.f32	s3, s4, s10
 80076b4:	ee75 5a86 	vadd.f32	s11, s11, s12
 80076b8:	ee62 4aa4 	vmul.f32	s9, s5, s9
 80076bc:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80076c0:	ee23 7a87 	vmul.f32	s14, s7, s14
 80076c4:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80076c8:	3c01      	subs	r4, #1
 80076ca:	ed43 7a02 	vstr	s15, [r3, #-8]
 80076ce:	ed50 5a01 	vldr	s11, [r0, #-4]
 80076d2:	ee24 6a25 	vmul.f32	s12, s8, s11
 80076d6:	ee63 6a27 	vmul.f32	s13, s6, s15
 80076da:	ee36 6a21 	vadd.f32	s12, s12, s3
 80076de:	f100 0010 	add.w	r0, r0, #16
 80076e2:	ee36 6a24 	vadd.f32	s12, s12, s9
 80076e6:	f103 0310 	add.w	r3, r3, #16
 80076ea:	ee36 6a26 	vadd.f32	s12, s12, s13
 80076ee:	ee36 7a07 	vadd.f32	s14, s12, s14
 80076f2:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 80076f6:	d1a1      	bne.n	800763c <arm_biquad_cascade_df1_f32+0x58>
 80076f8:	4449      	add	r1, r9
 80076fa:	4653      	mov	r3, sl
 80076fc:	f1be 0f00 	cmp.w	lr, #0
 8007700:	d047      	beq.n	8007792 <arm_biquad_cascade_df1_f32+0x1ae>
 8007702:	edd1 4a00 	vldr	s9, [r1]
 8007706:	ee22 6a25 	vmul.f32	s12, s4, s11
 800770a:	ee64 1a24 	vmul.f32	s3, s8, s9
 800770e:	ee62 6a85 	vmul.f32	s13, s5, s10
 8007712:	ee36 5a21 	vadd.f32	s10, s12, s3
 8007716:	ee23 6a07 	vmul.f32	s12, s6, s14
 800771a:	ee35 5a26 	vadd.f32	s10, s10, s13
 800771e:	ee63 7aa7 	vmul.f32	s15, s7, s15
 8007722:	ee35 6a06 	vadd.f32	s12, s10, s12
 8007726:	ee36 6a27 	vadd.f32	s12, s12, s15
 800772a:	ed83 6a00 	vstr	s12, [r3]
 800772e:	f1b8 0f00 	cmp.w	r8, #0
 8007732:	d040      	beq.n	80077b6 <arm_biquad_cascade_df1_f32+0x1d2>
 8007734:	ed91 5a01 	vldr	s10, [r1, #4]
 8007738:	ee62 7a24 	vmul.f32	s15, s4, s9
 800773c:	ee65 1a04 	vmul.f32	s3, s10, s8
 8007740:	ee62 6aa5 	vmul.f32	s13, s5, s11
 8007744:	ee77 5aa1 	vadd.f32	s11, s15, s3
 8007748:	ee63 7a06 	vmul.f32	s15, s6, s12
 800774c:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8007750:	ee23 7a87 	vmul.f32	s14, s7, s14
 8007754:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8007758:	f1b8 0f01 	cmp.w	r8, #1
 800775c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007760:	edc3 7a01 	vstr	s15, [r3, #4]
 8007764:	d030      	beq.n	80077c8 <arm_biquad_cascade_df1_f32+0x1e4>
 8007766:	edd1 5a02 	vldr	s11, [r1, #8]
 800776a:	ee25 2a02 	vmul.f32	s4, s10, s4
 800776e:	ee64 6a25 	vmul.f32	s13, s8, s11
 8007772:	ee62 2aa4 	vmul.f32	s5, s5, s9
 8007776:	ee76 6a82 	vadd.f32	s13, s13, s4
 800777a:	ee27 3a83 	vmul.f32	s6, s15, s6
 800777e:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8007782:	ee63 3a86 	vmul.f32	s7, s7, s12
 8007786:	ee76 6a83 	vadd.f32	s13, s13, s6
 800778a:	ee36 7aa3 	vadd.f32	s14, s13, s7
 800778e:	ed83 7a02 	vstr	s14, [r3, #8]
 8007792:	3f01      	subs	r7, #1
 8007794:	ed45 5a04 	vstr	s11, [r5, #-16]
 8007798:	ed05 5a03 	vstr	s10, [r5, #-12]
 800779c:	ed05 7a02 	vstr	s14, [r5, #-8]
 80077a0:	ed45 7a01 	vstr	s15, [r5, #-4]
 80077a4:	f106 0614 	add.w	r6, r6, #20
 80077a8:	f105 0510 	add.w	r5, r5, #16
 80077ac:	4611      	mov	r1, r2
 80077ae:	f47f af2a 	bne.w	8007606 <arm_biquad_cascade_df1_f32+0x22>
 80077b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077b6:	eef0 7a47 	vmov.f32	s15, s14
 80077ba:	eeb0 5a65 	vmov.f32	s10, s11
 80077be:	eeb0 7a46 	vmov.f32	s14, s12
 80077c2:	eef0 5a64 	vmov.f32	s11, s9
 80077c6:	e7e4      	b.n	8007792 <arm_biquad_cascade_df1_f32+0x1ae>
 80077c8:	eeb0 7a67 	vmov.f32	s14, s15
 80077cc:	eef0 5a45 	vmov.f32	s11, s10
 80077d0:	eef0 7a46 	vmov.f32	s15, s12
 80077d4:	eeb0 5a64 	vmov.f32	s10, s9
 80077d8:	e7db      	b.n	8007792 <arm_biquad_cascade_df1_f32+0x1ae>
 80077da:	4613      	mov	r3, r2
 80077dc:	e78e      	b.n	80076fc <arm_biquad_cascade_df1_f32+0x118>
 80077de:	bf00      	nop

080077e0 <__cvt>:
 80077e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077e4:	ec55 4b10 	vmov	r4, r5, d0
 80077e8:	2d00      	cmp	r5, #0
 80077ea:	460e      	mov	r6, r1
 80077ec:	4619      	mov	r1, r3
 80077ee:	462b      	mov	r3, r5
 80077f0:	bfbb      	ittet	lt
 80077f2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80077f6:	461d      	movlt	r5, r3
 80077f8:	2300      	movge	r3, #0
 80077fa:	232d      	movlt	r3, #45	; 0x2d
 80077fc:	700b      	strb	r3, [r1, #0]
 80077fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007800:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007804:	4691      	mov	r9, r2
 8007806:	f023 0820 	bic.w	r8, r3, #32
 800780a:	bfbc      	itt	lt
 800780c:	4622      	movlt	r2, r4
 800780e:	4614      	movlt	r4, r2
 8007810:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007814:	d005      	beq.n	8007822 <__cvt+0x42>
 8007816:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800781a:	d100      	bne.n	800781e <__cvt+0x3e>
 800781c:	3601      	adds	r6, #1
 800781e:	2102      	movs	r1, #2
 8007820:	e000      	b.n	8007824 <__cvt+0x44>
 8007822:	2103      	movs	r1, #3
 8007824:	ab03      	add	r3, sp, #12
 8007826:	9301      	str	r3, [sp, #4]
 8007828:	ab02      	add	r3, sp, #8
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	ec45 4b10 	vmov	d0, r4, r5
 8007830:	4653      	mov	r3, sl
 8007832:	4632      	mov	r2, r6
 8007834:	f000 fe64 	bl	8008500 <_dtoa_r>
 8007838:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800783c:	4607      	mov	r7, r0
 800783e:	d102      	bne.n	8007846 <__cvt+0x66>
 8007840:	f019 0f01 	tst.w	r9, #1
 8007844:	d022      	beq.n	800788c <__cvt+0xac>
 8007846:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800784a:	eb07 0906 	add.w	r9, r7, r6
 800784e:	d110      	bne.n	8007872 <__cvt+0x92>
 8007850:	783b      	ldrb	r3, [r7, #0]
 8007852:	2b30      	cmp	r3, #48	; 0x30
 8007854:	d10a      	bne.n	800786c <__cvt+0x8c>
 8007856:	2200      	movs	r2, #0
 8007858:	2300      	movs	r3, #0
 800785a:	4620      	mov	r0, r4
 800785c:	4629      	mov	r1, r5
 800785e:	f7f9 f953 	bl	8000b08 <__aeabi_dcmpeq>
 8007862:	b918      	cbnz	r0, 800786c <__cvt+0x8c>
 8007864:	f1c6 0601 	rsb	r6, r6, #1
 8007868:	f8ca 6000 	str.w	r6, [sl]
 800786c:	f8da 3000 	ldr.w	r3, [sl]
 8007870:	4499      	add	r9, r3
 8007872:	2200      	movs	r2, #0
 8007874:	2300      	movs	r3, #0
 8007876:	4620      	mov	r0, r4
 8007878:	4629      	mov	r1, r5
 800787a:	f7f9 f945 	bl	8000b08 <__aeabi_dcmpeq>
 800787e:	b108      	cbz	r0, 8007884 <__cvt+0xa4>
 8007880:	f8cd 900c 	str.w	r9, [sp, #12]
 8007884:	2230      	movs	r2, #48	; 0x30
 8007886:	9b03      	ldr	r3, [sp, #12]
 8007888:	454b      	cmp	r3, r9
 800788a:	d307      	bcc.n	800789c <__cvt+0xbc>
 800788c:	9b03      	ldr	r3, [sp, #12]
 800788e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007890:	1bdb      	subs	r3, r3, r7
 8007892:	4638      	mov	r0, r7
 8007894:	6013      	str	r3, [r2, #0]
 8007896:	b004      	add	sp, #16
 8007898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800789c:	1c59      	adds	r1, r3, #1
 800789e:	9103      	str	r1, [sp, #12]
 80078a0:	701a      	strb	r2, [r3, #0]
 80078a2:	e7f0      	b.n	8007886 <__cvt+0xa6>

080078a4 <__exponent>:
 80078a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078a6:	4603      	mov	r3, r0
 80078a8:	2900      	cmp	r1, #0
 80078aa:	bfb8      	it	lt
 80078ac:	4249      	neglt	r1, r1
 80078ae:	f803 2b02 	strb.w	r2, [r3], #2
 80078b2:	bfb4      	ite	lt
 80078b4:	222d      	movlt	r2, #45	; 0x2d
 80078b6:	222b      	movge	r2, #43	; 0x2b
 80078b8:	2909      	cmp	r1, #9
 80078ba:	7042      	strb	r2, [r0, #1]
 80078bc:	dd2a      	ble.n	8007914 <__exponent+0x70>
 80078be:	f10d 0207 	add.w	r2, sp, #7
 80078c2:	4617      	mov	r7, r2
 80078c4:	260a      	movs	r6, #10
 80078c6:	4694      	mov	ip, r2
 80078c8:	fb91 f5f6 	sdiv	r5, r1, r6
 80078cc:	fb06 1415 	mls	r4, r6, r5, r1
 80078d0:	3430      	adds	r4, #48	; 0x30
 80078d2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80078d6:	460c      	mov	r4, r1
 80078d8:	2c63      	cmp	r4, #99	; 0x63
 80078da:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80078de:	4629      	mov	r1, r5
 80078e0:	dcf1      	bgt.n	80078c6 <__exponent+0x22>
 80078e2:	3130      	adds	r1, #48	; 0x30
 80078e4:	f1ac 0402 	sub.w	r4, ip, #2
 80078e8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80078ec:	1c41      	adds	r1, r0, #1
 80078ee:	4622      	mov	r2, r4
 80078f0:	42ba      	cmp	r2, r7
 80078f2:	d30a      	bcc.n	800790a <__exponent+0x66>
 80078f4:	f10d 0209 	add.w	r2, sp, #9
 80078f8:	eba2 020c 	sub.w	r2, r2, ip
 80078fc:	42bc      	cmp	r4, r7
 80078fe:	bf88      	it	hi
 8007900:	2200      	movhi	r2, #0
 8007902:	4413      	add	r3, r2
 8007904:	1a18      	subs	r0, r3, r0
 8007906:	b003      	add	sp, #12
 8007908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800790a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800790e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007912:	e7ed      	b.n	80078f0 <__exponent+0x4c>
 8007914:	2330      	movs	r3, #48	; 0x30
 8007916:	3130      	adds	r1, #48	; 0x30
 8007918:	7083      	strb	r3, [r0, #2]
 800791a:	70c1      	strb	r1, [r0, #3]
 800791c:	1d03      	adds	r3, r0, #4
 800791e:	e7f1      	b.n	8007904 <__exponent+0x60>

08007920 <_printf_float>:
 8007920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007924:	ed2d 8b02 	vpush	{d8}
 8007928:	b08d      	sub	sp, #52	; 0x34
 800792a:	460c      	mov	r4, r1
 800792c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007930:	4616      	mov	r6, r2
 8007932:	461f      	mov	r7, r3
 8007934:	4605      	mov	r5, r0
 8007936:	f000 fcd5 	bl	80082e4 <_localeconv_r>
 800793a:	f8d0 a000 	ldr.w	sl, [r0]
 800793e:	4650      	mov	r0, sl
 8007940:	f7f8 fcb6 	bl	80002b0 <strlen>
 8007944:	2300      	movs	r3, #0
 8007946:	930a      	str	r3, [sp, #40]	; 0x28
 8007948:	6823      	ldr	r3, [r4, #0]
 800794a:	9305      	str	r3, [sp, #20]
 800794c:	f8d8 3000 	ldr.w	r3, [r8]
 8007950:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007954:	3307      	adds	r3, #7
 8007956:	f023 0307 	bic.w	r3, r3, #7
 800795a:	f103 0208 	add.w	r2, r3, #8
 800795e:	f8c8 2000 	str.w	r2, [r8]
 8007962:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007966:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800796a:	9307      	str	r3, [sp, #28]
 800796c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007970:	ee08 0a10 	vmov	s16, r0
 8007974:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007978:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800797c:	4b9e      	ldr	r3, [pc, #632]	; (8007bf8 <_printf_float+0x2d8>)
 800797e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007982:	f7f9 f8f3 	bl	8000b6c <__aeabi_dcmpun>
 8007986:	bb88      	cbnz	r0, 80079ec <_printf_float+0xcc>
 8007988:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800798c:	4b9a      	ldr	r3, [pc, #616]	; (8007bf8 <_printf_float+0x2d8>)
 800798e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007992:	f7f9 f8cd 	bl	8000b30 <__aeabi_dcmple>
 8007996:	bb48      	cbnz	r0, 80079ec <_printf_float+0xcc>
 8007998:	2200      	movs	r2, #0
 800799a:	2300      	movs	r3, #0
 800799c:	4640      	mov	r0, r8
 800799e:	4649      	mov	r1, r9
 80079a0:	f7f9 f8bc 	bl	8000b1c <__aeabi_dcmplt>
 80079a4:	b110      	cbz	r0, 80079ac <_printf_float+0x8c>
 80079a6:	232d      	movs	r3, #45	; 0x2d
 80079a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079ac:	4a93      	ldr	r2, [pc, #588]	; (8007bfc <_printf_float+0x2dc>)
 80079ae:	4b94      	ldr	r3, [pc, #592]	; (8007c00 <_printf_float+0x2e0>)
 80079b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80079b4:	bf94      	ite	ls
 80079b6:	4690      	movls	r8, r2
 80079b8:	4698      	movhi	r8, r3
 80079ba:	2303      	movs	r3, #3
 80079bc:	6123      	str	r3, [r4, #16]
 80079be:	9b05      	ldr	r3, [sp, #20]
 80079c0:	f023 0304 	bic.w	r3, r3, #4
 80079c4:	6023      	str	r3, [r4, #0]
 80079c6:	f04f 0900 	mov.w	r9, #0
 80079ca:	9700      	str	r7, [sp, #0]
 80079cc:	4633      	mov	r3, r6
 80079ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80079d0:	4621      	mov	r1, r4
 80079d2:	4628      	mov	r0, r5
 80079d4:	f000 f9da 	bl	8007d8c <_printf_common>
 80079d8:	3001      	adds	r0, #1
 80079da:	f040 8090 	bne.w	8007afe <_printf_float+0x1de>
 80079de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079e2:	b00d      	add	sp, #52	; 0x34
 80079e4:	ecbd 8b02 	vpop	{d8}
 80079e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ec:	4642      	mov	r2, r8
 80079ee:	464b      	mov	r3, r9
 80079f0:	4640      	mov	r0, r8
 80079f2:	4649      	mov	r1, r9
 80079f4:	f7f9 f8ba 	bl	8000b6c <__aeabi_dcmpun>
 80079f8:	b140      	cbz	r0, 8007a0c <_printf_float+0xec>
 80079fa:	464b      	mov	r3, r9
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	bfbc      	itt	lt
 8007a00:	232d      	movlt	r3, #45	; 0x2d
 8007a02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007a06:	4a7f      	ldr	r2, [pc, #508]	; (8007c04 <_printf_float+0x2e4>)
 8007a08:	4b7f      	ldr	r3, [pc, #508]	; (8007c08 <_printf_float+0x2e8>)
 8007a0a:	e7d1      	b.n	80079b0 <_printf_float+0x90>
 8007a0c:	6863      	ldr	r3, [r4, #4]
 8007a0e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007a12:	9206      	str	r2, [sp, #24]
 8007a14:	1c5a      	adds	r2, r3, #1
 8007a16:	d13f      	bne.n	8007a98 <_printf_float+0x178>
 8007a18:	2306      	movs	r3, #6
 8007a1a:	6063      	str	r3, [r4, #4]
 8007a1c:	9b05      	ldr	r3, [sp, #20]
 8007a1e:	6861      	ldr	r1, [r4, #4]
 8007a20:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007a24:	2300      	movs	r3, #0
 8007a26:	9303      	str	r3, [sp, #12]
 8007a28:	ab0a      	add	r3, sp, #40	; 0x28
 8007a2a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007a2e:	ab09      	add	r3, sp, #36	; 0x24
 8007a30:	ec49 8b10 	vmov	d0, r8, r9
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	6022      	str	r2, [r4, #0]
 8007a38:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	f7ff fecf 	bl	80077e0 <__cvt>
 8007a42:	9b06      	ldr	r3, [sp, #24]
 8007a44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a46:	2b47      	cmp	r3, #71	; 0x47
 8007a48:	4680      	mov	r8, r0
 8007a4a:	d108      	bne.n	8007a5e <_printf_float+0x13e>
 8007a4c:	1cc8      	adds	r0, r1, #3
 8007a4e:	db02      	blt.n	8007a56 <_printf_float+0x136>
 8007a50:	6863      	ldr	r3, [r4, #4]
 8007a52:	4299      	cmp	r1, r3
 8007a54:	dd41      	ble.n	8007ada <_printf_float+0x1ba>
 8007a56:	f1ab 0302 	sub.w	r3, fp, #2
 8007a5a:	fa5f fb83 	uxtb.w	fp, r3
 8007a5e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a62:	d820      	bhi.n	8007aa6 <_printf_float+0x186>
 8007a64:	3901      	subs	r1, #1
 8007a66:	465a      	mov	r2, fp
 8007a68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a6c:	9109      	str	r1, [sp, #36]	; 0x24
 8007a6e:	f7ff ff19 	bl	80078a4 <__exponent>
 8007a72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a74:	1813      	adds	r3, r2, r0
 8007a76:	2a01      	cmp	r2, #1
 8007a78:	4681      	mov	r9, r0
 8007a7a:	6123      	str	r3, [r4, #16]
 8007a7c:	dc02      	bgt.n	8007a84 <_printf_float+0x164>
 8007a7e:	6822      	ldr	r2, [r4, #0]
 8007a80:	07d2      	lsls	r2, r2, #31
 8007a82:	d501      	bpl.n	8007a88 <_printf_float+0x168>
 8007a84:	3301      	adds	r3, #1
 8007a86:	6123      	str	r3, [r4, #16]
 8007a88:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d09c      	beq.n	80079ca <_printf_float+0xaa>
 8007a90:	232d      	movs	r3, #45	; 0x2d
 8007a92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a96:	e798      	b.n	80079ca <_printf_float+0xaa>
 8007a98:	9a06      	ldr	r2, [sp, #24]
 8007a9a:	2a47      	cmp	r2, #71	; 0x47
 8007a9c:	d1be      	bne.n	8007a1c <_printf_float+0xfc>
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1bc      	bne.n	8007a1c <_printf_float+0xfc>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e7b9      	b.n	8007a1a <_printf_float+0xfa>
 8007aa6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007aaa:	d118      	bne.n	8007ade <_printf_float+0x1be>
 8007aac:	2900      	cmp	r1, #0
 8007aae:	6863      	ldr	r3, [r4, #4]
 8007ab0:	dd0b      	ble.n	8007aca <_printf_float+0x1aa>
 8007ab2:	6121      	str	r1, [r4, #16]
 8007ab4:	b913      	cbnz	r3, 8007abc <_printf_float+0x19c>
 8007ab6:	6822      	ldr	r2, [r4, #0]
 8007ab8:	07d0      	lsls	r0, r2, #31
 8007aba:	d502      	bpl.n	8007ac2 <_printf_float+0x1a2>
 8007abc:	3301      	adds	r3, #1
 8007abe:	440b      	add	r3, r1
 8007ac0:	6123      	str	r3, [r4, #16]
 8007ac2:	65a1      	str	r1, [r4, #88]	; 0x58
 8007ac4:	f04f 0900 	mov.w	r9, #0
 8007ac8:	e7de      	b.n	8007a88 <_printf_float+0x168>
 8007aca:	b913      	cbnz	r3, 8007ad2 <_printf_float+0x1b2>
 8007acc:	6822      	ldr	r2, [r4, #0]
 8007ace:	07d2      	lsls	r2, r2, #31
 8007ad0:	d501      	bpl.n	8007ad6 <_printf_float+0x1b6>
 8007ad2:	3302      	adds	r3, #2
 8007ad4:	e7f4      	b.n	8007ac0 <_printf_float+0x1a0>
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e7f2      	b.n	8007ac0 <_printf_float+0x1a0>
 8007ada:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ae0:	4299      	cmp	r1, r3
 8007ae2:	db05      	blt.n	8007af0 <_printf_float+0x1d0>
 8007ae4:	6823      	ldr	r3, [r4, #0]
 8007ae6:	6121      	str	r1, [r4, #16]
 8007ae8:	07d8      	lsls	r0, r3, #31
 8007aea:	d5ea      	bpl.n	8007ac2 <_printf_float+0x1a2>
 8007aec:	1c4b      	adds	r3, r1, #1
 8007aee:	e7e7      	b.n	8007ac0 <_printf_float+0x1a0>
 8007af0:	2900      	cmp	r1, #0
 8007af2:	bfd4      	ite	le
 8007af4:	f1c1 0202 	rsble	r2, r1, #2
 8007af8:	2201      	movgt	r2, #1
 8007afa:	4413      	add	r3, r2
 8007afc:	e7e0      	b.n	8007ac0 <_printf_float+0x1a0>
 8007afe:	6823      	ldr	r3, [r4, #0]
 8007b00:	055a      	lsls	r2, r3, #21
 8007b02:	d407      	bmi.n	8007b14 <_printf_float+0x1f4>
 8007b04:	6923      	ldr	r3, [r4, #16]
 8007b06:	4642      	mov	r2, r8
 8007b08:	4631      	mov	r1, r6
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	47b8      	blx	r7
 8007b0e:	3001      	adds	r0, #1
 8007b10:	d12c      	bne.n	8007b6c <_printf_float+0x24c>
 8007b12:	e764      	b.n	80079de <_printf_float+0xbe>
 8007b14:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b18:	f240 80e0 	bls.w	8007cdc <_printf_float+0x3bc>
 8007b1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b20:	2200      	movs	r2, #0
 8007b22:	2300      	movs	r3, #0
 8007b24:	f7f8 fff0 	bl	8000b08 <__aeabi_dcmpeq>
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	d034      	beq.n	8007b96 <_printf_float+0x276>
 8007b2c:	4a37      	ldr	r2, [pc, #220]	; (8007c0c <_printf_float+0x2ec>)
 8007b2e:	2301      	movs	r3, #1
 8007b30:	4631      	mov	r1, r6
 8007b32:	4628      	mov	r0, r5
 8007b34:	47b8      	blx	r7
 8007b36:	3001      	adds	r0, #1
 8007b38:	f43f af51 	beq.w	80079de <_printf_float+0xbe>
 8007b3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b40:	429a      	cmp	r2, r3
 8007b42:	db02      	blt.n	8007b4a <_printf_float+0x22a>
 8007b44:	6823      	ldr	r3, [r4, #0]
 8007b46:	07d8      	lsls	r0, r3, #31
 8007b48:	d510      	bpl.n	8007b6c <_printf_float+0x24c>
 8007b4a:	ee18 3a10 	vmov	r3, s16
 8007b4e:	4652      	mov	r2, sl
 8007b50:	4631      	mov	r1, r6
 8007b52:	4628      	mov	r0, r5
 8007b54:	47b8      	blx	r7
 8007b56:	3001      	adds	r0, #1
 8007b58:	f43f af41 	beq.w	80079de <_printf_float+0xbe>
 8007b5c:	f04f 0800 	mov.w	r8, #0
 8007b60:	f104 091a 	add.w	r9, r4, #26
 8007b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b66:	3b01      	subs	r3, #1
 8007b68:	4543      	cmp	r3, r8
 8007b6a:	dc09      	bgt.n	8007b80 <_printf_float+0x260>
 8007b6c:	6823      	ldr	r3, [r4, #0]
 8007b6e:	079b      	lsls	r3, r3, #30
 8007b70:	f100 8107 	bmi.w	8007d82 <_printf_float+0x462>
 8007b74:	68e0      	ldr	r0, [r4, #12]
 8007b76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b78:	4298      	cmp	r0, r3
 8007b7a:	bfb8      	it	lt
 8007b7c:	4618      	movlt	r0, r3
 8007b7e:	e730      	b.n	80079e2 <_printf_float+0xc2>
 8007b80:	2301      	movs	r3, #1
 8007b82:	464a      	mov	r2, r9
 8007b84:	4631      	mov	r1, r6
 8007b86:	4628      	mov	r0, r5
 8007b88:	47b8      	blx	r7
 8007b8a:	3001      	adds	r0, #1
 8007b8c:	f43f af27 	beq.w	80079de <_printf_float+0xbe>
 8007b90:	f108 0801 	add.w	r8, r8, #1
 8007b94:	e7e6      	b.n	8007b64 <_printf_float+0x244>
 8007b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	dc39      	bgt.n	8007c10 <_printf_float+0x2f0>
 8007b9c:	4a1b      	ldr	r2, [pc, #108]	; (8007c0c <_printf_float+0x2ec>)
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	4631      	mov	r1, r6
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	47b8      	blx	r7
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	f43f af19 	beq.w	80079de <_printf_float+0xbe>
 8007bac:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	d102      	bne.n	8007bba <_printf_float+0x29a>
 8007bb4:	6823      	ldr	r3, [r4, #0]
 8007bb6:	07d9      	lsls	r1, r3, #31
 8007bb8:	d5d8      	bpl.n	8007b6c <_printf_float+0x24c>
 8007bba:	ee18 3a10 	vmov	r3, s16
 8007bbe:	4652      	mov	r2, sl
 8007bc0:	4631      	mov	r1, r6
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	47b8      	blx	r7
 8007bc6:	3001      	adds	r0, #1
 8007bc8:	f43f af09 	beq.w	80079de <_printf_float+0xbe>
 8007bcc:	f04f 0900 	mov.w	r9, #0
 8007bd0:	f104 0a1a 	add.w	sl, r4, #26
 8007bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bd6:	425b      	negs	r3, r3
 8007bd8:	454b      	cmp	r3, r9
 8007bda:	dc01      	bgt.n	8007be0 <_printf_float+0x2c0>
 8007bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bde:	e792      	b.n	8007b06 <_printf_float+0x1e6>
 8007be0:	2301      	movs	r3, #1
 8007be2:	4652      	mov	r2, sl
 8007be4:	4631      	mov	r1, r6
 8007be6:	4628      	mov	r0, r5
 8007be8:	47b8      	blx	r7
 8007bea:	3001      	adds	r0, #1
 8007bec:	f43f aef7 	beq.w	80079de <_printf_float+0xbe>
 8007bf0:	f109 0901 	add.w	r9, r9, #1
 8007bf4:	e7ee      	b.n	8007bd4 <_printf_float+0x2b4>
 8007bf6:	bf00      	nop
 8007bf8:	7fefffff 	.word	0x7fefffff
 8007bfc:	0800afd0 	.word	0x0800afd0
 8007c00:	0800afd4 	.word	0x0800afd4
 8007c04:	0800afd8 	.word	0x0800afd8
 8007c08:	0800afdc 	.word	0x0800afdc
 8007c0c:	0800afe0 	.word	0x0800afe0
 8007c10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c14:	429a      	cmp	r2, r3
 8007c16:	bfa8      	it	ge
 8007c18:	461a      	movge	r2, r3
 8007c1a:	2a00      	cmp	r2, #0
 8007c1c:	4691      	mov	r9, r2
 8007c1e:	dc37      	bgt.n	8007c90 <_printf_float+0x370>
 8007c20:	f04f 0b00 	mov.w	fp, #0
 8007c24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c28:	f104 021a 	add.w	r2, r4, #26
 8007c2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c2e:	9305      	str	r3, [sp, #20]
 8007c30:	eba3 0309 	sub.w	r3, r3, r9
 8007c34:	455b      	cmp	r3, fp
 8007c36:	dc33      	bgt.n	8007ca0 <_printf_float+0x380>
 8007c38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	db3b      	blt.n	8007cb8 <_printf_float+0x398>
 8007c40:	6823      	ldr	r3, [r4, #0]
 8007c42:	07da      	lsls	r2, r3, #31
 8007c44:	d438      	bmi.n	8007cb8 <_printf_float+0x398>
 8007c46:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007c4a:	eba2 0903 	sub.w	r9, r2, r3
 8007c4e:	9b05      	ldr	r3, [sp, #20]
 8007c50:	1ad2      	subs	r2, r2, r3
 8007c52:	4591      	cmp	r9, r2
 8007c54:	bfa8      	it	ge
 8007c56:	4691      	movge	r9, r2
 8007c58:	f1b9 0f00 	cmp.w	r9, #0
 8007c5c:	dc35      	bgt.n	8007cca <_printf_float+0x3aa>
 8007c5e:	f04f 0800 	mov.w	r8, #0
 8007c62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c66:	f104 0a1a 	add.w	sl, r4, #26
 8007c6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c6e:	1a9b      	subs	r3, r3, r2
 8007c70:	eba3 0309 	sub.w	r3, r3, r9
 8007c74:	4543      	cmp	r3, r8
 8007c76:	f77f af79 	ble.w	8007b6c <_printf_float+0x24c>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	4652      	mov	r2, sl
 8007c7e:	4631      	mov	r1, r6
 8007c80:	4628      	mov	r0, r5
 8007c82:	47b8      	blx	r7
 8007c84:	3001      	adds	r0, #1
 8007c86:	f43f aeaa 	beq.w	80079de <_printf_float+0xbe>
 8007c8a:	f108 0801 	add.w	r8, r8, #1
 8007c8e:	e7ec      	b.n	8007c6a <_printf_float+0x34a>
 8007c90:	4613      	mov	r3, r2
 8007c92:	4631      	mov	r1, r6
 8007c94:	4642      	mov	r2, r8
 8007c96:	4628      	mov	r0, r5
 8007c98:	47b8      	blx	r7
 8007c9a:	3001      	adds	r0, #1
 8007c9c:	d1c0      	bne.n	8007c20 <_printf_float+0x300>
 8007c9e:	e69e      	b.n	80079de <_printf_float+0xbe>
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	4631      	mov	r1, r6
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	9205      	str	r2, [sp, #20]
 8007ca8:	47b8      	blx	r7
 8007caa:	3001      	adds	r0, #1
 8007cac:	f43f ae97 	beq.w	80079de <_printf_float+0xbe>
 8007cb0:	9a05      	ldr	r2, [sp, #20]
 8007cb2:	f10b 0b01 	add.w	fp, fp, #1
 8007cb6:	e7b9      	b.n	8007c2c <_printf_float+0x30c>
 8007cb8:	ee18 3a10 	vmov	r3, s16
 8007cbc:	4652      	mov	r2, sl
 8007cbe:	4631      	mov	r1, r6
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	47b8      	blx	r7
 8007cc4:	3001      	adds	r0, #1
 8007cc6:	d1be      	bne.n	8007c46 <_printf_float+0x326>
 8007cc8:	e689      	b.n	80079de <_printf_float+0xbe>
 8007cca:	9a05      	ldr	r2, [sp, #20]
 8007ccc:	464b      	mov	r3, r9
 8007cce:	4442      	add	r2, r8
 8007cd0:	4631      	mov	r1, r6
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	47b8      	blx	r7
 8007cd6:	3001      	adds	r0, #1
 8007cd8:	d1c1      	bne.n	8007c5e <_printf_float+0x33e>
 8007cda:	e680      	b.n	80079de <_printf_float+0xbe>
 8007cdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cde:	2a01      	cmp	r2, #1
 8007ce0:	dc01      	bgt.n	8007ce6 <_printf_float+0x3c6>
 8007ce2:	07db      	lsls	r3, r3, #31
 8007ce4:	d53a      	bpl.n	8007d5c <_printf_float+0x43c>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	4642      	mov	r2, r8
 8007cea:	4631      	mov	r1, r6
 8007cec:	4628      	mov	r0, r5
 8007cee:	47b8      	blx	r7
 8007cf0:	3001      	adds	r0, #1
 8007cf2:	f43f ae74 	beq.w	80079de <_printf_float+0xbe>
 8007cf6:	ee18 3a10 	vmov	r3, s16
 8007cfa:	4652      	mov	r2, sl
 8007cfc:	4631      	mov	r1, r6
 8007cfe:	4628      	mov	r0, r5
 8007d00:	47b8      	blx	r7
 8007d02:	3001      	adds	r0, #1
 8007d04:	f43f ae6b 	beq.w	80079de <_printf_float+0xbe>
 8007d08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	2300      	movs	r3, #0
 8007d10:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007d14:	f7f8 fef8 	bl	8000b08 <__aeabi_dcmpeq>
 8007d18:	b9d8      	cbnz	r0, 8007d52 <_printf_float+0x432>
 8007d1a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007d1e:	f108 0201 	add.w	r2, r8, #1
 8007d22:	4631      	mov	r1, r6
 8007d24:	4628      	mov	r0, r5
 8007d26:	47b8      	blx	r7
 8007d28:	3001      	adds	r0, #1
 8007d2a:	d10e      	bne.n	8007d4a <_printf_float+0x42a>
 8007d2c:	e657      	b.n	80079de <_printf_float+0xbe>
 8007d2e:	2301      	movs	r3, #1
 8007d30:	4652      	mov	r2, sl
 8007d32:	4631      	mov	r1, r6
 8007d34:	4628      	mov	r0, r5
 8007d36:	47b8      	blx	r7
 8007d38:	3001      	adds	r0, #1
 8007d3a:	f43f ae50 	beq.w	80079de <_printf_float+0xbe>
 8007d3e:	f108 0801 	add.w	r8, r8, #1
 8007d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d44:	3b01      	subs	r3, #1
 8007d46:	4543      	cmp	r3, r8
 8007d48:	dcf1      	bgt.n	8007d2e <_printf_float+0x40e>
 8007d4a:	464b      	mov	r3, r9
 8007d4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d50:	e6da      	b.n	8007b08 <_printf_float+0x1e8>
 8007d52:	f04f 0800 	mov.w	r8, #0
 8007d56:	f104 0a1a 	add.w	sl, r4, #26
 8007d5a:	e7f2      	b.n	8007d42 <_printf_float+0x422>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	4642      	mov	r2, r8
 8007d60:	e7df      	b.n	8007d22 <_printf_float+0x402>
 8007d62:	2301      	movs	r3, #1
 8007d64:	464a      	mov	r2, r9
 8007d66:	4631      	mov	r1, r6
 8007d68:	4628      	mov	r0, r5
 8007d6a:	47b8      	blx	r7
 8007d6c:	3001      	adds	r0, #1
 8007d6e:	f43f ae36 	beq.w	80079de <_printf_float+0xbe>
 8007d72:	f108 0801 	add.w	r8, r8, #1
 8007d76:	68e3      	ldr	r3, [r4, #12]
 8007d78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d7a:	1a5b      	subs	r3, r3, r1
 8007d7c:	4543      	cmp	r3, r8
 8007d7e:	dcf0      	bgt.n	8007d62 <_printf_float+0x442>
 8007d80:	e6f8      	b.n	8007b74 <_printf_float+0x254>
 8007d82:	f04f 0800 	mov.w	r8, #0
 8007d86:	f104 0919 	add.w	r9, r4, #25
 8007d8a:	e7f4      	b.n	8007d76 <_printf_float+0x456>

08007d8c <_printf_common>:
 8007d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d90:	4616      	mov	r6, r2
 8007d92:	4699      	mov	r9, r3
 8007d94:	688a      	ldr	r2, [r1, #8]
 8007d96:	690b      	ldr	r3, [r1, #16]
 8007d98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	bfb8      	it	lt
 8007da0:	4613      	movlt	r3, r2
 8007da2:	6033      	str	r3, [r6, #0]
 8007da4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007da8:	4607      	mov	r7, r0
 8007daa:	460c      	mov	r4, r1
 8007dac:	b10a      	cbz	r2, 8007db2 <_printf_common+0x26>
 8007dae:	3301      	adds	r3, #1
 8007db0:	6033      	str	r3, [r6, #0]
 8007db2:	6823      	ldr	r3, [r4, #0]
 8007db4:	0699      	lsls	r1, r3, #26
 8007db6:	bf42      	ittt	mi
 8007db8:	6833      	ldrmi	r3, [r6, #0]
 8007dba:	3302      	addmi	r3, #2
 8007dbc:	6033      	strmi	r3, [r6, #0]
 8007dbe:	6825      	ldr	r5, [r4, #0]
 8007dc0:	f015 0506 	ands.w	r5, r5, #6
 8007dc4:	d106      	bne.n	8007dd4 <_printf_common+0x48>
 8007dc6:	f104 0a19 	add.w	sl, r4, #25
 8007dca:	68e3      	ldr	r3, [r4, #12]
 8007dcc:	6832      	ldr	r2, [r6, #0]
 8007dce:	1a9b      	subs	r3, r3, r2
 8007dd0:	42ab      	cmp	r3, r5
 8007dd2:	dc26      	bgt.n	8007e22 <_printf_common+0x96>
 8007dd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007dd8:	1e13      	subs	r3, r2, #0
 8007dda:	6822      	ldr	r2, [r4, #0]
 8007ddc:	bf18      	it	ne
 8007dde:	2301      	movne	r3, #1
 8007de0:	0692      	lsls	r2, r2, #26
 8007de2:	d42b      	bmi.n	8007e3c <_printf_common+0xb0>
 8007de4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007de8:	4649      	mov	r1, r9
 8007dea:	4638      	mov	r0, r7
 8007dec:	47c0      	blx	r8
 8007dee:	3001      	adds	r0, #1
 8007df0:	d01e      	beq.n	8007e30 <_printf_common+0xa4>
 8007df2:	6823      	ldr	r3, [r4, #0]
 8007df4:	6922      	ldr	r2, [r4, #16]
 8007df6:	f003 0306 	and.w	r3, r3, #6
 8007dfa:	2b04      	cmp	r3, #4
 8007dfc:	bf02      	ittt	eq
 8007dfe:	68e5      	ldreq	r5, [r4, #12]
 8007e00:	6833      	ldreq	r3, [r6, #0]
 8007e02:	1aed      	subeq	r5, r5, r3
 8007e04:	68a3      	ldr	r3, [r4, #8]
 8007e06:	bf0c      	ite	eq
 8007e08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e0c:	2500      	movne	r5, #0
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	bfc4      	itt	gt
 8007e12:	1a9b      	subgt	r3, r3, r2
 8007e14:	18ed      	addgt	r5, r5, r3
 8007e16:	2600      	movs	r6, #0
 8007e18:	341a      	adds	r4, #26
 8007e1a:	42b5      	cmp	r5, r6
 8007e1c:	d11a      	bne.n	8007e54 <_printf_common+0xc8>
 8007e1e:	2000      	movs	r0, #0
 8007e20:	e008      	b.n	8007e34 <_printf_common+0xa8>
 8007e22:	2301      	movs	r3, #1
 8007e24:	4652      	mov	r2, sl
 8007e26:	4649      	mov	r1, r9
 8007e28:	4638      	mov	r0, r7
 8007e2a:	47c0      	blx	r8
 8007e2c:	3001      	adds	r0, #1
 8007e2e:	d103      	bne.n	8007e38 <_printf_common+0xac>
 8007e30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e38:	3501      	adds	r5, #1
 8007e3a:	e7c6      	b.n	8007dca <_printf_common+0x3e>
 8007e3c:	18e1      	adds	r1, r4, r3
 8007e3e:	1c5a      	adds	r2, r3, #1
 8007e40:	2030      	movs	r0, #48	; 0x30
 8007e42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e46:	4422      	add	r2, r4
 8007e48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e50:	3302      	adds	r3, #2
 8007e52:	e7c7      	b.n	8007de4 <_printf_common+0x58>
 8007e54:	2301      	movs	r3, #1
 8007e56:	4622      	mov	r2, r4
 8007e58:	4649      	mov	r1, r9
 8007e5a:	4638      	mov	r0, r7
 8007e5c:	47c0      	blx	r8
 8007e5e:	3001      	adds	r0, #1
 8007e60:	d0e6      	beq.n	8007e30 <_printf_common+0xa4>
 8007e62:	3601      	adds	r6, #1
 8007e64:	e7d9      	b.n	8007e1a <_printf_common+0x8e>
	...

08007e68 <_printf_i>:
 8007e68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e6c:	7e0f      	ldrb	r7, [r1, #24]
 8007e6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e70:	2f78      	cmp	r7, #120	; 0x78
 8007e72:	4691      	mov	r9, r2
 8007e74:	4680      	mov	r8, r0
 8007e76:	460c      	mov	r4, r1
 8007e78:	469a      	mov	sl, r3
 8007e7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e7e:	d807      	bhi.n	8007e90 <_printf_i+0x28>
 8007e80:	2f62      	cmp	r7, #98	; 0x62
 8007e82:	d80a      	bhi.n	8007e9a <_printf_i+0x32>
 8007e84:	2f00      	cmp	r7, #0
 8007e86:	f000 80d4 	beq.w	8008032 <_printf_i+0x1ca>
 8007e8a:	2f58      	cmp	r7, #88	; 0x58
 8007e8c:	f000 80c0 	beq.w	8008010 <_printf_i+0x1a8>
 8007e90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e98:	e03a      	b.n	8007f10 <_printf_i+0xa8>
 8007e9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e9e:	2b15      	cmp	r3, #21
 8007ea0:	d8f6      	bhi.n	8007e90 <_printf_i+0x28>
 8007ea2:	a101      	add	r1, pc, #4	; (adr r1, 8007ea8 <_printf_i+0x40>)
 8007ea4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ea8:	08007f01 	.word	0x08007f01
 8007eac:	08007f15 	.word	0x08007f15
 8007eb0:	08007e91 	.word	0x08007e91
 8007eb4:	08007e91 	.word	0x08007e91
 8007eb8:	08007e91 	.word	0x08007e91
 8007ebc:	08007e91 	.word	0x08007e91
 8007ec0:	08007f15 	.word	0x08007f15
 8007ec4:	08007e91 	.word	0x08007e91
 8007ec8:	08007e91 	.word	0x08007e91
 8007ecc:	08007e91 	.word	0x08007e91
 8007ed0:	08007e91 	.word	0x08007e91
 8007ed4:	08008019 	.word	0x08008019
 8007ed8:	08007f41 	.word	0x08007f41
 8007edc:	08007fd3 	.word	0x08007fd3
 8007ee0:	08007e91 	.word	0x08007e91
 8007ee4:	08007e91 	.word	0x08007e91
 8007ee8:	0800803b 	.word	0x0800803b
 8007eec:	08007e91 	.word	0x08007e91
 8007ef0:	08007f41 	.word	0x08007f41
 8007ef4:	08007e91 	.word	0x08007e91
 8007ef8:	08007e91 	.word	0x08007e91
 8007efc:	08007fdb 	.word	0x08007fdb
 8007f00:	682b      	ldr	r3, [r5, #0]
 8007f02:	1d1a      	adds	r2, r3, #4
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	602a      	str	r2, [r5, #0]
 8007f08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f10:	2301      	movs	r3, #1
 8007f12:	e09f      	b.n	8008054 <_printf_i+0x1ec>
 8007f14:	6820      	ldr	r0, [r4, #0]
 8007f16:	682b      	ldr	r3, [r5, #0]
 8007f18:	0607      	lsls	r7, r0, #24
 8007f1a:	f103 0104 	add.w	r1, r3, #4
 8007f1e:	6029      	str	r1, [r5, #0]
 8007f20:	d501      	bpl.n	8007f26 <_printf_i+0xbe>
 8007f22:	681e      	ldr	r6, [r3, #0]
 8007f24:	e003      	b.n	8007f2e <_printf_i+0xc6>
 8007f26:	0646      	lsls	r6, r0, #25
 8007f28:	d5fb      	bpl.n	8007f22 <_printf_i+0xba>
 8007f2a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007f2e:	2e00      	cmp	r6, #0
 8007f30:	da03      	bge.n	8007f3a <_printf_i+0xd2>
 8007f32:	232d      	movs	r3, #45	; 0x2d
 8007f34:	4276      	negs	r6, r6
 8007f36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f3a:	485a      	ldr	r0, [pc, #360]	; (80080a4 <_printf_i+0x23c>)
 8007f3c:	230a      	movs	r3, #10
 8007f3e:	e012      	b.n	8007f66 <_printf_i+0xfe>
 8007f40:	682b      	ldr	r3, [r5, #0]
 8007f42:	6820      	ldr	r0, [r4, #0]
 8007f44:	1d19      	adds	r1, r3, #4
 8007f46:	6029      	str	r1, [r5, #0]
 8007f48:	0605      	lsls	r5, r0, #24
 8007f4a:	d501      	bpl.n	8007f50 <_printf_i+0xe8>
 8007f4c:	681e      	ldr	r6, [r3, #0]
 8007f4e:	e002      	b.n	8007f56 <_printf_i+0xee>
 8007f50:	0641      	lsls	r1, r0, #25
 8007f52:	d5fb      	bpl.n	8007f4c <_printf_i+0xe4>
 8007f54:	881e      	ldrh	r6, [r3, #0]
 8007f56:	4853      	ldr	r0, [pc, #332]	; (80080a4 <_printf_i+0x23c>)
 8007f58:	2f6f      	cmp	r7, #111	; 0x6f
 8007f5a:	bf0c      	ite	eq
 8007f5c:	2308      	moveq	r3, #8
 8007f5e:	230a      	movne	r3, #10
 8007f60:	2100      	movs	r1, #0
 8007f62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f66:	6865      	ldr	r5, [r4, #4]
 8007f68:	60a5      	str	r5, [r4, #8]
 8007f6a:	2d00      	cmp	r5, #0
 8007f6c:	bfa2      	ittt	ge
 8007f6e:	6821      	ldrge	r1, [r4, #0]
 8007f70:	f021 0104 	bicge.w	r1, r1, #4
 8007f74:	6021      	strge	r1, [r4, #0]
 8007f76:	b90e      	cbnz	r6, 8007f7c <_printf_i+0x114>
 8007f78:	2d00      	cmp	r5, #0
 8007f7a:	d04b      	beq.n	8008014 <_printf_i+0x1ac>
 8007f7c:	4615      	mov	r5, r2
 8007f7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f82:	fb03 6711 	mls	r7, r3, r1, r6
 8007f86:	5dc7      	ldrb	r7, [r0, r7]
 8007f88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f8c:	4637      	mov	r7, r6
 8007f8e:	42bb      	cmp	r3, r7
 8007f90:	460e      	mov	r6, r1
 8007f92:	d9f4      	bls.n	8007f7e <_printf_i+0x116>
 8007f94:	2b08      	cmp	r3, #8
 8007f96:	d10b      	bne.n	8007fb0 <_printf_i+0x148>
 8007f98:	6823      	ldr	r3, [r4, #0]
 8007f9a:	07de      	lsls	r6, r3, #31
 8007f9c:	d508      	bpl.n	8007fb0 <_printf_i+0x148>
 8007f9e:	6923      	ldr	r3, [r4, #16]
 8007fa0:	6861      	ldr	r1, [r4, #4]
 8007fa2:	4299      	cmp	r1, r3
 8007fa4:	bfde      	ittt	le
 8007fa6:	2330      	movle	r3, #48	; 0x30
 8007fa8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007fac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007fb0:	1b52      	subs	r2, r2, r5
 8007fb2:	6122      	str	r2, [r4, #16]
 8007fb4:	f8cd a000 	str.w	sl, [sp]
 8007fb8:	464b      	mov	r3, r9
 8007fba:	aa03      	add	r2, sp, #12
 8007fbc:	4621      	mov	r1, r4
 8007fbe:	4640      	mov	r0, r8
 8007fc0:	f7ff fee4 	bl	8007d8c <_printf_common>
 8007fc4:	3001      	adds	r0, #1
 8007fc6:	d14a      	bne.n	800805e <_printf_i+0x1f6>
 8007fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fcc:	b004      	add	sp, #16
 8007fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	f043 0320 	orr.w	r3, r3, #32
 8007fd8:	6023      	str	r3, [r4, #0]
 8007fda:	4833      	ldr	r0, [pc, #204]	; (80080a8 <_printf_i+0x240>)
 8007fdc:	2778      	movs	r7, #120	; 0x78
 8007fde:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007fe2:	6823      	ldr	r3, [r4, #0]
 8007fe4:	6829      	ldr	r1, [r5, #0]
 8007fe6:	061f      	lsls	r7, r3, #24
 8007fe8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007fec:	d402      	bmi.n	8007ff4 <_printf_i+0x18c>
 8007fee:	065f      	lsls	r7, r3, #25
 8007ff0:	bf48      	it	mi
 8007ff2:	b2b6      	uxthmi	r6, r6
 8007ff4:	07df      	lsls	r7, r3, #31
 8007ff6:	bf48      	it	mi
 8007ff8:	f043 0320 	orrmi.w	r3, r3, #32
 8007ffc:	6029      	str	r1, [r5, #0]
 8007ffe:	bf48      	it	mi
 8008000:	6023      	strmi	r3, [r4, #0]
 8008002:	b91e      	cbnz	r6, 800800c <_printf_i+0x1a4>
 8008004:	6823      	ldr	r3, [r4, #0]
 8008006:	f023 0320 	bic.w	r3, r3, #32
 800800a:	6023      	str	r3, [r4, #0]
 800800c:	2310      	movs	r3, #16
 800800e:	e7a7      	b.n	8007f60 <_printf_i+0xf8>
 8008010:	4824      	ldr	r0, [pc, #144]	; (80080a4 <_printf_i+0x23c>)
 8008012:	e7e4      	b.n	8007fde <_printf_i+0x176>
 8008014:	4615      	mov	r5, r2
 8008016:	e7bd      	b.n	8007f94 <_printf_i+0x12c>
 8008018:	682b      	ldr	r3, [r5, #0]
 800801a:	6826      	ldr	r6, [r4, #0]
 800801c:	6961      	ldr	r1, [r4, #20]
 800801e:	1d18      	adds	r0, r3, #4
 8008020:	6028      	str	r0, [r5, #0]
 8008022:	0635      	lsls	r5, r6, #24
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	d501      	bpl.n	800802c <_printf_i+0x1c4>
 8008028:	6019      	str	r1, [r3, #0]
 800802a:	e002      	b.n	8008032 <_printf_i+0x1ca>
 800802c:	0670      	lsls	r0, r6, #25
 800802e:	d5fb      	bpl.n	8008028 <_printf_i+0x1c0>
 8008030:	8019      	strh	r1, [r3, #0]
 8008032:	2300      	movs	r3, #0
 8008034:	6123      	str	r3, [r4, #16]
 8008036:	4615      	mov	r5, r2
 8008038:	e7bc      	b.n	8007fb4 <_printf_i+0x14c>
 800803a:	682b      	ldr	r3, [r5, #0]
 800803c:	1d1a      	adds	r2, r3, #4
 800803e:	602a      	str	r2, [r5, #0]
 8008040:	681d      	ldr	r5, [r3, #0]
 8008042:	6862      	ldr	r2, [r4, #4]
 8008044:	2100      	movs	r1, #0
 8008046:	4628      	mov	r0, r5
 8008048:	f7f8 f8e2 	bl	8000210 <memchr>
 800804c:	b108      	cbz	r0, 8008052 <_printf_i+0x1ea>
 800804e:	1b40      	subs	r0, r0, r5
 8008050:	6060      	str	r0, [r4, #4]
 8008052:	6863      	ldr	r3, [r4, #4]
 8008054:	6123      	str	r3, [r4, #16]
 8008056:	2300      	movs	r3, #0
 8008058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800805c:	e7aa      	b.n	8007fb4 <_printf_i+0x14c>
 800805e:	6923      	ldr	r3, [r4, #16]
 8008060:	462a      	mov	r2, r5
 8008062:	4649      	mov	r1, r9
 8008064:	4640      	mov	r0, r8
 8008066:	47d0      	blx	sl
 8008068:	3001      	adds	r0, #1
 800806a:	d0ad      	beq.n	8007fc8 <_printf_i+0x160>
 800806c:	6823      	ldr	r3, [r4, #0]
 800806e:	079b      	lsls	r3, r3, #30
 8008070:	d413      	bmi.n	800809a <_printf_i+0x232>
 8008072:	68e0      	ldr	r0, [r4, #12]
 8008074:	9b03      	ldr	r3, [sp, #12]
 8008076:	4298      	cmp	r0, r3
 8008078:	bfb8      	it	lt
 800807a:	4618      	movlt	r0, r3
 800807c:	e7a6      	b.n	8007fcc <_printf_i+0x164>
 800807e:	2301      	movs	r3, #1
 8008080:	4632      	mov	r2, r6
 8008082:	4649      	mov	r1, r9
 8008084:	4640      	mov	r0, r8
 8008086:	47d0      	blx	sl
 8008088:	3001      	adds	r0, #1
 800808a:	d09d      	beq.n	8007fc8 <_printf_i+0x160>
 800808c:	3501      	adds	r5, #1
 800808e:	68e3      	ldr	r3, [r4, #12]
 8008090:	9903      	ldr	r1, [sp, #12]
 8008092:	1a5b      	subs	r3, r3, r1
 8008094:	42ab      	cmp	r3, r5
 8008096:	dcf2      	bgt.n	800807e <_printf_i+0x216>
 8008098:	e7eb      	b.n	8008072 <_printf_i+0x20a>
 800809a:	2500      	movs	r5, #0
 800809c:	f104 0619 	add.w	r6, r4, #25
 80080a0:	e7f5      	b.n	800808e <_printf_i+0x226>
 80080a2:	bf00      	nop
 80080a4:	0800afe2 	.word	0x0800afe2
 80080a8:	0800aff3 	.word	0x0800aff3

080080ac <std>:
 80080ac:	2300      	movs	r3, #0
 80080ae:	b510      	push	{r4, lr}
 80080b0:	4604      	mov	r4, r0
 80080b2:	e9c0 3300 	strd	r3, r3, [r0]
 80080b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080ba:	6083      	str	r3, [r0, #8]
 80080bc:	8181      	strh	r1, [r0, #12]
 80080be:	6643      	str	r3, [r0, #100]	; 0x64
 80080c0:	81c2      	strh	r2, [r0, #14]
 80080c2:	6183      	str	r3, [r0, #24]
 80080c4:	4619      	mov	r1, r3
 80080c6:	2208      	movs	r2, #8
 80080c8:	305c      	adds	r0, #92	; 0x5c
 80080ca:	f000 f902 	bl	80082d2 <memset>
 80080ce:	4b05      	ldr	r3, [pc, #20]	; (80080e4 <std+0x38>)
 80080d0:	6263      	str	r3, [r4, #36]	; 0x24
 80080d2:	4b05      	ldr	r3, [pc, #20]	; (80080e8 <std+0x3c>)
 80080d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80080d6:	4b05      	ldr	r3, [pc, #20]	; (80080ec <std+0x40>)
 80080d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080da:	4b05      	ldr	r3, [pc, #20]	; (80080f0 <std+0x44>)
 80080dc:	6224      	str	r4, [r4, #32]
 80080de:	6323      	str	r3, [r4, #48]	; 0x30
 80080e0:	bd10      	pop	{r4, pc}
 80080e2:	bf00      	nop
 80080e4:	0800824d 	.word	0x0800824d
 80080e8:	0800826f 	.word	0x0800826f
 80080ec:	080082a7 	.word	0x080082a7
 80080f0:	080082cb 	.word	0x080082cb

080080f4 <stdio_exit_handler>:
 80080f4:	4a02      	ldr	r2, [pc, #8]	; (8008100 <stdio_exit_handler+0xc>)
 80080f6:	4903      	ldr	r1, [pc, #12]	; (8008104 <stdio_exit_handler+0x10>)
 80080f8:	4803      	ldr	r0, [pc, #12]	; (8008108 <stdio_exit_handler+0x14>)
 80080fa:	f000 b869 	b.w	80081d0 <_fwalk_sglue>
 80080fe:	bf00      	nop
 8008100:	20000014 	.word	0x20000014
 8008104:	08009d99 	.word	0x08009d99
 8008108:	20000020 	.word	0x20000020

0800810c <cleanup_stdio>:
 800810c:	6841      	ldr	r1, [r0, #4]
 800810e:	4b0c      	ldr	r3, [pc, #48]	; (8008140 <cleanup_stdio+0x34>)
 8008110:	4299      	cmp	r1, r3
 8008112:	b510      	push	{r4, lr}
 8008114:	4604      	mov	r4, r0
 8008116:	d001      	beq.n	800811c <cleanup_stdio+0x10>
 8008118:	f001 fe3e 	bl	8009d98 <_fflush_r>
 800811c:	68a1      	ldr	r1, [r4, #8]
 800811e:	4b09      	ldr	r3, [pc, #36]	; (8008144 <cleanup_stdio+0x38>)
 8008120:	4299      	cmp	r1, r3
 8008122:	d002      	beq.n	800812a <cleanup_stdio+0x1e>
 8008124:	4620      	mov	r0, r4
 8008126:	f001 fe37 	bl	8009d98 <_fflush_r>
 800812a:	68e1      	ldr	r1, [r4, #12]
 800812c:	4b06      	ldr	r3, [pc, #24]	; (8008148 <cleanup_stdio+0x3c>)
 800812e:	4299      	cmp	r1, r3
 8008130:	d004      	beq.n	800813c <cleanup_stdio+0x30>
 8008132:	4620      	mov	r0, r4
 8008134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008138:	f001 be2e 	b.w	8009d98 <_fflush_r>
 800813c:	bd10      	pop	{r4, pc}
 800813e:	bf00      	nop
 8008140:	20000404 	.word	0x20000404
 8008144:	2000046c 	.word	0x2000046c
 8008148:	200004d4 	.word	0x200004d4

0800814c <global_stdio_init.part.0>:
 800814c:	b510      	push	{r4, lr}
 800814e:	4b0b      	ldr	r3, [pc, #44]	; (800817c <global_stdio_init.part.0+0x30>)
 8008150:	4c0b      	ldr	r4, [pc, #44]	; (8008180 <global_stdio_init.part.0+0x34>)
 8008152:	4a0c      	ldr	r2, [pc, #48]	; (8008184 <global_stdio_init.part.0+0x38>)
 8008154:	601a      	str	r2, [r3, #0]
 8008156:	4620      	mov	r0, r4
 8008158:	2200      	movs	r2, #0
 800815a:	2104      	movs	r1, #4
 800815c:	f7ff ffa6 	bl	80080ac <std>
 8008160:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008164:	2201      	movs	r2, #1
 8008166:	2109      	movs	r1, #9
 8008168:	f7ff ffa0 	bl	80080ac <std>
 800816c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008170:	2202      	movs	r2, #2
 8008172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008176:	2112      	movs	r1, #18
 8008178:	f7ff bf98 	b.w	80080ac <std>
 800817c:	2000053c 	.word	0x2000053c
 8008180:	20000404 	.word	0x20000404
 8008184:	080080f5 	.word	0x080080f5

08008188 <__sfp_lock_acquire>:
 8008188:	4801      	ldr	r0, [pc, #4]	; (8008190 <__sfp_lock_acquire+0x8>)
 800818a:	f000 b91f 	b.w	80083cc <__retarget_lock_acquire_recursive>
 800818e:	bf00      	nop
 8008190:	20000545 	.word	0x20000545

08008194 <__sfp_lock_release>:
 8008194:	4801      	ldr	r0, [pc, #4]	; (800819c <__sfp_lock_release+0x8>)
 8008196:	f000 b91a 	b.w	80083ce <__retarget_lock_release_recursive>
 800819a:	bf00      	nop
 800819c:	20000545 	.word	0x20000545

080081a0 <__sinit>:
 80081a0:	b510      	push	{r4, lr}
 80081a2:	4604      	mov	r4, r0
 80081a4:	f7ff fff0 	bl	8008188 <__sfp_lock_acquire>
 80081a8:	6a23      	ldr	r3, [r4, #32]
 80081aa:	b11b      	cbz	r3, 80081b4 <__sinit+0x14>
 80081ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081b0:	f7ff bff0 	b.w	8008194 <__sfp_lock_release>
 80081b4:	4b04      	ldr	r3, [pc, #16]	; (80081c8 <__sinit+0x28>)
 80081b6:	6223      	str	r3, [r4, #32]
 80081b8:	4b04      	ldr	r3, [pc, #16]	; (80081cc <__sinit+0x2c>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d1f5      	bne.n	80081ac <__sinit+0xc>
 80081c0:	f7ff ffc4 	bl	800814c <global_stdio_init.part.0>
 80081c4:	e7f2      	b.n	80081ac <__sinit+0xc>
 80081c6:	bf00      	nop
 80081c8:	0800810d 	.word	0x0800810d
 80081cc:	2000053c 	.word	0x2000053c

080081d0 <_fwalk_sglue>:
 80081d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081d4:	4607      	mov	r7, r0
 80081d6:	4688      	mov	r8, r1
 80081d8:	4614      	mov	r4, r2
 80081da:	2600      	movs	r6, #0
 80081dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081e0:	f1b9 0901 	subs.w	r9, r9, #1
 80081e4:	d505      	bpl.n	80081f2 <_fwalk_sglue+0x22>
 80081e6:	6824      	ldr	r4, [r4, #0]
 80081e8:	2c00      	cmp	r4, #0
 80081ea:	d1f7      	bne.n	80081dc <_fwalk_sglue+0xc>
 80081ec:	4630      	mov	r0, r6
 80081ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081f2:	89ab      	ldrh	r3, [r5, #12]
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d907      	bls.n	8008208 <_fwalk_sglue+0x38>
 80081f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081fc:	3301      	adds	r3, #1
 80081fe:	d003      	beq.n	8008208 <_fwalk_sglue+0x38>
 8008200:	4629      	mov	r1, r5
 8008202:	4638      	mov	r0, r7
 8008204:	47c0      	blx	r8
 8008206:	4306      	orrs	r6, r0
 8008208:	3568      	adds	r5, #104	; 0x68
 800820a:	e7e9      	b.n	80081e0 <_fwalk_sglue+0x10>

0800820c <siprintf>:
 800820c:	b40e      	push	{r1, r2, r3}
 800820e:	b500      	push	{lr}
 8008210:	b09c      	sub	sp, #112	; 0x70
 8008212:	ab1d      	add	r3, sp, #116	; 0x74
 8008214:	9002      	str	r0, [sp, #8]
 8008216:	9006      	str	r0, [sp, #24]
 8008218:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800821c:	4809      	ldr	r0, [pc, #36]	; (8008244 <siprintf+0x38>)
 800821e:	9107      	str	r1, [sp, #28]
 8008220:	9104      	str	r1, [sp, #16]
 8008222:	4909      	ldr	r1, [pc, #36]	; (8008248 <siprintf+0x3c>)
 8008224:	f853 2b04 	ldr.w	r2, [r3], #4
 8008228:	9105      	str	r1, [sp, #20]
 800822a:	6800      	ldr	r0, [r0, #0]
 800822c:	9301      	str	r3, [sp, #4]
 800822e:	a902      	add	r1, sp, #8
 8008230:	f001 fc2e 	bl	8009a90 <_svfiprintf_r>
 8008234:	9b02      	ldr	r3, [sp, #8]
 8008236:	2200      	movs	r2, #0
 8008238:	701a      	strb	r2, [r3, #0]
 800823a:	b01c      	add	sp, #112	; 0x70
 800823c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008240:	b003      	add	sp, #12
 8008242:	4770      	bx	lr
 8008244:	2000006c 	.word	0x2000006c
 8008248:	ffff0208 	.word	0xffff0208

0800824c <__sread>:
 800824c:	b510      	push	{r4, lr}
 800824e:	460c      	mov	r4, r1
 8008250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008254:	f000 f86c 	bl	8008330 <_read_r>
 8008258:	2800      	cmp	r0, #0
 800825a:	bfab      	itete	ge
 800825c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800825e:	89a3      	ldrhlt	r3, [r4, #12]
 8008260:	181b      	addge	r3, r3, r0
 8008262:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008266:	bfac      	ite	ge
 8008268:	6563      	strge	r3, [r4, #84]	; 0x54
 800826a:	81a3      	strhlt	r3, [r4, #12]
 800826c:	bd10      	pop	{r4, pc}

0800826e <__swrite>:
 800826e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008272:	461f      	mov	r7, r3
 8008274:	898b      	ldrh	r3, [r1, #12]
 8008276:	05db      	lsls	r3, r3, #23
 8008278:	4605      	mov	r5, r0
 800827a:	460c      	mov	r4, r1
 800827c:	4616      	mov	r6, r2
 800827e:	d505      	bpl.n	800828c <__swrite+0x1e>
 8008280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008284:	2302      	movs	r3, #2
 8008286:	2200      	movs	r2, #0
 8008288:	f000 f840 	bl	800830c <_lseek_r>
 800828c:	89a3      	ldrh	r3, [r4, #12]
 800828e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008292:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008296:	81a3      	strh	r3, [r4, #12]
 8008298:	4632      	mov	r2, r6
 800829a:	463b      	mov	r3, r7
 800829c:	4628      	mov	r0, r5
 800829e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082a2:	f000 b857 	b.w	8008354 <_write_r>

080082a6 <__sseek>:
 80082a6:	b510      	push	{r4, lr}
 80082a8:	460c      	mov	r4, r1
 80082aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ae:	f000 f82d 	bl	800830c <_lseek_r>
 80082b2:	1c43      	adds	r3, r0, #1
 80082b4:	89a3      	ldrh	r3, [r4, #12]
 80082b6:	bf15      	itete	ne
 80082b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80082ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80082be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80082c2:	81a3      	strheq	r3, [r4, #12]
 80082c4:	bf18      	it	ne
 80082c6:	81a3      	strhne	r3, [r4, #12]
 80082c8:	bd10      	pop	{r4, pc}

080082ca <__sclose>:
 80082ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ce:	f000 b80d 	b.w	80082ec <_close_r>

080082d2 <memset>:
 80082d2:	4402      	add	r2, r0
 80082d4:	4603      	mov	r3, r0
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d100      	bne.n	80082dc <memset+0xa>
 80082da:	4770      	bx	lr
 80082dc:	f803 1b01 	strb.w	r1, [r3], #1
 80082e0:	e7f9      	b.n	80082d6 <memset+0x4>
	...

080082e4 <_localeconv_r>:
 80082e4:	4800      	ldr	r0, [pc, #0]	; (80082e8 <_localeconv_r+0x4>)
 80082e6:	4770      	bx	lr
 80082e8:	20000160 	.word	0x20000160

080082ec <_close_r>:
 80082ec:	b538      	push	{r3, r4, r5, lr}
 80082ee:	4d06      	ldr	r5, [pc, #24]	; (8008308 <_close_r+0x1c>)
 80082f0:	2300      	movs	r3, #0
 80082f2:	4604      	mov	r4, r0
 80082f4:	4608      	mov	r0, r1
 80082f6:	602b      	str	r3, [r5, #0]
 80082f8:	f7fa fedb 	bl	80030b2 <_close>
 80082fc:	1c43      	adds	r3, r0, #1
 80082fe:	d102      	bne.n	8008306 <_close_r+0x1a>
 8008300:	682b      	ldr	r3, [r5, #0]
 8008302:	b103      	cbz	r3, 8008306 <_close_r+0x1a>
 8008304:	6023      	str	r3, [r4, #0]
 8008306:	bd38      	pop	{r3, r4, r5, pc}
 8008308:	20000540 	.word	0x20000540

0800830c <_lseek_r>:
 800830c:	b538      	push	{r3, r4, r5, lr}
 800830e:	4d07      	ldr	r5, [pc, #28]	; (800832c <_lseek_r+0x20>)
 8008310:	4604      	mov	r4, r0
 8008312:	4608      	mov	r0, r1
 8008314:	4611      	mov	r1, r2
 8008316:	2200      	movs	r2, #0
 8008318:	602a      	str	r2, [r5, #0]
 800831a:	461a      	mov	r2, r3
 800831c:	f7fa fef0 	bl	8003100 <_lseek>
 8008320:	1c43      	adds	r3, r0, #1
 8008322:	d102      	bne.n	800832a <_lseek_r+0x1e>
 8008324:	682b      	ldr	r3, [r5, #0]
 8008326:	b103      	cbz	r3, 800832a <_lseek_r+0x1e>
 8008328:	6023      	str	r3, [r4, #0]
 800832a:	bd38      	pop	{r3, r4, r5, pc}
 800832c:	20000540 	.word	0x20000540

08008330 <_read_r>:
 8008330:	b538      	push	{r3, r4, r5, lr}
 8008332:	4d07      	ldr	r5, [pc, #28]	; (8008350 <_read_r+0x20>)
 8008334:	4604      	mov	r4, r0
 8008336:	4608      	mov	r0, r1
 8008338:	4611      	mov	r1, r2
 800833a:	2200      	movs	r2, #0
 800833c:	602a      	str	r2, [r5, #0]
 800833e:	461a      	mov	r2, r3
 8008340:	f7fa fe7e 	bl	8003040 <_read>
 8008344:	1c43      	adds	r3, r0, #1
 8008346:	d102      	bne.n	800834e <_read_r+0x1e>
 8008348:	682b      	ldr	r3, [r5, #0]
 800834a:	b103      	cbz	r3, 800834e <_read_r+0x1e>
 800834c:	6023      	str	r3, [r4, #0]
 800834e:	bd38      	pop	{r3, r4, r5, pc}
 8008350:	20000540 	.word	0x20000540

08008354 <_write_r>:
 8008354:	b538      	push	{r3, r4, r5, lr}
 8008356:	4d07      	ldr	r5, [pc, #28]	; (8008374 <_write_r+0x20>)
 8008358:	4604      	mov	r4, r0
 800835a:	4608      	mov	r0, r1
 800835c:	4611      	mov	r1, r2
 800835e:	2200      	movs	r2, #0
 8008360:	602a      	str	r2, [r5, #0]
 8008362:	461a      	mov	r2, r3
 8008364:	f7fa fe89 	bl	800307a <_write>
 8008368:	1c43      	adds	r3, r0, #1
 800836a:	d102      	bne.n	8008372 <_write_r+0x1e>
 800836c:	682b      	ldr	r3, [r5, #0]
 800836e:	b103      	cbz	r3, 8008372 <_write_r+0x1e>
 8008370:	6023      	str	r3, [r4, #0]
 8008372:	bd38      	pop	{r3, r4, r5, pc}
 8008374:	20000540 	.word	0x20000540

08008378 <__errno>:
 8008378:	4b01      	ldr	r3, [pc, #4]	; (8008380 <__errno+0x8>)
 800837a:	6818      	ldr	r0, [r3, #0]
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	2000006c 	.word	0x2000006c

08008384 <__libc_init_array>:
 8008384:	b570      	push	{r4, r5, r6, lr}
 8008386:	4d0d      	ldr	r5, [pc, #52]	; (80083bc <__libc_init_array+0x38>)
 8008388:	4c0d      	ldr	r4, [pc, #52]	; (80083c0 <__libc_init_array+0x3c>)
 800838a:	1b64      	subs	r4, r4, r5
 800838c:	10a4      	asrs	r4, r4, #2
 800838e:	2600      	movs	r6, #0
 8008390:	42a6      	cmp	r6, r4
 8008392:	d109      	bne.n	80083a8 <__libc_init_array+0x24>
 8008394:	4d0b      	ldr	r5, [pc, #44]	; (80083c4 <__libc_init_array+0x40>)
 8008396:	4c0c      	ldr	r4, [pc, #48]	; (80083c8 <__libc_init_array+0x44>)
 8008398:	f002 fdea 	bl	800af70 <_init>
 800839c:	1b64      	subs	r4, r4, r5
 800839e:	10a4      	asrs	r4, r4, #2
 80083a0:	2600      	movs	r6, #0
 80083a2:	42a6      	cmp	r6, r4
 80083a4:	d105      	bne.n	80083b2 <__libc_init_array+0x2e>
 80083a6:	bd70      	pop	{r4, r5, r6, pc}
 80083a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80083ac:	4798      	blx	r3
 80083ae:	3601      	adds	r6, #1
 80083b0:	e7ee      	b.n	8008390 <__libc_init_array+0xc>
 80083b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80083b6:	4798      	blx	r3
 80083b8:	3601      	adds	r6, #1
 80083ba:	e7f2      	b.n	80083a2 <__libc_init_array+0x1e>
 80083bc:	0800b39c 	.word	0x0800b39c
 80083c0:	0800b39c 	.word	0x0800b39c
 80083c4:	0800b39c 	.word	0x0800b39c
 80083c8:	0800b3a0 	.word	0x0800b3a0

080083cc <__retarget_lock_acquire_recursive>:
 80083cc:	4770      	bx	lr

080083ce <__retarget_lock_release_recursive>:
 80083ce:	4770      	bx	lr

080083d0 <memcpy>:
 80083d0:	440a      	add	r2, r1
 80083d2:	4291      	cmp	r1, r2
 80083d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80083d8:	d100      	bne.n	80083dc <memcpy+0xc>
 80083da:	4770      	bx	lr
 80083dc:	b510      	push	{r4, lr}
 80083de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083e6:	4291      	cmp	r1, r2
 80083e8:	d1f9      	bne.n	80083de <memcpy+0xe>
 80083ea:	bd10      	pop	{r4, pc}

080083ec <quorem>:
 80083ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f0:	6903      	ldr	r3, [r0, #16]
 80083f2:	690c      	ldr	r4, [r1, #16]
 80083f4:	42a3      	cmp	r3, r4
 80083f6:	4607      	mov	r7, r0
 80083f8:	db7e      	blt.n	80084f8 <quorem+0x10c>
 80083fa:	3c01      	subs	r4, #1
 80083fc:	f101 0814 	add.w	r8, r1, #20
 8008400:	f100 0514 	add.w	r5, r0, #20
 8008404:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008408:	9301      	str	r3, [sp, #4]
 800840a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800840e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008412:	3301      	adds	r3, #1
 8008414:	429a      	cmp	r2, r3
 8008416:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800841a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800841e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008422:	d331      	bcc.n	8008488 <quorem+0x9c>
 8008424:	f04f 0e00 	mov.w	lr, #0
 8008428:	4640      	mov	r0, r8
 800842a:	46ac      	mov	ip, r5
 800842c:	46f2      	mov	sl, lr
 800842e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008432:	b293      	uxth	r3, r2
 8008434:	fb06 e303 	mla	r3, r6, r3, lr
 8008438:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800843c:	0c1a      	lsrs	r2, r3, #16
 800843e:	b29b      	uxth	r3, r3
 8008440:	ebaa 0303 	sub.w	r3, sl, r3
 8008444:	f8dc a000 	ldr.w	sl, [ip]
 8008448:	fa13 f38a 	uxtah	r3, r3, sl
 800844c:	fb06 220e 	mla	r2, r6, lr, r2
 8008450:	9300      	str	r3, [sp, #0]
 8008452:	9b00      	ldr	r3, [sp, #0]
 8008454:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008458:	b292      	uxth	r2, r2
 800845a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800845e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008462:	f8bd 3000 	ldrh.w	r3, [sp]
 8008466:	4581      	cmp	r9, r0
 8008468:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800846c:	f84c 3b04 	str.w	r3, [ip], #4
 8008470:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008474:	d2db      	bcs.n	800842e <quorem+0x42>
 8008476:	f855 300b 	ldr.w	r3, [r5, fp]
 800847a:	b92b      	cbnz	r3, 8008488 <quorem+0x9c>
 800847c:	9b01      	ldr	r3, [sp, #4]
 800847e:	3b04      	subs	r3, #4
 8008480:	429d      	cmp	r5, r3
 8008482:	461a      	mov	r2, r3
 8008484:	d32c      	bcc.n	80084e0 <quorem+0xf4>
 8008486:	613c      	str	r4, [r7, #16]
 8008488:	4638      	mov	r0, r7
 800848a:	f001 f9a7 	bl	80097dc <__mcmp>
 800848e:	2800      	cmp	r0, #0
 8008490:	db22      	blt.n	80084d8 <quorem+0xec>
 8008492:	3601      	adds	r6, #1
 8008494:	4629      	mov	r1, r5
 8008496:	2000      	movs	r0, #0
 8008498:	f858 2b04 	ldr.w	r2, [r8], #4
 800849c:	f8d1 c000 	ldr.w	ip, [r1]
 80084a0:	b293      	uxth	r3, r2
 80084a2:	1ac3      	subs	r3, r0, r3
 80084a4:	0c12      	lsrs	r2, r2, #16
 80084a6:	fa13 f38c 	uxtah	r3, r3, ip
 80084aa:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80084ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084b8:	45c1      	cmp	r9, r8
 80084ba:	f841 3b04 	str.w	r3, [r1], #4
 80084be:	ea4f 4022 	mov.w	r0, r2, asr #16
 80084c2:	d2e9      	bcs.n	8008498 <quorem+0xac>
 80084c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084cc:	b922      	cbnz	r2, 80084d8 <quorem+0xec>
 80084ce:	3b04      	subs	r3, #4
 80084d0:	429d      	cmp	r5, r3
 80084d2:	461a      	mov	r2, r3
 80084d4:	d30a      	bcc.n	80084ec <quorem+0x100>
 80084d6:	613c      	str	r4, [r7, #16]
 80084d8:	4630      	mov	r0, r6
 80084da:	b003      	add	sp, #12
 80084dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e0:	6812      	ldr	r2, [r2, #0]
 80084e2:	3b04      	subs	r3, #4
 80084e4:	2a00      	cmp	r2, #0
 80084e6:	d1ce      	bne.n	8008486 <quorem+0x9a>
 80084e8:	3c01      	subs	r4, #1
 80084ea:	e7c9      	b.n	8008480 <quorem+0x94>
 80084ec:	6812      	ldr	r2, [r2, #0]
 80084ee:	3b04      	subs	r3, #4
 80084f0:	2a00      	cmp	r2, #0
 80084f2:	d1f0      	bne.n	80084d6 <quorem+0xea>
 80084f4:	3c01      	subs	r4, #1
 80084f6:	e7eb      	b.n	80084d0 <quorem+0xe4>
 80084f8:	2000      	movs	r0, #0
 80084fa:	e7ee      	b.n	80084da <quorem+0xee>
 80084fc:	0000      	movs	r0, r0
	...

08008500 <_dtoa_r>:
 8008500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008504:	ed2d 8b04 	vpush	{d8-d9}
 8008508:	69c5      	ldr	r5, [r0, #28]
 800850a:	b093      	sub	sp, #76	; 0x4c
 800850c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008510:	ec57 6b10 	vmov	r6, r7, d0
 8008514:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008518:	9107      	str	r1, [sp, #28]
 800851a:	4604      	mov	r4, r0
 800851c:	920a      	str	r2, [sp, #40]	; 0x28
 800851e:	930d      	str	r3, [sp, #52]	; 0x34
 8008520:	b975      	cbnz	r5, 8008540 <_dtoa_r+0x40>
 8008522:	2010      	movs	r0, #16
 8008524:	f000 fe2a 	bl	800917c <malloc>
 8008528:	4602      	mov	r2, r0
 800852a:	61e0      	str	r0, [r4, #28]
 800852c:	b920      	cbnz	r0, 8008538 <_dtoa_r+0x38>
 800852e:	4bae      	ldr	r3, [pc, #696]	; (80087e8 <_dtoa_r+0x2e8>)
 8008530:	21ef      	movs	r1, #239	; 0xef
 8008532:	48ae      	ldr	r0, [pc, #696]	; (80087ec <_dtoa_r+0x2ec>)
 8008534:	f001 fc82 	bl	8009e3c <__assert_func>
 8008538:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800853c:	6005      	str	r5, [r0, #0]
 800853e:	60c5      	str	r5, [r0, #12]
 8008540:	69e3      	ldr	r3, [r4, #28]
 8008542:	6819      	ldr	r1, [r3, #0]
 8008544:	b151      	cbz	r1, 800855c <_dtoa_r+0x5c>
 8008546:	685a      	ldr	r2, [r3, #4]
 8008548:	604a      	str	r2, [r1, #4]
 800854a:	2301      	movs	r3, #1
 800854c:	4093      	lsls	r3, r2
 800854e:	608b      	str	r3, [r1, #8]
 8008550:	4620      	mov	r0, r4
 8008552:	f000 ff07 	bl	8009364 <_Bfree>
 8008556:	69e3      	ldr	r3, [r4, #28]
 8008558:	2200      	movs	r2, #0
 800855a:	601a      	str	r2, [r3, #0]
 800855c:	1e3b      	subs	r3, r7, #0
 800855e:	bfbb      	ittet	lt
 8008560:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008564:	9303      	strlt	r3, [sp, #12]
 8008566:	2300      	movge	r3, #0
 8008568:	2201      	movlt	r2, #1
 800856a:	bfac      	ite	ge
 800856c:	f8c8 3000 	strge.w	r3, [r8]
 8008570:	f8c8 2000 	strlt.w	r2, [r8]
 8008574:	4b9e      	ldr	r3, [pc, #632]	; (80087f0 <_dtoa_r+0x2f0>)
 8008576:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800857a:	ea33 0308 	bics.w	r3, r3, r8
 800857e:	d11b      	bne.n	80085b8 <_dtoa_r+0xb8>
 8008580:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008582:	f242 730f 	movw	r3, #9999	; 0x270f
 8008586:	6013      	str	r3, [r2, #0]
 8008588:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800858c:	4333      	orrs	r3, r6
 800858e:	f000 8593 	beq.w	80090b8 <_dtoa_r+0xbb8>
 8008592:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008594:	b963      	cbnz	r3, 80085b0 <_dtoa_r+0xb0>
 8008596:	4b97      	ldr	r3, [pc, #604]	; (80087f4 <_dtoa_r+0x2f4>)
 8008598:	e027      	b.n	80085ea <_dtoa_r+0xea>
 800859a:	4b97      	ldr	r3, [pc, #604]	; (80087f8 <_dtoa_r+0x2f8>)
 800859c:	9300      	str	r3, [sp, #0]
 800859e:	3308      	adds	r3, #8
 80085a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80085a2:	6013      	str	r3, [r2, #0]
 80085a4:	9800      	ldr	r0, [sp, #0]
 80085a6:	b013      	add	sp, #76	; 0x4c
 80085a8:	ecbd 8b04 	vpop	{d8-d9}
 80085ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b0:	4b90      	ldr	r3, [pc, #576]	; (80087f4 <_dtoa_r+0x2f4>)
 80085b2:	9300      	str	r3, [sp, #0]
 80085b4:	3303      	adds	r3, #3
 80085b6:	e7f3      	b.n	80085a0 <_dtoa_r+0xa0>
 80085b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80085bc:	2200      	movs	r2, #0
 80085be:	ec51 0b17 	vmov	r0, r1, d7
 80085c2:	eeb0 8a47 	vmov.f32	s16, s14
 80085c6:	eef0 8a67 	vmov.f32	s17, s15
 80085ca:	2300      	movs	r3, #0
 80085cc:	f7f8 fa9c 	bl	8000b08 <__aeabi_dcmpeq>
 80085d0:	4681      	mov	r9, r0
 80085d2:	b160      	cbz	r0, 80085ee <_dtoa_r+0xee>
 80085d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80085d6:	2301      	movs	r3, #1
 80085d8:	6013      	str	r3, [r2, #0]
 80085da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 8568 	beq.w	80090b2 <_dtoa_r+0xbb2>
 80085e2:	4b86      	ldr	r3, [pc, #536]	; (80087fc <_dtoa_r+0x2fc>)
 80085e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80085e6:	6013      	str	r3, [r2, #0]
 80085e8:	3b01      	subs	r3, #1
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	e7da      	b.n	80085a4 <_dtoa_r+0xa4>
 80085ee:	aa10      	add	r2, sp, #64	; 0x40
 80085f0:	a911      	add	r1, sp, #68	; 0x44
 80085f2:	4620      	mov	r0, r4
 80085f4:	eeb0 0a48 	vmov.f32	s0, s16
 80085f8:	eef0 0a68 	vmov.f32	s1, s17
 80085fc:	f001 f994 	bl	8009928 <__d2b>
 8008600:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008604:	4682      	mov	sl, r0
 8008606:	2d00      	cmp	r5, #0
 8008608:	d07f      	beq.n	800870a <_dtoa_r+0x20a>
 800860a:	ee18 3a90 	vmov	r3, s17
 800860e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008612:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008616:	ec51 0b18 	vmov	r0, r1, d8
 800861a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800861e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008622:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008626:	4619      	mov	r1, r3
 8008628:	2200      	movs	r2, #0
 800862a:	4b75      	ldr	r3, [pc, #468]	; (8008800 <_dtoa_r+0x300>)
 800862c:	f7f7 fe4c 	bl	80002c8 <__aeabi_dsub>
 8008630:	a367      	add	r3, pc, #412	; (adr r3, 80087d0 <_dtoa_r+0x2d0>)
 8008632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008636:	f7f7 ffff 	bl	8000638 <__aeabi_dmul>
 800863a:	a367      	add	r3, pc, #412	; (adr r3, 80087d8 <_dtoa_r+0x2d8>)
 800863c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008640:	f7f7 fe44 	bl	80002cc <__adddf3>
 8008644:	4606      	mov	r6, r0
 8008646:	4628      	mov	r0, r5
 8008648:	460f      	mov	r7, r1
 800864a:	f7f7 ff8b 	bl	8000564 <__aeabi_i2d>
 800864e:	a364      	add	r3, pc, #400	; (adr r3, 80087e0 <_dtoa_r+0x2e0>)
 8008650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008654:	f7f7 fff0 	bl	8000638 <__aeabi_dmul>
 8008658:	4602      	mov	r2, r0
 800865a:	460b      	mov	r3, r1
 800865c:	4630      	mov	r0, r6
 800865e:	4639      	mov	r1, r7
 8008660:	f7f7 fe34 	bl	80002cc <__adddf3>
 8008664:	4606      	mov	r6, r0
 8008666:	460f      	mov	r7, r1
 8008668:	f7f8 fa96 	bl	8000b98 <__aeabi_d2iz>
 800866c:	2200      	movs	r2, #0
 800866e:	4683      	mov	fp, r0
 8008670:	2300      	movs	r3, #0
 8008672:	4630      	mov	r0, r6
 8008674:	4639      	mov	r1, r7
 8008676:	f7f8 fa51 	bl	8000b1c <__aeabi_dcmplt>
 800867a:	b148      	cbz	r0, 8008690 <_dtoa_r+0x190>
 800867c:	4658      	mov	r0, fp
 800867e:	f7f7 ff71 	bl	8000564 <__aeabi_i2d>
 8008682:	4632      	mov	r2, r6
 8008684:	463b      	mov	r3, r7
 8008686:	f7f8 fa3f 	bl	8000b08 <__aeabi_dcmpeq>
 800868a:	b908      	cbnz	r0, 8008690 <_dtoa_r+0x190>
 800868c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008690:	f1bb 0f16 	cmp.w	fp, #22
 8008694:	d857      	bhi.n	8008746 <_dtoa_r+0x246>
 8008696:	4b5b      	ldr	r3, [pc, #364]	; (8008804 <_dtoa_r+0x304>)
 8008698:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800869c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a0:	ec51 0b18 	vmov	r0, r1, d8
 80086a4:	f7f8 fa3a 	bl	8000b1c <__aeabi_dcmplt>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	d04e      	beq.n	800874a <_dtoa_r+0x24a>
 80086ac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80086b0:	2300      	movs	r3, #0
 80086b2:	930c      	str	r3, [sp, #48]	; 0x30
 80086b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086b6:	1b5b      	subs	r3, r3, r5
 80086b8:	1e5a      	subs	r2, r3, #1
 80086ba:	bf45      	ittet	mi
 80086bc:	f1c3 0301 	rsbmi	r3, r3, #1
 80086c0:	9305      	strmi	r3, [sp, #20]
 80086c2:	2300      	movpl	r3, #0
 80086c4:	2300      	movmi	r3, #0
 80086c6:	9206      	str	r2, [sp, #24]
 80086c8:	bf54      	ite	pl
 80086ca:	9305      	strpl	r3, [sp, #20]
 80086cc:	9306      	strmi	r3, [sp, #24]
 80086ce:	f1bb 0f00 	cmp.w	fp, #0
 80086d2:	db3c      	blt.n	800874e <_dtoa_r+0x24e>
 80086d4:	9b06      	ldr	r3, [sp, #24]
 80086d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80086da:	445b      	add	r3, fp
 80086dc:	9306      	str	r3, [sp, #24]
 80086de:	2300      	movs	r3, #0
 80086e0:	9308      	str	r3, [sp, #32]
 80086e2:	9b07      	ldr	r3, [sp, #28]
 80086e4:	2b09      	cmp	r3, #9
 80086e6:	d868      	bhi.n	80087ba <_dtoa_r+0x2ba>
 80086e8:	2b05      	cmp	r3, #5
 80086ea:	bfc4      	itt	gt
 80086ec:	3b04      	subgt	r3, #4
 80086ee:	9307      	strgt	r3, [sp, #28]
 80086f0:	9b07      	ldr	r3, [sp, #28]
 80086f2:	f1a3 0302 	sub.w	r3, r3, #2
 80086f6:	bfcc      	ite	gt
 80086f8:	2500      	movgt	r5, #0
 80086fa:	2501      	movle	r5, #1
 80086fc:	2b03      	cmp	r3, #3
 80086fe:	f200 8085 	bhi.w	800880c <_dtoa_r+0x30c>
 8008702:	e8df f003 	tbb	[pc, r3]
 8008706:	3b2e      	.short	0x3b2e
 8008708:	5839      	.short	0x5839
 800870a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800870e:	441d      	add	r5, r3
 8008710:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008714:	2b20      	cmp	r3, #32
 8008716:	bfc1      	itttt	gt
 8008718:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800871c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008720:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008724:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008728:	bfd6      	itet	le
 800872a:	f1c3 0320 	rsble	r3, r3, #32
 800872e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008732:	fa06 f003 	lslle.w	r0, r6, r3
 8008736:	f7f7 ff05 	bl	8000544 <__aeabi_ui2d>
 800873a:	2201      	movs	r2, #1
 800873c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008740:	3d01      	subs	r5, #1
 8008742:	920e      	str	r2, [sp, #56]	; 0x38
 8008744:	e76f      	b.n	8008626 <_dtoa_r+0x126>
 8008746:	2301      	movs	r3, #1
 8008748:	e7b3      	b.n	80086b2 <_dtoa_r+0x1b2>
 800874a:	900c      	str	r0, [sp, #48]	; 0x30
 800874c:	e7b2      	b.n	80086b4 <_dtoa_r+0x1b4>
 800874e:	9b05      	ldr	r3, [sp, #20]
 8008750:	eba3 030b 	sub.w	r3, r3, fp
 8008754:	9305      	str	r3, [sp, #20]
 8008756:	f1cb 0300 	rsb	r3, fp, #0
 800875a:	9308      	str	r3, [sp, #32]
 800875c:	2300      	movs	r3, #0
 800875e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008760:	e7bf      	b.n	80086e2 <_dtoa_r+0x1e2>
 8008762:	2300      	movs	r3, #0
 8008764:	9309      	str	r3, [sp, #36]	; 0x24
 8008766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008768:	2b00      	cmp	r3, #0
 800876a:	dc52      	bgt.n	8008812 <_dtoa_r+0x312>
 800876c:	2301      	movs	r3, #1
 800876e:	9301      	str	r3, [sp, #4]
 8008770:	9304      	str	r3, [sp, #16]
 8008772:	461a      	mov	r2, r3
 8008774:	920a      	str	r2, [sp, #40]	; 0x28
 8008776:	e00b      	b.n	8008790 <_dtoa_r+0x290>
 8008778:	2301      	movs	r3, #1
 800877a:	e7f3      	b.n	8008764 <_dtoa_r+0x264>
 800877c:	2300      	movs	r3, #0
 800877e:	9309      	str	r3, [sp, #36]	; 0x24
 8008780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008782:	445b      	add	r3, fp
 8008784:	9301      	str	r3, [sp, #4]
 8008786:	3301      	adds	r3, #1
 8008788:	2b01      	cmp	r3, #1
 800878a:	9304      	str	r3, [sp, #16]
 800878c:	bfb8      	it	lt
 800878e:	2301      	movlt	r3, #1
 8008790:	69e0      	ldr	r0, [r4, #28]
 8008792:	2100      	movs	r1, #0
 8008794:	2204      	movs	r2, #4
 8008796:	f102 0614 	add.w	r6, r2, #20
 800879a:	429e      	cmp	r6, r3
 800879c:	d93d      	bls.n	800881a <_dtoa_r+0x31a>
 800879e:	6041      	str	r1, [r0, #4]
 80087a0:	4620      	mov	r0, r4
 80087a2:	f000 fd9f 	bl	80092e4 <_Balloc>
 80087a6:	9000      	str	r0, [sp, #0]
 80087a8:	2800      	cmp	r0, #0
 80087aa:	d139      	bne.n	8008820 <_dtoa_r+0x320>
 80087ac:	4b16      	ldr	r3, [pc, #88]	; (8008808 <_dtoa_r+0x308>)
 80087ae:	4602      	mov	r2, r0
 80087b0:	f240 11af 	movw	r1, #431	; 0x1af
 80087b4:	e6bd      	b.n	8008532 <_dtoa_r+0x32>
 80087b6:	2301      	movs	r3, #1
 80087b8:	e7e1      	b.n	800877e <_dtoa_r+0x27e>
 80087ba:	2501      	movs	r5, #1
 80087bc:	2300      	movs	r3, #0
 80087be:	9307      	str	r3, [sp, #28]
 80087c0:	9509      	str	r5, [sp, #36]	; 0x24
 80087c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087c6:	9301      	str	r3, [sp, #4]
 80087c8:	9304      	str	r3, [sp, #16]
 80087ca:	2200      	movs	r2, #0
 80087cc:	2312      	movs	r3, #18
 80087ce:	e7d1      	b.n	8008774 <_dtoa_r+0x274>
 80087d0:	636f4361 	.word	0x636f4361
 80087d4:	3fd287a7 	.word	0x3fd287a7
 80087d8:	8b60c8b3 	.word	0x8b60c8b3
 80087dc:	3fc68a28 	.word	0x3fc68a28
 80087e0:	509f79fb 	.word	0x509f79fb
 80087e4:	3fd34413 	.word	0x3fd34413
 80087e8:	0800b011 	.word	0x0800b011
 80087ec:	0800b028 	.word	0x0800b028
 80087f0:	7ff00000 	.word	0x7ff00000
 80087f4:	0800b00d 	.word	0x0800b00d
 80087f8:	0800b004 	.word	0x0800b004
 80087fc:	0800afe1 	.word	0x0800afe1
 8008800:	3ff80000 	.word	0x3ff80000
 8008804:	0800b118 	.word	0x0800b118
 8008808:	0800b080 	.word	0x0800b080
 800880c:	2301      	movs	r3, #1
 800880e:	9309      	str	r3, [sp, #36]	; 0x24
 8008810:	e7d7      	b.n	80087c2 <_dtoa_r+0x2c2>
 8008812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008814:	9301      	str	r3, [sp, #4]
 8008816:	9304      	str	r3, [sp, #16]
 8008818:	e7ba      	b.n	8008790 <_dtoa_r+0x290>
 800881a:	3101      	adds	r1, #1
 800881c:	0052      	lsls	r2, r2, #1
 800881e:	e7ba      	b.n	8008796 <_dtoa_r+0x296>
 8008820:	69e3      	ldr	r3, [r4, #28]
 8008822:	9a00      	ldr	r2, [sp, #0]
 8008824:	601a      	str	r2, [r3, #0]
 8008826:	9b04      	ldr	r3, [sp, #16]
 8008828:	2b0e      	cmp	r3, #14
 800882a:	f200 80a8 	bhi.w	800897e <_dtoa_r+0x47e>
 800882e:	2d00      	cmp	r5, #0
 8008830:	f000 80a5 	beq.w	800897e <_dtoa_r+0x47e>
 8008834:	f1bb 0f00 	cmp.w	fp, #0
 8008838:	dd38      	ble.n	80088ac <_dtoa_r+0x3ac>
 800883a:	4bc0      	ldr	r3, [pc, #768]	; (8008b3c <_dtoa_r+0x63c>)
 800883c:	f00b 020f 	and.w	r2, fp, #15
 8008840:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008844:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008848:	e9d3 6700 	ldrd	r6, r7, [r3]
 800884c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008850:	d019      	beq.n	8008886 <_dtoa_r+0x386>
 8008852:	4bbb      	ldr	r3, [pc, #748]	; (8008b40 <_dtoa_r+0x640>)
 8008854:	ec51 0b18 	vmov	r0, r1, d8
 8008858:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800885c:	f7f8 f816 	bl	800088c <__aeabi_ddiv>
 8008860:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008864:	f008 080f 	and.w	r8, r8, #15
 8008868:	2503      	movs	r5, #3
 800886a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008b40 <_dtoa_r+0x640>
 800886e:	f1b8 0f00 	cmp.w	r8, #0
 8008872:	d10a      	bne.n	800888a <_dtoa_r+0x38a>
 8008874:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008878:	4632      	mov	r2, r6
 800887a:	463b      	mov	r3, r7
 800887c:	f7f8 f806 	bl	800088c <__aeabi_ddiv>
 8008880:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008884:	e02b      	b.n	80088de <_dtoa_r+0x3de>
 8008886:	2502      	movs	r5, #2
 8008888:	e7ef      	b.n	800886a <_dtoa_r+0x36a>
 800888a:	f018 0f01 	tst.w	r8, #1
 800888e:	d008      	beq.n	80088a2 <_dtoa_r+0x3a2>
 8008890:	4630      	mov	r0, r6
 8008892:	4639      	mov	r1, r7
 8008894:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008898:	f7f7 fece 	bl	8000638 <__aeabi_dmul>
 800889c:	3501      	adds	r5, #1
 800889e:	4606      	mov	r6, r0
 80088a0:	460f      	mov	r7, r1
 80088a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80088a6:	f109 0908 	add.w	r9, r9, #8
 80088aa:	e7e0      	b.n	800886e <_dtoa_r+0x36e>
 80088ac:	f000 809f 	beq.w	80089ee <_dtoa_r+0x4ee>
 80088b0:	f1cb 0600 	rsb	r6, fp, #0
 80088b4:	4ba1      	ldr	r3, [pc, #644]	; (8008b3c <_dtoa_r+0x63c>)
 80088b6:	4fa2      	ldr	r7, [pc, #648]	; (8008b40 <_dtoa_r+0x640>)
 80088b8:	f006 020f 	and.w	r2, r6, #15
 80088bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c4:	ec51 0b18 	vmov	r0, r1, d8
 80088c8:	f7f7 feb6 	bl	8000638 <__aeabi_dmul>
 80088cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088d0:	1136      	asrs	r6, r6, #4
 80088d2:	2300      	movs	r3, #0
 80088d4:	2502      	movs	r5, #2
 80088d6:	2e00      	cmp	r6, #0
 80088d8:	d17e      	bne.n	80089d8 <_dtoa_r+0x4d8>
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1d0      	bne.n	8008880 <_dtoa_r+0x380>
 80088de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f000 8084 	beq.w	80089f2 <_dtoa_r+0x4f2>
 80088ea:	4b96      	ldr	r3, [pc, #600]	; (8008b44 <_dtoa_r+0x644>)
 80088ec:	2200      	movs	r2, #0
 80088ee:	4640      	mov	r0, r8
 80088f0:	4649      	mov	r1, r9
 80088f2:	f7f8 f913 	bl	8000b1c <__aeabi_dcmplt>
 80088f6:	2800      	cmp	r0, #0
 80088f8:	d07b      	beq.n	80089f2 <_dtoa_r+0x4f2>
 80088fa:	9b04      	ldr	r3, [sp, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d078      	beq.n	80089f2 <_dtoa_r+0x4f2>
 8008900:	9b01      	ldr	r3, [sp, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	dd39      	ble.n	800897a <_dtoa_r+0x47a>
 8008906:	4b90      	ldr	r3, [pc, #576]	; (8008b48 <_dtoa_r+0x648>)
 8008908:	2200      	movs	r2, #0
 800890a:	4640      	mov	r0, r8
 800890c:	4649      	mov	r1, r9
 800890e:	f7f7 fe93 	bl	8000638 <__aeabi_dmul>
 8008912:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008916:	9e01      	ldr	r6, [sp, #4]
 8008918:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800891c:	3501      	adds	r5, #1
 800891e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008922:	4628      	mov	r0, r5
 8008924:	f7f7 fe1e 	bl	8000564 <__aeabi_i2d>
 8008928:	4642      	mov	r2, r8
 800892a:	464b      	mov	r3, r9
 800892c:	f7f7 fe84 	bl	8000638 <__aeabi_dmul>
 8008930:	4b86      	ldr	r3, [pc, #536]	; (8008b4c <_dtoa_r+0x64c>)
 8008932:	2200      	movs	r2, #0
 8008934:	f7f7 fcca 	bl	80002cc <__adddf3>
 8008938:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800893c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008940:	9303      	str	r3, [sp, #12]
 8008942:	2e00      	cmp	r6, #0
 8008944:	d158      	bne.n	80089f8 <_dtoa_r+0x4f8>
 8008946:	4b82      	ldr	r3, [pc, #520]	; (8008b50 <_dtoa_r+0x650>)
 8008948:	2200      	movs	r2, #0
 800894a:	4640      	mov	r0, r8
 800894c:	4649      	mov	r1, r9
 800894e:	f7f7 fcbb 	bl	80002c8 <__aeabi_dsub>
 8008952:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008956:	4680      	mov	r8, r0
 8008958:	4689      	mov	r9, r1
 800895a:	f7f8 f8fd 	bl	8000b58 <__aeabi_dcmpgt>
 800895e:	2800      	cmp	r0, #0
 8008960:	f040 8296 	bne.w	8008e90 <_dtoa_r+0x990>
 8008964:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008968:	4640      	mov	r0, r8
 800896a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800896e:	4649      	mov	r1, r9
 8008970:	f7f8 f8d4 	bl	8000b1c <__aeabi_dcmplt>
 8008974:	2800      	cmp	r0, #0
 8008976:	f040 8289 	bne.w	8008e8c <_dtoa_r+0x98c>
 800897a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800897e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008980:	2b00      	cmp	r3, #0
 8008982:	f2c0 814e 	blt.w	8008c22 <_dtoa_r+0x722>
 8008986:	f1bb 0f0e 	cmp.w	fp, #14
 800898a:	f300 814a 	bgt.w	8008c22 <_dtoa_r+0x722>
 800898e:	4b6b      	ldr	r3, [pc, #428]	; (8008b3c <_dtoa_r+0x63c>)
 8008990:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008994:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800899a:	2b00      	cmp	r3, #0
 800899c:	f280 80dc 	bge.w	8008b58 <_dtoa_r+0x658>
 80089a0:	9b04      	ldr	r3, [sp, #16]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f300 80d8 	bgt.w	8008b58 <_dtoa_r+0x658>
 80089a8:	f040 826f 	bne.w	8008e8a <_dtoa_r+0x98a>
 80089ac:	4b68      	ldr	r3, [pc, #416]	; (8008b50 <_dtoa_r+0x650>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	4640      	mov	r0, r8
 80089b2:	4649      	mov	r1, r9
 80089b4:	f7f7 fe40 	bl	8000638 <__aeabi_dmul>
 80089b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089bc:	f7f8 f8c2 	bl	8000b44 <__aeabi_dcmpge>
 80089c0:	9e04      	ldr	r6, [sp, #16]
 80089c2:	4637      	mov	r7, r6
 80089c4:	2800      	cmp	r0, #0
 80089c6:	f040 8245 	bne.w	8008e54 <_dtoa_r+0x954>
 80089ca:	9d00      	ldr	r5, [sp, #0]
 80089cc:	2331      	movs	r3, #49	; 0x31
 80089ce:	f805 3b01 	strb.w	r3, [r5], #1
 80089d2:	f10b 0b01 	add.w	fp, fp, #1
 80089d6:	e241      	b.n	8008e5c <_dtoa_r+0x95c>
 80089d8:	07f2      	lsls	r2, r6, #31
 80089da:	d505      	bpl.n	80089e8 <_dtoa_r+0x4e8>
 80089dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089e0:	f7f7 fe2a 	bl	8000638 <__aeabi_dmul>
 80089e4:	3501      	adds	r5, #1
 80089e6:	2301      	movs	r3, #1
 80089e8:	1076      	asrs	r6, r6, #1
 80089ea:	3708      	adds	r7, #8
 80089ec:	e773      	b.n	80088d6 <_dtoa_r+0x3d6>
 80089ee:	2502      	movs	r5, #2
 80089f0:	e775      	b.n	80088de <_dtoa_r+0x3de>
 80089f2:	9e04      	ldr	r6, [sp, #16]
 80089f4:	465f      	mov	r7, fp
 80089f6:	e792      	b.n	800891e <_dtoa_r+0x41e>
 80089f8:	9900      	ldr	r1, [sp, #0]
 80089fa:	4b50      	ldr	r3, [pc, #320]	; (8008b3c <_dtoa_r+0x63c>)
 80089fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a00:	4431      	add	r1, r6
 8008a02:	9102      	str	r1, [sp, #8]
 8008a04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a06:	eeb0 9a47 	vmov.f32	s18, s14
 8008a0a:	eef0 9a67 	vmov.f32	s19, s15
 8008a0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008a12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a16:	2900      	cmp	r1, #0
 8008a18:	d044      	beq.n	8008aa4 <_dtoa_r+0x5a4>
 8008a1a:	494e      	ldr	r1, [pc, #312]	; (8008b54 <_dtoa_r+0x654>)
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	f7f7 ff35 	bl	800088c <__aeabi_ddiv>
 8008a22:	ec53 2b19 	vmov	r2, r3, d9
 8008a26:	f7f7 fc4f 	bl	80002c8 <__aeabi_dsub>
 8008a2a:	9d00      	ldr	r5, [sp, #0]
 8008a2c:	ec41 0b19 	vmov	d9, r0, r1
 8008a30:	4649      	mov	r1, r9
 8008a32:	4640      	mov	r0, r8
 8008a34:	f7f8 f8b0 	bl	8000b98 <__aeabi_d2iz>
 8008a38:	4606      	mov	r6, r0
 8008a3a:	f7f7 fd93 	bl	8000564 <__aeabi_i2d>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	460b      	mov	r3, r1
 8008a42:	4640      	mov	r0, r8
 8008a44:	4649      	mov	r1, r9
 8008a46:	f7f7 fc3f 	bl	80002c8 <__aeabi_dsub>
 8008a4a:	3630      	adds	r6, #48	; 0x30
 8008a4c:	f805 6b01 	strb.w	r6, [r5], #1
 8008a50:	ec53 2b19 	vmov	r2, r3, d9
 8008a54:	4680      	mov	r8, r0
 8008a56:	4689      	mov	r9, r1
 8008a58:	f7f8 f860 	bl	8000b1c <__aeabi_dcmplt>
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	d164      	bne.n	8008b2a <_dtoa_r+0x62a>
 8008a60:	4642      	mov	r2, r8
 8008a62:	464b      	mov	r3, r9
 8008a64:	4937      	ldr	r1, [pc, #220]	; (8008b44 <_dtoa_r+0x644>)
 8008a66:	2000      	movs	r0, #0
 8008a68:	f7f7 fc2e 	bl	80002c8 <__aeabi_dsub>
 8008a6c:	ec53 2b19 	vmov	r2, r3, d9
 8008a70:	f7f8 f854 	bl	8000b1c <__aeabi_dcmplt>
 8008a74:	2800      	cmp	r0, #0
 8008a76:	f040 80b6 	bne.w	8008be6 <_dtoa_r+0x6e6>
 8008a7a:	9b02      	ldr	r3, [sp, #8]
 8008a7c:	429d      	cmp	r5, r3
 8008a7e:	f43f af7c 	beq.w	800897a <_dtoa_r+0x47a>
 8008a82:	4b31      	ldr	r3, [pc, #196]	; (8008b48 <_dtoa_r+0x648>)
 8008a84:	ec51 0b19 	vmov	r0, r1, d9
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f7f7 fdd5 	bl	8000638 <__aeabi_dmul>
 8008a8e:	4b2e      	ldr	r3, [pc, #184]	; (8008b48 <_dtoa_r+0x648>)
 8008a90:	ec41 0b19 	vmov	d9, r0, r1
 8008a94:	2200      	movs	r2, #0
 8008a96:	4640      	mov	r0, r8
 8008a98:	4649      	mov	r1, r9
 8008a9a:	f7f7 fdcd 	bl	8000638 <__aeabi_dmul>
 8008a9e:	4680      	mov	r8, r0
 8008aa0:	4689      	mov	r9, r1
 8008aa2:	e7c5      	b.n	8008a30 <_dtoa_r+0x530>
 8008aa4:	ec51 0b17 	vmov	r0, r1, d7
 8008aa8:	f7f7 fdc6 	bl	8000638 <__aeabi_dmul>
 8008aac:	9b02      	ldr	r3, [sp, #8]
 8008aae:	9d00      	ldr	r5, [sp, #0]
 8008ab0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ab2:	ec41 0b19 	vmov	d9, r0, r1
 8008ab6:	4649      	mov	r1, r9
 8008ab8:	4640      	mov	r0, r8
 8008aba:	f7f8 f86d 	bl	8000b98 <__aeabi_d2iz>
 8008abe:	4606      	mov	r6, r0
 8008ac0:	f7f7 fd50 	bl	8000564 <__aeabi_i2d>
 8008ac4:	3630      	adds	r6, #48	; 0x30
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	460b      	mov	r3, r1
 8008aca:	4640      	mov	r0, r8
 8008acc:	4649      	mov	r1, r9
 8008ace:	f7f7 fbfb 	bl	80002c8 <__aeabi_dsub>
 8008ad2:	f805 6b01 	strb.w	r6, [r5], #1
 8008ad6:	9b02      	ldr	r3, [sp, #8]
 8008ad8:	429d      	cmp	r5, r3
 8008ada:	4680      	mov	r8, r0
 8008adc:	4689      	mov	r9, r1
 8008ade:	f04f 0200 	mov.w	r2, #0
 8008ae2:	d124      	bne.n	8008b2e <_dtoa_r+0x62e>
 8008ae4:	4b1b      	ldr	r3, [pc, #108]	; (8008b54 <_dtoa_r+0x654>)
 8008ae6:	ec51 0b19 	vmov	r0, r1, d9
 8008aea:	f7f7 fbef 	bl	80002cc <__adddf3>
 8008aee:	4602      	mov	r2, r0
 8008af0:	460b      	mov	r3, r1
 8008af2:	4640      	mov	r0, r8
 8008af4:	4649      	mov	r1, r9
 8008af6:	f7f8 f82f 	bl	8000b58 <__aeabi_dcmpgt>
 8008afa:	2800      	cmp	r0, #0
 8008afc:	d173      	bne.n	8008be6 <_dtoa_r+0x6e6>
 8008afe:	ec53 2b19 	vmov	r2, r3, d9
 8008b02:	4914      	ldr	r1, [pc, #80]	; (8008b54 <_dtoa_r+0x654>)
 8008b04:	2000      	movs	r0, #0
 8008b06:	f7f7 fbdf 	bl	80002c8 <__aeabi_dsub>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	4640      	mov	r0, r8
 8008b10:	4649      	mov	r1, r9
 8008b12:	f7f8 f803 	bl	8000b1c <__aeabi_dcmplt>
 8008b16:	2800      	cmp	r0, #0
 8008b18:	f43f af2f 	beq.w	800897a <_dtoa_r+0x47a>
 8008b1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008b1e:	1e6b      	subs	r3, r5, #1
 8008b20:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008b26:	2b30      	cmp	r3, #48	; 0x30
 8008b28:	d0f8      	beq.n	8008b1c <_dtoa_r+0x61c>
 8008b2a:	46bb      	mov	fp, r7
 8008b2c:	e04a      	b.n	8008bc4 <_dtoa_r+0x6c4>
 8008b2e:	4b06      	ldr	r3, [pc, #24]	; (8008b48 <_dtoa_r+0x648>)
 8008b30:	f7f7 fd82 	bl	8000638 <__aeabi_dmul>
 8008b34:	4680      	mov	r8, r0
 8008b36:	4689      	mov	r9, r1
 8008b38:	e7bd      	b.n	8008ab6 <_dtoa_r+0x5b6>
 8008b3a:	bf00      	nop
 8008b3c:	0800b118 	.word	0x0800b118
 8008b40:	0800b0f0 	.word	0x0800b0f0
 8008b44:	3ff00000 	.word	0x3ff00000
 8008b48:	40240000 	.word	0x40240000
 8008b4c:	401c0000 	.word	0x401c0000
 8008b50:	40140000 	.word	0x40140000
 8008b54:	3fe00000 	.word	0x3fe00000
 8008b58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008b5c:	9d00      	ldr	r5, [sp, #0]
 8008b5e:	4642      	mov	r2, r8
 8008b60:	464b      	mov	r3, r9
 8008b62:	4630      	mov	r0, r6
 8008b64:	4639      	mov	r1, r7
 8008b66:	f7f7 fe91 	bl	800088c <__aeabi_ddiv>
 8008b6a:	f7f8 f815 	bl	8000b98 <__aeabi_d2iz>
 8008b6e:	9001      	str	r0, [sp, #4]
 8008b70:	f7f7 fcf8 	bl	8000564 <__aeabi_i2d>
 8008b74:	4642      	mov	r2, r8
 8008b76:	464b      	mov	r3, r9
 8008b78:	f7f7 fd5e 	bl	8000638 <__aeabi_dmul>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	4630      	mov	r0, r6
 8008b82:	4639      	mov	r1, r7
 8008b84:	f7f7 fba0 	bl	80002c8 <__aeabi_dsub>
 8008b88:	9e01      	ldr	r6, [sp, #4]
 8008b8a:	9f04      	ldr	r7, [sp, #16]
 8008b8c:	3630      	adds	r6, #48	; 0x30
 8008b8e:	f805 6b01 	strb.w	r6, [r5], #1
 8008b92:	9e00      	ldr	r6, [sp, #0]
 8008b94:	1bae      	subs	r6, r5, r6
 8008b96:	42b7      	cmp	r7, r6
 8008b98:	4602      	mov	r2, r0
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	d134      	bne.n	8008c08 <_dtoa_r+0x708>
 8008b9e:	f7f7 fb95 	bl	80002cc <__adddf3>
 8008ba2:	4642      	mov	r2, r8
 8008ba4:	464b      	mov	r3, r9
 8008ba6:	4606      	mov	r6, r0
 8008ba8:	460f      	mov	r7, r1
 8008baa:	f7f7 ffd5 	bl	8000b58 <__aeabi_dcmpgt>
 8008bae:	b9c8      	cbnz	r0, 8008be4 <_dtoa_r+0x6e4>
 8008bb0:	4642      	mov	r2, r8
 8008bb2:	464b      	mov	r3, r9
 8008bb4:	4630      	mov	r0, r6
 8008bb6:	4639      	mov	r1, r7
 8008bb8:	f7f7 ffa6 	bl	8000b08 <__aeabi_dcmpeq>
 8008bbc:	b110      	cbz	r0, 8008bc4 <_dtoa_r+0x6c4>
 8008bbe:	9b01      	ldr	r3, [sp, #4]
 8008bc0:	07db      	lsls	r3, r3, #31
 8008bc2:	d40f      	bmi.n	8008be4 <_dtoa_r+0x6e4>
 8008bc4:	4651      	mov	r1, sl
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	f000 fbcc 	bl	8009364 <_Bfree>
 8008bcc:	2300      	movs	r3, #0
 8008bce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008bd0:	702b      	strb	r3, [r5, #0]
 8008bd2:	f10b 0301 	add.w	r3, fp, #1
 8008bd6:	6013      	str	r3, [r2, #0]
 8008bd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f43f ace2 	beq.w	80085a4 <_dtoa_r+0xa4>
 8008be0:	601d      	str	r5, [r3, #0]
 8008be2:	e4df      	b.n	80085a4 <_dtoa_r+0xa4>
 8008be4:	465f      	mov	r7, fp
 8008be6:	462b      	mov	r3, r5
 8008be8:	461d      	mov	r5, r3
 8008bea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008bee:	2a39      	cmp	r2, #57	; 0x39
 8008bf0:	d106      	bne.n	8008c00 <_dtoa_r+0x700>
 8008bf2:	9a00      	ldr	r2, [sp, #0]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d1f7      	bne.n	8008be8 <_dtoa_r+0x6e8>
 8008bf8:	9900      	ldr	r1, [sp, #0]
 8008bfa:	2230      	movs	r2, #48	; 0x30
 8008bfc:	3701      	adds	r7, #1
 8008bfe:	700a      	strb	r2, [r1, #0]
 8008c00:	781a      	ldrb	r2, [r3, #0]
 8008c02:	3201      	adds	r2, #1
 8008c04:	701a      	strb	r2, [r3, #0]
 8008c06:	e790      	b.n	8008b2a <_dtoa_r+0x62a>
 8008c08:	4ba3      	ldr	r3, [pc, #652]	; (8008e98 <_dtoa_r+0x998>)
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f7f7 fd14 	bl	8000638 <__aeabi_dmul>
 8008c10:	2200      	movs	r2, #0
 8008c12:	2300      	movs	r3, #0
 8008c14:	4606      	mov	r6, r0
 8008c16:	460f      	mov	r7, r1
 8008c18:	f7f7 ff76 	bl	8000b08 <__aeabi_dcmpeq>
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	d09e      	beq.n	8008b5e <_dtoa_r+0x65e>
 8008c20:	e7d0      	b.n	8008bc4 <_dtoa_r+0x6c4>
 8008c22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c24:	2a00      	cmp	r2, #0
 8008c26:	f000 80ca 	beq.w	8008dbe <_dtoa_r+0x8be>
 8008c2a:	9a07      	ldr	r2, [sp, #28]
 8008c2c:	2a01      	cmp	r2, #1
 8008c2e:	f300 80ad 	bgt.w	8008d8c <_dtoa_r+0x88c>
 8008c32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c34:	2a00      	cmp	r2, #0
 8008c36:	f000 80a5 	beq.w	8008d84 <_dtoa_r+0x884>
 8008c3a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008c3e:	9e08      	ldr	r6, [sp, #32]
 8008c40:	9d05      	ldr	r5, [sp, #20]
 8008c42:	9a05      	ldr	r2, [sp, #20]
 8008c44:	441a      	add	r2, r3
 8008c46:	9205      	str	r2, [sp, #20]
 8008c48:	9a06      	ldr	r2, [sp, #24]
 8008c4a:	2101      	movs	r1, #1
 8008c4c:	441a      	add	r2, r3
 8008c4e:	4620      	mov	r0, r4
 8008c50:	9206      	str	r2, [sp, #24]
 8008c52:	f000 fc3d 	bl	80094d0 <__i2b>
 8008c56:	4607      	mov	r7, r0
 8008c58:	b165      	cbz	r5, 8008c74 <_dtoa_r+0x774>
 8008c5a:	9b06      	ldr	r3, [sp, #24]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	dd09      	ble.n	8008c74 <_dtoa_r+0x774>
 8008c60:	42ab      	cmp	r3, r5
 8008c62:	9a05      	ldr	r2, [sp, #20]
 8008c64:	bfa8      	it	ge
 8008c66:	462b      	movge	r3, r5
 8008c68:	1ad2      	subs	r2, r2, r3
 8008c6a:	9205      	str	r2, [sp, #20]
 8008c6c:	9a06      	ldr	r2, [sp, #24]
 8008c6e:	1aed      	subs	r5, r5, r3
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	9306      	str	r3, [sp, #24]
 8008c74:	9b08      	ldr	r3, [sp, #32]
 8008c76:	b1f3      	cbz	r3, 8008cb6 <_dtoa_r+0x7b6>
 8008c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f000 80a3 	beq.w	8008dc6 <_dtoa_r+0x8c6>
 8008c80:	2e00      	cmp	r6, #0
 8008c82:	dd10      	ble.n	8008ca6 <_dtoa_r+0x7a6>
 8008c84:	4639      	mov	r1, r7
 8008c86:	4632      	mov	r2, r6
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f000 fce1 	bl	8009650 <__pow5mult>
 8008c8e:	4652      	mov	r2, sl
 8008c90:	4601      	mov	r1, r0
 8008c92:	4607      	mov	r7, r0
 8008c94:	4620      	mov	r0, r4
 8008c96:	f000 fc31 	bl	80094fc <__multiply>
 8008c9a:	4651      	mov	r1, sl
 8008c9c:	4680      	mov	r8, r0
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	f000 fb60 	bl	8009364 <_Bfree>
 8008ca4:	46c2      	mov	sl, r8
 8008ca6:	9b08      	ldr	r3, [sp, #32]
 8008ca8:	1b9a      	subs	r2, r3, r6
 8008caa:	d004      	beq.n	8008cb6 <_dtoa_r+0x7b6>
 8008cac:	4651      	mov	r1, sl
 8008cae:	4620      	mov	r0, r4
 8008cb0:	f000 fcce 	bl	8009650 <__pow5mult>
 8008cb4:	4682      	mov	sl, r0
 8008cb6:	2101      	movs	r1, #1
 8008cb8:	4620      	mov	r0, r4
 8008cba:	f000 fc09 	bl	80094d0 <__i2b>
 8008cbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	4606      	mov	r6, r0
 8008cc4:	f340 8081 	ble.w	8008dca <_dtoa_r+0x8ca>
 8008cc8:	461a      	mov	r2, r3
 8008cca:	4601      	mov	r1, r0
 8008ccc:	4620      	mov	r0, r4
 8008cce:	f000 fcbf 	bl	8009650 <__pow5mult>
 8008cd2:	9b07      	ldr	r3, [sp, #28]
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	4606      	mov	r6, r0
 8008cd8:	dd7a      	ble.n	8008dd0 <_dtoa_r+0x8d0>
 8008cda:	f04f 0800 	mov.w	r8, #0
 8008cde:	6933      	ldr	r3, [r6, #16]
 8008ce0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008ce4:	6918      	ldr	r0, [r3, #16]
 8008ce6:	f000 fba5 	bl	8009434 <__hi0bits>
 8008cea:	f1c0 0020 	rsb	r0, r0, #32
 8008cee:	9b06      	ldr	r3, [sp, #24]
 8008cf0:	4418      	add	r0, r3
 8008cf2:	f010 001f 	ands.w	r0, r0, #31
 8008cf6:	f000 8094 	beq.w	8008e22 <_dtoa_r+0x922>
 8008cfa:	f1c0 0320 	rsb	r3, r0, #32
 8008cfe:	2b04      	cmp	r3, #4
 8008d00:	f340 8085 	ble.w	8008e0e <_dtoa_r+0x90e>
 8008d04:	9b05      	ldr	r3, [sp, #20]
 8008d06:	f1c0 001c 	rsb	r0, r0, #28
 8008d0a:	4403      	add	r3, r0
 8008d0c:	9305      	str	r3, [sp, #20]
 8008d0e:	9b06      	ldr	r3, [sp, #24]
 8008d10:	4403      	add	r3, r0
 8008d12:	4405      	add	r5, r0
 8008d14:	9306      	str	r3, [sp, #24]
 8008d16:	9b05      	ldr	r3, [sp, #20]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	dd05      	ble.n	8008d28 <_dtoa_r+0x828>
 8008d1c:	4651      	mov	r1, sl
 8008d1e:	461a      	mov	r2, r3
 8008d20:	4620      	mov	r0, r4
 8008d22:	f000 fcef 	bl	8009704 <__lshift>
 8008d26:	4682      	mov	sl, r0
 8008d28:	9b06      	ldr	r3, [sp, #24]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	dd05      	ble.n	8008d3a <_dtoa_r+0x83a>
 8008d2e:	4631      	mov	r1, r6
 8008d30:	461a      	mov	r2, r3
 8008d32:	4620      	mov	r0, r4
 8008d34:	f000 fce6 	bl	8009704 <__lshift>
 8008d38:	4606      	mov	r6, r0
 8008d3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d072      	beq.n	8008e26 <_dtoa_r+0x926>
 8008d40:	4631      	mov	r1, r6
 8008d42:	4650      	mov	r0, sl
 8008d44:	f000 fd4a 	bl	80097dc <__mcmp>
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	da6c      	bge.n	8008e26 <_dtoa_r+0x926>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	4651      	mov	r1, sl
 8008d50:	220a      	movs	r2, #10
 8008d52:	4620      	mov	r0, r4
 8008d54:	f000 fb28 	bl	80093a8 <__multadd>
 8008d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d5a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008d5e:	4682      	mov	sl, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f000 81b0 	beq.w	80090c6 <_dtoa_r+0xbc6>
 8008d66:	2300      	movs	r3, #0
 8008d68:	4639      	mov	r1, r7
 8008d6a:	220a      	movs	r2, #10
 8008d6c:	4620      	mov	r0, r4
 8008d6e:	f000 fb1b 	bl	80093a8 <__multadd>
 8008d72:	9b01      	ldr	r3, [sp, #4]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	4607      	mov	r7, r0
 8008d78:	f300 8096 	bgt.w	8008ea8 <_dtoa_r+0x9a8>
 8008d7c:	9b07      	ldr	r3, [sp, #28]
 8008d7e:	2b02      	cmp	r3, #2
 8008d80:	dc59      	bgt.n	8008e36 <_dtoa_r+0x936>
 8008d82:	e091      	b.n	8008ea8 <_dtoa_r+0x9a8>
 8008d84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008d8a:	e758      	b.n	8008c3e <_dtoa_r+0x73e>
 8008d8c:	9b04      	ldr	r3, [sp, #16]
 8008d8e:	1e5e      	subs	r6, r3, #1
 8008d90:	9b08      	ldr	r3, [sp, #32]
 8008d92:	42b3      	cmp	r3, r6
 8008d94:	bfbf      	itttt	lt
 8008d96:	9b08      	ldrlt	r3, [sp, #32]
 8008d98:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008d9a:	9608      	strlt	r6, [sp, #32]
 8008d9c:	1af3      	sublt	r3, r6, r3
 8008d9e:	bfb4      	ite	lt
 8008da0:	18d2      	addlt	r2, r2, r3
 8008da2:	1b9e      	subge	r6, r3, r6
 8008da4:	9b04      	ldr	r3, [sp, #16]
 8008da6:	bfbc      	itt	lt
 8008da8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008daa:	2600      	movlt	r6, #0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	bfb7      	itett	lt
 8008db0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008db4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008db8:	1a9d      	sublt	r5, r3, r2
 8008dba:	2300      	movlt	r3, #0
 8008dbc:	e741      	b.n	8008c42 <_dtoa_r+0x742>
 8008dbe:	9e08      	ldr	r6, [sp, #32]
 8008dc0:	9d05      	ldr	r5, [sp, #20]
 8008dc2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008dc4:	e748      	b.n	8008c58 <_dtoa_r+0x758>
 8008dc6:	9a08      	ldr	r2, [sp, #32]
 8008dc8:	e770      	b.n	8008cac <_dtoa_r+0x7ac>
 8008dca:	9b07      	ldr	r3, [sp, #28]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	dc19      	bgt.n	8008e04 <_dtoa_r+0x904>
 8008dd0:	9b02      	ldr	r3, [sp, #8]
 8008dd2:	b9bb      	cbnz	r3, 8008e04 <_dtoa_r+0x904>
 8008dd4:	9b03      	ldr	r3, [sp, #12]
 8008dd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dda:	b99b      	cbnz	r3, 8008e04 <_dtoa_r+0x904>
 8008ddc:	9b03      	ldr	r3, [sp, #12]
 8008dde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008de2:	0d1b      	lsrs	r3, r3, #20
 8008de4:	051b      	lsls	r3, r3, #20
 8008de6:	b183      	cbz	r3, 8008e0a <_dtoa_r+0x90a>
 8008de8:	9b05      	ldr	r3, [sp, #20]
 8008dea:	3301      	adds	r3, #1
 8008dec:	9305      	str	r3, [sp, #20]
 8008dee:	9b06      	ldr	r3, [sp, #24]
 8008df0:	3301      	adds	r3, #1
 8008df2:	9306      	str	r3, [sp, #24]
 8008df4:	f04f 0801 	mov.w	r8, #1
 8008df8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	f47f af6f 	bne.w	8008cde <_dtoa_r+0x7de>
 8008e00:	2001      	movs	r0, #1
 8008e02:	e774      	b.n	8008cee <_dtoa_r+0x7ee>
 8008e04:	f04f 0800 	mov.w	r8, #0
 8008e08:	e7f6      	b.n	8008df8 <_dtoa_r+0x8f8>
 8008e0a:	4698      	mov	r8, r3
 8008e0c:	e7f4      	b.n	8008df8 <_dtoa_r+0x8f8>
 8008e0e:	d082      	beq.n	8008d16 <_dtoa_r+0x816>
 8008e10:	9a05      	ldr	r2, [sp, #20]
 8008e12:	331c      	adds	r3, #28
 8008e14:	441a      	add	r2, r3
 8008e16:	9205      	str	r2, [sp, #20]
 8008e18:	9a06      	ldr	r2, [sp, #24]
 8008e1a:	441a      	add	r2, r3
 8008e1c:	441d      	add	r5, r3
 8008e1e:	9206      	str	r2, [sp, #24]
 8008e20:	e779      	b.n	8008d16 <_dtoa_r+0x816>
 8008e22:	4603      	mov	r3, r0
 8008e24:	e7f4      	b.n	8008e10 <_dtoa_r+0x910>
 8008e26:	9b04      	ldr	r3, [sp, #16]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	dc37      	bgt.n	8008e9c <_dtoa_r+0x99c>
 8008e2c:	9b07      	ldr	r3, [sp, #28]
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	dd34      	ble.n	8008e9c <_dtoa_r+0x99c>
 8008e32:	9b04      	ldr	r3, [sp, #16]
 8008e34:	9301      	str	r3, [sp, #4]
 8008e36:	9b01      	ldr	r3, [sp, #4]
 8008e38:	b963      	cbnz	r3, 8008e54 <_dtoa_r+0x954>
 8008e3a:	4631      	mov	r1, r6
 8008e3c:	2205      	movs	r2, #5
 8008e3e:	4620      	mov	r0, r4
 8008e40:	f000 fab2 	bl	80093a8 <__multadd>
 8008e44:	4601      	mov	r1, r0
 8008e46:	4606      	mov	r6, r0
 8008e48:	4650      	mov	r0, sl
 8008e4a:	f000 fcc7 	bl	80097dc <__mcmp>
 8008e4e:	2800      	cmp	r0, #0
 8008e50:	f73f adbb 	bgt.w	80089ca <_dtoa_r+0x4ca>
 8008e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e56:	9d00      	ldr	r5, [sp, #0]
 8008e58:	ea6f 0b03 	mvn.w	fp, r3
 8008e5c:	f04f 0800 	mov.w	r8, #0
 8008e60:	4631      	mov	r1, r6
 8008e62:	4620      	mov	r0, r4
 8008e64:	f000 fa7e 	bl	8009364 <_Bfree>
 8008e68:	2f00      	cmp	r7, #0
 8008e6a:	f43f aeab 	beq.w	8008bc4 <_dtoa_r+0x6c4>
 8008e6e:	f1b8 0f00 	cmp.w	r8, #0
 8008e72:	d005      	beq.n	8008e80 <_dtoa_r+0x980>
 8008e74:	45b8      	cmp	r8, r7
 8008e76:	d003      	beq.n	8008e80 <_dtoa_r+0x980>
 8008e78:	4641      	mov	r1, r8
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f000 fa72 	bl	8009364 <_Bfree>
 8008e80:	4639      	mov	r1, r7
 8008e82:	4620      	mov	r0, r4
 8008e84:	f000 fa6e 	bl	8009364 <_Bfree>
 8008e88:	e69c      	b.n	8008bc4 <_dtoa_r+0x6c4>
 8008e8a:	2600      	movs	r6, #0
 8008e8c:	4637      	mov	r7, r6
 8008e8e:	e7e1      	b.n	8008e54 <_dtoa_r+0x954>
 8008e90:	46bb      	mov	fp, r7
 8008e92:	4637      	mov	r7, r6
 8008e94:	e599      	b.n	80089ca <_dtoa_r+0x4ca>
 8008e96:	bf00      	nop
 8008e98:	40240000 	.word	0x40240000
 8008e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	f000 80c8 	beq.w	8009034 <_dtoa_r+0xb34>
 8008ea4:	9b04      	ldr	r3, [sp, #16]
 8008ea6:	9301      	str	r3, [sp, #4]
 8008ea8:	2d00      	cmp	r5, #0
 8008eaa:	dd05      	ble.n	8008eb8 <_dtoa_r+0x9b8>
 8008eac:	4639      	mov	r1, r7
 8008eae:	462a      	mov	r2, r5
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	f000 fc27 	bl	8009704 <__lshift>
 8008eb6:	4607      	mov	r7, r0
 8008eb8:	f1b8 0f00 	cmp.w	r8, #0
 8008ebc:	d05b      	beq.n	8008f76 <_dtoa_r+0xa76>
 8008ebe:	6879      	ldr	r1, [r7, #4]
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	f000 fa0f 	bl	80092e4 <_Balloc>
 8008ec6:	4605      	mov	r5, r0
 8008ec8:	b928      	cbnz	r0, 8008ed6 <_dtoa_r+0x9d6>
 8008eca:	4b83      	ldr	r3, [pc, #524]	; (80090d8 <_dtoa_r+0xbd8>)
 8008ecc:	4602      	mov	r2, r0
 8008ece:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008ed2:	f7ff bb2e 	b.w	8008532 <_dtoa_r+0x32>
 8008ed6:	693a      	ldr	r2, [r7, #16]
 8008ed8:	3202      	adds	r2, #2
 8008eda:	0092      	lsls	r2, r2, #2
 8008edc:	f107 010c 	add.w	r1, r7, #12
 8008ee0:	300c      	adds	r0, #12
 8008ee2:	f7ff fa75 	bl	80083d0 <memcpy>
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	4629      	mov	r1, r5
 8008eea:	4620      	mov	r0, r4
 8008eec:	f000 fc0a 	bl	8009704 <__lshift>
 8008ef0:	9b00      	ldr	r3, [sp, #0]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	9304      	str	r3, [sp, #16]
 8008ef6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008efa:	4413      	add	r3, r2
 8008efc:	9308      	str	r3, [sp, #32]
 8008efe:	9b02      	ldr	r3, [sp, #8]
 8008f00:	f003 0301 	and.w	r3, r3, #1
 8008f04:	46b8      	mov	r8, r7
 8008f06:	9306      	str	r3, [sp, #24]
 8008f08:	4607      	mov	r7, r0
 8008f0a:	9b04      	ldr	r3, [sp, #16]
 8008f0c:	4631      	mov	r1, r6
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	4650      	mov	r0, sl
 8008f12:	9301      	str	r3, [sp, #4]
 8008f14:	f7ff fa6a 	bl	80083ec <quorem>
 8008f18:	4641      	mov	r1, r8
 8008f1a:	9002      	str	r0, [sp, #8]
 8008f1c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008f20:	4650      	mov	r0, sl
 8008f22:	f000 fc5b 	bl	80097dc <__mcmp>
 8008f26:	463a      	mov	r2, r7
 8008f28:	9005      	str	r0, [sp, #20]
 8008f2a:	4631      	mov	r1, r6
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	f000 fc71 	bl	8009814 <__mdiff>
 8008f32:	68c2      	ldr	r2, [r0, #12]
 8008f34:	4605      	mov	r5, r0
 8008f36:	bb02      	cbnz	r2, 8008f7a <_dtoa_r+0xa7a>
 8008f38:	4601      	mov	r1, r0
 8008f3a:	4650      	mov	r0, sl
 8008f3c:	f000 fc4e 	bl	80097dc <__mcmp>
 8008f40:	4602      	mov	r2, r0
 8008f42:	4629      	mov	r1, r5
 8008f44:	4620      	mov	r0, r4
 8008f46:	9209      	str	r2, [sp, #36]	; 0x24
 8008f48:	f000 fa0c 	bl	8009364 <_Bfree>
 8008f4c:	9b07      	ldr	r3, [sp, #28]
 8008f4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f50:	9d04      	ldr	r5, [sp, #16]
 8008f52:	ea43 0102 	orr.w	r1, r3, r2
 8008f56:	9b06      	ldr	r3, [sp, #24]
 8008f58:	4319      	orrs	r1, r3
 8008f5a:	d110      	bne.n	8008f7e <_dtoa_r+0xa7e>
 8008f5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008f60:	d029      	beq.n	8008fb6 <_dtoa_r+0xab6>
 8008f62:	9b05      	ldr	r3, [sp, #20]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	dd02      	ble.n	8008f6e <_dtoa_r+0xa6e>
 8008f68:	9b02      	ldr	r3, [sp, #8]
 8008f6a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008f6e:	9b01      	ldr	r3, [sp, #4]
 8008f70:	f883 9000 	strb.w	r9, [r3]
 8008f74:	e774      	b.n	8008e60 <_dtoa_r+0x960>
 8008f76:	4638      	mov	r0, r7
 8008f78:	e7ba      	b.n	8008ef0 <_dtoa_r+0x9f0>
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	e7e1      	b.n	8008f42 <_dtoa_r+0xa42>
 8008f7e:	9b05      	ldr	r3, [sp, #20]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	db04      	blt.n	8008f8e <_dtoa_r+0xa8e>
 8008f84:	9907      	ldr	r1, [sp, #28]
 8008f86:	430b      	orrs	r3, r1
 8008f88:	9906      	ldr	r1, [sp, #24]
 8008f8a:	430b      	orrs	r3, r1
 8008f8c:	d120      	bne.n	8008fd0 <_dtoa_r+0xad0>
 8008f8e:	2a00      	cmp	r2, #0
 8008f90:	dded      	ble.n	8008f6e <_dtoa_r+0xa6e>
 8008f92:	4651      	mov	r1, sl
 8008f94:	2201      	movs	r2, #1
 8008f96:	4620      	mov	r0, r4
 8008f98:	f000 fbb4 	bl	8009704 <__lshift>
 8008f9c:	4631      	mov	r1, r6
 8008f9e:	4682      	mov	sl, r0
 8008fa0:	f000 fc1c 	bl	80097dc <__mcmp>
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	dc03      	bgt.n	8008fb0 <_dtoa_r+0xab0>
 8008fa8:	d1e1      	bne.n	8008f6e <_dtoa_r+0xa6e>
 8008faa:	f019 0f01 	tst.w	r9, #1
 8008fae:	d0de      	beq.n	8008f6e <_dtoa_r+0xa6e>
 8008fb0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008fb4:	d1d8      	bne.n	8008f68 <_dtoa_r+0xa68>
 8008fb6:	9a01      	ldr	r2, [sp, #4]
 8008fb8:	2339      	movs	r3, #57	; 0x39
 8008fba:	7013      	strb	r3, [r2, #0]
 8008fbc:	462b      	mov	r3, r5
 8008fbe:	461d      	mov	r5, r3
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008fc6:	2a39      	cmp	r2, #57	; 0x39
 8008fc8:	d06c      	beq.n	80090a4 <_dtoa_r+0xba4>
 8008fca:	3201      	adds	r2, #1
 8008fcc:	701a      	strb	r2, [r3, #0]
 8008fce:	e747      	b.n	8008e60 <_dtoa_r+0x960>
 8008fd0:	2a00      	cmp	r2, #0
 8008fd2:	dd07      	ble.n	8008fe4 <_dtoa_r+0xae4>
 8008fd4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008fd8:	d0ed      	beq.n	8008fb6 <_dtoa_r+0xab6>
 8008fda:	9a01      	ldr	r2, [sp, #4]
 8008fdc:	f109 0301 	add.w	r3, r9, #1
 8008fe0:	7013      	strb	r3, [r2, #0]
 8008fe2:	e73d      	b.n	8008e60 <_dtoa_r+0x960>
 8008fe4:	9b04      	ldr	r3, [sp, #16]
 8008fe6:	9a08      	ldr	r2, [sp, #32]
 8008fe8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d043      	beq.n	8009078 <_dtoa_r+0xb78>
 8008ff0:	4651      	mov	r1, sl
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	220a      	movs	r2, #10
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	f000 f9d6 	bl	80093a8 <__multadd>
 8008ffc:	45b8      	cmp	r8, r7
 8008ffe:	4682      	mov	sl, r0
 8009000:	f04f 0300 	mov.w	r3, #0
 8009004:	f04f 020a 	mov.w	r2, #10
 8009008:	4641      	mov	r1, r8
 800900a:	4620      	mov	r0, r4
 800900c:	d107      	bne.n	800901e <_dtoa_r+0xb1e>
 800900e:	f000 f9cb 	bl	80093a8 <__multadd>
 8009012:	4680      	mov	r8, r0
 8009014:	4607      	mov	r7, r0
 8009016:	9b04      	ldr	r3, [sp, #16]
 8009018:	3301      	adds	r3, #1
 800901a:	9304      	str	r3, [sp, #16]
 800901c:	e775      	b.n	8008f0a <_dtoa_r+0xa0a>
 800901e:	f000 f9c3 	bl	80093a8 <__multadd>
 8009022:	4639      	mov	r1, r7
 8009024:	4680      	mov	r8, r0
 8009026:	2300      	movs	r3, #0
 8009028:	220a      	movs	r2, #10
 800902a:	4620      	mov	r0, r4
 800902c:	f000 f9bc 	bl	80093a8 <__multadd>
 8009030:	4607      	mov	r7, r0
 8009032:	e7f0      	b.n	8009016 <_dtoa_r+0xb16>
 8009034:	9b04      	ldr	r3, [sp, #16]
 8009036:	9301      	str	r3, [sp, #4]
 8009038:	9d00      	ldr	r5, [sp, #0]
 800903a:	4631      	mov	r1, r6
 800903c:	4650      	mov	r0, sl
 800903e:	f7ff f9d5 	bl	80083ec <quorem>
 8009042:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009046:	9b00      	ldr	r3, [sp, #0]
 8009048:	f805 9b01 	strb.w	r9, [r5], #1
 800904c:	1aea      	subs	r2, r5, r3
 800904e:	9b01      	ldr	r3, [sp, #4]
 8009050:	4293      	cmp	r3, r2
 8009052:	dd07      	ble.n	8009064 <_dtoa_r+0xb64>
 8009054:	4651      	mov	r1, sl
 8009056:	2300      	movs	r3, #0
 8009058:	220a      	movs	r2, #10
 800905a:	4620      	mov	r0, r4
 800905c:	f000 f9a4 	bl	80093a8 <__multadd>
 8009060:	4682      	mov	sl, r0
 8009062:	e7ea      	b.n	800903a <_dtoa_r+0xb3a>
 8009064:	9b01      	ldr	r3, [sp, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	bfc8      	it	gt
 800906a:	461d      	movgt	r5, r3
 800906c:	9b00      	ldr	r3, [sp, #0]
 800906e:	bfd8      	it	le
 8009070:	2501      	movle	r5, #1
 8009072:	441d      	add	r5, r3
 8009074:	f04f 0800 	mov.w	r8, #0
 8009078:	4651      	mov	r1, sl
 800907a:	2201      	movs	r2, #1
 800907c:	4620      	mov	r0, r4
 800907e:	f000 fb41 	bl	8009704 <__lshift>
 8009082:	4631      	mov	r1, r6
 8009084:	4682      	mov	sl, r0
 8009086:	f000 fba9 	bl	80097dc <__mcmp>
 800908a:	2800      	cmp	r0, #0
 800908c:	dc96      	bgt.n	8008fbc <_dtoa_r+0xabc>
 800908e:	d102      	bne.n	8009096 <_dtoa_r+0xb96>
 8009090:	f019 0f01 	tst.w	r9, #1
 8009094:	d192      	bne.n	8008fbc <_dtoa_r+0xabc>
 8009096:	462b      	mov	r3, r5
 8009098:	461d      	mov	r5, r3
 800909a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800909e:	2a30      	cmp	r2, #48	; 0x30
 80090a0:	d0fa      	beq.n	8009098 <_dtoa_r+0xb98>
 80090a2:	e6dd      	b.n	8008e60 <_dtoa_r+0x960>
 80090a4:	9a00      	ldr	r2, [sp, #0]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d189      	bne.n	8008fbe <_dtoa_r+0xabe>
 80090aa:	f10b 0b01 	add.w	fp, fp, #1
 80090ae:	2331      	movs	r3, #49	; 0x31
 80090b0:	e796      	b.n	8008fe0 <_dtoa_r+0xae0>
 80090b2:	4b0a      	ldr	r3, [pc, #40]	; (80090dc <_dtoa_r+0xbdc>)
 80090b4:	f7ff ba99 	b.w	80085ea <_dtoa_r+0xea>
 80090b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	f47f aa6d 	bne.w	800859a <_dtoa_r+0x9a>
 80090c0:	4b07      	ldr	r3, [pc, #28]	; (80090e0 <_dtoa_r+0xbe0>)
 80090c2:	f7ff ba92 	b.w	80085ea <_dtoa_r+0xea>
 80090c6:	9b01      	ldr	r3, [sp, #4]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	dcb5      	bgt.n	8009038 <_dtoa_r+0xb38>
 80090cc:	9b07      	ldr	r3, [sp, #28]
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	f73f aeb1 	bgt.w	8008e36 <_dtoa_r+0x936>
 80090d4:	e7b0      	b.n	8009038 <_dtoa_r+0xb38>
 80090d6:	bf00      	nop
 80090d8:	0800b080 	.word	0x0800b080
 80090dc:	0800afe0 	.word	0x0800afe0
 80090e0:	0800b004 	.word	0x0800b004

080090e4 <_free_r>:
 80090e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090e6:	2900      	cmp	r1, #0
 80090e8:	d044      	beq.n	8009174 <_free_r+0x90>
 80090ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090ee:	9001      	str	r0, [sp, #4]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f1a1 0404 	sub.w	r4, r1, #4
 80090f6:	bfb8      	it	lt
 80090f8:	18e4      	addlt	r4, r4, r3
 80090fa:	f000 f8e7 	bl	80092cc <__malloc_lock>
 80090fe:	4a1e      	ldr	r2, [pc, #120]	; (8009178 <_free_r+0x94>)
 8009100:	9801      	ldr	r0, [sp, #4]
 8009102:	6813      	ldr	r3, [r2, #0]
 8009104:	b933      	cbnz	r3, 8009114 <_free_r+0x30>
 8009106:	6063      	str	r3, [r4, #4]
 8009108:	6014      	str	r4, [r2, #0]
 800910a:	b003      	add	sp, #12
 800910c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009110:	f000 b8e2 	b.w	80092d8 <__malloc_unlock>
 8009114:	42a3      	cmp	r3, r4
 8009116:	d908      	bls.n	800912a <_free_r+0x46>
 8009118:	6825      	ldr	r5, [r4, #0]
 800911a:	1961      	adds	r1, r4, r5
 800911c:	428b      	cmp	r3, r1
 800911e:	bf01      	itttt	eq
 8009120:	6819      	ldreq	r1, [r3, #0]
 8009122:	685b      	ldreq	r3, [r3, #4]
 8009124:	1949      	addeq	r1, r1, r5
 8009126:	6021      	streq	r1, [r4, #0]
 8009128:	e7ed      	b.n	8009106 <_free_r+0x22>
 800912a:	461a      	mov	r2, r3
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	b10b      	cbz	r3, 8009134 <_free_r+0x50>
 8009130:	42a3      	cmp	r3, r4
 8009132:	d9fa      	bls.n	800912a <_free_r+0x46>
 8009134:	6811      	ldr	r1, [r2, #0]
 8009136:	1855      	adds	r5, r2, r1
 8009138:	42a5      	cmp	r5, r4
 800913a:	d10b      	bne.n	8009154 <_free_r+0x70>
 800913c:	6824      	ldr	r4, [r4, #0]
 800913e:	4421      	add	r1, r4
 8009140:	1854      	adds	r4, r2, r1
 8009142:	42a3      	cmp	r3, r4
 8009144:	6011      	str	r1, [r2, #0]
 8009146:	d1e0      	bne.n	800910a <_free_r+0x26>
 8009148:	681c      	ldr	r4, [r3, #0]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	6053      	str	r3, [r2, #4]
 800914e:	440c      	add	r4, r1
 8009150:	6014      	str	r4, [r2, #0]
 8009152:	e7da      	b.n	800910a <_free_r+0x26>
 8009154:	d902      	bls.n	800915c <_free_r+0x78>
 8009156:	230c      	movs	r3, #12
 8009158:	6003      	str	r3, [r0, #0]
 800915a:	e7d6      	b.n	800910a <_free_r+0x26>
 800915c:	6825      	ldr	r5, [r4, #0]
 800915e:	1961      	adds	r1, r4, r5
 8009160:	428b      	cmp	r3, r1
 8009162:	bf04      	itt	eq
 8009164:	6819      	ldreq	r1, [r3, #0]
 8009166:	685b      	ldreq	r3, [r3, #4]
 8009168:	6063      	str	r3, [r4, #4]
 800916a:	bf04      	itt	eq
 800916c:	1949      	addeq	r1, r1, r5
 800916e:	6021      	streq	r1, [r4, #0]
 8009170:	6054      	str	r4, [r2, #4]
 8009172:	e7ca      	b.n	800910a <_free_r+0x26>
 8009174:	b003      	add	sp, #12
 8009176:	bd30      	pop	{r4, r5, pc}
 8009178:	20000548 	.word	0x20000548

0800917c <malloc>:
 800917c:	4b02      	ldr	r3, [pc, #8]	; (8009188 <malloc+0xc>)
 800917e:	4601      	mov	r1, r0
 8009180:	6818      	ldr	r0, [r3, #0]
 8009182:	f000 b823 	b.w	80091cc <_malloc_r>
 8009186:	bf00      	nop
 8009188:	2000006c 	.word	0x2000006c

0800918c <sbrk_aligned>:
 800918c:	b570      	push	{r4, r5, r6, lr}
 800918e:	4e0e      	ldr	r6, [pc, #56]	; (80091c8 <sbrk_aligned+0x3c>)
 8009190:	460c      	mov	r4, r1
 8009192:	6831      	ldr	r1, [r6, #0]
 8009194:	4605      	mov	r5, r0
 8009196:	b911      	cbnz	r1, 800919e <sbrk_aligned+0x12>
 8009198:	f000 fe40 	bl	8009e1c <_sbrk_r>
 800919c:	6030      	str	r0, [r6, #0]
 800919e:	4621      	mov	r1, r4
 80091a0:	4628      	mov	r0, r5
 80091a2:	f000 fe3b 	bl	8009e1c <_sbrk_r>
 80091a6:	1c43      	adds	r3, r0, #1
 80091a8:	d00a      	beq.n	80091c0 <sbrk_aligned+0x34>
 80091aa:	1cc4      	adds	r4, r0, #3
 80091ac:	f024 0403 	bic.w	r4, r4, #3
 80091b0:	42a0      	cmp	r0, r4
 80091b2:	d007      	beq.n	80091c4 <sbrk_aligned+0x38>
 80091b4:	1a21      	subs	r1, r4, r0
 80091b6:	4628      	mov	r0, r5
 80091b8:	f000 fe30 	bl	8009e1c <_sbrk_r>
 80091bc:	3001      	adds	r0, #1
 80091be:	d101      	bne.n	80091c4 <sbrk_aligned+0x38>
 80091c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80091c4:	4620      	mov	r0, r4
 80091c6:	bd70      	pop	{r4, r5, r6, pc}
 80091c8:	2000054c 	.word	0x2000054c

080091cc <_malloc_r>:
 80091cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091d0:	1ccd      	adds	r5, r1, #3
 80091d2:	f025 0503 	bic.w	r5, r5, #3
 80091d6:	3508      	adds	r5, #8
 80091d8:	2d0c      	cmp	r5, #12
 80091da:	bf38      	it	cc
 80091dc:	250c      	movcc	r5, #12
 80091de:	2d00      	cmp	r5, #0
 80091e0:	4607      	mov	r7, r0
 80091e2:	db01      	blt.n	80091e8 <_malloc_r+0x1c>
 80091e4:	42a9      	cmp	r1, r5
 80091e6:	d905      	bls.n	80091f4 <_malloc_r+0x28>
 80091e8:	230c      	movs	r3, #12
 80091ea:	603b      	str	r3, [r7, #0]
 80091ec:	2600      	movs	r6, #0
 80091ee:	4630      	mov	r0, r6
 80091f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80092c8 <_malloc_r+0xfc>
 80091f8:	f000 f868 	bl	80092cc <__malloc_lock>
 80091fc:	f8d8 3000 	ldr.w	r3, [r8]
 8009200:	461c      	mov	r4, r3
 8009202:	bb5c      	cbnz	r4, 800925c <_malloc_r+0x90>
 8009204:	4629      	mov	r1, r5
 8009206:	4638      	mov	r0, r7
 8009208:	f7ff ffc0 	bl	800918c <sbrk_aligned>
 800920c:	1c43      	adds	r3, r0, #1
 800920e:	4604      	mov	r4, r0
 8009210:	d155      	bne.n	80092be <_malloc_r+0xf2>
 8009212:	f8d8 4000 	ldr.w	r4, [r8]
 8009216:	4626      	mov	r6, r4
 8009218:	2e00      	cmp	r6, #0
 800921a:	d145      	bne.n	80092a8 <_malloc_r+0xdc>
 800921c:	2c00      	cmp	r4, #0
 800921e:	d048      	beq.n	80092b2 <_malloc_r+0xe6>
 8009220:	6823      	ldr	r3, [r4, #0]
 8009222:	4631      	mov	r1, r6
 8009224:	4638      	mov	r0, r7
 8009226:	eb04 0903 	add.w	r9, r4, r3
 800922a:	f000 fdf7 	bl	8009e1c <_sbrk_r>
 800922e:	4581      	cmp	r9, r0
 8009230:	d13f      	bne.n	80092b2 <_malloc_r+0xe6>
 8009232:	6821      	ldr	r1, [r4, #0]
 8009234:	1a6d      	subs	r5, r5, r1
 8009236:	4629      	mov	r1, r5
 8009238:	4638      	mov	r0, r7
 800923a:	f7ff ffa7 	bl	800918c <sbrk_aligned>
 800923e:	3001      	adds	r0, #1
 8009240:	d037      	beq.n	80092b2 <_malloc_r+0xe6>
 8009242:	6823      	ldr	r3, [r4, #0]
 8009244:	442b      	add	r3, r5
 8009246:	6023      	str	r3, [r4, #0]
 8009248:	f8d8 3000 	ldr.w	r3, [r8]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d038      	beq.n	80092c2 <_malloc_r+0xf6>
 8009250:	685a      	ldr	r2, [r3, #4]
 8009252:	42a2      	cmp	r2, r4
 8009254:	d12b      	bne.n	80092ae <_malloc_r+0xe2>
 8009256:	2200      	movs	r2, #0
 8009258:	605a      	str	r2, [r3, #4]
 800925a:	e00f      	b.n	800927c <_malloc_r+0xb0>
 800925c:	6822      	ldr	r2, [r4, #0]
 800925e:	1b52      	subs	r2, r2, r5
 8009260:	d41f      	bmi.n	80092a2 <_malloc_r+0xd6>
 8009262:	2a0b      	cmp	r2, #11
 8009264:	d917      	bls.n	8009296 <_malloc_r+0xca>
 8009266:	1961      	adds	r1, r4, r5
 8009268:	42a3      	cmp	r3, r4
 800926a:	6025      	str	r5, [r4, #0]
 800926c:	bf18      	it	ne
 800926e:	6059      	strne	r1, [r3, #4]
 8009270:	6863      	ldr	r3, [r4, #4]
 8009272:	bf08      	it	eq
 8009274:	f8c8 1000 	streq.w	r1, [r8]
 8009278:	5162      	str	r2, [r4, r5]
 800927a:	604b      	str	r3, [r1, #4]
 800927c:	4638      	mov	r0, r7
 800927e:	f104 060b 	add.w	r6, r4, #11
 8009282:	f000 f829 	bl	80092d8 <__malloc_unlock>
 8009286:	f026 0607 	bic.w	r6, r6, #7
 800928a:	1d23      	adds	r3, r4, #4
 800928c:	1af2      	subs	r2, r6, r3
 800928e:	d0ae      	beq.n	80091ee <_malloc_r+0x22>
 8009290:	1b9b      	subs	r3, r3, r6
 8009292:	50a3      	str	r3, [r4, r2]
 8009294:	e7ab      	b.n	80091ee <_malloc_r+0x22>
 8009296:	42a3      	cmp	r3, r4
 8009298:	6862      	ldr	r2, [r4, #4]
 800929a:	d1dd      	bne.n	8009258 <_malloc_r+0x8c>
 800929c:	f8c8 2000 	str.w	r2, [r8]
 80092a0:	e7ec      	b.n	800927c <_malloc_r+0xb0>
 80092a2:	4623      	mov	r3, r4
 80092a4:	6864      	ldr	r4, [r4, #4]
 80092a6:	e7ac      	b.n	8009202 <_malloc_r+0x36>
 80092a8:	4634      	mov	r4, r6
 80092aa:	6876      	ldr	r6, [r6, #4]
 80092ac:	e7b4      	b.n	8009218 <_malloc_r+0x4c>
 80092ae:	4613      	mov	r3, r2
 80092b0:	e7cc      	b.n	800924c <_malloc_r+0x80>
 80092b2:	230c      	movs	r3, #12
 80092b4:	603b      	str	r3, [r7, #0]
 80092b6:	4638      	mov	r0, r7
 80092b8:	f000 f80e 	bl	80092d8 <__malloc_unlock>
 80092bc:	e797      	b.n	80091ee <_malloc_r+0x22>
 80092be:	6025      	str	r5, [r4, #0]
 80092c0:	e7dc      	b.n	800927c <_malloc_r+0xb0>
 80092c2:	605b      	str	r3, [r3, #4]
 80092c4:	deff      	udf	#255	; 0xff
 80092c6:	bf00      	nop
 80092c8:	20000548 	.word	0x20000548

080092cc <__malloc_lock>:
 80092cc:	4801      	ldr	r0, [pc, #4]	; (80092d4 <__malloc_lock+0x8>)
 80092ce:	f7ff b87d 	b.w	80083cc <__retarget_lock_acquire_recursive>
 80092d2:	bf00      	nop
 80092d4:	20000544 	.word	0x20000544

080092d8 <__malloc_unlock>:
 80092d8:	4801      	ldr	r0, [pc, #4]	; (80092e0 <__malloc_unlock+0x8>)
 80092da:	f7ff b878 	b.w	80083ce <__retarget_lock_release_recursive>
 80092de:	bf00      	nop
 80092e0:	20000544 	.word	0x20000544

080092e4 <_Balloc>:
 80092e4:	b570      	push	{r4, r5, r6, lr}
 80092e6:	69c6      	ldr	r6, [r0, #28]
 80092e8:	4604      	mov	r4, r0
 80092ea:	460d      	mov	r5, r1
 80092ec:	b976      	cbnz	r6, 800930c <_Balloc+0x28>
 80092ee:	2010      	movs	r0, #16
 80092f0:	f7ff ff44 	bl	800917c <malloc>
 80092f4:	4602      	mov	r2, r0
 80092f6:	61e0      	str	r0, [r4, #28]
 80092f8:	b920      	cbnz	r0, 8009304 <_Balloc+0x20>
 80092fa:	4b18      	ldr	r3, [pc, #96]	; (800935c <_Balloc+0x78>)
 80092fc:	4818      	ldr	r0, [pc, #96]	; (8009360 <_Balloc+0x7c>)
 80092fe:	216b      	movs	r1, #107	; 0x6b
 8009300:	f000 fd9c 	bl	8009e3c <__assert_func>
 8009304:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009308:	6006      	str	r6, [r0, #0]
 800930a:	60c6      	str	r6, [r0, #12]
 800930c:	69e6      	ldr	r6, [r4, #28]
 800930e:	68f3      	ldr	r3, [r6, #12]
 8009310:	b183      	cbz	r3, 8009334 <_Balloc+0x50>
 8009312:	69e3      	ldr	r3, [r4, #28]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800931a:	b9b8      	cbnz	r0, 800934c <_Balloc+0x68>
 800931c:	2101      	movs	r1, #1
 800931e:	fa01 f605 	lsl.w	r6, r1, r5
 8009322:	1d72      	adds	r2, r6, #5
 8009324:	0092      	lsls	r2, r2, #2
 8009326:	4620      	mov	r0, r4
 8009328:	f000 fda6 	bl	8009e78 <_calloc_r>
 800932c:	b160      	cbz	r0, 8009348 <_Balloc+0x64>
 800932e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009332:	e00e      	b.n	8009352 <_Balloc+0x6e>
 8009334:	2221      	movs	r2, #33	; 0x21
 8009336:	2104      	movs	r1, #4
 8009338:	4620      	mov	r0, r4
 800933a:	f000 fd9d 	bl	8009e78 <_calloc_r>
 800933e:	69e3      	ldr	r3, [r4, #28]
 8009340:	60f0      	str	r0, [r6, #12]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1e4      	bne.n	8009312 <_Balloc+0x2e>
 8009348:	2000      	movs	r0, #0
 800934a:	bd70      	pop	{r4, r5, r6, pc}
 800934c:	6802      	ldr	r2, [r0, #0]
 800934e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009352:	2300      	movs	r3, #0
 8009354:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009358:	e7f7      	b.n	800934a <_Balloc+0x66>
 800935a:	bf00      	nop
 800935c:	0800b011 	.word	0x0800b011
 8009360:	0800b091 	.word	0x0800b091

08009364 <_Bfree>:
 8009364:	b570      	push	{r4, r5, r6, lr}
 8009366:	69c6      	ldr	r6, [r0, #28]
 8009368:	4605      	mov	r5, r0
 800936a:	460c      	mov	r4, r1
 800936c:	b976      	cbnz	r6, 800938c <_Bfree+0x28>
 800936e:	2010      	movs	r0, #16
 8009370:	f7ff ff04 	bl	800917c <malloc>
 8009374:	4602      	mov	r2, r0
 8009376:	61e8      	str	r0, [r5, #28]
 8009378:	b920      	cbnz	r0, 8009384 <_Bfree+0x20>
 800937a:	4b09      	ldr	r3, [pc, #36]	; (80093a0 <_Bfree+0x3c>)
 800937c:	4809      	ldr	r0, [pc, #36]	; (80093a4 <_Bfree+0x40>)
 800937e:	218f      	movs	r1, #143	; 0x8f
 8009380:	f000 fd5c 	bl	8009e3c <__assert_func>
 8009384:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009388:	6006      	str	r6, [r0, #0]
 800938a:	60c6      	str	r6, [r0, #12]
 800938c:	b13c      	cbz	r4, 800939e <_Bfree+0x3a>
 800938e:	69eb      	ldr	r3, [r5, #28]
 8009390:	6862      	ldr	r2, [r4, #4]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009398:	6021      	str	r1, [r4, #0]
 800939a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800939e:	bd70      	pop	{r4, r5, r6, pc}
 80093a0:	0800b011 	.word	0x0800b011
 80093a4:	0800b091 	.word	0x0800b091

080093a8 <__multadd>:
 80093a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ac:	690d      	ldr	r5, [r1, #16]
 80093ae:	4607      	mov	r7, r0
 80093b0:	460c      	mov	r4, r1
 80093b2:	461e      	mov	r6, r3
 80093b4:	f101 0c14 	add.w	ip, r1, #20
 80093b8:	2000      	movs	r0, #0
 80093ba:	f8dc 3000 	ldr.w	r3, [ip]
 80093be:	b299      	uxth	r1, r3
 80093c0:	fb02 6101 	mla	r1, r2, r1, r6
 80093c4:	0c1e      	lsrs	r6, r3, #16
 80093c6:	0c0b      	lsrs	r3, r1, #16
 80093c8:	fb02 3306 	mla	r3, r2, r6, r3
 80093cc:	b289      	uxth	r1, r1
 80093ce:	3001      	adds	r0, #1
 80093d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80093d4:	4285      	cmp	r5, r0
 80093d6:	f84c 1b04 	str.w	r1, [ip], #4
 80093da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80093de:	dcec      	bgt.n	80093ba <__multadd+0x12>
 80093e0:	b30e      	cbz	r6, 8009426 <__multadd+0x7e>
 80093e2:	68a3      	ldr	r3, [r4, #8]
 80093e4:	42ab      	cmp	r3, r5
 80093e6:	dc19      	bgt.n	800941c <__multadd+0x74>
 80093e8:	6861      	ldr	r1, [r4, #4]
 80093ea:	4638      	mov	r0, r7
 80093ec:	3101      	adds	r1, #1
 80093ee:	f7ff ff79 	bl	80092e4 <_Balloc>
 80093f2:	4680      	mov	r8, r0
 80093f4:	b928      	cbnz	r0, 8009402 <__multadd+0x5a>
 80093f6:	4602      	mov	r2, r0
 80093f8:	4b0c      	ldr	r3, [pc, #48]	; (800942c <__multadd+0x84>)
 80093fa:	480d      	ldr	r0, [pc, #52]	; (8009430 <__multadd+0x88>)
 80093fc:	21ba      	movs	r1, #186	; 0xba
 80093fe:	f000 fd1d 	bl	8009e3c <__assert_func>
 8009402:	6922      	ldr	r2, [r4, #16]
 8009404:	3202      	adds	r2, #2
 8009406:	f104 010c 	add.w	r1, r4, #12
 800940a:	0092      	lsls	r2, r2, #2
 800940c:	300c      	adds	r0, #12
 800940e:	f7fe ffdf 	bl	80083d0 <memcpy>
 8009412:	4621      	mov	r1, r4
 8009414:	4638      	mov	r0, r7
 8009416:	f7ff ffa5 	bl	8009364 <_Bfree>
 800941a:	4644      	mov	r4, r8
 800941c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009420:	3501      	adds	r5, #1
 8009422:	615e      	str	r6, [r3, #20]
 8009424:	6125      	str	r5, [r4, #16]
 8009426:	4620      	mov	r0, r4
 8009428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800942c:	0800b080 	.word	0x0800b080
 8009430:	0800b091 	.word	0x0800b091

08009434 <__hi0bits>:
 8009434:	0c03      	lsrs	r3, r0, #16
 8009436:	041b      	lsls	r3, r3, #16
 8009438:	b9d3      	cbnz	r3, 8009470 <__hi0bits+0x3c>
 800943a:	0400      	lsls	r0, r0, #16
 800943c:	2310      	movs	r3, #16
 800943e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009442:	bf04      	itt	eq
 8009444:	0200      	lsleq	r0, r0, #8
 8009446:	3308      	addeq	r3, #8
 8009448:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800944c:	bf04      	itt	eq
 800944e:	0100      	lsleq	r0, r0, #4
 8009450:	3304      	addeq	r3, #4
 8009452:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009456:	bf04      	itt	eq
 8009458:	0080      	lsleq	r0, r0, #2
 800945a:	3302      	addeq	r3, #2
 800945c:	2800      	cmp	r0, #0
 800945e:	db05      	blt.n	800946c <__hi0bits+0x38>
 8009460:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009464:	f103 0301 	add.w	r3, r3, #1
 8009468:	bf08      	it	eq
 800946a:	2320      	moveq	r3, #32
 800946c:	4618      	mov	r0, r3
 800946e:	4770      	bx	lr
 8009470:	2300      	movs	r3, #0
 8009472:	e7e4      	b.n	800943e <__hi0bits+0xa>

08009474 <__lo0bits>:
 8009474:	6803      	ldr	r3, [r0, #0]
 8009476:	f013 0207 	ands.w	r2, r3, #7
 800947a:	d00c      	beq.n	8009496 <__lo0bits+0x22>
 800947c:	07d9      	lsls	r1, r3, #31
 800947e:	d422      	bmi.n	80094c6 <__lo0bits+0x52>
 8009480:	079a      	lsls	r2, r3, #30
 8009482:	bf49      	itett	mi
 8009484:	085b      	lsrmi	r3, r3, #1
 8009486:	089b      	lsrpl	r3, r3, #2
 8009488:	6003      	strmi	r3, [r0, #0]
 800948a:	2201      	movmi	r2, #1
 800948c:	bf5c      	itt	pl
 800948e:	6003      	strpl	r3, [r0, #0]
 8009490:	2202      	movpl	r2, #2
 8009492:	4610      	mov	r0, r2
 8009494:	4770      	bx	lr
 8009496:	b299      	uxth	r1, r3
 8009498:	b909      	cbnz	r1, 800949e <__lo0bits+0x2a>
 800949a:	0c1b      	lsrs	r3, r3, #16
 800949c:	2210      	movs	r2, #16
 800949e:	b2d9      	uxtb	r1, r3
 80094a0:	b909      	cbnz	r1, 80094a6 <__lo0bits+0x32>
 80094a2:	3208      	adds	r2, #8
 80094a4:	0a1b      	lsrs	r3, r3, #8
 80094a6:	0719      	lsls	r1, r3, #28
 80094a8:	bf04      	itt	eq
 80094aa:	091b      	lsreq	r3, r3, #4
 80094ac:	3204      	addeq	r2, #4
 80094ae:	0799      	lsls	r1, r3, #30
 80094b0:	bf04      	itt	eq
 80094b2:	089b      	lsreq	r3, r3, #2
 80094b4:	3202      	addeq	r2, #2
 80094b6:	07d9      	lsls	r1, r3, #31
 80094b8:	d403      	bmi.n	80094c2 <__lo0bits+0x4e>
 80094ba:	085b      	lsrs	r3, r3, #1
 80094bc:	f102 0201 	add.w	r2, r2, #1
 80094c0:	d003      	beq.n	80094ca <__lo0bits+0x56>
 80094c2:	6003      	str	r3, [r0, #0]
 80094c4:	e7e5      	b.n	8009492 <__lo0bits+0x1e>
 80094c6:	2200      	movs	r2, #0
 80094c8:	e7e3      	b.n	8009492 <__lo0bits+0x1e>
 80094ca:	2220      	movs	r2, #32
 80094cc:	e7e1      	b.n	8009492 <__lo0bits+0x1e>
	...

080094d0 <__i2b>:
 80094d0:	b510      	push	{r4, lr}
 80094d2:	460c      	mov	r4, r1
 80094d4:	2101      	movs	r1, #1
 80094d6:	f7ff ff05 	bl	80092e4 <_Balloc>
 80094da:	4602      	mov	r2, r0
 80094dc:	b928      	cbnz	r0, 80094ea <__i2b+0x1a>
 80094de:	4b05      	ldr	r3, [pc, #20]	; (80094f4 <__i2b+0x24>)
 80094e0:	4805      	ldr	r0, [pc, #20]	; (80094f8 <__i2b+0x28>)
 80094e2:	f240 1145 	movw	r1, #325	; 0x145
 80094e6:	f000 fca9 	bl	8009e3c <__assert_func>
 80094ea:	2301      	movs	r3, #1
 80094ec:	6144      	str	r4, [r0, #20]
 80094ee:	6103      	str	r3, [r0, #16]
 80094f0:	bd10      	pop	{r4, pc}
 80094f2:	bf00      	nop
 80094f4:	0800b080 	.word	0x0800b080
 80094f8:	0800b091 	.word	0x0800b091

080094fc <__multiply>:
 80094fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009500:	4691      	mov	r9, r2
 8009502:	690a      	ldr	r2, [r1, #16]
 8009504:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009508:	429a      	cmp	r2, r3
 800950a:	bfb8      	it	lt
 800950c:	460b      	movlt	r3, r1
 800950e:	460c      	mov	r4, r1
 8009510:	bfbc      	itt	lt
 8009512:	464c      	movlt	r4, r9
 8009514:	4699      	movlt	r9, r3
 8009516:	6927      	ldr	r7, [r4, #16]
 8009518:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800951c:	68a3      	ldr	r3, [r4, #8]
 800951e:	6861      	ldr	r1, [r4, #4]
 8009520:	eb07 060a 	add.w	r6, r7, sl
 8009524:	42b3      	cmp	r3, r6
 8009526:	b085      	sub	sp, #20
 8009528:	bfb8      	it	lt
 800952a:	3101      	addlt	r1, #1
 800952c:	f7ff feda 	bl	80092e4 <_Balloc>
 8009530:	b930      	cbnz	r0, 8009540 <__multiply+0x44>
 8009532:	4602      	mov	r2, r0
 8009534:	4b44      	ldr	r3, [pc, #272]	; (8009648 <__multiply+0x14c>)
 8009536:	4845      	ldr	r0, [pc, #276]	; (800964c <__multiply+0x150>)
 8009538:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800953c:	f000 fc7e 	bl	8009e3c <__assert_func>
 8009540:	f100 0514 	add.w	r5, r0, #20
 8009544:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009548:	462b      	mov	r3, r5
 800954a:	2200      	movs	r2, #0
 800954c:	4543      	cmp	r3, r8
 800954e:	d321      	bcc.n	8009594 <__multiply+0x98>
 8009550:	f104 0314 	add.w	r3, r4, #20
 8009554:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009558:	f109 0314 	add.w	r3, r9, #20
 800955c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009560:	9202      	str	r2, [sp, #8]
 8009562:	1b3a      	subs	r2, r7, r4
 8009564:	3a15      	subs	r2, #21
 8009566:	f022 0203 	bic.w	r2, r2, #3
 800956a:	3204      	adds	r2, #4
 800956c:	f104 0115 	add.w	r1, r4, #21
 8009570:	428f      	cmp	r7, r1
 8009572:	bf38      	it	cc
 8009574:	2204      	movcc	r2, #4
 8009576:	9201      	str	r2, [sp, #4]
 8009578:	9a02      	ldr	r2, [sp, #8]
 800957a:	9303      	str	r3, [sp, #12]
 800957c:	429a      	cmp	r2, r3
 800957e:	d80c      	bhi.n	800959a <__multiply+0x9e>
 8009580:	2e00      	cmp	r6, #0
 8009582:	dd03      	ble.n	800958c <__multiply+0x90>
 8009584:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009588:	2b00      	cmp	r3, #0
 800958a:	d05b      	beq.n	8009644 <__multiply+0x148>
 800958c:	6106      	str	r6, [r0, #16]
 800958e:	b005      	add	sp, #20
 8009590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009594:	f843 2b04 	str.w	r2, [r3], #4
 8009598:	e7d8      	b.n	800954c <__multiply+0x50>
 800959a:	f8b3 a000 	ldrh.w	sl, [r3]
 800959e:	f1ba 0f00 	cmp.w	sl, #0
 80095a2:	d024      	beq.n	80095ee <__multiply+0xf2>
 80095a4:	f104 0e14 	add.w	lr, r4, #20
 80095a8:	46a9      	mov	r9, r5
 80095aa:	f04f 0c00 	mov.w	ip, #0
 80095ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80095b2:	f8d9 1000 	ldr.w	r1, [r9]
 80095b6:	fa1f fb82 	uxth.w	fp, r2
 80095ba:	b289      	uxth	r1, r1
 80095bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80095c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80095c4:	f8d9 2000 	ldr.w	r2, [r9]
 80095c8:	4461      	add	r1, ip
 80095ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80095ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80095d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80095d6:	b289      	uxth	r1, r1
 80095d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80095dc:	4577      	cmp	r7, lr
 80095de:	f849 1b04 	str.w	r1, [r9], #4
 80095e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80095e6:	d8e2      	bhi.n	80095ae <__multiply+0xb2>
 80095e8:	9a01      	ldr	r2, [sp, #4]
 80095ea:	f845 c002 	str.w	ip, [r5, r2]
 80095ee:	9a03      	ldr	r2, [sp, #12]
 80095f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80095f4:	3304      	adds	r3, #4
 80095f6:	f1b9 0f00 	cmp.w	r9, #0
 80095fa:	d021      	beq.n	8009640 <__multiply+0x144>
 80095fc:	6829      	ldr	r1, [r5, #0]
 80095fe:	f104 0c14 	add.w	ip, r4, #20
 8009602:	46ae      	mov	lr, r5
 8009604:	f04f 0a00 	mov.w	sl, #0
 8009608:	f8bc b000 	ldrh.w	fp, [ip]
 800960c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009610:	fb09 220b 	mla	r2, r9, fp, r2
 8009614:	4452      	add	r2, sl
 8009616:	b289      	uxth	r1, r1
 8009618:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800961c:	f84e 1b04 	str.w	r1, [lr], #4
 8009620:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009624:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009628:	f8be 1000 	ldrh.w	r1, [lr]
 800962c:	fb09 110a 	mla	r1, r9, sl, r1
 8009630:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009634:	4567      	cmp	r7, ip
 8009636:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800963a:	d8e5      	bhi.n	8009608 <__multiply+0x10c>
 800963c:	9a01      	ldr	r2, [sp, #4]
 800963e:	50a9      	str	r1, [r5, r2]
 8009640:	3504      	adds	r5, #4
 8009642:	e799      	b.n	8009578 <__multiply+0x7c>
 8009644:	3e01      	subs	r6, #1
 8009646:	e79b      	b.n	8009580 <__multiply+0x84>
 8009648:	0800b080 	.word	0x0800b080
 800964c:	0800b091 	.word	0x0800b091

08009650 <__pow5mult>:
 8009650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009654:	4615      	mov	r5, r2
 8009656:	f012 0203 	ands.w	r2, r2, #3
 800965a:	4606      	mov	r6, r0
 800965c:	460f      	mov	r7, r1
 800965e:	d007      	beq.n	8009670 <__pow5mult+0x20>
 8009660:	4c25      	ldr	r4, [pc, #148]	; (80096f8 <__pow5mult+0xa8>)
 8009662:	3a01      	subs	r2, #1
 8009664:	2300      	movs	r3, #0
 8009666:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800966a:	f7ff fe9d 	bl	80093a8 <__multadd>
 800966e:	4607      	mov	r7, r0
 8009670:	10ad      	asrs	r5, r5, #2
 8009672:	d03d      	beq.n	80096f0 <__pow5mult+0xa0>
 8009674:	69f4      	ldr	r4, [r6, #28]
 8009676:	b97c      	cbnz	r4, 8009698 <__pow5mult+0x48>
 8009678:	2010      	movs	r0, #16
 800967a:	f7ff fd7f 	bl	800917c <malloc>
 800967e:	4602      	mov	r2, r0
 8009680:	61f0      	str	r0, [r6, #28]
 8009682:	b928      	cbnz	r0, 8009690 <__pow5mult+0x40>
 8009684:	4b1d      	ldr	r3, [pc, #116]	; (80096fc <__pow5mult+0xac>)
 8009686:	481e      	ldr	r0, [pc, #120]	; (8009700 <__pow5mult+0xb0>)
 8009688:	f240 11b3 	movw	r1, #435	; 0x1b3
 800968c:	f000 fbd6 	bl	8009e3c <__assert_func>
 8009690:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009694:	6004      	str	r4, [r0, #0]
 8009696:	60c4      	str	r4, [r0, #12]
 8009698:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800969c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80096a0:	b94c      	cbnz	r4, 80096b6 <__pow5mult+0x66>
 80096a2:	f240 2171 	movw	r1, #625	; 0x271
 80096a6:	4630      	mov	r0, r6
 80096a8:	f7ff ff12 	bl	80094d0 <__i2b>
 80096ac:	2300      	movs	r3, #0
 80096ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80096b2:	4604      	mov	r4, r0
 80096b4:	6003      	str	r3, [r0, #0]
 80096b6:	f04f 0900 	mov.w	r9, #0
 80096ba:	07eb      	lsls	r3, r5, #31
 80096bc:	d50a      	bpl.n	80096d4 <__pow5mult+0x84>
 80096be:	4639      	mov	r1, r7
 80096c0:	4622      	mov	r2, r4
 80096c2:	4630      	mov	r0, r6
 80096c4:	f7ff ff1a 	bl	80094fc <__multiply>
 80096c8:	4639      	mov	r1, r7
 80096ca:	4680      	mov	r8, r0
 80096cc:	4630      	mov	r0, r6
 80096ce:	f7ff fe49 	bl	8009364 <_Bfree>
 80096d2:	4647      	mov	r7, r8
 80096d4:	106d      	asrs	r5, r5, #1
 80096d6:	d00b      	beq.n	80096f0 <__pow5mult+0xa0>
 80096d8:	6820      	ldr	r0, [r4, #0]
 80096da:	b938      	cbnz	r0, 80096ec <__pow5mult+0x9c>
 80096dc:	4622      	mov	r2, r4
 80096de:	4621      	mov	r1, r4
 80096e0:	4630      	mov	r0, r6
 80096e2:	f7ff ff0b 	bl	80094fc <__multiply>
 80096e6:	6020      	str	r0, [r4, #0]
 80096e8:	f8c0 9000 	str.w	r9, [r0]
 80096ec:	4604      	mov	r4, r0
 80096ee:	e7e4      	b.n	80096ba <__pow5mult+0x6a>
 80096f0:	4638      	mov	r0, r7
 80096f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096f6:	bf00      	nop
 80096f8:	0800b1e0 	.word	0x0800b1e0
 80096fc:	0800b011 	.word	0x0800b011
 8009700:	0800b091 	.word	0x0800b091

08009704 <__lshift>:
 8009704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009708:	460c      	mov	r4, r1
 800970a:	6849      	ldr	r1, [r1, #4]
 800970c:	6923      	ldr	r3, [r4, #16]
 800970e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009712:	68a3      	ldr	r3, [r4, #8]
 8009714:	4607      	mov	r7, r0
 8009716:	4691      	mov	r9, r2
 8009718:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800971c:	f108 0601 	add.w	r6, r8, #1
 8009720:	42b3      	cmp	r3, r6
 8009722:	db0b      	blt.n	800973c <__lshift+0x38>
 8009724:	4638      	mov	r0, r7
 8009726:	f7ff fddd 	bl	80092e4 <_Balloc>
 800972a:	4605      	mov	r5, r0
 800972c:	b948      	cbnz	r0, 8009742 <__lshift+0x3e>
 800972e:	4602      	mov	r2, r0
 8009730:	4b28      	ldr	r3, [pc, #160]	; (80097d4 <__lshift+0xd0>)
 8009732:	4829      	ldr	r0, [pc, #164]	; (80097d8 <__lshift+0xd4>)
 8009734:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009738:	f000 fb80 	bl	8009e3c <__assert_func>
 800973c:	3101      	adds	r1, #1
 800973e:	005b      	lsls	r3, r3, #1
 8009740:	e7ee      	b.n	8009720 <__lshift+0x1c>
 8009742:	2300      	movs	r3, #0
 8009744:	f100 0114 	add.w	r1, r0, #20
 8009748:	f100 0210 	add.w	r2, r0, #16
 800974c:	4618      	mov	r0, r3
 800974e:	4553      	cmp	r3, sl
 8009750:	db33      	blt.n	80097ba <__lshift+0xb6>
 8009752:	6920      	ldr	r0, [r4, #16]
 8009754:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009758:	f104 0314 	add.w	r3, r4, #20
 800975c:	f019 091f 	ands.w	r9, r9, #31
 8009760:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009764:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009768:	d02b      	beq.n	80097c2 <__lshift+0xbe>
 800976a:	f1c9 0e20 	rsb	lr, r9, #32
 800976e:	468a      	mov	sl, r1
 8009770:	2200      	movs	r2, #0
 8009772:	6818      	ldr	r0, [r3, #0]
 8009774:	fa00 f009 	lsl.w	r0, r0, r9
 8009778:	4310      	orrs	r0, r2
 800977a:	f84a 0b04 	str.w	r0, [sl], #4
 800977e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009782:	459c      	cmp	ip, r3
 8009784:	fa22 f20e 	lsr.w	r2, r2, lr
 8009788:	d8f3      	bhi.n	8009772 <__lshift+0x6e>
 800978a:	ebac 0304 	sub.w	r3, ip, r4
 800978e:	3b15      	subs	r3, #21
 8009790:	f023 0303 	bic.w	r3, r3, #3
 8009794:	3304      	adds	r3, #4
 8009796:	f104 0015 	add.w	r0, r4, #21
 800979a:	4584      	cmp	ip, r0
 800979c:	bf38      	it	cc
 800979e:	2304      	movcc	r3, #4
 80097a0:	50ca      	str	r2, [r1, r3]
 80097a2:	b10a      	cbz	r2, 80097a8 <__lshift+0xa4>
 80097a4:	f108 0602 	add.w	r6, r8, #2
 80097a8:	3e01      	subs	r6, #1
 80097aa:	4638      	mov	r0, r7
 80097ac:	612e      	str	r6, [r5, #16]
 80097ae:	4621      	mov	r1, r4
 80097b0:	f7ff fdd8 	bl	8009364 <_Bfree>
 80097b4:	4628      	mov	r0, r5
 80097b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80097be:	3301      	adds	r3, #1
 80097c0:	e7c5      	b.n	800974e <__lshift+0x4a>
 80097c2:	3904      	subs	r1, #4
 80097c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80097c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80097cc:	459c      	cmp	ip, r3
 80097ce:	d8f9      	bhi.n	80097c4 <__lshift+0xc0>
 80097d0:	e7ea      	b.n	80097a8 <__lshift+0xa4>
 80097d2:	bf00      	nop
 80097d4:	0800b080 	.word	0x0800b080
 80097d8:	0800b091 	.word	0x0800b091

080097dc <__mcmp>:
 80097dc:	b530      	push	{r4, r5, lr}
 80097de:	6902      	ldr	r2, [r0, #16]
 80097e0:	690c      	ldr	r4, [r1, #16]
 80097e2:	1b12      	subs	r2, r2, r4
 80097e4:	d10e      	bne.n	8009804 <__mcmp+0x28>
 80097e6:	f100 0314 	add.w	r3, r0, #20
 80097ea:	3114      	adds	r1, #20
 80097ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80097f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80097f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80097f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80097fc:	42a5      	cmp	r5, r4
 80097fe:	d003      	beq.n	8009808 <__mcmp+0x2c>
 8009800:	d305      	bcc.n	800980e <__mcmp+0x32>
 8009802:	2201      	movs	r2, #1
 8009804:	4610      	mov	r0, r2
 8009806:	bd30      	pop	{r4, r5, pc}
 8009808:	4283      	cmp	r3, r0
 800980a:	d3f3      	bcc.n	80097f4 <__mcmp+0x18>
 800980c:	e7fa      	b.n	8009804 <__mcmp+0x28>
 800980e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009812:	e7f7      	b.n	8009804 <__mcmp+0x28>

08009814 <__mdiff>:
 8009814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009818:	460c      	mov	r4, r1
 800981a:	4606      	mov	r6, r0
 800981c:	4611      	mov	r1, r2
 800981e:	4620      	mov	r0, r4
 8009820:	4690      	mov	r8, r2
 8009822:	f7ff ffdb 	bl	80097dc <__mcmp>
 8009826:	1e05      	subs	r5, r0, #0
 8009828:	d110      	bne.n	800984c <__mdiff+0x38>
 800982a:	4629      	mov	r1, r5
 800982c:	4630      	mov	r0, r6
 800982e:	f7ff fd59 	bl	80092e4 <_Balloc>
 8009832:	b930      	cbnz	r0, 8009842 <__mdiff+0x2e>
 8009834:	4b3a      	ldr	r3, [pc, #232]	; (8009920 <__mdiff+0x10c>)
 8009836:	4602      	mov	r2, r0
 8009838:	f240 2137 	movw	r1, #567	; 0x237
 800983c:	4839      	ldr	r0, [pc, #228]	; (8009924 <__mdiff+0x110>)
 800983e:	f000 fafd 	bl	8009e3c <__assert_func>
 8009842:	2301      	movs	r3, #1
 8009844:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009848:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800984c:	bfa4      	itt	ge
 800984e:	4643      	movge	r3, r8
 8009850:	46a0      	movge	r8, r4
 8009852:	4630      	mov	r0, r6
 8009854:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009858:	bfa6      	itte	ge
 800985a:	461c      	movge	r4, r3
 800985c:	2500      	movge	r5, #0
 800985e:	2501      	movlt	r5, #1
 8009860:	f7ff fd40 	bl	80092e4 <_Balloc>
 8009864:	b920      	cbnz	r0, 8009870 <__mdiff+0x5c>
 8009866:	4b2e      	ldr	r3, [pc, #184]	; (8009920 <__mdiff+0x10c>)
 8009868:	4602      	mov	r2, r0
 800986a:	f240 2145 	movw	r1, #581	; 0x245
 800986e:	e7e5      	b.n	800983c <__mdiff+0x28>
 8009870:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009874:	6926      	ldr	r6, [r4, #16]
 8009876:	60c5      	str	r5, [r0, #12]
 8009878:	f104 0914 	add.w	r9, r4, #20
 800987c:	f108 0514 	add.w	r5, r8, #20
 8009880:	f100 0e14 	add.w	lr, r0, #20
 8009884:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009888:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800988c:	f108 0210 	add.w	r2, r8, #16
 8009890:	46f2      	mov	sl, lr
 8009892:	2100      	movs	r1, #0
 8009894:	f859 3b04 	ldr.w	r3, [r9], #4
 8009898:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800989c:	fa11 f88b 	uxtah	r8, r1, fp
 80098a0:	b299      	uxth	r1, r3
 80098a2:	0c1b      	lsrs	r3, r3, #16
 80098a4:	eba8 0801 	sub.w	r8, r8, r1
 80098a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80098ac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80098b0:	fa1f f888 	uxth.w	r8, r8
 80098b4:	1419      	asrs	r1, r3, #16
 80098b6:	454e      	cmp	r6, r9
 80098b8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80098bc:	f84a 3b04 	str.w	r3, [sl], #4
 80098c0:	d8e8      	bhi.n	8009894 <__mdiff+0x80>
 80098c2:	1b33      	subs	r3, r6, r4
 80098c4:	3b15      	subs	r3, #21
 80098c6:	f023 0303 	bic.w	r3, r3, #3
 80098ca:	3304      	adds	r3, #4
 80098cc:	3415      	adds	r4, #21
 80098ce:	42a6      	cmp	r6, r4
 80098d0:	bf38      	it	cc
 80098d2:	2304      	movcc	r3, #4
 80098d4:	441d      	add	r5, r3
 80098d6:	4473      	add	r3, lr
 80098d8:	469e      	mov	lr, r3
 80098da:	462e      	mov	r6, r5
 80098dc:	4566      	cmp	r6, ip
 80098de:	d30e      	bcc.n	80098fe <__mdiff+0xea>
 80098e0:	f10c 0203 	add.w	r2, ip, #3
 80098e4:	1b52      	subs	r2, r2, r5
 80098e6:	f022 0203 	bic.w	r2, r2, #3
 80098ea:	3d03      	subs	r5, #3
 80098ec:	45ac      	cmp	ip, r5
 80098ee:	bf38      	it	cc
 80098f0:	2200      	movcc	r2, #0
 80098f2:	4413      	add	r3, r2
 80098f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80098f8:	b17a      	cbz	r2, 800991a <__mdiff+0x106>
 80098fa:	6107      	str	r7, [r0, #16]
 80098fc:	e7a4      	b.n	8009848 <__mdiff+0x34>
 80098fe:	f856 8b04 	ldr.w	r8, [r6], #4
 8009902:	fa11 f288 	uxtah	r2, r1, r8
 8009906:	1414      	asrs	r4, r2, #16
 8009908:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800990c:	b292      	uxth	r2, r2
 800990e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009912:	f84e 2b04 	str.w	r2, [lr], #4
 8009916:	1421      	asrs	r1, r4, #16
 8009918:	e7e0      	b.n	80098dc <__mdiff+0xc8>
 800991a:	3f01      	subs	r7, #1
 800991c:	e7ea      	b.n	80098f4 <__mdiff+0xe0>
 800991e:	bf00      	nop
 8009920:	0800b080 	.word	0x0800b080
 8009924:	0800b091 	.word	0x0800b091

08009928 <__d2b>:
 8009928:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800992c:	460f      	mov	r7, r1
 800992e:	2101      	movs	r1, #1
 8009930:	ec59 8b10 	vmov	r8, r9, d0
 8009934:	4616      	mov	r6, r2
 8009936:	f7ff fcd5 	bl	80092e4 <_Balloc>
 800993a:	4604      	mov	r4, r0
 800993c:	b930      	cbnz	r0, 800994c <__d2b+0x24>
 800993e:	4602      	mov	r2, r0
 8009940:	4b24      	ldr	r3, [pc, #144]	; (80099d4 <__d2b+0xac>)
 8009942:	4825      	ldr	r0, [pc, #148]	; (80099d8 <__d2b+0xb0>)
 8009944:	f240 310f 	movw	r1, #783	; 0x30f
 8009948:	f000 fa78 	bl	8009e3c <__assert_func>
 800994c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009950:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009954:	bb2d      	cbnz	r5, 80099a2 <__d2b+0x7a>
 8009956:	9301      	str	r3, [sp, #4]
 8009958:	f1b8 0300 	subs.w	r3, r8, #0
 800995c:	d026      	beq.n	80099ac <__d2b+0x84>
 800995e:	4668      	mov	r0, sp
 8009960:	9300      	str	r3, [sp, #0]
 8009962:	f7ff fd87 	bl	8009474 <__lo0bits>
 8009966:	e9dd 1200 	ldrd	r1, r2, [sp]
 800996a:	b1e8      	cbz	r0, 80099a8 <__d2b+0x80>
 800996c:	f1c0 0320 	rsb	r3, r0, #32
 8009970:	fa02 f303 	lsl.w	r3, r2, r3
 8009974:	430b      	orrs	r3, r1
 8009976:	40c2      	lsrs	r2, r0
 8009978:	6163      	str	r3, [r4, #20]
 800997a:	9201      	str	r2, [sp, #4]
 800997c:	9b01      	ldr	r3, [sp, #4]
 800997e:	61a3      	str	r3, [r4, #24]
 8009980:	2b00      	cmp	r3, #0
 8009982:	bf14      	ite	ne
 8009984:	2202      	movne	r2, #2
 8009986:	2201      	moveq	r2, #1
 8009988:	6122      	str	r2, [r4, #16]
 800998a:	b1bd      	cbz	r5, 80099bc <__d2b+0x94>
 800998c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009990:	4405      	add	r5, r0
 8009992:	603d      	str	r5, [r7, #0]
 8009994:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009998:	6030      	str	r0, [r6, #0]
 800999a:	4620      	mov	r0, r4
 800999c:	b003      	add	sp, #12
 800999e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099a6:	e7d6      	b.n	8009956 <__d2b+0x2e>
 80099a8:	6161      	str	r1, [r4, #20]
 80099aa:	e7e7      	b.n	800997c <__d2b+0x54>
 80099ac:	a801      	add	r0, sp, #4
 80099ae:	f7ff fd61 	bl	8009474 <__lo0bits>
 80099b2:	9b01      	ldr	r3, [sp, #4]
 80099b4:	6163      	str	r3, [r4, #20]
 80099b6:	3020      	adds	r0, #32
 80099b8:	2201      	movs	r2, #1
 80099ba:	e7e5      	b.n	8009988 <__d2b+0x60>
 80099bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80099c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80099c4:	6038      	str	r0, [r7, #0]
 80099c6:	6918      	ldr	r0, [r3, #16]
 80099c8:	f7ff fd34 	bl	8009434 <__hi0bits>
 80099cc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80099d0:	e7e2      	b.n	8009998 <__d2b+0x70>
 80099d2:	bf00      	nop
 80099d4:	0800b080 	.word	0x0800b080
 80099d8:	0800b091 	.word	0x0800b091

080099dc <__ssputs_r>:
 80099dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099e0:	688e      	ldr	r6, [r1, #8]
 80099e2:	461f      	mov	r7, r3
 80099e4:	42be      	cmp	r6, r7
 80099e6:	680b      	ldr	r3, [r1, #0]
 80099e8:	4682      	mov	sl, r0
 80099ea:	460c      	mov	r4, r1
 80099ec:	4690      	mov	r8, r2
 80099ee:	d82c      	bhi.n	8009a4a <__ssputs_r+0x6e>
 80099f0:	898a      	ldrh	r2, [r1, #12]
 80099f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099f6:	d026      	beq.n	8009a46 <__ssputs_r+0x6a>
 80099f8:	6965      	ldr	r5, [r4, #20]
 80099fa:	6909      	ldr	r1, [r1, #16]
 80099fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a00:	eba3 0901 	sub.w	r9, r3, r1
 8009a04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a08:	1c7b      	adds	r3, r7, #1
 8009a0a:	444b      	add	r3, r9
 8009a0c:	106d      	asrs	r5, r5, #1
 8009a0e:	429d      	cmp	r5, r3
 8009a10:	bf38      	it	cc
 8009a12:	461d      	movcc	r5, r3
 8009a14:	0553      	lsls	r3, r2, #21
 8009a16:	d527      	bpl.n	8009a68 <__ssputs_r+0x8c>
 8009a18:	4629      	mov	r1, r5
 8009a1a:	f7ff fbd7 	bl	80091cc <_malloc_r>
 8009a1e:	4606      	mov	r6, r0
 8009a20:	b360      	cbz	r0, 8009a7c <__ssputs_r+0xa0>
 8009a22:	6921      	ldr	r1, [r4, #16]
 8009a24:	464a      	mov	r2, r9
 8009a26:	f7fe fcd3 	bl	80083d0 <memcpy>
 8009a2a:	89a3      	ldrh	r3, [r4, #12]
 8009a2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a34:	81a3      	strh	r3, [r4, #12]
 8009a36:	6126      	str	r6, [r4, #16]
 8009a38:	6165      	str	r5, [r4, #20]
 8009a3a:	444e      	add	r6, r9
 8009a3c:	eba5 0509 	sub.w	r5, r5, r9
 8009a40:	6026      	str	r6, [r4, #0]
 8009a42:	60a5      	str	r5, [r4, #8]
 8009a44:	463e      	mov	r6, r7
 8009a46:	42be      	cmp	r6, r7
 8009a48:	d900      	bls.n	8009a4c <__ssputs_r+0x70>
 8009a4a:	463e      	mov	r6, r7
 8009a4c:	6820      	ldr	r0, [r4, #0]
 8009a4e:	4632      	mov	r2, r6
 8009a50:	4641      	mov	r1, r8
 8009a52:	f000 f9c9 	bl	8009de8 <memmove>
 8009a56:	68a3      	ldr	r3, [r4, #8]
 8009a58:	1b9b      	subs	r3, r3, r6
 8009a5a:	60a3      	str	r3, [r4, #8]
 8009a5c:	6823      	ldr	r3, [r4, #0]
 8009a5e:	4433      	add	r3, r6
 8009a60:	6023      	str	r3, [r4, #0]
 8009a62:	2000      	movs	r0, #0
 8009a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a68:	462a      	mov	r2, r5
 8009a6a:	f000 fa2d 	bl	8009ec8 <_realloc_r>
 8009a6e:	4606      	mov	r6, r0
 8009a70:	2800      	cmp	r0, #0
 8009a72:	d1e0      	bne.n	8009a36 <__ssputs_r+0x5a>
 8009a74:	6921      	ldr	r1, [r4, #16]
 8009a76:	4650      	mov	r0, sl
 8009a78:	f7ff fb34 	bl	80090e4 <_free_r>
 8009a7c:	230c      	movs	r3, #12
 8009a7e:	f8ca 3000 	str.w	r3, [sl]
 8009a82:	89a3      	ldrh	r3, [r4, #12]
 8009a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a88:	81a3      	strh	r3, [r4, #12]
 8009a8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a8e:	e7e9      	b.n	8009a64 <__ssputs_r+0x88>

08009a90 <_svfiprintf_r>:
 8009a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a94:	4698      	mov	r8, r3
 8009a96:	898b      	ldrh	r3, [r1, #12]
 8009a98:	061b      	lsls	r3, r3, #24
 8009a9a:	b09d      	sub	sp, #116	; 0x74
 8009a9c:	4607      	mov	r7, r0
 8009a9e:	460d      	mov	r5, r1
 8009aa0:	4614      	mov	r4, r2
 8009aa2:	d50e      	bpl.n	8009ac2 <_svfiprintf_r+0x32>
 8009aa4:	690b      	ldr	r3, [r1, #16]
 8009aa6:	b963      	cbnz	r3, 8009ac2 <_svfiprintf_r+0x32>
 8009aa8:	2140      	movs	r1, #64	; 0x40
 8009aaa:	f7ff fb8f 	bl	80091cc <_malloc_r>
 8009aae:	6028      	str	r0, [r5, #0]
 8009ab0:	6128      	str	r0, [r5, #16]
 8009ab2:	b920      	cbnz	r0, 8009abe <_svfiprintf_r+0x2e>
 8009ab4:	230c      	movs	r3, #12
 8009ab6:	603b      	str	r3, [r7, #0]
 8009ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009abc:	e0d0      	b.n	8009c60 <_svfiprintf_r+0x1d0>
 8009abe:	2340      	movs	r3, #64	; 0x40
 8009ac0:	616b      	str	r3, [r5, #20]
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ac6:	2320      	movs	r3, #32
 8009ac8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009acc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ad0:	2330      	movs	r3, #48	; 0x30
 8009ad2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009c78 <_svfiprintf_r+0x1e8>
 8009ad6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ada:	f04f 0901 	mov.w	r9, #1
 8009ade:	4623      	mov	r3, r4
 8009ae0:	469a      	mov	sl, r3
 8009ae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ae6:	b10a      	cbz	r2, 8009aec <_svfiprintf_r+0x5c>
 8009ae8:	2a25      	cmp	r2, #37	; 0x25
 8009aea:	d1f9      	bne.n	8009ae0 <_svfiprintf_r+0x50>
 8009aec:	ebba 0b04 	subs.w	fp, sl, r4
 8009af0:	d00b      	beq.n	8009b0a <_svfiprintf_r+0x7a>
 8009af2:	465b      	mov	r3, fp
 8009af4:	4622      	mov	r2, r4
 8009af6:	4629      	mov	r1, r5
 8009af8:	4638      	mov	r0, r7
 8009afa:	f7ff ff6f 	bl	80099dc <__ssputs_r>
 8009afe:	3001      	adds	r0, #1
 8009b00:	f000 80a9 	beq.w	8009c56 <_svfiprintf_r+0x1c6>
 8009b04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b06:	445a      	add	r2, fp
 8009b08:	9209      	str	r2, [sp, #36]	; 0x24
 8009b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	f000 80a1 	beq.w	8009c56 <_svfiprintf_r+0x1c6>
 8009b14:	2300      	movs	r3, #0
 8009b16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b1e:	f10a 0a01 	add.w	sl, sl, #1
 8009b22:	9304      	str	r3, [sp, #16]
 8009b24:	9307      	str	r3, [sp, #28]
 8009b26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b2a:	931a      	str	r3, [sp, #104]	; 0x68
 8009b2c:	4654      	mov	r4, sl
 8009b2e:	2205      	movs	r2, #5
 8009b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b34:	4850      	ldr	r0, [pc, #320]	; (8009c78 <_svfiprintf_r+0x1e8>)
 8009b36:	f7f6 fb6b 	bl	8000210 <memchr>
 8009b3a:	9a04      	ldr	r2, [sp, #16]
 8009b3c:	b9d8      	cbnz	r0, 8009b76 <_svfiprintf_r+0xe6>
 8009b3e:	06d0      	lsls	r0, r2, #27
 8009b40:	bf44      	itt	mi
 8009b42:	2320      	movmi	r3, #32
 8009b44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b48:	0711      	lsls	r1, r2, #28
 8009b4a:	bf44      	itt	mi
 8009b4c:	232b      	movmi	r3, #43	; 0x2b
 8009b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b52:	f89a 3000 	ldrb.w	r3, [sl]
 8009b56:	2b2a      	cmp	r3, #42	; 0x2a
 8009b58:	d015      	beq.n	8009b86 <_svfiprintf_r+0xf6>
 8009b5a:	9a07      	ldr	r2, [sp, #28]
 8009b5c:	4654      	mov	r4, sl
 8009b5e:	2000      	movs	r0, #0
 8009b60:	f04f 0c0a 	mov.w	ip, #10
 8009b64:	4621      	mov	r1, r4
 8009b66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b6a:	3b30      	subs	r3, #48	; 0x30
 8009b6c:	2b09      	cmp	r3, #9
 8009b6e:	d94d      	bls.n	8009c0c <_svfiprintf_r+0x17c>
 8009b70:	b1b0      	cbz	r0, 8009ba0 <_svfiprintf_r+0x110>
 8009b72:	9207      	str	r2, [sp, #28]
 8009b74:	e014      	b.n	8009ba0 <_svfiprintf_r+0x110>
 8009b76:	eba0 0308 	sub.w	r3, r0, r8
 8009b7a:	fa09 f303 	lsl.w	r3, r9, r3
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	9304      	str	r3, [sp, #16]
 8009b82:	46a2      	mov	sl, r4
 8009b84:	e7d2      	b.n	8009b2c <_svfiprintf_r+0x9c>
 8009b86:	9b03      	ldr	r3, [sp, #12]
 8009b88:	1d19      	adds	r1, r3, #4
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	9103      	str	r1, [sp, #12]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	bfbb      	ittet	lt
 8009b92:	425b      	neglt	r3, r3
 8009b94:	f042 0202 	orrlt.w	r2, r2, #2
 8009b98:	9307      	strge	r3, [sp, #28]
 8009b9a:	9307      	strlt	r3, [sp, #28]
 8009b9c:	bfb8      	it	lt
 8009b9e:	9204      	strlt	r2, [sp, #16]
 8009ba0:	7823      	ldrb	r3, [r4, #0]
 8009ba2:	2b2e      	cmp	r3, #46	; 0x2e
 8009ba4:	d10c      	bne.n	8009bc0 <_svfiprintf_r+0x130>
 8009ba6:	7863      	ldrb	r3, [r4, #1]
 8009ba8:	2b2a      	cmp	r3, #42	; 0x2a
 8009baa:	d134      	bne.n	8009c16 <_svfiprintf_r+0x186>
 8009bac:	9b03      	ldr	r3, [sp, #12]
 8009bae:	1d1a      	adds	r2, r3, #4
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	9203      	str	r2, [sp, #12]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	bfb8      	it	lt
 8009bb8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009bbc:	3402      	adds	r4, #2
 8009bbe:	9305      	str	r3, [sp, #20]
 8009bc0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009c88 <_svfiprintf_r+0x1f8>
 8009bc4:	7821      	ldrb	r1, [r4, #0]
 8009bc6:	2203      	movs	r2, #3
 8009bc8:	4650      	mov	r0, sl
 8009bca:	f7f6 fb21 	bl	8000210 <memchr>
 8009bce:	b138      	cbz	r0, 8009be0 <_svfiprintf_r+0x150>
 8009bd0:	9b04      	ldr	r3, [sp, #16]
 8009bd2:	eba0 000a 	sub.w	r0, r0, sl
 8009bd6:	2240      	movs	r2, #64	; 0x40
 8009bd8:	4082      	lsls	r2, r0
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	3401      	adds	r4, #1
 8009bde:	9304      	str	r3, [sp, #16]
 8009be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009be4:	4825      	ldr	r0, [pc, #148]	; (8009c7c <_svfiprintf_r+0x1ec>)
 8009be6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bea:	2206      	movs	r2, #6
 8009bec:	f7f6 fb10 	bl	8000210 <memchr>
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	d038      	beq.n	8009c66 <_svfiprintf_r+0x1d6>
 8009bf4:	4b22      	ldr	r3, [pc, #136]	; (8009c80 <_svfiprintf_r+0x1f0>)
 8009bf6:	bb1b      	cbnz	r3, 8009c40 <_svfiprintf_r+0x1b0>
 8009bf8:	9b03      	ldr	r3, [sp, #12]
 8009bfa:	3307      	adds	r3, #7
 8009bfc:	f023 0307 	bic.w	r3, r3, #7
 8009c00:	3308      	adds	r3, #8
 8009c02:	9303      	str	r3, [sp, #12]
 8009c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c06:	4433      	add	r3, r6
 8009c08:	9309      	str	r3, [sp, #36]	; 0x24
 8009c0a:	e768      	b.n	8009ade <_svfiprintf_r+0x4e>
 8009c0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c10:	460c      	mov	r4, r1
 8009c12:	2001      	movs	r0, #1
 8009c14:	e7a6      	b.n	8009b64 <_svfiprintf_r+0xd4>
 8009c16:	2300      	movs	r3, #0
 8009c18:	3401      	adds	r4, #1
 8009c1a:	9305      	str	r3, [sp, #20]
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	f04f 0c0a 	mov.w	ip, #10
 8009c22:	4620      	mov	r0, r4
 8009c24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c28:	3a30      	subs	r2, #48	; 0x30
 8009c2a:	2a09      	cmp	r2, #9
 8009c2c:	d903      	bls.n	8009c36 <_svfiprintf_r+0x1a6>
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d0c6      	beq.n	8009bc0 <_svfiprintf_r+0x130>
 8009c32:	9105      	str	r1, [sp, #20]
 8009c34:	e7c4      	b.n	8009bc0 <_svfiprintf_r+0x130>
 8009c36:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e7f0      	b.n	8009c22 <_svfiprintf_r+0x192>
 8009c40:	ab03      	add	r3, sp, #12
 8009c42:	9300      	str	r3, [sp, #0]
 8009c44:	462a      	mov	r2, r5
 8009c46:	4b0f      	ldr	r3, [pc, #60]	; (8009c84 <_svfiprintf_r+0x1f4>)
 8009c48:	a904      	add	r1, sp, #16
 8009c4a:	4638      	mov	r0, r7
 8009c4c:	f7fd fe68 	bl	8007920 <_printf_float>
 8009c50:	1c42      	adds	r2, r0, #1
 8009c52:	4606      	mov	r6, r0
 8009c54:	d1d6      	bne.n	8009c04 <_svfiprintf_r+0x174>
 8009c56:	89ab      	ldrh	r3, [r5, #12]
 8009c58:	065b      	lsls	r3, r3, #25
 8009c5a:	f53f af2d 	bmi.w	8009ab8 <_svfiprintf_r+0x28>
 8009c5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c60:	b01d      	add	sp, #116	; 0x74
 8009c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c66:	ab03      	add	r3, sp, #12
 8009c68:	9300      	str	r3, [sp, #0]
 8009c6a:	462a      	mov	r2, r5
 8009c6c:	4b05      	ldr	r3, [pc, #20]	; (8009c84 <_svfiprintf_r+0x1f4>)
 8009c6e:	a904      	add	r1, sp, #16
 8009c70:	4638      	mov	r0, r7
 8009c72:	f7fe f8f9 	bl	8007e68 <_printf_i>
 8009c76:	e7eb      	b.n	8009c50 <_svfiprintf_r+0x1c0>
 8009c78:	0800b1ec 	.word	0x0800b1ec
 8009c7c:	0800b1f6 	.word	0x0800b1f6
 8009c80:	08007921 	.word	0x08007921
 8009c84:	080099dd 	.word	0x080099dd
 8009c88:	0800b1f2 	.word	0x0800b1f2

08009c8c <__sflush_r>:
 8009c8c:	898a      	ldrh	r2, [r1, #12]
 8009c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c92:	4605      	mov	r5, r0
 8009c94:	0710      	lsls	r0, r2, #28
 8009c96:	460c      	mov	r4, r1
 8009c98:	d458      	bmi.n	8009d4c <__sflush_r+0xc0>
 8009c9a:	684b      	ldr	r3, [r1, #4]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	dc05      	bgt.n	8009cac <__sflush_r+0x20>
 8009ca0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	dc02      	bgt.n	8009cac <__sflush_r+0x20>
 8009ca6:	2000      	movs	r0, #0
 8009ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cae:	2e00      	cmp	r6, #0
 8009cb0:	d0f9      	beq.n	8009ca6 <__sflush_r+0x1a>
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009cb8:	682f      	ldr	r7, [r5, #0]
 8009cba:	6a21      	ldr	r1, [r4, #32]
 8009cbc:	602b      	str	r3, [r5, #0]
 8009cbe:	d032      	beq.n	8009d26 <__sflush_r+0x9a>
 8009cc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009cc2:	89a3      	ldrh	r3, [r4, #12]
 8009cc4:	075a      	lsls	r2, r3, #29
 8009cc6:	d505      	bpl.n	8009cd4 <__sflush_r+0x48>
 8009cc8:	6863      	ldr	r3, [r4, #4]
 8009cca:	1ac0      	subs	r0, r0, r3
 8009ccc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cce:	b10b      	cbz	r3, 8009cd4 <__sflush_r+0x48>
 8009cd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cd2:	1ac0      	subs	r0, r0, r3
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cda:	6a21      	ldr	r1, [r4, #32]
 8009cdc:	4628      	mov	r0, r5
 8009cde:	47b0      	blx	r6
 8009ce0:	1c43      	adds	r3, r0, #1
 8009ce2:	89a3      	ldrh	r3, [r4, #12]
 8009ce4:	d106      	bne.n	8009cf4 <__sflush_r+0x68>
 8009ce6:	6829      	ldr	r1, [r5, #0]
 8009ce8:	291d      	cmp	r1, #29
 8009cea:	d82b      	bhi.n	8009d44 <__sflush_r+0xb8>
 8009cec:	4a29      	ldr	r2, [pc, #164]	; (8009d94 <__sflush_r+0x108>)
 8009cee:	410a      	asrs	r2, r1
 8009cf0:	07d6      	lsls	r6, r2, #31
 8009cf2:	d427      	bmi.n	8009d44 <__sflush_r+0xb8>
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	6062      	str	r2, [r4, #4]
 8009cf8:	04d9      	lsls	r1, r3, #19
 8009cfa:	6922      	ldr	r2, [r4, #16]
 8009cfc:	6022      	str	r2, [r4, #0]
 8009cfe:	d504      	bpl.n	8009d0a <__sflush_r+0x7e>
 8009d00:	1c42      	adds	r2, r0, #1
 8009d02:	d101      	bne.n	8009d08 <__sflush_r+0x7c>
 8009d04:	682b      	ldr	r3, [r5, #0]
 8009d06:	b903      	cbnz	r3, 8009d0a <__sflush_r+0x7e>
 8009d08:	6560      	str	r0, [r4, #84]	; 0x54
 8009d0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d0c:	602f      	str	r7, [r5, #0]
 8009d0e:	2900      	cmp	r1, #0
 8009d10:	d0c9      	beq.n	8009ca6 <__sflush_r+0x1a>
 8009d12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d16:	4299      	cmp	r1, r3
 8009d18:	d002      	beq.n	8009d20 <__sflush_r+0x94>
 8009d1a:	4628      	mov	r0, r5
 8009d1c:	f7ff f9e2 	bl	80090e4 <_free_r>
 8009d20:	2000      	movs	r0, #0
 8009d22:	6360      	str	r0, [r4, #52]	; 0x34
 8009d24:	e7c0      	b.n	8009ca8 <__sflush_r+0x1c>
 8009d26:	2301      	movs	r3, #1
 8009d28:	4628      	mov	r0, r5
 8009d2a:	47b0      	blx	r6
 8009d2c:	1c41      	adds	r1, r0, #1
 8009d2e:	d1c8      	bne.n	8009cc2 <__sflush_r+0x36>
 8009d30:	682b      	ldr	r3, [r5, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d0c5      	beq.n	8009cc2 <__sflush_r+0x36>
 8009d36:	2b1d      	cmp	r3, #29
 8009d38:	d001      	beq.n	8009d3e <__sflush_r+0xb2>
 8009d3a:	2b16      	cmp	r3, #22
 8009d3c:	d101      	bne.n	8009d42 <__sflush_r+0xb6>
 8009d3e:	602f      	str	r7, [r5, #0]
 8009d40:	e7b1      	b.n	8009ca6 <__sflush_r+0x1a>
 8009d42:	89a3      	ldrh	r3, [r4, #12]
 8009d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d48:	81a3      	strh	r3, [r4, #12]
 8009d4a:	e7ad      	b.n	8009ca8 <__sflush_r+0x1c>
 8009d4c:	690f      	ldr	r7, [r1, #16]
 8009d4e:	2f00      	cmp	r7, #0
 8009d50:	d0a9      	beq.n	8009ca6 <__sflush_r+0x1a>
 8009d52:	0793      	lsls	r3, r2, #30
 8009d54:	680e      	ldr	r6, [r1, #0]
 8009d56:	bf08      	it	eq
 8009d58:	694b      	ldreq	r3, [r1, #20]
 8009d5a:	600f      	str	r7, [r1, #0]
 8009d5c:	bf18      	it	ne
 8009d5e:	2300      	movne	r3, #0
 8009d60:	eba6 0807 	sub.w	r8, r6, r7
 8009d64:	608b      	str	r3, [r1, #8]
 8009d66:	f1b8 0f00 	cmp.w	r8, #0
 8009d6a:	dd9c      	ble.n	8009ca6 <__sflush_r+0x1a>
 8009d6c:	6a21      	ldr	r1, [r4, #32]
 8009d6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d70:	4643      	mov	r3, r8
 8009d72:	463a      	mov	r2, r7
 8009d74:	4628      	mov	r0, r5
 8009d76:	47b0      	blx	r6
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	dc06      	bgt.n	8009d8a <__sflush_r+0xfe>
 8009d7c:	89a3      	ldrh	r3, [r4, #12]
 8009d7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d82:	81a3      	strh	r3, [r4, #12]
 8009d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d88:	e78e      	b.n	8009ca8 <__sflush_r+0x1c>
 8009d8a:	4407      	add	r7, r0
 8009d8c:	eba8 0800 	sub.w	r8, r8, r0
 8009d90:	e7e9      	b.n	8009d66 <__sflush_r+0xda>
 8009d92:	bf00      	nop
 8009d94:	dfbffffe 	.word	0xdfbffffe

08009d98 <_fflush_r>:
 8009d98:	b538      	push	{r3, r4, r5, lr}
 8009d9a:	690b      	ldr	r3, [r1, #16]
 8009d9c:	4605      	mov	r5, r0
 8009d9e:	460c      	mov	r4, r1
 8009da0:	b913      	cbnz	r3, 8009da8 <_fflush_r+0x10>
 8009da2:	2500      	movs	r5, #0
 8009da4:	4628      	mov	r0, r5
 8009da6:	bd38      	pop	{r3, r4, r5, pc}
 8009da8:	b118      	cbz	r0, 8009db2 <_fflush_r+0x1a>
 8009daa:	6a03      	ldr	r3, [r0, #32]
 8009dac:	b90b      	cbnz	r3, 8009db2 <_fflush_r+0x1a>
 8009dae:	f7fe f9f7 	bl	80081a0 <__sinit>
 8009db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d0f3      	beq.n	8009da2 <_fflush_r+0xa>
 8009dba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009dbc:	07d0      	lsls	r0, r2, #31
 8009dbe:	d404      	bmi.n	8009dca <_fflush_r+0x32>
 8009dc0:	0599      	lsls	r1, r3, #22
 8009dc2:	d402      	bmi.n	8009dca <_fflush_r+0x32>
 8009dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dc6:	f7fe fb01 	bl	80083cc <__retarget_lock_acquire_recursive>
 8009dca:	4628      	mov	r0, r5
 8009dcc:	4621      	mov	r1, r4
 8009dce:	f7ff ff5d 	bl	8009c8c <__sflush_r>
 8009dd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dd4:	07da      	lsls	r2, r3, #31
 8009dd6:	4605      	mov	r5, r0
 8009dd8:	d4e4      	bmi.n	8009da4 <_fflush_r+0xc>
 8009dda:	89a3      	ldrh	r3, [r4, #12]
 8009ddc:	059b      	lsls	r3, r3, #22
 8009dde:	d4e1      	bmi.n	8009da4 <_fflush_r+0xc>
 8009de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009de2:	f7fe faf4 	bl	80083ce <__retarget_lock_release_recursive>
 8009de6:	e7dd      	b.n	8009da4 <_fflush_r+0xc>

08009de8 <memmove>:
 8009de8:	4288      	cmp	r0, r1
 8009dea:	b510      	push	{r4, lr}
 8009dec:	eb01 0402 	add.w	r4, r1, r2
 8009df0:	d902      	bls.n	8009df8 <memmove+0x10>
 8009df2:	4284      	cmp	r4, r0
 8009df4:	4623      	mov	r3, r4
 8009df6:	d807      	bhi.n	8009e08 <memmove+0x20>
 8009df8:	1e43      	subs	r3, r0, #1
 8009dfa:	42a1      	cmp	r1, r4
 8009dfc:	d008      	beq.n	8009e10 <memmove+0x28>
 8009dfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e06:	e7f8      	b.n	8009dfa <memmove+0x12>
 8009e08:	4402      	add	r2, r0
 8009e0a:	4601      	mov	r1, r0
 8009e0c:	428a      	cmp	r2, r1
 8009e0e:	d100      	bne.n	8009e12 <memmove+0x2a>
 8009e10:	bd10      	pop	{r4, pc}
 8009e12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e1a:	e7f7      	b.n	8009e0c <memmove+0x24>

08009e1c <_sbrk_r>:
 8009e1c:	b538      	push	{r3, r4, r5, lr}
 8009e1e:	4d06      	ldr	r5, [pc, #24]	; (8009e38 <_sbrk_r+0x1c>)
 8009e20:	2300      	movs	r3, #0
 8009e22:	4604      	mov	r4, r0
 8009e24:	4608      	mov	r0, r1
 8009e26:	602b      	str	r3, [r5, #0]
 8009e28:	f7f9 f978 	bl	800311c <_sbrk>
 8009e2c:	1c43      	adds	r3, r0, #1
 8009e2e:	d102      	bne.n	8009e36 <_sbrk_r+0x1a>
 8009e30:	682b      	ldr	r3, [r5, #0]
 8009e32:	b103      	cbz	r3, 8009e36 <_sbrk_r+0x1a>
 8009e34:	6023      	str	r3, [r4, #0]
 8009e36:	bd38      	pop	{r3, r4, r5, pc}
 8009e38:	20000540 	.word	0x20000540

08009e3c <__assert_func>:
 8009e3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e3e:	4614      	mov	r4, r2
 8009e40:	461a      	mov	r2, r3
 8009e42:	4b09      	ldr	r3, [pc, #36]	; (8009e68 <__assert_func+0x2c>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4605      	mov	r5, r0
 8009e48:	68d8      	ldr	r0, [r3, #12]
 8009e4a:	b14c      	cbz	r4, 8009e60 <__assert_func+0x24>
 8009e4c:	4b07      	ldr	r3, [pc, #28]	; (8009e6c <__assert_func+0x30>)
 8009e4e:	9100      	str	r1, [sp, #0]
 8009e50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e54:	4906      	ldr	r1, [pc, #24]	; (8009e70 <__assert_func+0x34>)
 8009e56:	462b      	mov	r3, r5
 8009e58:	f000 f872 	bl	8009f40 <fiprintf>
 8009e5c:	f000 f882 	bl	8009f64 <abort>
 8009e60:	4b04      	ldr	r3, [pc, #16]	; (8009e74 <__assert_func+0x38>)
 8009e62:	461c      	mov	r4, r3
 8009e64:	e7f3      	b.n	8009e4e <__assert_func+0x12>
 8009e66:	bf00      	nop
 8009e68:	2000006c 	.word	0x2000006c
 8009e6c:	0800b207 	.word	0x0800b207
 8009e70:	0800b214 	.word	0x0800b214
 8009e74:	0800b242 	.word	0x0800b242

08009e78 <_calloc_r>:
 8009e78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e7a:	fba1 2402 	umull	r2, r4, r1, r2
 8009e7e:	b94c      	cbnz	r4, 8009e94 <_calloc_r+0x1c>
 8009e80:	4611      	mov	r1, r2
 8009e82:	9201      	str	r2, [sp, #4]
 8009e84:	f7ff f9a2 	bl	80091cc <_malloc_r>
 8009e88:	9a01      	ldr	r2, [sp, #4]
 8009e8a:	4605      	mov	r5, r0
 8009e8c:	b930      	cbnz	r0, 8009e9c <_calloc_r+0x24>
 8009e8e:	4628      	mov	r0, r5
 8009e90:	b003      	add	sp, #12
 8009e92:	bd30      	pop	{r4, r5, pc}
 8009e94:	220c      	movs	r2, #12
 8009e96:	6002      	str	r2, [r0, #0]
 8009e98:	2500      	movs	r5, #0
 8009e9a:	e7f8      	b.n	8009e8e <_calloc_r+0x16>
 8009e9c:	4621      	mov	r1, r4
 8009e9e:	f7fe fa18 	bl	80082d2 <memset>
 8009ea2:	e7f4      	b.n	8009e8e <_calloc_r+0x16>

08009ea4 <__ascii_mbtowc>:
 8009ea4:	b082      	sub	sp, #8
 8009ea6:	b901      	cbnz	r1, 8009eaa <__ascii_mbtowc+0x6>
 8009ea8:	a901      	add	r1, sp, #4
 8009eaa:	b142      	cbz	r2, 8009ebe <__ascii_mbtowc+0x1a>
 8009eac:	b14b      	cbz	r3, 8009ec2 <__ascii_mbtowc+0x1e>
 8009eae:	7813      	ldrb	r3, [r2, #0]
 8009eb0:	600b      	str	r3, [r1, #0]
 8009eb2:	7812      	ldrb	r2, [r2, #0]
 8009eb4:	1e10      	subs	r0, r2, #0
 8009eb6:	bf18      	it	ne
 8009eb8:	2001      	movne	r0, #1
 8009eba:	b002      	add	sp, #8
 8009ebc:	4770      	bx	lr
 8009ebe:	4610      	mov	r0, r2
 8009ec0:	e7fb      	b.n	8009eba <__ascii_mbtowc+0x16>
 8009ec2:	f06f 0001 	mvn.w	r0, #1
 8009ec6:	e7f8      	b.n	8009eba <__ascii_mbtowc+0x16>

08009ec8 <_realloc_r>:
 8009ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ecc:	4680      	mov	r8, r0
 8009ece:	4614      	mov	r4, r2
 8009ed0:	460e      	mov	r6, r1
 8009ed2:	b921      	cbnz	r1, 8009ede <_realloc_r+0x16>
 8009ed4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ed8:	4611      	mov	r1, r2
 8009eda:	f7ff b977 	b.w	80091cc <_malloc_r>
 8009ede:	b92a      	cbnz	r2, 8009eec <_realloc_r+0x24>
 8009ee0:	f7ff f900 	bl	80090e4 <_free_r>
 8009ee4:	4625      	mov	r5, r4
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009eec:	f000 f841 	bl	8009f72 <_malloc_usable_size_r>
 8009ef0:	4284      	cmp	r4, r0
 8009ef2:	4607      	mov	r7, r0
 8009ef4:	d802      	bhi.n	8009efc <_realloc_r+0x34>
 8009ef6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009efa:	d812      	bhi.n	8009f22 <_realloc_r+0x5a>
 8009efc:	4621      	mov	r1, r4
 8009efe:	4640      	mov	r0, r8
 8009f00:	f7ff f964 	bl	80091cc <_malloc_r>
 8009f04:	4605      	mov	r5, r0
 8009f06:	2800      	cmp	r0, #0
 8009f08:	d0ed      	beq.n	8009ee6 <_realloc_r+0x1e>
 8009f0a:	42bc      	cmp	r4, r7
 8009f0c:	4622      	mov	r2, r4
 8009f0e:	4631      	mov	r1, r6
 8009f10:	bf28      	it	cs
 8009f12:	463a      	movcs	r2, r7
 8009f14:	f7fe fa5c 	bl	80083d0 <memcpy>
 8009f18:	4631      	mov	r1, r6
 8009f1a:	4640      	mov	r0, r8
 8009f1c:	f7ff f8e2 	bl	80090e4 <_free_r>
 8009f20:	e7e1      	b.n	8009ee6 <_realloc_r+0x1e>
 8009f22:	4635      	mov	r5, r6
 8009f24:	e7df      	b.n	8009ee6 <_realloc_r+0x1e>

08009f26 <__ascii_wctomb>:
 8009f26:	b149      	cbz	r1, 8009f3c <__ascii_wctomb+0x16>
 8009f28:	2aff      	cmp	r2, #255	; 0xff
 8009f2a:	bf85      	ittet	hi
 8009f2c:	238a      	movhi	r3, #138	; 0x8a
 8009f2e:	6003      	strhi	r3, [r0, #0]
 8009f30:	700a      	strbls	r2, [r1, #0]
 8009f32:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009f36:	bf98      	it	ls
 8009f38:	2001      	movls	r0, #1
 8009f3a:	4770      	bx	lr
 8009f3c:	4608      	mov	r0, r1
 8009f3e:	4770      	bx	lr

08009f40 <fiprintf>:
 8009f40:	b40e      	push	{r1, r2, r3}
 8009f42:	b503      	push	{r0, r1, lr}
 8009f44:	4601      	mov	r1, r0
 8009f46:	ab03      	add	r3, sp, #12
 8009f48:	4805      	ldr	r0, [pc, #20]	; (8009f60 <fiprintf+0x20>)
 8009f4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f4e:	6800      	ldr	r0, [r0, #0]
 8009f50:	9301      	str	r3, [sp, #4]
 8009f52:	f000 f83f 	bl	8009fd4 <_vfiprintf_r>
 8009f56:	b002      	add	sp, #8
 8009f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f5c:	b003      	add	sp, #12
 8009f5e:	4770      	bx	lr
 8009f60:	2000006c 	.word	0x2000006c

08009f64 <abort>:
 8009f64:	b508      	push	{r3, lr}
 8009f66:	2006      	movs	r0, #6
 8009f68:	f000 fa0c 	bl	800a384 <raise>
 8009f6c:	2001      	movs	r0, #1
 8009f6e:	f7f9 f85d 	bl	800302c <_exit>

08009f72 <_malloc_usable_size_r>:
 8009f72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f76:	1f18      	subs	r0, r3, #4
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	bfbc      	itt	lt
 8009f7c:	580b      	ldrlt	r3, [r1, r0]
 8009f7e:	18c0      	addlt	r0, r0, r3
 8009f80:	4770      	bx	lr

08009f82 <__sfputc_r>:
 8009f82:	6893      	ldr	r3, [r2, #8]
 8009f84:	3b01      	subs	r3, #1
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	b410      	push	{r4}
 8009f8a:	6093      	str	r3, [r2, #8]
 8009f8c:	da08      	bge.n	8009fa0 <__sfputc_r+0x1e>
 8009f8e:	6994      	ldr	r4, [r2, #24]
 8009f90:	42a3      	cmp	r3, r4
 8009f92:	db01      	blt.n	8009f98 <__sfputc_r+0x16>
 8009f94:	290a      	cmp	r1, #10
 8009f96:	d103      	bne.n	8009fa0 <__sfputc_r+0x1e>
 8009f98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f9c:	f000 b934 	b.w	800a208 <__swbuf_r>
 8009fa0:	6813      	ldr	r3, [r2, #0]
 8009fa2:	1c58      	adds	r0, r3, #1
 8009fa4:	6010      	str	r0, [r2, #0]
 8009fa6:	7019      	strb	r1, [r3, #0]
 8009fa8:	4608      	mov	r0, r1
 8009faa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fae:	4770      	bx	lr

08009fb0 <__sfputs_r>:
 8009fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb2:	4606      	mov	r6, r0
 8009fb4:	460f      	mov	r7, r1
 8009fb6:	4614      	mov	r4, r2
 8009fb8:	18d5      	adds	r5, r2, r3
 8009fba:	42ac      	cmp	r4, r5
 8009fbc:	d101      	bne.n	8009fc2 <__sfputs_r+0x12>
 8009fbe:	2000      	movs	r0, #0
 8009fc0:	e007      	b.n	8009fd2 <__sfputs_r+0x22>
 8009fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fc6:	463a      	mov	r2, r7
 8009fc8:	4630      	mov	r0, r6
 8009fca:	f7ff ffda 	bl	8009f82 <__sfputc_r>
 8009fce:	1c43      	adds	r3, r0, #1
 8009fd0:	d1f3      	bne.n	8009fba <__sfputs_r+0xa>
 8009fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009fd4 <_vfiprintf_r>:
 8009fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd8:	460d      	mov	r5, r1
 8009fda:	b09d      	sub	sp, #116	; 0x74
 8009fdc:	4614      	mov	r4, r2
 8009fde:	4698      	mov	r8, r3
 8009fe0:	4606      	mov	r6, r0
 8009fe2:	b118      	cbz	r0, 8009fec <_vfiprintf_r+0x18>
 8009fe4:	6a03      	ldr	r3, [r0, #32]
 8009fe6:	b90b      	cbnz	r3, 8009fec <_vfiprintf_r+0x18>
 8009fe8:	f7fe f8da 	bl	80081a0 <__sinit>
 8009fec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fee:	07d9      	lsls	r1, r3, #31
 8009ff0:	d405      	bmi.n	8009ffe <_vfiprintf_r+0x2a>
 8009ff2:	89ab      	ldrh	r3, [r5, #12]
 8009ff4:	059a      	lsls	r2, r3, #22
 8009ff6:	d402      	bmi.n	8009ffe <_vfiprintf_r+0x2a>
 8009ff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ffa:	f7fe f9e7 	bl	80083cc <__retarget_lock_acquire_recursive>
 8009ffe:	89ab      	ldrh	r3, [r5, #12]
 800a000:	071b      	lsls	r3, r3, #28
 800a002:	d501      	bpl.n	800a008 <_vfiprintf_r+0x34>
 800a004:	692b      	ldr	r3, [r5, #16]
 800a006:	b99b      	cbnz	r3, 800a030 <_vfiprintf_r+0x5c>
 800a008:	4629      	mov	r1, r5
 800a00a:	4630      	mov	r0, r6
 800a00c:	f000 f93a 	bl	800a284 <__swsetup_r>
 800a010:	b170      	cbz	r0, 800a030 <_vfiprintf_r+0x5c>
 800a012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a014:	07dc      	lsls	r4, r3, #31
 800a016:	d504      	bpl.n	800a022 <_vfiprintf_r+0x4e>
 800a018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a01c:	b01d      	add	sp, #116	; 0x74
 800a01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a022:	89ab      	ldrh	r3, [r5, #12]
 800a024:	0598      	lsls	r0, r3, #22
 800a026:	d4f7      	bmi.n	800a018 <_vfiprintf_r+0x44>
 800a028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a02a:	f7fe f9d0 	bl	80083ce <__retarget_lock_release_recursive>
 800a02e:	e7f3      	b.n	800a018 <_vfiprintf_r+0x44>
 800a030:	2300      	movs	r3, #0
 800a032:	9309      	str	r3, [sp, #36]	; 0x24
 800a034:	2320      	movs	r3, #32
 800a036:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a03a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a03e:	2330      	movs	r3, #48	; 0x30
 800a040:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a1f4 <_vfiprintf_r+0x220>
 800a044:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a048:	f04f 0901 	mov.w	r9, #1
 800a04c:	4623      	mov	r3, r4
 800a04e:	469a      	mov	sl, r3
 800a050:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a054:	b10a      	cbz	r2, 800a05a <_vfiprintf_r+0x86>
 800a056:	2a25      	cmp	r2, #37	; 0x25
 800a058:	d1f9      	bne.n	800a04e <_vfiprintf_r+0x7a>
 800a05a:	ebba 0b04 	subs.w	fp, sl, r4
 800a05e:	d00b      	beq.n	800a078 <_vfiprintf_r+0xa4>
 800a060:	465b      	mov	r3, fp
 800a062:	4622      	mov	r2, r4
 800a064:	4629      	mov	r1, r5
 800a066:	4630      	mov	r0, r6
 800a068:	f7ff ffa2 	bl	8009fb0 <__sfputs_r>
 800a06c:	3001      	adds	r0, #1
 800a06e:	f000 80a9 	beq.w	800a1c4 <_vfiprintf_r+0x1f0>
 800a072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a074:	445a      	add	r2, fp
 800a076:	9209      	str	r2, [sp, #36]	; 0x24
 800a078:	f89a 3000 	ldrb.w	r3, [sl]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f000 80a1 	beq.w	800a1c4 <_vfiprintf_r+0x1f0>
 800a082:	2300      	movs	r3, #0
 800a084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a088:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a08c:	f10a 0a01 	add.w	sl, sl, #1
 800a090:	9304      	str	r3, [sp, #16]
 800a092:	9307      	str	r3, [sp, #28]
 800a094:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a098:	931a      	str	r3, [sp, #104]	; 0x68
 800a09a:	4654      	mov	r4, sl
 800a09c:	2205      	movs	r2, #5
 800a09e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0a2:	4854      	ldr	r0, [pc, #336]	; (800a1f4 <_vfiprintf_r+0x220>)
 800a0a4:	f7f6 f8b4 	bl	8000210 <memchr>
 800a0a8:	9a04      	ldr	r2, [sp, #16]
 800a0aa:	b9d8      	cbnz	r0, 800a0e4 <_vfiprintf_r+0x110>
 800a0ac:	06d1      	lsls	r1, r2, #27
 800a0ae:	bf44      	itt	mi
 800a0b0:	2320      	movmi	r3, #32
 800a0b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0b6:	0713      	lsls	r3, r2, #28
 800a0b8:	bf44      	itt	mi
 800a0ba:	232b      	movmi	r3, #43	; 0x2b
 800a0bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0c0:	f89a 3000 	ldrb.w	r3, [sl]
 800a0c4:	2b2a      	cmp	r3, #42	; 0x2a
 800a0c6:	d015      	beq.n	800a0f4 <_vfiprintf_r+0x120>
 800a0c8:	9a07      	ldr	r2, [sp, #28]
 800a0ca:	4654      	mov	r4, sl
 800a0cc:	2000      	movs	r0, #0
 800a0ce:	f04f 0c0a 	mov.w	ip, #10
 800a0d2:	4621      	mov	r1, r4
 800a0d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0d8:	3b30      	subs	r3, #48	; 0x30
 800a0da:	2b09      	cmp	r3, #9
 800a0dc:	d94d      	bls.n	800a17a <_vfiprintf_r+0x1a6>
 800a0de:	b1b0      	cbz	r0, 800a10e <_vfiprintf_r+0x13a>
 800a0e0:	9207      	str	r2, [sp, #28]
 800a0e2:	e014      	b.n	800a10e <_vfiprintf_r+0x13a>
 800a0e4:	eba0 0308 	sub.w	r3, r0, r8
 800a0e8:	fa09 f303 	lsl.w	r3, r9, r3
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	9304      	str	r3, [sp, #16]
 800a0f0:	46a2      	mov	sl, r4
 800a0f2:	e7d2      	b.n	800a09a <_vfiprintf_r+0xc6>
 800a0f4:	9b03      	ldr	r3, [sp, #12]
 800a0f6:	1d19      	adds	r1, r3, #4
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	9103      	str	r1, [sp, #12]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	bfbb      	ittet	lt
 800a100:	425b      	neglt	r3, r3
 800a102:	f042 0202 	orrlt.w	r2, r2, #2
 800a106:	9307      	strge	r3, [sp, #28]
 800a108:	9307      	strlt	r3, [sp, #28]
 800a10a:	bfb8      	it	lt
 800a10c:	9204      	strlt	r2, [sp, #16]
 800a10e:	7823      	ldrb	r3, [r4, #0]
 800a110:	2b2e      	cmp	r3, #46	; 0x2e
 800a112:	d10c      	bne.n	800a12e <_vfiprintf_r+0x15a>
 800a114:	7863      	ldrb	r3, [r4, #1]
 800a116:	2b2a      	cmp	r3, #42	; 0x2a
 800a118:	d134      	bne.n	800a184 <_vfiprintf_r+0x1b0>
 800a11a:	9b03      	ldr	r3, [sp, #12]
 800a11c:	1d1a      	adds	r2, r3, #4
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	9203      	str	r2, [sp, #12]
 800a122:	2b00      	cmp	r3, #0
 800a124:	bfb8      	it	lt
 800a126:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a12a:	3402      	adds	r4, #2
 800a12c:	9305      	str	r3, [sp, #20]
 800a12e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a204 <_vfiprintf_r+0x230>
 800a132:	7821      	ldrb	r1, [r4, #0]
 800a134:	2203      	movs	r2, #3
 800a136:	4650      	mov	r0, sl
 800a138:	f7f6 f86a 	bl	8000210 <memchr>
 800a13c:	b138      	cbz	r0, 800a14e <_vfiprintf_r+0x17a>
 800a13e:	9b04      	ldr	r3, [sp, #16]
 800a140:	eba0 000a 	sub.w	r0, r0, sl
 800a144:	2240      	movs	r2, #64	; 0x40
 800a146:	4082      	lsls	r2, r0
 800a148:	4313      	orrs	r3, r2
 800a14a:	3401      	adds	r4, #1
 800a14c:	9304      	str	r3, [sp, #16]
 800a14e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a152:	4829      	ldr	r0, [pc, #164]	; (800a1f8 <_vfiprintf_r+0x224>)
 800a154:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a158:	2206      	movs	r2, #6
 800a15a:	f7f6 f859 	bl	8000210 <memchr>
 800a15e:	2800      	cmp	r0, #0
 800a160:	d03f      	beq.n	800a1e2 <_vfiprintf_r+0x20e>
 800a162:	4b26      	ldr	r3, [pc, #152]	; (800a1fc <_vfiprintf_r+0x228>)
 800a164:	bb1b      	cbnz	r3, 800a1ae <_vfiprintf_r+0x1da>
 800a166:	9b03      	ldr	r3, [sp, #12]
 800a168:	3307      	adds	r3, #7
 800a16a:	f023 0307 	bic.w	r3, r3, #7
 800a16e:	3308      	adds	r3, #8
 800a170:	9303      	str	r3, [sp, #12]
 800a172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a174:	443b      	add	r3, r7
 800a176:	9309      	str	r3, [sp, #36]	; 0x24
 800a178:	e768      	b.n	800a04c <_vfiprintf_r+0x78>
 800a17a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a17e:	460c      	mov	r4, r1
 800a180:	2001      	movs	r0, #1
 800a182:	e7a6      	b.n	800a0d2 <_vfiprintf_r+0xfe>
 800a184:	2300      	movs	r3, #0
 800a186:	3401      	adds	r4, #1
 800a188:	9305      	str	r3, [sp, #20]
 800a18a:	4619      	mov	r1, r3
 800a18c:	f04f 0c0a 	mov.w	ip, #10
 800a190:	4620      	mov	r0, r4
 800a192:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a196:	3a30      	subs	r2, #48	; 0x30
 800a198:	2a09      	cmp	r2, #9
 800a19a:	d903      	bls.n	800a1a4 <_vfiprintf_r+0x1d0>
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d0c6      	beq.n	800a12e <_vfiprintf_r+0x15a>
 800a1a0:	9105      	str	r1, [sp, #20]
 800a1a2:	e7c4      	b.n	800a12e <_vfiprintf_r+0x15a>
 800a1a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1a8:	4604      	mov	r4, r0
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e7f0      	b.n	800a190 <_vfiprintf_r+0x1bc>
 800a1ae:	ab03      	add	r3, sp, #12
 800a1b0:	9300      	str	r3, [sp, #0]
 800a1b2:	462a      	mov	r2, r5
 800a1b4:	4b12      	ldr	r3, [pc, #72]	; (800a200 <_vfiprintf_r+0x22c>)
 800a1b6:	a904      	add	r1, sp, #16
 800a1b8:	4630      	mov	r0, r6
 800a1ba:	f7fd fbb1 	bl	8007920 <_printf_float>
 800a1be:	4607      	mov	r7, r0
 800a1c0:	1c78      	adds	r0, r7, #1
 800a1c2:	d1d6      	bne.n	800a172 <_vfiprintf_r+0x19e>
 800a1c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1c6:	07d9      	lsls	r1, r3, #31
 800a1c8:	d405      	bmi.n	800a1d6 <_vfiprintf_r+0x202>
 800a1ca:	89ab      	ldrh	r3, [r5, #12]
 800a1cc:	059a      	lsls	r2, r3, #22
 800a1ce:	d402      	bmi.n	800a1d6 <_vfiprintf_r+0x202>
 800a1d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1d2:	f7fe f8fc 	bl	80083ce <__retarget_lock_release_recursive>
 800a1d6:	89ab      	ldrh	r3, [r5, #12]
 800a1d8:	065b      	lsls	r3, r3, #25
 800a1da:	f53f af1d 	bmi.w	800a018 <_vfiprintf_r+0x44>
 800a1de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1e0:	e71c      	b.n	800a01c <_vfiprintf_r+0x48>
 800a1e2:	ab03      	add	r3, sp, #12
 800a1e4:	9300      	str	r3, [sp, #0]
 800a1e6:	462a      	mov	r2, r5
 800a1e8:	4b05      	ldr	r3, [pc, #20]	; (800a200 <_vfiprintf_r+0x22c>)
 800a1ea:	a904      	add	r1, sp, #16
 800a1ec:	4630      	mov	r0, r6
 800a1ee:	f7fd fe3b 	bl	8007e68 <_printf_i>
 800a1f2:	e7e4      	b.n	800a1be <_vfiprintf_r+0x1ea>
 800a1f4:	0800b1ec 	.word	0x0800b1ec
 800a1f8:	0800b1f6 	.word	0x0800b1f6
 800a1fc:	08007921 	.word	0x08007921
 800a200:	08009fb1 	.word	0x08009fb1
 800a204:	0800b1f2 	.word	0x0800b1f2

0800a208 <__swbuf_r>:
 800a208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a20a:	460e      	mov	r6, r1
 800a20c:	4614      	mov	r4, r2
 800a20e:	4605      	mov	r5, r0
 800a210:	b118      	cbz	r0, 800a21a <__swbuf_r+0x12>
 800a212:	6a03      	ldr	r3, [r0, #32]
 800a214:	b90b      	cbnz	r3, 800a21a <__swbuf_r+0x12>
 800a216:	f7fd ffc3 	bl	80081a0 <__sinit>
 800a21a:	69a3      	ldr	r3, [r4, #24]
 800a21c:	60a3      	str	r3, [r4, #8]
 800a21e:	89a3      	ldrh	r3, [r4, #12]
 800a220:	071a      	lsls	r2, r3, #28
 800a222:	d525      	bpl.n	800a270 <__swbuf_r+0x68>
 800a224:	6923      	ldr	r3, [r4, #16]
 800a226:	b31b      	cbz	r3, 800a270 <__swbuf_r+0x68>
 800a228:	6823      	ldr	r3, [r4, #0]
 800a22a:	6922      	ldr	r2, [r4, #16]
 800a22c:	1a98      	subs	r0, r3, r2
 800a22e:	6963      	ldr	r3, [r4, #20]
 800a230:	b2f6      	uxtb	r6, r6
 800a232:	4283      	cmp	r3, r0
 800a234:	4637      	mov	r7, r6
 800a236:	dc04      	bgt.n	800a242 <__swbuf_r+0x3a>
 800a238:	4621      	mov	r1, r4
 800a23a:	4628      	mov	r0, r5
 800a23c:	f7ff fdac 	bl	8009d98 <_fflush_r>
 800a240:	b9e0      	cbnz	r0, 800a27c <__swbuf_r+0x74>
 800a242:	68a3      	ldr	r3, [r4, #8]
 800a244:	3b01      	subs	r3, #1
 800a246:	60a3      	str	r3, [r4, #8]
 800a248:	6823      	ldr	r3, [r4, #0]
 800a24a:	1c5a      	adds	r2, r3, #1
 800a24c:	6022      	str	r2, [r4, #0]
 800a24e:	701e      	strb	r6, [r3, #0]
 800a250:	6962      	ldr	r2, [r4, #20]
 800a252:	1c43      	adds	r3, r0, #1
 800a254:	429a      	cmp	r2, r3
 800a256:	d004      	beq.n	800a262 <__swbuf_r+0x5a>
 800a258:	89a3      	ldrh	r3, [r4, #12]
 800a25a:	07db      	lsls	r3, r3, #31
 800a25c:	d506      	bpl.n	800a26c <__swbuf_r+0x64>
 800a25e:	2e0a      	cmp	r6, #10
 800a260:	d104      	bne.n	800a26c <__swbuf_r+0x64>
 800a262:	4621      	mov	r1, r4
 800a264:	4628      	mov	r0, r5
 800a266:	f7ff fd97 	bl	8009d98 <_fflush_r>
 800a26a:	b938      	cbnz	r0, 800a27c <__swbuf_r+0x74>
 800a26c:	4638      	mov	r0, r7
 800a26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a270:	4621      	mov	r1, r4
 800a272:	4628      	mov	r0, r5
 800a274:	f000 f806 	bl	800a284 <__swsetup_r>
 800a278:	2800      	cmp	r0, #0
 800a27a:	d0d5      	beq.n	800a228 <__swbuf_r+0x20>
 800a27c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a280:	e7f4      	b.n	800a26c <__swbuf_r+0x64>
	...

0800a284 <__swsetup_r>:
 800a284:	b538      	push	{r3, r4, r5, lr}
 800a286:	4b2a      	ldr	r3, [pc, #168]	; (800a330 <__swsetup_r+0xac>)
 800a288:	4605      	mov	r5, r0
 800a28a:	6818      	ldr	r0, [r3, #0]
 800a28c:	460c      	mov	r4, r1
 800a28e:	b118      	cbz	r0, 800a298 <__swsetup_r+0x14>
 800a290:	6a03      	ldr	r3, [r0, #32]
 800a292:	b90b      	cbnz	r3, 800a298 <__swsetup_r+0x14>
 800a294:	f7fd ff84 	bl	80081a0 <__sinit>
 800a298:	89a3      	ldrh	r3, [r4, #12]
 800a29a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a29e:	0718      	lsls	r0, r3, #28
 800a2a0:	d422      	bmi.n	800a2e8 <__swsetup_r+0x64>
 800a2a2:	06d9      	lsls	r1, r3, #27
 800a2a4:	d407      	bmi.n	800a2b6 <__swsetup_r+0x32>
 800a2a6:	2309      	movs	r3, #9
 800a2a8:	602b      	str	r3, [r5, #0]
 800a2aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a2ae:	81a3      	strh	r3, [r4, #12]
 800a2b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2b4:	e034      	b.n	800a320 <__swsetup_r+0x9c>
 800a2b6:	0758      	lsls	r0, r3, #29
 800a2b8:	d512      	bpl.n	800a2e0 <__swsetup_r+0x5c>
 800a2ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2bc:	b141      	cbz	r1, 800a2d0 <__swsetup_r+0x4c>
 800a2be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2c2:	4299      	cmp	r1, r3
 800a2c4:	d002      	beq.n	800a2cc <__swsetup_r+0x48>
 800a2c6:	4628      	mov	r0, r5
 800a2c8:	f7fe ff0c 	bl	80090e4 <_free_r>
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	6363      	str	r3, [r4, #52]	; 0x34
 800a2d0:	89a3      	ldrh	r3, [r4, #12]
 800a2d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2d6:	81a3      	strh	r3, [r4, #12]
 800a2d8:	2300      	movs	r3, #0
 800a2da:	6063      	str	r3, [r4, #4]
 800a2dc:	6923      	ldr	r3, [r4, #16]
 800a2de:	6023      	str	r3, [r4, #0]
 800a2e0:	89a3      	ldrh	r3, [r4, #12]
 800a2e2:	f043 0308 	orr.w	r3, r3, #8
 800a2e6:	81a3      	strh	r3, [r4, #12]
 800a2e8:	6923      	ldr	r3, [r4, #16]
 800a2ea:	b94b      	cbnz	r3, 800a300 <__swsetup_r+0x7c>
 800a2ec:	89a3      	ldrh	r3, [r4, #12]
 800a2ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2f6:	d003      	beq.n	800a300 <__swsetup_r+0x7c>
 800a2f8:	4621      	mov	r1, r4
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	f000 f884 	bl	800a408 <__smakebuf_r>
 800a300:	89a0      	ldrh	r0, [r4, #12]
 800a302:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a306:	f010 0301 	ands.w	r3, r0, #1
 800a30a:	d00a      	beq.n	800a322 <__swsetup_r+0x9e>
 800a30c:	2300      	movs	r3, #0
 800a30e:	60a3      	str	r3, [r4, #8]
 800a310:	6963      	ldr	r3, [r4, #20]
 800a312:	425b      	negs	r3, r3
 800a314:	61a3      	str	r3, [r4, #24]
 800a316:	6923      	ldr	r3, [r4, #16]
 800a318:	b943      	cbnz	r3, 800a32c <__swsetup_r+0xa8>
 800a31a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a31e:	d1c4      	bne.n	800a2aa <__swsetup_r+0x26>
 800a320:	bd38      	pop	{r3, r4, r5, pc}
 800a322:	0781      	lsls	r1, r0, #30
 800a324:	bf58      	it	pl
 800a326:	6963      	ldrpl	r3, [r4, #20]
 800a328:	60a3      	str	r3, [r4, #8]
 800a32a:	e7f4      	b.n	800a316 <__swsetup_r+0x92>
 800a32c:	2000      	movs	r0, #0
 800a32e:	e7f7      	b.n	800a320 <__swsetup_r+0x9c>
 800a330:	2000006c 	.word	0x2000006c

0800a334 <_raise_r>:
 800a334:	291f      	cmp	r1, #31
 800a336:	b538      	push	{r3, r4, r5, lr}
 800a338:	4604      	mov	r4, r0
 800a33a:	460d      	mov	r5, r1
 800a33c:	d904      	bls.n	800a348 <_raise_r+0x14>
 800a33e:	2316      	movs	r3, #22
 800a340:	6003      	str	r3, [r0, #0]
 800a342:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a346:	bd38      	pop	{r3, r4, r5, pc}
 800a348:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a34a:	b112      	cbz	r2, 800a352 <_raise_r+0x1e>
 800a34c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a350:	b94b      	cbnz	r3, 800a366 <_raise_r+0x32>
 800a352:	4620      	mov	r0, r4
 800a354:	f000 f830 	bl	800a3b8 <_getpid_r>
 800a358:	462a      	mov	r2, r5
 800a35a:	4601      	mov	r1, r0
 800a35c:	4620      	mov	r0, r4
 800a35e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a362:	f000 b817 	b.w	800a394 <_kill_r>
 800a366:	2b01      	cmp	r3, #1
 800a368:	d00a      	beq.n	800a380 <_raise_r+0x4c>
 800a36a:	1c59      	adds	r1, r3, #1
 800a36c:	d103      	bne.n	800a376 <_raise_r+0x42>
 800a36e:	2316      	movs	r3, #22
 800a370:	6003      	str	r3, [r0, #0]
 800a372:	2001      	movs	r0, #1
 800a374:	e7e7      	b.n	800a346 <_raise_r+0x12>
 800a376:	2400      	movs	r4, #0
 800a378:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a37c:	4628      	mov	r0, r5
 800a37e:	4798      	blx	r3
 800a380:	2000      	movs	r0, #0
 800a382:	e7e0      	b.n	800a346 <_raise_r+0x12>

0800a384 <raise>:
 800a384:	4b02      	ldr	r3, [pc, #8]	; (800a390 <raise+0xc>)
 800a386:	4601      	mov	r1, r0
 800a388:	6818      	ldr	r0, [r3, #0]
 800a38a:	f7ff bfd3 	b.w	800a334 <_raise_r>
 800a38e:	bf00      	nop
 800a390:	2000006c 	.word	0x2000006c

0800a394 <_kill_r>:
 800a394:	b538      	push	{r3, r4, r5, lr}
 800a396:	4d07      	ldr	r5, [pc, #28]	; (800a3b4 <_kill_r+0x20>)
 800a398:	2300      	movs	r3, #0
 800a39a:	4604      	mov	r4, r0
 800a39c:	4608      	mov	r0, r1
 800a39e:	4611      	mov	r1, r2
 800a3a0:	602b      	str	r3, [r5, #0]
 800a3a2:	f7f8 fe33 	bl	800300c <_kill>
 800a3a6:	1c43      	adds	r3, r0, #1
 800a3a8:	d102      	bne.n	800a3b0 <_kill_r+0x1c>
 800a3aa:	682b      	ldr	r3, [r5, #0]
 800a3ac:	b103      	cbz	r3, 800a3b0 <_kill_r+0x1c>
 800a3ae:	6023      	str	r3, [r4, #0]
 800a3b0:	bd38      	pop	{r3, r4, r5, pc}
 800a3b2:	bf00      	nop
 800a3b4:	20000540 	.word	0x20000540

0800a3b8 <_getpid_r>:
 800a3b8:	f7f8 be20 	b.w	8002ffc <_getpid>

0800a3bc <__swhatbuf_r>:
 800a3bc:	b570      	push	{r4, r5, r6, lr}
 800a3be:	460c      	mov	r4, r1
 800a3c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3c4:	2900      	cmp	r1, #0
 800a3c6:	b096      	sub	sp, #88	; 0x58
 800a3c8:	4615      	mov	r5, r2
 800a3ca:	461e      	mov	r6, r3
 800a3cc:	da0d      	bge.n	800a3ea <__swhatbuf_r+0x2e>
 800a3ce:	89a3      	ldrh	r3, [r4, #12]
 800a3d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a3d4:	f04f 0100 	mov.w	r1, #0
 800a3d8:	bf0c      	ite	eq
 800a3da:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a3de:	2340      	movne	r3, #64	; 0x40
 800a3e0:	2000      	movs	r0, #0
 800a3e2:	6031      	str	r1, [r6, #0]
 800a3e4:	602b      	str	r3, [r5, #0]
 800a3e6:	b016      	add	sp, #88	; 0x58
 800a3e8:	bd70      	pop	{r4, r5, r6, pc}
 800a3ea:	466a      	mov	r2, sp
 800a3ec:	f000 f848 	bl	800a480 <_fstat_r>
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	dbec      	blt.n	800a3ce <__swhatbuf_r+0x12>
 800a3f4:	9901      	ldr	r1, [sp, #4]
 800a3f6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a3fa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a3fe:	4259      	negs	r1, r3
 800a400:	4159      	adcs	r1, r3
 800a402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a406:	e7eb      	b.n	800a3e0 <__swhatbuf_r+0x24>

0800a408 <__smakebuf_r>:
 800a408:	898b      	ldrh	r3, [r1, #12]
 800a40a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a40c:	079d      	lsls	r5, r3, #30
 800a40e:	4606      	mov	r6, r0
 800a410:	460c      	mov	r4, r1
 800a412:	d507      	bpl.n	800a424 <__smakebuf_r+0x1c>
 800a414:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a418:	6023      	str	r3, [r4, #0]
 800a41a:	6123      	str	r3, [r4, #16]
 800a41c:	2301      	movs	r3, #1
 800a41e:	6163      	str	r3, [r4, #20]
 800a420:	b002      	add	sp, #8
 800a422:	bd70      	pop	{r4, r5, r6, pc}
 800a424:	ab01      	add	r3, sp, #4
 800a426:	466a      	mov	r2, sp
 800a428:	f7ff ffc8 	bl	800a3bc <__swhatbuf_r>
 800a42c:	9900      	ldr	r1, [sp, #0]
 800a42e:	4605      	mov	r5, r0
 800a430:	4630      	mov	r0, r6
 800a432:	f7fe fecb 	bl	80091cc <_malloc_r>
 800a436:	b948      	cbnz	r0, 800a44c <__smakebuf_r+0x44>
 800a438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a43c:	059a      	lsls	r2, r3, #22
 800a43e:	d4ef      	bmi.n	800a420 <__smakebuf_r+0x18>
 800a440:	f023 0303 	bic.w	r3, r3, #3
 800a444:	f043 0302 	orr.w	r3, r3, #2
 800a448:	81a3      	strh	r3, [r4, #12]
 800a44a:	e7e3      	b.n	800a414 <__smakebuf_r+0xc>
 800a44c:	89a3      	ldrh	r3, [r4, #12]
 800a44e:	6020      	str	r0, [r4, #0]
 800a450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a454:	81a3      	strh	r3, [r4, #12]
 800a456:	9b00      	ldr	r3, [sp, #0]
 800a458:	6163      	str	r3, [r4, #20]
 800a45a:	9b01      	ldr	r3, [sp, #4]
 800a45c:	6120      	str	r0, [r4, #16]
 800a45e:	b15b      	cbz	r3, 800a478 <__smakebuf_r+0x70>
 800a460:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a464:	4630      	mov	r0, r6
 800a466:	f000 f81d 	bl	800a4a4 <_isatty_r>
 800a46a:	b128      	cbz	r0, 800a478 <__smakebuf_r+0x70>
 800a46c:	89a3      	ldrh	r3, [r4, #12]
 800a46e:	f023 0303 	bic.w	r3, r3, #3
 800a472:	f043 0301 	orr.w	r3, r3, #1
 800a476:	81a3      	strh	r3, [r4, #12]
 800a478:	89a3      	ldrh	r3, [r4, #12]
 800a47a:	431d      	orrs	r5, r3
 800a47c:	81a5      	strh	r5, [r4, #12]
 800a47e:	e7cf      	b.n	800a420 <__smakebuf_r+0x18>

0800a480 <_fstat_r>:
 800a480:	b538      	push	{r3, r4, r5, lr}
 800a482:	4d07      	ldr	r5, [pc, #28]	; (800a4a0 <_fstat_r+0x20>)
 800a484:	2300      	movs	r3, #0
 800a486:	4604      	mov	r4, r0
 800a488:	4608      	mov	r0, r1
 800a48a:	4611      	mov	r1, r2
 800a48c:	602b      	str	r3, [r5, #0]
 800a48e:	f7f8 fe1c 	bl	80030ca <_fstat>
 800a492:	1c43      	adds	r3, r0, #1
 800a494:	d102      	bne.n	800a49c <_fstat_r+0x1c>
 800a496:	682b      	ldr	r3, [r5, #0]
 800a498:	b103      	cbz	r3, 800a49c <_fstat_r+0x1c>
 800a49a:	6023      	str	r3, [r4, #0]
 800a49c:	bd38      	pop	{r3, r4, r5, pc}
 800a49e:	bf00      	nop
 800a4a0:	20000540 	.word	0x20000540

0800a4a4 <_isatty_r>:
 800a4a4:	b538      	push	{r3, r4, r5, lr}
 800a4a6:	4d06      	ldr	r5, [pc, #24]	; (800a4c0 <_isatty_r+0x1c>)
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	4604      	mov	r4, r0
 800a4ac:	4608      	mov	r0, r1
 800a4ae:	602b      	str	r3, [r5, #0]
 800a4b0:	f7f8 fe1b 	bl	80030ea <_isatty>
 800a4b4:	1c43      	adds	r3, r0, #1
 800a4b6:	d102      	bne.n	800a4be <_isatty_r+0x1a>
 800a4b8:	682b      	ldr	r3, [r5, #0]
 800a4ba:	b103      	cbz	r3, 800a4be <_isatty_r+0x1a>
 800a4bc:	6023      	str	r3, [r4, #0]
 800a4be:	bd38      	pop	{r3, r4, r5, pc}
 800a4c0:	20000540 	.word	0x20000540

0800a4c4 <atan2f>:
 800a4c4:	f000 b886 	b.w	800a5d4 <__ieee754_atan2f>

0800a4c8 <powf>:
 800a4c8:	b508      	push	{r3, lr}
 800a4ca:	ed2d 8b04 	vpush	{d8-d9}
 800a4ce:	eeb0 8a60 	vmov.f32	s16, s1
 800a4d2:	eeb0 9a40 	vmov.f32	s18, s0
 800a4d6:	f000 f91d 	bl	800a714 <__ieee754_powf>
 800a4da:	eeb4 8a48 	vcmp.f32	s16, s16
 800a4de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4e2:	eef0 8a40 	vmov.f32	s17, s0
 800a4e6:	d63e      	bvs.n	800a566 <powf+0x9e>
 800a4e8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800a4ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4f0:	d112      	bne.n	800a518 <powf+0x50>
 800a4f2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4fa:	d039      	beq.n	800a570 <powf+0xa8>
 800a4fc:	eeb0 0a48 	vmov.f32	s0, s16
 800a500:	f000 f858 	bl	800a5b4 <finitef>
 800a504:	b378      	cbz	r0, 800a566 <powf+0x9e>
 800a506:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a50a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a50e:	d52a      	bpl.n	800a566 <powf+0x9e>
 800a510:	f7fd ff32 	bl	8008378 <__errno>
 800a514:	2322      	movs	r3, #34	; 0x22
 800a516:	e014      	b.n	800a542 <powf+0x7a>
 800a518:	f000 f84c 	bl	800a5b4 <finitef>
 800a51c:	b998      	cbnz	r0, 800a546 <powf+0x7e>
 800a51e:	eeb0 0a49 	vmov.f32	s0, s18
 800a522:	f000 f847 	bl	800a5b4 <finitef>
 800a526:	b170      	cbz	r0, 800a546 <powf+0x7e>
 800a528:	eeb0 0a48 	vmov.f32	s0, s16
 800a52c:	f000 f842 	bl	800a5b4 <finitef>
 800a530:	b148      	cbz	r0, 800a546 <powf+0x7e>
 800a532:	eef4 8a68 	vcmp.f32	s17, s17
 800a536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a53a:	d7e9      	bvc.n	800a510 <powf+0x48>
 800a53c:	f7fd ff1c 	bl	8008378 <__errno>
 800a540:	2321      	movs	r3, #33	; 0x21
 800a542:	6003      	str	r3, [r0, #0]
 800a544:	e00f      	b.n	800a566 <powf+0x9e>
 800a546:	eef5 8a40 	vcmp.f32	s17, #0.0
 800a54a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a54e:	d10a      	bne.n	800a566 <powf+0x9e>
 800a550:	eeb0 0a49 	vmov.f32	s0, s18
 800a554:	f000 f82e 	bl	800a5b4 <finitef>
 800a558:	b128      	cbz	r0, 800a566 <powf+0x9e>
 800a55a:	eeb0 0a48 	vmov.f32	s0, s16
 800a55e:	f000 f829 	bl	800a5b4 <finitef>
 800a562:	2800      	cmp	r0, #0
 800a564:	d1d4      	bne.n	800a510 <powf+0x48>
 800a566:	eeb0 0a68 	vmov.f32	s0, s17
 800a56a:	ecbd 8b04 	vpop	{d8-d9}
 800a56e:	bd08      	pop	{r3, pc}
 800a570:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800a574:	e7f7      	b.n	800a566 <powf+0x9e>
	...

0800a578 <sqrtf>:
 800a578:	b508      	push	{r3, lr}
 800a57a:	ed2d 8b02 	vpush	{d8}
 800a57e:	eeb0 8a40 	vmov.f32	s16, s0
 800a582:	f000 f824 	bl	800a5ce <__ieee754_sqrtf>
 800a586:	eeb4 8a48 	vcmp.f32	s16, s16
 800a58a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a58e:	d60c      	bvs.n	800a5aa <sqrtf+0x32>
 800a590:	eddf 8a07 	vldr	s17, [pc, #28]	; 800a5b0 <sqrtf+0x38>
 800a594:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a59c:	d505      	bpl.n	800a5aa <sqrtf+0x32>
 800a59e:	f7fd feeb 	bl	8008378 <__errno>
 800a5a2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a5a6:	2321      	movs	r3, #33	; 0x21
 800a5a8:	6003      	str	r3, [r0, #0]
 800a5aa:	ecbd 8b02 	vpop	{d8}
 800a5ae:	bd08      	pop	{r3, pc}
 800a5b0:	00000000 	.word	0x00000000

0800a5b4 <finitef>:
 800a5b4:	b082      	sub	sp, #8
 800a5b6:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a5ba:	9801      	ldr	r0, [sp, #4]
 800a5bc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a5c0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800a5c4:	bfac      	ite	ge
 800a5c6:	2000      	movge	r0, #0
 800a5c8:	2001      	movlt	r0, #1
 800a5ca:	b002      	add	sp, #8
 800a5cc:	4770      	bx	lr

0800a5ce <__ieee754_sqrtf>:
 800a5ce:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a5d2:	4770      	bx	lr

0800a5d4 <__ieee754_atan2f>:
 800a5d4:	ee10 2a90 	vmov	r2, s1
 800a5d8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a5dc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a5e0:	b510      	push	{r4, lr}
 800a5e2:	eef0 7a40 	vmov.f32	s15, s0
 800a5e6:	dc06      	bgt.n	800a5f6 <__ieee754_atan2f+0x22>
 800a5e8:	ee10 0a10 	vmov	r0, s0
 800a5ec:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a5f0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a5f4:	dd04      	ble.n	800a600 <__ieee754_atan2f+0x2c>
 800a5f6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a5fa:	eeb0 0a67 	vmov.f32	s0, s15
 800a5fe:	bd10      	pop	{r4, pc}
 800a600:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800a604:	d103      	bne.n	800a60e <__ieee754_atan2f+0x3a>
 800a606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a60a:	f000 bb4d 	b.w	800aca8 <atanf>
 800a60e:	1794      	asrs	r4, r2, #30
 800a610:	f004 0402 	and.w	r4, r4, #2
 800a614:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a618:	b943      	cbnz	r3, 800a62c <__ieee754_atan2f+0x58>
 800a61a:	2c02      	cmp	r4, #2
 800a61c:	d05e      	beq.n	800a6dc <__ieee754_atan2f+0x108>
 800a61e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a6f0 <__ieee754_atan2f+0x11c>
 800a622:	2c03      	cmp	r4, #3
 800a624:	bf08      	it	eq
 800a626:	eef0 7a47 	vmoveq.f32	s15, s14
 800a62a:	e7e6      	b.n	800a5fa <__ieee754_atan2f+0x26>
 800a62c:	b941      	cbnz	r1, 800a640 <__ieee754_atan2f+0x6c>
 800a62e:	eddf 7a31 	vldr	s15, [pc, #196]	; 800a6f4 <__ieee754_atan2f+0x120>
 800a632:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800a6f8 <__ieee754_atan2f+0x124>
 800a636:	2800      	cmp	r0, #0
 800a638:	bfb8      	it	lt
 800a63a:	eef0 7a47 	vmovlt.f32	s15, s14
 800a63e:	e7dc      	b.n	800a5fa <__ieee754_atan2f+0x26>
 800a640:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a644:	d110      	bne.n	800a668 <__ieee754_atan2f+0x94>
 800a646:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a64a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a64e:	d107      	bne.n	800a660 <__ieee754_atan2f+0x8c>
 800a650:	2c02      	cmp	r4, #2
 800a652:	d846      	bhi.n	800a6e2 <__ieee754_atan2f+0x10e>
 800a654:	4b29      	ldr	r3, [pc, #164]	; (800a6fc <__ieee754_atan2f+0x128>)
 800a656:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a65a:	edd3 7a00 	vldr	s15, [r3]
 800a65e:	e7cc      	b.n	800a5fa <__ieee754_atan2f+0x26>
 800a660:	2c02      	cmp	r4, #2
 800a662:	d841      	bhi.n	800a6e8 <__ieee754_atan2f+0x114>
 800a664:	4b26      	ldr	r3, [pc, #152]	; (800a700 <__ieee754_atan2f+0x12c>)
 800a666:	e7f6      	b.n	800a656 <__ieee754_atan2f+0x82>
 800a668:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a66c:	d0df      	beq.n	800a62e <__ieee754_atan2f+0x5a>
 800a66e:	1a5b      	subs	r3, r3, r1
 800a670:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800a674:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800a678:	da1a      	bge.n	800a6b0 <__ieee754_atan2f+0xdc>
 800a67a:	2a00      	cmp	r2, #0
 800a67c:	da01      	bge.n	800a682 <__ieee754_atan2f+0xae>
 800a67e:	313c      	adds	r1, #60	; 0x3c
 800a680:	db19      	blt.n	800a6b6 <__ieee754_atan2f+0xe2>
 800a682:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800a686:	f000 fbe3 	bl	800ae50 <fabsf>
 800a68a:	f000 fb0d 	bl	800aca8 <atanf>
 800a68e:	eef0 7a40 	vmov.f32	s15, s0
 800a692:	2c01      	cmp	r4, #1
 800a694:	d012      	beq.n	800a6bc <__ieee754_atan2f+0xe8>
 800a696:	2c02      	cmp	r4, #2
 800a698:	d017      	beq.n	800a6ca <__ieee754_atan2f+0xf6>
 800a69a:	2c00      	cmp	r4, #0
 800a69c:	d0ad      	beq.n	800a5fa <__ieee754_atan2f+0x26>
 800a69e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800a704 <__ieee754_atan2f+0x130>
 800a6a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a6a6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800a708 <__ieee754_atan2f+0x134>
 800a6aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a6ae:	e7a4      	b.n	800a5fa <__ieee754_atan2f+0x26>
 800a6b0:	eddf 7a10 	vldr	s15, [pc, #64]	; 800a6f4 <__ieee754_atan2f+0x120>
 800a6b4:	e7ed      	b.n	800a692 <__ieee754_atan2f+0xbe>
 800a6b6:	eddf 7a15 	vldr	s15, [pc, #84]	; 800a70c <__ieee754_atan2f+0x138>
 800a6ba:	e7ea      	b.n	800a692 <__ieee754_atan2f+0xbe>
 800a6bc:	ee17 3a90 	vmov	r3, s15
 800a6c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a6c4:	ee07 3a90 	vmov	s15, r3
 800a6c8:	e797      	b.n	800a5fa <__ieee754_atan2f+0x26>
 800a6ca:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800a704 <__ieee754_atan2f+0x130>
 800a6ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a6d2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800a708 <__ieee754_atan2f+0x134>
 800a6d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6da:	e78e      	b.n	800a5fa <__ieee754_atan2f+0x26>
 800a6dc:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800a708 <__ieee754_atan2f+0x134>
 800a6e0:	e78b      	b.n	800a5fa <__ieee754_atan2f+0x26>
 800a6e2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800a710 <__ieee754_atan2f+0x13c>
 800a6e6:	e788      	b.n	800a5fa <__ieee754_atan2f+0x26>
 800a6e8:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a70c <__ieee754_atan2f+0x138>
 800a6ec:	e785      	b.n	800a5fa <__ieee754_atan2f+0x26>
 800a6ee:	bf00      	nop
 800a6f0:	c0490fdb 	.word	0xc0490fdb
 800a6f4:	3fc90fdb 	.word	0x3fc90fdb
 800a6f8:	bfc90fdb 	.word	0xbfc90fdb
 800a6fc:	0800b344 	.word	0x0800b344
 800a700:	0800b350 	.word	0x0800b350
 800a704:	33bbbd2e 	.word	0x33bbbd2e
 800a708:	40490fdb 	.word	0x40490fdb
 800a70c:	00000000 	.word	0x00000000
 800a710:	3f490fdb 	.word	0x3f490fdb

0800a714 <__ieee754_powf>:
 800a714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a718:	ee10 4a90 	vmov	r4, s1
 800a71c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800a720:	ed2d 8b02 	vpush	{d8}
 800a724:	ee10 7a10 	vmov	r7, s0
 800a728:	eeb0 8a40 	vmov.f32	s16, s0
 800a72c:	eef0 8a60 	vmov.f32	s17, s1
 800a730:	d10c      	bne.n	800a74c <__ieee754_powf+0x38>
 800a732:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 800a736:	007f      	lsls	r7, r7, #1
 800a738:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 800a73c:	f240 8292 	bls.w	800ac64 <__ieee754_powf+0x550>
 800a740:	ee38 0a28 	vadd.f32	s0, s16, s17
 800a744:	ecbd 8b02 	vpop	{d8}
 800a748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a74c:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 800a750:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800a754:	dcf4      	bgt.n	800a740 <__ieee754_powf+0x2c>
 800a756:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800a75a:	dd08      	ble.n	800a76e <__ieee754_powf+0x5a>
 800a75c:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800a760:	d1ee      	bne.n	800a740 <__ieee754_powf+0x2c>
 800a762:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800a766:	0064      	lsls	r4, r4, #1
 800a768:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800a76c:	e7e6      	b.n	800a73c <__ieee754_powf+0x28>
 800a76e:	2f00      	cmp	r7, #0
 800a770:	da20      	bge.n	800a7b4 <__ieee754_powf+0xa0>
 800a772:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800a776:	da2d      	bge.n	800a7d4 <__ieee754_powf+0xc0>
 800a778:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800a77c:	f2c0 827b 	blt.w	800ac76 <__ieee754_powf+0x562>
 800a780:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800a784:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800a788:	fa48 f603 	asr.w	r6, r8, r3
 800a78c:	fa06 f303 	lsl.w	r3, r6, r3
 800a790:	4543      	cmp	r3, r8
 800a792:	f040 8270 	bne.w	800ac76 <__ieee754_powf+0x562>
 800a796:	f006 0601 	and.w	r6, r6, #1
 800a79a:	f1c6 0602 	rsb	r6, r6, #2
 800a79e:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800a7a2:	d11f      	bne.n	800a7e4 <__ieee754_powf+0xd0>
 800a7a4:	2c00      	cmp	r4, #0
 800a7a6:	f280 8263 	bge.w	800ac70 <__ieee754_powf+0x55c>
 800a7aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a7ae:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800a7b2:	e7c7      	b.n	800a744 <__ieee754_powf+0x30>
 800a7b4:	2600      	movs	r6, #0
 800a7b6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800a7ba:	d1f0      	bne.n	800a79e <__ieee754_powf+0x8a>
 800a7bc:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800a7c0:	f000 8250 	beq.w	800ac64 <__ieee754_powf+0x550>
 800a7c4:	dd08      	ble.n	800a7d8 <__ieee754_powf+0xc4>
 800a7c6:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800aacc <__ieee754_powf+0x3b8>
 800a7ca:	2c00      	cmp	r4, #0
 800a7cc:	bfa8      	it	ge
 800a7ce:	eeb0 0a68 	vmovge.f32	s0, s17
 800a7d2:	e7b7      	b.n	800a744 <__ieee754_powf+0x30>
 800a7d4:	2602      	movs	r6, #2
 800a7d6:	e7ee      	b.n	800a7b6 <__ieee754_powf+0xa2>
 800a7d8:	2c00      	cmp	r4, #0
 800a7da:	f280 8246 	bge.w	800ac6a <__ieee754_powf+0x556>
 800a7de:	eeb1 0a68 	vneg.f32	s0, s17
 800a7e2:	e7af      	b.n	800a744 <__ieee754_powf+0x30>
 800a7e4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800a7e8:	d102      	bne.n	800a7f0 <__ieee754_powf+0xdc>
 800a7ea:	ee28 0a08 	vmul.f32	s0, s16, s16
 800a7ee:	e7a9      	b.n	800a744 <__ieee754_powf+0x30>
 800a7f0:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800a7f4:	eeb0 0a48 	vmov.f32	s0, s16
 800a7f8:	d107      	bne.n	800a80a <__ieee754_powf+0xf6>
 800a7fa:	2f00      	cmp	r7, #0
 800a7fc:	db05      	blt.n	800a80a <__ieee754_powf+0xf6>
 800a7fe:	ecbd 8b02 	vpop	{d8}
 800a802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a806:	f7ff bee2 	b.w	800a5ce <__ieee754_sqrtf>
 800a80a:	f000 fb21 	bl	800ae50 <fabsf>
 800a80e:	b125      	cbz	r5, 800a81a <__ieee754_powf+0x106>
 800a810:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 800a814:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800a818:	d115      	bne.n	800a846 <__ieee754_powf+0x132>
 800a81a:	2c00      	cmp	r4, #0
 800a81c:	bfbc      	itt	lt
 800a81e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800a822:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800a826:	2f00      	cmp	r7, #0
 800a828:	da8c      	bge.n	800a744 <__ieee754_powf+0x30>
 800a82a:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800a82e:	4335      	orrs	r5, r6
 800a830:	d104      	bne.n	800a83c <__ieee754_powf+0x128>
 800a832:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a836:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a83a:	e783      	b.n	800a744 <__ieee754_powf+0x30>
 800a83c:	2e01      	cmp	r6, #1
 800a83e:	d181      	bne.n	800a744 <__ieee754_powf+0x30>
 800a840:	eeb1 0a40 	vneg.f32	s0, s0
 800a844:	e77e      	b.n	800a744 <__ieee754_powf+0x30>
 800a846:	0ff8      	lsrs	r0, r7, #31
 800a848:	3801      	subs	r0, #1
 800a84a:	ea56 0300 	orrs.w	r3, r6, r0
 800a84e:	d104      	bne.n	800a85a <__ieee754_powf+0x146>
 800a850:	ee38 8a48 	vsub.f32	s16, s16, s16
 800a854:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800a858:	e774      	b.n	800a744 <__ieee754_powf+0x30>
 800a85a:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800a85e:	dd73      	ble.n	800a948 <__ieee754_powf+0x234>
 800a860:	4b9b      	ldr	r3, [pc, #620]	; (800aad0 <__ieee754_powf+0x3bc>)
 800a862:	429d      	cmp	r5, r3
 800a864:	dc08      	bgt.n	800a878 <__ieee754_powf+0x164>
 800a866:	2c00      	cmp	r4, #0
 800a868:	da0b      	bge.n	800a882 <__ieee754_powf+0x16e>
 800a86a:	2000      	movs	r0, #0
 800a86c:	ecbd 8b02 	vpop	{d8}
 800a870:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a874:	f000 bb76 	b.w	800af64 <__math_oflowf>
 800a878:	4b96      	ldr	r3, [pc, #600]	; (800aad4 <__ieee754_powf+0x3c0>)
 800a87a:	429d      	cmp	r5, r3
 800a87c:	dd08      	ble.n	800a890 <__ieee754_powf+0x17c>
 800a87e:	2c00      	cmp	r4, #0
 800a880:	dcf3      	bgt.n	800a86a <__ieee754_powf+0x156>
 800a882:	2000      	movs	r0, #0
 800a884:	ecbd 8b02 	vpop	{d8}
 800a888:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a88c:	f000 bb64 	b.w	800af58 <__math_uflowf>
 800a890:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a894:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a898:	eddf 6a8f 	vldr	s13, [pc, #572]	; 800aad8 <__ieee754_powf+0x3c4>
 800a89c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800a8a0:	eee0 6a67 	vfms.f32	s13, s0, s15
 800a8a4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a8a8:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800a8ac:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a8b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a8b4:	eddf 7a89 	vldr	s15, [pc, #548]	; 800aadc <__ieee754_powf+0x3c8>
 800a8b8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800a8bc:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800aae0 <__ieee754_powf+0x3cc>
 800a8c0:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a8c4:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800aae4 <__ieee754_powf+0x3d0>
 800a8c8:	eef0 6a67 	vmov.f32	s13, s15
 800a8cc:	eee0 6a07 	vfma.f32	s13, s0, s14
 800a8d0:	ee16 3a90 	vmov	r3, s13
 800a8d4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a8d8:	f023 030f 	bic.w	r3, r3, #15
 800a8dc:	ee06 3a90 	vmov	s13, r3
 800a8e0:	eee0 6a47 	vfms.f32	s13, s0, s14
 800a8e4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a8e8:	3e01      	subs	r6, #1
 800a8ea:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800a8ee:	4306      	orrs	r6, r0
 800a8f0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a8f4:	f024 040f 	bic.w	r4, r4, #15
 800a8f8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800a8fc:	bf08      	it	eq
 800a8fe:	eeb0 8a47 	vmoveq.f32	s16, s14
 800a902:	ee07 4a10 	vmov	s14, r4
 800a906:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800a90a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800a90e:	ee07 3a90 	vmov	s15, r3
 800a912:	eee7 0a27 	vfma.f32	s1, s14, s15
 800a916:	ee07 4a10 	vmov	s14, r4
 800a91a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a91e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800a922:	ee17 1a10 	vmov	r1, s14
 800a926:	2900      	cmp	r1, #0
 800a928:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a92c:	f340 817c 	ble.w	800ac28 <__ieee754_powf+0x514>
 800a930:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800a934:	f340 80f8 	ble.w	800ab28 <__ieee754_powf+0x414>
 800a938:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a93c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a940:	bf4c      	ite	mi
 800a942:	2001      	movmi	r0, #1
 800a944:	2000      	movpl	r0, #0
 800a946:	e791      	b.n	800a86c <__ieee754_powf+0x158>
 800a948:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 800a94c:	bf01      	itttt	eq
 800a94e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800aae8 <__ieee754_powf+0x3d4>
 800a952:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800a956:	f06f 0317 	mvneq.w	r3, #23
 800a95a:	ee17 5a90 	vmoveq	r5, s15
 800a95e:	ea4f 52e5 	mov.w	r2, r5, asr #23
 800a962:	bf18      	it	ne
 800a964:	2300      	movne	r3, #0
 800a966:	3a7f      	subs	r2, #127	; 0x7f
 800a968:	441a      	add	r2, r3
 800a96a:	4b60      	ldr	r3, [pc, #384]	; (800aaec <__ieee754_powf+0x3d8>)
 800a96c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800a970:	429d      	cmp	r5, r3
 800a972:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800a976:	dd06      	ble.n	800a986 <__ieee754_powf+0x272>
 800a978:	4b5d      	ldr	r3, [pc, #372]	; (800aaf0 <__ieee754_powf+0x3dc>)
 800a97a:	429d      	cmp	r5, r3
 800a97c:	f340 80a4 	ble.w	800aac8 <__ieee754_powf+0x3b4>
 800a980:	3201      	adds	r2, #1
 800a982:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800a986:	2500      	movs	r5, #0
 800a988:	4b5a      	ldr	r3, [pc, #360]	; (800aaf4 <__ieee754_powf+0x3e0>)
 800a98a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800a98e:	ee07 1a10 	vmov	s14, r1
 800a992:	edd3 5a00 	vldr	s11, [r3]
 800a996:	4b58      	ldr	r3, [pc, #352]	; (800aaf8 <__ieee754_powf+0x3e4>)
 800a998:	ee75 7a87 	vadd.f32	s15, s11, s14
 800a99c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9a0:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800a9a4:	1049      	asrs	r1, r1, #1
 800a9a6:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800a9aa:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800a9ae:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800a9b2:	ee37 6a65 	vsub.f32	s12, s14, s11
 800a9b6:	ee07 1a90 	vmov	s15, r1
 800a9ba:	ee26 5a24 	vmul.f32	s10, s12, s9
 800a9be:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800a9c2:	ee15 7a10 	vmov	r7, s10
 800a9c6:	401f      	ands	r7, r3
 800a9c8:	ee06 7a90 	vmov	s13, r7
 800a9cc:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800a9d0:	ee37 7a65 	vsub.f32	s14, s14, s11
 800a9d4:	ee65 7a05 	vmul.f32	s15, s10, s10
 800a9d8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800a9dc:	eddf 5a47 	vldr	s11, [pc, #284]	; 800aafc <__ieee754_powf+0x3e8>
 800a9e0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800ab00 <__ieee754_powf+0x3ec>
 800a9e4:	eee7 5a87 	vfma.f32	s11, s15, s14
 800a9e8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800ab04 <__ieee754_powf+0x3f0>
 800a9ec:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a9f0:	eddf 5a39 	vldr	s11, [pc, #228]	; 800aad8 <__ieee754_powf+0x3c4>
 800a9f4:	eee7 5a27 	vfma.f32	s11, s14, s15
 800a9f8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800ab08 <__ieee754_powf+0x3f4>
 800a9fc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800aa00:	eddf 5a42 	vldr	s11, [pc, #264]	; 800ab0c <__ieee754_powf+0x3f8>
 800aa04:	ee26 6a24 	vmul.f32	s12, s12, s9
 800aa08:	eee7 5a27 	vfma.f32	s11, s14, s15
 800aa0c:	ee35 7a26 	vadd.f32	s14, s10, s13
 800aa10:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800aa14:	ee27 7a06 	vmul.f32	s14, s14, s12
 800aa18:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800aa1c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800aa20:	eef0 5a67 	vmov.f32	s11, s15
 800aa24:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800aa28:	ee75 5a87 	vadd.f32	s11, s11, s14
 800aa2c:	ee15 1a90 	vmov	r1, s11
 800aa30:	4019      	ands	r1, r3
 800aa32:	ee05 1a90 	vmov	s11, r1
 800aa36:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800aa3a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800aa3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa42:	ee67 7a85 	vmul.f32	s15, s15, s10
 800aa46:	eee6 7a25 	vfma.f32	s15, s12, s11
 800aa4a:	eeb0 6a67 	vmov.f32	s12, s15
 800aa4e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800aa52:	ee16 1a10 	vmov	r1, s12
 800aa56:	4019      	ands	r1, r3
 800aa58:	ee07 1a10 	vmov	s14, r1
 800aa5c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800aa60:	ee06 1a10 	vmov	s12, r1
 800aa64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aa68:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800ab10 <__ieee754_powf+0x3fc>
 800aa6c:	4929      	ldr	r1, [pc, #164]	; (800ab14 <__ieee754_powf+0x400>)
 800aa6e:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800ab18 <__ieee754_powf+0x404>
 800aa72:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aa76:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800ab1c <__ieee754_powf+0x408>
 800aa7a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800aa7e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800aa82:	ed91 7a00 	vldr	s14, [r1]
 800aa86:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa8a:	ee07 2a10 	vmov	s14, r2
 800aa8e:	eef0 6a67 	vmov.f32	s13, s15
 800aa92:	4a23      	ldr	r2, [pc, #140]	; (800ab20 <__ieee754_powf+0x40c>)
 800aa94:	eee6 6a25 	vfma.f32	s13, s12, s11
 800aa98:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800aa9c:	ed92 5a00 	vldr	s10, [r2]
 800aaa0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800aaa4:	ee76 6a85 	vadd.f32	s13, s13, s10
 800aaa8:	ee76 6a87 	vadd.f32	s13, s13, s14
 800aaac:	ee16 2a90 	vmov	r2, s13
 800aab0:	4013      	ands	r3, r2
 800aab2:	ee06 3a90 	vmov	s13, r3
 800aab6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800aaba:	ee37 7a45 	vsub.f32	s14, s14, s10
 800aabe:	eea6 7a65 	vfms.f32	s14, s12, s11
 800aac2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aac6:	e70f      	b.n	800a8e8 <__ieee754_powf+0x1d4>
 800aac8:	2501      	movs	r5, #1
 800aaca:	e75d      	b.n	800a988 <__ieee754_powf+0x274>
 800aacc:	00000000 	.word	0x00000000
 800aad0:	3f7ffff3 	.word	0x3f7ffff3
 800aad4:	3f800007 	.word	0x3f800007
 800aad8:	3eaaaaab 	.word	0x3eaaaaab
 800aadc:	3fb8aa3b 	.word	0x3fb8aa3b
 800aae0:	36eca570 	.word	0x36eca570
 800aae4:	3fb8aa00 	.word	0x3fb8aa00
 800aae8:	4b800000 	.word	0x4b800000
 800aaec:	001cc471 	.word	0x001cc471
 800aaf0:	005db3d6 	.word	0x005db3d6
 800aaf4:	0800b35c 	.word	0x0800b35c
 800aaf8:	fffff000 	.word	0xfffff000
 800aafc:	3e6c3255 	.word	0x3e6c3255
 800ab00:	3e53f142 	.word	0x3e53f142
 800ab04:	3e8ba305 	.word	0x3e8ba305
 800ab08:	3edb6db7 	.word	0x3edb6db7
 800ab0c:	3f19999a 	.word	0x3f19999a
 800ab10:	3f76384f 	.word	0x3f76384f
 800ab14:	0800b36c 	.word	0x0800b36c
 800ab18:	3f763800 	.word	0x3f763800
 800ab1c:	369dc3a0 	.word	0x369dc3a0
 800ab20:	0800b364 	.word	0x0800b364
 800ab24:	3338aa3c 	.word	0x3338aa3c
 800ab28:	f040 8093 	bne.w	800ac52 <__ieee754_powf+0x53e>
 800ab2c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800ab24 <__ieee754_powf+0x410>
 800ab30:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ab34:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800ab38:	eef4 6ac7 	vcmpe.f32	s13, s14
 800ab3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab40:	f73f aefa 	bgt.w	800a938 <__ieee754_powf+0x224>
 800ab44:	15db      	asrs	r3, r3, #23
 800ab46:	3b7e      	subs	r3, #126	; 0x7e
 800ab48:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800ab4c:	4118      	asrs	r0, r3
 800ab4e:	4408      	add	r0, r1
 800ab50:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ab54:	4a49      	ldr	r2, [pc, #292]	; (800ac7c <__ieee754_powf+0x568>)
 800ab56:	3b7f      	subs	r3, #127	; 0x7f
 800ab58:	411a      	asrs	r2, r3
 800ab5a:	4002      	ands	r2, r0
 800ab5c:	ee07 2a10 	vmov	s14, r2
 800ab60:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800ab64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800ab68:	f1c3 0317 	rsb	r3, r3, #23
 800ab6c:	4118      	asrs	r0, r3
 800ab6e:	2900      	cmp	r1, #0
 800ab70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab74:	bfb8      	it	lt
 800ab76:	4240      	neglt	r0, r0
 800ab78:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800ab7c:	eddf 6a40 	vldr	s13, [pc, #256]	; 800ac80 <__ieee754_powf+0x56c>
 800ab80:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800ac84 <__ieee754_powf+0x570>
 800ab84:	ee17 3a10 	vmov	r3, s14
 800ab88:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ab8c:	f023 030f 	bic.w	r3, r3, #15
 800ab90:	ee07 3a10 	vmov	s14, r3
 800ab94:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab98:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ab9c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800aba0:	eddf 7a39 	vldr	s15, [pc, #228]	; 800ac88 <__ieee754_powf+0x574>
 800aba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aba8:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800abac:	eef0 6a67 	vmov.f32	s13, s15
 800abb0:	eee7 6a06 	vfma.f32	s13, s14, s12
 800abb4:	eef0 5a66 	vmov.f32	s11, s13
 800abb8:	eee7 5a46 	vfms.f32	s11, s14, s12
 800abbc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800abc0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800abc4:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800ac8c <__ieee754_powf+0x578>
 800abc8:	eddf 5a31 	vldr	s11, [pc, #196]	; 800ac90 <__ieee754_powf+0x57c>
 800abcc:	eea7 6a25 	vfma.f32	s12, s14, s11
 800abd0:	eddf 5a30 	vldr	s11, [pc, #192]	; 800ac94 <__ieee754_powf+0x580>
 800abd4:	eee6 5a07 	vfma.f32	s11, s12, s14
 800abd8:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800ac98 <__ieee754_powf+0x584>
 800abdc:	eea5 6a87 	vfma.f32	s12, s11, s14
 800abe0:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ac9c <__ieee754_powf+0x588>
 800abe4:	eee6 5a07 	vfma.f32	s11, s12, s14
 800abe8:	eeb0 6a66 	vmov.f32	s12, s13
 800abec:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800abf0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800abf4:	ee66 5a86 	vmul.f32	s11, s13, s12
 800abf8:	ee36 6a47 	vsub.f32	s12, s12, s14
 800abfc:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800ac00:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800ac04:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac08:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ac0c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ac10:	ee10 3a10 	vmov	r3, s0
 800ac14:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800ac18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac1c:	da1f      	bge.n	800ac5e <__ieee754_powf+0x54a>
 800ac1e:	f000 f91f 	bl	800ae60 <scalbnf>
 800ac22:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ac26:	e58d      	b.n	800a744 <__ieee754_powf+0x30>
 800ac28:	4a1d      	ldr	r2, [pc, #116]	; (800aca0 <__ieee754_powf+0x58c>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	dd07      	ble.n	800ac3e <__ieee754_powf+0x52a>
 800ac2e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ac32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac36:	bf4c      	ite	mi
 800ac38:	2001      	movmi	r0, #1
 800ac3a:	2000      	movpl	r0, #0
 800ac3c:	e622      	b.n	800a884 <__ieee754_powf+0x170>
 800ac3e:	d108      	bne.n	800ac52 <__ieee754_powf+0x53e>
 800ac40:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ac44:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800ac48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac4c:	f6ff af7a 	blt.w	800ab44 <__ieee754_powf+0x430>
 800ac50:	e7ed      	b.n	800ac2e <__ieee754_powf+0x51a>
 800ac52:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800ac56:	f73f af75 	bgt.w	800ab44 <__ieee754_powf+0x430>
 800ac5a:	2000      	movs	r0, #0
 800ac5c:	e78c      	b.n	800ab78 <__ieee754_powf+0x464>
 800ac5e:	ee00 3a10 	vmov	s0, r3
 800ac62:	e7de      	b.n	800ac22 <__ieee754_powf+0x50e>
 800ac64:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ac68:	e56c      	b.n	800a744 <__ieee754_powf+0x30>
 800ac6a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800aca4 <__ieee754_powf+0x590>
 800ac6e:	e569      	b.n	800a744 <__ieee754_powf+0x30>
 800ac70:	eeb0 0a48 	vmov.f32	s0, s16
 800ac74:	e566      	b.n	800a744 <__ieee754_powf+0x30>
 800ac76:	2600      	movs	r6, #0
 800ac78:	e591      	b.n	800a79e <__ieee754_powf+0x8a>
 800ac7a:	bf00      	nop
 800ac7c:	ff800000 	.word	0xff800000
 800ac80:	3f317218 	.word	0x3f317218
 800ac84:	3f317200 	.word	0x3f317200
 800ac88:	35bfbe8c 	.word	0x35bfbe8c
 800ac8c:	b5ddea0e 	.word	0xb5ddea0e
 800ac90:	3331bb4c 	.word	0x3331bb4c
 800ac94:	388ab355 	.word	0x388ab355
 800ac98:	bb360b61 	.word	0xbb360b61
 800ac9c:	3e2aaaab 	.word	0x3e2aaaab
 800aca0:	43160000 	.word	0x43160000
 800aca4:	00000000 	.word	0x00000000

0800aca8 <atanf>:
 800aca8:	b538      	push	{r3, r4, r5, lr}
 800acaa:	ee10 5a10 	vmov	r5, s0
 800acae:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800acb2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800acb6:	eef0 7a40 	vmov.f32	s15, s0
 800acba:	db10      	blt.n	800acde <atanf+0x36>
 800acbc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800acc0:	dd04      	ble.n	800accc <atanf+0x24>
 800acc2:	ee70 7a00 	vadd.f32	s15, s0, s0
 800acc6:	eeb0 0a67 	vmov.f32	s0, s15
 800acca:	bd38      	pop	{r3, r4, r5, pc}
 800accc:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800ae04 <atanf+0x15c>
 800acd0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800ae08 <atanf+0x160>
 800acd4:	2d00      	cmp	r5, #0
 800acd6:	bfd8      	it	le
 800acd8:	eef0 7a47 	vmovle.f32	s15, s14
 800acdc:	e7f3      	b.n	800acc6 <atanf+0x1e>
 800acde:	4b4b      	ldr	r3, [pc, #300]	; (800ae0c <atanf+0x164>)
 800ace0:	429c      	cmp	r4, r3
 800ace2:	dc10      	bgt.n	800ad06 <atanf+0x5e>
 800ace4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800ace8:	da0a      	bge.n	800ad00 <atanf+0x58>
 800acea:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ae10 <atanf+0x168>
 800acee:	ee30 7a07 	vadd.f32	s14, s0, s14
 800acf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acf6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800acfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acfe:	dce2      	bgt.n	800acc6 <atanf+0x1e>
 800ad00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad04:	e013      	b.n	800ad2e <atanf+0x86>
 800ad06:	f000 f8a3 	bl	800ae50 <fabsf>
 800ad0a:	4b42      	ldr	r3, [pc, #264]	; (800ae14 <atanf+0x16c>)
 800ad0c:	429c      	cmp	r4, r3
 800ad0e:	dc4f      	bgt.n	800adb0 <atanf+0x108>
 800ad10:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800ad14:	429c      	cmp	r4, r3
 800ad16:	dc41      	bgt.n	800ad9c <atanf+0xf4>
 800ad18:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800ad1c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ad20:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ad24:	2300      	movs	r3, #0
 800ad26:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ad2a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ad2e:	1c5a      	adds	r2, r3, #1
 800ad30:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ad34:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800ae18 <atanf+0x170>
 800ad38:	eddf 5a38 	vldr	s11, [pc, #224]	; 800ae1c <atanf+0x174>
 800ad3c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800ae20 <atanf+0x178>
 800ad40:	ee66 6a06 	vmul.f32	s13, s12, s12
 800ad44:	eee6 5a87 	vfma.f32	s11, s13, s14
 800ad48:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800ae24 <atanf+0x17c>
 800ad4c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ad50:	eddf 5a35 	vldr	s11, [pc, #212]	; 800ae28 <atanf+0x180>
 800ad54:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ad58:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800ae2c <atanf+0x184>
 800ad5c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ad60:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ae30 <atanf+0x188>
 800ad64:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ad68:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800ae34 <atanf+0x18c>
 800ad6c:	eea6 5a87 	vfma.f32	s10, s13, s14
 800ad70:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800ae38 <atanf+0x190>
 800ad74:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ad78:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800ae3c <atanf+0x194>
 800ad7c:	eea7 5a26 	vfma.f32	s10, s14, s13
 800ad80:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800ae40 <atanf+0x198>
 800ad84:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ad88:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ad8c:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ad90:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ad94:	d121      	bne.n	800adda <atanf+0x132>
 800ad96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ad9a:	e794      	b.n	800acc6 <atanf+0x1e>
 800ad9c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ada0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ada4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ada8:	2301      	movs	r3, #1
 800adaa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800adae:	e7be      	b.n	800ad2e <atanf+0x86>
 800adb0:	4b24      	ldr	r3, [pc, #144]	; (800ae44 <atanf+0x19c>)
 800adb2:	429c      	cmp	r4, r3
 800adb4:	dc0b      	bgt.n	800adce <atanf+0x126>
 800adb6:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800adba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adbe:	eea0 7a27 	vfma.f32	s14, s0, s15
 800adc2:	2302      	movs	r3, #2
 800adc4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800adc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adcc:	e7af      	b.n	800ad2e <atanf+0x86>
 800adce:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800add2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800add6:	2303      	movs	r3, #3
 800add8:	e7a9      	b.n	800ad2e <atanf+0x86>
 800adda:	4a1b      	ldr	r2, [pc, #108]	; (800ae48 <atanf+0x1a0>)
 800addc:	491b      	ldr	r1, [pc, #108]	; (800ae4c <atanf+0x1a4>)
 800adde:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ade2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ade6:	edd3 6a00 	vldr	s13, [r3]
 800adea:	ee37 7a66 	vsub.f32	s14, s14, s13
 800adee:	2d00      	cmp	r5, #0
 800adf0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800adf4:	edd2 7a00 	vldr	s15, [r2]
 800adf8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800adfc:	bfb8      	it	lt
 800adfe:	eef1 7a67 	vneglt.f32	s15, s15
 800ae02:	e760      	b.n	800acc6 <atanf+0x1e>
 800ae04:	3fc90fdb 	.word	0x3fc90fdb
 800ae08:	bfc90fdb 	.word	0xbfc90fdb
 800ae0c:	3edfffff 	.word	0x3edfffff
 800ae10:	7149f2ca 	.word	0x7149f2ca
 800ae14:	3f97ffff 	.word	0x3f97ffff
 800ae18:	3c8569d7 	.word	0x3c8569d7
 800ae1c:	3d4bda59 	.word	0x3d4bda59
 800ae20:	bd6ef16b 	.word	0xbd6ef16b
 800ae24:	3d886b35 	.word	0x3d886b35
 800ae28:	3dba2e6e 	.word	0x3dba2e6e
 800ae2c:	3e124925 	.word	0x3e124925
 800ae30:	3eaaaaab 	.word	0x3eaaaaab
 800ae34:	bd15a221 	.word	0xbd15a221
 800ae38:	bd9d8795 	.word	0xbd9d8795
 800ae3c:	bde38e38 	.word	0xbde38e38
 800ae40:	be4ccccd 	.word	0xbe4ccccd
 800ae44:	401bffff 	.word	0x401bffff
 800ae48:	0800b374 	.word	0x0800b374
 800ae4c:	0800b384 	.word	0x0800b384

0800ae50 <fabsf>:
 800ae50:	ee10 3a10 	vmov	r3, s0
 800ae54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae58:	ee00 3a10 	vmov	s0, r3
 800ae5c:	4770      	bx	lr
	...

0800ae60 <scalbnf>:
 800ae60:	ee10 3a10 	vmov	r3, s0
 800ae64:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800ae68:	d02b      	beq.n	800aec2 <scalbnf+0x62>
 800ae6a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ae6e:	d302      	bcc.n	800ae76 <scalbnf+0x16>
 800ae70:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ae74:	4770      	bx	lr
 800ae76:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800ae7a:	d123      	bne.n	800aec4 <scalbnf+0x64>
 800ae7c:	4b24      	ldr	r3, [pc, #144]	; (800af10 <scalbnf+0xb0>)
 800ae7e:	eddf 7a25 	vldr	s15, [pc, #148]	; 800af14 <scalbnf+0xb4>
 800ae82:	4298      	cmp	r0, r3
 800ae84:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ae88:	db17      	blt.n	800aeba <scalbnf+0x5a>
 800ae8a:	ee10 3a10 	vmov	r3, s0
 800ae8e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ae92:	3a19      	subs	r2, #25
 800ae94:	f24c 3150 	movw	r1, #50000	; 0xc350
 800ae98:	4288      	cmp	r0, r1
 800ae9a:	dd15      	ble.n	800aec8 <scalbnf+0x68>
 800ae9c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800af18 <scalbnf+0xb8>
 800aea0:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800af1c <scalbnf+0xbc>
 800aea4:	ee10 3a10 	vmov	r3, s0
 800aea8:	eeb0 7a67 	vmov.f32	s14, s15
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	bfb8      	it	lt
 800aeb0:	eef0 7a66 	vmovlt.f32	s15, s13
 800aeb4:	ee27 0a87 	vmul.f32	s0, s15, s14
 800aeb8:	4770      	bx	lr
 800aeba:	eddf 7a19 	vldr	s15, [pc, #100]	; 800af20 <scalbnf+0xc0>
 800aebe:	ee27 0a80 	vmul.f32	s0, s15, s0
 800aec2:	4770      	bx	lr
 800aec4:	0dd2      	lsrs	r2, r2, #23
 800aec6:	e7e5      	b.n	800ae94 <scalbnf+0x34>
 800aec8:	4410      	add	r0, r2
 800aeca:	28fe      	cmp	r0, #254	; 0xfe
 800aecc:	dce6      	bgt.n	800ae9c <scalbnf+0x3c>
 800aece:	2800      	cmp	r0, #0
 800aed0:	dd06      	ble.n	800aee0 <scalbnf+0x80>
 800aed2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aed6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800aeda:	ee00 3a10 	vmov	s0, r3
 800aede:	4770      	bx	lr
 800aee0:	f110 0f16 	cmn.w	r0, #22
 800aee4:	da09      	bge.n	800aefa <scalbnf+0x9a>
 800aee6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800af20 <scalbnf+0xc0>
 800aeea:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800af24 <scalbnf+0xc4>
 800aeee:	ee10 3a10 	vmov	r3, s0
 800aef2:	eeb0 7a67 	vmov.f32	s14, s15
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	e7d9      	b.n	800aeae <scalbnf+0x4e>
 800aefa:	3019      	adds	r0, #25
 800aefc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800af00:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800af04:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800af28 <scalbnf+0xc8>
 800af08:	ee07 3a90 	vmov	s15, r3
 800af0c:	e7d7      	b.n	800aebe <scalbnf+0x5e>
 800af0e:	bf00      	nop
 800af10:	ffff3cb0 	.word	0xffff3cb0
 800af14:	4c000000 	.word	0x4c000000
 800af18:	7149f2ca 	.word	0x7149f2ca
 800af1c:	f149f2ca 	.word	0xf149f2ca
 800af20:	0da24260 	.word	0x0da24260
 800af24:	8da24260 	.word	0x8da24260
 800af28:	33000000 	.word	0x33000000

0800af2c <with_errnof>:
 800af2c:	b513      	push	{r0, r1, r4, lr}
 800af2e:	4604      	mov	r4, r0
 800af30:	ed8d 0a01 	vstr	s0, [sp, #4]
 800af34:	f7fd fa20 	bl	8008378 <__errno>
 800af38:	ed9d 0a01 	vldr	s0, [sp, #4]
 800af3c:	6004      	str	r4, [r0, #0]
 800af3e:	b002      	add	sp, #8
 800af40:	bd10      	pop	{r4, pc}

0800af42 <xflowf>:
 800af42:	b130      	cbz	r0, 800af52 <xflowf+0x10>
 800af44:	eef1 7a40 	vneg.f32	s15, s0
 800af48:	ee27 0a80 	vmul.f32	s0, s15, s0
 800af4c:	2022      	movs	r0, #34	; 0x22
 800af4e:	f7ff bfed 	b.w	800af2c <with_errnof>
 800af52:	eef0 7a40 	vmov.f32	s15, s0
 800af56:	e7f7      	b.n	800af48 <xflowf+0x6>

0800af58 <__math_uflowf>:
 800af58:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800af60 <__math_uflowf+0x8>
 800af5c:	f7ff bff1 	b.w	800af42 <xflowf>
 800af60:	10000000 	.word	0x10000000

0800af64 <__math_oflowf>:
 800af64:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800af6c <__math_oflowf+0x8>
 800af68:	f7ff bfeb 	b.w	800af42 <xflowf>
 800af6c:	70000000 	.word	0x70000000

0800af70 <_init>:
 800af70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af72:	bf00      	nop
 800af74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af76:	bc08      	pop	{r3}
 800af78:	469e      	mov	lr, r3
 800af7a:	4770      	bx	lr

0800af7c <_fini>:
 800af7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af7e:	bf00      	nop
 800af80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af82:	bc08      	pop	{r3}
 800af84:	469e      	mov	lr, r3
 800af86:	4770      	bx	lr
