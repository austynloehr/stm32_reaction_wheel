
ReactionWheel_F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a118  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  0800a2a8  0800a2a8  0001a2a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6b4  0800a6b4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6b4  0800a6b4  0001a6b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6bc  0800a6bc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6bc  0800a6bc  0001a6bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6c0  0800a6c0  0001a6c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a6c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000340  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000051c  2000051c  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .comment      000000b8  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015630  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000365a  00000000  00000000  000358f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000df0  00000000  00000000  00038f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a5d  00000000  00000000  00039d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000251cd  00000000  00000000  0003a79d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017fdf  00000000  00000000  0005f96a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cb8ad  00000000  00000000  00077949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004a74  00000000  00000000  001431f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00147c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000880  00000000  00000000  00147cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000020  00000000  00000000  00148555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a290 	.word	0x0800a290

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800a290 	.word	0x0800a290

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <App_Config>:
int32_t speedReq_rpm;
float rollAngGyro_deg;
float rollAngAccel_deg;

/* Start global function definition */
Config_Bus_t App_Config(Config_HAL_Bus_t Config_HAL_Bus){
 8000f44:	b084      	sub	sp, #16
 8000f46:	b5b0      	push	{r4, r5, r7, lr}
 8000f48:	b0a8      	sub	sp, #160	; 0xa0
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000f4e:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 8000f52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Config_Bus_t Config_Bus;

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);  // Move this later
 8000f56:	2201      	movs	r2, #1
 8000f58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5c:	481c      	ldr	r0, [pc, #112]	; (8000fd0 <App_Config+0x8c>)
 8000f5e:	f003 fb63 	bl	8004628 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000f62:	20c8      	movs	r0, #200	; 0xc8
 8000f64:	f002 f91a 	bl	800319c <HAL_Delay>

	Config_Bus.Config_HAL_Bus = Config_HAL_Bus;
 8000f68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f6c:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8000f70:	224c      	movs	r2, #76	; 0x4c
 8000f72:	4618      	mov	r0, r3
 8000f74:	f006 fbbc 	bl	80076f0 <memcpy>
	Config_Bus.Config_MPU6050_Bus = Config_MPU6050(Config_HAL_Bus.hi2c);
 8000f78:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 f8c5 	bl	8001110 <Config_MPU6050>
 8000f86:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8000f8a:	463d      	mov	r5, r7
 8000f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f94:	682b      	ldr	r3, [r5, #0]
 8000f96:	6023      	str	r3, [r4, #0]

	Config_DSP();
 8000f98:	f000 f8a0 	bl	80010dc <Config_DSP>
	Config_VESC(Config_HAL_Bus.hcan);
 8000f9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 facf 	bl	8001544 <Config_VESC>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fac:	4808      	ldr	r0, [pc, #32]	; (8000fd0 <App_Config+0x8c>)
 8000fae:	f003 fb3b 	bl	8004628 <HAL_GPIO_WritePin>
	return Config_Bus;
 8000fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fba:	2270      	movs	r2, #112	; 0x70
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f006 fb97 	bl	80076f0 <memcpy>
}
 8000fc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000fc4:	37a0      	adds	r7, #160	; 0xa0
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000fcc:	b004      	add	sp, #16
 8000fce:	4770      	bx	lr
 8000fd0:	40020c00 	.word	0x40020c00

08000fd4 <App_Main>:

void App_Main(Config_Bus_t Config_Bus){
 8000fd4:	b084      	sub	sp, #16
 8000fd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd8:	b0b9      	sub	sp, #228	; 0xe4
 8000fda:	af1c      	add	r7, sp, #112	; 0x70
 8000fdc:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8000fe0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HI_Bus_t HI_Bus;
	IP_Bus_t IP_Bus;
	CT_Bus_t CT_Bus;
	OP_Bus_t OP_Bus;

	HI_Bus = IO_HardwareInputs(Config_Bus);
 8000fe4:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8000fe8:	4668      	mov	r0, sp
 8000fea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000fee:	2264      	movs	r2, #100	; 0x64
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f006 fb7d 	bl	80076f0 <memcpy>
 8000ff6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ffa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ffc:	4620      	mov	r0, r4
 8000ffe:	f000 ffe7 	bl	8001fd0 <IO_HardwareInputs>
	IP_Bus = PR_InputProcessing(Config_Bus, HI_Bus);
 8001002:	f107 054c 	add.w	r5, r7, #76	; 0x4c
 8001006:	ac19      	add	r4, sp, #100	; 0x64
 8001008:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800100c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001010:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001014:	4668      	mov	r0, sp
 8001016:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800101a:	2264      	movs	r2, #100	; 0x64
 800101c:	4619      	mov	r1, r3
 800101e:	f006 fb67 	bl	80076f0 <memcpy>
 8001022:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001026:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001028:	4628      	mov	r0, r5
 800102a:	f001 fbc5 	bl	80027b8 <PR_InputProcessing>
	CT_Bus = CT_Control(IP_Bus);
 800102e:	f107 050c 	add.w	r5, r7, #12
 8001032:	466c      	mov	r4, sp
 8001034:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001038:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800103c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001040:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001044:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001046:	4628      	mov	r0, r5
 8001048:	f000 fada 	bl	8001600 <CT_Control>
	OP_Bus = PR_OutputProcessing(CT_Bus);
 800104c:	463e      	mov	r6, r7
 800104e:	466d      	mov	r5, sp
 8001050:	f107 0418 	add.w	r4, r7, #24
 8001054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001058:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800105a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800105c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800105e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001060:	6823      	ldr	r3, [r4, #0]
 8001062:	602b      	str	r3, [r5, #0]
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	cb0e      	ldmia	r3, {r1, r2, r3}
 800106a:	4630      	mov	r0, r6
 800106c:	f001 fbd7 	bl	800281e <PR_OutputProcessing>
	IO_HardwareOutputs(Config_Bus, OP_Bus);
 8001070:	ac18      	add	r4, sp, #96	; 0x60
 8001072:	463b      	mov	r3, r7
 8001074:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001078:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800107c:	4668      	mov	r0, sp
 800107e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001082:	2260      	movs	r2, #96	; 0x60
 8001084:	4619      	mov	r1, r3
 8001086:	f006 fb33 	bl	80076f0 <memcpy>
 800108a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800108e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001090:	f000 ffc4 	bl	800201c <IO_HardwareOutputs>

	HAL_Delay(4);
 8001094:	2004      	movs	r0, #4
 8001096:	f002 f881 	bl	800319c <HAL_Delay>

	rollAng_deg = CT_Bus.VS_Bus.VS_Orientation_Bus.CompFiltOrientation.roll_deg;
 800109a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800109c:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <App_Main+0xf4>)
 800109e:	6013      	str	r3, [r2, #0]
	rollAngAccel_deg = CT_Bus.VS_Bus.VS_Orientation_Bus.FiltAccelOrientation.roll_deg;
 80010a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a2:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <App_Main+0xf8>)
 80010a4:	6013      	str	r3, [r2, #0]
	rollAngGyro_deg = CT_Bus.VS_Bus.VS_Orientation_Bus.GyroOrientation.roll_deg;
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	4a09      	ldr	r2, [pc, #36]	; (80010d0 <App_Main+0xfc>)
 80010aa:	6013      	str	r3, [r2, #0]
	throttleReq_pct = CT_Bus.CT_Balance_Bus.ThrottleReq_pct;
 80010ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010ae:	4a09      	ldr	r2, [pc, #36]	; (80010d4 <App_Main+0x100>)
 80010b0:	6013      	str	r3, [r2, #0]
	speedReq_rpm = CT_Bus.CT_Balance_Bus.MotorSpeedReq_rpm;
 80010b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010b4:	4a08      	ldr	r2, [pc, #32]	; (80010d8 <App_Main+0x104>)
 80010b6:	6013      	str	r3, [r2, #0]
}
 80010b8:	bf00      	nop
 80010ba:	3774      	adds	r7, #116	; 0x74
 80010bc:	46bd      	mov	sp, r7
 80010be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80010c2:	b004      	add	sp, #16
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	200001f8 	.word	0x200001f8
 80010cc:	20000208 	.word	0x20000208
 80010d0:	20000204 	.word	0x20000204
 80010d4:	200001fc 	.word	0x200001fc
 80010d8:	20000200 	.word	0x20000200

080010dc <Config_DSP>:

static const float iirAccelCoeffs[IIR_NUM_COEFF] = {0.010432413371093418, 0.020864826742186836, 0.010432413371093418, 1.6909963768874425, -0.7327260303718163};
/*End global variable definitions */


void Config_DSP(void){
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df1_init_f32(&S_AccelRoll, IIR_NUM_STAGES, (float32_t *) &iirAccelCoeffs[0], (float32_t *) &FiltAccelRollState[0]);
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <Config_DSP+0x20>)
 80010e2:	4a07      	ldr	r2, [pc, #28]	; (8001100 <Config_DSP+0x24>)
 80010e4:	2101      	movs	r1, #1
 80010e6:	4807      	ldr	r0, [pc, #28]	; (8001104 <Config_DSP+0x28>)
 80010e8:	f005 fc00 	bl	80068ec <arm_biquad_cascade_df1_init_f32>
	arm_biquad_cascade_df1_init_f32(&S_AccelPitch, IIR_NUM_STAGES, (float32_t *) &iirAccelCoeffs[0], (float32_t *) &FiltAccelPitchState[0]);
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <Config_DSP+0x2c>)
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <Config_DSP+0x24>)
 80010f0:	2101      	movs	r1, #1
 80010f2:	4806      	ldr	r0, [pc, #24]	; (800110c <Config_DSP+0x30>)
 80010f4:	f005 fbfa 	bl	80068ec <arm_biquad_cascade_df1_init_f32>
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000224 	.word	0x20000224
 8001100:	0800a2c0 	.word	0x0800a2c0
 8001104:	2000020c 	.word	0x2000020c
 8001108:	20000234 	.word	0x20000234
 800110c:	20000218 	.word	0x20000218

08001110 <Config_MPU6050>:
static MPU6050_IMUSensitivityData_t MPU6050_GetSens(const AFS_SEL_enum_t accelRange, const FS_SEL_enum_t gyroRange);
static MPU6050_IMUOffsetData_t MPU6050_CalibrateOffsets(I2C_HandleTypeDef *hi2c, Config_MPU6050_Bus_t Config_MPU6050_Bus);
/* Start static function prototypes */

/* Start global function definitions */
Config_MPU6050_Bus_t Config_MPU6050(I2C_HandleTypeDef *hi2c){
 8001110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001112:	b0a3      	sub	sp, #140	; 0x8c
 8001114:	af08      	add	r7, sp, #32
 8001116:	6278      	str	r0, [r7, #36]	; 0x24
 8001118:	6239      	str	r1, [r7, #32]
	Config_MPU6050_Bus_t Config_MPU6050_Bus;

	MPU6050_Init(hi2c);
 800111a:	6a38      	ldr	r0, [r7, #32]
 800111c:	f000 f840 	bl	80011a0 <MPU6050_Init>

	Config_MPU6050_Bus.Sensitivity = MPU6050_GetSens(accelRange, gyroRange);
 8001120:	2301      	movs	r3, #1
 8001122:	2201      	movs	r2, #1
 8001124:	4611      	mov	r1, r2
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f8ac 	bl	8001284 <MPU6050_GetSens>
 800112c:	eeb0 7a40 	vmov.f32	s14, s0
 8001130:	eef0 7a60 	vmov.f32	s15, s1
 8001134:	ed87 7a11 	vstr	s14, [r7, #68]	; 0x44
 8001138:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

	Config_MPU6050_Bus.Offsets = (MPU6050_IMUOffsetData_t) {0, 0, 0, 0, 0, 0, 0};
 800113c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
 800114c:	615a      	str	r2, [r3, #20]
 800114e:	619a      	str	r2, [r3, #24]
	Config_MPU6050_Bus.Offsets = MPU6050_CalibrateOffsets(hi2c, Config_MPU6050_Bus);
 8001150:	463e      	mov	r6, r7
 8001152:	466d      	mov	r5, sp
 8001154:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800115a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800115c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001160:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001164:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001168:	cb0c      	ldmia	r3, {r2, r3}
 800116a:	6a39      	ldr	r1, [r7, #32]
 800116c:	4630      	mov	r0, r6
 800116e:	f000 f8f3 	bl	8001358 <MPU6050_CalibrateOffsets>
 8001172:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001176:	463d      	mov	r5, r7
 8001178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800117a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800117c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001180:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return Config_MPU6050_Bus;
 8001184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001186:	461d      	mov	r5, r3
 8001188:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800118c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800118e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001190:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001192:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001194:	6823      	ldr	r3, [r4, #0]
 8001196:	602b      	str	r3, [r5, #0]
}
 8001198:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800119a:	376c      	adds	r7, #108	; 0x6c
 800119c:	46bd      	mov	sp, r7
 800119e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011a0 <MPU6050_Init>:
/* End global function definitions */

/* Start static function definitions */
static void MPU6050_Init(I2C_HandleTypeDef *hi2c){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af04      	add	r7, sp, #16
 80011a6:	6078      	str	r0, [r7, #4]
	static uint8_t regData;
	static uint8_t numReg = 1;

	/* I2C device check */
	// Raise error later
	HAL_StatusTypeDef deviceCheck = HAL_I2C_IsDeviceReady(hi2c, MPU6050_ADDR, 1, I2C_TIMEOUT);
 80011a8:	2332      	movs	r3, #50	; 0x32
 80011aa:	2201      	movs	r2, #1
 80011ac:	21d0      	movs	r1, #208	; 0xd0
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f003 feb8 	bl	8004f24 <HAL_I2C_IsDeviceReady>
 80011b4:	4603      	mov	r3, r0
 80011b6:	73fb      	strb	r3, [r7, #15]

	if (deviceCheck != HAL_OK){
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MPU6050_Init+0x22>
		Error_Handler();
 80011be:	f001 fd01 	bl	8002bc4 <Error_Handler>
	}

	/* Wake IMU */
	regData = CLKSEL;
 80011c2:	4b2e      	ldr	r3, [pc, #184]	; (800127c <MPU6050_Init+0xdc>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, PWR_MGMT1_REG, REG_LEN, &regData, numReg, I2C_TIMEOUT);
 80011c8:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <MPU6050_Init+0xe0>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	2232      	movs	r2, #50	; 0x32
 80011d0:	9202      	str	r2, [sp, #8]
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	4b29      	ldr	r3, [pc, #164]	; (800127c <MPU6050_Init+0xdc>)
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2301      	movs	r3, #1
 80011da:	226b      	movs	r2, #107	; 0x6b
 80011dc:	21d0      	movs	r1, #208	; 0xd0
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f003 fb80 	bl	80048e4 <HAL_I2C_Mem_Write>

	/* Calculate SMPLRT_DIV from desired sample rate */
	regData = SMPLRT_DIV;
 80011e4:	4b25      	ldr	r3, [pc, #148]	; (800127c <MPU6050_Init+0xdc>)
 80011e6:	2207      	movs	r2, #7
 80011e8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, SMPRT_DIV_REG, REG_LEN, &regData, numReg, I2C_TIMEOUT);
 80011ea:	4b25      	ldr	r3, [pc, #148]	; (8001280 <MPU6050_Init+0xe0>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	2232      	movs	r2, #50	; 0x32
 80011f2:	9202      	str	r2, [sp, #8]
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	4b21      	ldr	r3, [pc, #132]	; (800127c <MPU6050_Init+0xdc>)
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2301      	movs	r3, #1
 80011fc:	2219      	movs	r2, #25
 80011fe:	21d0      	movs	r1, #208	; 0xd0
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f003 fb6f 	bl	80048e4 <HAL_I2C_Mem_Write>

	/* Set gyro config */
	regData = (uint8_t) (gyroRange << 3);
 8001206:	2301      	movs	r3, #1
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	b2da      	uxtb	r2, r3
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <MPU6050_Init+0xdc>)
 800120e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, GYRO_CONFIG_REG, REG_LEN, &regData, numReg, I2C_TIMEOUT);
 8001210:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <MPU6050_Init+0xe0>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	b29b      	uxth	r3, r3
 8001216:	2232      	movs	r2, #50	; 0x32
 8001218:	9202      	str	r2, [sp, #8]
 800121a:	9301      	str	r3, [sp, #4]
 800121c:	4b17      	ldr	r3, [pc, #92]	; (800127c <MPU6050_Init+0xdc>)
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2301      	movs	r3, #1
 8001222:	221b      	movs	r2, #27
 8001224:	21d0      	movs	r1, #208	; 0xd0
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f003 fb5c 	bl	80048e4 <HAL_I2C_Mem_Write>

	/* Set accel config */
	regData = (uint8_t) (accelRange << 3);
 800122c:	2301      	movs	r3, #1
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4b12      	ldr	r3, [pc, #72]	; (800127c <MPU6050_Init+0xdc>)
 8001234:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, ACCEL_CONFIG_REG, REG_LEN, &regData, numReg, I2C_TIMEOUT);
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <MPU6050_Init+0xe0>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	b29b      	uxth	r3, r3
 800123c:	2232      	movs	r2, #50	; 0x32
 800123e:	9202      	str	r2, [sp, #8]
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <MPU6050_Init+0xdc>)
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2301      	movs	r3, #1
 8001248:	221c      	movs	r2, #28
 800124a:	21d0      	movs	r1, #208	; 0xd0
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f003 fb49 	bl	80048e4 <HAL_I2C_Mem_Write>

	/*Configure low pass filter*/
	regData = DLPF_CFG;
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <MPU6050_Init+0xdc>)
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, CONFIG_REG, REG_LEN, &regData, numReg, I2C_TIMEOUT);
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MPU6050_Init+0xe0>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b29b      	uxth	r3, r3
 800125e:	2232      	movs	r2, #50	; 0x32
 8001260:	9202      	str	r2, [sp, #8]
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <MPU6050_Init+0xdc>)
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2301      	movs	r3, #1
 800126a:	221a      	movs	r2, #26
 800126c:	21d0      	movs	r1, #208	; 0xd0
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f003 fb38 	bl	80048e4 <HAL_I2C_Mem_Write>
}
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000244 	.word	0x20000244
 8001280:	20000004 	.word	0x20000004

08001284 <MPU6050_GetSens>:

static MPU6050_IMUSensitivityData_t MPU6050_GetSens(const AFS_SEL_enum_t accelRange, const FS_SEL_enum_t gyroRange){
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	460a      	mov	r2, r1
 800128e:	73fb      	strb	r3, [r7, #15]
 8001290:	4613      	mov	r3, r2
 8001292:	73bb      	strb	r3, [r7, #14]
	MPU6050_IMUSensitivityData_t IMUSensitivity;

	/* Determine sensor sensitivity based on sensor range */
	switch (accelRange){
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	2b03      	cmp	r3, #3
 8001298:	d81a      	bhi.n	80012d0 <MPU6050_GetSens+0x4c>
 800129a:	a201      	add	r2, pc, #4	; (adr r2, 80012a0 <MPU6050_GetSens+0x1c>)
 800129c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a0:	080012b1 	.word	0x080012b1
 80012a4:	080012b9 	.word	0x080012b9
 80012a8:	080012c1 	.word	0x080012c1
 80012ac:	080012c9 	.word	0x080012c9
	case g2:
		IMUSensitivity.AccelSens = 16384.0;
 80012b0:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 80012b4:	613b      	str	r3, [r7, #16]
		break;
 80012b6:	e010      	b.n	80012da <MPU6050_GetSens+0x56>
	case g4:
		IMUSensitivity.AccelSens = 8192.0;
 80012b8:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 80012bc:	613b      	str	r3, [r7, #16]
		break;
 80012be:	e00c      	b.n	80012da <MPU6050_GetSens+0x56>
	case g8:
		IMUSensitivity.AccelSens = 4096.0;
 80012c0:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 80012c4:	613b      	str	r3, [r7, #16]
		break;
 80012c6:	e008      	b.n	80012da <MPU6050_GetSens+0x56>
	case g16:
		IMUSensitivity.AccelSens = 2048.0;
 80012c8:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 80012cc:	613b      	str	r3, [r7, #16]
		break;
 80012ce:	e004      	b.n	80012da <MPU6050_GetSens+0x56>
	default:
		IMUSensitivity.AccelSens = 0;
 80012d0:	f04f 0300 	mov.w	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
		Error_Handler();
 80012d6:	f001 fc75 	bl	8002bc4 <Error_Handler>
	}

	/* Determine sensor sensitivity based on sensor range */
	switch (gyroRange){
 80012da:	7bbb      	ldrb	r3, [r7, #14]
 80012dc:	2b03      	cmp	r3, #3
 80012de:	d817      	bhi.n	8001310 <MPU6050_GetSens+0x8c>
 80012e0:	a201      	add	r2, pc, #4	; (adr r2, 80012e8 <MPU6050_GetSens+0x64>)
 80012e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e6:	bf00      	nop
 80012e8:	080012f9 	.word	0x080012f9
 80012ec:	080012ff 	.word	0x080012ff
 80012f0:	08001305 	.word	0x08001305
 80012f4:	0800130b 	.word	0x0800130b
	case w250:
		IMUSensitivity.GyroSens = 131.0;
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <MPU6050_GetSens+0xc0>)
 80012fa:	617b      	str	r3, [r7, #20]
		break;
 80012fc:	e00d      	b.n	800131a <MPU6050_GetSens+0x96>
	case w500:
		IMUSensitivity.GyroSens = 65.5;
 80012fe:	4b12      	ldr	r3, [pc, #72]	; (8001348 <MPU6050_GetSens+0xc4>)
 8001300:	617b      	str	r3, [r7, #20]
		break;
 8001302:	e00a      	b.n	800131a <MPU6050_GetSens+0x96>
	case w1000:
		IMUSensitivity.GyroSens = 32.8;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <MPU6050_GetSens+0xc8>)
 8001306:	617b      	str	r3, [r7, #20]
		break;
 8001308:	e007      	b.n	800131a <MPU6050_GetSens+0x96>
	case w2000:
		IMUSensitivity.GyroSens = 16.4;
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MPU6050_GetSens+0xcc>)
 800130c:	617b      	str	r3, [r7, #20]
		break;
 800130e:	e004      	b.n	800131a <MPU6050_GetSens+0x96>
	default:
		IMUSensitivity.GyroSens = 0;
 8001310:	f04f 0300 	mov.w	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
		Error_Handler();
 8001316:	f001 fc55 	bl	8002bc4 <Error_Handler>
	}

	return IMUSensitivity;
 800131a:	f107 0318 	add.w	r3, r7, #24
 800131e:	f107 0210 	add.w	r2, r7, #16
 8001322:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001326:	e883 0003 	stmia.w	r3, {r0, r1}
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	ee07 2a10 	vmov	s14, r2
 8001332:	ee07 3a90 	vmov	s15, r3
}
 8001336:	eeb0 0a47 	vmov.f32	s0, s14
 800133a:	eef0 0a67 	vmov.f32	s1, s15
 800133e:	3720      	adds	r7, #32
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	43030000 	.word	0x43030000
 8001348:	42830000 	.word	0x42830000
 800134c:	42033333 	.word	0x42033333
 8001350:	41833333 	.word	0x41833333
 8001354:	00000000 	.word	0x00000000

08001358 <MPU6050_CalibrateOffsets>:

static MPU6050_IMUOffsetData_t MPU6050_CalibrateOffsets(I2C_HandleTypeDef *hi2c, Config_MPU6050_Bus_t Config_MPU6050_Bus){
 8001358:	b082      	sub	sp, #8
 800135a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135c:	b0a5      	sub	sp, #148	; 0x94
 800135e:	af0a      	add	r7, sp, #40	; 0x28
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	6039      	str	r1, [r7, #0]
 8001364:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001368:	e881 000c 	stmia.w	r1, {r2, r3}
	MPU6050_IMUOffsetData_t IMUOffsets;
	HI_MPU6050_Bus_t HI_MPU6050_Bus;
	IP_MPU6050_Bus_t IP_MPU6050_Bus;

	uint32_t numSamples = 2000;
 800136c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001370:	64bb      	str	r3, [r7, #72]	; 0x48

	float sumAx = 0;
 8001372:	f04f 0300 	mov.w	r3, #0
 8001376:	667b      	str	r3, [r7, #100]	; 0x64
	float sumAy = 0;
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	663b      	str	r3, [r7, #96]	; 0x60
	float sumAz = 0;
 800137e:	f04f 0300 	mov.w	r3, #0
 8001382:	65fb      	str	r3, [r7, #92]	; 0x5c
	float sumWx = 0;
 8001384:	f04f 0300 	mov.w	r3, #0
 8001388:	65bb      	str	r3, [r7, #88]	; 0x58
	float sumWy = 0;
 800138a:	f04f 0300 	mov.w	r3, #0
 800138e:	657b      	str	r3, [r7, #84]	; 0x54
	float sumWz = 0;
 8001390:	f04f 0300 	mov.w	r3, #0
 8001394:	653b      	str	r3, [r7, #80]	; 0x50

	for(uint32_t i = 0; i < numSamples; i++){
 8001396:	2300      	movs	r3, #0
 8001398:	64fb      	str	r3, [r7, #76]	; 0x4c
 800139a:	e04c      	b.n	8001436 <MPU6050_CalibrateOffsets+0xde>
		HI_MPU6050_Bus = HI_MPU6050(hi2c);
 800139c:	f107 0320 	add.w	r3, r7, #32
 80013a0:	6839      	ldr	r1, [r7, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 fe83 	bl	80020ae <HI_MPU6050>
		IP_MPU6050_Bus = IP_MPU6050(HI_MPU6050_Bus, Config_MPU6050_Bus);
 80013a8:	f107 0608 	add.w	r6, r7, #8
 80013ac:	466c      	mov	r4, sp
 80013ae:	f107 0580 	add.w	r5, r7, #128	; 0x80
 80013b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ba:	682b      	ldr	r3, [r5, #0]
 80013bc:	6023      	str	r3, [r4, #0]
 80013be:	f107 0320 	add.w	r3, r7, #32
 80013c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013c4:	4630      	mov	r0, r6
 80013c6:	f000 ffa0 	bl	800230a <IP_MPU6050>

		sumAx += IP_MPU6050_Bus.accel.XOUT_ms2;
 80013ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80013ce:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80013d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		sumAy += IP_MPU6050_Bus.accel.YOUT_ms2;
 80013da:	edd7 7a03 	vldr	s15, [r7, #12]
 80013de:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80013e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		sumAz += IP_MPU6050_Bus.accel.ZOUT_ms2;
 80013ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80013ee:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80013f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

		sumWx += IP_MPU6050_Bus.gyro.XOUT_dps;
 80013fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80013fe:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001406:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		sumWy += IP_MPU6050_Bus.gyro.YOUT_dps;
 800140a:	edd7 7a06 	vldr	s15, [r7, #24]
 800140e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001416:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		sumWz += IP_MPU6050_Bus.gyro.ZOUT_dps;
 800141a:	edd7 7a07 	vldr	s15, [r7, #28]
 800141e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001426:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

		HAL_Delay(5);
 800142a:	2005      	movs	r0, #5
 800142c:	f001 feb6 	bl	800319c <HAL_Delay>
	for(uint32_t i = 0; i < numSamples; i++){
 8001430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001432:	3301      	adds	r3, #1
 8001434:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001436:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800143a:	429a      	cmp	r2, r3
 800143c:	d3ae      	bcc.n	800139c <MPU6050_CalibrateOffsets+0x44>
	}

	IMUOffsets.AxOffset = 0 - (sumAx / numSamples);
 800143e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001440:	ee07 3a90 	vmov	s15, r3
 8001444:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001448:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800144c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001450:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001540 <MPU6050_CalibrateOffsets+0x1e8>
 8001454:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001458:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	IMUOffsets.AyOffset = (9.80665 * sin(0 * PI / 180)) - (sumAy / numSamples);
 800145c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800145e:	ee07 3a90 	vmov	s15, r3
 8001462:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001466:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800146a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800146e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001540 <MPU6050_CalibrateOffsets+0x1e8>
 8001472:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001476:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	IMUOffsets.AzOffset = (9.80665 * cos(0 * PI / 180)) - (sumAz / numSamples);
 800147a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800147c:	ee07 3a90 	vmov	s15, r3
 8001480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001484:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001488:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800148c:	ee16 0a90 	vmov	r0, s13
 8001490:	f7ff f85a 	bl	8000548 <__aeabi_f2d>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	a127      	add	r1, pc, #156	; (adr r1, 8001538 <MPU6050_CalibrateOffsets+0x1e0>)
 800149a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800149e:	f7fe fef3 	bl	8000288 <__aeabi_dsub>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4610      	mov	r0, r2
 80014a8:	4619      	mov	r1, r3
 80014aa:	f7ff fb7d 	bl	8000ba8 <__aeabi_d2f>
 80014ae:	4603      	mov	r3, r0
 80014b0:	637b      	str	r3, [r7, #52]	; 0x34

	IMUOffsets.WxOffset = 0 - (sumWx / numSamples);
 80014b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014b4:	ee07 3a90 	vmov	s15, r3
 80014b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014bc:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80014c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014c4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001540 <MPU6050_CalibrateOffsets+0x1e8>
 80014c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014cc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	IMUOffsets.WyOffset = 0 - (sumWy / numSamples);
 80014d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014d2:	ee07 3a90 	vmov	s15, r3
 80014d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014da:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80014de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014e2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001540 <MPU6050_CalibrateOffsets+0x1e8>
 80014e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ea:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	IMUOffsets.WzOffset = 0 - (sumWz / numSamples);
 80014ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014f0:	ee07 3a90 	vmov	s15, r3
 80014f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014f8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80014fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001500:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001540 <MPU6050_CalibrateOffsets+0x1e8>
 8001504:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001508:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	IMUOffsets.SensCalibrated_bool = 1;
 800150c:	2301      	movs	r3, #1
 800150e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	return IMUOffsets;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	461d      	mov	r5, r3
 8001516:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800151a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800151c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800151e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001522:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	376c      	adds	r7, #108	; 0x6c
 800152a:	46bd      	mov	sp, r7
 800152c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001530:	b002      	add	sp, #8
 8001532:	4770      	bx	lr
 8001534:	f3af 8000 	nop.w
 8001538:	3a92a305 	.word	0x3a92a305
 800153c:	40239d01 	.word	0x40239d01
 8001540:	00000000 	.word	0x00000000

08001544 <Config_VESC>:
CAN_RxHeaderTypeDef RxHeader;
uint8_t RxData[8];
/* End global variables */

/* Start global function definitions */
void Config_VESC(CAN_HandleTypeDef *hcan){
 8001544:	b580      	push	{r7, lr}
 8001546:	b08e      	sub	sp, #56	; 0x38
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800154c:	2301      	movs	r3, #1
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
	canfilterconfig.FilterBank = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
	canfilterconfig.FilterIdHigh = 0x0000;
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterIdLow = ((CAN_ID1 << 3) ^ (CAN_IDE1 << 2)) ^ (CAN_RTR1 << 1);
 800155c:	f644 030c 	movw	r3, #18444	; 0x480c
 8001560:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterMaskIdHigh = 0x0000;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8001566:	2300      	movs	r3, #0
 8001568:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDLIST;
 800156a:	2301      	movs	r3, #1
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800156e:	2301      	movs	r3, #1
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28

	HAL_CAN_ConfigFilter(hcan, &canfilterconfig);
 8001572:	f107 030c 	add.w	r3, r7, #12
 8001576:	4619      	mov	r1, r3
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f002 f829 	bl	80035d0 <HAL_CAN_ConfigFilter>

	void (*pCAN_RxCallback)(CAN_HandleTypeDef *_hcan) = &CAN_HAL_RxFifo0MsgPendingCallback;
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <Config_VESC+0x90>)
 8001580:	637b      	str	r3, [r7, #52]	; 0x34

	if(HAL_CAN_RegisterCallback(hcan, HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID, pCAN_RxCallback) != HAL_OK){
 8001582:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001584:	2106      	movs	r1, #6
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f001 ff72 	bl	8003470 <HAL_CAN_RegisterCallback>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <Config_VESC+0x52>
	  Error_Handler();
 8001592:	f001 fb17 	bl	8002bc4 <Error_Handler>
	}

	HAL_CAN_Start(hcan);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f002 f8fa 	bl	8003790 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800159c:	2102      	movs	r1, #2
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f002 fb27 	bl	8003bf2 <HAL_CAN_ActivateNotification>

	TxHeader.DLC = 4;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <Config_VESC+0x94>)
 80015a6:	2204      	movs	r2, #4
 80015a8:	611a      	str	r2, [r3, #16]
	TxHeader.ExtId = 0x301;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <Config_VESC+0x94>)
 80015ac:	f240 3201 	movw	r2, #769	; 0x301
 80015b0:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_EXT;
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <Config_VESC+0x94>)
 80015b4:	2204      	movs	r2, #4
 80015b6:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80015b8:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <Config_VESC+0x94>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0;
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <Config_VESC+0x94>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
	TxHeader.TransmitGlobalTime = DISABLE;
 80015c4:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <Config_VESC+0x94>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	751a      	strb	r2, [r3, #20]
}
 80015ca:	bf00      	nop
 80015cc:	3738      	adds	r7, #56	; 0x38
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	080015dd 	.word	0x080015dd
 80015d8:	20000248 	.word	0x20000248

080015dc <CAN_HAL_RxFifo0MsgPendingCallback>:

void CAN_HAL_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <CAN_HAL_RxFifo0MsgPendingCallback+0x1c>)
 80015e6:	4a05      	ldr	r2, [pc, #20]	; (80015fc <CAN_HAL_RxFifo0MsgPendingCallback+0x20>)
 80015e8:	2100      	movs	r1, #0
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f002 f9ef 	bl	80039ce <HAL_CAN_GetRxMessage>
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000280 	.word	0x20000280
 80015fc:	20000264 	.word	0x20000264

08001600 <CT_Control>:
static VS_Bus_t CT_VirtualSensors(IP_Bus_t IP_Bus);
static CT_Bus_t CT_Controllers(IP_Bus_t IP_Bus, VS_Bus_t VS_Bus);
/* End Static function prototypes */

/* Start global function definitions */
CT_Bus_t CT_Control(IP_Bus_t IP_Bus){
 8001600:	b084      	sub	sp, #16
 8001602:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001604:	b0af      	sub	sp, #188	; 0xbc
 8001606:	af10      	add	r7, sp, #64	; 0x40
 8001608:	6078      	str	r0, [r7, #4]
 800160a:	f107 0094 	add.w	r0, r7, #148	; 0x94
 800160e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	VS_Bus_t VS_Bus;
	CT_Bus_t CT_Bus;

	VS_Bus = CT_VirtualSensors(IP_Bus);
 8001612:	f107 0548 	add.w	r5, r7, #72	; 0x48
 8001616:	466c      	mov	r4, sp
 8001618:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800161c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001620:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001624:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001628:	cb0e      	ldmia	r3, {r1, r2, r3}
 800162a:	4628      	mov	r0, r5
 800162c:	f000 f82f 	bl	800168e <CT_VirtualSensors>
	CT_Bus = CT_Controllers(IP_Bus, VS_Bus);
 8001630:	f107 0608 	add.w	r6, r7, #8
 8001634:	ad03      	add	r5, sp, #12
 8001636:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800163a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800163c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800163e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001640:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001642:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001646:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800164a:	466c      	mov	r4, sp
 800164c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001650:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001654:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001658:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800165c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800165e:	4630      	mov	r0, r6
 8001660:	f000 f84a 	bl	80016f8 <CT_Controllers>

	return CT_Bus;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	461d      	mov	r5, r3
 8001668:	f107 0408 	add.w	r4, r7, #8
 800166c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800166e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001670:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001672:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001676:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001678:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800167c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	377c      	adds	r7, #124	; 0x7c
 8001684:	46bd      	mov	sp, r7
 8001686:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800168a:	b004      	add	sp, #16
 800168c:	4770      	bx	lr

0800168e <CT_VirtualSensors>:
/* End global function definitions */

/* Start Static function definitions */
static VS_Bus_t CT_VirtualSensors(IP_Bus_t IP_Bus){
 800168e:	b084      	sub	sp, #16
 8001690:	b5b0      	push	{r4, r5, r7, lr}
 8001692:	b09e      	sub	sp, #120	; 0x78
 8001694:	af04      	add	r7, sp, #16
 8001696:	6378      	str	r0, [r7, #52]	; 0x34
 8001698:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 800169c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	VS_Bus_t VS_Bus;

	VS_Bus.VS_Orientation_Bus = EstimateOrientation(IP_Bus.IP_MPU6050_Bus);
 80016a0:	463d      	mov	r5, r7
 80016a2:	466c      	mov	r4, sp
 80016a4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80016a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80016b0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80016b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016b6:	4628      	mov	r0, r5
 80016b8:	f000 f96e 	bl	8001998 <EstimateOrientation>
 80016bc:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80016c0:	463d      	mov	r5, r7
 80016c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80016ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	return VS_Bus;
 80016d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d4:	461d      	mov	r5, r3
 80016d6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80016da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016e6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80016ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80016ec:	3768      	adds	r7, #104	; 0x68
 80016ee:	46bd      	mov	sp, r7
 80016f0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80016f4:	b004      	add	sp, #16
 80016f6:	4770      	bx	lr

080016f8 <CT_Controllers>:

static CT_Bus_t CT_Controllers(IP_Bus_t IP_Bus, VS_Bus_t VS_Bus){
 80016f8:	b084      	sub	sp, #16
 80016fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016fc:	b0a5      	sub	sp, #148	; 0x94
 80016fe:	af10      	add	r7, sp, #64	; 0x40
 8001700:	60f8      	str	r0, [r7, #12]
 8001702:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8001706:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	CT_Bus_t CT_Bus;

	CT_Bus.VS_Bus = VS_Bus;
 800170a:	f107 0410 	add.w	r4, r7, #16
 800170e:	f107 0584 	add.w	r5, r7, #132	; 0x84
 8001712:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001716:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800171a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800171e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	CT_Bus.CT_Log_Bus = CT_Logging(IP_Bus.IP_MPU6050_Bus, VS_Bus.VS_Orientation_Bus);
 8001722:	463e      	mov	r6, r7
 8001724:	ad03      	add	r5, sp, #12
 8001726:	f107 0484 	add.w	r4, r7, #132	; 0x84
 800172a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800172c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800172e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001730:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001732:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001736:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800173a:	466c      	mov	r4, sp
 800173c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001740:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001744:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001748:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800174c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800174e:	4630      	mov	r0, r6
 8001750:	f000 f8b0 	bl	80018b4 <CT_Logging>
 8001754:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001758:	463a      	mov	r2, r7
 800175a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800175e:	e883 0003 	stmia.w	r3, {r0, r1}
	CT_Bus.CT_Balance_Bus = CT_BalanceController(0, VS_Bus.VS_Orientation_Bus.CompFiltOrientation.roll_deg);
 8001762:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001766:	463b      	mov	r3, r7
 8001768:	eeb0 0a67 	vmov.f32	s0, s15
 800176c:	2100      	movs	r1, #0
 800176e:	4618      	mov	r0, r3
 8001770:	f000 f81c 	bl	80017ac <CT_BalanceController>
 8001774:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001778:	463a      	mov	r2, r7
 800177a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800177e:	e883 0003 	stmia.w	r3, {r0, r1}

	return CT_Bus;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	461d      	mov	r5, r3
 8001786:	f107 0410 	add.w	r4, r7, #16
 800178a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800178c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800178e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001790:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001792:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001794:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001796:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800179a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	3754      	adds	r7, #84	; 0x54
 80017a2:	46bd      	mov	sp, r7
 80017a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80017a8:	b004      	add	sp, #16
 80017aa:	4770      	bx	lr

080017ac <CT_BalanceController>:
/* Start Static function prototypes */
static int8_t signf(float x);
/* End Static function prototypes */

/* Start Global Function Definitions */
CT_Balance_Bus_t CT_BalanceController(uint8_t BalanceEnable_bool, float RollAng_deg){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	460b      	mov	r3, r1
 80017b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80017ba:	72fb      	strb	r3, [r7, #11]
	CT_Balance_Bus_t CT_Balance_Bus;

	uint32_t MaxMotorSpeed_rpm = 11000;
 80017bc:	f642 23f8 	movw	r3, #11000	; 0x2af8
 80017c0:	623b      	str	r3, [r7, #32]
	uint32_t MaxRollAng_deg = 45;
 80017c2:	232d      	movs	r3, #45	; 0x2d
 80017c4:	61fb      	str	r3, [r7, #28]

	// Limit throttle request to -1 / 1
	float ThrottleReq_pct = RollAng_deg / MaxRollAng_deg;
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	ee07 3a90 	vmov	s15, r3
 80017cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017d0:	edd7 6a01 	vldr	s13, [r7, #4]
 80017d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017d8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	if(fabsf(ThrottleReq_pct) > 1){
 80017dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80017e0:	eef0 7ae7 	vabs.f32	s15, s15
 80017e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f0:	dd0a      	ble.n	8001808 <CT_BalanceController+0x5c>
		ThrottleReq_pct = 1 * signf(ThrottleReq_pct);
 80017f2:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80017f6:	f000 f839 	bl	800186c <signf>
 80017fa:	4603      	mov	r3, r0
 80017fc:	ee07 3a90 	vmov	s15, r3
 8001800:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001804:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	}

	// Throttle deadzone
	if(fabsf(RollAng_deg) < 2){
 8001808:	edd7 7a01 	vldr	s15, [r7, #4]
 800180c:	eef0 7ae7 	vabs.f32	s15, s15
 8001810:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001814:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181c:	d502      	bpl.n	8001824 <CT_BalanceController+0x78>
		BalanceEnable_bool = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	72fb      	strb	r3, [r7, #11]
 8001822:	e001      	b.n	8001828 <CT_BalanceController+0x7c>
	} else{
		BalanceEnable_bool = 1;
 8001824:	2301      	movs	r3, #1
 8001826:	72fb      	strb	r3, [r7, #11]
	}

	// Zero out throttle if not enabled
	if(!BalanceEnable_bool){
 8001828:	7afb      	ldrb	r3, [r7, #11]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d102      	bne.n	8001834 <CT_BalanceController+0x88>
		ThrottleReq_pct = 0;
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
	}

	CT_Balance_Bus.MotorSpeedReq_rpm = ThrottleReq_pct * MaxMotorSpeed_rpm;
 8001834:	6a3b      	ldr	r3, [r7, #32]
 8001836:	ee07 3a90 	vmov	s15, r3
 800183a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800183e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001846:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800184a:	ee17 3a90 	vmov	r3, s15
 800184e:	617b      	str	r3, [r7, #20]
	CT_Balance_Bus.ThrottleReq_pct = ThrottleReq_pct;
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	61bb      	str	r3, [r7, #24]

	return CT_Balance_Bus;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	461a      	mov	r2, r3
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001860:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	3728      	adds	r7, #40	; 0x28
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <signf>:
/* End Global Function Definitions */

/* Start Static Function Definitions */
static int8_t signf(float x){
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	ed87 0a01 	vstr	s0, [r7, #4]
	int8_t sign;

	if (x > 0){
 8001876:	edd7 7a01 	vldr	s15, [r7, #4]
 800187a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800187e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001882:	dd02      	ble.n	800188a <signf+0x1e>
		sign = 1;
 8001884:	2301      	movs	r3, #1
 8001886:	73fb      	strb	r3, [r7, #15]
 8001888:	e00b      	b.n	80018a2 <signf+0x36>
	}
	else if (x < 0) {
 800188a:	edd7 7a01 	vldr	s15, [r7, #4]
 800188e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001896:	d502      	bpl.n	800189e <signf+0x32>
		sign = -1;
 8001898:	23ff      	movs	r3, #255	; 0xff
 800189a:	73fb      	strb	r3, [r7, #15]
 800189c:	e001      	b.n	80018a2 <signf+0x36>
	}
	else {
		sign = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	73fb      	strb	r3, [r7, #15]
	}

	return sign;
 80018a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <CT_Logging>:
/* Start Function Prototypes */
static StringPacket_t MakeLogString(uint8_t *msg, uint16_t msgLen, IP_MPU6050_Bus_t IP_MPU6050_Bus, VS_Orientation_Bus_t VS_Orientation_Bus);
/* End Function Prototypes */

/* Start Global Function Definitions */
CT_Log_Bus_t CT_Logging(IP_MPU6050_Bus_t IP_MPU6050_Bus, VS_Orientation_Bus_t VS_Orientation_Bus){
 80018b4:	b084      	sub	sp, #16
 80018b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b8:	b099      	sub	sp, #100	; 0x64
 80018ba:	af12      	add	r7, sp, #72	; 0x48
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80018c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	StringPacket_t StringPacket;
	CT_Log_Bus_t Log_Bus;

	StringPacket = MakeLogString(msg, msgLen, IP_MPU6050_Bus, VS_Orientation_Bus);
 80018c6:	4b18      	ldr	r3, [pc, #96]	; (8001928 <CT_Logging+0x74>)
 80018c8:	f8b3 c000 	ldrh.w	ip, [r3]
 80018cc:	f107 0610 	add.w	r6, r7, #16
 80018d0:	ad05      	add	r5, sp, #20
 80018d2:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80018d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018e2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80018e6:	466d      	mov	r5, sp
 80018e8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80018ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f0:	6823      	ldr	r3, [r4, #0]
 80018f2:	602b      	str	r3, [r5, #0]
 80018f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f6:	4662      	mov	r2, ip
 80018f8:	490c      	ldr	r1, [pc, #48]	; (800192c <CT_Logging+0x78>)
 80018fa:	4630      	mov	r0, r6
 80018fc:	f000 f818 	bl	8001930 <MakeLogString>

	Log_Bus.pData = StringPacket.pData;
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	60bb      	str	r3, [r7, #8]
	Log_Bus.Size = StringPacket.Size;
 8001904:	8abb      	ldrh	r3, [r7, #20]
 8001906:	81bb      	strh	r3, [r7, #12]

	return Log_Bus;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	461a      	mov	r2, r3
 800190c:	f107 0308 	add.w	r3, r7, #8
 8001910:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001914:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	371c      	adds	r7, #28
 800191c:	46bd      	mov	sp, r7
 800191e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001922:	b004      	add	sp, #16
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000006 	.word	0x20000006
 800192c:	20000288 	.word	0x20000288

08001930 <MakeLogString>:
/* End Global Function Definitions */

/* Start Static Function Definitions */
static StringPacket_t MakeLogString(uint8_t *msg, uint16_t msgLen, IP_MPU6050_Bus_t IP_MPU6050_Bus, VS_Orientation_Bus_t VS_Orientation_Bus){
 8001930:	b082      	sub	sp, #8
 8001932:	b580      	push	{r7, lr}
 8001934:	b08a      	sub	sp, #40	; 0x28
 8001936:	af02      	add	r7, sp, #8
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800193e:	4613      	mov	r3, r2
 8001940:	80fb      	strh	r3, [r7, #6]
	StringPacket_t StringPacket;

	uint32_t tick = HAL_GetTick();
 8001942:	f001 fc1f 	bl	8003184 <HAL_GetTick>
 8001946:	61f8      	str	r0, [r7, #28]

	memset(msg, '\0', msgLen);  // Set unused indexes to null char
 8001948:	88fb      	ldrh	r3, [r7, #6]
 800194a:	461a      	mov	r2, r3
 800194c:	2100      	movs	r1, #0
 800194e:	68b8      	ldr	r0, [r7, #8]
 8001950:	f005 fe4f 	bl	80075f2 <memset>
//	sprintf((char*) msg, "TK:%lu,AX:%.3f,AY:%.3f,AZ:%.3f,WX:%.3f,WY:%.3f,WZ:%.3f\n\r",
//			tick,
//			IP_MPU6050_Bus.accel.XOUT_ms2, IP_MPU6050_Bus.accel.YOUT_ms2, IP_MPU6050_Bus.accel.ZOUT_ms2,
//			IP_MPU6050_Bus.gyro.XOUT_dps, IP_MPU6050_Bus.gyro.YOUT_dps, IP_MPU6050_Bus.gyro.ZOUT_dps);

	sprintf((char*) msg, "TK:%lu,compRoll:%.5f\n\r", tick, VS_Orientation_Bus.CompFiltOrientation.roll_deg);
 8001954:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe fdf6 	bl	8000548 <__aeabi_f2d>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	e9cd 2300 	strd	r2, r3, [sp]
 8001964:	69fa      	ldr	r2, [r7, #28]
 8001966:	490b      	ldr	r1, [pc, #44]	; (8001994 <MakeLogString+0x64>)
 8001968:	68b8      	ldr	r0, [r7, #8]
 800196a:	f005 fddf 	bl	800752c <siprintf>

	StringPacket.pData = msg;
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	617b      	str	r3, [r7, #20]
	StringPacket.Size = msgLen;
 8001972:	88fb      	ldrh	r3, [r7, #6]
 8001974:	833b      	strh	r3, [r7, #24]

	return StringPacket;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	461a      	mov	r2, r3
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001982:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	3720      	adds	r7, #32
 800198a:	46bd      	mov	sp, r7
 800198c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001990:	b002      	add	sp, #8
 8001992:	4770      	bx	lr
 8001994:	0800a2a8 	.word	0x0800a2a8

08001998 <EstimateOrientation>:
static VS_OrientationData_t AccelLowPassFilt(VS_OrientationData_t AccelOrientation);
static VS_OrientationData_t ComplimentaryFilter(VS_OrientationData_t GyroOrientation, VS_OrientationData_t FiltAccelOrientation);
/* End Static Function Prototypes */

/* Start Global Function Definitions */
VS_Orientation_Bus_t EstimateOrientation(IP_MPU6050_Bus_t IP_MPU6050_Bus){
 8001998:	b084      	sub	sp, #16
 800199a:	b5b0      	push	{r4, r5, r7, lr}
 800199c:	b08e      	sub	sp, #56	; 0x38
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80019a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	VS_Orientation_Bus_t VS_Orientation_Bus;

	VS_Orientation_Bus.AccelOrientation = CalcAccelAngle(IP_MPU6050_Bus.accel);
 80019aa:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80019ae:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80019b2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80019b6:	eeb0 0a66 	vmov.f32	s0, s13
 80019ba:	eef0 0a47 	vmov.f32	s1, s14
 80019be:	eeb0 1a67 	vmov.f32	s2, s15
 80019c2:	f000 f891 	bl	8001ae8 <CalcAccelAngle>
 80019c6:	eef0 6a40 	vmov.f32	s13, s0
 80019ca:	eeb0 7a60 	vmov.f32	s14, s1
 80019ce:	eef0 7a41 	vmov.f32	s15, s2
 80019d2:	edc7 6a02 	vstr	s13, [r7, #8]
 80019d6:	ed87 7a03 	vstr	s14, [r7, #12]
 80019da:	edc7 7a04 	vstr	s15, [r7, #16]

	ResetGyroIntegrators(VS_Orientation_Bus.AccelOrientation.roll_deg, VS_Orientation_Bus.AccelOrientation.pitch_deg);
 80019de:	edd7 7a02 	vldr	s15, [r7, #8]
 80019e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80019e6:	eef0 0a47 	vmov.f32	s1, s14
 80019ea:	eeb0 0a67 	vmov.f32	s0, s15
 80019ee:	f000 f9a7 	bl	8001d40 <ResetGyroIntegrators>

	VS_Orientation_Bus.FiltAccelOrientation = AccelLowPassFilt(VS_Orientation_Bus.AccelOrientation);
 80019f2:	edd7 6a02 	vldr	s13, [r7, #8]
 80019f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80019fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80019fe:	eeb0 0a66 	vmov.f32	s0, s13
 8001a02:	eef0 0a47 	vmov.f32	s1, s14
 8001a06:	eeb0 1a67 	vmov.f32	s2, s15
 8001a0a:	f000 fa35 	bl	8001e78 <AccelLowPassFilt>
 8001a0e:	eef0 6a40 	vmov.f32	s13, s0
 8001a12:	eeb0 7a60 	vmov.f32	s14, s1
 8001a16:	eef0 7a41 	vmov.f32	s15, s2
 8001a1a:	edc7 6a08 	vstr	s13, [r7, #32]
 8001a1e:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8001a22:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	VS_Orientation_Bus.GyroOrientation = CalcGyroAngle(IP_MPU6050_Bus.gyro, VS_Orientation_Bus.FiltAccelOrientation);
 8001a26:	ed97 5a08 	vldr	s10, [r7, #32]
 8001a2a:	edd7 5a09 	vldr	s11, [r7, #36]	; 0x24
 8001a2e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8001a32:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001a36:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001a3a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a3e:	eef0 1a45 	vmov.f32	s3, s10
 8001a42:	eeb0 2a65 	vmov.f32	s4, s11
 8001a46:	eef0 2a46 	vmov.f32	s5, s12
 8001a4a:	eeb0 0a66 	vmov.f32	s0, s13
 8001a4e:	eef0 0a47 	vmov.f32	s1, s14
 8001a52:	eeb0 1a67 	vmov.f32	s2, s15
 8001a56:	f000 f8e1 	bl	8001c1c <CalcGyroAngle>
 8001a5a:	eef0 6a40 	vmov.f32	s13, s0
 8001a5e:	eeb0 7a60 	vmov.f32	s14, s1
 8001a62:	eef0 7a41 	vmov.f32	s15, s2
 8001a66:	edc7 6a05 	vstr	s13, [r7, #20]
 8001a6a:	ed87 7a06 	vstr	s14, [r7, #24]
 8001a6e:	edc7 7a07 	vstr	s15, [r7, #28]

	VS_Orientation_Bus.CompFiltOrientation = ComplimentaryFilter(VS_Orientation_Bus.GyroOrientation, VS_Orientation_Bus.FiltAccelOrientation);
 8001a72:	ed97 5a08 	vldr	s10, [r7, #32]
 8001a76:	edd7 5a09 	vldr	s11, [r7, #36]	; 0x24
 8001a7a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8001a7e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001a82:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a86:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a8a:	eef0 1a45 	vmov.f32	s3, s10
 8001a8e:	eeb0 2a65 	vmov.f32	s4, s11
 8001a92:	eef0 2a46 	vmov.f32	s5, s12
 8001a96:	eeb0 0a66 	vmov.f32	s0, s13
 8001a9a:	eef0 0a47 	vmov.f32	s1, s14
 8001a9e:	eeb0 1a67 	vmov.f32	s2, s15
 8001aa2:	f000 fa2f 	bl	8001f04 <ComplimentaryFilter>
 8001aa6:	eef0 6a40 	vmov.f32	s13, s0
 8001aaa:	eeb0 7a60 	vmov.f32	s14, s1
 8001aae:	eef0 7a41 	vmov.f32	s15, s2
 8001ab2:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8001ab6:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8001aba:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	return VS_Orientation_Bus;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	461d      	mov	r5, r3
 8001ac2:	f107 0408 	add.w	r4, r7, #8
 8001ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001acc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ace:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ad2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	3738      	adds	r7, #56	; 0x38
 8001ada:	46bd      	mov	sp, r7
 8001adc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001ae0:	b004      	add	sp, #16
 8001ae2:	4770      	bx	lr
 8001ae4:	0000      	movs	r0, r0
	...

08001ae8 <CalcAccelAngle>:
/* End Global Function Definitions */

/* Start Static Function Definitions */
static VS_OrientationData_t CalcAccelAngle(MPU6050_AccelData_t MPU6050_AccelData){
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	ed2d 8b02 	vpush	{d8}
 8001aee:	b090      	sub	sp, #64	; 0x40
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	eef0 6a40 	vmov.f32	s13, s0
 8001af6:	eeb0 7a60 	vmov.f32	s14, s1
 8001afa:	eef0 7a41 	vmov.f32	s15, s2
 8001afe:	edc7 6a05 	vstr	s13, [r7, #20]
 8001b02:	ed87 7a06 	vstr	s14, [r7, #24]
 8001b06:	edc7 7a07 	vstr	s15, [r7, #28]
	VS_OrientationData_t AccelOrientation;

	float roll_rad = atan2f(MPU6050_AccelData.YOUT_ms2, MPU6050_AccelData.ZOUT_ms2);
 8001b0a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b0e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b12:	eef0 0a47 	vmov.f32	s1, s14
 8001b16:	eeb0 0a67 	vmov.f32	s0, s15
 8001b1a:	f007 fe63 	bl	80097e4 <atan2f>
 8001b1e:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
	float pitch_rad = atan2f(-1 * MPU6050_AccelData.XOUT_ms2, sqrtf(powf(MPU6050_AccelData.YOUT_ms2, 2) + powf(MPU6050_AccelData.ZOUT_ms2, 2)));
 8001b22:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b26:	eeb1 8a67 	vneg.f32	s16, s15
 8001b2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b2e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001b32:	eeb0 0a67 	vmov.f32	s0, s15
 8001b36:	f007 fe57 	bl	80097e8 <powf>
 8001b3a:	eef0 8a40 	vmov.f32	s17, s0
 8001b3e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b42:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001b46:	eeb0 0a67 	vmov.f32	s0, s15
 8001b4a:	f007 fe4d 	bl	80097e8 <powf>
 8001b4e:	eef0 7a40 	vmov.f32	s15, s0
 8001b52:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8001b56:	eeb0 0a67 	vmov.f32	s0, s15
 8001b5a:	f007 fe9d 	bl	8009898 <sqrtf>
 8001b5e:	eef0 7a40 	vmov.f32	s15, s0
 8001b62:	eef0 0a67 	vmov.f32	s1, s15
 8001b66:	eeb0 0a48 	vmov.f32	s0, s16
 8001b6a:	f007 fe3b 	bl	80097e4 <atan2f>
 8001b6e:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

	AccelOrientation.roll_deg = roll_rad * 180 / M_PI;
 8001b72:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b76:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001c18 <CalcAccelAngle+0x130>
 8001b7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b7e:	ee17 0a90 	vmov	r0, s15
 8001b82:	f7fe fce1 	bl	8000548 <__aeabi_f2d>
 8001b86:	a322      	add	r3, pc, #136	; (adr r3, 8001c10 <CalcAccelAngle+0x128>)
 8001b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8c:	f7fe fe5e 	bl	800084c <__aeabi_ddiv>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	f7ff f806 	bl	8000ba8 <__aeabi_d2f>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	623b      	str	r3, [r7, #32]
	AccelOrientation.pitch_deg = pitch_rad * 180 / M_PI;
 8001ba0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001ba4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001c18 <CalcAccelAngle+0x130>
 8001ba8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bac:	ee17 0a90 	vmov	r0, s15
 8001bb0:	f7fe fcca 	bl	8000548 <__aeabi_f2d>
 8001bb4:	a316      	add	r3, pc, #88	; (adr r3, 8001c10 <CalcAccelAngle+0x128>)
 8001bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bba:	f7fe fe47 	bl	800084c <__aeabi_ddiv>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f7fe ffef 	bl	8000ba8 <__aeabi_d2f>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
	AccelOrientation.yaw_deg = 0;  // No accurate way to calculate this
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	62bb      	str	r3, [r7, #40]	; 0x28

	return AccelOrientation;
 8001bd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bd8:	f107 0220 	add.w	r2, r7, #32
 8001bdc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001be2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001be8:	ee06 1a90 	vmov	s13, r1
 8001bec:	ee07 2a10 	vmov	s14, r2
 8001bf0:	ee07 3a90 	vmov	s15, r3
}
 8001bf4:	eeb0 0a66 	vmov.f32	s0, s13
 8001bf8:	eef0 0a47 	vmov.f32	s1, s14
 8001bfc:	eeb0 1a67 	vmov.f32	s2, s15
 8001c00:	3740      	adds	r7, #64	; 0x40
 8001c02:	46bd      	mov	sp, r7
 8001c04:	ecbd 8b02 	vpop	{d8}
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	f3af 8000 	nop.w
 8001c10:	54442d18 	.word	0x54442d18
 8001c14:	400921fb 	.word	0x400921fb
 8001c18:	43340000 	.word	0x43340000

08001c1c <CalcGyroAngle>:

static VS_OrientationData_t CalcGyroAngle(MPU6050_GyroData_t MPU6050_GyroData, VS_OrientationData_t FiltAccelOrientation){
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b092      	sub	sp, #72	; 0x48
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	eeb0 5a40 	vmov.f32	s10, s0
 8001c26:	eef0 5a60 	vmov.f32	s11, s1
 8001c2a:	eeb0 6a41 	vmov.f32	s12, s2
 8001c2e:	eef0 6a61 	vmov.f32	s13, s3
 8001c32:	eeb0 7a42 	vmov.f32	s14, s4
 8001c36:	eef0 7a62 	vmov.f32	s15, s5
 8001c3a:	ed87 5a07 	vstr	s10, [r7, #28]
 8001c3e:	edc7 5a08 	vstr	s11, [r7, #32]
 8001c42:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001c46:	edc7 6a04 	vstr	s13, [r7, #16]
 8001c4a:	ed87 7a05 	vstr	s14, [r7, #20]
 8001c4e:	edc7 7a06 	vstr	s15, [r7, #24]
	VS_OrientationData_t GyroOrientation;
	uint32_t currentTick = HAL_GetTick();
 8001c52:	f001 fa97 	bl	8003184 <HAL_GetTick>
 8001c56:	6478      	str	r0, [r7, #68]	; 0x44
	float dt = ((float) currentTick - (float) lastTick) / 1000;
 8001c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c5a:	ee07 3a90 	vmov	s15, r3
 8001c5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c62:	4b31      	ldr	r3, [pc, #196]	; (8001d28 <CalcGyroAngle+0x10c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	ee07 3a90 	vmov	s15, r3
 8001c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c72:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001d2c <CalcGyroAngle+0x110>
 8001c76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c7a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	// Integrator reset logic
	if(resetGyroRoll_bool){
 8001c7e:	4b2c      	ldr	r3, [pc, #176]	; (8001d30 <CalcGyroAngle+0x114>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d005      	beq.n	8001c92 <CalcGyroAngle+0x76>
		lastRollAng_deg = FiltAccelOrientation.roll_deg;
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	4a2a      	ldr	r2, [pc, #168]	; (8001d34 <CalcGyroAngle+0x118>)
 8001c8a:	6013      	str	r3, [r2, #0]
		resetGyroRoll_bool = 0;
 8001c8c:	4b28      	ldr	r3, [pc, #160]	; (8001d30 <CalcGyroAngle+0x114>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	701a      	strb	r2, [r3, #0]
	}

	if(resetGyroPitch_bool){
 8001c92:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <CalcGyroAngle+0x11c>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d006      	beq.n	8001ca8 <CalcGyroAngle+0x8c>
		lastPitchAng_deg = 0;
 8001c9a:	4b28      	ldr	r3, [pc, #160]	; (8001d3c <CalcGyroAngle+0x120>)
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
		resetGyroPitch_bool = 0;
 8001ca2:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <CalcGyroAngle+0x11c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
	}

	// Integrate angular velocities
	GyroOrientation.roll_deg = lastRollAng_deg + MPU6050_GyroData.XOUT_dps * dt;
 8001ca8:	ed97 7a07 	vldr	s14, [r7, #28]
 8001cac:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001cb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cb4:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <CalcGyroAngle+0x118>)
 8001cb6:	edd3 7a00 	vldr	s15, [r3]
 8001cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cbe:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	GyroOrientation.pitch_deg = lastPitchAng_deg + MPU6050_GyroData.YOUT_dps * dt;
 8001cc2:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cc6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001cca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cce:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <CalcGyroAngle+0x120>)
 8001cd0:	edd3 7a00 	vldr	s15, [r3]
 8001cd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	GyroOrientation.yaw_deg = 0;  // No accurate way to calculate this
 8001cdc:	f04f 0300 	mov.w	r3, #0
 8001ce0:	633b      	str	r3, [r7, #48]	; 0x30

	// Store previous values
	lastTick = currentTick;
 8001ce2:	4a11      	ldr	r2, [pc, #68]	; (8001d28 <CalcGyroAngle+0x10c>)
 8001ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ce6:	6013      	str	r3, [r2, #0]
	lastRollAng_deg = GyroOrientation.roll_deg;
 8001ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cea:	4a12      	ldr	r2, [pc, #72]	; (8001d34 <CalcGyroAngle+0x118>)
 8001cec:	6013      	str	r3, [r2, #0]
	lastPitchAng_deg = GyroOrientation.pitch_deg;
 8001cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf0:	4a12      	ldr	r2, [pc, #72]	; (8001d3c <CalcGyroAngle+0x120>)
 8001cf2:	6013      	str	r3, [r2, #0]

	return GyroOrientation;
 8001cf4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cf8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cfc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cfe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001d02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001d04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d08:	ee06 1a90 	vmov	s13, r1
 8001d0c:	ee07 2a10 	vmov	s14, r2
 8001d10:	ee07 3a90 	vmov	s15, r3
}
 8001d14:	eeb0 0a66 	vmov.f32	s0, s13
 8001d18:	eef0 0a47 	vmov.f32	s1, s14
 8001d1c:	eeb0 1a67 	vmov.f32	s2, s15
 8001d20:	3748      	adds	r7, #72	; 0x48
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	200002bc 	.word	0x200002bc
 8001d2c:	447a0000 	.word	0x447a0000
 8001d30:	200002b0 	.word	0x200002b0
 8001d34:	200002c0 	.word	0x200002c0
 8001d38:	200002b1 	.word	0x200002b1
 8001d3c:	200002c4 	.word	0x200002c4

08001d40 <ResetGyroIntegrators>:

static void ResetGyroIntegrators(float accelRoll_deg, float accelPitch_deg){
 8001d40:	b480      	push	{r7}
 8001d42:	b08b      	sub	sp, #44	; 0x2c
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d4a:	edc7 0a00 	vstr	s1, [r7]
	// Reset gyro integrators if accel values are near 45 for X consecutive cycles

	float resetAccelTolerance_deg = 1.0;
 8001d4e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
	float resetAccelRollAngle_deg = 0;
 8001d54:	f04f 0300 	mov.w	r3, #0
 8001d58:	623b      	str	r3, [r7, #32]
	float resetAccelPitchAngle_deg = 0;// Angle of system when integrator can be reset
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
	uint8_t resetAccelCntThreshold = 20;
 8001d60:	2314      	movs	r3, #20
 8001d62:	76fb      	strb	r3, [r7, #27]

	float zeroAccelRollUpperThreshold = resetAccelRollAngle_deg + resetAccelTolerance_deg;
 8001d64:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d68:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d70:	edc7 7a05 	vstr	s15, [r7, #20]
	float zeroAccelRollLowerThreshold = resetAccelRollAngle_deg - resetAccelTolerance_deg;
 8001d74:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d78:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d80:	edc7 7a04 	vstr	s15, [r7, #16]

	float zeroAccelPitchUpperThreshold = resetAccelPitchAngle_deg + resetAccelTolerance_deg;
 8001d84:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d88:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d90:	edc7 7a03 	vstr	s15, [r7, #12]
	float zeroAccelPitchLowerThreshold = resetAccelPitchAngle_deg - resetAccelTolerance_deg;
 8001d94:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d98:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001da0:	edc7 7a02 	vstr	s15, [r7, #8]

	if (fabsf(accelRoll_deg) < zeroAccelRollUpperThreshold && fabsf(accelRoll_deg) > zeroAccelRollLowerThreshold){
 8001da4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001da8:	eef0 7ae7 	vabs.f32	s15, s15
 8001dac:	ed97 7a05 	vldr	s14, [r7, #20]
 8001db0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db8:	dd10      	ble.n	8001ddc <ResetGyroIntegrators+0x9c>
 8001dba:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dbe:	eef0 7ae7 	vabs.f32	s15, s15
 8001dc2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001dc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dce:	d505      	bpl.n	8001ddc <ResetGyroIntegrators+0x9c>
		resetAccelRollCount++;
 8001dd0:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <ResetGyroIntegrators+0x128>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	4a24      	ldr	r2, [pc, #144]	; (8001e68 <ResetGyroIntegrators+0x128>)
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	e002      	b.n	8001de2 <ResetGyroIntegrators+0xa2>
	}else{
		resetAccelRollCount = 0;
 8001ddc:	4b22      	ldr	r3, [pc, #136]	; (8001e68 <ResetGyroIntegrators+0x128>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
	}

	if (fabsf(accelPitch_deg) < zeroAccelPitchUpperThreshold && fabsf(accelPitch_deg) > zeroAccelPitchLowerThreshold){
 8001de2:	edd7 7a00 	vldr	s15, [r7]
 8001de6:	eef0 7ae7 	vabs.f32	s15, s15
 8001dea:	ed97 7a03 	vldr	s14, [r7, #12]
 8001dee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df6:	dd10      	ble.n	8001e1a <ResetGyroIntegrators+0xda>
 8001df8:	edd7 7a00 	vldr	s15, [r7]
 8001dfc:	eef0 7ae7 	vabs.f32	s15, s15
 8001e00:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0c:	d505      	bpl.n	8001e1a <ResetGyroIntegrators+0xda>
		resetAccelPitchCount++;
 8001e0e:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <ResetGyroIntegrators+0x12c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	3301      	adds	r3, #1
 8001e14:	4a15      	ldr	r2, [pc, #84]	; (8001e6c <ResetGyroIntegrators+0x12c>)
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	e002      	b.n	8001e20 <ResetGyroIntegrators+0xe0>
	}else{
		resetAccelPitchCount = 0;
 8001e1a:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <ResetGyroIntegrators+0x12c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
	}

	if (resetAccelRollCount == resetAccelCntThreshold){
 8001e20:	7efa      	ldrb	r2, [r7, #27]
 8001e22:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <ResetGyroIntegrators+0x128>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d106      	bne.n	8001e38 <ResetGyroIntegrators+0xf8>
		resetGyroRoll_bool = 1;
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <ResetGyroIntegrators+0x130>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	701a      	strb	r2, [r3, #0]
		resetAccelRollCount = 0;
 8001e30:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <ResetGyroIntegrators+0x128>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	e002      	b.n	8001e3e <ResetGyroIntegrators+0xfe>
	}else{
		resetGyroRoll_bool = 0;
 8001e38:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <ResetGyroIntegrators+0x130>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	701a      	strb	r2, [r3, #0]
	}

	if (resetAccelPitchCount == resetAccelCntThreshold){
 8001e3e:	7efa      	ldrb	r2, [r7, #27]
 8001e40:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <ResetGyroIntegrators+0x12c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d106      	bne.n	8001e56 <ResetGyroIntegrators+0x116>
		resetGyroPitch_bool = 1;
 8001e48:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <ResetGyroIntegrators+0x134>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	701a      	strb	r2, [r3, #0]
		resetAccelPitchCount = 0;
 8001e4e:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <ResetGyroIntegrators+0x12c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
	}else{
		resetGyroPitch_bool = 0;
	}
}
 8001e54:	e002      	b.n	8001e5c <ResetGyroIntegrators+0x11c>
		resetGyroPitch_bool = 0;
 8001e56:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <ResetGyroIntegrators+0x134>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	372c      	adds	r7, #44	; 0x2c
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	200002b4 	.word	0x200002b4
 8001e6c:	200002b8 	.word	0x200002b8
 8001e70:	200002b0 	.word	0x200002b0
 8001e74:	200002b1 	.word	0x200002b1

08001e78 <AccelLowPassFilt>:

static VS_OrientationData_t AccelLowPassFilt(VS_OrientationData_t AccelOrientation){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08e      	sub	sp, #56	; 0x38
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	eef0 6a40 	vmov.f32	s13, s0
 8001e82:	eeb0 7a60 	vmov.f32	s14, s1
 8001e86:	eef0 7a41 	vmov.f32	s15, s2
 8001e8a:	edc7 6a05 	vstr	s13, [r7, #20]
 8001e8e:	ed87 7a06 	vstr	s14, [r7, #24]
 8001e92:	edc7 7a07 	vstr	s15, [r7, #28]
	VS_OrientationData_t FiltAccelOrientation;

	arm_biquad_cascade_df1_f32(&S_AccelRoll, &AccelOrientation.roll_deg, &FiltAccelOrientation.roll_deg, blockSize);
 8001e96:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <AccelLowPassFilt+0x80>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f107 0220 	add.w	r2, r7, #32
 8001e9e:	f107 0114 	add.w	r1, r7, #20
 8001ea2:	4816      	ldr	r0, [pc, #88]	; (8001efc <AccelLowPassFilt+0x84>)
 8001ea4:	f004 fd2e 	bl	8006904 <arm_biquad_cascade_df1_f32>
	arm_biquad_cascade_df1_f32(&S_AccelPitch, &AccelOrientation.pitch_deg, &FiltAccelOrientation.pitch_deg, blockSize);
 8001ea8:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <AccelLowPassFilt+0x80>)
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	f107 0320 	add.w	r3, r7, #32
 8001eb0:	1d1a      	adds	r2, r3, #4
 8001eb2:	f107 0314 	add.w	r3, r7, #20
 8001eb6:	1d19      	adds	r1, r3, #4
 8001eb8:	4603      	mov	r3, r0
 8001eba:	4811      	ldr	r0, [pc, #68]	; (8001f00 <AccelLowPassFilt+0x88>)
 8001ebc:	f004 fd22 	bl	8006904 <arm_biquad_cascade_df1_f32>

	FiltAccelOrientation.yaw_deg = 0;
 8001ec0:	f04f 0300 	mov.w	r3, #0
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28

	return FiltAccelOrientation;
 8001ec6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eca:	f107 0220 	add.w	r2, r7, #32
 8001ece:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ed0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ed4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ed6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eda:	ee06 1a90 	vmov	s13, r1
 8001ede:	ee07 2a10 	vmov	s14, r2
 8001ee2:	ee07 3a90 	vmov	s15, r3
}
 8001ee6:	eeb0 0a66 	vmov.f32	s0, s13
 8001eea:	eef0 0a47 	vmov.f32	s1, s14
 8001eee:	eeb0 1a67 	vmov.f32	s2, s15
 8001ef2:	3738      	adds	r7, #56	; 0x38
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	2000020c 	.word	0x2000020c
 8001f00:	20000218 	.word	0x20000218

08001f04 <ComplimentaryFilter>:

static VS_OrientationData_t ComplimentaryFilter(VS_OrientationData_t GyroOrientation, VS_OrientationData_t FiltAccelOrientation){
 8001f04:	b480      	push	{r7}
 8001f06:	b093      	sub	sp, #76	; 0x4c
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	eeb0 5a40 	vmov.f32	s10, s0
 8001f0e:	eef0 5a60 	vmov.f32	s11, s1
 8001f12:	eeb0 6a41 	vmov.f32	s12, s2
 8001f16:	eef0 6a61 	vmov.f32	s13, s3
 8001f1a:	eeb0 7a42 	vmov.f32	s14, s4
 8001f1e:	eef0 7a62 	vmov.f32	s15, s5
 8001f22:	ed87 5a07 	vstr	s10, [r7, #28]
 8001f26:	edc7 5a08 	vstr	s11, [r7, #32]
 8001f2a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001f2e:	edc7 6a04 	vstr	s13, [r7, #16]
 8001f32:	ed87 7a05 	vstr	s14, [r7, #20]
 8001f36:	edc7 7a06 	vstr	s15, [r7, #24]
	VS_OrientationData_t CompFiltOrientation;

	float alpha = .90;
 8001f3a:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <ComplimentaryFilter+0xc8>)
 8001f3c:	647b      	str	r3, [r7, #68]	; 0x44

	CompFiltOrientation.roll_deg = GyroOrientation.roll_deg * alpha + FiltAccelOrientation.roll_deg * (1 - alpha);
 8001f3e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f42:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f4a:	edd7 6a04 	vldr	s13, [r7, #16]
 8001f4e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001f52:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f56:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001f5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f62:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	CompFiltOrientation.pitch_deg = GyroOrientation.pitch_deg * alpha + FiltAccelOrientation.pitch_deg * (1 - alpha);
 8001f66:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f6a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f72:	edd7 6a05 	vldr	s13, [r7, #20]
 8001f76:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001f7a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f7e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001f82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f8a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	CompFiltOrientation.yaw_deg = 0;
 8001f8e:	f04f 0300 	mov.w	r3, #0
 8001f92:	637b      	str	r3, [r7, #52]	; 0x34

	return CompFiltOrientation;
 8001f94:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f98:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001f9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001fa2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001fa4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fa8:	ee06 1a90 	vmov	s13, r1
 8001fac:	ee07 2a10 	vmov	s14, r2
 8001fb0:	ee07 3a90 	vmov	s15, r3
}
 8001fb4:	eeb0 0a66 	vmov.f32	s0, s13
 8001fb8:	eef0 0a47 	vmov.f32	s1, s14
 8001fbc:	eeb0 1a67 	vmov.f32	s2, s15
 8001fc0:	374c      	adds	r7, #76	; 0x4c
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	3f666666 	.word	0x3f666666

08001fd0 <IO_HardwareInputs>:
 *      Author: aloehr
 */
#include "IO.h"

/* Start global function definitions */
HI_Bus_t IO_HardwareInputs(Config_Bus_t Config_Bus){
 8001fd0:	b084      	sub	sp, #16
 8001fd2:	b590      	push	{r4, r7, lr}
 8001fd4:	b08b      	sub	sp, #44	; 0x2c
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6178      	str	r0, [r7, #20]
 8001fda:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001fde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HI_Bus_t HI_Bus;

	HI_Bus.HI_MPU6050_Bus = HI_MPU6050(Config_Bus.Config_HAL_Bus.hi2c);
 8001fe2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fe4:	463b      	mov	r3, r7
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 f860 	bl	80020ae <HI_MPU6050>
 8001fee:	f107 031c 	add.w	r3, r7, #28
 8001ff2:	463a      	mov	r2, r7
 8001ff4:	6810      	ldr	r0, [r2, #0]
 8001ff6:	6851      	ldr	r1, [r2, #4]
 8001ff8:	6892      	ldr	r2, [r2, #8]
 8001ffa:	c307      	stmia	r3!, {r0, r1, r2}

	return HI_Bus;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	461c      	mov	r4, r3
 8002000:	f107 031c 	add.w	r3, r7, #28
 8002004:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002006:	6020      	str	r0, [r4, #0]
 8002008:	6061      	str	r1, [r4, #4]
 800200a:	60a2      	str	r2, [r4, #8]
}
 800200c:	6978      	ldr	r0, [r7, #20]
 800200e:	372c      	adds	r7, #44	; 0x2c
 8002010:	46bd      	mov	sp, r7
 8002012:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002016:	b004      	add	sp, #16
 8002018:	4770      	bx	lr
	...

0800201c <IO_HardwareOutputs>:

void IO_HardwareOutputs(Config_Bus_t Config_Bus, OP_Bus_t OP_Bus){
 800201c:	b084      	sub	sp, #16
 800201e:	b5b0      	push	{r4, r5, r7, lr}
 8002020:	b090      	sub	sp, #64	; 0x40
 8002022:	af10      	add	r7, sp, #64	; 0x40
 8002024:	f107 0410 	add.w	r4, r7, #16
 8002028:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800202c:	2201      	movs	r2, #1
 800202e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002032:	4813      	ldr	r0, [pc, #76]	; (8002080 <IO_HardwareOutputs+0x64>)
 8002034:	f002 faf8 	bl	8004628 <HAL_GPIO_WritePin>

	HO_VESC(Config_Bus.Config_HAL_Bus.hcan, OP_Bus.OP_VESC_Bus.pTxData);
 8002038:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800203a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f000 f931 	bl	80022a8 <HO_VESC>
	HO_HCO5(Config_Bus.Config_HAL_Bus.huart2, OP_Bus.OP_HC05_Bus.pData, OP_Bus.OP_HC05_Bus.Size);
 8002046:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800204a:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 800204e:	920e      	str	r2, [sp, #56]	; 0x38
 8002050:	930d      	str	r3, [sp, #52]	; 0x34
 8002052:	466d      	mov	r5, sp
 8002054:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8002058:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800205a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800205c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800205e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002062:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002064:	6823      	ldr	r3, [r4, #0]
 8002066:	602b      	str	r3, [r5, #0]
 8002068:	f107 0314 	add.w	r3, r7, #20
 800206c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800206e:	f000 f809 	bl	8002084 <HO_HCO5>
}
 8002072:	bf00      	nop
 8002074:	46bd      	mov	sp, r7
 8002076:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800207a:	b004      	add	sp, #16
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40020c00 	.word	0x40020c00

08002084 <HO_HCO5>:
/* Start Defines */
#define UART_TIMEOUT 50 //MS
/* End Defines */

/* Start Global Function Definitions */
void HO_HCO5(UART_HandleTypeDef huart, const uint8_t *pData, uint16_t Size){
 8002084:	b084      	sub	sp, #16
 8002086:	b580      	push	{r7, lr}
 8002088:	af00      	add	r7, sp, #0
 800208a:	f107 0c08 	add.w	ip, r7, #8
 800208e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart, pData, Size, (uint32_t) UART_TIMEOUT);
 8002092:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002096:	2332      	movs	r3, #50	; 0x32
 8002098:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800209a:	f107 0008 	add.w	r0, r7, #8
 800209e:	f004 f8b0 	bl	8006202 <HAL_UART_Transmit>
}
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020aa:	b004      	add	sp, #16
 80020ac:	4770      	bx	lr

080020ae <HI_MPU6050>:
static MPU6050_RawIMUDataSet_t MPU6050_GetRawAccel(I2C_HandleTypeDef *hi2c);
static MPU6050_RawIMUDataSet_t MPU6050_GetRawGyro(I2C_HandleTypeDef *hi2c);
/* End function prototypes */

/* Start global function definitions */
HI_MPU6050_Bus_t HI_MPU6050(I2C_HandleTypeDef *hi2c){
 80020ae:	b590      	push	{r4, r7, lr}
 80020b0:	b089      	sub	sp, #36	; 0x24
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	60f8      	str	r0, [r7, #12]
 80020b6:	60b9      	str	r1, [r7, #8]
	HI_MPU6050_Bus_t HI_MPU6050_Bus;

	HI_MPU6050_Bus.RawAccel = MPU6050_GetRawAccel(hi2c);
 80020b8:	463b      	mov	r3, r7
 80020ba:	68b9      	ldr	r1, [r7, #8]
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 f81f 	bl	8002100 <MPU6050_GetRawAccel>
 80020c2:	f107 0314 	add.w	r3, r7, #20
 80020c6:	463a      	mov	r2, r7
 80020c8:	6810      	ldr	r0, [r2, #0]
 80020ca:	6018      	str	r0, [r3, #0]
 80020cc:	8892      	ldrh	r2, [r2, #4]
 80020ce:	809a      	strh	r2, [r3, #4]
	HI_MPU6050_Bus.RawGyro = MPU6050_GetRawGyro(hi2c);
 80020d0:	463b      	mov	r3, r7
 80020d2:	68b9      	ldr	r1, [r7, #8]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 f87d 	bl	80021d4 <MPU6050_GetRawGyro>
 80020da:	f107 031a 	add.w	r3, r7, #26
 80020de:	463a      	mov	r2, r7
 80020e0:	6811      	ldr	r1, [r2, #0]
 80020e2:	6019      	str	r1, [r3, #0]
 80020e4:	8892      	ldrh	r2, [r2, #4]
 80020e6:	809a      	strh	r2, [r3, #4]

	return HI_MPU6050_Bus;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	461c      	mov	r4, r3
 80020ec:	f107 0314 	add.w	r3, r7, #20
 80020f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80020f2:	6020      	str	r0, [r4, #0]
 80020f4:	6061      	str	r1, [r4, #4]
 80020f6:	60a2      	str	r2, [r4, #8]
}
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	3724      	adds	r7, #36	; 0x24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd90      	pop	{r4, r7, pc}

08002100 <MPU6050_GetRawAccel>:
/* End global function definitions */

/* Start static function definitions */
static MPU6050_RawIMUDataSet_t MPU6050_GetRawAccel(I2C_HandleTypeDef *hi2c){
 8002100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002104:	b08d      	sub	sp, #52	; 0x34
 8002106:	af04      	add	r7, sp, #16
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	6039      	str	r1, [r7, #0]
 800210c:	466b      	mov	r3, sp
 800210e:	461e      	mov	r6, r3
	MPU6050_RawIMUDataSet_t RawAccel;
	uint8_t	numReg = 6;
 8002110:	2306      	movs	r3, #6
 8002112:	77fb      	strb	r3, [r7, #31]
	uint8_t regData[numReg];
 8002114:	7ff9      	ldrb	r1, [r7, #31]
 8002116:	460b      	mov	r3, r1
 8002118:	3b01      	subs	r3, #1
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	b2cb      	uxtb	r3, r1
 800211e:	2200      	movs	r2, #0
 8002120:	4698      	mov	r8, r3
 8002122:	4691      	mov	r9, r2
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	f04f 0300 	mov.w	r3, #0
 800212c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002130:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002134:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002138:	b2cb      	uxtb	r3, r1
 800213a:	2200      	movs	r2, #0
 800213c:	461c      	mov	r4, r3
 800213e:	4615      	mov	r5, r2
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	f04f 0300 	mov.w	r3, #0
 8002148:	00eb      	lsls	r3, r5, #3
 800214a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800214e:	00e2      	lsls	r2, r4, #3
 8002150:	460b      	mov	r3, r1
 8002152:	3307      	adds	r3, #7
 8002154:	08db      	lsrs	r3, r3, #3
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	ebad 0d03 	sub.w	sp, sp, r3
 800215c:	ab04      	add	r3, sp, #16
 800215e:	3300      	adds	r3, #0
 8002160:	617b      	str	r3, [r7, #20]

	/* Read accel measurement registers and store in regData array */
	HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, ACCEL_OUT_START_REG, REG_LEN, (uint8_t*) &regData, numReg, I2C_TIMEOUT);
 8002162:	7ffb      	ldrb	r3, [r7, #31]
 8002164:	b29b      	uxth	r3, r3
 8002166:	2232      	movs	r2, #50	; 0x32
 8002168:	9202      	str	r2, [sp, #8]
 800216a:	9301      	str	r3, [sp, #4]
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	2301      	movs	r3, #1
 8002172:	223b      	movs	r2, #59	; 0x3b
 8002174:	21d0      	movs	r1, #208	; 0xd0
 8002176:	6838      	ldr	r0, [r7, #0]
 8002178:	f002 fcae 	bl	8004ad8 <HAL_I2C_Mem_Read>

	/* Combine high and low bits to 16 bit integer, update struct contents*/
	RawAccel.XOUT_na = (int16_t) ((regData[0] << 8) | (regData[1]));
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	021b      	lsls	r3, r3, #8
 8002182:	b21a      	sxth	r2, r3
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	785b      	ldrb	r3, [r3, #1]
 8002188:	b21b      	sxth	r3, r3
 800218a:	4313      	orrs	r3, r2
 800218c:	b21b      	sxth	r3, r3
 800218e:	81bb      	strh	r3, [r7, #12]
	RawAccel.YOUT_na = (int16_t) ((regData[2] << 8) | (regData[3]));
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	789b      	ldrb	r3, [r3, #2]
 8002194:	021b      	lsls	r3, r3, #8
 8002196:	b21a      	sxth	r2, r3
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	78db      	ldrb	r3, [r3, #3]
 800219c:	b21b      	sxth	r3, r3
 800219e:	4313      	orrs	r3, r2
 80021a0:	b21b      	sxth	r3, r3
 80021a2:	81fb      	strh	r3, [r7, #14]
	RawAccel.ZOUT_na = (int16_t) ((regData[4] << 8) | (regData[5]));
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	791b      	ldrb	r3, [r3, #4]
 80021a8:	021b      	lsls	r3, r3, #8
 80021aa:	b21a      	sxth	r2, r3
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	795b      	ldrb	r3, [r3, #5]
 80021b0:	b21b      	sxth	r3, r3
 80021b2:	4313      	orrs	r3, r2
 80021b4:	b21b      	sxth	r3, r3
 80021b6:	823b      	strh	r3, [r7, #16]

	/* Return RawAccel struct*/
	return RawAccel;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	461a      	mov	r2, r3
 80021bc:	f107 030c 	add.w	r3, r7, #12
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	6010      	str	r0, [r2, #0]
 80021c4:	889b      	ldrh	r3, [r3, #4]
 80021c6:	8093      	strh	r3, [r2, #4]
 80021c8:	46b5      	mov	sp, r6
}
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	3724      	adds	r7, #36	; 0x24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080021d4 <MPU6050_GetRawGyro>:

static MPU6050_RawIMUDataSet_t MPU6050_GetRawGyro(I2C_HandleTypeDef *hi2c){
 80021d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80021d8:	b08d      	sub	sp, #52	; 0x34
 80021da:	af04      	add	r7, sp, #16
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	6039      	str	r1, [r7, #0]
 80021e0:	466b      	mov	r3, sp
 80021e2:	461e      	mov	r6, r3
	MPU6050_RawIMUDataSet_t RawGyro;
	uint8_t	numReg = 6;
 80021e4:	2306      	movs	r3, #6
 80021e6:	77fb      	strb	r3, [r7, #31]
	uint8_t regData[numReg];
 80021e8:	7ff9      	ldrb	r1, [r7, #31]
 80021ea:	460b      	mov	r3, r1
 80021ec:	3b01      	subs	r3, #1
 80021ee:	61bb      	str	r3, [r7, #24]
 80021f0:	b2cb      	uxtb	r3, r1
 80021f2:	2200      	movs	r2, #0
 80021f4:	4698      	mov	r8, r3
 80021f6:	4691      	mov	r9, r2
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	f04f 0300 	mov.w	r3, #0
 8002200:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002204:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002208:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800220c:	b2cb      	uxtb	r3, r1
 800220e:	2200      	movs	r2, #0
 8002210:	461c      	mov	r4, r3
 8002212:	4615      	mov	r5, r2
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	00eb      	lsls	r3, r5, #3
 800221e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002222:	00e2      	lsls	r2, r4, #3
 8002224:	460b      	mov	r3, r1
 8002226:	3307      	adds	r3, #7
 8002228:	08db      	lsrs	r3, r3, #3
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	ebad 0d03 	sub.w	sp, sp, r3
 8002230:	ab04      	add	r3, sp, #16
 8002232:	3300      	adds	r3, #0
 8002234:	617b      	str	r3, [r7, #20]

	/* Read gyro measurement registers and store in regData array */
	HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, GYRO_OUT_START_REG, REG_LEN, (uint8_t*) &regData, numReg, I2C_TIMEOUT);
 8002236:	7ffb      	ldrb	r3, [r7, #31]
 8002238:	b29b      	uxth	r3, r3
 800223a:	2232      	movs	r2, #50	; 0x32
 800223c:	9202      	str	r2, [sp, #8]
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	2301      	movs	r3, #1
 8002246:	2243      	movs	r2, #67	; 0x43
 8002248:	21d0      	movs	r1, #208	; 0xd0
 800224a:	6838      	ldr	r0, [r7, #0]
 800224c:	f002 fc44 	bl	8004ad8 <HAL_I2C_Mem_Read>

	/* Combine high and low bits to 16 bit integer, update struct contents*/
	RawGyro.XOUT_na = (int16_t) ((regData[0] << 8) | (regData[1]));
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	021b      	lsls	r3, r3, #8
 8002256:	b21a      	sxth	r2, r3
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	785b      	ldrb	r3, [r3, #1]
 800225c:	b21b      	sxth	r3, r3
 800225e:	4313      	orrs	r3, r2
 8002260:	b21b      	sxth	r3, r3
 8002262:	81bb      	strh	r3, [r7, #12]
	RawGyro.YOUT_na = (int16_t) ((regData[2] << 8) | (regData[3]));
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	789b      	ldrb	r3, [r3, #2]
 8002268:	021b      	lsls	r3, r3, #8
 800226a:	b21a      	sxth	r2, r3
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	78db      	ldrb	r3, [r3, #3]
 8002270:	b21b      	sxth	r3, r3
 8002272:	4313      	orrs	r3, r2
 8002274:	b21b      	sxth	r3, r3
 8002276:	81fb      	strh	r3, [r7, #14]
	RawGyro.ZOUT_na = (int16_t) ((regData[4] << 8) | (regData[5]));
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	791b      	ldrb	r3, [r3, #4]
 800227c:	021b      	lsls	r3, r3, #8
 800227e:	b21a      	sxth	r2, r3
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	795b      	ldrb	r3, [r3, #5]
 8002284:	b21b      	sxth	r3, r3
 8002286:	4313      	orrs	r3, r2
 8002288:	b21b      	sxth	r3, r3
 800228a:	823b      	strh	r3, [r7, #16]

	/* Return RawGyro struct*/
	return RawGyro;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	461a      	mov	r2, r3
 8002290:	f107 030c 	add.w	r3, r7, #12
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	6010      	str	r0, [r2, #0]
 8002298:	889b      	ldrh	r3, [r3, #4]
 800229a:	8093      	strh	r3, [r2, #4]
 800229c:	46b5      	mov	sp, r6
}
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	3724      	adds	r7, #36	; 0x24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080022a8 <HO_VESC>:
 */

#include "IO_VESC.h"

/* Start global function definitions */
void HO_VESC(CAN_HandleTypeDef *hcan, uint8_t *TxData){
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80022b2:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <HO_VESC+0x28>)
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	4907      	ldr	r1, [pc, #28]	; (80022d4 <HO_VESC+0x2c>)
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f001 faad 	bl	8003818 <HAL_CAN_AddTxMessage>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <HO_VESC+0x20>
		Error_Handler();
 80022c4:	f000 fc7e 	bl	8002bc4 <Error_Handler>
	}
}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000260 	.word	0x20000260
 80022d4:	20000248 	.word	0x20000248

080022d8 <OP_HC05>:
 *  Created on: Jul 8, 2023
 *      Author: aloehr
 */
#include "PR_HC05.h"

OP_HC05_Bus_t OP_HC05(CT_Log_Bus_t CT_Log_Bus){
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	1d3b      	adds	r3, r7, #4
 80022e2:	e883 0006 	stmia.w	r3, {r1, r2}
	OP_HC05_Bus_t OP_HC05_Bus;

	OP_HC05_Bus.pData = CT_Log_Bus.pData;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	613b      	str	r3, [r7, #16]
	OP_HC05_Bus.Size = CT_Log_Bus.Size;
 80022ea:	893b      	ldrh	r3, [r7, #8]
 80022ec:	82bb      	strh	r3, [r7, #20]

	return OP_HC05_Bus;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	461a      	mov	r2, r3
 80022f2:	f107 0310 	add.w	r3, r7, #16
 80022f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80022fa:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	371c      	adds	r7, #28
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <IP_MPU6050>:
static MPU6050_AccelData_t MPU6050_CalcAccel(MPU6050_RawIMUDataSet_t RawAccel, float accelSens, MPU6050_IMUOffsetData_t IMUOffsets);
static MPU6050_GyroData_t MPU6050_CalcGyro(MPU6050_RawIMUDataSet_t RawGyro, float gyroSens, MPU6050_IMUOffsetData_t IMUOffsets);
/* End Function Prototypes */

/* Start Global Function Definition */
IP_MPU6050_Bus_t IP_MPU6050(HI_MPU6050_Bus_t HI_MPU6050_Bus, Config_MPU6050_Bus_t Config_MPU6050_Bus){
 800230a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800230c:	b091      	sub	sp, #68	; 0x44
 800230e:	af06      	add	r7, sp, #24
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	4638      	mov	r0, r7
 8002314:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	IP_MPU6050_Bus_t IP_MPU6050_Bus;

	IP_MPU6050_Bus.accel = MPU6050_CalcAccel(HI_MPU6050_Bus.RawAccel, Config_MPU6050_Bus.Sensitivity.AccelSens, Config_MPU6050_Bus.Offsets);
 8002318:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800231c:	466d      	mov	r5, sp
 800231e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8002322:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002324:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002326:	6823      	ldr	r3, [r4, #0]
 8002328:	602b      	str	r3, [r5, #0]
 800232a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800232e:	cb0c      	ldmia	r3, {r2, r3}
 8002330:	eeb0 0a67 	vmov.f32	s0, s15
 8002334:	4639      	mov	r1, r7
 8002336:	c903      	ldmia	r1, {r0, r1}
 8002338:	f000 f852 	bl	80023e0 <MPU6050_CalcAccel>
 800233c:	eef0 6a40 	vmov.f32	s13, s0
 8002340:	eeb0 7a60 	vmov.f32	s14, s1
 8002344:	eef0 7a41 	vmov.f32	s15, s2
 8002348:	edc7 6a04 	vstr	s13, [r7, #16]
 800234c:	ed87 7a05 	vstr	s14, [r7, #20]
 8002350:	edc7 7a06 	vstr	s15, [r7, #24]
	IP_MPU6050_Bus.gyro = MPU6050_CalcGyro(HI_MPU6050_Bus.RawGyro, Config_MPU6050_Bus.Sensitivity.GyroSens, Config_MPU6050_Bus.Offsets);
 8002354:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002358:	f8d7 3006 	ldr.w	r3, [r7, #6]
 800235c:	469c      	mov	ip, r3
 800235e:	897b      	ldrh	r3, [r7, #10]
 8002360:	2600      	movs	r6, #0
 8002362:	f363 060f 	bfi	r6, r3, #0, #16
 8002366:	466d      	mov	r5, sp
 8002368:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800236c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800236e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002370:	6823      	ldr	r3, [r4, #0]
 8002372:	602b      	str	r3, [r5, #0]
 8002374:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002378:	cb0c      	ldmia	r3, {r2, r3}
 800237a:	eeb0 0a67 	vmov.f32	s0, s15
 800237e:	4660      	mov	r0, ip
 8002380:	4631      	mov	r1, r6
 8002382:	f000 f895 	bl	80024b0 <MPU6050_CalcGyro>
 8002386:	eef0 6a40 	vmov.f32	s13, s0
 800238a:	eeb0 7a60 	vmov.f32	s14, s1
 800238e:	eef0 7a41 	vmov.f32	s15, s2
 8002392:	edc7 6a07 	vstr	s13, [r7, #28]
 8002396:	ed87 7a08 	vstr	s14, [r7, #32]
 800239a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	if(Config_MPU6050_Bus.Offsets.SensCalibrated_bool){
 800239e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00e      	beq.n	80023c4 <IP_MPU6050+0xba>
		IP_MPU6050_Bus = MPU6050_IMUDataClamp(IP_MPU6050_Bus);
 80023a6:	f107 0510 	add.w	r5, r7, #16
 80023aa:	466c      	mov	r4, sp
 80023ac:	f107 031c 	add.w	r3, r7, #28
 80023b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80023b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80023b8:	f107 0310 	add.w	r3, r7, #16
 80023bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023be:	4628      	mov	r0, r5
 80023c0:	f000 f914 	bl	80025ec <MPU6050_IMUDataClamp>
	}

	return IP_MPU6050_Bus;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	461d      	mov	r5, r3
 80023c8:	f107 0410 	add.w	r4, r7, #16
 80023cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023d4:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	372c      	adds	r7, #44	; 0x2c
 80023dc:	46bd      	mov	sp, r7
 80023de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023e0 <MPU6050_CalcAccel>:
/* End Global Function Definition */

/* Start Static Function Definition */
static MPU6050_AccelData_t MPU6050_CalcAccel(MPU6050_RawIMUDataSet_t RawAccel, float accelSens, MPU6050_IMUOffsetData_t IMUOffsets){
 80023e0:	b082      	sub	sp, #8
 80023e2:	b490      	push	{r4, r7}
 80023e4:	b08e      	sub	sp, #56	; 0x38
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	f107 0418 	add.w	r4, r7, #24
 80023ec:	e884 0003 	stmia.w	r4, {r0, r1}
 80023f0:	ed87 0a05 	vstr	s0, [r7, #20]
 80023f4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80023f8:	e881 000c 	stmia.w	r1, {r2, r3}
	MPU6050_AccelData_t Accel;

	/* Convert bits to g's, store in Accel struct*/
	Accel.XOUT_ms2 = (RawAccel.XOUT_na / accelSens) * g + IMUOffsets.AxOffset;
 80023fc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002400:	ee07 3a90 	vmov	s15, r3
 8002404:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002408:	ed97 7a05 	vldr	s14, [r7, #20]
 800240c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002410:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80024ac <MPU6050_CalcAccel+0xcc>
 8002414:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002418:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800241c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002420:	edc7 7a08 	vstr	s15, [r7, #32]
	Accel.YOUT_ms2 = (RawAccel.YOUT_na / accelSens) * g + IMUOffsets.AyOffset;
 8002424:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002428:	ee07 3a90 	vmov	s15, r3
 800242c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002430:	ed97 7a05 	vldr	s14, [r7, #20]
 8002434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002438:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80024ac <MPU6050_CalcAccel+0xcc>
 800243c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002440:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002444:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002448:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	Accel.ZOUT_ms2 = (RawAccel.ZOUT_na / accelSens) * g + IMUOffsets.AzOffset;
 800244c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002450:	ee07 3a90 	vmov	s15, r3
 8002454:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002458:	ed97 7a05 	vldr	s14, [r7, #20]
 800245c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002460:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80024ac <MPU6050_CalcAccel+0xcc>
 8002464:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002468:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800246c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002470:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	/* Return Accel struct */
	return Accel;
 8002474:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002478:	f107 0220 	add.w	r2, r7, #32
 800247c:	ca07      	ldmia	r2, {r0, r1, r2}
 800247e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002482:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002488:	ee06 1a90 	vmov	s13, r1
 800248c:	ee07 2a10 	vmov	s14, r2
 8002490:	ee07 3a90 	vmov	s15, r3
}
 8002494:	eeb0 0a66 	vmov.f32	s0, s13
 8002498:	eef0 0a47 	vmov.f32	s1, s14
 800249c:	eeb0 1a67 	vmov.f32	s2, s15
 80024a0:	3738      	adds	r7, #56	; 0x38
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc90      	pop	{r4, r7}
 80024a6:	b002      	add	sp, #8
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	411ce7d5 	.word	0x411ce7d5

080024b0 <MPU6050_CalcGyro>:

static MPU6050_GyroData_t MPU6050_CalcGyro(MPU6050_RawIMUDataSet_t RawGyro, float gyroSens, MPU6050_IMUOffsetData_t IMUOffsets){
 80024b0:	b082      	sub	sp, #8
 80024b2:	b490      	push	{r4, r7}
 80024b4:	b08e      	sub	sp, #56	; 0x38
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	f107 0418 	add.w	r4, r7, #24
 80024bc:	e884 0003 	stmia.w	r4, {r0, r1}
 80024c0:	ed87 0a05 	vstr	s0, [r7, #20]
 80024c4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80024c8:	e881 000c 	stmia.w	r1, {r2, r3}
	MPU6050_GyroData_t Gyro;

	/* Convert bits to deg/s, store in Gyro struct*/
	Gyro.XOUT_dps = RawGyro.XOUT_na / gyroSens + IMUOffsets.WxOffset;
 80024cc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80024d0:	ee07 3a90 	vmov	s15, r3
 80024d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80024d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80024dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024e0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80024e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e8:	edc7 7a08 	vstr	s15, [r7, #32]
	Gyro.YOUT_dps = RawGyro.YOUT_na / gyroSens + IMUOffsets.WyOffset;
 80024ec:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80024f0:	ee07 3a90 	vmov	s15, r3
 80024f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80024f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80024fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002500:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002504:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002508:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	Gyro.ZOUT_dps = RawGyro.ZOUT_na / gyroSens + IMUOffsets.WzOffset;
 800250c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002510:	ee07 3a90 	vmov	s15, r3
 8002514:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002518:	edd7 7a05 	vldr	s15, [r7, #20]
 800251c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002520:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002524:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002528:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	/* Return Gyro struct */
	return Gyro;
 800252c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002530:	f107 0220 	add.w	r2, r7, #32
 8002534:	ca07      	ldmia	r2, {r0, r1, r2}
 8002536:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800253a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800253c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800253e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002540:	ee06 1a90 	vmov	s13, r1
 8002544:	ee07 2a10 	vmov	s14, r2
 8002548:	ee07 3a90 	vmov	s15, r3
}
 800254c:	eeb0 0a66 	vmov.f32	s0, s13
 8002550:	eef0 0a47 	vmov.f32	s1, s14
 8002554:	eeb0 1a67 	vmov.f32	s2, s15
 8002558:	3738      	adds	r7, #56	; 0x38
 800255a:	46bd      	mov	sp, r7
 800255c:	bc90      	pop	{r4, r7}
 800255e:	b002      	add	sp, #8
 8002560:	4770      	bx	lr

08002562 <clamp>:

static float clamp(float data, float clampVal, float threshold, uint8_t mode){
 8002562:	b480      	push	{r7}
 8002564:	b087      	sub	sp, #28
 8002566:	af00      	add	r7, sp, #0
 8002568:	ed87 0a03 	vstr	s0, [r7, #12]
 800256c:	edc7 0a02 	vstr	s1, [r7, #8]
 8002570:	ed87 1a01 	vstr	s2, [r7, #4]
 8002574:	4603      	mov	r3, r0
 8002576:	70fb      	strb	r3, [r7, #3]
	// mode = 0: Clamp to clampVal if data below threshold
	// mode = 1: Clamp to clampVal if data above threshold
	float result;

	uint8_t applyClamp_bool = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	74fb      	strb	r3, [r7, #19]

	// Check mode and if clamp is required
	switch(mode){
 800257c:	78fb      	ldrb	r3, [r7, #3]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <clamp+0x26>
 8002582:	2b01      	cmp	r3, #1
 8002584:	d010      	beq.n	80025a8 <clamp+0x46>
 8002586:	e01f      	b.n	80025c8 <clamp+0x66>
	case 0:
		applyClamp_bool = (fabsf(data) < threshold);
 8002588:	edd7 7a03 	vldr	s15, [r7, #12]
 800258c:	eef0 7ae7 	vabs.f32	s15, s15
 8002590:	ed97 7a01 	vldr	s14, [r7, #4]
 8002594:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800259c:	bfcc      	ite	gt
 800259e:	2301      	movgt	r3, #1
 80025a0:	2300      	movle	r3, #0
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	74fb      	strb	r3, [r7, #19]
		break;
 80025a6:	e00f      	b.n	80025c8 <clamp+0x66>

	case 1:
		applyClamp_bool = (fabsf(data) > threshold);
 80025a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80025ac:	eef0 7ae7 	vabs.f32	s15, s15
 80025b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80025b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025bc:	bf4c      	ite	mi
 80025be:	2301      	movmi	r3, #1
 80025c0:	2300      	movpl	r3, #0
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	74fb      	strb	r3, [r7, #19]
		break;
 80025c6:	bf00      	nop
	}

	// Apply clamp if above criteria are met
	if(applyClamp_bool){
 80025c8:	7cfb      	ldrb	r3, [r7, #19]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d002      	beq.n	80025d4 <clamp+0x72>
		result = clampVal;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	617b      	str	r3, [r7, #20]
 80025d2:	e001      	b.n	80025d8 <clamp+0x76>
	} else{
		result = data;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	617b      	str	r3, [r7, #20]
	}

	return result;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	ee07 3a90 	vmov	s15, r3
}
 80025de:	eeb0 0a67 	vmov.f32	s0, s15
 80025e2:	371c      	adds	r7, #28
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <MPU6050_IMUDataClamp>:

static IP_MPU6050_Bus_t MPU6050_IMUDataClamp(IP_MPU6050_Bus_t MPU6050_Bus){
 80025ec:	b084      	sub	sp, #16
 80025ee:	b5b0      	push	{r4, r5, r7, lr}
 80025f0:	b08c      	sub	sp, #48	; 0x30
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80025fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	IP_MPU6050_Bus_t Result_Bus;

	float clampVal = 0;
 80025fe:	f04f 0300 	mov.w	r3, #0
 8002602:	62fb      	str	r3, [r7, #44]	; 0x2c
	float clampThreshold = .05;
 8002604:	4b3d      	ldr	r3, [pc, #244]	; (80026fc <MPU6050_IMUDataClamp+0x110>)
 8002606:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t clampMode = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	Result_Bus.accel.XOUT_ms2 = clamp(MPU6050_Bus.accel.XOUT_ms2, clampVal, clampThreshold, clampMode);
 800260e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002612:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002616:	4618      	mov	r0, r3
 8002618:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 800261c:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8002620:	eeb0 0a67 	vmov.f32	s0, s15
 8002624:	f7ff ff9d 	bl	8002562 <clamp>
 8002628:	eef0 7a40 	vmov.f32	s15, s0
 800262c:	edc7 7a03 	vstr	s15, [r7, #12]
	Result_Bus.accel.YOUT_ms2 = clamp(MPU6050_Bus.accel.YOUT_ms2, clampVal, clampThreshold, clampMode);
 8002630:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002638:	4618      	mov	r0, r3
 800263a:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 800263e:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8002642:	eeb0 0a67 	vmov.f32	s0, s15
 8002646:	f7ff ff8c 	bl	8002562 <clamp>
 800264a:	eef0 7a40 	vmov.f32	s15, s0
 800264e:	edc7 7a04 	vstr	s15, [r7, #16]
	Result_Bus.accel.ZOUT_ms2 = clamp(MPU6050_Bus.accel.ZOUT_ms2, clampVal, clampThreshold, clampMode);
 8002652:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002656:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800265a:	4618      	mov	r0, r3
 800265c:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 8002660:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8002664:	eeb0 0a67 	vmov.f32	s0, s15
 8002668:	f7ff ff7b 	bl	8002562 <clamp>
 800266c:	eef0 7a40 	vmov.f32	s15, s0
 8002670:	edc7 7a05 	vstr	s15, [r7, #20]

	Result_Bus.gyro.XOUT_dps = clamp(MPU6050_Bus.gyro.XOUT_dps , clampVal, clampThreshold, clampMode);
 8002674:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800267c:	4618      	mov	r0, r3
 800267e:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 8002682:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8002686:	eeb0 0a67 	vmov.f32	s0, s15
 800268a:	f7ff ff6a 	bl	8002562 <clamp>
 800268e:	eef0 7a40 	vmov.f32	s15, s0
 8002692:	edc7 7a06 	vstr	s15, [r7, #24]
	Result_Bus.gyro.YOUT_dps = clamp(MPU6050_Bus.gyro.YOUT_dps , clampVal, clampThreshold, clampMode);
 8002696:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800269a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800269e:	4618      	mov	r0, r3
 80026a0:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 80026a4:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 80026a8:	eeb0 0a67 	vmov.f32	s0, s15
 80026ac:	f7ff ff59 	bl	8002562 <clamp>
 80026b0:	eef0 7a40 	vmov.f32	s15, s0
 80026b4:	edc7 7a07 	vstr	s15, [r7, #28]
	Result_Bus.gyro.ZOUT_dps = clamp(MPU6050_Bus.gyro.ZOUT_dps , clampVal, clampThreshold, clampMode);
 80026b8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80026bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026c0:	4618      	mov	r0, r3
 80026c2:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 80026c6:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 80026ca:	eeb0 0a67 	vmov.f32	s0, s15
 80026ce:	f7ff ff48 	bl	8002562 <clamp>
 80026d2:	eef0 7a40 	vmov.f32	s15, s0
 80026d6:	edc7 7a08 	vstr	s15, [r7, #32]

	return Result_Bus;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	461d      	mov	r5, r3
 80026de:	f107 040c 	add.w	r4, r7, #12
 80026e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026ea:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	3730      	adds	r7, #48	; 0x30
 80026f2:	46bd      	mov	sp, r7
 80026f4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80026f8:	b004      	add	sp, #16
 80026fa:	4770      	bx	lr
 80026fc:	3d4ccccd 	.word	0x3d4ccccd

08002700 <OP_VESC>:
static void CANPackMotorSpeed(int32_t speed);
static int8_t llsign(uint32_t x);
/* End function prototypes */

/* Start global function definitions */
OP_VESC_Bus_t OP_VESC(int32_t MotorSpeed_rpm){
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
	OP_VESC_Bus_t OP_VESC_Bus;

	int32_t MotorSpeed_erpm = MotorSpeed_rpm * (NUM_POLE_PAIRS);
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	1a9b      	subs	r3, r3, r2
 8002710:	60fb      	str	r3, [r7, #12]

	// Limit speed request
	if(llabs(MotorSpeed_erpm) > MAX_SPEED_ERPM){
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2b00      	cmp	r3, #0
 8002716:	bfb8      	it	lt
 8002718:	425b      	neglt	r3, r3
 800271a:	4a0b      	ldr	r2, [pc, #44]	; (8002748 <OP_VESC+0x48>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d909      	bls.n	8002734 <OP_VESC+0x34>
		MotorSpeed_erpm = MAX_SPEED_ERPM * llsign(MotorSpeed_erpm);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4618      	mov	r0, r3
 8002724:	f000 f834 	bl	8002790 <llsign>
 8002728:	4603      	mov	r3, r0
 800272a:	461a      	mov	r2, r3
 800272c:	4b06      	ldr	r3, [pc, #24]	; (8002748 <OP_VESC+0x48>)
 800272e:	fb02 f303 	mul.w	r3, r2, r3
 8002732:	60fb      	str	r3, [r7, #12]
	}

	CANPackMotorSpeed(MotorSpeed_erpm);
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 f80b 	bl	8002750 <CANPackMotorSpeed>

	OP_VESC_Bus.pTxData = SpeedReqPayload;
 800273a:	4b04      	ldr	r3, [pc, #16]	; (800274c <OP_VESC+0x4c>)
 800273c:	60bb      	str	r3, [r7, #8]

	return OP_VESC_Bus;
 800273e:	68bb      	ldr	r3, [r7, #8]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	00012cc8 	.word	0x00012cc8
 800274c:	200002c8 	.word	0x200002c8

08002750 <CANPackMotorSpeed>:

/* End global function definitions */

/* Start static function definitions */
static void CANPackMotorSpeed(int32_t speed){
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
	SpeedReqPayload[0] = speed >> 24;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	161b      	asrs	r3, r3, #24
 800275c:	b2da      	uxtb	r2, r3
 800275e:	4b0b      	ldr	r3, [pc, #44]	; (800278c <CANPackMotorSpeed+0x3c>)
 8002760:	701a      	strb	r2, [r3, #0]
	SpeedReqPayload[1] = (speed >> 16) & 0xFF;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	141b      	asrs	r3, r3, #16
 8002766:	b2da      	uxtb	r2, r3
 8002768:	4b08      	ldr	r3, [pc, #32]	; (800278c <CANPackMotorSpeed+0x3c>)
 800276a:	705a      	strb	r2, [r3, #1]
	SpeedReqPayload[2] = (speed >> 8) & 0xFF;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	121b      	asrs	r3, r3, #8
 8002770:	b2da      	uxtb	r2, r3
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <CANPackMotorSpeed+0x3c>)
 8002774:	709a      	strb	r2, [r3, #2]
	SpeedReqPayload[3] = speed & 0xFF;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	b2da      	uxtb	r2, r3
 800277a:	4b04      	ldr	r3, [pc, #16]	; (800278c <CANPackMotorSpeed+0x3c>)
 800277c:	70da      	strb	r2, [r3, #3]
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	200002c8 	.word	0x200002c8

08002790 <llsign>:

static int8_t llsign(uint32_t x){
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
	int8_t sign;

	if (x > 0){
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <llsign+0x14>
		sign = 1;
 800279e:	2301      	movs	r3, #1
 80027a0:	73fb      	strb	r3, [r7, #15]
 80027a2:	e001      	b.n	80027a8 <llsign+0x18>
	}
	else if (x < 0) {
		sign = -1;
	}
	else {
		sign = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	73fb      	strb	r3, [r7, #15]
	}

	return sign;
 80027a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <PR_InputProcessing>:
 */

#include "Processing.h"

/* Start global function definitions */
IP_Bus_t PR_InputProcessing(Config_Bus_t Config_Bus, HI_Bus_t HI_Bus){
 80027b8:	b084      	sub	sp, #16
 80027ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027bc:	b099      	sub	sp, #100	; 0x64
 80027be:	af0a      	add	r7, sp, #40	; 0x28
 80027c0:	61f8      	str	r0, [r7, #28]
 80027c2:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80027c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	IP_Bus_t IP_Bus;

	IP_Bus.IP_MPU6050_Bus = IP_MPU6050(HI_Bus.HI_MPU6050_Bus, Config_Bus.Config_MPU6050_Bus);
 80027ca:	463e      	mov	r6, r7
 80027cc:	466d      	mov	r5, sp
 80027ce:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 80027d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027da:	6823      	ldr	r3, [r4, #0]
 80027dc:	602b      	str	r3, [r5, #0]
 80027de:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80027e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027e4:	4630      	mov	r0, r6
 80027e6:	f7ff fd90 	bl	800230a <IP_MPU6050>
 80027ea:	f107 0420 	add.w	r4, r7, #32
 80027ee:	463d      	mov	r5, r7
 80027f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80027f8:	e884 0003 	stmia.w	r4, {r0, r1}

	return IP_Bus;
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	461d      	mov	r5, r3
 8002800:	f107 0420 	add.w	r4, r7, #32
 8002804:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002806:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002808:	e894 0003 	ldmia.w	r4, {r0, r1}
 800280c:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002810:	69f8      	ldr	r0, [r7, #28]
 8002812:	373c      	adds	r7, #60	; 0x3c
 8002814:	46bd      	mov	sp, r7
 8002816:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800281a:	b004      	add	sp, #16
 800281c:	4770      	bx	lr

0800281e <PR_OutputProcessing>:

OP_Bus_t PR_OutputProcessing(CT_Bus_t CT_Bus){
 800281e:	b084      	sub	sp, #16
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b089      	sub	sp, #36	; 0x24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800282c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	OP_Bus_t OP_Bus;

	OP_Bus.OP_HC05_Bus = OP_HC05(CT_Bus.CT_Log_Bus);
 8002830:	4638      	mov	r0, r7
 8002832:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002836:	e893 0006 	ldmia.w	r3, {r1, r2}
 800283a:	f7ff fd4d 	bl	80022d8 <OP_HC05>
 800283e:	f107 0314 	add.w	r3, r7, #20
 8002842:	463a      	mov	r2, r7
 8002844:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002848:	e883 0003 	stmia.w	r3, {r0, r1}
	OP_Bus.OP_VESC_Bus = OP_VESC(CT_Bus.CT_Balance_Bus.MotorSpeedReq_rpm);
 800284c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff ff56 	bl	8002700 <OP_VESC>
 8002854:	61f8      	str	r0, [r7, #28]

	return OP_Bus;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	461c      	mov	r4, r3
 800285a:	f107 0314 	add.w	r3, r7, #20
 800285e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002862:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	3724      	adds	r7, #36	; 0x24
 800286a:	46bd      	mov	sp, r7
 800286c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002870:	b004      	add	sp, #16
 8002872:	4770      	bx	lr

08002874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002876:	b0c9      	sub	sp, #292	; 0x124
 8002878:	af18      	add	r7, sp, #96	; 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800287a:	f000 fc1d 	bl	80030b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800287e:	f000 f83b 	bl	80028f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002882:	f000 f931 	bl	8002ae8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002886:	f000 f905 	bl	8002a94 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 800288a:	f000 f89f 	bl	80029cc <MX_CAN1_Init>
  MX_I2C3_Init();
 800288e:	f000 f8d3 	bl	8002a38 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  // Make these all pointers later
  // Req for CAN or else you won't actually be updating the CAN peripheral. This will cause an infinite loop in RxInterupt
  Config_HAL_Bus_t Config_HAL_Bus = {&hi2c3, huart2, &hcan1};
 8002892:	4b16      	ldr	r3, [pc, #88]	; (80028ec <main+0x78>)
 8002894:	677b      	str	r3, [r7, #116]	; 0x74
 8002896:	4a16      	ldr	r2, [pc, #88]	; (80028f0 <main+0x7c>)
 8002898:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800289c:	4611      	mov	r1, r2
 800289e:	2244      	movs	r2, #68	; 0x44
 80028a0:	4618      	mov	r0, r3
 80028a2:	f004 ff25 	bl	80076f0 <memcpy>
 80028a6:	4b13      	ldr	r3, [pc, #76]	; (80028f4 <main+0x80>)
 80028a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  Config_Bus_t Config_Bus;
  Config_Bus = App_Config(Config_HAL_Bus);
 80028ac:	1d3e      	adds	r6, r7, #4
 80028ae:	466d      	mov	r5, sp
 80028b0:	f107 0480 	add.w	r4, r7, #128	; 0x80
 80028b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80028c4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80028c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80028cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028ce:	4630      	mov	r0, r6
 80028d0:	f7fe fb38 	bl	8000f44 <App_Config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  App_Main(Config_Bus);
 80028d4:	4668      	mov	r0, sp
 80028d6:	f107 0314 	add.w	r3, r7, #20
 80028da:	2260      	movs	r2, #96	; 0x60
 80028dc:	4619      	mov	r1, r3
 80028de:	f004 ff07 	bl	80076f0 <memcpy>
 80028e2:	1d3b      	adds	r3, r7, #4
 80028e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028e6:	f7fe fb75 	bl	8000fd4 <App_Main>
 80028ea:	e7f3      	b.n	80028d4 <main+0x60>
 80028ec:	20000330 	.word	0x20000330
 80028f0:	20000384 	.word	0x20000384
 80028f4:	200002cc 	.word	0x200002cc

080028f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b094      	sub	sp, #80	; 0x50
 80028fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028fe:	f107 0320 	add.w	r3, r7, #32
 8002902:	2230      	movs	r2, #48	; 0x30
 8002904:	2100      	movs	r1, #0
 8002906:	4618      	mov	r0, r3
 8002908:	f004 fe73 	bl	80075f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800290c:	f107 030c 	add.w	r3, r7, #12
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	60da      	str	r2, [r3, #12]
 800291a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800291c:	2300      	movs	r3, #0
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	4b28      	ldr	r3, [pc, #160]	; (80029c4 <SystemClock_Config+0xcc>)
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	4a27      	ldr	r2, [pc, #156]	; (80029c4 <SystemClock_Config+0xcc>)
 8002926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292a:	6413      	str	r3, [r2, #64]	; 0x40
 800292c:	4b25      	ldr	r3, [pc, #148]	; (80029c4 <SystemClock_Config+0xcc>)
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002938:	2300      	movs	r3, #0
 800293a:	607b      	str	r3, [r7, #4]
 800293c:	4b22      	ldr	r3, [pc, #136]	; (80029c8 <SystemClock_Config+0xd0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a21      	ldr	r2, [pc, #132]	; (80029c8 <SystemClock_Config+0xd0>)
 8002942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002946:	6013      	str	r3, [r2, #0]
 8002948:	4b1f      	ldr	r3, [pc, #124]	; (80029c8 <SystemClock_Config+0xd0>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002950:	607b      	str	r3, [r7, #4]
 8002952:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002954:	2301      	movs	r3, #1
 8002956:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002958:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800295e:	2302      	movs	r3, #2
 8002960:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002962:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002966:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002968:	2308      	movs	r3, #8
 800296a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800296c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002970:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002972:	2302      	movs	r3, #2
 8002974:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002976:	2307      	movs	r3, #7
 8002978:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800297a:	f107 0320 	add.w	r3, r7, #32
 800297e:	4618      	mov	r0, r3
 8002980:	f002 ff5a 	bl	8005838 <HAL_RCC_OscConfig>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800298a:	f000 f91b 	bl	8002bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800298e:	230f      	movs	r3, #15
 8002990:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002992:	2302      	movs	r3, #2
 8002994:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800299a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800299e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80029a6:	f107 030c 	add.w	r3, r7, #12
 80029aa:	2105      	movs	r1, #5
 80029ac:	4618      	mov	r0, r3
 80029ae:	f003 f9bb 	bl	8005d28 <HAL_RCC_ClockConfig>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80029b8:	f000 f904 	bl	8002bc4 <Error_Handler>
  }
}
 80029bc:	bf00      	nop
 80029be:	3750      	adds	r7, #80	; 0x50
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40007000 	.word	0x40007000

080029cc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80029d0:	4b17      	ldr	r3, [pc, #92]	; (8002a30 <MX_CAN1_Init+0x64>)
 80029d2:	4a18      	ldr	r2, [pc, #96]	; (8002a34 <MX_CAN1_Init+0x68>)
 80029d4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80029d6:	4b16      	ldr	r3, [pc, #88]	; (8002a30 <MX_CAN1_Init+0x64>)
 80029d8:	2206      	movs	r2, #6
 80029da:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80029dc:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <MX_CAN1_Init+0x64>)
 80029de:	2200      	movs	r2, #0
 80029e0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80029e2:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <MX_CAN1_Init+0x64>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80029e8:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <MX_CAN1_Init+0x64>)
 80029ea:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80029ee:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80029f0:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <MX_CAN1_Init+0x64>)
 80029f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80029f6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80029f8:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <MX_CAN1_Init+0x64>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80029fe:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <MX_CAN1_Init+0x64>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002a04:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <MX_CAN1_Init+0x64>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8002a0a:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <MX_CAN1_Init+0x64>)
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002a10:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <MX_CAN1_Init+0x64>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <MX_CAN1_Init+0x64>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002a1c:	4804      	ldr	r0, [pc, #16]	; (8002a30 <MX_CAN1_Init+0x64>)
 8002a1e:	f000 fbe1 	bl	80031e4 <HAL_CAN_Init>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002a28:	f000 f8cc 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002a2c:	bf00      	nop
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	200002cc 	.word	0x200002cc
 8002a34:	40006400 	.word	0x40006400

08002a38 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002a3c:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <MX_I2C3_Init+0x50>)
 8002a3e:	4a13      	ldr	r2, [pc, #76]	; (8002a8c <MX_I2C3_Init+0x54>)
 8002a40:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8002a42:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <MX_I2C3_Init+0x50>)
 8002a44:	4a12      	ldr	r2, [pc, #72]	; (8002a90 <MX_I2C3_Init+0x58>)
 8002a46:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a48:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <MX_I2C3_Init+0x50>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002a4e:	4b0e      	ldr	r3, [pc, #56]	; (8002a88 <MX_I2C3_Init+0x50>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a54:	4b0c      	ldr	r3, [pc, #48]	; (8002a88 <MX_I2C3_Init+0x50>)
 8002a56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a5a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a5c:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <MX_I2C3_Init+0x50>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002a62:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <MX_I2C3_Init+0x50>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a68:	4b07      	ldr	r3, [pc, #28]	; (8002a88 <MX_I2C3_Init+0x50>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a6e:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <MX_I2C3_Init+0x50>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002a74:	4804      	ldr	r0, [pc, #16]	; (8002a88 <MX_I2C3_Init+0x50>)
 8002a76:	f001 fdf1 	bl	800465c <HAL_I2C_Init>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002a80:	f000 f8a0 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002a84:	bf00      	nop
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20000330 	.word	0x20000330
 8002a8c:	40005c00 	.word	0x40005c00
 8002a90:	00061a80 	.word	0x00061a80

08002a94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a98:	4b11      	ldr	r3, [pc, #68]	; (8002ae0 <MX_USART2_UART_Init+0x4c>)
 8002a9a:	4a12      	ldr	r2, [pc, #72]	; (8002ae4 <MX_USART2_UART_Init+0x50>)
 8002a9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8002a9e:	4b10      	ldr	r3, [pc, #64]	; (8002ae0 <MX_USART2_UART_Init+0x4c>)
 8002aa0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8002aa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002aa6:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <MX_USART2_UART_Init+0x4c>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002aac:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <MX_USART2_UART_Init+0x4c>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ab2:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <MX_USART2_UART_Init+0x4c>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ab8:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <MX_USART2_UART_Init+0x4c>)
 8002aba:	220c      	movs	r2, #12
 8002abc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002abe:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <MX_USART2_UART_Init+0x4c>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ac4:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <MX_USART2_UART_Init+0x4c>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002aca:	4805      	ldr	r0, [pc, #20]	; (8002ae0 <MX_USART2_UART_Init+0x4c>)
 8002acc:	f003 fb4c 	bl	8006168 <HAL_UART_Init>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002ad6:	f000 f875 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000384 	.word	0x20000384
 8002ae4:	40004400 	.word	0x40004400

08002ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b08a      	sub	sp, #40	; 0x28
 8002aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aee:	f107 0314 	add.w	r3, r7, #20
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	605a      	str	r2, [r3, #4]
 8002af8:	609a      	str	r2, [r3, #8]
 8002afa:	60da      	str	r2, [r3, #12]
 8002afc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	4b2e      	ldr	r3, [pc, #184]	; (8002bbc <MX_GPIO_Init+0xd4>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	4a2d      	ldr	r2, [pc, #180]	; (8002bbc <MX_GPIO_Init+0xd4>)
 8002b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0e:	4b2b      	ldr	r3, [pc, #172]	; (8002bbc <MX_GPIO_Init+0xd4>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b16:	613b      	str	r3, [r7, #16]
 8002b18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	4b27      	ldr	r3, [pc, #156]	; (8002bbc <MX_GPIO_Init+0xd4>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	4a26      	ldr	r2, [pc, #152]	; (8002bbc <MX_GPIO_Init+0xd4>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2a:	4b24      	ldr	r3, [pc, #144]	; (8002bbc <MX_GPIO_Init+0xd4>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	4b20      	ldr	r3, [pc, #128]	; (8002bbc <MX_GPIO_Init+0xd4>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	4a1f      	ldr	r2, [pc, #124]	; (8002bbc <MX_GPIO_Init+0xd4>)
 8002b40:	f043 0308 	orr.w	r3, r3, #8
 8002b44:	6313      	str	r3, [r2, #48]	; 0x30
 8002b46:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <MX_GPIO_Init+0xd4>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	60bb      	str	r3, [r7, #8]
 8002b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	607b      	str	r3, [r7, #4]
 8002b56:	4b19      	ldr	r3, [pc, #100]	; (8002bbc <MX_GPIO_Init+0xd4>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	4a18      	ldr	r2, [pc, #96]	; (8002bbc <MX_GPIO_Init+0xd4>)
 8002b5c:	f043 0304 	orr.w	r3, r3, #4
 8002b60:	6313      	str	r3, [r2, #48]	; 0x30
 8002b62:	4b16      	ldr	r3, [pc, #88]	; (8002bbc <MX_GPIO_Init+0xd4>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	f003 0304 	and.w	r3, r3, #4
 8002b6a:	607b      	str	r3, [r7, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	603b      	str	r3, [r7, #0]
 8002b72:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <MX_GPIO_Init+0xd4>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	4a11      	ldr	r2, [pc, #68]	; (8002bbc <MX_GPIO_Init+0xd4>)
 8002b78:	f043 0302 	orr.w	r3, r3, #2
 8002b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7e:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <MX_GPIO_Init+0xd4>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_Led_Pin|Orange_Led_Pin|Red_Led_Pin, GPIO_PIN_RESET);
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8002b90:	480b      	ldr	r0, [pc, #44]	; (8002bc0 <MX_GPIO_Init+0xd8>)
 8002b92:	f001 fd49 	bl	8004628 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Green_Led_Pin Orange_Led_Pin Red_Led_Pin */
  GPIO_InitStruct.Pin = Green_Led_Pin|Orange_Led_Pin|Red_Led_Pin;
 8002b96:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ba8:	f107 0314 	add.w	r3, r7, #20
 8002bac:	4619      	mov	r1, r3
 8002bae:	4804      	ldr	r0, [pc, #16]	; (8002bc0 <MX_GPIO_Init+0xd8>)
 8002bb0:	f001 fb9e 	bl	80042f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002bb4:	bf00      	nop
 8002bb6:	3728      	adds	r7, #40	; 0x28
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	40020c00 	.word	0x40020c00

08002bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bce:	4809      	ldr	r0, [pc, #36]	; (8002bf4 <Error_Handler+0x30>)
 8002bd0:	f001 fd2a 	bl	8004628 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bda:	4806      	ldr	r0, [pc, #24]	; (8002bf4 <Error_Handler+0x30>)
 8002bdc:	f001 fd24 	bl	8004628 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002be0:	2201      	movs	r2, #1
 8002be2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002be6:	4803      	ldr	r0, [pc, #12]	; (8002bf4 <Error_Handler+0x30>)
 8002be8:	f001 fd1e 	bl	8004628 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bec:	b672      	cpsid	i
}
 8002bee:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bf0:	e7fe      	b.n	8002bf0 <Error_Handler+0x2c>
 8002bf2:	bf00      	nop
 8002bf4:	40020c00 	.word	0x40020c00

08002bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	607b      	str	r3, [r7, #4]
 8002c02:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <HAL_MspInit+0x4c>)
 8002c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c06:	4a0f      	ldr	r2, [pc, #60]	; (8002c44 <HAL_MspInit+0x4c>)
 8002c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c0e:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <HAL_MspInit+0x4c>)
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c16:	607b      	str	r3, [r7, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	603b      	str	r3, [r7, #0]
 8002c1e:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <HAL_MspInit+0x4c>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	4a08      	ldr	r2, [pc, #32]	; (8002c44 <HAL_MspInit+0x4c>)
 8002c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c28:	6413      	str	r3, [r2, #64]	; 0x40
 8002c2a:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <HAL_MspInit+0x4c>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c32:	603b      	str	r3, [r7, #0]
 8002c34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c36:	2007      	movs	r0, #7
 8002c38:	f001 fb18 	bl	800426c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c3c:	bf00      	nop
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40023800 	.word	0x40023800

08002c48 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08a      	sub	sp, #40	; 0x28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c50:	f107 0314 	add.w	r3, r7, #20
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
 8002c5e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a1d      	ldr	r2, [pc, #116]	; (8002cdc <HAL_CAN_MspInit+0x94>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d134      	bne.n	8002cd4 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ce0 <HAL_CAN_MspInit+0x98>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	4a1b      	ldr	r2, [pc, #108]	; (8002ce0 <HAL_CAN_MspInit+0x98>)
 8002c74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c78:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7a:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <HAL_CAN_MspInit+0x98>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <HAL_CAN_MspInit+0x98>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	4a14      	ldr	r2, [pc, #80]	; (8002ce0 <HAL_CAN_MspInit+0x98>)
 8002c90:	f043 0302 	orr.w	r3, r3, #2
 8002c94:	6313      	str	r3, [r2, #48]	; 0x30
 8002c96:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <HAL_CAN_MspInit+0x98>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ca2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002cb4:	2309      	movs	r3, #9
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb8:	f107 0314 	add.w	r3, r7, #20
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4809      	ldr	r0, [pc, #36]	; (8002ce4 <HAL_CAN_MspInit+0x9c>)
 8002cc0:	f001 fb16 	bl	80042f0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	2014      	movs	r0, #20
 8002cca:	f001 fada 	bl	8004282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002cce:	2014      	movs	r0, #20
 8002cd0:	f001 faf3 	bl	80042ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002cd4:	bf00      	nop
 8002cd6:	3728      	adds	r7, #40	; 0x28
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40006400 	.word	0x40006400
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	40020400 	.word	0x40020400

08002ce8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08a      	sub	sp, #40	; 0x28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf0:	f107 0314 	add.w	r3, r7, #20
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	60da      	str	r2, [r3, #12]
 8002cfe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a29      	ldr	r2, [pc, #164]	; (8002dac <HAL_I2C_MspInit+0xc4>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d14b      	bne.n	8002da2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	4b28      	ldr	r3, [pc, #160]	; (8002db0 <HAL_I2C_MspInit+0xc8>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	4a27      	ldr	r2, [pc, #156]	; (8002db0 <HAL_I2C_MspInit+0xc8>)
 8002d14:	f043 0304 	orr.w	r3, r3, #4
 8002d18:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1a:	4b25      	ldr	r3, [pc, #148]	; (8002db0 <HAL_I2C_MspInit+0xc8>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	613b      	str	r3, [r7, #16]
 8002d24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	4b21      	ldr	r3, [pc, #132]	; (8002db0 <HAL_I2C_MspInit+0xc8>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	4a20      	ldr	r2, [pc, #128]	; (8002db0 <HAL_I2C_MspInit+0xc8>)
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	6313      	str	r3, [r2, #48]	; 0x30
 8002d36:	4b1e      	ldr	r3, [pc, #120]	; (8002db0 <HAL_I2C_MspInit+0xc8>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d48:	2312      	movs	r3, #18
 8002d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d50:	2303      	movs	r3, #3
 8002d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d54:	2304      	movs	r3, #4
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d58:	f107 0314 	add.w	r3, r7, #20
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4815      	ldr	r0, [pc, #84]	; (8002db4 <HAL_I2C_MspInit+0xcc>)
 8002d60:	f001 fac6 	bl	80042f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d6a:	2312      	movs	r3, #18
 8002d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d72:	2303      	movs	r3, #3
 8002d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d76:	2304      	movs	r3, #4
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7a:	f107 0314 	add.w	r3, r7, #20
 8002d7e:	4619      	mov	r1, r3
 8002d80:	480d      	ldr	r0, [pc, #52]	; (8002db8 <HAL_I2C_MspInit+0xd0>)
 8002d82:	f001 fab5 	bl	80042f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <HAL_I2C_MspInit+0xc8>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	4a08      	ldr	r2, [pc, #32]	; (8002db0 <HAL_I2C_MspInit+0xc8>)
 8002d90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d94:	6413      	str	r3, [r2, #64]	; 0x40
 8002d96:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <HAL_I2C_MspInit+0xc8>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d9e:	60bb      	str	r3, [r7, #8]
 8002da0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002da2:	bf00      	nop
 8002da4:	3728      	adds	r7, #40	; 0x28
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40005c00 	.word	0x40005c00
 8002db0:	40023800 	.word	0x40023800
 8002db4:	40020800 	.word	0x40020800
 8002db8:	40020000 	.word	0x40020000

08002dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08a      	sub	sp, #40	; 0x28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc4:	f107 0314 	add.w	r3, r7, #20
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	60da      	str	r2, [r3, #12]
 8002dd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a19      	ldr	r2, [pc, #100]	; (8002e40 <HAL_UART_MspInit+0x84>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d12b      	bne.n	8002e36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	4b18      	ldr	r3, [pc, #96]	; (8002e44 <HAL_UART_MspInit+0x88>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	4a17      	ldr	r2, [pc, #92]	; (8002e44 <HAL_UART_MspInit+0x88>)
 8002de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dec:	6413      	str	r3, [r2, #64]	; 0x40
 8002dee:	4b15      	ldr	r3, [pc, #84]	; (8002e44 <HAL_UART_MspInit+0x88>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <HAL_UART_MspInit+0x88>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	4a10      	ldr	r2, [pc, #64]	; (8002e44 <HAL_UART_MspInit+0x88>)
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0a:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <HAL_UART_MspInit+0x88>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e16:	230c      	movs	r3, #12
 8002e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e22:	2303      	movs	r3, #3
 8002e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e26:	2307      	movs	r3, #7
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e2a:	f107 0314 	add.w	r3, r7, #20
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4805      	ldr	r0, [pc, #20]	; (8002e48 <HAL_UART_MspInit+0x8c>)
 8002e32:	f001 fa5d 	bl	80042f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e36:	bf00      	nop
 8002e38:	3728      	adds	r7, #40	; 0x28
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40004400 	.word	0x40004400
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40020000 	.word	0x40020000

08002e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e50:	e7fe      	b.n	8002e50 <NMI_Handler+0x4>

08002e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e52:	b480      	push	{r7}
 8002e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e56:	e7fe      	b.n	8002e56 <HardFault_Handler+0x4>

08002e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e5c:	e7fe      	b.n	8002e5c <MemManage_Handler+0x4>

08002e5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e62:	e7fe      	b.n	8002e62 <BusFault_Handler+0x4>

08002e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e68:	e7fe      	b.n	8002e68 <UsageFault_Handler+0x4>

08002e6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e86:	b480      	push	{r7}
 8002e88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e8a:	bf00      	nop
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e98:	f000 f960 	bl	800315c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e9c:	bf00      	nop
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002ea4:	4802      	ldr	r0, [pc, #8]	; (8002eb0 <CAN1_RX0_IRQHandler+0x10>)
 8002ea6:	f000 feca 	bl	8003c3e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	200002cc 	.word	0x200002cc

08002eb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return 1;
 8002eb8:	2301      	movs	r3, #1
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <_kill>:

int _kill(int pid, int sig)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ece:	f004 fbe3 	bl	8007698 <__errno>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2216      	movs	r2, #22
 8002ed6:	601a      	str	r2, [r3, #0]
  return -1;
 8002ed8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <_exit>:

void _exit (int status)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002eec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff ffe7 	bl	8002ec4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ef6:	e7fe      	b.n	8002ef6 <_exit+0x12>

08002ef8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f04:	2300      	movs	r3, #0
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	e00a      	b.n	8002f20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f0a:	f3af 8000 	nop.w
 8002f0e:	4601      	mov	r1, r0
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	1c5a      	adds	r2, r3, #1
 8002f14:	60ba      	str	r2, [r7, #8]
 8002f16:	b2ca      	uxtb	r2, r1
 8002f18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	dbf0      	blt.n	8002f0a <_read+0x12>
  }

  return len;
 8002f28:	687b      	ldr	r3, [r7, #4]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b086      	sub	sp, #24
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f3e:	2300      	movs	r3, #0
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	e009      	b.n	8002f58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	60ba      	str	r2, [r7, #8]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	3301      	adds	r3, #1
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	dbf1      	blt.n	8002f44 <_write+0x12>
  }
  return len;
 8002f60:	687b      	ldr	r3, [r7, #4]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <_close>:

int _close(int file)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f92:	605a      	str	r2, [r3, #4]
  return 0;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <_isatty>:

int _isatty(int file)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002faa:	2301      	movs	r3, #1
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
	...

08002fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fdc:	4a14      	ldr	r2, [pc, #80]	; (8003030 <_sbrk+0x5c>)
 8002fde:	4b15      	ldr	r3, [pc, #84]	; (8003034 <_sbrk+0x60>)
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fe8:	4b13      	ldr	r3, [pc, #76]	; (8003038 <_sbrk+0x64>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d102      	bne.n	8002ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ff0:	4b11      	ldr	r3, [pc, #68]	; (8003038 <_sbrk+0x64>)
 8002ff2:	4a12      	ldr	r2, [pc, #72]	; (800303c <_sbrk+0x68>)
 8002ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ff6:	4b10      	ldr	r3, [pc, #64]	; (8003038 <_sbrk+0x64>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	429a      	cmp	r2, r3
 8003002:	d207      	bcs.n	8003014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003004:	f004 fb48 	bl	8007698 <__errno>
 8003008:	4603      	mov	r3, r0
 800300a:	220c      	movs	r2, #12
 800300c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800300e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003012:	e009      	b.n	8003028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003014:	4b08      	ldr	r3, [pc, #32]	; (8003038 <_sbrk+0x64>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800301a:	4b07      	ldr	r3, [pc, #28]	; (8003038 <_sbrk+0x64>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4413      	add	r3, r2
 8003022:	4a05      	ldr	r2, [pc, #20]	; (8003038 <_sbrk+0x64>)
 8003024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003026:	68fb      	ldr	r3, [r7, #12]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	20020000 	.word	0x20020000
 8003034:	00000400 	.word	0x00000400
 8003038:	200003c8 	.word	0x200003c8
 800303c:	20000520 	.word	0x20000520

08003040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003044:	4b06      	ldr	r3, [pc, #24]	; (8003060 <SystemInit+0x20>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304a:	4a05      	ldr	r2, [pc, #20]	; (8003060 <SystemInit+0x20>)
 800304c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003064:	f8df d034 	ldr.w	sp, [pc, #52]	; 800309c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003068:	480d      	ldr	r0, [pc, #52]	; (80030a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800306a:	490e      	ldr	r1, [pc, #56]	; (80030a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800306c:	4a0e      	ldr	r2, [pc, #56]	; (80030a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800306e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003070:	e002      	b.n	8003078 <LoopCopyDataInit>

08003072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003076:	3304      	adds	r3, #4

08003078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800307a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800307c:	d3f9      	bcc.n	8003072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800307e:	4a0b      	ldr	r2, [pc, #44]	; (80030ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003080:	4c0b      	ldr	r4, [pc, #44]	; (80030b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003084:	e001      	b.n	800308a <LoopFillZerobss>

08003086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003088:	3204      	adds	r2, #4

0800308a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800308a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800308c:	d3fb      	bcc.n	8003086 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800308e:	f7ff ffd7 	bl	8003040 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003092:	f004 fb07 	bl	80076a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003096:	f7ff fbed 	bl	8002874 <main>
  bx  lr    
 800309a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800309c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030a4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80030a8:	0800a6c4 	.word	0x0800a6c4
  ldr r2, =_sbss
 80030ac:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80030b0:	2000051c 	.word	0x2000051c

080030b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030b4:	e7fe      	b.n	80030b4 <ADC_IRQHandler>
	...

080030b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030bc:	4b0e      	ldr	r3, [pc, #56]	; (80030f8 <HAL_Init+0x40>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a0d      	ldr	r2, [pc, #52]	; (80030f8 <HAL_Init+0x40>)
 80030c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030c8:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <HAL_Init+0x40>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a0a      	ldr	r2, [pc, #40]	; (80030f8 <HAL_Init+0x40>)
 80030ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030d4:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <HAL_Init+0x40>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a07      	ldr	r2, [pc, #28]	; (80030f8 <HAL_Init+0x40>)
 80030da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030e0:	2003      	movs	r0, #3
 80030e2:	f001 f8c3 	bl	800426c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030e6:	2000      	movs	r0, #0
 80030e8:	f000 f808 	bl	80030fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030ec:	f7ff fd84 	bl	8002bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40023c00 	.word	0x40023c00

080030fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003104:	4b12      	ldr	r3, [pc, #72]	; (8003150 <HAL_InitTick+0x54>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	4b12      	ldr	r3, [pc, #72]	; (8003154 <HAL_InitTick+0x58>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	4619      	mov	r1, r3
 800310e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003112:	fbb3 f3f1 	udiv	r3, r3, r1
 8003116:	fbb2 f3f3 	udiv	r3, r2, r3
 800311a:	4618      	mov	r0, r3
 800311c:	f001 f8db 	bl	80042d6 <HAL_SYSTICK_Config>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e00e      	b.n	8003148 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b0f      	cmp	r3, #15
 800312e:	d80a      	bhi.n	8003146 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003130:	2200      	movs	r2, #0
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003138:	f001 f8a3 	bl	8004282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800313c:	4a06      	ldr	r2, [pc, #24]	; (8003158 <HAL_InitTick+0x5c>)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	e000      	b.n	8003148 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
}
 8003148:	4618      	mov	r0, r3
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	20000008 	.word	0x20000008
 8003154:	20000010 	.word	0x20000010
 8003158:	2000000c 	.word	0x2000000c

0800315c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003160:	4b06      	ldr	r3, [pc, #24]	; (800317c <HAL_IncTick+0x20>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	461a      	mov	r2, r3
 8003166:	4b06      	ldr	r3, [pc, #24]	; (8003180 <HAL_IncTick+0x24>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4413      	add	r3, r2
 800316c:	4a04      	ldr	r2, [pc, #16]	; (8003180 <HAL_IncTick+0x24>)
 800316e:	6013      	str	r3, [r2, #0]
}
 8003170:	bf00      	nop
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	20000010 	.word	0x20000010
 8003180:	200003cc 	.word	0x200003cc

08003184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  return uwTick;
 8003188:	4b03      	ldr	r3, [pc, #12]	; (8003198 <HAL_GetTick+0x14>)
 800318a:	681b      	ldr	r3, [r3, #0]
}
 800318c:	4618      	mov	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	200003cc 	.word	0x200003cc

0800319c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031a4:	f7ff ffee 	bl	8003184 <HAL_GetTick>
 80031a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031b4:	d005      	beq.n	80031c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031b6:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <HAL_Delay+0x44>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4413      	add	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031c2:	bf00      	nop
 80031c4:	f7ff ffde 	bl	8003184 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d8f7      	bhi.n	80031c4 <HAL_Delay+0x28>
  {
  }
}
 80031d4:	bf00      	nop
 80031d6:	bf00      	nop
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000010 	.word	0x20000010

080031e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e11c      	b.n	8003430 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d131      	bne.n	8003266 <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a8c      	ldr	r2, [pc, #560]	; (8003438 <HAL_CAN_Init+0x254>)
 8003206:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a8c      	ldr	r2, [pc, #560]	; (800343c <HAL_CAN_Init+0x258>)
 800320c:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a8b      	ldr	r2, [pc, #556]	; (8003440 <HAL_CAN_Init+0x25c>)
 8003212:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a8b      	ldr	r2, [pc, #556]	; (8003444 <HAL_CAN_Init+0x260>)
 8003218:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a8a      	ldr	r2, [pc, #552]	; (8003448 <HAL_CAN_Init+0x264>)
 800321e:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a8a      	ldr	r2, [pc, #552]	; (800344c <HAL_CAN_Init+0x268>)
 8003224:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a89      	ldr	r2, [pc, #548]	; (8003450 <HAL_CAN_Init+0x26c>)
 800322a:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a89      	ldr	r2, [pc, #548]	; (8003454 <HAL_CAN_Init+0x270>)
 8003230:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a88      	ldr	r2, [pc, #544]	; (8003458 <HAL_CAN_Init+0x274>)
 8003236:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a88      	ldr	r2, [pc, #544]	; (800345c <HAL_CAN_Init+0x278>)
 800323c:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a87      	ldr	r2, [pc, #540]	; (8003460 <HAL_CAN_Init+0x27c>)
 8003242:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a87      	ldr	r2, [pc, #540]	; (8003464 <HAL_CAN_Init+0x280>)
 8003248:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a86      	ldr	r2, [pc, #536]	; (8003468 <HAL_CAN_Init+0x284>)
 800324e:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003254:	2b00      	cmp	r3, #0
 8003256:	d102      	bne.n	800325e <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a84      	ldr	r2, [pc, #528]	; (800346c <HAL_CAN_Init+0x288>)
 800325c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f042 0201 	orr.w	r2, r2, #1
 8003274:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003276:	f7ff ff85 	bl	8003184 <HAL_GetTick>
 800327a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800327c:	e012      	b.n	80032a4 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800327e:	f7ff ff81 	bl	8003184 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b0a      	cmp	r3, #10
 800328a:	d90b      	bls.n	80032a4 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2205      	movs	r2, #5
 800329c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0c5      	b.n	8003430 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0e5      	beq.n	800327e <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0202 	bic.w	r2, r2, #2
 80032c0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032c2:	f7ff ff5f 	bl	8003184 <HAL_GetTick>
 80032c6:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80032c8:	e012      	b.n	80032f0 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032ca:	f7ff ff5b 	bl	8003184 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b0a      	cmp	r3, #10
 80032d6:	d90b      	bls.n	80032f0 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2205      	movs	r2, #5
 80032e8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e09f      	b.n	8003430 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1e5      	bne.n	80032ca <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	7e1b      	ldrb	r3, [r3, #24]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d108      	bne.n	8003318 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	e007      	b.n	8003328 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003326:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	7e5b      	ldrb	r3, [r3, #25]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d108      	bne.n	8003342 <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	e007      	b.n	8003352 <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003350:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	7e9b      	ldrb	r3, [r3, #26]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d108      	bne.n	800336c <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0220 	orr.w	r2, r2, #32
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	e007      	b.n	800337c <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0220 	bic.w	r2, r2, #32
 800337a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	7edb      	ldrb	r3, [r3, #27]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d108      	bne.n	8003396 <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0210 	bic.w	r2, r2, #16
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	e007      	b.n	80033a6 <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0210 	orr.w	r2, r2, #16
 80033a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	7f1b      	ldrb	r3, [r3, #28]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d108      	bne.n	80033c0 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f042 0208 	orr.w	r2, r2, #8
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	e007      	b.n	80033d0 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 0208 	bic.w	r2, r2, #8
 80033ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	7f5b      	ldrb	r3, [r3, #29]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d108      	bne.n	80033ea <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0204 	orr.w	r2, r2, #4
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	e007      	b.n	80033fa <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0204 	bic.w	r2, r2, #4
 80033f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	ea42 0103 	orr.w	r1, r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	1e5a      	subs	r2, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	08004041 	.word	0x08004041
 800343c:	08004055 	.word	0x08004055
 8003440:	08004069 	.word	0x08004069
 8003444:	0800407d 	.word	0x0800407d
 8003448:	08003fc9 	.word	0x08003fc9
 800344c:	08003fdd 	.word	0x08003fdd
 8003450:	08003ff1 	.word	0x08003ff1
 8003454:	08004005 	.word	0x08004005
 8003458:	08004019 	.word	0x08004019
 800345c:	0800402d 	.word	0x0800402d
 8003460:	08004091 	.word	0x08004091
 8003464:	080040a5 	.word	0x080040a5
 8003468:	080040b9 	.word	0x080040b9
 800346c:	08002c49 	.word	0x08002c49

08003470 <HAL_CAN_RegisterCallback>:
  *           @arg @ref HAL_CAN_MSPDEINIT_CB_ID MspDeInit callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_RegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef CallbackID, void (* pCallback)(CAN_HandleTypeDef *_hcan))
{
 8003470:	b480      	push	{r7}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	460b      	mov	r3, r1
 800347a:	607a      	str	r2, [r7, #4]
 800347c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800347e:	2300      	movs	r3, #0
 8003480:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d107      	bne.n	8003498 <HAL_CAN_RegisterCallback+0x28>
  {
    /* Update the error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e094      	b.n	80035c2 <HAL_CAN_RegisterCallback+0x152>
  }

  if (hcan->State == HAL_CAN_STATE_READY)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d168      	bne.n	8003576 <HAL_CAN_RegisterCallback+0x106>
  {
    switch (CallbackID)
 80034a4:	7afb      	ldrb	r3, [r7, #11]
 80034a6:	2b0e      	cmp	r3, #14
 80034a8:	d85c      	bhi.n	8003564 <HAL_CAN_RegisterCallback+0xf4>
 80034aa:	a201      	add	r2, pc, #4	; (adr r2, 80034b0 <HAL_CAN_RegisterCallback+0x40>)
 80034ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b0:	080034ed 	.word	0x080034ed
 80034b4:	080034f5 	.word	0x080034f5
 80034b8:	080034fd 	.word	0x080034fd
 80034bc:	08003505 	.word	0x08003505
 80034c0:	0800350d 	.word	0x0800350d
 80034c4:	08003515 	.word	0x08003515
 80034c8:	0800351d 	.word	0x0800351d
 80034cc:	08003525 	.word	0x08003525
 80034d0:	0800352d 	.word	0x0800352d
 80034d4:	08003535 	.word	0x08003535
 80034d8:	0800353d 	.word	0x0800353d
 80034dc:	08003545 	.word	0x08003545
 80034e0:	0800354d 	.word	0x0800354d
 80034e4:	08003555 	.word	0x08003555
 80034e8:	0800355d 	.word	0x0800355d
    {
      case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
        hcan->TxMailbox0CompleteCallback = pCallback;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 80034f2:	e065      	b.n	80035c0 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
        hcan->TxMailbox1CompleteCallback = pCallback;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 80034fa:	e061      	b.n	80035c0 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
        hcan->TxMailbox2CompleteCallback = pCallback;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 8003502:	e05d      	b.n	80035c0 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
        hcan->TxMailbox0AbortCallback = pCallback;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 800350a:	e059      	b.n	80035c0 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
        hcan->TxMailbox1AbortCallback = pCallback;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 8003512:	e055      	b.n	80035c0 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
        hcan->TxMailbox2AbortCallback = pCallback;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	63da      	str	r2, [r3, #60]	; 0x3c
        break;
 800351a:	e051      	b.n	80035c0 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
        hcan->RxFifo0MsgPendingCallback = pCallback;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	641a      	str	r2, [r3, #64]	; 0x40
        break;
 8003522:	e04d      	b.n	80035c0 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO0_FULL_CB_ID :
        hcan->RxFifo0FullCallback = pCallback;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800352a:	e049      	b.n	80035c0 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
        hcan->RxFifo1MsgPendingCallback = pCallback;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8003532:	e045      	b.n	80035c0 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO1_FULL_CB_ID :
        hcan->RxFifo1FullCallback = pCallback;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800353a:	e041      	b.n	80035c0 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_SLEEP_CB_ID :
        hcan->SleepCallback = pCallback;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8003542:	e03d      	b.n	80035c0 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
        hcan->WakeUpFromRxMsgCallback = pCallback;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800354a:	e039      	b.n	80035c0 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_ERROR_CB_ID :
        hcan->ErrorCallback = pCallback;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8003552:	e035      	b.n	80035c0 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPINIT_CB_ID :
        hcan->MspInitCallback = pCallback;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800355a:	e031      	b.n	80035c0 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPDEINIT_CB_ID :
        hcan->MspDeInitCallback = pCallback;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8003562:	e02d      	b.n	80035c0 <HAL_CAN_RegisterCallback+0x150>

      default :
        /* Update the error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Return error status */
        status =  HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	75fb      	strb	r3, [r7, #23]
        break;
 8003574:	e024      	b.n	80035c0 <HAL_CAN_RegisterCallback+0x150>
    }
  }
  else if (hcan->State == HAL_CAN_STATE_RESET)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f893 3020 	ldrb.w	r3, [r3, #32]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d116      	bne.n	80035b0 <HAL_CAN_RegisterCallback+0x140>
  {
    switch (CallbackID)
 8003582:	7afb      	ldrb	r3, [r7, #11]
 8003584:	2b0d      	cmp	r3, #13
 8003586:	d002      	beq.n	800358e <HAL_CAN_RegisterCallback+0x11e>
 8003588:	2b0e      	cmp	r3, #14
 800358a:	d004      	beq.n	8003596 <HAL_CAN_RegisterCallback+0x126>
 800358c:	e007      	b.n	800359e <HAL_CAN_RegisterCallback+0x12e>
    {
      case HAL_CAN_MSPINIT_CB_ID :
        hcan->MspInitCallback = pCallback;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8003594:	e014      	b.n	80035c0 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPDEINIT_CB_ID :
        hcan->MspDeInitCallback = pCallback;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800359c:	e010      	b.n	80035c0 <HAL_CAN_RegisterCallback+0x150>

      default :
        /* Update the error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Return error status */
        status =  HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	75fb      	strb	r3, [r7, #23]
        break;
 80035ae:	e007      	b.n	80035c0 <HAL_CAN_RegisterCallback+0x150>
    }
  }
  else
  {
    /* Update the error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return error status */
    status =  HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80035c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	371c      	adds	r7, #28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop

080035d0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b087      	sub	sp, #28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035e6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80035e8:	7cfb      	ldrb	r3, [r7, #19]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d003      	beq.n	80035f6 <HAL_CAN_ConfigFilter+0x26>
 80035ee:	7cfb      	ldrb	r3, [r7, #19]
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	f040 80be 	bne.w	8003772 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80035f6:	4b65      	ldr	r3, [pc, #404]	; (800378c <HAL_CAN_ConfigFilter+0x1bc>)
 80035f8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003600:	f043 0201 	orr.w	r2, r3, #1
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003610:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	431a      	orrs	r2, r3
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	f003 031f 	and.w	r3, r3, #31
 8003636:	2201      	movs	r2, #1
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	43db      	mvns	r3, r3
 8003648:	401a      	ands	r2, r3
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d123      	bne.n	80036a0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	43db      	mvns	r3, r3
 8003662:	401a      	ands	r2, r3
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800367a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	3248      	adds	r2, #72	; 0x48
 8003680:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003694:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003696:	6979      	ldr	r1, [r7, #20]
 8003698:	3348      	adds	r3, #72	; 0x48
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	440b      	add	r3, r1
 800369e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d122      	bne.n	80036ee <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	431a      	orrs	r2, r3
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80036c8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	3248      	adds	r2, #72	; 0x48
 80036ce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80036e2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80036e4:	6979      	ldr	r1, [r7, #20]
 80036e6:	3348      	adds	r3, #72	; 0x48
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	440b      	add	r3, r1
 80036ec:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d109      	bne.n	800370a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	43db      	mvns	r3, r3
 8003700:	401a      	ands	r2, r3
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003708:	e007      	b.n	800371a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	431a      	orrs	r2, r3
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d109      	bne.n	8003736 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	43db      	mvns	r3, r3
 800372c:	401a      	ands	r2, r3
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003734:	e007      	b.n	8003746 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	431a      	orrs	r2, r3
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d107      	bne.n	800375e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	431a      	orrs	r2, r3
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003764:	f023 0201 	bic.w	r2, r3, #1
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	e006      	b.n	8003780 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
  }
}
 8003780:	4618      	mov	r0, r3
 8003782:	371c      	adds	r7, #28
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	40006400 	.word	0x40006400

08003790 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d12e      	bne.n	8003802 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0201 	bic.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037bc:	f7ff fce2 	bl	8003184 <HAL_GetTick>
 80037c0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80037c2:	e012      	b.n	80037ea <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037c4:	f7ff fcde 	bl	8003184 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b0a      	cmp	r3, #10
 80037d0:	d90b      	bls.n	80037ea <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2205      	movs	r2, #5
 80037e2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e012      	b.n	8003810 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1e5      	bne.n	80037c4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80037fe:	2300      	movs	r3, #0
 8003800:	e006      	b.n	8003810 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
  }
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003818:	b480      	push	{r7}
 800381a:	b089      	sub	sp, #36	; 0x24
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
 8003824:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f893 3020 	ldrb.w	r3, [r3, #32]
 800382c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003836:	7ffb      	ldrb	r3, [r7, #31]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d003      	beq.n	8003844 <HAL_CAN_AddTxMessage+0x2c>
 800383c:	7ffb      	ldrb	r3, [r7, #31]
 800383e:	2b02      	cmp	r3, #2
 8003840:	f040 80b8 	bne.w	80039b4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10a      	bne.n	8003864 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003854:	2b00      	cmp	r3, #0
 8003856:	d105      	bne.n	8003864 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 80a0 	beq.w	80039a4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	0e1b      	lsrs	r3, r3, #24
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d907      	bls.n	8003884 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e09e      	b.n	80039c2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003884:	2201      	movs	r2, #1
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	409a      	lsls	r2, r3
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10d      	bne.n	80038b2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80038a0:	68f9      	ldr	r1, [r7, #12]
 80038a2:	6809      	ldr	r1, [r1, #0]
 80038a4:	431a      	orrs	r2, r3
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	3318      	adds	r3, #24
 80038aa:	011b      	lsls	r3, r3, #4
 80038ac:	440b      	add	r3, r1
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	e00f      	b.n	80038d2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80038bc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80038c2:	68f9      	ldr	r1, [r7, #12]
 80038c4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80038c6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	3318      	adds	r3, #24
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	440b      	add	r3, r1
 80038d0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6819      	ldr	r1, [r3, #0]
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	691a      	ldr	r2, [r3, #16]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	3318      	adds	r3, #24
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	440b      	add	r3, r1
 80038e2:	3304      	adds	r3, #4
 80038e4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	7d1b      	ldrb	r3, [r3, #20]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d111      	bne.n	8003912 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	3318      	adds	r3, #24
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	4413      	add	r3, r2
 80038fa:	3304      	adds	r3, #4
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	6811      	ldr	r1, [r2, #0]
 8003902:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	3318      	adds	r3, #24
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	440b      	add	r3, r1
 800390e:	3304      	adds	r3, #4
 8003910:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3307      	adds	r3, #7
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	061a      	lsls	r2, r3, #24
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3306      	adds	r3, #6
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	041b      	lsls	r3, r3, #16
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3305      	adds	r3, #5
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	021b      	lsls	r3, r3, #8
 800392c:	4313      	orrs	r3, r2
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	3204      	adds	r2, #4
 8003932:	7812      	ldrb	r2, [r2, #0]
 8003934:	4610      	mov	r0, r2
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	6811      	ldr	r1, [r2, #0]
 800393a:	ea43 0200 	orr.w	r2, r3, r0
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	440b      	add	r3, r1
 8003944:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003948:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	3303      	adds	r3, #3
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	061a      	lsls	r2, r3, #24
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3302      	adds	r3, #2
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	041b      	lsls	r3, r3, #16
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3301      	adds	r3, #1
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	021b      	lsls	r3, r3, #8
 8003964:	4313      	orrs	r3, r2
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	7812      	ldrb	r2, [r2, #0]
 800396a:	4610      	mov	r0, r2
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	6811      	ldr	r1, [r2, #0]
 8003970:	ea43 0200 	orr.w	r2, r3, r0
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	440b      	add	r3, r1
 800397a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800397e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	3318      	adds	r3, #24
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	4413      	add	r3, r2
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	6811      	ldr	r1, [r2, #0]
 8003992:	f043 0201 	orr.w	r2, r3, #1
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	3318      	adds	r3, #24
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	440b      	add	r3, r1
 800399e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	e00e      	b.n	80039c2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e006      	b.n	80039c2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
  }
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3724      	adds	r7, #36	; 0x24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80039ce:	b480      	push	{r7}
 80039d0:	b087      	sub	sp, #28
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	60f8      	str	r0, [r7, #12]
 80039d6:	60b9      	str	r1, [r7, #8]
 80039d8:	607a      	str	r2, [r7, #4]
 80039da:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039e2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80039e4:	7dfb      	ldrb	r3, [r7, #23]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d003      	beq.n	80039f2 <HAL_CAN_GetRxMessage+0x24>
 80039ea:	7dfb      	ldrb	r3, [r7, #23]
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	f040 80f3 	bne.w	8003bd8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10e      	bne.n	8003a16 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d116      	bne.n	8003a34 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e0e7      	b.n	8003be6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	f003 0303 	and.w	r3, r3, #3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d107      	bne.n	8003a34 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e0d8      	b.n	8003be6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	331b      	adds	r3, #27
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	4413      	add	r3, r2
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0204 	and.w	r2, r3, #4
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10c      	bne.n	8003a6c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	331b      	adds	r3, #27
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	4413      	add	r3, r2
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	0d5b      	lsrs	r3, r3, #21
 8003a62:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	e00b      	b.n	8003a84 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	331b      	adds	r3, #27
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	4413      	add	r3, r2
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	08db      	lsrs	r3, r3, #3
 8003a7c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	331b      	adds	r3, #27
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	4413      	add	r3, r2
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0202 	and.w	r2, r3, #2
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	331b      	adds	r3, #27
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	4413      	add	r3, r2
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 020f 	and.w	r2, r3, #15
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	331b      	adds	r3, #27
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	4413      	add	r3, r2
 8003abe:	3304      	adds	r3, #4
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	0a1b      	lsrs	r3, r3, #8
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	331b      	adds	r3, #27
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	4413      	add	r3, r2
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	0c1b      	lsrs	r3, r3, #16
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	0a1a      	lsrs	r2, r3, #8
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	0c1a      	lsrs	r2, r3, #16
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	3302      	adds	r3, #2
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	0e1a      	lsrs	r2, r3, #24
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	3303      	adds	r3, #3
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	3304      	adds	r3, #4
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	0a1a      	lsrs	r2, r3, #8
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	3305      	adds	r3, #5
 8003b74:	b2d2      	uxtb	r2, r2
 8003b76:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	0c1a      	lsrs	r2, r3, #16
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	3306      	adds	r3, #6
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	0e1a      	lsrs	r2, r3, #24
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	3307      	adds	r3, #7
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d108      	bne.n	8003bc4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0220 	orr.w	r2, r2, #32
 8003bc0:	60da      	str	r2, [r3, #12]
 8003bc2:	e007      	b.n	8003bd4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	691a      	ldr	r2, [r3, #16]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0220 	orr.w	r2, r2, #32
 8003bd2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	e006      	b.n	8003be6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
  }
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	371c      	adds	r7, #28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b085      	sub	sp, #20
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c02:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d002      	beq.n	8003c10 <HAL_CAN_ActivateNotification+0x1e>
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d109      	bne.n	8003c24 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6959      	ldr	r1, [r3, #20]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e006      	b.n	8003c32 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
  }
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b08a      	sub	sp, #40	; 0x28
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003c46:	2300      	movs	r3, #0
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 8083 	beq.w	8003d8c <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d025      	beq.n	8003cdc <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2201      	movs	r2, #1
 8003c96:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d004      	beq.n	8003cac <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	4798      	blx	r3
 8003caa:	e017      	b.n	8003cdc <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d004      	beq.n	8003cc0 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cbe:	e00d      	b.n	8003cdc <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d004      	beq.n	8003cd4 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd2:	e003      	b.n	8003cdc <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d026      	beq.n	8003d34 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d004      	beq.n	8003d04 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	4798      	blx	r3
 8003d02:	e017      	b.n	8003d34 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d004      	beq.n	8003d18 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
 8003d16:	e00d      	b.n	8003d34 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d004      	beq.n	8003d2c <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d28:	627b      	str	r3, [r7, #36]	; 0x24
 8003d2a:	e003      	b.n	8003d34 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d026      	beq.n	8003d8c <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d46:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d004      	beq.n	8003d5c <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	4798      	blx	r3
 8003d5a:	e017      	b.n	8003d8c <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d004      	beq.n	8003d70 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d6e:	e00d      	b.n	8003d8c <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d004      	beq.n	8003d84 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d80:	627b      	str	r3, [r7, #36]	; 0x24
 8003d82:	e003      	b.n	8003d8c <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00c      	beq.n	8003db0 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d007      	beq.n	8003db0 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2210      	movs	r2, #16
 8003dae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00c      	beq.n	8003dd4 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f003 0308 	and.w	r3, r3, #8
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d007      	beq.n	8003dd4 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2208      	movs	r2, #8
 8003dca:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003dd4:	6a3b      	ldr	r3, [r7, #32]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f003 0303 	and.w	r3, r3, #3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00c      	beq.n	8003e18 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f003 0310 	and.w	r3, r3, #16
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d007      	beq.n	8003e18 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2210      	movs	r2, #16
 8003e16:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	f003 0320 	and.w	r3, r3, #32
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00c      	beq.n	8003e3c <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d007      	beq.n	8003e3c <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2208      	movs	r2, #8
 8003e32:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	f003 0310 	and.w	r3, r3, #16
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00a      	beq.n	8003e5c <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	f003 0303 	and.w	r3, r3, #3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00c      	beq.n	8003e80 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	f003 0310 	and.w	r3, r3, #16
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d007      	beq.n	8003e80 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2210      	movs	r2, #16
 8003e76:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00c      	beq.n	8003ea4 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	f003 0308 	and.w	r3, r3, #8
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d007      	beq.n	8003ea4 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2208      	movs	r2, #8
 8003e9a:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d07b      	beq.n	8003fa6 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d072      	beq.n	8003f9e <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d008      	beq.n	8003ed4 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	f043 0301 	orr.w	r3, r3, #1
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d008      	beq.n	8003ef0 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	f043 0302 	orr.w	r3, r3, #2
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d008      	beq.n	8003f0c <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	f043 0304 	orr.w	r3, r3, #4
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d043      	beq.n	8003f9e <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d03e      	beq.n	8003f9e <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f26:	2b60      	cmp	r3, #96	; 0x60
 8003f28:	d02b      	beq.n	8003f82 <HAL_CAN_IRQHandler+0x344>
 8003f2a:	2b60      	cmp	r3, #96	; 0x60
 8003f2c:	d82e      	bhi.n	8003f8c <HAL_CAN_IRQHandler+0x34e>
 8003f2e:	2b50      	cmp	r3, #80	; 0x50
 8003f30:	d022      	beq.n	8003f78 <HAL_CAN_IRQHandler+0x33a>
 8003f32:	2b50      	cmp	r3, #80	; 0x50
 8003f34:	d82a      	bhi.n	8003f8c <HAL_CAN_IRQHandler+0x34e>
 8003f36:	2b40      	cmp	r3, #64	; 0x40
 8003f38:	d019      	beq.n	8003f6e <HAL_CAN_IRQHandler+0x330>
 8003f3a:	2b40      	cmp	r3, #64	; 0x40
 8003f3c:	d826      	bhi.n	8003f8c <HAL_CAN_IRQHandler+0x34e>
 8003f3e:	2b30      	cmp	r3, #48	; 0x30
 8003f40:	d010      	beq.n	8003f64 <HAL_CAN_IRQHandler+0x326>
 8003f42:	2b30      	cmp	r3, #48	; 0x30
 8003f44:	d822      	bhi.n	8003f8c <HAL_CAN_IRQHandler+0x34e>
 8003f46:	2b10      	cmp	r3, #16
 8003f48:	d002      	beq.n	8003f50 <HAL_CAN_IRQHandler+0x312>
 8003f4a:	2b20      	cmp	r3, #32
 8003f4c:	d005      	beq.n	8003f5a <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003f4e:	e01d      	b.n	8003f8c <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	f043 0308 	orr.w	r3, r3, #8
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f58:	e019      	b.n	8003f8e <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	f043 0310 	orr.w	r3, r3, #16
 8003f60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f62:	e014      	b.n	8003f8e <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	f043 0320 	orr.w	r3, r3, #32
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f6c:	e00f      	b.n	8003f8e <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f76:	e00a      	b.n	8003f8e <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f80:	e005      	b.n	8003f8e <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f8a:	e000      	b.n	8003f8e <HAL_CAN_IRQHandler+0x350>
            break;
 8003f8c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	699a      	ldr	r2, [r3, #24]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f9c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2204      	movs	r2, #4
 8003fa4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d009      	beq.n	8003fc0 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003fc0:	bf00      	nop
 8003fc2:	3728      	adds	r7, #40	; 0x28
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040dc:	4b0c      	ldr	r3, [pc, #48]	; (8004110 <__NVIC_SetPriorityGrouping+0x44>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040e8:	4013      	ands	r3, r2
 80040ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040fe:	4a04      	ldr	r2, [pc, #16]	; (8004110 <__NVIC_SetPriorityGrouping+0x44>)
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	60d3      	str	r3, [r2, #12]
}
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	e000ed00 	.word	0xe000ed00

08004114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004118:	4b04      	ldr	r3, [pc, #16]	; (800412c <__NVIC_GetPriorityGrouping+0x18>)
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	0a1b      	lsrs	r3, r3, #8
 800411e:	f003 0307 	and.w	r3, r3, #7
}
 8004122:	4618      	mov	r0, r3
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	e000ed00 	.word	0xe000ed00

08004130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	4603      	mov	r3, r0
 8004138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800413a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800413e:	2b00      	cmp	r3, #0
 8004140:	db0b      	blt.n	800415a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004142:	79fb      	ldrb	r3, [r7, #7]
 8004144:	f003 021f 	and.w	r2, r3, #31
 8004148:	4907      	ldr	r1, [pc, #28]	; (8004168 <__NVIC_EnableIRQ+0x38>)
 800414a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	2001      	movs	r0, #1
 8004152:	fa00 f202 	lsl.w	r2, r0, r2
 8004156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	e000e100 	.word	0xe000e100

0800416c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	4603      	mov	r3, r0
 8004174:	6039      	str	r1, [r7, #0]
 8004176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800417c:	2b00      	cmp	r3, #0
 800417e:	db0a      	blt.n	8004196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	b2da      	uxtb	r2, r3
 8004184:	490c      	ldr	r1, [pc, #48]	; (80041b8 <__NVIC_SetPriority+0x4c>)
 8004186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418a:	0112      	lsls	r2, r2, #4
 800418c:	b2d2      	uxtb	r2, r2
 800418e:	440b      	add	r3, r1
 8004190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004194:	e00a      	b.n	80041ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	b2da      	uxtb	r2, r3
 800419a:	4908      	ldr	r1, [pc, #32]	; (80041bc <__NVIC_SetPriority+0x50>)
 800419c:	79fb      	ldrb	r3, [r7, #7]
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	3b04      	subs	r3, #4
 80041a4:	0112      	lsls	r2, r2, #4
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	440b      	add	r3, r1
 80041aa:	761a      	strb	r2, [r3, #24]
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	e000e100 	.word	0xe000e100
 80041bc:	e000ed00 	.word	0xe000ed00

080041c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b089      	sub	sp, #36	; 0x24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	f1c3 0307 	rsb	r3, r3, #7
 80041da:	2b04      	cmp	r3, #4
 80041dc:	bf28      	it	cs
 80041de:	2304      	movcs	r3, #4
 80041e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	3304      	adds	r3, #4
 80041e6:	2b06      	cmp	r3, #6
 80041e8:	d902      	bls.n	80041f0 <NVIC_EncodePriority+0x30>
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	3b03      	subs	r3, #3
 80041ee:	e000      	b.n	80041f2 <NVIC_EncodePriority+0x32>
 80041f0:	2300      	movs	r3, #0
 80041f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	fa02 f303 	lsl.w	r3, r2, r3
 80041fe:	43da      	mvns	r2, r3
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	401a      	ands	r2, r3
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004208:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	fa01 f303 	lsl.w	r3, r1, r3
 8004212:	43d9      	mvns	r1, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004218:	4313      	orrs	r3, r2
         );
}
 800421a:	4618      	mov	r0, r3
 800421c:	3724      	adds	r7, #36	; 0x24
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
	...

08004228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	3b01      	subs	r3, #1
 8004234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004238:	d301      	bcc.n	800423e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800423a:	2301      	movs	r3, #1
 800423c:	e00f      	b.n	800425e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800423e:	4a0a      	ldr	r2, [pc, #40]	; (8004268 <SysTick_Config+0x40>)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3b01      	subs	r3, #1
 8004244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004246:	210f      	movs	r1, #15
 8004248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800424c:	f7ff ff8e 	bl	800416c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004250:	4b05      	ldr	r3, [pc, #20]	; (8004268 <SysTick_Config+0x40>)
 8004252:	2200      	movs	r2, #0
 8004254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004256:	4b04      	ldr	r3, [pc, #16]	; (8004268 <SysTick_Config+0x40>)
 8004258:	2207      	movs	r2, #7
 800425a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	e000e010 	.word	0xe000e010

0800426c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7ff ff29 	bl	80040cc <__NVIC_SetPriorityGrouping>
}
 800427a:	bf00      	nop
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004282:	b580      	push	{r7, lr}
 8004284:	b086      	sub	sp, #24
 8004286:	af00      	add	r7, sp, #0
 8004288:	4603      	mov	r3, r0
 800428a:	60b9      	str	r1, [r7, #8]
 800428c:	607a      	str	r2, [r7, #4]
 800428e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004290:	2300      	movs	r3, #0
 8004292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004294:	f7ff ff3e 	bl	8004114 <__NVIC_GetPriorityGrouping>
 8004298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	68b9      	ldr	r1, [r7, #8]
 800429e:	6978      	ldr	r0, [r7, #20]
 80042a0:	f7ff ff8e 	bl	80041c0 <NVIC_EncodePriority>
 80042a4:	4602      	mov	r2, r0
 80042a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042aa:	4611      	mov	r1, r2
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff ff5d 	bl	800416c <__NVIC_SetPriority>
}
 80042b2:	bf00      	nop
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b082      	sub	sp, #8
 80042be:	af00      	add	r7, sp, #0
 80042c0:	4603      	mov	r3, r0
 80042c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff ff31 	bl	8004130 <__NVIC_EnableIRQ>
}
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b082      	sub	sp, #8
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7ff ffa2 	bl	8004228 <SysTick_Config>
 80042e4:	4603      	mov	r3, r0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b089      	sub	sp, #36	; 0x24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042fe:	2300      	movs	r3, #0
 8004300:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004302:	2300      	movs	r3, #0
 8004304:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004306:	2300      	movs	r3, #0
 8004308:	61fb      	str	r3, [r7, #28]
 800430a:	e16b      	b.n	80045e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800430c:	2201      	movs	r2, #1
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	4013      	ands	r3, r2
 800431e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	429a      	cmp	r2, r3
 8004326:	f040 815a 	bne.w	80045de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	2b01      	cmp	r3, #1
 8004334:	d005      	beq.n	8004342 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800433e:	2b02      	cmp	r3, #2
 8004340:	d130      	bne.n	80043a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	2203      	movs	r2, #3
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	43db      	mvns	r3, r3
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	4013      	ands	r3, r2
 8004358:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	68da      	ldr	r2, [r3, #12]
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	4313      	orrs	r3, r2
 800436a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004378:	2201      	movs	r2, #1
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	fa02 f303 	lsl.w	r3, r2, r3
 8004380:	43db      	mvns	r3, r3
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	4013      	ands	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	091b      	lsrs	r3, r3, #4
 800438e:	f003 0201 	and.w	r2, r3, #1
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4313      	orrs	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f003 0303 	and.w	r3, r3, #3
 80043ac:	2b03      	cmp	r3, #3
 80043ae:	d017      	beq.n	80043e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	2203      	movs	r2, #3
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	43db      	mvns	r3, r3
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	4013      	ands	r3, r2
 80043c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	fa02 f303 	lsl.w	r3, r2, r3
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f003 0303 	and.w	r3, r3, #3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d123      	bne.n	8004434 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	08da      	lsrs	r2, r3, #3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3208      	adds	r2, #8
 80043f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	220f      	movs	r2, #15
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	43db      	mvns	r3, r3
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	4013      	ands	r3, r2
 800440e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	f003 0307 	and.w	r3, r3, #7
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	4313      	orrs	r3, r2
 8004424:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	08da      	lsrs	r2, r3, #3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	3208      	adds	r2, #8
 800442e:	69b9      	ldr	r1, [r7, #24]
 8004430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	2203      	movs	r2, #3
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	43db      	mvns	r3, r3
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	4013      	ands	r3, r2
 800444a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f003 0203 	and.w	r2, r3, #3
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	fa02 f303 	lsl.w	r3, r2, r3
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	4313      	orrs	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 80b4 	beq.w	80045de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004476:	2300      	movs	r3, #0
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	4b60      	ldr	r3, [pc, #384]	; (80045fc <HAL_GPIO_Init+0x30c>)
 800447c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447e:	4a5f      	ldr	r2, [pc, #380]	; (80045fc <HAL_GPIO_Init+0x30c>)
 8004480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004484:	6453      	str	r3, [r2, #68]	; 0x44
 8004486:	4b5d      	ldr	r3, [pc, #372]	; (80045fc <HAL_GPIO_Init+0x30c>)
 8004488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004492:	4a5b      	ldr	r2, [pc, #364]	; (8004600 <HAL_GPIO_Init+0x310>)
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	089b      	lsrs	r3, r3, #2
 8004498:	3302      	adds	r3, #2
 800449a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800449e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	f003 0303 	and.w	r3, r3, #3
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	220f      	movs	r2, #15
 80044aa:	fa02 f303 	lsl.w	r3, r2, r3
 80044ae:	43db      	mvns	r3, r3
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	4013      	ands	r3, r2
 80044b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a52      	ldr	r2, [pc, #328]	; (8004604 <HAL_GPIO_Init+0x314>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d02b      	beq.n	8004516 <HAL_GPIO_Init+0x226>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a51      	ldr	r2, [pc, #324]	; (8004608 <HAL_GPIO_Init+0x318>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d025      	beq.n	8004512 <HAL_GPIO_Init+0x222>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a50      	ldr	r2, [pc, #320]	; (800460c <HAL_GPIO_Init+0x31c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d01f      	beq.n	800450e <HAL_GPIO_Init+0x21e>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a4f      	ldr	r2, [pc, #316]	; (8004610 <HAL_GPIO_Init+0x320>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d019      	beq.n	800450a <HAL_GPIO_Init+0x21a>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a4e      	ldr	r2, [pc, #312]	; (8004614 <HAL_GPIO_Init+0x324>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d013      	beq.n	8004506 <HAL_GPIO_Init+0x216>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a4d      	ldr	r2, [pc, #308]	; (8004618 <HAL_GPIO_Init+0x328>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00d      	beq.n	8004502 <HAL_GPIO_Init+0x212>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a4c      	ldr	r2, [pc, #304]	; (800461c <HAL_GPIO_Init+0x32c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d007      	beq.n	80044fe <HAL_GPIO_Init+0x20e>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a4b      	ldr	r2, [pc, #300]	; (8004620 <HAL_GPIO_Init+0x330>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d101      	bne.n	80044fa <HAL_GPIO_Init+0x20a>
 80044f6:	2307      	movs	r3, #7
 80044f8:	e00e      	b.n	8004518 <HAL_GPIO_Init+0x228>
 80044fa:	2308      	movs	r3, #8
 80044fc:	e00c      	b.n	8004518 <HAL_GPIO_Init+0x228>
 80044fe:	2306      	movs	r3, #6
 8004500:	e00a      	b.n	8004518 <HAL_GPIO_Init+0x228>
 8004502:	2305      	movs	r3, #5
 8004504:	e008      	b.n	8004518 <HAL_GPIO_Init+0x228>
 8004506:	2304      	movs	r3, #4
 8004508:	e006      	b.n	8004518 <HAL_GPIO_Init+0x228>
 800450a:	2303      	movs	r3, #3
 800450c:	e004      	b.n	8004518 <HAL_GPIO_Init+0x228>
 800450e:	2302      	movs	r3, #2
 8004510:	e002      	b.n	8004518 <HAL_GPIO_Init+0x228>
 8004512:	2301      	movs	r3, #1
 8004514:	e000      	b.n	8004518 <HAL_GPIO_Init+0x228>
 8004516:	2300      	movs	r3, #0
 8004518:	69fa      	ldr	r2, [r7, #28]
 800451a:	f002 0203 	and.w	r2, r2, #3
 800451e:	0092      	lsls	r2, r2, #2
 8004520:	4093      	lsls	r3, r2
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	4313      	orrs	r3, r2
 8004526:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004528:	4935      	ldr	r1, [pc, #212]	; (8004600 <HAL_GPIO_Init+0x310>)
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	089b      	lsrs	r3, r3, #2
 800452e:	3302      	adds	r3, #2
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004536:	4b3b      	ldr	r3, [pc, #236]	; (8004624 <HAL_GPIO_Init+0x334>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	43db      	mvns	r3, r3
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	4013      	ands	r3, r2
 8004544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	4313      	orrs	r3, r2
 8004558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800455a:	4a32      	ldr	r2, [pc, #200]	; (8004624 <HAL_GPIO_Init+0x334>)
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004560:	4b30      	ldr	r3, [pc, #192]	; (8004624 <HAL_GPIO_Init+0x334>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	43db      	mvns	r3, r3
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	4013      	ands	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004584:	4a27      	ldr	r2, [pc, #156]	; (8004624 <HAL_GPIO_Init+0x334>)
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800458a:	4b26      	ldr	r3, [pc, #152]	; (8004624 <HAL_GPIO_Init+0x334>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	43db      	mvns	r3, r3
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	4013      	ands	r3, r2
 8004598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045ae:	4a1d      	ldr	r2, [pc, #116]	; (8004624 <HAL_GPIO_Init+0x334>)
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045b4:	4b1b      	ldr	r3, [pc, #108]	; (8004624 <HAL_GPIO_Init+0x334>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	43db      	mvns	r3, r3
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4013      	ands	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045d8:	4a12      	ldr	r2, [pc, #72]	; (8004624 <HAL_GPIO_Init+0x334>)
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	3301      	adds	r3, #1
 80045e2:	61fb      	str	r3, [r7, #28]
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	2b0f      	cmp	r3, #15
 80045e8:	f67f ae90 	bls.w	800430c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045ec:	bf00      	nop
 80045ee:	bf00      	nop
 80045f0:	3724      	adds	r7, #36	; 0x24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40023800 	.word	0x40023800
 8004600:	40013800 	.word	0x40013800
 8004604:	40020000 	.word	0x40020000
 8004608:	40020400 	.word	0x40020400
 800460c:	40020800 	.word	0x40020800
 8004610:	40020c00 	.word	0x40020c00
 8004614:	40021000 	.word	0x40021000
 8004618:	40021400 	.word	0x40021400
 800461c:	40021800 	.word	0x40021800
 8004620:	40021c00 	.word	0x40021c00
 8004624:	40013c00 	.word	0x40013c00

08004628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	460b      	mov	r3, r1
 8004632:	807b      	strh	r3, [r7, #2]
 8004634:	4613      	mov	r3, r2
 8004636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004638:	787b      	ldrb	r3, [r7, #1]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800463e:	887a      	ldrh	r2, [r7, #2]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004644:	e003      	b.n	800464e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004646:	887b      	ldrh	r3, [r7, #2]
 8004648:	041a      	lsls	r2, r3, #16
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	619a      	str	r2, [r3, #24]
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
	...

0800465c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e12b      	b.n	80048c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d106      	bne.n	8004688 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7fe fb30 	bl	8002ce8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2224      	movs	r2, #36	; 0x24
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0201 	bic.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046c0:	f001 fd2a 	bl	8006118 <HAL_RCC_GetPCLK1Freq>
 80046c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	4a81      	ldr	r2, [pc, #516]	; (80048d0 <HAL_I2C_Init+0x274>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d807      	bhi.n	80046e0 <HAL_I2C_Init+0x84>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4a80      	ldr	r2, [pc, #512]	; (80048d4 <HAL_I2C_Init+0x278>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	bf94      	ite	ls
 80046d8:	2301      	movls	r3, #1
 80046da:	2300      	movhi	r3, #0
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	e006      	b.n	80046ee <HAL_I2C_Init+0x92>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4a7d      	ldr	r2, [pc, #500]	; (80048d8 <HAL_I2C_Init+0x27c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	bf94      	ite	ls
 80046e8:	2301      	movls	r3, #1
 80046ea:	2300      	movhi	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e0e7      	b.n	80048c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4a78      	ldr	r2, [pc, #480]	; (80048dc <HAL_I2C_Init+0x280>)
 80046fa:	fba2 2303 	umull	r2, r3, r2, r3
 80046fe:	0c9b      	lsrs	r3, r3, #18
 8004700:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	430a      	orrs	r2, r1
 8004714:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	4a6a      	ldr	r2, [pc, #424]	; (80048d0 <HAL_I2C_Init+0x274>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d802      	bhi.n	8004730 <HAL_I2C_Init+0xd4>
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	3301      	adds	r3, #1
 800472e:	e009      	b.n	8004744 <HAL_I2C_Init+0xe8>
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004736:	fb02 f303 	mul.w	r3, r2, r3
 800473a:	4a69      	ldr	r2, [pc, #420]	; (80048e0 <HAL_I2C_Init+0x284>)
 800473c:	fba2 2303 	umull	r2, r3, r2, r3
 8004740:	099b      	lsrs	r3, r3, #6
 8004742:	3301      	adds	r3, #1
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6812      	ldr	r2, [r2, #0]
 8004748:	430b      	orrs	r3, r1
 800474a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004756:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	495c      	ldr	r1, [pc, #368]	; (80048d0 <HAL_I2C_Init+0x274>)
 8004760:	428b      	cmp	r3, r1
 8004762:	d819      	bhi.n	8004798 <HAL_I2C_Init+0x13c>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	1e59      	subs	r1, r3, #1
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004772:	1c59      	adds	r1, r3, #1
 8004774:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004778:	400b      	ands	r3, r1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00a      	beq.n	8004794 <HAL_I2C_Init+0x138>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	1e59      	subs	r1, r3, #1
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	fbb1 f3f3 	udiv	r3, r1, r3
 800478c:	3301      	adds	r3, #1
 800478e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004792:	e051      	b.n	8004838 <HAL_I2C_Init+0x1dc>
 8004794:	2304      	movs	r3, #4
 8004796:	e04f      	b.n	8004838 <HAL_I2C_Init+0x1dc>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d111      	bne.n	80047c4 <HAL_I2C_Init+0x168>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	1e58      	subs	r0, r3, #1
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6859      	ldr	r1, [r3, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	440b      	add	r3, r1
 80047ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80047b2:	3301      	adds	r3, #1
 80047b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	bf0c      	ite	eq
 80047bc:	2301      	moveq	r3, #1
 80047be:	2300      	movne	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	e012      	b.n	80047ea <HAL_I2C_Init+0x18e>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	1e58      	subs	r0, r3, #1
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6859      	ldr	r1, [r3, #4]
 80047cc:	460b      	mov	r3, r1
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	440b      	add	r3, r1
 80047d2:	0099      	lsls	r1, r3, #2
 80047d4:	440b      	add	r3, r1
 80047d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047da:	3301      	adds	r3, #1
 80047dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	bf0c      	ite	eq
 80047e4:	2301      	moveq	r3, #1
 80047e6:	2300      	movne	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <HAL_I2C_Init+0x196>
 80047ee:	2301      	movs	r3, #1
 80047f0:	e022      	b.n	8004838 <HAL_I2C_Init+0x1dc>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10e      	bne.n	8004818 <HAL_I2C_Init+0x1bc>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	1e58      	subs	r0, r3, #1
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6859      	ldr	r1, [r3, #4]
 8004802:	460b      	mov	r3, r1
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	440b      	add	r3, r1
 8004808:	fbb0 f3f3 	udiv	r3, r0, r3
 800480c:	3301      	adds	r3, #1
 800480e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004816:	e00f      	b.n	8004838 <HAL_I2C_Init+0x1dc>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	1e58      	subs	r0, r3, #1
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6859      	ldr	r1, [r3, #4]
 8004820:	460b      	mov	r3, r1
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	440b      	add	r3, r1
 8004826:	0099      	lsls	r1, r3, #2
 8004828:	440b      	add	r3, r1
 800482a:	fbb0 f3f3 	udiv	r3, r0, r3
 800482e:	3301      	adds	r3, #1
 8004830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004834:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004838:	6879      	ldr	r1, [r7, #4]
 800483a:	6809      	ldr	r1, [r1, #0]
 800483c:	4313      	orrs	r3, r2
 800483e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69da      	ldr	r2, [r3, #28]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004866:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6911      	ldr	r1, [r2, #16]
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	68d2      	ldr	r2, [r2, #12]
 8004872:	4311      	orrs	r1, r2
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6812      	ldr	r2, [r2, #0]
 8004878:	430b      	orrs	r3, r1
 800487a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	695a      	ldr	r2, [r3, #20]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0201 	orr.w	r2, r2, #1
 80048a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	000186a0 	.word	0x000186a0
 80048d4:	001e847f 	.word	0x001e847f
 80048d8:	003d08ff 	.word	0x003d08ff
 80048dc:	431bde83 	.word	0x431bde83
 80048e0:	10624dd3 	.word	0x10624dd3

080048e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	4608      	mov	r0, r1
 80048ee:	4611      	mov	r1, r2
 80048f0:	461a      	mov	r2, r3
 80048f2:	4603      	mov	r3, r0
 80048f4:	817b      	strh	r3, [r7, #10]
 80048f6:	460b      	mov	r3, r1
 80048f8:	813b      	strh	r3, [r7, #8]
 80048fa:	4613      	mov	r3, r2
 80048fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048fe:	f7fe fc41 	bl	8003184 <HAL_GetTick>
 8004902:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b20      	cmp	r3, #32
 800490e:	f040 80d9 	bne.w	8004ac4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	2319      	movs	r3, #25
 8004918:	2201      	movs	r2, #1
 800491a:	496d      	ldr	r1, [pc, #436]	; (8004ad0 <HAL_I2C_Mem_Write+0x1ec>)
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 fdad 	bl	800547c <I2C_WaitOnFlagUntilTimeout>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004928:	2302      	movs	r3, #2
 800492a:	e0cc      	b.n	8004ac6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004932:	2b01      	cmp	r3, #1
 8004934:	d101      	bne.n	800493a <HAL_I2C_Mem_Write+0x56>
 8004936:	2302      	movs	r3, #2
 8004938:	e0c5      	b.n	8004ac6 <HAL_I2C_Mem_Write+0x1e2>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b01      	cmp	r3, #1
 800494e:	d007      	beq.n	8004960 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0201 	orr.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800496e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2221      	movs	r2, #33	; 0x21
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2240      	movs	r2, #64	; 0x40
 800497c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a3a      	ldr	r2, [r7, #32]
 800498a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004990:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004996:	b29a      	uxth	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4a4d      	ldr	r2, [pc, #308]	; (8004ad4 <HAL_I2C_Mem_Write+0x1f0>)
 80049a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049a2:	88f8      	ldrh	r0, [r7, #6]
 80049a4:	893a      	ldrh	r2, [r7, #8]
 80049a6:	8979      	ldrh	r1, [r7, #10]
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	9301      	str	r3, [sp, #4]
 80049ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	4603      	mov	r3, r0
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 fbe4 	bl	8005180 <I2C_RequestMemoryWrite>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d052      	beq.n	8004a64 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e081      	b.n	8004ac6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 fe2e 	bl	8005628 <I2C_WaitOnTXEFlagUntilTimeout>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00d      	beq.n	80049ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	d107      	bne.n	80049ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e06b      	b.n	8004ac6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	781a      	ldrb	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	3b01      	subs	r3, #1
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d11b      	bne.n	8004a64 <HAL_I2C_Mem_Write+0x180>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d017      	beq.n	8004a64 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	781a      	ldrb	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1aa      	bne.n	80049c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 fe1a 	bl	80056aa <I2C_WaitOnBTFFlagUntilTimeout>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00d      	beq.n	8004a98 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d107      	bne.n	8004a94 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a92:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e016      	b.n	8004ac6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	e000      	b.n	8004ac6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004ac4:	2302      	movs	r3, #2
  }
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	00100002 	.word	0x00100002
 8004ad4:	ffff0000 	.word	0xffff0000

08004ad8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b08c      	sub	sp, #48	; 0x30
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	4608      	mov	r0, r1
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	817b      	strh	r3, [r7, #10]
 8004aea:	460b      	mov	r3, r1
 8004aec:	813b      	strh	r3, [r7, #8]
 8004aee:	4613      	mov	r3, r2
 8004af0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004af2:	f7fe fb47 	bl	8003184 <HAL_GetTick>
 8004af6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b20      	cmp	r3, #32
 8004b02:	f040 8208 	bne.w	8004f16 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	2319      	movs	r3, #25
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	497b      	ldr	r1, [pc, #492]	; (8004cfc <HAL_I2C_Mem_Read+0x224>)
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f000 fcb3 	bl	800547c <I2C_WaitOnFlagUntilTimeout>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	e1fb      	b.n	8004f18 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d101      	bne.n	8004b2e <HAL_I2C_Mem_Read+0x56>
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	e1f4      	b.n	8004f18 <HAL_I2C_Mem_Read+0x440>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d007      	beq.n	8004b54 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0201 	orr.w	r2, r2, #1
 8004b52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2222      	movs	r2, #34	; 0x22
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2240      	movs	r2, #64	; 0x40
 8004b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004b84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4a5b      	ldr	r2, [pc, #364]	; (8004d00 <HAL_I2C_Mem_Read+0x228>)
 8004b94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b96:	88f8      	ldrh	r0, [r7, #6]
 8004b98:	893a      	ldrh	r2, [r7, #8]
 8004b9a:	8979      	ldrh	r1, [r7, #10]
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9e:	9301      	str	r3, [sp, #4]
 8004ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 fb80 	bl	80052ac <I2C_RequestMemoryRead>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e1b0      	b.n	8004f18 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d113      	bne.n	8004be6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	623b      	str	r3, [r7, #32]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	623b      	str	r3, [r7, #32]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	623b      	str	r3, [r7, #32]
 8004bd2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	e184      	b.n	8004ef0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d11b      	bne.n	8004c26 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bfc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61fb      	str	r3, [r7, #28]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	61fb      	str	r3, [r7, #28]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	61fb      	str	r3, [r7, #28]
 8004c12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	e164      	b.n	8004ef0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d11b      	bne.n	8004c66 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c3c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c4e:	2300      	movs	r3, #0
 8004c50:	61bb      	str	r3, [r7, #24]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	61bb      	str	r3, [r7, #24]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	61bb      	str	r3, [r7, #24]
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	e144      	b.n	8004ef0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c66:	2300      	movs	r3, #0
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	617b      	str	r3, [r7, #20]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	617b      	str	r3, [r7, #20]
 8004c7a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c7c:	e138      	b.n	8004ef0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c82:	2b03      	cmp	r3, #3
 8004c84:	f200 80f1 	bhi.w	8004e6a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d123      	bne.n	8004cd8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 fd49 	bl	800572c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e139      	b.n	8004f18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	691a      	ldr	r2, [r3, #16]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cd6:	e10b      	b.n	8004ef0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d14e      	bne.n	8004d7e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	4906      	ldr	r1, [pc, #24]	; (8004d04 <HAL_I2C_Mem_Read+0x22c>)
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f000 fbc6 	bl	800547c <I2C_WaitOnFlagUntilTimeout>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d008      	beq.n	8004d08 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e10e      	b.n	8004f18 <HAL_I2C_Mem_Read+0x440>
 8004cfa:	bf00      	nop
 8004cfc:	00100002 	.word	0x00100002
 8004d00:	ffff0000 	.word	0xffff0000
 8004d04:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	691a      	ldr	r2, [r3, #16]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	1c5a      	adds	r2, r3, #1
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d34:	3b01      	subs	r3, #1
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	3b01      	subs	r3, #1
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	691a      	ldr	r2, [r3, #16]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	b2d2      	uxtb	r2, r2
 8004d56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	1c5a      	adds	r2, r3, #1
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d7c:	e0b8      	b.n	8004ef0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d84:	2200      	movs	r2, #0
 8004d86:	4966      	ldr	r1, [pc, #408]	; (8004f20 <HAL_I2C_Mem_Read+0x448>)
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 fb77 	bl	800547c <I2C_WaitOnFlagUntilTimeout>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e0bf      	b.n	8004f18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691a      	ldr	r2, [r3, #16]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de0:	2200      	movs	r2, #0
 8004de2:	494f      	ldr	r1, [pc, #316]	; (8004f20 <HAL_I2C_Mem_Read+0x448>)
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 fb49 	bl	800547c <I2C_WaitOnFlagUntilTimeout>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e091      	b.n	8004f18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691a      	ldr	r2, [r3, #16]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	b2d2      	uxtb	r2, r2
 8004e10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e20:	3b01      	subs	r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	691a      	ldr	r2, [r3, #16]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e68:	e042      	b.n	8004ef0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 fc5c 	bl	800572c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e04c      	b.n	8004f18 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	691a      	ldr	r2, [r3, #16]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	b2d2      	uxtb	r2, r2
 8004e8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	f003 0304 	and.w	r3, r3, #4
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d118      	bne.n	8004ef0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	691a      	ldr	r2, [r3, #16]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eda:	3b01      	subs	r3, #1
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f47f aec2 	bne.w	8004c7e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2220      	movs	r2, #32
 8004efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f12:	2300      	movs	r3, #0
 8004f14:	e000      	b.n	8004f18 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004f16:	2302      	movs	r3, #2
  }
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3728      	adds	r7, #40	; 0x28
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	00010004 	.word	0x00010004

08004f24 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08a      	sub	sp, #40	; 0x28
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	607a      	str	r2, [r7, #4]
 8004f2e:	603b      	str	r3, [r7, #0]
 8004f30:	460b      	mov	r3, r1
 8004f32:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004f34:	f7fe f926 	bl	8003184 <HAL_GetTick>
 8004f38:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b20      	cmp	r3, #32
 8004f48:	f040 8111 	bne.w	800516e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	2319      	movs	r3, #25
 8004f52:	2201      	movs	r2, #1
 8004f54:	4988      	ldr	r1, [pc, #544]	; (8005178 <HAL_I2C_IsDeviceReady+0x254>)
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 fa90 	bl	800547c <I2C_WaitOnFlagUntilTimeout>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004f62:	2302      	movs	r3, #2
 8004f64:	e104      	b.n	8005170 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d101      	bne.n	8004f74 <HAL_I2C_IsDeviceReady+0x50>
 8004f70:	2302      	movs	r3, #2
 8004f72:	e0fd      	b.n	8005170 <HAL_I2C_IsDeviceReady+0x24c>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d007      	beq.n	8004f9a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f042 0201 	orr.w	r2, r2, #1
 8004f98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fa8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2224      	movs	r2, #36	; 0x24
 8004fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4a70      	ldr	r2, [pc, #448]	; (800517c <HAL_I2C_IsDeviceReady+0x258>)
 8004fbc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fcc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 fa4e 	bl	800547c <I2C_WaitOnFlagUntilTimeout>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00d      	beq.n	8005002 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ff4:	d103      	bne.n	8004ffe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ffc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e0b6      	b.n	8005170 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005002:	897b      	ldrh	r3, [r7, #10]
 8005004:	b2db      	uxtb	r3, r3
 8005006:	461a      	mov	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005010:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005012:	f7fe f8b7 	bl	8003184 <HAL_GetTick>
 8005016:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b02      	cmp	r3, #2
 8005024:	bf0c      	ite	eq
 8005026:	2301      	moveq	r3, #1
 8005028:	2300      	movne	r3, #0
 800502a:	b2db      	uxtb	r3, r3
 800502c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800503c:	bf0c      	ite	eq
 800503e:	2301      	moveq	r3, #1
 8005040:	2300      	movne	r3, #0
 8005042:	b2db      	uxtb	r3, r3
 8005044:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005046:	e025      	b.n	8005094 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005048:	f7fe f89c 	bl	8003184 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	429a      	cmp	r2, r3
 8005056:	d302      	bcc.n	800505e <HAL_I2C_IsDeviceReady+0x13a>
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d103      	bne.n	8005066 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	22a0      	movs	r2, #160	; 0xa0
 8005062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b02      	cmp	r3, #2
 8005072:	bf0c      	ite	eq
 8005074:	2301      	moveq	r3, #1
 8005076:	2300      	movne	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800508a:	bf0c      	ite	eq
 800508c:	2301      	moveq	r3, #1
 800508e:	2300      	movne	r3, #0
 8005090:	b2db      	uxtb	r3, r3
 8005092:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2ba0      	cmp	r3, #160	; 0xa0
 800509e:	d005      	beq.n	80050ac <HAL_I2C_IsDeviceReady+0x188>
 80050a0:	7dfb      	ldrb	r3, [r7, #23]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d102      	bne.n	80050ac <HAL_I2C_IsDeviceReady+0x188>
 80050a6:	7dbb      	ldrb	r3, [r7, #22]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0cd      	beq.n	8005048 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2220      	movs	r2, #32
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d129      	bne.n	8005116 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050d0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050d2:	2300      	movs	r3, #0
 80050d4:	613b      	str	r3, [r7, #16]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	613b      	str	r3, [r7, #16]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	613b      	str	r3, [r7, #16]
 80050e6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	2319      	movs	r3, #25
 80050ee:	2201      	movs	r2, #1
 80050f0:	4921      	ldr	r1, [pc, #132]	; (8005178 <HAL_I2C_IsDeviceReady+0x254>)
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 f9c2 	bl	800547c <I2C_WaitOnFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e036      	b.n	8005170 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2220      	movs	r2, #32
 8005106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	e02c      	b.n	8005170 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005124:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800512e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	2319      	movs	r3, #25
 8005136:	2201      	movs	r2, #1
 8005138:	490f      	ldr	r1, [pc, #60]	; (8005178 <HAL_I2C_IsDeviceReady+0x254>)
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 f99e 	bl	800547c <I2C_WaitOnFlagUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e012      	b.n	8005170 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	3301      	adds	r3, #1
 800514e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	429a      	cmp	r2, r3
 8005156:	f4ff af32 	bcc.w	8004fbe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2220      	movs	r2, #32
 800515e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e000      	b.n	8005170 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800516e:	2302      	movs	r3, #2
  }
}
 8005170:	4618      	mov	r0, r3
 8005172:	3720      	adds	r7, #32
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	00100002 	.word	0x00100002
 800517c:	ffff0000 	.word	0xffff0000

08005180 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b088      	sub	sp, #32
 8005184:	af02      	add	r7, sp, #8
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	4608      	mov	r0, r1
 800518a:	4611      	mov	r1, r2
 800518c:	461a      	mov	r2, r3
 800518e:	4603      	mov	r3, r0
 8005190:	817b      	strh	r3, [r7, #10]
 8005192:	460b      	mov	r3, r1
 8005194:	813b      	strh	r3, [r7, #8]
 8005196:	4613      	mov	r3, r2
 8005198:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f000 f960 	bl	800547c <I2C_WaitOnFlagUntilTimeout>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00d      	beq.n	80051de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d0:	d103      	bne.n	80051da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e05f      	b.n	800529e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051de:	897b      	ldrh	r3, [r7, #10]
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	461a      	mov	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	6a3a      	ldr	r2, [r7, #32]
 80051f2:	492d      	ldr	r1, [pc, #180]	; (80052a8 <I2C_RequestMemoryWrite+0x128>)
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 f998 	bl	800552a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e04c      	b.n	800529e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005204:	2300      	movs	r3, #0
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	617b      	str	r3, [r7, #20]
 8005218:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800521a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800521c:	6a39      	ldr	r1, [r7, #32]
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f000 fa02 	bl	8005628 <I2C_WaitOnTXEFlagUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00d      	beq.n	8005246 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	2b04      	cmp	r3, #4
 8005230:	d107      	bne.n	8005242 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005240:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e02b      	b.n	800529e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005246:	88fb      	ldrh	r3, [r7, #6]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d105      	bne.n	8005258 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800524c:	893b      	ldrh	r3, [r7, #8]
 800524e:	b2da      	uxtb	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	611a      	str	r2, [r3, #16]
 8005256:	e021      	b.n	800529c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005258:	893b      	ldrh	r3, [r7, #8]
 800525a:	0a1b      	lsrs	r3, r3, #8
 800525c:	b29b      	uxth	r3, r3
 800525e:	b2da      	uxtb	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005268:	6a39      	ldr	r1, [r7, #32]
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f000 f9dc 	bl	8005628 <I2C_WaitOnTXEFlagUntilTimeout>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00d      	beq.n	8005292 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	2b04      	cmp	r3, #4
 800527c:	d107      	bne.n	800528e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800528c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e005      	b.n	800529e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005292:	893b      	ldrh	r3, [r7, #8]
 8005294:	b2da      	uxtb	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3718      	adds	r7, #24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	00010002 	.word	0x00010002

080052ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b088      	sub	sp, #32
 80052b0:	af02      	add	r7, sp, #8
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	4608      	mov	r0, r1
 80052b6:	4611      	mov	r1, r2
 80052b8:	461a      	mov	r2, r3
 80052ba:	4603      	mov	r3, r0
 80052bc:	817b      	strh	r3, [r7, #10]
 80052be:	460b      	mov	r3, r1
 80052c0:	813b      	strh	r3, [r7, #8]
 80052c2:	4613      	mov	r3, r2
 80052c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	6a3b      	ldr	r3, [r7, #32]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 f8c2 	bl	800547c <I2C_WaitOnFlagUntilTimeout>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00d      	beq.n	800531a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800530c:	d103      	bne.n	8005316 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005314:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e0aa      	b.n	8005470 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800531a:	897b      	ldrh	r3, [r7, #10]
 800531c:	b2db      	uxtb	r3, r3
 800531e:	461a      	mov	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005328:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	6a3a      	ldr	r2, [r7, #32]
 800532e:	4952      	ldr	r1, [pc, #328]	; (8005478 <I2C_RequestMemoryRead+0x1cc>)
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 f8fa 	bl	800552a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e097      	b.n	8005470 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005340:	2300      	movs	r3, #0
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	617b      	str	r3, [r7, #20]
 8005354:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005358:	6a39      	ldr	r1, [r7, #32]
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 f964 	bl	8005628 <I2C_WaitOnTXEFlagUntilTimeout>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00d      	beq.n	8005382 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	2b04      	cmp	r3, #4
 800536c:	d107      	bne.n	800537e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800537c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e076      	b.n	8005470 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005382:	88fb      	ldrh	r3, [r7, #6]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d105      	bne.n	8005394 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005388:	893b      	ldrh	r3, [r7, #8]
 800538a:	b2da      	uxtb	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	611a      	str	r2, [r3, #16]
 8005392:	e021      	b.n	80053d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005394:	893b      	ldrh	r3, [r7, #8]
 8005396:	0a1b      	lsrs	r3, r3, #8
 8005398:	b29b      	uxth	r3, r3
 800539a:	b2da      	uxtb	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a4:	6a39      	ldr	r1, [r7, #32]
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f000 f93e 	bl	8005628 <I2C_WaitOnTXEFlagUntilTimeout>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00d      	beq.n	80053ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	d107      	bne.n	80053ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e050      	b.n	8005470 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053ce:	893b      	ldrh	r3, [r7, #8]
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053da:	6a39      	ldr	r1, [r7, #32]
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 f923 	bl	8005628 <I2C_WaitOnTXEFlagUntilTimeout>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00d      	beq.n	8005404 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ec:	2b04      	cmp	r3, #4
 80053ee:	d107      	bne.n	8005400 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e035      	b.n	8005470 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005412:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	6a3b      	ldr	r3, [r7, #32]
 800541a:	2200      	movs	r2, #0
 800541c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 f82b 	bl	800547c <I2C_WaitOnFlagUntilTimeout>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00d      	beq.n	8005448 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800543a:	d103      	bne.n	8005444 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005442:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e013      	b.n	8005470 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005448:	897b      	ldrh	r3, [r7, #10]
 800544a:	b2db      	uxtb	r3, r3
 800544c:	f043 0301 	orr.w	r3, r3, #1
 8005450:	b2da      	uxtb	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	6a3a      	ldr	r2, [r7, #32]
 800545c:	4906      	ldr	r1, [pc, #24]	; (8005478 <I2C_RequestMemoryRead+0x1cc>)
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f000 f863 	bl	800552a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e000      	b.n	8005470 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3718      	adds	r7, #24
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	00010002 	.word	0x00010002

0800547c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	603b      	str	r3, [r7, #0]
 8005488:	4613      	mov	r3, r2
 800548a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800548c:	e025      	b.n	80054da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005494:	d021      	beq.n	80054da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005496:	f7fd fe75 	bl	8003184 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d302      	bcc.n	80054ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d116      	bne.n	80054da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2220      	movs	r2, #32
 80054b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	f043 0220 	orr.w	r2, r3, #32
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e023      	b.n	8005522 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	0c1b      	lsrs	r3, r3, #16
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d10d      	bne.n	8005500 <I2C_WaitOnFlagUntilTimeout+0x84>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	43da      	mvns	r2, r3
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4013      	ands	r3, r2
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	bf0c      	ite	eq
 80054f6:	2301      	moveq	r3, #1
 80054f8:	2300      	movne	r3, #0
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	461a      	mov	r2, r3
 80054fe:	e00c      	b.n	800551a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	43da      	mvns	r2, r3
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	4013      	ands	r3, r2
 800550c:	b29b      	uxth	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	bf0c      	ite	eq
 8005512:	2301      	moveq	r3, #1
 8005514:	2300      	movne	r3, #0
 8005516:	b2db      	uxtb	r3, r3
 8005518:	461a      	mov	r2, r3
 800551a:	79fb      	ldrb	r3, [r7, #7]
 800551c:	429a      	cmp	r2, r3
 800551e:	d0b6      	beq.n	800548e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b084      	sub	sp, #16
 800552e:	af00      	add	r7, sp, #0
 8005530:	60f8      	str	r0, [r7, #12]
 8005532:	60b9      	str	r1, [r7, #8]
 8005534:	607a      	str	r2, [r7, #4]
 8005536:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005538:	e051      	b.n	80055de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005548:	d123      	bne.n	8005592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005558:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005562:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2220      	movs	r2, #32
 800556e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	f043 0204 	orr.w	r2, r3, #4
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e046      	b.n	8005620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005598:	d021      	beq.n	80055de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800559a:	f7fd fdf3 	bl	8003184 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d302      	bcc.n	80055b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d116      	bne.n	80055de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	f043 0220 	orr.w	r2, r3, #32
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e020      	b.n	8005620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	0c1b      	lsrs	r3, r3, #16
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d10c      	bne.n	8005602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	43da      	mvns	r2, r3
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	4013      	ands	r3, r2
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	bf14      	ite	ne
 80055fa:	2301      	movne	r3, #1
 80055fc:	2300      	moveq	r3, #0
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	e00b      	b.n	800561a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	43da      	mvns	r2, r3
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	4013      	ands	r3, r2
 800560e:	b29b      	uxth	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	bf14      	ite	ne
 8005614:	2301      	movne	r3, #1
 8005616:	2300      	moveq	r3, #0
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d18d      	bne.n	800553a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005634:	e02d      	b.n	8005692 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f000 f8ce 	bl	80057d8 <I2C_IsAcknowledgeFailed>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e02d      	b.n	80056a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800564c:	d021      	beq.n	8005692 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800564e:	f7fd fd99 	bl	8003184 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	429a      	cmp	r2, r3
 800565c:	d302      	bcc.n	8005664 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d116      	bne.n	8005692 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2220      	movs	r2, #32
 800566e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	f043 0220 	orr.w	r2, r3, #32
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e007      	b.n	80056a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569c:	2b80      	cmp	r3, #128	; 0x80
 800569e:	d1ca      	bne.n	8005636 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b084      	sub	sp, #16
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	60f8      	str	r0, [r7, #12]
 80056b2:	60b9      	str	r1, [r7, #8]
 80056b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056b6:	e02d      	b.n	8005714 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 f88d 	bl	80057d8 <I2C_IsAcknowledgeFailed>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d001      	beq.n	80056c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e02d      	b.n	8005724 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056ce:	d021      	beq.n	8005714 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056d0:	f7fd fd58 	bl	8003184 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d302      	bcc.n	80056e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d116      	bne.n	8005714 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2220      	movs	r2, #32
 80056f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005700:	f043 0220 	orr.w	r2, r3, #32
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e007      	b.n	8005724 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	f003 0304 	and.w	r3, r3, #4
 800571e:	2b04      	cmp	r3, #4
 8005720:	d1ca      	bne.n	80056b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005738:	e042      	b.n	80057c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	f003 0310 	and.w	r3, r3, #16
 8005744:	2b10      	cmp	r3, #16
 8005746:	d119      	bne.n	800577c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f06f 0210 	mvn.w	r2, #16
 8005750:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2220      	movs	r2, #32
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e029      	b.n	80057d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800577c:	f7fd fd02 	bl	8003184 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	429a      	cmp	r2, r3
 800578a:	d302      	bcc.n	8005792 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d116      	bne.n	80057c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2220      	movs	r2, #32
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ac:	f043 0220 	orr.w	r2, r3, #32
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e007      	b.n	80057d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ca:	2b40      	cmp	r3, #64	; 0x40
 80057cc:	d1b5      	bne.n	800573a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ee:	d11b      	bne.n	8005828 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2220      	movs	r2, #32
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005814:	f043 0204 	orr.w	r2, r3, #4
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e000      	b.n	800582a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
	...

08005838 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e267      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d075      	beq.n	8005942 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005856:	4b88      	ldr	r3, [pc, #544]	; (8005a78 <HAL_RCC_OscConfig+0x240>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 030c 	and.w	r3, r3, #12
 800585e:	2b04      	cmp	r3, #4
 8005860:	d00c      	beq.n	800587c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005862:	4b85      	ldr	r3, [pc, #532]	; (8005a78 <HAL_RCC_OscConfig+0x240>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800586a:	2b08      	cmp	r3, #8
 800586c:	d112      	bne.n	8005894 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800586e:	4b82      	ldr	r3, [pc, #520]	; (8005a78 <HAL_RCC_OscConfig+0x240>)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005876:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800587a:	d10b      	bne.n	8005894 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800587c:	4b7e      	ldr	r3, [pc, #504]	; (8005a78 <HAL_RCC_OscConfig+0x240>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d05b      	beq.n	8005940 <HAL_RCC_OscConfig+0x108>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d157      	bne.n	8005940 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e242      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800589c:	d106      	bne.n	80058ac <HAL_RCC_OscConfig+0x74>
 800589e:	4b76      	ldr	r3, [pc, #472]	; (8005a78 <HAL_RCC_OscConfig+0x240>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a75      	ldr	r2, [pc, #468]	; (8005a78 <HAL_RCC_OscConfig+0x240>)
 80058a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058a8:	6013      	str	r3, [r2, #0]
 80058aa:	e01d      	b.n	80058e8 <HAL_RCC_OscConfig+0xb0>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058b4:	d10c      	bne.n	80058d0 <HAL_RCC_OscConfig+0x98>
 80058b6:	4b70      	ldr	r3, [pc, #448]	; (8005a78 <HAL_RCC_OscConfig+0x240>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a6f      	ldr	r2, [pc, #444]	; (8005a78 <HAL_RCC_OscConfig+0x240>)
 80058bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058c0:	6013      	str	r3, [r2, #0]
 80058c2:	4b6d      	ldr	r3, [pc, #436]	; (8005a78 <HAL_RCC_OscConfig+0x240>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a6c      	ldr	r2, [pc, #432]	; (8005a78 <HAL_RCC_OscConfig+0x240>)
 80058c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058cc:	6013      	str	r3, [r2, #0]
 80058ce:	e00b      	b.n	80058e8 <HAL_RCC_OscConfig+0xb0>
 80058d0:	4b69      	ldr	r3, [pc, #420]	; (8005a78 <HAL_RCC_OscConfig+0x240>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a68      	ldr	r2, [pc, #416]	; (8005a78 <HAL_RCC_OscConfig+0x240>)
 80058d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058da:	6013      	str	r3, [r2, #0]
 80058dc:	4b66      	ldr	r3, [pc, #408]	; (8005a78 <HAL_RCC_OscConfig+0x240>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a65      	ldr	r2, [pc, #404]	; (8005a78 <HAL_RCC_OscConfig+0x240>)
 80058e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d013      	beq.n	8005918 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f0:	f7fd fc48 	bl	8003184 <HAL_GetTick>
 80058f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058f6:	e008      	b.n	800590a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058f8:	f7fd fc44 	bl	8003184 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b64      	cmp	r3, #100	; 0x64
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e207      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800590a:	4b5b      	ldr	r3, [pc, #364]	; (8005a78 <HAL_RCC_OscConfig+0x240>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0f0      	beq.n	80058f8 <HAL_RCC_OscConfig+0xc0>
 8005916:	e014      	b.n	8005942 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005918:	f7fd fc34 	bl	8003184 <HAL_GetTick>
 800591c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800591e:	e008      	b.n	8005932 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005920:	f7fd fc30 	bl	8003184 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b64      	cmp	r3, #100	; 0x64
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e1f3      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005932:	4b51      	ldr	r3, [pc, #324]	; (8005a78 <HAL_RCC_OscConfig+0x240>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1f0      	bne.n	8005920 <HAL_RCC_OscConfig+0xe8>
 800593e:	e000      	b.n	8005942 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d063      	beq.n	8005a16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800594e:	4b4a      	ldr	r3, [pc, #296]	; (8005a78 <HAL_RCC_OscConfig+0x240>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f003 030c 	and.w	r3, r3, #12
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00b      	beq.n	8005972 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800595a:	4b47      	ldr	r3, [pc, #284]	; (8005a78 <HAL_RCC_OscConfig+0x240>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005962:	2b08      	cmp	r3, #8
 8005964:	d11c      	bne.n	80059a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005966:	4b44      	ldr	r3, [pc, #272]	; (8005a78 <HAL_RCC_OscConfig+0x240>)
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d116      	bne.n	80059a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005972:	4b41      	ldr	r3, [pc, #260]	; (8005a78 <HAL_RCC_OscConfig+0x240>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d005      	beq.n	800598a <HAL_RCC_OscConfig+0x152>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d001      	beq.n	800598a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e1c7      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800598a:	4b3b      	ldr	r3, [pc, #236]	; (8005a78 <HAL_RCC_OscConfig+0x240>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	00db      	lsls	r3, r3, #3
 8005998:	4937      	ldr	r1, [pc, #220]	; (8005a78 <HAL_RCC_OscConfig+0x240>)
 800599a:	4313      	orrs	r3, r2
 800599c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800599e:	e03a      	b.n	8005a16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d020      	beq.n	80059ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059a8:	4b34      	ldr	r3, [pc, #208]	; (8005a7c <HAL_RCC_OscConfig+0x244>)
 80059aa:	2201      	movs	r2, #1
 80059ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ae:	f7fd fbe9 	bl	8003184 <HAL_GetTick>
 80059b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059b4:	e008      	b.n	80059c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059b6:	f7fd fbe5 	bl	8003184 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d901      	bls.n	80059c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e1a8      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059c8:	4b2b      	ldr	r3, [pc, #172]	; (8005a78 <HAL_RCC_OscConfig+0x240>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d0f0      	beq.n	80059b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059d4:	4b28      	ldr	r3, [pc, #160]	; (8005a78 <HAL_RCC_OscConfig+0x240>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	00db      	lsls	r3, r3, #3
 80059e2:	4925      	ldr	r1, [pc, #148]	; (8005a78 <HAL_RCC_OscConfig+0x240>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	600b      	str	r3, [r1, #0]
 80059e8:	e015      	b.n	8005a16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059ea:	4b24      	ldr	r3, [pc, #144]	; (8005a7c <HAL_RCC_OscConfig+0x244>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f0:	f7fd fbc8 	bl	8003184 <HAL_GetTick>
 80059f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059f6:	e008      	b.n	8005a0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059f8:	f7fd fbc4 	bl	8003184 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d901      	bls.n	8005a0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e187      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a0a:	4b1b      	ldr	r3, [pc, #108]	; (8005a78 <HAL_RCC_OscConfig+0x240>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1f0      	bne.n	80059f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0308 	and.w	r3, r3, #8
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d036      	beq.n	8005a90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d016      	beq.n	8005a58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a2a:	4b15      	ldr	r3, [pc, #84]	; (8005a80 <HAL_RCC_OscConfig+0x248>)
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a30:	f7fd fba8 	bl	8003184 <HAL_GetTick>
 8005a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a36:	e008      	b.n	8005a4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a38:	f7fd fba4 	bl	8003184 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e167      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a4a:	4b0b      	ldr	r3, [pc, #44]	; (8005a78 <HAL_RCC_OscConfig+0x240>)
 8005a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0f0      	beq.n	8005a38 <HAL_RCC_OscConfig+0x200>
 8005a56:	e01b      	b.n	8005a90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a58:	4b09      	ldr	r3, [pc, #36]	; (8005a80 <HAL_RCC_OscConfig+0x248>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a5e:	f7fd fb91 	bl	8003184 <HAL_GetTick>
 8005a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a64:	e00e      	b.n	8005a84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a66:	f7fd fb8d 	bl	8003184 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d907      	bls.n	8005a84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e150      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
 8005a78:	40023800 	.word	0x40023800
 8005a7c:	42470000 	.word	0x42470000
 8005a80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a84:	4b88      	ldr	r3, [pc, #544]	; (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1ea      	bne.n	8005a66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 8097 	beq.w	8005bcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005aa2:	4b81      	ldr	r3, [pc, #516]	; (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10f      	bne.n	8005ace <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aae:	2300      	movs	r3, #0
 8005ab0:	60bb      	str	r3, [r7, #8]
 8005ab2:	4b7d      	ldr	r3, [pc, #500]	; (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	4a7c      	ldr	r2, [pc, #496]	; (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005abc:	6413      	str	r3, [r2, #64]	; 0x40
 8005abe:	4b7a      	ldr	r3, [pc, #488]	; (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ac6:	60bb      	str	r3, [r7, #8]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aca:	2301      	movs	r3, #1
 8005acc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ace:	4b77      	ldr	r3, [pc, #476]	; (8005cac <HAL_RCC_OscConfig+0x474>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d118      	bne.n	8005b0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ada:	4b74      	ldr	r3, [pc, #464]	; (8005cac <HAL_RCC_OscConfig+0x474>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a73      	ldr	r2, [pc, #460]	; (8005cac <HAL_RCC_OscConfig+0x474>)
 8005ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ae4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ae6:	f7fd fb4d 	bl	8003184 <HAL_GetTick>
 8005aea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aec:	e008      	b.n	8005b00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aee:	f7fd fb49 	bl	8003184 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e10c      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b00:	4b6a      	ldr	r3, [pc, #424]	; (8005cac <HAL_RCC_OscConfig+0x474>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0f0      	beq.n	8005aee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d106      	bne.n	8005b22 <HAL_RCC_OscConfig+0x2ea>
 8005b14:	4b64      	ldr	r3, [pc, #400]	; (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b18:	4a63      	ldr	r2, [pc, #396]	; (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005b1a:	f043 0301 	orr.w	r3, r3, #1
 8005b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8005b20:	e01c      	b.n	8005b5c <HAL_RCC_OscConfig+0x324>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	2b05      	cmp	r3, #5
 8005b28:	d10c      	bne.n	8005b44 <HAL_RCC_OscConfig+0x30c>
 8005b2a:	4b5f      	ldr	r3, [pc, #380]	; (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2e:	4a5e      	ldr	r2, [pc, #376]	; (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005b30:	f043 0304 	orr.w	r3, r3, #4
 8005b34:	6713      	str	r3, [r2, #112]	; 0x70
 8005b36:	4b5c      	ldr	r3, [pc, #368]	; (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3a:	4a5b      	ldr	r2, [pc, #364]	; (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005b3c:	f043 0301 	orr.w	r3, r3, #1
 8005b40:	6713      	str	r3, [r2, #112]	; 0x70
 8005b42:	e00b      	b.n	8005b5c <HAL_RCC_OscConfig+0x324>
 8005b44:	4b58      	ldr	r3, [pc, #352]	; (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b48:	4a57      	ldr	r2, [pc, #348]	; (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005b4a:	f023 0301 	bic.w	r3, r3, #1
 8005b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8005b50:	4b55      	ldr	r3, [pc, #340]	; (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b54:	4a54      	ldr	r2, [pc, #336]	; (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005b56:	f023 0304 	bic.w	r3, r3, #4
 8005b5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d015      	beq.n	8005b90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b64:	f7fd fb0e 	bl	8003184 <HAL_GetTick>
 8005b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b6a:	e00a      	b.n	8005b82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b6c:	f7fd fb0a 	bl	8003184 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d901      	bls.n	8005b82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e0cb      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b82:	4b49      	ldr	r3, [pc, #292]	; (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0ee      	beq.n	8005b6c <HAL_RCC_OscConfig+0x334>
 8005b8e:	e014      	b.n	8005bba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b90:	f7fd faf8 	bl	8003184 <HAL_GetTick>
 8005b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b96:	e00a      	b.n	8005bae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b98:	f7fd faf4 	bl	8003184 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e0b5      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bae:	4b3e      	ldr	r3, [pc, #248]	; (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1ee      	bne.n	8005b98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bba:	7dfb      	ldrb	r3, [r7, #23]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d105      	bne.n	8005bcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bc0:	4b39      	ldr	r3, [pc, #228]	; (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc4:	4a38      	ldr	r2, [pc, #224]	; (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005bc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 80a1 	beq.w	8005d18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bd6:	4b34      	ldr	r3, [pc, #208]	; (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f003 030c 	and.w	r3, r3, #12
 8005bde:	2b08      	cmp	r3, #8
 8005be0:	d05c      	beq.n	8005c9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d141      	bne.n	8005c6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bea:	4b31      	ldr	r3, [pc, #196]	; (8005cb0 <HAL_RCC_OscConfig+0x478>)
 8005bec:	2200      	movs	r2, #0
 8005bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bf0:	f7fd fac8 	bl	8003184 <HAL_GetTick>
 8005bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bf6:	e008      	b.n	8005c0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bf8:	f7fd fac4 	bl	8003184 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e087      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c0a:	4b27      	ldr	r3, [pc, #156]	; (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1f0      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	69da      	ldr	r2, [r3, #28]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	019b      	lsls	r3, r3, #6
 8005c26:	431a      	orrs	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2c:	085b      	lsrs	r3, r3, #1
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	041b      	lsls	r3, r3, #16
 8005c32:	431a      	orrs	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c38:	061b      	lsls	r3, r3, #24
 8005c3a:	491b      	ldr	r1, [pc, #108]	; (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c40:	4b1b      	ldr	r3, [pc, #108]	; (8005cb0 <HAL_RCC_OscConfig+0x478>)
 8005c42:	2201      	movs	r2, #1
 8005c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c46:	f7fd fa9d 	bl	8003184 <HAL_GetTick>
 8005c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c4c:	e008      	b.n	8005c60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c4e:	f7fd fa99 	bl	8003184 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d901      	bls.n	8005c60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e05c      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c60:	4b11      	ldr	r3, [pc, #68]	; (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d0f0      	beq.n	8005c4e <HAL_RCC_OscConfig+0x416>
 8005c6c:	e054      	b.n	8005d18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c6e:	4b10      	ldr	r3, [pc, #64]	; (8005cb0 <HAL_RCC_OscConfig+0x478>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c74:	f7fd fa86 	bl	8003184 <HAL_GetTick>
 8005c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c7c:	f7fd fa82 	bl	8003184 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e045      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c8e:	4b06      	ldr	r3, [pc, #24]	; (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1f0      	bne.n	8005c7c <HAL_RCC_OscConfig+0x444>
 8005c9a:	e03d      	b.n	8005d18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d107      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e038      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
 8005ca8:	40023800 	.word	0x40023800
 8005cac:	40007000 	.word	0x40007000
 8005cb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005cb4:	4b1b      	ldr	r3, [pc, #108]	; (8005d24 <HAL_RCC_OscConfig+0x4ec>)
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d028      	beq.n	8005d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d121      	bne.n	8005d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d11a      	bne.n	8005d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005cea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d111      	bne.n	8005d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfa:	085b      	lsrs	r3, r3, #1
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d107      	bne.n	8005d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d001      	beq.n	8005d18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e000      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	40023800 	.word	0x40023800

08005d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e0cc      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d3c:	4b68      	ldr	r3, [pc, #416]	; (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0307 	and.w	r3, r3, #7
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d90c      	bls.n	8005d64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d4a:	4b65      	ldr	r3, [pc, #404]	; (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d52:	4b63      	ldr	r3, [pc, #396]	; (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0307 	and.w	r3, r3, #7
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d001      	beq.n	8005d64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e0b8      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d020      	beq.n	8005db2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0304 	and.w	r3, r3, #4
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d005      	beq.n	8005d88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d7c:	4b59      	ldr	r3, [pc, #356]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	4a58      	ldr	r2, [pc, #352]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0308 	and.w	r3, r3, #8
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d005      	beq.n	8005da0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d94:	4b53      	ldr	r3, [pc, #332]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	4a52      	ldr	r2, [pc, #328]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005da0:	4b50      	ldr	r3, [pc, #320]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	494d      	ldr	r1, [pc, #308]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d044      	beq.n	8005e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d107      	bne.n	8005dd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dc6:	4b47      	ldr	r3, [pc, #284]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d119      	bne.n	8005e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e07f      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d003      	beq.n	8005de6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d107      	bne.n	8005df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005de6:	4b3f      	ldr	r3, [pc, #252]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d109      	bne.n	8005e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e06f      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005df6:	4b3b      	ldr	r3, [pc, #236]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0302 	and.w	r3, r3, #2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e067      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e06:	4b37      	ldr	r3, [pc, #220]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f023 0203 	bic.w	r2, r3, #3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	4934      	ldr	r1, [pc, #208]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e18:	f7fd f9b4 	bl	8003184 <HAL_GetTick>
 8005e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e1e:	e00a      	b.n	8005e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e20:	f7fd f9b0 	bl	8003184 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e04f      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e36:	4b2b      	ldr	r3, [pc, #172]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 020c 	and.w	r2, r3, #12
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d1eb      	bne.n	8005e20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e48:	4b25      	ldr	r3, [pc, #148]	; (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0307 	and.w	r3, r3, #7
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d20c      	bcs.n	8005e70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e56:	4b22      	ldr	r3, [pc, #136]	; (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	b2d2      	uxtb	r2, r2
 8005e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e5e:	4b20      	ldr	r3, [pc, #128]	; (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0307 	and.w	r3, r3, #7
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d001      	beq.n	8005e70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e032      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d008      	beq.n	8005e8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e7c:	4b19      	ldr	r3, [pc, #100]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	4916      	ldr	r1, [pc, #88]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0308 	and.w	r3, r3, #8
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d009      	beq.n	8005eae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e9a:	4b12      	ldr	r3, [pc, #72]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	490e      	ldr	r1, [pc, #56]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005eae:	f000 f821 	bl	8005ef4 <HAL_RCC_GetSysClockFreq>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	4b0b      	ldr	r3, [pc, #44]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	091b      	lsrs	r3, r3, #4
 8005eba:	f003 030f 	and.w	r3, r3, #15
 8005ebe:	490a      	ldr	r1, [pc, #40]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8005ec0:	5ccb      	ldrb	r3, [r1, r3]
 8005ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec6:	4a09      	ldr	r2, [pc, #36]	; (8005eec <HAL_RCC_ClockConfig+0x1c4>)
 8005ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005eca:	4b09      	ldr	r3, [pc, #36]	; (8005ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fd f914 	bl	80030fc <HAL_InitTick>

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	40023c00 	.word	0x40023c00
 8005ee4:	40023800 	.word	0x40023800
 8005ee8:	0800a2d8 	.word	0x0800a2d8
 8005eec:	20000008 	.word	0x20000008
 8005ef0:	2000000c 	.word	0x2000000c

08005ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ef8:	b094      	sub	sp, #80	; 0x50
 8005efa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	647b      	str	r3, [r7, #68]	; 0x44
 8005f00:	2300      	movs	r3, #0
 8005f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f04:	2300      	movs	r3, #0
 8005f06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f0c:	4b79      	ldr	r3, [pc, #484]	; (80060f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f003 030c 	and.w	r3, r3, #12
 8005f14:	2b08      	cmp	r3, #8
 8005f16:	d00d      	beq.n	8005f34 <HAL_RCC_GetSysClockFreq+0x40>
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	f200 80e1 	bhi.w	80060e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <HAL_RCC_GetSysClockFreq+0x34>
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	d003      	beq.n	8005f2e <HAL_RCC_GetSysClockFreq+0x3a>
 8005f26:	e0db      	b.n	80060e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f28:	4b73      	ldr	r3, [pc, #460]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005f2c:	e0db      	b.n	80060e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f2e:	4b73      	ldr	r3, [pc, #460]	; (80060fc <HAL_RCC_GetSysClockFreq+0x208>)
 8005f30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f32:	e0d8      	b.n	80060e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f34:	4b6f      	ldr	r3, [pc, #444]	; (80060f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f3e:	4b6d      	ldr	r3, [pc, #436]	; (80060f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d063      	beq.n	8006012 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f4a:	4b6a      	ldr	r3, [pc, #424]	; (80060f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	099b      	lsrs	r3, r3, #6
 8005f50:	2200      	movs	r2, #0
 8005f52:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f5c:	633b      	str	r3, [r7, #48]	; 0x30
 8005f5e:	2300      	movs	r3, #0
 8005f60:	637b      	str	r3, [r7, #52]	; 0x34
 8005f62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005f66:	4622      	mov	r2, r4
 8005f68:	462b      	mov	r3, r5
 8005f6a:	f04f 0000 	mov.w	r0, #0
 8005f6e:	f04f 0100 	mov.w	r1, #0
 8005f72:	0159      	lsls	r1, r3, #5
 8005f74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f78:	0150      	lsls	r0, r2, #5
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4621      	mov	r1, r4
 8005f80:	1a51      	subs	r1, r2, r1
 8005f82:	6139      	str	r1, [r7, #16]
 8005f84:	4629      	mov	r1, r5
 8005f86:	eb63 0301 	sbc.w	r3, r3, r1
 8005f8a:	617b      	str	r3, [r7, #20]
 8005f8c:	f04f 0200 	mov.w	r2, #0
 8005f90:	f04f 0300 	mov.w	r3, #0
 8005f94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f98:	4659      	mov	r1, fp
 8005f9a:	018b      	lsls	r3, r1, #6
 8005f9c:	4651      	mov	r1, sl
 8005f9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fa2:	4651      	mov	r1, sl
 8005fa4:	018a      	lsls	r2, r1, #6
 8005fa6:	4651      	mov	r1, sl
 8005fa8:	ebb2 0801 	subs.w	r8, r2, r1
 8005fac:	4659      	mov	r1, fp
 8005fae:	eb63 0901 	sbc.w	r9, r3, r1
 8005fb2:	f04f 0200 	mov.w	r2, #0
 8005fb6:	f04f 0300 	mov.w	r3, #0
 8005fba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fc6:	4690      	mov	r8, r2
 8005fc8:	4699      	mov	r9, r3
 8005fca:	4623      	mov	r3, r4
 8005fcc:	eb18 0303 	adds.w	r3, r8, r3
 8005fd0:	60bb      	str	r3, [r7, #8]
 8005fd2:	462b      	mov	r3, r5
 8005fd4:	eb49 0303 	adc.w	r3, r9, r3
 8005fd8:	60fb      	str	r3, [r7, #12]
 8005fda:	f04f 0200 	mov.w	r2, #0
 8005fde:	f04f 0300 	mov.w	r3, #0
 8005fe2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005fe6:	4629      	mov	r1, r5
 8005fe8:	024b      	lsls	r3, r1, #9
 8005fea:	4621      	mov	r1, r4
 8005fec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ff0:	4621      	mov	r1, r4
 8005ff2:	024a      	lsls	r2, r1, #9
 8005ff4:	4610      	mov	r0, r2
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ffe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006000:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006004:	f7fa fe20 	bl	8000c48 <__aeabi_uldivmod>
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	4613      	mov	r3, r2
 800600e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006010:	e058      	b.n	80060c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006012:	4b38      	ldr	r3, [pc, #224]	; (80060f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	099b      	lsrs	r3, r3, #6
 8006018:	2200      	movs	r2, #0
 800601a:	4618      	mov	r0, r3
 800601c:	4611      	mov	r1, r2
 800601e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006022:	623b      	str	r3, [r7, #32]
 8006024:	2300      	movs	r3, #0
 8006026:	627b      	str	r3, [r7, #36]	; 0x24
 8006028:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800602c:	4642      	mov	r2, r8
 800602e:	464b      	mov	r3, r9
 8006030:	f04f 0000 	mov.w	r0, #0
 8006034:	f04f 0100 	mov.w	r1, #0
 8006038:	0159      	lsls	r1, r3, #5
 800603a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800603e:	0150      	lsls	r0, r2, #5
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	4641      	mov	r1, r8
 8006046:	ebb2 0a01 	subs.w	sl, r2, r1
 800604a:	4649      	mov	r1, r9
 800604c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006050:	f04f 0200 	mov.w	r2, #0
 8006054:	f04f 0300 	mov.w	r3, #0
 8006058:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800605c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006060:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006064:	ebb2 040a 	subs.w	r4, r2, sl
 8006068:	eb63 050b 	sbc.w	r5, r3, fp
 800606c:	f04f 0200 	mov.w	r2, #0
 8006070:	f04f 0300 	mov.w	r3, #0
 8006074:	00eb      	lsls	r3, r5, #3
 8006076:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800607a:	00e2      	lsls	r2, r4, #3
 800607c:	4614      	mov	r4, r2
 800607e:	461d      	mov	r5, r3
 8006080:	4643      	mov	r3, r8
 8006082:	18e3      	adds	r3, r4, r3
 8006084:	603b      	str	r3, [r7, #0]
 8006086:	464b      	mov	r3, r9
 8006088:	eb45 0303 	adc.w	r3, r5, r3
 800608c:	607b      	str	r3, [r7, #4]
 800608e:	f04f 0200 	mov.w	r2, #0
 8006092:	f04f 0300 	mov.w	r3, #0
 8006096:	e9d7 4500 	ldrd	r4, r5, [r7]
 800609a:	4629      	mov	r1, r5
 800609c:	028b      	lsls	r3, r1, #10
 800609e:	4621      	mov	r1, r4
 80060a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060a4:	4621      	mov	r1, r4
 80060a6:	028a      	lsls	r2, r1, #10
 80060a8:	4610      	mov	r0, r2
 80060aa:	4619      	mov	r1, r3
 80060ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ae:	2200      	movs	r2, #0
 80060b0:	61bb      	str	r3, [r7, #24]
 80060b2:	61fa      	str	r2, [r7, #28]
 80060b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060b8:	f7fa fdc6 	bl	8000c48 <__aeabi_uldivmod>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	4613      	mov	r3, r2
 80060c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060c4:	4b0b      	ldr	r3, [pc, #44]	; (80060f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	0c1b      	lsrs	r3, r3, #16
 80060ca:	f003 0303 	and.w	r3, r3, #3
 80060ce:	3301      	adds	r3, #1
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80060d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060de:	e002      	b.n	80060e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060e0:	4b05      	ldr	r3, [pc, #20]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80060e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3750      	adds	r7, #80	; 0x50
 80060ec:	46bd      	mov	sp, r7
 80060ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060f2:	bf00      	nop
 80060f4:	40023800 	.word	0x40023800
 80060f8:	00f42400 	.word	0x00f42400
 80060fc:	007a1200 	.word	0x007a1200

08006100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006100:	b480      	push	{r7}
 8006102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006104:	4b03      	ldr	r3, [pc, #12]	; (8006114 <HAL_RCC_GetHCLKFreq+0x14>)
 8006106:	681b      	ldr	r3, [r3, #0]
}
 8006108:	4618      	mov	r0, r3
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	20000008 	.word	0x20000008

08006118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800611c:	f7ff fff0 	bl	8006100 <HAL_RCC_GetHCLKFreq>
 8006120:	4602      	mov	r2, r0
 8006122:	4b05      	ldr	r3, [pc, #20]	; (8006138 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	0a9b      	lsrs	r3, r3, #10
 8006128:	f003 0307 	and.w	r3, r3, #7
 800612c:	4903      	ldr	r1, [pc, #12]	; (800613c <HAL_RCC_GetPCLK1Freq+0x24>)
 800612e:	5ccb      	ldrb	r3, [r1, r3]
 8006130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006134:	4618      	mov	r0, r3
 8006136:	bd80      	pop	{r7, pc}
 8006138:	40023800 	.word	0x40023800
 800613c:	0800a2e8 	.word	0x0800a2e8

08006140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006144:	f7ff ffdc 	bl	8006100 <HAL_RCC_GetHCLKFreq>
 8006148:	4602      	mov	r2, r0
 800614a:	4b05      	ldr	r3, [pc, #20]	; (8006160 <HAL_RCC_GetPCLK2Freq+0x20>)
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	0b5b      	lsrs	r3, r3, #13
 8006150:	f003 0307 	and.w	r3, r3, #7
 8006154:	4903      	ldr	r1, [pc, #12]	; (8006164 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006156:	5ccb      	ldrb	r3, [r1, r3]
 8006158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800615c:	4618      	mov	r0, r3
 800615e:	bd80      	pop	{r7, pc}
 8006160:	40023800 	.word	0x40023800
 8006164:	0800a2e8 	.word	0x0800a2e8

08006168 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e03f      	b.n	80061fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d106      	bne.n	8006194 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f7fc fe14 	bl	8002dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2224      	movs	r2, #36	; 0x24
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68da      	ldr	r2, [r3, #12]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f929 	bl	8006404 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	691a      	ldr	r2, [r3, #16]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	695a      	ldr	r2, [r3, #20]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68da      	ldr	r2, [r3, #12]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2220      	movs	r2, #32
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2220      	movs	r2, #32
 80061f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3708      	adds	r7, #8
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b08a      	sub	sp, #40	; 0x28
 8006206:	af02      	add	r7, sp, #8
 8006208:	60f8      	str	r0, [r7, #12]
 800620a:	60b9      	str	r1, [r7, #8]
 800620c:	603b      	str	r3, [r7, #0]
 800620e:	4613      	mov	r3, r2
 8006210:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006212:	2300      	movs	r3, #0
 8006214:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b20      	cmp	r3, #32
 8006220:	d17c      	bne.n	800631c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d002      	beq.n	800622e <HAL_UART_Transmit+0x2c>
 8006228:	88fb      	ldrh	r3, [r7, #6]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e075      	b.n	800631e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006238:	2b01      	cmp	r3, #1
 800623a:	d101      	bne.n	8006240 <HAL_UART_Transmit+0x3e>
 800623c:	2302      	movs	r3, #2
 800623e:	e06e      	b.n	800631e <HAL_UART_Transmit+0x11c>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2221      	movs	r2, #33	; 0x21
 8006252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006256:	f7fc ff95 	bl	8003184 <HAL_GetTick>
 800625a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	88fa      	ldrh	r2, [r7, #6]
 8006260:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	88fa      	ldrh	r2, [r7, #6]
 8006266:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006270:	d108      	bne.n	8006284 <HAL_UART_Transmit+0x82>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d104      	bne.n	8006284 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800627a:	2300      	movs	r3, #0
 800627c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	61bb      	str	r3, [r7, #24]
 8006282:	e003      	b.n	800628c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006288:	2300      	movs	r3, #0
 800628a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006294:	e02a      	b.n	80062ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2200      	movs	r2, #0
 800629e:	2180      	movs	r1, #128	; 0x80
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 f840 	bl	8006326 <UART_WaitOnFlagUntilTimeout>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d001      	beq.n	80062b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e036      	b.n	800631e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10b      	bne.n	80062ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	461a      	mov	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	3302      	adds	r3, #2
 80062ca:	61bb      	str	r3, [r7, #24]
 80062cc:	e007      	b.n	80062de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	781a      	ldrb	r2, [r3, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	3301      	adds	r3, #1
 80062dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	3b01      	subs	r3, #1
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1cf      	bne.n	8006296 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2200      	movs	r2, #0
 80062fe:	2140      	movs	r1, #64	; 0x40
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 f810 	bl	8006326 <UART_WaitOnFlagUntilTimeout>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e006      	b.n	800631e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2220      	movs	r2, #32
 8006314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006318:	2300      	movs	r3, #0
 800631a:	e000      	b.n	800631e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800631c:	2302      	movs	r3, #2
  }
}
 800631e:	4618      	mov	r0, r3
 8006320:	3720      	adds	r7, #32
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b090      	sub	sp, #64	; 0x40
 800632a:	af00      	add	r7, sp, #0
 800632c:	60f8      	str	r0, [r7, #12]
 800632e:	60b9      	str	r1, [r7, #8]
 8006330:	603b      	str	r3, [r7, #0]
 8006332:	4613      	mov	r3, r2
 8006334:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006336:	e050      	b.n	80063da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800633a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800633e:	d04c      	beq.n	80063da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006342:	2b00      	cmp	r3, #0
 8006344:	d007      	beq.n	8006356 <UART_WaitOnFlagUntilTimeout+0x30>
 8006346:	f7fc ff1d 	bl	8003184 <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006352:	429a      	cmp	r2, r3
 8006354:	d241      	bcs.n	80063da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	330c      	adds	r3, #12
 800635c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006360:	e853 3f00 	ldrex	r3, [r3]
 8006364:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800636c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	330c      	adds	r3, #12
 8006374:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006376:	637a      	str	r2, [r7, #52]	; 0x34
 8006378:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800637c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800637e:	e841 2300 	strex	r3, r2, [r1]
 8006382:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1e5      	bne.n	8006356 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3314      	adds	r3, #20
 8006390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	e853 3f00 	ldrex	r3, [r3]
 8006398:	613b      	str	r3, [r7, #16]
   return(result);
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f023 0301 	bic.w	r3, r3, #1
 80063a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3314      	adds	r3, #20
 80063a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063aa:	623a      	str	r2, [r7, #32]
 80063ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ae:	69f9      	ldr	r1, [r7, #28]
 80063b0:	6a3a      	ldr	r2, [r7, #32]
 80063b2:	e841 2300 	strex	r3, r2, [r1]
 80063b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1e5      	bne.n	800638a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2220      	movs	r2, #32
 80063c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2220      	movs	r2, #32
 80063ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e00f      	b.n	80063fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	4013      	ands	r3, r2
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	bf0c      	ite	eq
 80063ea:	2301      	moveq	r3, #1
 80063ec:	2300      	movne	r3, #0
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	461a      	mov	r2, r3
 80063f2:	79fb      	ldrb	r3, [r7, #7]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d09f      	beq.n	8006338 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3740      	adds	r7, #64	; 0x40
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
	...

08006404 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006408:	b0c0      	sub	sp, #256	; 0x100
 800640a:	af00      	add	r7, sp, #0
 800640c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800641c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006420:	68d9      	ldr	r1, [r3, #12]
 8006422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	ea40 0301 	orr.w	r3, r0, r1
 800642c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800642e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	431a      	orrs	r2, r3
 800643c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	431a      	orrs	r2, r3
 8006444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	4313      	orrs	r3, r2
 800644c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800645c:	f021 010c 	bic.w	r1, r1, #12
 8006460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800646a:	430b      	orrs	r3, r1
 800646c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800646e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800647a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800647e:	6999      	ldr	r1, [r3, #24]
 8006480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	ea40 0301 	orr.w	r3, r0, r1
 800648a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800648c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	4b8f      	ldr	r3, [pc, #572]	; (80066d0 <UART_SetConfig+0x2cc>)
 8006494:	429a      	cmp	r2, r3
 8006496:	d005      	beq.n	80064a4 <UART_SetConfig+0xa0>
 8006498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	4b8d      	ldr	r3, [pc, #564]	; (80066d4 <UART_SetConfig+0x2d0>)
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d104      	bne.n	80064ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064a4:	f7ff fe4c 	bl	8006140 <HAL_RCC_GetPCLK2Freq>
 80064a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80064ac:	e003      	b.n	80064b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064ae:	f7ff fe33 	bl	8006118 <HAL_RCC_GetPCLK1Freq>
 80064b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ba:	69db      	ldr	r3, [r3, #28]
 80064bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064c0:	f040 810c 	bne.w	80066dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064c8:	2200      	movs	r2, #0
 80064ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80064d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80064d6:	4622      	mov	r2, r4
 80064d8:	462b      	mov	r3, r5
 80064da:	1891      	adds	r1, r2, r2
 80064dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80064de:	415b      	adcs	r3, r3
 80064e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80064e6:	4621      	mov	r1, r4
 80064e8:	eb12 0801 	adds.w	r8, r2, r1
 80064ec:	4629      	mov	r1, r5
 80064ee:	eb43 0901 	adc.w	r9, r3, r1
 80064f2:	f04f 0200 	mov.w	r2, #0
 80064f6:	f04f 0300 	mov.w	r3, #0
 80064fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006502:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006506:	4690      	mov	r8, r2
 8006508:	4699      	mov	r9, r3
 800650a:	4623      	mov	r3, r4
 800650c:	eb18 0303 	adds.w	r3, r8, r3
 8006510:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006514:	462b      	mov	r3, r5
 8006516:	eb49 0303 	adc.w	r3, r9, r3
 800651a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800651e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800652a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800652e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006532:	460b      	mov	r3, r1
 8006534:	18db      	adds	r3, r3, r3
 8006536:	653b      	str	r3, [r7, #80]	; 0x50
 8006538:	4613      	mov	r3, r2
 800653a:	eb42 0303 	adc.w	r3, r2, r3
 800653e:	657b      	str	r3, [r7, #84]	; 0x54
 8006540:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006544:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006548:	f7fa fb7e 	bl	8000c48 <__aeabi_uldivmod>
 800654c:	4602      	mov	r2, r0
 800654e:	460b      	mov	r3, r1
 8006550:	4b61      	ldr	r3, [pc, #388]	; (80066d8 <UART_SetConfig+0x2d4>)
 8006552:	fba3 2302 	umull	r2, r3, r3, r2
 8006556:	095b      	lsrs	r3, r3, #5
 8006558:	011c      	lsls	r4, r3, #4
 800655a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800655e:	2200      	movs	r2, #0
 8006560:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006564:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006568:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800656c:	4642      	mov	r2, r8
 800656e:	464b      	mov	r3, r9
 8006570:	1891      	adds	r1, r2, r2
 8006572:	64b9      	str	r1, [r7, #72]	; 0x48
 8006574:	415b      	adcs	r3, r3
 8006576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006578:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800657c:	4641      	mov	r1, r8
 800657e:	eb12 0a01 	adds.w	sl, r2, r1
 8006582:	4649      	mov	r1, r9
 8006584:	eb43 0b01 	adc.w	fp, r3, r1
 8006588:	f04f 0200 	mov.w	r2, #0
 800658c:	f04f 0300 	mov.w	r3, #0
 8006590:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006594:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006598:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800659c:	4692      	mov	sl, r2
 800659e:	469b      	mov	fp, r3
 80065a0:	4643      	mov	r3, r8
 80065a2:	eb1a 0303 	adds.w	r3, sl, r3
 80065a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065aa:	464b      	mov	r3, r9
 80065ac:	eb4b 0303 	adc.w	r3, fp, r3
 80065b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80065c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80065c8:	460b      	mov	r3, r1
 80065ca:	18db      	adds	r3, r3, r3
 80065cc:	643b      	str	r3, [r7, #64]	; 0x40
 80065ce:	4613      	mov	r3, r2
 80065d0:	eb42 0303 	adc.w	r3, r2, r3
 80065d4:	647b      	str	r3, [r7, #68]	; 0x44
 80065d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80065da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80065de:	f7fa fb33 	bl	8000c48 <__aeabi_uldivmod>
 80065e2:	4602      	mov	r2, r0
 80065e4:	460b      	mov	r3, r1
 80065e6:	4611      	mov	r1, r2
 80065e8:	4b3b      	ldr	r3, [pc, #236]	; (80066d8 <UART_SetConfig+0x2d4>)
 80065ea:	fba3 2301 	umull	r2, r3, r3, r1
 80065ee:	095b      	lsrs	r3, r3, #5
 80065f0:	2264      	movs	r2, #100	; 0x64
 80065f2:	fb02 f303 	mul.w	r3, r2, r3
 80065f6:	1acb      	subs	r3, r1, r3
 80065f8:	00db      	lsls	r3, r3, #3
 80065fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80065fe:	4b36      	ldr	r3, [pc, #216]	; (80066d8 <UART_SetConfig+0x2d4>)
 8006600:	fba3 2302 	umull	r2, r3, r3, r2
 8006604:	095b      	lsrs	r3, r3, #5
 8006606:	005b      	lsls	r3, r3, #1
 8006608:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800660c:	441c      	add	r4, r3
 800660e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006612:	2200      	movs	r2, #0
 8006614:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006618:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800661c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006620:	4642      	mov	r2, r8
 8006622:	464b      	mov	r3, r9
 8006624:	1891      	adds	r1, r2, r2
 8006626:	63b9      	str	r1, [r7, #56]	; 0x38
 8006628:	415b      	adcs	r3, r3
 800662a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800662c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006630:	4641      	mov	r1, r8
 8006632:	1851      	adds	r1, r2, r1
 8006634:	6339      	str	r1, [r7, #48]	; 0x30
 8006636:	4649      	mov	r1, r9
 8006638:	414b      	adcs	r3, r1
 800663a:	637b      	str	r3, [r7, #52]	; 0x34
 800663c:	f04f 0200 	mov.w	r2, #0
 8006640:	f04f 0300 	mov.w	r3, #0
 8006644:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006648:	4659      	mov	r1, fp
 800664a:	00cb      	lsls	r3, r1, #3
 800664c:	4651      	mov	r1, sl
 800664e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006652:	4651      	mov	r1, sl
 8006654:	00ca      	lsls	r2, r1, #3
 8006656:	4610      	mov	r0, r2
 8006658:	4619      	mov	r1, r3
 800665a:	4603      	mov	r3, r0
 800665c:	4642      	mov	r2, r8
 800665e:	189b      	adds	r3, r3, r2
 8006660:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006664:	464b      	mov	r3, r9
 8006666:	460a      	mov	r2, r1
 8006668:	eb42 0303 	adc.w	r3, r2, r3
 800666c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800667c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006680:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006684:	460b      	mov	r3, r1
 8006686:	18db      	adds	r3, r3, r3
 8006688:	62bb      	str	r3, [r7, #40]	; 0x28
 800668a:	4613      	mov	r3, r2
 800668c:	eb42 0303 	adc.w	r3, r2, r3
 8006690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006692:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006696:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800669a:	f7fa fad5 	bl	8000c48 <__aeabi_uldivmod>
 800669e:	4602      	mov	r2, r0
 80066a0:	460b      	mov	r3, r1
 80066a2:	4b0d      	ldr	r3, [pc, #52]	; (80066d8 <UART_SetConfig+0x2d4>)
 80066a4:	fba3 1302 	umull	r1, r3, r3, r2
 80066a8:	095b      	lsrs	r3, r3, #5
 80066aa:	2164      	movs	r1, #100	; 0x64
 80066ac:	fb01 f303 	mul.w	r3, r1, r3
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	00db      	lsls	r3, r3, #3
 80066b4:	3332      	adds	r3, #50	; 0x32
 80066b6:	4a08      	ldr	r2, [pc, #32]	; (80066d8 <UART_SetConfig+0x2d4>)
 80066b8:	fba2 2303 	umull	r2, r3, r2, r3
 80066bc:	095b      	lsrs	r3, r3, #5
 80066be:	f003 0207 	and.w	r2, r3, #7
 80066c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4422      	add	r2, r4
 80066ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066cc:	e106      	b.n	80068dc <UART_SetConfig+0x4d8>
 80066ce:	bf00      	nop
 80066d0:	40011000 	.word	0x40011000
 80066d4:	40011400 	.word	0x40011400
 80066d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066e0:	2200      	movs	r2, #0
 80066e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80066e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80066ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80066ee:	4642      	mov	r2, r8
 80066f0:	464b      	mov	r3, r9
 80066f2:	1891      	adds	r1, r2, r2
 80066f4:	6239      	str	r1, [r7, #32]
 80066f6:	415b      	adcs	r3, r3
 80066f8:	627b      	str	r3, [r7, #36]	; 0x24
 80066fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80066fe:	4641      	mov	r1, r8
 8006700:	1854      	adds	r4, r2, r1
 8006702:	4649      	mov	r1, r9
 8006704:	eb43 0501 	adc.w	r5, r3, r1
 8006708:	f04f 0200 	mov.w	r2, #0
 800670c:	f04f 0300 	mov.w	r3, #0
 8006710:	00eb      	lsls	r3, r5, #3
 8006712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006716:	00e2      	lsls	r2, r4, #3
 8006718:	4614      	mov	r4, r2
 800671a:	461d      	mov	r5, r3
 800671c:	4643      	mov	r3, r8
 800671e:	18e3      	adds	r3, r4, r3
 8006720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006724:	464b      	mov	r3, r9
 8006726:	eb45 0303 	adc.w	r3, r5, r3
 800672a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800672e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800673a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800673e:	f04f 0200 	mov.w	r2, #0
 8006742:	f04f 0300 	mov.w	r3, #0
 8006746:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800674a:	4629      	mov	r1, r5
 800674c:	008b      	lsls	r3, r1, #2
 800674e:	4621      	mov	r1, r4
 8006750:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006754:	4621      	mov	r1, r4
 8006756:	008a      	lsls	r2, r1, #2
 8006758:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800675c:	f7fa fa74 	bl	8000c48 <__aeabi_uldivmod>
 8006760:	4602      	mov	r2, r0
 8006762:	460b      	mov	r3, r1
 8006764:	4b60      	ldr	r3, [pc, #384]	; (80068e8 <UART_SetConfig+0x4e4>)
 8006766:	fba3 2302 	umull	r2, r3, r3, r2
 800676a:	095b      	lsrs	r3, r3, #5
 800676c:	011c      	lsls	r4, r3, #4
 800676e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006772:	2200      	movs	r2, #0
 8006774:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006778:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800677c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006780:	4642      	mov	r2, r8
 8006782:	464b      	mov	r3, r9
 8006784:	1891      	adds	r1, r2, r2
 8006786:	61b9      	str	r1, [r7, #24]
 8006788:	415b      	adcs	r3, r3
 800678a:	61fb      	str	r3, [r7, #28]
 800678c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006790:	4641      	mov	r1, r8
 8006792:	1851      	adds	r1, r2, r1
 8006794:	6139      	str	r1, [r7, #16]
 8006796:	4649      	mov	r1, r9
 8006798:	414b      	adcs	r3, r1
 800679a:	617b      	str	r3, [r7, #20]
 800679c:	f04f 0200 	mov.w	r2, #0
 80067a0:	f04f 0300 	mov.w	r3, #0
 80067a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067a8:	4659      	mov	r1, fp
 80067aa:	00cb      	lsls	r3, r1, #3
 80067ac:	4651      	mov	r1, sl
 80067ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067b2:	4651      	mov	r1, sl
 80067b4:	00ca      	lsls	r2, r1, #3
 80067b6:	4610      	mov	r0, r2
 80067b8:	4619      	mov	r1, r3
 80067ba:	4603      	mov	r3, r0
 80067bc:	4642      	mov	r2, r8
 80067be:	189b      	adds	r3, r3, r2
 80067c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067c4:	464b      	mov	r3, r9
 80067c6:	460a      	mov	r2, r1
 80067c8:	eb42 0303 	adc.w	r3, r2, r3
 80067cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80067da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80067dc:	f04f 0200 	mov.w	r2, #0
 80067e0:	f04f 0300 	mov.w	r3, #0
 80067e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80067e8:	4649      	mov	r1, r9
 80067ea:	008b      	lsls	r3, r1, #2
 80067ec:	4641      	mov	r1, r8
 80067ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067f2:	4641      	mov	r1, r8
 80067f4:	008a      	lsls	r2, r1, #2
 80067f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80067fa:	f7fa fa25 	bl	8000c48 <__aeabi_uldivmod>
 80067fe:	4602      	mov	r2, r0
 8006800:	460b      	mov	r3, r1
 8006802:	4611      	mov	r1, r2
 8006804:	4b38      	ldr	r3, [pc, #224]	; (80068e8 <UART_SetConfig+0x4e4>)
 8006806:	fba3 2301 	umull	r2, r3, r3, r1
 800680a:	095b      	lsrs	r3, r3, #5
 800680c:	2264      	movs	r2, #100	; 0x64
 800680e:	fb02 f303 	mul.w	r3, r2, r3
 8006812:	1acb      	subs	r3, r1, r3
 8006814:	011b      	lsls	r3, r3, #4
 8006816:	3332      	adds	r3, #50	; 0x32
 8006818:	4a33      	ldr	r2, [pc, #204]	; (80068e8 <UART_SetConfig+0x4e4>)
 800681a:	fba2 2303 	umull	r2, r3, r2, r3
 800681e:	095b      	lsrs	r3, r3, #5
 8006820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006824:	441c      	add	r4, r3
 8006826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800682a:	2200      	movs	r2, #0
 800682c:	673b      	str	r3, [r7, #112]	; 0x70
 800682e:	677a      	str	r2, [r7, #116]	; 0x74
 8006830:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006834:	4642      	mov	r2, r8
 8006836:	464b      	mov	r3, r9
 8006838:	1891      	adds	r1, r2, r2
 800683a:	60b9      	str	r1, [r7, #8]
 800683c:	415b      	adcs	r3, r3
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006844:	4641      	mov	r1, r8
 8006846:	1851      	adds	r1, r2, r1
 8006848:	6039      	str	r1, [r7, #0]
 800684a:	4649      	mov	r1, r9
 800684c:	414b      	adcs	r3, r1
 800684e:	607b      	str	r3, [r7, #4]
 8006850:	f04f 0200 	mov.w	r2, #0
 8006854:	f04f 0300 	mov.w	r3, #0
 8006858:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800685c:	4659      	mov	r1, fp
 800685e:	00cb      	lsls	r3, r1, #3
 8006860:	4651      	mov	r1, sl
 8006862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006866:	4651      	mov	r1, sl
 8006868:	00ca      	lsls	r2, r1, #3
 800686a:	4610      	mov	r0, r2
 800686c:	4619      	mov	r1, r3
 800686e:	4603      	mov	r3, r0
 8006870:	4642      	mov	r2, r8
 8006872:	189b      	adds	r3, r3, r2
 8006874:	66bb      	str	r3, [r7, #104]	; 0x68
 8006876:	464b      	mov	r3, r9
 8006878:	460a      	mov	r2, r1
 800687a:	eb42 0303 	adc.w	r3, r2, r3
 800687e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	663b      	str	r3, [r7, #96]	; 0x60
 800688a:	667a      	str	r2, [r7, #100]	; 0x64
 800688c:	f04f 0200 	mov.w	r2, #0
 8006890:	f04f 0300 	mov.w	r3, #0
 8006894:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006898:	4649      	mov	r1, r9
 800689a:	008b      	lsls	r3, r1, #2
 800689c:	4641      	mov	r1, r8
 800689e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068a2:	4641      	mov	r1, r8
 80068a4:	008a      	lsls	r2, r1, #2
 80068a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80068aa:	f7fa f9cd 	bl	8000c48 <__aeabi_uldivmod>
 80068ae:	4602      	mov	r2, r0
 80068b0:	460b      	mov	r3, r1
 80068b2:	4b0d      	ldr	r3, [pc, #52]	; (80068e8 <UART_SetConfig+0x4e4>)
 80068b4:	fba3 1302 	umull	r1, r3, r3, r2
 80068b8:	095b      	lsrs	r3, r3, #5
 80068ba:	2164      	movs	r1, #100	; 0x64
 80068bc:	fb01 f303 	mul.w	r3, r1, r3
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	011b      	lsls	r3, r3, #4
 80068c4:	3332      	adds	r3, #50	; 0x32
 80068c6:	4a08      	ldr	r2, [pc, #32]	; (80068e8 <UART_SetConfig+0x4e4>)
 80068c8:	fba2 2303 	umull	r2, r3, r2, r3
 80068cc:	095b      	lsrs	r3, r3, #5
 80068ce:	f003 020f 	and.w	r2, r3, #15
 80068d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4422      	add	r2, r4
 80068da:	609a      	str	r2, [r3, #8]
}
 80068dc:	bf00      	nop
 80068de:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80068e2:	46bd      	mov	sp, r7
 80068e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068e8:	51eb851f 	.word	0x51eb851f

080068ec <arm_biquad_cascade_df1_init_f32>:
 80068ec:	b510      	push	{r4, lr}
 80068ee:	6082      	str	r2, [r0, #8]
 80068f0:	6001      	str	r1, [r0, #0]
 80068f2:	4604      	mov	r4, r0
 80068f4:	010a      	lsls	r2, r1, #4
 80068f6:	4618      	mov	r0, r3
 80068f8:	2100      	movs	r1, #0
 80068fa:	f000 fe7a 	bl	80075f2 <memset>
 80068fe:	6060      	str	r0, [r4, #4]
 8006900:	bd10      	pop	{r4, pc}
 8006902:	bf00      	nop

08006904 <arm_biquad_cascade_df1_f32>:
 8006904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006908:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
 800690c:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8006910:	f003 0e03 	and.w	lr, r3, #3
 8006914:	ea4f 190c 	mov.w	r9, ip, lsl #4
 8006918:	6807      	ldr	r7, [r0, #0]
 800691a:	eb02 0a09 	add.w	sl, r2, r9
 800691e:	f10e 38ff 	add.w	r8, lr, #4294967295	; 0xffffffff
 8006922:	3614      	adds	r6, #20
 8006924:	3510      	adds	r5, #16
 8006926:	ed16 4a05 	vldr	s8, [r6, #-20]	; 0xffffffec
 800692a:	ed16 2a04 	vldr	s4, [r6, #-16]
 800692e:	ed56 2a03 	vldr	s5, [r6, #-12]
 8006932:	ed16 3a02 	vldr	s6, [r6, #-8]
 8006936:	ed56 3a01 	vldr	s7, [r6, #-4]
 800693a:	ed55 5a04 	vldr	s11, [r5, #-16]
 800693e:	ed15 5a03 	vldr	s10, [r5, #-12]
 8006942:	ed15 7a02 	vldr	s14, [r5, #-8]
 8006946:	ed55 7a01 	vldr	s15, [r5, #-4]
 800694a:	f1bc 0f00 	cmp.w	ip, #0
 800694e:	f000 80d4 	beq.w	8006afa <arm_biquad_cascade_df1_f32+0x1f6>
 8006952:	f101 0010 	add.w	r0, r1, #16
 8006956:	f102 0310 	add.w	r3, r2, #16
 800695a:	4664      	mov	r4, ip
 800695c:	ed10 6a04 	vldr	s12, [r0, #-16]
 8006960:	ee62 4a25 	vmul.f32	s9, s4, s11
 8006964:	ee64 6a06 	vmul.f32	s13, s8, s12
 8006968:	ee22 5a85 	vmul.f32	s10, s5, s10
 800696c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006970:	ee63 4a07 	vmul.f32	s9, s6, s14
 8006974:	ee76 6a85 	vadd.f32	s13, s13, s10
 8006978:	ee23 5aa7 	vmul.f32	s10, s7, s15
 800697c:	ee76 7aa4 	vadd.f32	s15, s13, s9
 8006980:	ee22 1a06 	vmul.f32	s2, s4, s12
 8006984:	ee77 7a85 	vadd.f32	s15, s15, s10
 8006988:	ee62 1aa5 	vmul.f32	s3, s5, s11
 800698c:	ed43 7a04 	vstr	s15, [r3, #-16]
 8006990:	ed50 4a03 	vldr	s9, [r0, #-12]
 8006994:	ee64 6a24 	vmul.f32	s13, s8, s9
 8006998:	ee23 5a27 	vmul.f32	s10, s6, s15
 800699c:	ee76 6a81 	vadd.f32	s13, s13, s2
 80069a0:	ee63 5a87 	vmul.f32	s11, s7, s14
 80069a4:	ee36 7aa1 	vadd.f32	s14, s13, s3
 80069a8:	ee62 1a24 	vmul.f32	s3, s4, s9
 80069ac:	ee37 7a05 	vadd.f32	s14, s14, s10
 80069b0:	ee22 6a86 	vmul.f32	s12, s5, s12
 80069b4:	ee37 7a25 	vadd.f32	s14, s14, s11
 80069b8:	ee63 7aa7 	vmul.f32	s15, s7, s15
 80069bc:	ed03 7a03 	vstr	s14, [r3, #-12]
 80069c0:	ed10 5a02 	vldr	s10, [r0, #-8]
 80069c4:	ee64 5a05 	vmul.f32	s11, s8, s10
 80069c8:	ee63 6a07 	vmul.f32	s13, s6, s14
 80069cc:	ee75 5aa1 	vadd.f32	s11, s11, s3
 80069d0:	ee62 1a05 	vmul.f32	s3, s4, s10
 80069d4:	ee75 5a86 	vadd.f32	s11, s11, s12
 80069d8:	ee62 4aa4 	vmul.f32	s9, s5, s9
 80069dc:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80069e0:	ee23 7a87 	vmul.f32	s14, s7, s14
 80069e4:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80069e8:	3c01      	subs	r4, #1
 80069ea:	ed43 7a02 	vstr	s15, [r3, #-8]
 80069ee:	ed50 5a01 	vldr	s11, [r0, #-4]
 80069f2:	ee24 6a25 	vmul.f32	s12, s8, s11
 80069f6:	ee63 6a27 	vmul.f32	s13, s6, s15
 80069fa:	ee36 6a21 	vadd.f32	s12, s12, s3
 80069fe:	f100 0010 	add.w	r0, r0, #16
 8006a02:	ee36 6a24 	vadd.f32	s12, s12, s9
 8006a06:	f103 0310 	add.w	r3, r3, #16
 8006a0a:	ee36 6a26 	vadd.f32	s12, s12, s13
 8006a0e:	ee36 7a07 	vadd.f32	s14, s12, s14
 8006a12:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8006a16:	d1a1      	bne.n	800695c <arm_biquad_cascade_df1_f32+0x58>
 8006a18:	4449      	add	r1, r9
 8006a1a:	4653      	mov	r3, sl
 8006a1c:	f1be 0f00 	cmp.w	lr, #0
 8006a20:	d047      	beq.n	8006ab2 <arm_biquad_cascade_df1_f32+0x1ae>
 8006a22:	edd1 4a00 	vldr	s9, [r1]
 8006a26:	ee22 6a25 	vmul.f32	s12, s4, s11
 8006a2a:	ee64 1a24 	vmul.f32	s3, s8, s9
 8006a2e:	ee62 6a85 	vmul.f32	s13, s5, s10
 8006a32:	ee36 5a21 	vadd.f32	s10, s12, s3
 8006a36:	ee23 6a07 	vmul.f32	s12, s6, s14
 8006a3a:	ee35 5a26 	vadd.f32	s10, s10, s13
 8006a3e:	ee63 7aa7 	vmul.f32	s15, s7, s15
 8006a42:	ee35 6a06 	vadd.f32	s12, s10, s12
 8006a46:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006a4a:	ed83 6a00 	vstr	s12, [r3]
 8006a4e:	f1b8 0f00 	cmp.w	r8, #0
 8006a52:	d040      	beq.n	8006ad6 <arm_biquad_cascade_df1_f32+0x1d2>
 8006a54:	ed91 5a01 	vldr	s10, [r1, #4]
 8006a58:	ee62 7a24 	vmul.f32	s15, s4, s9
 8006a5c:	ee65 1a04 	vmul.f32	s3, s10, s8
 8006a60:	ee62 6aa5 	vmul.f32	s13, s5, s11
 8006a64:	ee77 5aa1 	vadd.f32	s11, s15, s3
 8006a68:	ee63 7a06 	vmul.f32	s15, s6, s12
 8006a6c:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8006a70:	ee23 7a87 	vmul.f32	s14, s7, s14
 8006a74:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8006a78:	f1b8 0f01 	cmp.w	r8, #1
 8006a7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a80:	edc3 7a01 	vstr	s15, [r3, #4]
 8006a84:	d030      	beq.n	8006ae8 <arm_biquad_cascade_df1_f32+0x1e4>
 8006a86:	edd1 5a02 	vldr	s11, [r1, #8]
 8006a8a:	ee25 2a02 	vmul.f32	s4, s10, s4
 8006a8e:	ee64 6a25 	vmul.f32	s13, s8, s11
 8006a92:	ee62 2aa4 	vmul.f32	s5, s5, s9
 8006a96:	ee76 6a82 	vadd.f32	s13, s13, s4
 8006a9a:	ee27 3a83 	vmul.f32	s6, s15, s6
 8006a9e:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8006aa2:	ee63 3a86 	vmul.f32	s7, s7, s12
 8006aa6:	ee76 6a83 	vadd.f32	s13, s13, s6
 8006aaa:	ee36 7aa3 	vadd.f32	s14, s13, s7
 8006aae:	ed83 7a02 	vstr	s14, [r3, #8]
 8006ab2:	3f01      	subs	r7, #1
 8006ab4:	ed45 5a04 	vstr	s11, [r5, #-16]
 8006ab8:	ed05 5a03 	vstr	s10, [r5, #-12]
 8006abc:	ed05 7a02 	vstr	s14, [r5, #-8]
 8006ac0:	ed45 7a01 	vstr	s15, [r5, #-4]
 8006ac4:	f106 0614 	add.w	r6, r6, #20
 8006ac8:	f105 0510 	add.w	r5, r5, #16
 8006acc:	4611      	mov	r1, r2
 8006ace:	f47f af2a 	bne.w	8006926 <arm_biquad_cascade_df1_f32+0x22>
 8006ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad6:	eef0 7a47 	vmov.f32	s15, s14
 8006ada:	eeb0 5a65 	vmov.f32	s10, s11
 8006ade:	eeb0 7a46 	vmov.f32	s14, s12
 8006ae2:	eef0 5a64 	vmov.f32	s11, s9
 8006ae6:	e7e4      	b.n	8006ab2 <arm_biquad_cascade_df1_f32+0x1ae>
 8006ae8:	eeb0 7a67 	vmov.f32	s14, s15
 8006aec:	eef0 5a45 	vmov.f32	s11, s10
 8006af0:	eef0 7a46 	vmov.f32	s15, s12
 8006af4:	eeb0 5a64 	vmov.f32	s10, s9
 8006af8:	e7db      	b.n	8006ab2 <arm_biquad_cascade_df1_f32+0x1ae>
 8006afa:	4613      	mov	r3, r2
 8006afc:	e78e      	b.n	8006a1c <arm_biquad_cascade_df1_f32+0x118>
 8006afe:	bf00      	nop

08006b00 <__cvt>:
 8006b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b04:	ec55 4b10 	vmov	r4, r5, d0
 8006b08:	2d00      	cmp	r5, #0
 8006b0a:	460e      	mov	r6, r1
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	462b      	mov	r3, r5
 8006b10:	bfbb      	ittet	lt
 8006b12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006b16:	461d      	movlt	r5, r3
 8006b18:	2300      	movge	r3, #0
 8006b1a:	232d      	movlt	r3, #45	; 0x2d
 8006b1c:	700b      	strb	r3, [r1, #0]
 8006b1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006b24:	4691      	mov	r9, r2
 8006b26:	f023 0820 	bic.w	r8, r3, #32
 8006b2a:	bfbc      	itt	lt
 8006b2c:	4622      	movlt	r2, r4
 8006b2e:	4614      	movlt	r4, r2
 8006b30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b34:	d005      	beq.n	8006b42 <__cvt+0x42>
 8006b36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006b3a:	d100      	bne.n	8006b3e <__cvt+0x3e>
 8006b3c:	3601      	adds	r6, #1
 8006b3e:	2102      	movs	r1, #2
 8006b40:	e000      	b.n	8006b44 <__cvt+0x44>
 8006b42:	2103      	movs	r1, #3
 8006b44:	ab03      	add	r3, sp, #12
 8006b46:	9301      	str	r3, [sp, #4]
 8006b48:	ab02      	add	r3, sp, #8
 8006b4a:	9300      	str	r3, [sp, #0]
 8006b4c:	ec45 4b10 	vmov	d0, r4, r5
 8006b50:	4653      	mov	r3, sl
 8006b52:	4632      	mov	r2, r6
 8006b54:	f000 fe64 	bl	8007820 <_dtoa_r>
 8006b58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006b5c:	4607      	mov	r7, r0
 8006b5e:	d102      	bne.n	8006b66 <__cvt+0x66>
 8006b60:	f019 0f01 	tst.w	r9, #1
 8006b64:	d022      	beq.n	8006bac <__cvt+0xac>
 8006b66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b6a:	eb07 0906 	add.w	r9, r7, r6
 8006b6e:	d110      	bne.n	8006b92 <__cvt+0x92>
 8006b70:	783b      	ldrb	r3, [r7, #0]
 8006b72:	2b30      	cmp	r3, #48	; 0x30
 8006b74:	d10a      	bne.n	8006b8c <__cvt+0x8c>
 8006b76:	2200      	movs	r2, #0
 8006b78:	2300      	movs	r3, #0
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	4629      	mov	r1, r5
 8006b7e:	f7f9 ffa3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b82:	b918      	cbnz	r0, 8006b8c <__cvt+0x8c>
 8006b84:	f1c6 0601 	rsb	r6, r6, #1
 8006b88:	f8ca 6000 	str.w	r6, [sl]
 8006b8c:	f8da 3000 	ldr.w	r3, [sl]
 8006b90:	4499      	add	r9, r3
 8006b92:	2200      	movs	r2, #0
 8006b94:	2300      	movs	r3, #0
 8006b96:	4620      	mov	r0, r4
 8006b98:	4629      	mov	r1, r5
 8006b9a:	f7f9 ff95 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b9e:	b108      	cbz	r0, 8006ba4 <__cvt+0xa4>
 8006ba0:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ba4:	2230      	movs	r2, #48	; 0x30
 8006ba6:	9b03      	ldr	r3, [sp, #12]
 8006ba8:	454b      	cmp	r3, r9
 8006baa:	d307      	bcc.n	8006bbc <__cvt+0xbc>
 8006bac:	9b03      	ldr	r3, [sp, #12]
 8006bae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bb0:	1bdb      	subs	r3, r3, r7
 8006bb2:	4638      	mov	r0, r7
 8006bb4:	6013      	str	r3, [r2, #0]
 8006bb6:	b004      	add	sp, #16
 8006bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bbc:	1c59      	adds	r1, r3, #1
 8006bbe:	9103      	str	r1, [sp, #12]
 8006bc0:	701a      	strb	r2, [r3, #0]
 8006bc2:	e7f0      	b.n	8006ba6 <__cvt+0xa6>

08006bc4 <__exponent>:
 8006bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2900      	cmp	r1, #0
 8006bca:	bfb8      	it	lt
 8006bcc:	4249      	neglt	r1, r1
 8006bce:	f803 2b02 	strb.w	r2, [r3], #2
 8006bd2:	bfb4      	ite	lt
 8006bd4:	222d      	movlt	r2, #45	; 0x2d
 8006bd6:	222b      	movge	r2, #43	; 0x2b
 8006bd8:	2909      	cmp	r1, #9
 8006bda:	7042      	strb	r2, [r0, #1]
 8006bdc:	dd2a      	ble.n	8006c34 <__exponent+0x70>
 8006bde:	f10d 0207 	add.w	r2, sp, #7
 8006be2:	4617      	mov	r7, r2
 8006be4:	260a      	movs	r6, #10
 8006be6:	4694      	mov	ip, r2
 8006be8:	fb91 f5f6 	sdiv	r5, r1, r6
 8006bec:	fb06 1415 	mls	r4, r6, r5, r1
 8006bf0:	3430      	adds	r4, #48	; 0x30
 8006bf2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006bf6:	460c      	mov	r4, r1
 8006bf8:	2c63      	cmp	r4, #99	; 0x63
 8006bfa:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006bfe:	4629      	mov	r1, r5
 8006c00:	dcf1      	bgt.n	8006be6 <__exponent+0x22>
 8006c02:	3130      	adds	r1, #48	; 0x30
 8006c04:	f1ac 0402 	sub.w	r4, ip, #2
 8006c08:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006c0c:	1c41      	adds	r1, r0, #1
 8006c0e:	4622      	mov	r2, r4
 8006c10:	42ba      	cmp	r2, r7
 8006c12:	d30a      	bcc.n	8006c2a <__exponent+0x66>
 8006c14:	f10d 0209 	add.w	r2, sp, #9
 8006c18:	eba2 020c 	sub.w	r2, r2, ip
 8006c1c:	42bc      	cmp	r4, r7
 8006c1e:	bf88      	it	hi
 8006c20:	2200      	movhi	r2, #0
 8006c22:	4413      	add	r3, r2
 8006c24:	1a18      	subs	r0, r3, r0
 8006c26:	b003      	add	sp, #12
 8006c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c2a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006c2e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006c32:	e7ed      	b.n	8006c10 <__exponent+0x4c>
 8006c34:	2330      	movs	r3, #48	; 0x30
 8006c36:	3130      	adds	r1, #48	; 0x30
 8006c38:	7083      	strb	r3, [r0, #2]
 8006c3a:	70c1      	strb	r1, [r0, #3]
 8006c3c:	1d03      	adds	r3, r0, #4
 8006c3e:	e7f1      	b.n	8006c24 <__exponent+0x60>

08006c40 <_printf_float>:
 8006c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c44:	ed2d 8b02 	vpush	{d8}
 8006c48:	b08d      	sub	sp, #52	; 0x34
 8006c4a:	460c      	mov	r4, r1
 8006c4c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006c50:	4616      	mov	r6, r2
 8006c52:	461f      	mov	r7, r3
 8006c54:	4605      	mov	r5, r0
 8006c56:	f000 fcd5 	bl	8007604 <_localeconv_r>
 8006c5a:	f8d0 a000 	ldr.w	sl, [r0]
 8006c5e:	4650      	mov	r0, sl
 8006c60:	f7f9 fb06 	bl	8000270 <strlen>
 8006c64:	2300      	movs	r3, #0
 8006c66:	930a      	str	r3, [sp, #40]	; 0x28
 8006c68:	6823      	ldr	r3, [r4, #0]
 8006c6a:	9305      	str	r3, [sp, #20]
 8006c6c:	f8d8 3000 	ldr.w	r3, [r8]
 8006c70:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006c74:	3307      	adds	r3, #7
 8006c76:	f023 0307 	bic.w	r3, r3, #7
 8006c7a:	f103 0208 	add.w	r2, r3, #8
 8006c7e:	f8c8 2000 	str.w	r2, [r8]
 8006c82:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c8a:	9307      	str	r3, [sp, #28]
 8006c8c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c90:	ee08 0a10 	vmov	s16, r0
 8006c94:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006c98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c9c:	4b9e      	ldr	r3, [pc, #632]	; (8006f18 <_printf_float+0x2d8>)
 8006c9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ca2:	f7f9 ff43 	bl	8000b2c <__aeabi_dcmpun>
 8006ca6:	bb88      	cbnz	r0, 8006d0c <_printf_float+0xcc>
 8006ca8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cac:	4b9a      	ldr	r3, [pc, #616]	; (8006f18 <_printf_float+0x2d8>)
 8006cae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cb2:	f7f9 ff1d 	bl	8000af0 <__aeabi_dcmple>
 8006cb6:	bb48      	cbnz	r0, 8006d0c <_printf_float+0xcc>
 8006cb8:	2200      	movs	r2, #0
 8006cba:	2300      	movs	r3, #0
 8006cbc:	4640      	mov	r0, r8
 8006cbe:	4649      	mov	r1, r9
 8006cc0:	f7f9 ff0c 	bl	8000adc <__aeabi_dcmplt>
 8006cc4:	b110      	cbz	r0, 8006ccc <_printf_float+0x8c>
 8006cc6:	232d      	movs	r3, #45	; 0x2d
 8006cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ccc:	4a93      	ldr	r2, [pc, #588]	; (8006f1c <_printf_float+0x2dc>)
 8006cce:	4b94      	ldr	r3, [pc, #592]	; (8006f20 <_printf_float+0x2e0>)
 8006cd0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006cd4:	bf94      	ite	ls
 8006cd6:	4690      	movls	r8, r2
 8006cd8:	4698      	movhi	r8, r3
 8006cda:	2303      	movs	r3, #3
 8006cdc:	6123      	str	r3, [r4, #16]
 8006cde:	9b05      	ldr	r3, [sp, #20]
 8006ce0:	f023 0304 	bic.w	r3, r3, #4
 8006ce4:	6023      	str	r3, [r4, #0]
 8006ce6:	f04f 0900 	mov.w	r9, #0
 8006cea:	9700      	str	r7, [sp, #0]
 8006cec:	4633      	mov	r3, r6
 8006cee:	aa0b      	add	r2, sp, #44	; 0x2c
 8006cf0:	4621      	mov	r1, r4
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	f000 f9da 	bl	80070ac <_printf_common>
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	f040 8090 	bne.w	8006e1e <_printf_float+0x1de>
 8006cfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d02:	b00d      	add	sp, #52	; 0x34
 8006d04:	ecbd 8b02 	vpop	{d8}
 8006d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d0c:	4642      	mov	r2, r8
 8006d0e:	464b      	mov	r3, r9
 8006d10:	4640      	mov	r0, r8
 8006d12:	4649      	mov	r1, r9
 8006d14:	f7f9 ff0a 	bl	8000b2c <__aeabi_dcmpun>
 8006d18:	b140      	cbz	r0, 8006d2c <_printf_float+0xec>
 8006d1a:	464b      	mov	r3, r9
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	bfbc      	itt	lt
 8006d20:	232d      	movlt	r3, #45	; 0x2d
 8006d22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006d26:	4a7f      	ldr	r2, [pc, #508]	; (8006f24 <_printf_float+0x2e4>)
 8006d28:	4b7f      	ldr	r3, [pc, #508]	; (8006f28 <_printf_float+0x2e8>)
 8006d2a:	e7d1      	b.n	8006cd0 <_printf_float+0x90>
 8006d2c:	6863      	ldr	r3, [r4, #4]
 8006d2e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006d32:	9206      	str	r2, [sp, #24]
 8006d34:	1c5a      	adds	r2, r3, #1
 8006d36:	d13f      	bne.n	8006db8 <_printf_float+0x178>
 8006d38:	2306      	movs	r3, #6
 8006d3a:	6063      	str	r3, [r4, #4]
 8006d3c:	9b05      	ldr	r3, [sp, #20]
 8006d3e:	6861      	ldr	r1, [r4, #4]
 8006d40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006d44:	2300      	movs	r3, #0
 8006d46:	9303      	str	r3, [sp, #12]
 8006d48:	ab0a      	add	r3, sp, #40	; 0x28
 8006d4a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006d4e:	ab09      	add	r3, sp, #36	; 0x24
 8006d50:	ec49 8b10 	vmov	d0, r8, r9
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	6022      	str	r2, [r4, #0]
 8006d58:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	f7ff fecf 	bl	8006b00 <__cvt>
 8006d62:	9b06      	ldr	r3, [sp, #24]
 8006d64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d66:	2b47      	cmp	r3, #71	; 0x47
 8006d68:	4680      	mov	r8, r0
 8006d6a:	d108      	bne.n	8006d7e <_printf_float+0x13e>
 8006d6c:	1cc8      	adds	r0, r1, #3
 8006d6e:	db02      	blt.n	8006d76 <_printf_float+0x136>
 8006d70:	6863      	ldr	r3, [r4, #4]
 8006d72:	4299      	cmp	r1, r3
 8006d74:	dd41      	ble.n	8006dfa <_printf_float+0x1ba>
 8006d76:	f1ab 0302 	sub.w	r3, fp, #2
 8006d7a:	fa5f fb83 	uxtb.w	fp, r3
 8006d7e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d82:	d820      	bhi.n	8006dc6 <_printf_float+0x186>
 8006d84:	3901      	subs	r1, #1
 8006d86:	465a      	mov	r2, fp
 8006d88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006d8c:	9109      	str	r1, [sp, #36]	; 0x24
 8006d8e:	f7ff ff19 	bl	8006bc4 <__exponent>
 8006d92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d94:	1813      	adds	r3, r2, r0
 8006d96:	2a01      	cmp	r2, #1
 8006d98:	4681      	mov	r9, r0
 8006d9a:	6123      	str	r3, [r4, #16]
 8006d9c:	dc02      	bgt.n	8006da4 <_printf_float+0x164>
 8006d9e:	6822      	ldr	r2, [r4, #0]
 8006da0:	07d2      	lsls	r2, r2, #31
 8006da2:	d501      	bpl.n	8006da8 <_printf_float+0x168>
 8006da4:	3301      	adds	r3, #1
 8006da6:	6123      	str	r3, [r4, #16]
 8006da8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d09c      	beq.n	8006cea <_printf_float+0xaa>
 8006db0:	232d      	movs	r3, #45	; 0x2d
 8006db2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006db6:	e798      	b.n	8006cea <_printf_float+0xaa>
 8006db8:	9a06      	ldr	r2, [sp, #24]
 8006dba:	2a47      	cmp	r2, #71	; 0x47
 8006dbc:	d1be      	bne.n	8006d3c <_printf_float+0xfc>
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1bc      	bne.n	8006d3c <_printf_float+0xfc>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e7b9      	b.n	8006d3a <_printf_float+0xfa>
 8006dc6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006dca:	d118      	bne.n	8006dfe <_printf_float+0x1be>
 8006dcc:	2900      	cmp	r1, #0
 8006dce:	6863      	ldr	r3, [r4, #4]
 8006dd0:	dd0b      	ble.n	8006dea <_printf_float+0x1aa>
 8006dd2:	6121      	str	r1, [r4, #16]
 8006dd4:	b913      	cbnz	r3, 8006ddc <_printf_float+0x19c>
 8006dd6:	6822      	ldr	r2, [r4, #0]
 8006dd8:	07d0      	lsls	r0, r2, #31
 8006dda:	d502      	bpl.n	8006de2 <_printf_float+0x1a2>
 8006ddc:	3301      	adds	r3, #1
 8006dde:	440b      	add	r3, r1
 8006de0:	6123      	str	r3, [r4, #16]
 8006de2:	65a1      	str	r1, [r4, #88]	; 0x58
 8006de4:	f04f 0900 	mov.w	r9, #0
 8006de8:	e7de      	b.n	8006da8 <_printf_float+0x168>
 8006dea:	b913      	cbnz	r3, 8006df2 <_printf_float+0x1b2>
 8006dec:	6822      	ldr	r2, [r4, #0]
 8006dee:	07d2      	lsls	r2, r2, #31
 8006df0:	d501      	bpl.n	8006df6 <_printf_float+0x1b6>
 8006df2:	3302      	adds	r3, #2
 8006df4:	e7f4      	b.n	8006de0 <_printf_float+0x1a0>
 8006df6:	2301      	movs	r3, #1
 8006df8:	e7f2      	b.n	8006de0 <_printf_float+0x1a0>
 8006dfa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e00:	4299      	cmp	r1, r3
 8006e02:	db05      	blt.n	8006e10 <_printf_float+0x1d0>
 8006e04:	6823      	ldr	r3, [r4, #0]
 8006e06:	6121      	str	r1, [r4, #16]
 8006e08:	07d8      	lsls	r0, r3, #31
 8006e0a:	d5ea      	bpl.n	8006de2 <_printf_float+0x1a2>
 8006e0c:	1c4b      	adds	r3, r1, #1
 8006e0e:	e7e7      	b.n	8006de0 <_printf_float+0x1a0>
 8006e10:	2900      	cmp	r1, #0
 8006e12:	bfd4      	ite	le
 8006e14:	f1c1 0202 	rsble	r2, r1, #2
 8006e18:	2201      	movgt	r2, #1
 8006e1a:	4413      	add	r3, r2
 8006e1c:	e7e0      	b.n	8006de0 <_printf_float+0x1a0>
 8006e1e:	6823      	ldr	r3, [r4, #0]
 8006e20:	055a      	lsls	r2, r3, #21
 8006e22:	d407      	bmi.n	8006e34 <_printf_float+0x1f4>
 8006e24:	6923      	ldr	r3, [r4, #16]
 8006e26:	4642      	mov	r2, r8
 8006e28:	4631      	mov	r1, r6
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	47b8      	blx	r7
 8006e2e:	3001      	adds	r0, #1
 8006e30:	d12c      	bne.n	8006e8c <_printf_float+0x24c>
 8006e32:	e764      	b.n	8006cfe <_printf_float+0xbe>
 8006e34:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e38:	f240 80e0 	bls.w	8006ffc <_printf_float+0x3bc>
 8006e3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e40:	2200      	movs	r2, #0
 8006e42:	2300      	movs	r3, #0
 8006e44:	f7f9 fe40 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	d034      	beq.n	8006eb6 <_printf_float+0x276>
 8006e4c:	4a37      	ldr	r2, [pc, #220]	; (8006f2c <_printf_float+0x2ec>)
 8006e4e:	2301      	movs	r3, #1
 8006e50:	4631      	mov	r1, r6
 8006e52:	4628      	mov	r0, r5
 8006e54:	47b8      	blx	r7
 8006e56:	3001      	adds	r0, #1
 8006e58:	f43f af51 	beq.w	8006cfe <_printf_float+0xbe>
 8006e5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e60:	429a      	cmp	r2, r3
 8006e62:	db02      	blt.n	8006e6a <_printf_float+0x22a>
 8006e64:	6823      	ldr	r3, [r4, #0]
 8006e66:	07d8      	lsls	r0, r3, #31
 8006e68:	d510      	bpl.n	8006e8c <_printf_float+0x24c>
 8006e6a:	ee18 3a10 	vmov	r3, s16
 8006e6e:	4652      	mov	r2, sl
 8006e70:	4631      	mov	r1, r6
 8006e72:	4628      	mov	r0, r5
 8006e74:	47b8      	blx	r7
 8006e76:	3001      	adds	r0, #1
 8006e78:	f43f af41 	beq.w	8006cfe <_printf_float+0xbe>
 8006e7c:	f04f 0800 	mov.w	r8, #0
 8006e80:	f104 091a 	add.w	r9, r4, #26
 8006e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e86:	3b01      	subs	r3, #1
 8006e88:	4543      	cmp	r3, r8
 8006e8a:	dc09      	bgt.n	8006ea0 <_printf_float+0x260>
 8006e8c:	6823      	ldr	r3, [r4, #0]
 8006e8e:	079b      	lsls	r3, r3, #30
 8006e90:	f100 8107 	bmi.w	80070a2 <_printf_float+0x462>
 8006e94:	68e0      	ldr	r0, [r4, #12]
 8006e96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e98:	4298      	cmp	r0, r3
 8006e9a:	bfb8      	it	lt
 8006e9c:	4618      	movlt	r0, r3
 8006e9e:	e730      	b.n	8006d02 <_printf_float+0xc2>
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	464a      	mov	r2, r9
 8006ea4:	4631      	mov	r1, r6
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	47b8      	blx	r7
 8006eaa:	3001      	adds	r0, #1
 8006eac:	f43f af27 	beq.w	8006cfe <_printf_float+0xbe>
 8006eb0:	f108 0801 	add.w	r8, r8, #1
 8006eb4:	e7e6      	b.n	8006e84 <_printf_float+0x244>
 8006eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	dc39      	bgt.n	8006f30 <_printf_float+0x2f0>
 8006ebc:	4a1b      	ldr	r2, [pc, #108]	; (8006f2c <_printf_float+0x2ec>)
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	4631      	mov	r1, r6
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	47b8      	blx	r7
 8006ec6:	3001      	adds	r0, #1
 8006ec8:	f43f af19 	beq.w	8006cfe <_printf_float+0xbe>
 8006ecc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	d102      	bne.n	8006eda <_printf_float+0x29a>
 8006ed4:	6823      	ldr	r3, [r4, #0]
 8006ed6:	07d9      	lsls	r1, r3, #31
 8006ed8:	d5d8      	bpl.n	8006e8c <_printf_float+0x24c>
 8006eda:	ee18 3a10 	vmov	r3, s16
 8006ede:	4652      	mov	r2, sl
 8006ee0:	4631      	mov	r1, r6
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	47b8      	blx	r7
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	f43f af09 	beq.w	8006cfe <_printf_float+0xbe>
 8006eec:	f04f 0900 	mov.w	r9, #0
 8006ef0:	f104 0a1a 	add.w	sl, r4, #26
 8006ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ef6:	425b      	negs	r3, r3
 8006ef8:	454b      	cmp	r3, r9
 8006efa:	dc01      	bgt.n	8006f00 <_printf_float+0x2c0>
 8006efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006efe:	e792      	b.n	8006e26 <_printf_float+0x1e6>
 8006f00:	2301      	movs	r3, #1
 8006f02:	4652      	mov	r2, sl
 8006f04:	4631      	mov	r1, r6
 8006f06:	4628      	mov	r0, r5
 8006f08:	47b8      	blx	r7
 8006f0a:	3001      	adds	r0, #1
 8006f0c:	f43f aef7 	beq.w	8006cfe <_printf_float+0xbe>
 8006f10:	f109 0901 	add.w	r9, r9, #1
 8006f14:	e7ee      	b.n	8006ef4 <_printf_float+0x2b4>
 8006f16:	bf00      	nop
 8006f18:	7fefffff 	.word	0x7fefffff
 8006f1c:	0800a2f0 	.word	0x0800a2f0
 8006f20:	0800a2f4 	.word	0x0800a2f4
 8006f24:	0800a2f8 	.word	0x0800a2f8
 8006f28:	0800a2fc 	.word	0x0800a2fc
 8006f2c:	0800a300 	.word	0x0800a300
 8006f30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f34:	429a      	cmp	r2, r3
 8006f36:	bfa8      	it	ge
 8006f38:	461a      	movge	r2, r3
 8006f3a:	2a00      	cmp	r2, #0
 8006f3c:	4691      	mov	r9, r2
 8006f3e:	dc37      	bgt.n	8006fb0 <_printf_float+0x370>
 8006f40:	f04f 0b00 	mov.w	fp, #0
 8006f44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f48:	f104 021a 	add.w	r2, r4, #26
 8006f4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f4e:	9305      	str	r3, [sp, #20]
 8006f50:	eba3 0309 	sub.w	r3, r3, r9
 8006f54:	455b      	cmp	r3, fp
 8006f56:	dc33      	bgt.n	8006fc0 <_printf_float+0x380>
 8006f58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	db3b      	blt.n	8006fd8 <_printf_float+0x398>
 8006f60:	6823      	ldr	r3, [r4, #0]
 8006f62:	07da      	lsls	r2, r3, #31
 8006f64:	d438      	bmi.n	8006fd8 <_printf_float+0x398>
 8006f66:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006f6a:	eba2 0903 	sub.w	r9, r2, r3
 8006f6e:	9b05      	ldr	r3, [sp, #20]
 8006f70:	1ad2      	subs	r2, r2, r3
 8006f72:	4591      	cmp	r9, r2
 8006f74:	bfa8      	it	ge
 8006f76:	4691      	movge	r9, r2
 8006f78:	f1b9 0f00 	cmp.w	r9, #0
 8006f7c:	dc35      	bgt.n	8006fea <_printf_float+0x3aa>
 8006f7e:	f04f 0800 	mov.w	r8, #0
 8006f82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f86:	f104 0a1a 	add.w	sl, r4, #26
 8006f8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f8e:	1a9b      	subs	r3, r3, r2
 8006f90:	eba3 0309 	sub.w	r3, r3, r9
 8006f94:	4543      	cmp	r3, r8
 8006f96:	f77f af79 	ble.w	8006e8c <_printf_float+0x24c>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	4652      	mov	r2, sl
 8006f9e:	4631      	mov	r1, r6
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	47b8      	blx	r7
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	f43f aeaa 	beq.w	8006cfe <_printf_float+0xbe>
 8006faa:	f108 0801 	add.w	r8, r8, #1
 8006fae:	e7ec      	b.n	8006f8a <_printf_float+0x34a>
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	4631      	mov	r1, r6
 8006fb4:	4642      	mov	r2, r8
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	47b8      	blx	r7
 8006fba:	3001      	adds	r0, #1
 8006fbc:	d1c0      	bne.n	8006f40 <_printf_float+0x300>
 8006fbe:	e69e      	b.n	8006cfe <_printf_float+0xbe>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	4631      	mov	r1, r6
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	9205      	str	r2, [sp, #20]
 8006fc8:	47b8      	blx	r7
 8006fca:	3001      	adds	r0, #1
 8006fcc:	f43f ae97 	beq.w	8006cfe <_printf_float+0xbe>
 8006fd0:	9a05      	ldr	r2, [sp, #20]
 8006fd2:	f10b 0b01 	add.w	fp, fp, #1
 8006fd6:	e7b9      	b.n	8006f4c <_printf_float+0x30c>
 8006fd8:	ee18 3a10 	vmov	r3, s16
 8006fdc:	4652      	mov	r2, sl
 8006fde:	4631      	mov	r1, r6
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	47b8      	blx	r7
 8006fe4:	3001      	adds	r0, #1
 8006fe6:	d1be      	bne.n	8006f66 <_printf_float+0x326>
 8006fe8:	e689      	b.n	8006cfe <_printf_float+0xbe>
 8006fea:	9a05      	ldr	r2, [sp, #20]
 8006fec:	464b      	mov	r3, r9
 8006fee:	4442      	add	r2, r8
 8006ff0:	4631      	mov	r1, r6
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	47b8      	blx	r7
 8006ff6:	3001      	adds	r0, #1
 8006ff8:	d1c1      	bne.n	8006f7e <_printf_float+0x33e>
 8006ffa:	e680      	b.n	8006cfe <_printf_float+0xbe>
 8006ffc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ffe:	2a01      	cmp	r2, #1
 8007000:	dc01      	bgt.n	8007006 <_printf_float+0x3c6>
 8007002:	07db      	lsls	r3, r3, #31
 8007004:	d53a      	bpl.n	800707c <_printf_float+0x43c>
 8007006:	2301      	movs	r3, #1
 8007008:	4642      	mov	r2, r8
 800700a:	4631      	mov	r1, r6
 800700c:	4628      	mov	r0, r5
 800700e:	47b8      	blx	r7
 8007010:	3001      	adds	r0, #1
 8007012:	f43f ae74 	beq.w	8006cfe <_printf_float+0xbe>
 8007016:	ee18 3a10 	vmov	r3, s16
 800701a:	4652      	mov	r2, sl
 800701c:	4631      	mov	r1, r6
 800701e:	4628      	mov	r0, r5
 8007020:	47b8      	blx	r7
 8007022:	3001      	adds	r0, #1
 8007024:	f43f ae6b 	beq.w	8006cfe <_printf_float+0xbe>
 8007028:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800702c:	2200      	movs	r2, #0
 800702e:	2300      	movs	r3, #0
 8007030:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007034:	f7f9 fd48 	bl	8000ac8 <__aeabi_dcmpeq>
 8007038:	b9d8      	cbnz	r0, 8007072 <_printf_float+0x432>
 800703a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800703e:	f108 0201 	add.w	r2, r8, #1
 8007042:	4631      	mov	r1, r6
 8007044:	4628      	mov	r0, r5
 8007046:	47b8      	blx	r7
 8007048:	3001      	adds	r0, #1
 800704a:	d10e      	bne.n	800706a <_printf_float+0x42a>
 800704c:	e657      	b.n	8006cfe <_printf_float+0xbe>
 800704e:	2301      	movs	r3, #1
 8007050:	4652      	mov	r2, sl
 8007052:	4631      	mov	r1, r6
 8007054:	4628      	mov	r0, r5
 8007056:	47b8      	blx	r7
 8007058:	3001      	adds	r0, #1
 800705a:	f43f ae50 	beq.w	8006cfe <_printf_float+0xbe>
 800705e:	f108 0801 	add.w	r8, r8, #1
 8007062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007064:	3b01      	subs	r3, #1
 8007066:	4543      	cmp	r3, r8
 8007068:	dcf1      	bgt.n	800704e <_printf_float+0x40e>
 800706a:	464b      	mov	r3, r9
 800706c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007070:	e6da      	b.n	8006e28 <_printf_float+0x1e8>
 8007072:	f04f 0800 	mov.w	r8, #0
 8007076:	f104 0a1a 	add.w	sl, r4, #26
 800707a:	e7f2      	b.n	8007062 <_printf_float+0x422>
 800707c:	2301      	movs	r3, #1
 800707e:	4642      	mov	r2, r8
 8007080:	e7df      	b.n	8007042 <_printf_float+0x402>
 8007082:	2301      	movs	r3, #1
 8007084:	464a      	mov	r2, r9
 8007086:	4631      	mov	r1, r6
 8007088:	4628      	mov	r0, r5
 800708a:	47b8      	blx	r7
 800708c:	3001      	adds	r0, #1
 800708e:	f43f ae36 	beq.w	8006cfe <_printf_float+0xbe>
 8007092:	f108 0801 	add.w	r8, r8, #1
 8007096:	68e3      	ldr	r3, [r4, #12]
 8007098:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800709a:	1a5b      	subs	r3, r3, r1
 800709c:	4543      	cmp	r3, r8
 800709e:	dcf0      	bgt.n	8007082 <_printf_float+0x442>
 80070a0:	e6f8      	b.n	8006e94 <_printf_float+0x254>
 80070a2:	f04f 0800 	mov.w	r8, #0
 80070a6:	f104 0919 	add.w	r9, r4, #25
 80070aa:	e7f4      	b.n	8007096 <_printf_float+0x456>

080070ac <_printf_common>:
 80070ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070b0:	4616      	mov	r6, r2
 80070b2:	4699      	mov	r9, r3
 80070b4:	688a      	ldr	r2, [r1, #8]
 80070b6:	690b      	ldr	r3, [r1, #16]
 80070b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070bc:	4293      	cmp	r3, r2
 80070be:	bfb8      	it	lt
 80070c0:	4613      	movlt	r3, r2
 80070c2:	6033      	str	r3, [r6, #0]
 80070c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070c8:	4607      	mov	r7, r0
 80070ca:	460c      	mov	r4, r1
 80070cc:	b10a      	cbz	r2, 80070d2 <_printf_common+0x26>
 80070ce:	3301      	adds	r3, #1
 80070d0:	6033      	str	r3, [r6, #0]
 80070d2:	6823      	ldr	r3, [r4, #0]
 80070d4:	0699      	lsls	r1, r3, #26
 80070d6:	bf42      	ittt	mi
 80070d8:	6833      	ldrmi	r3, [r6, #0]
 80070da:	3302      	addmi	r3, #2
 80070dc:	6033      	strmi	r3, [r6, #0]
 80070de:	6825      	ldr	r5, [r4, #0]
 80070e0:	f015 0506 	ands.w	r5, r5, #6
 80070e4:	d106      	bne.n	80070f4 <_printf_common+0x48>
 80070e6:	f104 0a19 	add.w	sl, r4, #25
 80070ea:	68e3      	ldr	r3, [r4, #12]
 80070ec:	6832      	ldr	r2, [r6, #0]
 80070ee:	1a9b      	subs	r3, r3, r2
 80070f0:	42ab      	cmp	r3, r5
 80070f2:	dc26      	bgt.n	8007142 <_printf_common+0x96>
 80070f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070f8:	1e13      	subs	r3, r2, #0
 80070fa:	6822      	ldr	r2, [r4, #0]
 80070fc:	bf18      	it	ne
 80070fe:	2301      	movne	r3, #1
 8007100:	0692      	lsls	r2, r2, #26
 8007102:	d42b      	bmi.n	800715c <_printf_common+0xb0>
 8007104:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007108:	4649      	mov	r1, r9
 800710a:	4638      	mov	r0, r7
 800710c:	47c0      	blx	r8
 800710e:	3001      	adds	r0, #1
 8007110:	d01e      	beq.n	8007150 <_printf_common+0xa4>
 8007112:	6823      	ldr	r3, [r4, #0]
 8007114:	6922      	ldr	r2, [r4, #16]
 8007116:	f003 0306 	and.w	r3, r3, #6
 800711a:	2b04      	cmp	r3, #4
 800711c:	bf02      	ittt	eq
 800711e:	68e5      	ldreq	r5, [r4, #12]
 8007120:	6833      	ldreq	r3, [r6, #0]
 8007122:	1aed      	subeq	r5, r5, r3
 8007124:	68a3      	ldr	r3, [r4, #8]
 8007126:	bf0c      	ite	eq
 8007128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800712c:	2500      	movne	r5, #0
 800712e:	4293      	cmp	r3, r2
 8007130:	bfc4      	itt	gt
 8007132:	1a9b      	subgt	r3, r3, r2
 8007134:	18ed      	addgt	r5, r5, r3
 8007136:	2600      	movs	r6, #0
 8007138:	341a      	adds	r4, #26
 800713a:	42b5      	cmp	r5, r6
 800713c:	d11a      	bne.n	8007174 <_printf_common+0xc8>
 800713e:	2000      	movs	r0, #0
 8007140:	e008      	b.n	8007154 <_printf_common+0xa8>
 8007142:	2301      	movs	r3, #1
 8007144:	4652      	mov	r2, sl
 8007146:	4649      	mov	r1, r9
 8007148:	4638      	mov	r0, r7
 800714a:	47c0      	blx	r8
 800714c:	3001      	adds	r0, #1
 800714e:	d103      	bne.n	8007158 <_printf_common+0xac>
 8007150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007158:	3501      	adds	r5, #1
 800715a:	e7c6      	b.n	80070ea <_printf_common+0x3e>
 800715c:	18e1      	adds	r1, r4, r3
 800715e:	1c5a      	adds	r2, r3, #1
 8007160:	2030      	movs	r0, #48	; 0x30
 8007162:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007166:	4422      	add	r2, r4
 8007168:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800716c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007170:	3302      	adds	r3, #2
 8007172:	e7c7      	b.n	8007104 <_printf_common+0x58>
 8007174:	2301      	movs	r3, #1
 8007176:	4622      	mov	r2, r4
 8007178:	4649      	mov	r1, r9
 800717a:	4638      	mov	r0, r7
 800717c:	47c0      	blx	r8
 800717e:	3001      	adds	r0, #1
 8007180:	d0e6      	beq.n	8007150 <_printf_common+0xa4>
 8007182:	3601      	adds	r6, #1
 8007184:	e7d9      	b.n	800713a <_printf_common+0x8e>
	...

08007188 <_printf_i>:
 8007188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800718c:	7e0f      	ldrb	r7, [r1, #24]
 800718e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007190:	2f78      	cmp	r7, #120	; 0x78
 8007192:	4691      	mov	r9, r2
 8007194:	4680      	mov	r8, r0
 8007196:	460c      	mov	r4, r1
 8007198:	469a      	mov	sl, r3
 800719a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800719e:	d807      	bhi.n	80071b0 <_printf_i+0x28>
 80071a0:	2f62      	cmp	r7, #98	; 0x62
 80071a2:	d80a      	bhi.n	80071ba <_printf_i+0x32>
 80071a4:	2f00      	cmp	r7, #0
 80071a6:	f000 80d4 	beq.w	8007352 <_printf_i+0x1ca>
 80071aa:	2f58      	cmp	r7, #88	; 0x58
 80071ac:	f000 80c0 	beq.w	8007330 <_printf_i+0x1a8>
 80071b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071b8:	e03a      	b.n	8007230 <_printf_i+0xa8>
 80071ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071be:	2b15      	cmp	r3, #21
 80071c0:	d8f6      	bhi.n	80071b0 <_printf_i+0x28>
 80071c2:	a101      	add	r1, pc, #4	; (adr r1, 80071c8 <_printf_i+0x40>)
 80071c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071c8:	08007221 	.word	0x08007221
 80071cc:	08007235 	.word	0x08007235
 80071d0:	080071b1 	.word	0x080071b1
 80071d4:	080071b1 	.word	0x080071b1
 80071d8:	080071b1 	.word	0x080071b1
 80071dc:	080071b1 	.word	0x080071b1
 80071e0:	08007235 	.word	0x08007235
 80071e4:	080071b1 	.word	0x080071b1
 80071e8:	080071b1 	.word	0x080071b1
 80071ec:	080071b1 	.word	0x080071b1
 80071f0:	080071b1 	.word	0x080071b1
 80071f4:	08007339 	.word	0x08007339
 80071f8:	08007261 	.word	0x08007261
 80071fc:	080072f3 	.word	0x080072f3
 8007200:	080071b1 	.word	0x080071b1
 8007204:	080071b1 	.word	0x080071b1
 8007208:	0800735b 	.word	0x0800735b
 800720c:	080071b1 	.word	0x080071b1
 8007210:	08007261 	.word	0x08007261
 8007214:	080071b1 	.word	0x080071b1
 8007218:	080071b1 	.word	0x080071b1
 800721c:	080072fb 	.word	0x080072fb
 8007220:	682b      	ldr	r3, [r5, #0]
 8007222:	1d1a      	adds	r2, r3, #4
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	602a      	str	r2, [r5, #0]
 8007228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800722c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007230:	2301      	movs	r3, #1
 8007232:	e09f      	b.n	8007374 <_printf_i+0x1ec>
 8007234:	6820      	ldr	r0, [r4, #0]
 8007236:	682b      	ldr	r3, [r5, #0]
 8007238:	0607      	lsls	r7, r0, #24
 800723a:	f103 0104 	add.w	r1, r3, #4
 800723e:	6029      	str	r1, [r5, #0]
 8007240:	d501      	bpl.n	8007246 <_printf_i+0xbe>
 8007242:	681e      	ldr	r6, [r3, #0]
 8007244:	e003      	b.n	800724e <_printf_i+0xc6>
 8007246:	0646      	lsls	r6, r0, #25
 8007248:	d5fb      	bpl.n	8007242 <_printf_i+0xba>
 800724a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800724e:	2e00      	cmp	r6, #0
 8007250:	da03      	bge.n	800725a <_printf_i+0xd2>
 8007252:	232d      	movs	r3, #45	; 0x2d
 8007254:	4276      	negs	r6, r6
 8007256:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800725a:	485a      	ldr	r0, [pc, #360]	; (80073c4 <_printf_i+0x23c>)
 800725c:	230a      	movs	r3, #10
 800725e:	e012      	b.n	8007286 <_printf_i+0xfe>
 8007260:	682b      	ldr	r3, [r5, #0]
 8007262:	6820      	ldr	r0, [r4, #0]
 8007264:	1d19      	adds	r1, r3, #4
 8007266:	6029      	str	r1, [r5, #0]
 8007268:	0605      	lsls	r5, r0, #24
 800726a:	d501      	bpl.n	8007270 <_printf_i+0xe8>
 800726c:	681e      	ldr	r6, [r3, #0]
 800726e:	e002      	b.n	8007276 <_printf_i+0xee>
 8007270:	0641      	lsls	r1, r0, #25
 8007272:	d5fb      	bpl.n	800726c <_printf_i+0xe4>
 8007274:	881e      	ldrh	r6, [r3, #0]
 8007276:	4853      	ldr	r0, [pc, #332]	; (80073c4 <_printf_i+0x23c>)
 8007278:	2f6f      	cmp	r7, #111	; 0x6f
 800727a:	bf0c      	ite	eq
 800727c:	2308      	moveq	r3, #8
 800727e:	230a      	movne	r3, #10
 8007280:	2100      	movs	r1, #0
 8007282:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007286:	6865      	ldr	r5, [r4, #4]
 8007288:	60a5      	str	r5, [r4, #8]
 800728a:	2d00      	cmp	r5, #0
 800728c:	bfa2      	ittt	ge
 800728e:	6821      	ldrge	r1, [r4, #0]
 8007290:	f021 0104 	bicge.w	r1, r1, #4
 8007294:	6021      	strge	r1, [r4, #0]
 8007296:	b90e      	cbnz	r6, 800729c <_printf_i+0x114>
 8007298:	2d00      	cmp	r5, #0
 800729a:	d04b      	beq.n	8007334 <_printf_i+0x1ac>
 800729c:	4615      	mov	r5, r2
 800729e:	fbb6 f1f3 	udiv	r1, r6, r3
 80072a2:	fb03 6711 	mls	r7, r3, r1, r6
 80072a6:	5dc7      	ldrb	r7, [r0, r7]
 80072a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072ac:	4637      	mov	r7, r6
 80072ae:	42bb      	cmp	r3, r7
 80072b0:	460e      	mov	r6, r1
 80072b2:	d9f4      	bls.n	800729e <_printf_i+0x116>
 80072b4:	2b08      	cmp	r3, #8
 80072b6:	d10b      	bne.n	80072d0 <_printf_i+0x148>
 80072b8:	6823      	ldr	r3, [r4, #0]
 80072ba:	07de      	lsls	r6, r3, #31
 80072bc:	d508      	bpl.n	80072d0 <_printf_i+0x148>
 80072be:	6923      	ldr	r3, [r4, #16]
 80072c0:	6861      	ldr	r1, [r4, #4]
 80072c2:	4299      	cmp	r1, r3
 80072c4:	bfde      	ittt	le
 80072c6:	2330      	movle	r3, #48	; 0x30
 80072c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072cc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80072d0:	1b52      	subs	r2, r2, r5
 80072d2:	6122      	str	r2, [r4, #16]
 80072d4:	f8cd a000 	str.w	sl, [sp]
 80072d8:	464b      	mov	r3, r9
 80072da:	aa03      	add	r2, sp, #12
 80072dc:	4621      	mov	r1, r4
 80072de:	4640      	mov	r0, r8
 80072e0:	f7ff fee4 	bl	80070ac <_printf_common>
 80072e4:	3001      	adds	r0, #1
 80072e6:	d14a      	bne.n	800737e <_printf_i+0x1f6>
 80072e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072ec:	b004      	add	sp, #16
 80072ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072f2:	6823      	ldr	r3, [r4, #0]
 80072f4:	f043 0320 	orr.w	r3, r3, #32
 80072f8:	6023      	str	r3, [r4, #0]
 80072fa:	4833      	ldr	r0, [pc, #204]	; (80073c8 <_printf_i+0x240>)
 80072fc:	2778      	movs	r7, #120	; 0x78
 80072fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	6829      	ldr	r1, [r5, #0]
 8007306:	061f      	lsls	r7, r3, #24
 8007308:	f851 6b04 	ldr.w	r6, [r1], #4
 800730c:	d402      	bmi.n	8007314 <_printf_i+0x18c>
 800730e:	065f      	lsls	r7, r3, #25
 8007310:	bf48      	it	mi
 8007312:	b2b6      	uxthmi	r6, r6
 8007314:	07df      	lsls	r7, r3, #31
 8007316:	bf48      	it	mi
 8007318:	f043 0320 	orrmi.w	r3, r3, #32
 800731c:	6029      	str	r1, [r5, #0]
 800731e:	bf48      	it	mi
 8007320:	6023      	strmi	r3, [r4, #0]
 8007322:	b91e      	cbnz	r6, 800732c <_printf_i+0x1a4>
 8007324:	6823      	ldr	r3, [r4, #0]
 8007326:	f023 0320 	bic.w	r3, r3, #32
 800732a:	6023      	str	r3, [r4, #0]
 800732c:	2310      	movs	r3, #16
 800732e:	e7a7      	b.n	8007280 <_printf_i+0xf8>
 8007330:	4824      	ldr	r0, [pc, #144]	; (80073c4 <_printf_i+0x23c>)
 8007332:	e7e4      	b.n	80072fe <_printf_i+0x176>
 8007334:	4615      	mov	r5, r2
 8007336:	e7bd      	b.n	80072b4 <_printf_i+0x12c>
 8007338:	682b      	ldr	r3, [r5, #0]
 800733a:	6826      	ldr	r6, [r4, #0]
 800733c:	6961      	ldr	r1, [r4, #20]
 800733e:	1d18      	adds	r0, r3, #4
 8007340:	6028      	str	r0, [r5, #0]
 8007342:	0635      	lsls	r5, r6, #24
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	d501      	bpl.n	800734c <_printf_i+0x1c4>
 8007348:	6019      	str	r1, [r3, #0]
 800734a:	e002      	b.n	8007352 <_printf_i+0x1ca>
 800734c:	0670      	lsls	r0, r6, #25
 800734e:	d5fb      	bpl.n	8007348 <_printf_i+0x1c0>
 8007350:	8019      	strh	r1, [r3, #0]
 8007352:	2300      	movs	r3, #0
 8007354:	6123      	str	r3, [r4, #16]
 8007356:	4615      	mov	r5, r2
 8007358:	e7bc      	b.n	80072d4 <_printf_i+0x14c>
 800735a:	682b      	ldr	r3, [r5, #0]
 800735c:	1d1a      	adds	r2, r3, #4
 800735e:	602a      	str	r2, [r5, #0]
 8007360:	681d      	ldr	r5, [r3, #0]
 8007362:	6862      	ldr	r2, [r4, #4]
 8007364:	2100      	movs	r1, #0
 8007366:	4628      	mov	r0, r5
 8007368:	f7f8 ff32 	bl	80001d0 <memchr>
 800736c:	b108      	cbz	r0, 8007372 <_printf_i+0x1ea>
 800736e:	1b40      	subs	r0, r0, r5
 8007370:	6060      	str	r0, [r4, #4]
 8007372:	6863      	ldr	r3, [r4, #4]
 8007374:	6123      	str	r3, [r4, #16]
 8007376:	2300      	movs	r3, #0
 8007378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800737c:	e7aa      	b.n	80072d4 <_printf_i+0x14c>
 800737e:	6923      	ldr	r3, [r4, #16]
 8007380:	462a      	mov	r2, r5
 8007382:	4649      	mov	r1, r9
 8007384:	4640      	mov	r0, r8
 8007386:	47d0      	blx	sl
 8007388:	3001      	adds	r0, #1
 800738a:	d0ad      	beq.n	80072e8 <_printf_i+0x160>
 800738c:	6823      	ldr	r3, [r4, #0]
 800738e:	079b      	lsls	r3, r3, #30
 8007390:	d413      	bmi.n	80073ba <_printf_i+0x232>
 8007392:	68e0      	ldr	r0, [r4, #12]
 8007394:	9b03      	ldr	r3, [sp, #12]
 8007396:	4298      	cmp	r0, r3
 8007398:	bfb8      	it	lt
 800739a:	4618      	movlt	r0, r3
 800739c:	e7a6      	b.n	80072ec <_printf_i+0x164>
 800739e:	2301      	movs	r3, #1
 80073a0:	4632      	mov	r2, r6
 80073a2:	4649      	mov	r1, r9
 80073a4:	4640      	mov	r0, r8
 80073a6:	47d0      	blx	sl
 80073a8:	3001      	adds	r0, #1
 80073aa:	d09d      	beq.n	80072e8 <_printf_i+0x160>
 80073ac:	3501      	adds	r5, #1
 80073ae:	68e3      	ldr	r3, [r4, #12]
 80073b0:	9903      	ldr	r1, [sp, #12]
 80073b2:	1a5b      	subs	r3, r3, r1
 80073b4:	42ab      	cmp	r3, r5
 80073b6:	dcf2      	bgt.n	800739e <_printf_i+0x216>
 80073b8:	e7eb      	b.n	8007392 <_printf_i+0x20a>
 80073ba:	2500      	movs	r5, #0
 80073bc:	f104 0619 	add.w	r6, r4, #25
 80073c0:	e7f5      	b.n	80073ae <_printf_i+0x226>
 80073c2:	bf00      	nop
 80073c4:	0800a302 	.word	0x0800a302
 80073c8:	0800a313 	.word	0x0800a313

080073cc <std>:
 80073cc:	2300      	movs	r3, #0
 80073ce:	b510      	push	{r4, lr}
 80073d0:	4604      	mov	r4, r0
 80073d2:	e9c0 3300 	strd	r3, r3, [r0]
 80073d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073da:	6083      	str	r3, [r0, #8]
 80073dc:	8181      	strh	r1, [r0, #12]
 80073de:	6643      	str	r3, [r0, #100]	; 0x64
 80073e0:	81c2      	strh	r2, [r0, #14]
 80073e2:	6183      	str	r3, [r0, #24]
 80073e4:	4619      	mov	r1, r3
 80073e6:	2208      	movs	r2, #8
 80073e8:	305c      	adds	r0, #92	; 0x5c
 80073ea:	f000 f902 	bl	80075f2 <memset>
 80073ee:	4b05      	ldr	r3, [pc, #20]	; (8007404 <std+0x38>)
 80073f0:	6263      	str	r3, [r4, #36]	; 0x24
 80073f2:	4b05      	ldr	r3, [pc, #20]	; (8007408 <std+0x3c>)
 80073f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80073f6:	4b05      	ldr	r3, [pc, #20]	; (800740c <std+0x40>)
 80073f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073fa:	4b05      	ldr	r3, [pc, #20]	; (8007410 <std+0x44>)
 80073fc:	6224      	str	r4, [r4, #32]
 80073fe:	6323      	str	r3, [r4, #48]	; 0x30
 8007400:	bd10      	pop	{r4, pc}
 8007402:	bf00      	nop
 8007404:	0800756d 	.word	0x0800756d
 8007408:	0800758f 	.word	0x0800758f
 800740c:	080075c7 	.word	0x080075c7
 8007410:	080075eb 	.word	0x080075eb

08007414 <stdio_exit_handler>:
 8007414:	4a02      	ldr	r2, [pc, #8]	; (8007420 <stdio_exit_handler+0xc>)
 8007416:	4903      	ldr	r1, [pc, #12]	; (8007424 <stdio_exit_handler+0x10>)
 8007418:	4803      	ldr	r0, [pc, #12]	; (8007428 <stdio_exit_handler+0x14>)
 800741a:	f000 b869 	b.w	80074f0 <_fwalk_sglue>
 800741e:	bf00      	nop
 8007420:	20000014 	.word	0x20000014
 8007424:	080090b9 	.word	0x080090b9
 8007428:	20000020 	.word	0x20000020

0800742c <cleanup_stdio>:
 800742c:	6841      	ldr	r1, [r0, #4]
 800742e:	4b0c      	ldr	r3, [pc, #48]	; (8007460 <cleanup_stdio+0x34>)
 8007430:	4299      	cmp	r1, r3
 8007432:	b510      	push	{r4, lr}
 8007434:	4604      	mov	r4, r0
 8007436:	d001      	beq.n	800743c <cleanup_stdio+0x10>
 8007438:	f001 fe3e 	bl	80090b8 <_fflush_r>
 800743c:	68a1      	ldr	r1, [r4, #8]
 800743e:	4b09      	ldr	r3, [pc, #36]	; (8007464 <cleanup_stdio+0x38>)
 8007440:	4299      	cmp	r1, r3
 8007442:	d002      	beq.n	800744a <cleanup_stdio+0x1e>
 8007444:	4620      	mov	r0, r4
 8007446:	f001 fe37 	bl	80090b8 <_fflush_r>
 800744a:	68e1      	ldr	r1, [r4, #12]
 800744c:	4b06      	ldr	r3, [pc, #24]	; (8007468 <cleanup_stdio+0x3c>)
 800744e:	4299      	cmp	r1, r3
 8007450:	d004      	beq.n	800745c <cleanup_stdio+0x30>
 8007452:	4620      	mov	r0, r4
 8007454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007458:	f001 be2e 	b.w	80090b8 <_fflush_r>
 800745c:	bd10      	pop	{r4, pc}
 800745e:	bf00      	nop
 8007460:	200003d0 	.word	0x200003d0
 8007464:	20000438 	.word	0x20000438
 8007468:	200004a0 	.word	0x200004a0

0800746c <global_stdio_init.part.0>:
 800746c:	b510      	push	{r4, lr}
 800746e:	4b0b      	ldr	r3, [pc, #44]	; (800749c <global_stdio_init.part.0+0x30>)
 8007470:	4c0b      	ldr	r4, [pc, #44]	; (80074a0 <global_stdio_init.part.0+0x34>)
 8007472:	4a0c      	ldr	r2, [pc, #48]	; (80074a4 <global_stdio_init.part.0+0x38>)
 8007474:	601a      	str	r2, [r3, #0]
 8007476:	4620      	mov	r0, r4
 8007478:	2200      	movs	r2, #0
 800747a:	2104      	movs	r1, #4
 800747c:	f7ff ffa6 	bl	80073cc <std>
 8007480:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007484:	2201      	movs	r2, #1
 8007486:	2109      	movs	r1, #9
 8007488:	f7ff ffa0 	bl	80073cc <std>
 800748c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007490:	2202      	movs	r2, #2
 8007492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007496:	2112      	movs	r1, #18
 8007498:	f7ff bf98 	b.w	80073cc <std>
 800749c:	20000508 	.word	0x20000508
 80074a0:	200003d0 	.word	0x200003d0
 80074a4:	08007415 	.word	0x08007415

080074a8 <__sfp_lock_acquire>:
 80074a8:	4801      	ldr	r0, [pc, #4]	; (80074b0 <__sfp_lock_acquire+0x8>)
 80074aa:	f000 b91f 	b.w	80076ec <__retarget_lock_acquire_recursive>
 80074ae:	bf00      	nop
 80074b0:	20000511 	.word	0x20000511

080074b4 <__sfp_lock_release>:
 80074b4:	4801      	ldr	r0, [pc, #4]	; (80074bc <__sfp_lock_release+0x8>)
 80074b6:	f000 b91a 	b.w	80076ee <__retarget_lock_release_recursive>
 80074ba:	bf00      	nop
 80074bc:	20000511 	.word	0x20000511

080074c0 <__sinit>:
 80074c0:	b510      	push	{r4, lr}
 80074c2:	4604      	mov	r4, r0
 80074c4:	f7ff fff0 	bl	80074a8 <__sfp_lock_acquire>
 80074c8:	6a23      	ldr	r3, [r4, #32]
 80074ca:	b11b      	cbz	r3, 80074d4 <__sinit+0x14>
 80074cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074d0:	f7ff bff0 	b.w	80074b4 <__sfp_lock_release>
 80074d4:	4b04      	ldr	r3, [pc, #16]	; (80074e8 <__sinit+0x28>)
 80074d6:	6223      	str	r3, [r4, #32]
 80074d8:	4b04      	ldr	r3, [pc, #16]	; (80074ec <__sinit+0x2c>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1f5      	bne.n	80074cc <__sinit+0xc>
 80074e0:	f7ff ffc4 	bl	800746c <global_stdio_init.part.0>
 80074e4:	e7f2      	b.n	80074cc <__sinit+0xc>
 80074e6:	bf00      	nop
 80074e8:	0800742d 	.word	0x0800742d
 80074ec:	20000508 	.word	0x20000508

080074f0 <_fwalk_sglue>:
 80074f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074f4:	4607      	mov	r7, r0
 80074f6:	4688      	mov	r8, r1
 80074f8:	4614      	mov	r4, r2
 80074fa:	2600      	movs	r6, #0
 80074fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007500:	f1b9 0901 	subs.w	r9, r9, #1
 8007504:	d505      	bpl.n	8007512 <_fwalk_sglue+0x22>
 8007506:	6824      	ldr	r4, [r4, #0]
 8007508:	2c00      	cmp	r4, #0
 800750a:	d1f7      	bne.n	80074fc <_fwalk_sglue+0xc>
 800750c:	4630      	mov	r0, r6
 800750e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007512:	89ab      	ldrh	r3, [r5, #12]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d907      	bls.n	8007528 <_fwalk_sglue+0x38>
 8007518:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800751c:	3301      	adds	r3, #1
 800751e:	d003      	beq.n	8007528 <_fwalk_sglue+0x38>
 8007520:	4629      	mov	r1, r5
 8007522:	4638      	mov	r0, r7
 8007524:	47c0      	blx	r8
 8007526:	4306      	orrs	r6, r0
 8007528:	3568      	adds	r5, #104	; 0x68
 800752a:	e7e9      	b.n	8007500 <_fwalk_sglue+0x10>

0800752c <siprintf>:
 800752c:	b40e      	push	{r1, r2, r3}
 800752e:	b500      	push	{lr}
 8007530:	b09c      	sub	sp, #112	; 0x70
 8007532:	ab1d      	add	r3, sp, #116	; 0x74
 8007534:	9002      	str	r0, [sp, #8]
 8007536:	9006      	str	r0, [sp, #24]
 8007538:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800753c:	4809      	ldr	r0, [pc, #36]	; (8007564 <siprintf+0x38>)
 800753e:	9107      	str	r1, [sp, #28]
 8007540:	9104      	str	r1, [sp, #16]
 8007542:	4909      	ldr	r1, [pc, #36]	; (8007568 <siprintf+0x3c>)
 8007544:	f853 2b04 	ldr.w	r2, [r3], #4
 8007548:	9105      	str	r1, [sp, #20]
 800754a:	6800      	ldr	r0, [r0, #0]
 800754c:	9301      	str	r3, [sp, #4]
 800754e:	a902      	add	r1, sp, #8
 8007550:	f001 fc2e 	bl	8008db0 <_svfiprintf_r>
 8007554:	9b02      	ldr	r3, [sp, #8]
 8007556:	2200      	movs	r2, #0
 8007558:	701a      	strb	r2, [r3, #0]
 800755a:	b01c      	add	sp, #112	; 0x70
 800755c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007560:	b003      	add	sp, #12
 8007562:	4770      	bx	lr
 8007564:	2000006c 	.word	0x2000006c
 8007568:	ffff0208 	.word	0xffff0208

0800756c <__sread>:
 800756c:	b510      	push	{r4, lr}
 800756e:	460c      	mov	r4, r1
 8007570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007574:	f000 f86c 	bl	8007650 <_read_r>
 8007578:	2800      	cmp	r0, #0
 800757a:	bfab      	itete	ge
 800757c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800757e:	89a3      	ldrhlt	r3, [r4, #12]
 8007580:	181b      	addge	r3, r3, r0
 8007582:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007586:	bfac      	ite	ge
 8007588:	6563      	strge	r3, [r4, #84]	; 0x54
 800758a:	81a3      	strhlt	r3, [r4, #12]
 800758c:	bd10      	pop	{r4, pc}

0800758e <__swrite>:
 800758e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007592:	461f      	mov	r7, r3
 8007594:	898b      	ldrh	r3, [r1, #12]
 8007596:	05db      	lsls	r3, r3, #23
 8007598:	4605      	mov	r5, r0
 800759a:	460c      	mov	r4, r1
 800759c:	4616      	mov	r6, r2
 800759e:	d505      	bpl.n	80075ac <__swrite+0x1e>
 80075a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075a4:	2302      	movs	r3, #2
 80075a6:	2200      	movs	r2, #0
 80075a8:	f000 f840 	bl	800762c <_lseek_r>
 80075ac:	89a3      	ldrh	r3, [r4, #12]
 80075ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075b6:	81a3      	strh	r3, [r4, #12]
 80075b8:	4632      	mov	r2, r6
 80075ba:	463b      	mov	r3, r7
 80075bc:	4628      	mov	r0, r5
 80075be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075c2:	f000 b857 	b.w	8007674 <_write_r>

080075c6 <__sseek>:
 80075c6:	b510      	push	{r4, lr}
 80075c8:	460c      	mov	r4, r1
 80075ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075ce:	f000 f82d 	bl	800762c <_lseek_r>
 80075d2:	1c43      	adds	r3, r0, #1
 80075d4:	89a3      	ldrh	r3, [r4, #12]
 80075d6:	bf15      	itete	ne
 80075d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80075da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80075de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80075e2:	81a3      	strheq	r3, [r4, #12]
 80075e4:	bf18      	it	ne
 80075e6:	81a3      	strhne	r3, [r4, #12]
 80075e8:	bd10      	pop	{r4, pc}

080075ea <__sclose>:
 80075ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075ee:	f000 b80d 	b.w	800760c <_close_r>

080075f2 <memset>:
 80075f2:	4402      	add	r2, r0
 80075f4:	4603      	mov	r3, r0
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d100      	bne.n	80075fc <memset+0xa>
 80075fa:	4770      	bx	lr
 80075fc:	f803 1b01 	strb.w	r1, [r3], #1
 8007600:	e7f9      	b.n	80075f6 <memset+0x4>
	...

08007604 <_localeconv_r>:
 8007604:	4800      	ldr	r0, [pc, #0]	; (8007608 <_localeconv_r+0x4>)
 8007606:	4770      	bx	lr
 8007608:	20000160 	.word	0x20000160

0800760c <_close_r>:
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	4d06      	ldr	r5, [pc, #24]	; (8007628 <_close_r+0x1c>)
 8007610:	2300      	movs	r3, #0
 8007612:	4604      	mov	r4, r0
 8007614:	4608      	mov	r0, r1
 8007616:	602b      	str	r3, [r5, #0]
 8007618:	f7fb fca7 	bl	8002f6a <_close>
 800761c:	1c43      	adds	r3, r0, #1
 800761e:	d102      	bne.n	8007626 <_close_r+0x1a>
 8007620:	682b      	ldr	r3, [r5, #0]
 8007622:	b103      	cbz	r3, 8007626 <_close_r+0x1a>
 8007624:	6023      	str	r3, [r4, #0]
 8007626:	bd38      	pop	{r3, r4, r5, pc}
 8007628:	2000050c 	.word	0x2000050c

0800762c <_lseek_r>:
 800762c:	b538      	push	{r3, r4, r5, lr}
 800762e:	4d07      	ldr	r5, [pc, #28]	; (800764c <_lseek_r+0x20>)
 8007630:	4604      	mov	r4, r0
 8007632:	4608      	mov	r0, r1
 8007634:	4611      	mov	r1, r2
 8007636:	2200      	movs	r2, #0
 8007638:	602a      	str	r2, [r5, #0]
 800763a:	461a      	mov	r2, r3
 800763c:	f7fb fcbc 	bl	8002fb8 <_lseek>
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	d102      	bne.n	800764a <_lseek_r+0x1e>
 8007644:	682b      	ldr	r3, [r5, #0]
 8007646:	b103      	cbz	r3, 800764a <_lseek_r+0x1e>
 8007648:	6023      	str	r3, [r4, #0]
 800764a:	bd38      	pop	{r3, r4, r5, pc}
 800764c:	2000050c 	.word	0x2000050c

08007650 <_read_r>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	4d07      	ldr	r5, [pc, #28]	; (8007670 <_read_r+0x20>)
 8007654:	4604      	mov	r4, r0
 8007656:	4608      	mov	r0, r1
 8007658:	4611      	mov	r1, r2
 800765a:	2200      	movs	r2, #0
 800765c:	602a      	str	r2, [r5, #0]
 800765e:	461a      	mov	r2, r3
 8007660:	f7fb fc4a 	bl	8002ef8 <_read>
 8007664:	1c43      	adds	r3, r0, #1
 8007666:	d102      	bne.n	800766e <_read_r+0x1e>
 8007668:	682b      	ldr	r3, [r5, #0]
 800766a:	b103      	cbz	r3, 800766e <_read_r+0x1e>
 800766c:	6023      	str	r3, [r4, #0]
 800766e:	bd38      	pop	{r3, r4, r5, pc}
 8007670:	2000050c 	.word	0x2000050c

08007674 <_write_r>:
 8007674:	b538      	push	{r3, r4, r5, lr}
 8007676:	4d07      	ldr	r5, [pc, #28]	; (8007694 <_write_r+0x20>)
 8007678:	4604      	mov	r4, r0
 800767a:	4608      	mov	r0, r1
 800767c:	4611      	mov	r1, r2
 800767e:	2200      	movs	r2, #0
 8007680:	602a      	str	r2, [r5, #0]
 8007682:	461a      	mov	r2, r3
 8007684:	f7fb fc55 	bl	8002f32 <_write>
 8007688:	1c43      	adds	r3, r0, #1
 800768a:	d102      	bne.n	8007692 <_write_r+0x1e>
 800768c:	682b      	ldr	r3, [r5, #0]
 800768e:	b103      	cbz	r3, 8007692 <_write_r+0x1e>
 8007690:	6023      	str	r3, [r4, #0]
 8007692:	bd38      	pop	{r3, r4, r5, pc}
 8007694:	2000050c 	.word	0x2000050c

08007698 <__errno>:
 8007698:	4b01      	ldr	r3, [pc, #4]	; (80076a0 <__errno+0x8>)
 800769a:	6818      	ldr	r0, [r3, #0]
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	2000006c 	.word	0x2000006c

080076a4 <__libc_init_array>:
 80076a4:	b570      	push	{r4, r5, r6, lr}
 80076a6:	4d0d      	ldr	r5, [pc, #52]	; (80076dc <__libc_init_array+0x38>)
 80076a8:	4c0d      	ldr	r4, [pc, #52]	; (80076e0 <__libc_init_array+0x3c>)
 80076aa:	1b64      	subs	r4, r4, r5
 80076ac:	10a4      	asrs	r4, r4, #2
 80076ae:	2600      	movs	r6, #0
 80076b0:	42a6      	cmp	r6, r4
 80076b2:	d109      	bne.n	80076c8 <__libc_init_array+0x24>
 80076b4:	4d0b      	ldr	r5, [pc, #44]	; (80076e4 <__libc_init_array+0x40>)
 80076b6:	4c0c      	ldr	r4, [pc, #48]	; (80076e8 <__libc_init_array+0x44>)
 80076b8:	f002 fdea 	bl	800a290 <_init>
 80076bc:	1b64      	subs	r4, r4, r5
 80076be:	10a4      	asrs	r4, r4, #2
 80076c0:	2600      	movs	r6, #0
 80076c2:	42a6      	cmp	r6, r4
 80076c4:	d105      	bne.n	80076d2 <__libc_init_array+0x2e>
 80076c6:	bd70      	pop	{r4, r5, r6, pc}
 80076c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80076cc:	4798      	blx	r3
 80076ce:	3601      	adds	r6, #1
 80076d0:	e7ee      	b.n	80076b0 <__libc_init_array+0xc>
 80076d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80076d6:	4798      	blx	r3
 80076d8:	3601      	adds	r6, #1
 80076da:	e7f2      	b.n	80076c2 <__libc_init_array+0x1e>
 80076dc:	0800a6bc 	.word	0x0800a6bc
 80076e0:	0800a6bc 	.word	0x0800a6bc
 80076e4:	0800a6bc 	.word	0x0800a6bc
 80076e8:	0800a6c0 	.word	0x0800a6c0

080076ec <__retarget_lock_acquire_recursive>:
 80076ec:	4770      	bx	lr

080076ee <__retarget_lock_release_recursive>:
 80076ee:	4770      	bx	lr

080076f0 <memcpy>:
 80076f0:	440a      	add	r2, r1
 80076f2:	4291      	cmp	r1, r2
 80076f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80076f8:	d100      	bne.n	80076fc <memcpy+0xc>
 80076fa:	4770      	bx	lr
 80076fc:	b510      	push	{r4, lr}
 80076fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007702:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007706:	4291      	cmp	r1, r2
 8007708:	d1f9      	bne.n	80076fe <memcpy+0xe>
 800770a:	bd10      	pop	{r4, pc}

0800770c <quorem>:
 800770c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007710:	6903      	ldr	r3, [r0, #16]
 8007712:	690c      	ldr	r4, [r1, #16]
 8007714:	42a3      	cmp	r3, r4
 8007716:	4607      	mov	r7, r0
 8007718:	db7e      	blt.n	8007818 <quorem+0x10c>
 800771a:	3c01      	subs	r4, #1
 800771c:	f101 0814 	add.w	r8, r1, #20
 8007720:	f100 0514 	add.w	r5, r0, #20
 8007724:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007728:	9301      	str	r3, [sp, #4]
 800772a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800772e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007732:	3301      	adds	r3, #1
 8007734:	429a      	cmp	r2, r3
 8007736:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800773a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800773e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007742:	d331      	bcc.n	80077a8 <quorem+0x9c>
 8007744:	f04f 0e00 	mov.w	lr, #0
 8007748:	4640      	mov	r0, r8
 800774a:	46ac      	mov	ip, r5
 800774c:	46f2      	mov	sl, lr
 800774e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007752:	b293      	uxth	r3, r2
 8007754:	fb06 e303 	mla	r3, r6, r3, lr
 8007758:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800775c:	0c1a      	lsrs	r2, r3, #16
 800775e:	b29b      	uxth	r3, r3
 8007760:	ebaa 0303 	sub.w	r3, sl, r3
 8007764:	f8dc a000 	ldr.w	sl, [ip]
 8007768:	fa13 f38a 	uxtah	r3, r3, sl
 800776c:	fb06 220e 	mla	r2, r6, lr, r2
 8007770:	9300      	str	r3, [sp, #0]
 8007772:	9b00      	ldr	r3, [sp, #0]
 8007774:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007778:	b292      	uxth	r2, r2
 800777a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800777e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007782:	f8bd 3000 	ldrh.w	r3, [sp]
 8007786:	4581      	cmp	r9, r0
 8007788:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800778c:	f84c 3b04 	str.w	r3, [ip], #4
 8007790:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007794:	d2db      	bcs.n	800774e <quorem+0x42>
 8007796:	f855 300b 	ldr.w	r3, [r5, fp]
 800779a:	b92b      	cbnz	r3, 80077a8 <quorem+0x9c>
 800779c:	9b01      	ldr	r3, [sp, #4]
 800779e:	3b04      	subs	r3, #4
 80077a0:	429d      	cmp	r5, r3
 80077a2:	461a      	mov	r2, r3
 80077a4:	d32c      	bcc.n	8007800 <quorem+0xf4>
 80077a6:	613c      	str	r4, [r7, #16]
 80077a8:	4638      	mov	r0, r7
 80077aa:	f001 f9a7 	bl	8008afc <__mcmp>
 80077ae:	2800      	cmp	r0, #0
 80077b0:	db22      	blt.n	80077f8 <quorem+0xec>
 80077b2:	3601      	adds	r6, #1
 80077b4:	4629      	mov	r1, r5
 80077b6:	2000      	movs	r0, #0
 80077b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80077bc:	f8d1 c000 	ldr.w	ip, [r1]
 80077c0:	b293      	uxth	r3, r2
 80077c2:	1ac3      	subs	r3, r0, r3
 80077c4:	0c12      	lsrs	r2, r2, #16
 80077c6:	fa13 f38c 	uxtah	r3, r3, ip
 80077ca:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80077ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077d8:	45c1      	cmp	r9, r8
 80077da:	f841 3b04 	str.w	r3, [r1], #4
 80077de:	ea4f 4022 	mov.w	r0, r2, asr #16
 80077e2:	d2e9      	bcs.n	80077b8 <quorem+0xac>
 80077e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077ec:	b922      	cbnz	r2, 80077f8 <quorem+0xec>
 80077ee:	3b04      	subs	r3, #4
 80077f0:	429d      	cmp	r5, r3
 80077f2:	461a      	mov	r2, r3
 80077f4:	d30a      	bcc.n	800780c <quorem+0x100>
 80077f6:	613c      	str	r4, [r7, #16]
 80077f8:	4630      	mov	r0, r6
 80077fa:	b003      	add	sp, #12
 80077fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007800:	6812      	ldr	r2, [r2, #0]
 8007802:	3b04      	subs	r3, #4
 8007804:	2a00      	cmp	r2, #0
 8007806:	d1ce      	bne.n	80077a6 <quorem+0x9a>
 8007808:	3c01      	subs	r4, #1
 800780a:	e7c9      	b.n	80077a0 <quorem+0x94>
 800780c:	6812      	ldr	r2, [r2, #0]
 800780e:	3b04      	subs	r3, #4
 8007810:	2a00      	cmp	r2, #0
 8007812:	d1f0      	bne.n	80077f6 <quorem+0xea>
 8007814:	3c01      	subs	r4, #1
 8007816:	e7eb      	b.n	80077f0 <quorem+0xe4>
 8007818:	2000      	movs	r0, #0
 800781a:	e7ee      	b.n	80077fa <quorem+0xee>
 800781c:	0000      	movs	r0, r0
	...

08007820 <_dtoa_r>:
 8007820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007824:	ed2d 8b04 	vpush	{d8-d9}
 8007828:	69c5      	ldr	r5, [r0, #28]
 800782a:	b093      	sub	sp, #76	; 0x4c
 800782c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007830:	ec57 6b10 	vmov	r6, r7, d0
 8007834:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007838:	9107      	str	r1, [sp, #28]
 800783a:	4604      	mov	r4, r0
 800783c:	920a      	str	r2, [sp, #40]	; 0x28
 800783e:	930d      	str	r3, [sp, #52]	; 0x34
 8007840:	b975      	cbnz	r5, 8007860 <_dtoa_r+0x40>
 8007842:	2010      	movs	r0, #16
 8007844:	f000 fe2a 	bl	800849c <malloc>
 8007848:	4602      	mov	r2, r0
 800784a:	61e0      	str	r0, [r4, #28]
 800784c:	b920      	cbnz	r0, 8007858 <_dtoa_r+0x38>
 800784e:	4bae      	ldr	r3, [pc, #696]	; (8007b08 <_dtoa_r+0x2e8>)
 8007850:	21ef      	movs	r1, #239	; 0xef
 8007852:	48ae      	ldr	r0, [pc, #696]	; (8007b0c <_dtoa_r+0x2ec>)
 8007854:	f001 fc82 	bl	800915c <__assert_func>
 8007858:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800785c:	6005      	str	r5, [r0, #0]
 800785e:	60c5      	str	r5, [r0, #12]
 8007860:	69e3      	ldr	r3, [r4, #28]
 8007862:	6819      	ldr	r1, [r3, #0]
 8007864:	b151      	cbz	r1, 800787c <_dtoa_r+0x5c>
 8007866:	685a      	ldr	r2, [r3, #4]
 8007868:	604a      	str	r2, [r1, #4]
 800786a:	2301      	movs	r3, #1
 800786c:	4093      	lsls	r3, r2
 800786e:	608b      	str	r3, [r1, #8]
 8007870:	4620      	mov	r0, r4
 8007872:	f000 ff07 	bl	8008684 <_Bfree>
 8007876:	69e3      	ldr	r3, [r4, #28]
 8007878:	2200      	movs	r2, #0
 800787a:	601a      	str	r2, [r3, #0]
 800787c:	1e3b      	subs	r3, r7, #0
 800787e:	bfbb      	ittet	lt
 8007880:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007884:	9303      	strlt	r3, [sp, #12]
 8007886:	2300      	movge	r3, #0
 8007888:	2201      	movlt	r2, #1
 800788a:	bfac      	ite	ge
 800788c:	f8c8 3000 	strge.w	r3, [r8]
 8007890:	f8c8 2000 	strlt.w	r2, [r8]
 8007894:	4b9e      	ldr	r3, [pc, #632]	; (8007b10 <_dtoa_r+0x2f0>)
 8007896:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800789a:	ea33 0308 	bics.w	r3, r3, r8
 800789e:	d11b      	bne.n	80078d8 <_dtoa_r+0xb8>
 80078a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80078a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80078a6:	6013      	str	r3, [r2, #0]
 80078a8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80078ac:	4333      	orrs	r3, r6
 80078ae:	f000 8593 	beq.w	80083d8 <_dtoa_r+0xbb8>
 80078b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078b4:	b963      	cbnz	r3, 80078d0 <_dtoa_r+0xb0>
 80078b6:	4b97      	ldr	r3, [pc, #604]	; (8007b14 <_dtoa_r+0x2f4>)
 80078b8:	e027      	b.n	800790a <_dtoa_r+0xea>
 80078ba:	4b97      	ldr	r3, [pc, #604]	; (8007b18 <_dtoa_r+0x2f8>)
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	3308      	adds	r3, #8
 80078c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80078c2:	6013      	str	r3, [r2, #0]
 80078c4:	9800      	ldr	r0, [sp, #0]
 80078c6:	b013      	add	sp, #76	; 0x4c
 80078c8:	ecbd 8b04 	vpop	{d8-d9}
 80078cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d0:	4b90      	ldr	r3, [pc, #576]	; (8007b14 <_dtoa_r+0x2f4>)
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	3303      	adds	r3, #3
 80078d6:	e7f3      	b.n	80078c0 <_dtoa_r+0xa0>
 80078d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80078dc:	2200      	movs	r2, #0
 80078de:	ec51 0b17 	vmov	r0, r1, d7
 80078e2:	eeb0 8a47 	vmov.f32	s16, s14
 80078e6:	eef0 8a67 	vmov.f32	s17, s15
 80078ea:	2300      	movs	r3, #0
 80078ec:	f7f9 f8ec 	bl	8000ac8 <__aeabi_dcmpeq>
 80078f0:	4681      	mov	r9, r0
 80078f2:	b160      	cbz	r0, 800790e <_dtoa_r+0xee>
 80078f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80078f6:	2301      	movs	r3, #1
 80078f8:	6013      	str	r3, [r2, #0]
 80078fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 8568 	beq.w	80083d2 <_dtoa_r+0xbb2>
 8007902:	4b86      	ldr	r3, [pc, #536]	; (8007b1c <_dtoa_r+0x2fc>)
 8007904:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007906:	6013      	str	r3, [r2, #0]
 8007908:	3b01      	subs	r3, #1
 800790a:	9300      	str	r3, [sp, #0]
 800790c:	e7da      	b.n	80078c4 <_dtoa_r+0xa4>
 800790e:	aa10      	add	r2, sp, #64	; 0x40
 8007910:	a911      	add	r1, sp, #68	; 0x44
 8007912:	4620      	mov	r0, r4
 8007914:	eeb0 0a48 	vmov.f32	s0, s16
 8007918:	eef0 0a68 	vmov.f32	s1, s17
 800791c:	f001 f994 	bl	8008c48 <__d2b>
 8007920:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007924:	4682      	mov	sl, r0
 8007926:	2d00      	cmp	r5, #0
 8007928:	d07f      	beq.n	8007a2a <_dtoa_r+0x20a>
 800792a:	ee18 3a90 	vmov	r3, s17
 800792e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007932:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007936:	ec51 0b18 	vmov	r0, r1, d8
 800793a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800793e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007942:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007946:	4619      	mov	r1, r3
 8007948:	2200      	movs	r2, #0
 800794a:	4b75      	ldr	r3, [pc, #468]	; (8007b20 <_dtoa_r+0x300>)
 800794c:	f7f8 fc9c 	bl	8000288 <__aeabi_dsub>
 8007950:	a367      	add	r3, pc, #412	; (adr r3, 8007af0 <_dtoa_r+0x2d0>)
 8007952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007956:	f7f8 fe4f 	bl	80005f8 <__aeabi_dmul>
 800795a:	a367      	add	r3, pc, #412	; (adr r3, 8007af8 <_dtoa_r+0x2d8>)
 800795c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007960:	f7f8 fc94 	bl	800028c <__adddf3>
 8007964:	4606      	mov	r6, r0
 8007966:	4628      	mov	r0, r5
 8007968:	460f      	mov	r7, r1
 800796a:	f7f8 fddb 	bl	8000524 <__aeabi_i2d>
 800796e:	a364      	add	r3, pc, #400	; (adr r3, 8007b00 <_dtoa_r+0x2e0>)
 8007970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007974:	f7f8 fe40 	bl	80005f8 <__aeabi_dmul>
 8007978:	4602      	mov	r2, r0
 800797a:	460b      	mov	r3, r1
 800797c:	4630      	mov	r0, r6
 800797e:	4639      	mov	r1, r7
 8007980:	f7f8 fc84 	bl	800028c <__adddf3>
 8007984:	4606      	mov	r6, r0
 8007986:	460f      	mov	r7, r1
 8007988:	f7f9 f8e6 	bl	8000b58 <__aeabi_d2iz>
 800798c:	2200      	movs	r2, #0
 800798e:	4683      	mov	fp, r0
 8007990:	2300      	movs	r3, #0
 8007992:	4630      	mov	r0, r6
 8007994:	4639      	mov	r1, r7
 8007996:	f7f9 f8a1 	bl	8000adc <__aeabi_dcmplt>
 800799a:	b148      	cbz	r0, 80079b0 <_dtoa_r+0x190>
 800799c:	4658      	mov	r0, fp
 800799e:	f7f8 fdc1 	bl	8000524 <__aeabi_i2d>
 80079a2:	4632      	mov	r2, r6
 80079a4:	463b      	mov	r3, r7
 80079a6:	f7f9 f88f 	bl	8000ac8 <__aeabi_dcmpeq>
 80079aa:	b908      	cbnz	r0, 80079b0 <_dtoa_r+0x190>
 80079ac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80079b0:	f1bb 0f16 	cmp.w	fp, #22
 80079b4:	d857      	bhi.n	8007a66 <_dtoa_r+0x246>
 80079b6:	4b5b      	ldr	r3, [pc, #364]	; (8007b24 <_dtoa_r+0x304>)
 80079b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80079bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c0:	ec51 0b18 	vmov	r0, r1, d8
 80079c4:	f7f9 f88a 	bl	8000adc <__aeabi_dcmplt>
 80079c8:	2800      	cmp	r0, #0
 80079ca:	d04e      	beq.n	8007a6a <_dtoa_r+0x24a>
 80079cc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80079d0:	2300      	movs	r3, #0
 80079d2:	930c      	str	r3, [sp, #48]	; 0x30
 80079d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079d6:	1b5b      	subs	r3, r3, r5
 80079d8:	1e5a      	subs	r2, r3, #1
 80079da:	bf45      	ittet	mi
 80079dc:	f1c3 0301 	rsbmi	r3, r3, #1
 80079e0:	9305      	strmi	r3, [sp, #20]
 80079e2:	2300      	movpl	r3, #0
 80079e4:	2300      	movmi	r3, #0
 80079e6:	9206      	str	r2, [sp, #24]
 80079e8:	bf54      	ite	pl
 80079ea:	9305      	strpl	r3, [sp, #20]
 80079ec:	9306      	strmi	r3, [sp, #24]
 80079ee:	f1bb 0f00 	cmp.w	fp, #0
 80079f2:	db3c      	blt.n	8007a6e <_dtoa_r+0x24e>
 80079f4:	9b06      	ldr	r3, [sp, #24]
 80079f6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80079fa:	445b      	add	r3, fp
 80079fc:	9306      	str	r3, [sp, #24]
 80079fe:	2300      	movs	r3, #0
 8007a00:	9308      	str	r3, [sp, #32]
 8007a02:	9b07      	ldr	r3, [sp, #28]
 8007a04:	2b09      	cmp	r3, #9
 8007a06:	d868      	bhi.n	8007ada <_dtoa_r+0x2ba>
 8007a08:	2b05      	cmp	r3, #5
 8007a0a:	bfc4      	itt	gt
 8007a0c:	3b04      	subgt	r3, #4
 8007a0e:	9307      	strgt	r3, [sp, #28]
 8007a10:	9b07      	ldr	r3, [sp, #28]
 8007a12:	f1a3 0302 	sub.w	r3, r3, #2
 8007a16:	bfcc      	ite	gt
 8007a18:	2500      	movgt	r5, #0
 8007a1a:	2501      	movle	r5, #1
 8007a1c:	2b03      	cmp	r3, #3
 8007a1e:	f200 8085 	bhi.w	8007b2c <_dtoa_r+0x30c>
 8007a22:	e8df f003 	tbb	[pc, r3]
 8007a26:	3b2e      	.short	0x3b2e
 8007a28:	5839      	.short	0x5839
 8007a2a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007a2e:	441d      	add	r5, r3
 8007a30:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007a34:	2b20      	cmp	r3, #32
 8007a36:	bfc1      	itttt	gt
 8007a38:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007a3c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007a40:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007a44:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007a48:	bfd6      	itet	le
 8007a4a:	f1c3 0320 	rsble	r3, r3, #32
 8007a4e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007a52:	fa06 f003 	lslle.w	r0, r6, r3
 8007a56:	f7f8 fd55 	bl	8000504 <__aeabi_ui2d>
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007a60:	3d01      	subs	r5, #1
 8007a62:	920e      	str	r2, [sp, #56]	; 0x38
 8007a64:	e76f      	b.n	8007946 <_dtoa_r+0x126>
 8007a66:	2301      	movs	r3, #1
 8007a68:	e7b3      	b.n	80079d2 <_dtoa_r+0x1b2>
 8007a6a:	900c      	str	r0, [sp, #48]	; 0x30
 8007a6c:	e7b2      	b.n	80079d4 <_dtoa_r+0x1b4>
 8007a6e:	9b05      	ldr	r3, [sp, #20]
 8007a70:	eba3 030b 	sub.w	r3, r3, fp
 8007a74:	9305      	str	r3, [sp, #20]
 8007a76:	f1cb 0300 	rsb	r3, fp, #0
 8007a7a:	9308      	str	r3, [sp, #32]
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a80:	e7bf      	b.n	8007a02 <_dtoa_r+0x1e2>
 8007a82:	2300      	movs	r3, #0
 8007a84:	9309      	str	r3, [sp, #36]	; 0x24
 8007a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	dc52      	bgt.n	8007b32 <_dtoa_r+0x312>
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	9301      	str	r3, [sp, #4]
 8007a90:	9304      	str	r3, [sp, #16]
 8007a92:	461a      	mov	r2, r3
 8007a94:	920a      	str	r2, [sp, #40]	; 0x28
 8007a96:	e00b      	b.n	8007ab0 <_dtoa_r+0x290>
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e7f3      	b.n	8007a84 <_dtoa_r+0x264>
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aa2:	445b      	add	r3, fp
 8007aa4:	9301      	str	r3, [sp, #4]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	9304      	str	r3, [sp, #16]
 8007aac:	bfb8      	it	lt
 8007aae:	2301      	movlt	r3, #1
 8007ab0:	69e0      	ldr	r0, [r4, #28]
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	2204      	movs	r2, #4
 8007ab6:	f102 0614 	add.w	r6, r2, #20
 8007aba:	429e      	cmp	r6, r3
 8007abc:	d93d      	bls.n	8007b3a <_dtoa_r+0x31a>
 8007abe:	6041      	str	r1, [r0, #4]
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f000 fd9f 	bl	8008604 <_Balloc>
 8007ac6:	9000      	str	r0, [sp, #0]
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	d139      	bne.n	8007b40 <_dtoa_r+0x320>
 8007acc:	4b16      	ldr	r3, [pc, #88]	; (8007b28 <_dtoa_r+0x308>)
 8007ace:	4602      	mov	r2, r0
 8007ad0:	f240 11af 	movw	r1, #431	; 0x1af
 8007ad4:	e6bd      	b.n	8007852 <_dtoa_r+0x32>
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e7e1      	b.n	8007a9e <_dtoa_r+0x27e>
 8007ada:	2501      	movs	r5, #1
 8007adc:	2300      	movs	r3, #0
 8007ade:	9307      	str	r3, [sp, #28]
 8007ae0:	9509      	str	r5, [sp, #36]	; 0x24
 8007ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ae6:	9301      	str	r3, [sp, #4]
 8007ae8:	9304      	str	r3, [sp, #16]
 8007aea:	2200      	movs	r2, #0
 8007aec:	2312      	movs	r3, #18
 8007aee:	e7d1      	b.n	8007a94 <_dtoa_r+0x274>
 8007af0:	636f4361 	.word	0x636f4361
 8007af4:	3fd287a7 	.word	0x3fd287a7
 8007af8:	8b60c8b3 	.word	0x8b60c8b3
 8007afc:	3fc68a28 	.word	0x3fc68a28
 8007b00:	509f79fb 	.word	0x509f79fb
 8007b04:	3fd34413 	.word	0x3fd34413
 8007b08:	0800a331 	.word	0x0800a331
 8007b0c:	0800a348 	.word	0x0800a348
 8007b10:	7ff00000 	.word	0x7ff00000
 8007b14:	0800a32d 	.word	0x0800a32d
 8007b18:	0800a324 	.word	0x0800a324
 8007b1c:	0800a301 	.word	0x0800a301
 8007b20:	3ff80000 	.word	0x3ff80000
 8007b24:	0800a438 	.word	0x0800a438
 8007b28:	0800a3a0 	.word	0x0800a3a0
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8007b30:	e7d7      	b.n	8007ae2 <_dtoa_r+0x2c2>
 8007b32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b34:	9301      	str	r3, [sp, #4]
 8007b36:	9304      	str	r3, [sp, #16]
 8007b38:	e7ba      	b.n	8007ab0 <_dtoa_r+0x290>
 8007b3a:	3101      	adds	r1, #1
 8007b3c:	0052      	lsls	r2, r2, #1
 8007b3e:	e7ba      	b.n	8007ab6 <_dtoa_r+0x296>
 8007b40:	69e3      	ldr	r3, [r4, #28]
 8007b42:	9a00      	ldr	r2, [sp, #0]
 8007b44:	601a      	str	r2, [r3, #0]
 8007b46:	9b04      	ldr	r3, [sp, #16]
 8007b48:	2b0e      	cmp	r3, #14
 8007b4a:	f200 80a8 	bhi.w	8007c9e <_dtoa_r+0x47e>
 8007b4e:	2d00      	cmp	r5, #0
 8007b50:	f000 80a5 	beq.w	8007c9e <_dtoa_r+0x47e>
 8007b54:	f1bb 0f00 	cmp.w	fp, #0
 8007b58:	dd38      	ble.n	8007bcc <_dtoa_r+0x3ac>
 8007b5a:	4bc0      	ldr	r3, [pc, #768]	; (8007e5c <_dtoa_r+0x63c>)
 8007b5c:	f00b 020f 	and.w	r2, fp, #15
 8007b60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b64:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007b68:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007b6c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007b70:	d019      	beq.n	8007ba6 <_dtoa_r+0x386>
 8007b72:	4bbb      	ldr	r3, [pc, #748]	; (8007e60 <_dtoa_r+0x640>)
 8007b74:	ec51 0b18 	vmov	r0, r1, d8
 8007b78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b7c:	f7f8 fe66 	bl	800084c <__aeabi_ddiv>
 8007b80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b84:	f008 080f 	and.w	r8, r8, #15
 8007b88:	2503      	movs	r5, #3
 8007b8a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007e60 <_dtoa_r+0x640>
 8007b8e:	f1b8 0f00 	cmp.w	r8, #0
 8007b92:	d10a      	bne.n	8007baa <_dtoa_r+0x38a>
 8007b94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b98:	4632      	mov	r2, r6
 8007b9a:	463b      	mov	r3, r7
 8007b9c:	f7f8 fe56 	bl	800084c <__aeabi_ddiv>
 8007ba0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ba4:	e02b      	b.n	8007bfe <_dtoa_r+0x3de>
 8007ba6:	2502      	movs	r5, #2
 8007ba8:	e7ef      	b.n	8007b8a <_dtoa_r+0x36a>
 8007baa:	f018 0f01 	tst.w	r8, #1
 8007bae:	d008      	beq.n	8007bc2 <_dtoa_r+0x3a2>
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	4639      	mov	r1, r7
 8007bb4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007bb8:	f7f8 fd1e 	bl	80005f8 <__aeabi_dmul>
 8007bbc:	3501      	adds	r5, #1
 8007bbe:	4606      	mov	r6, r0
 8007bc0:	460f      	mov	r7, r1
 8007bc2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007bc6:	f109 0908 	add.w	r9, r9, #8
 8007bca:	e7e0      	b.n	8007b8e <_dtoa_r+0x36e>
 8007bcc:	f000 809f 	beq.w	8007d0e <_dtoa_r+0x4ee>
 8007bd0:	f1cb 0600 	rsb	r6, fp, #0
 8007bd4:	4ba1      	ldr	r3, [pc, #644]	; (8007e5c <_dtoa_r+0x63c>)
 8007bd6:	4fa2      	ldr	r7, [pc, #648]	; (8007e60 <_dtoa_r+0x640>)
 8007bd8:	f006 020f 	and.w	r2, r6, #15
 8007bdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be4:	ec51 0b18 	vmov	r0, r1, d8
 8007be8:	f7f8 fd06 	bl	80005f8 <__aeabi_dmul>
 8007bec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bf0:	1136      	asrs	r6, r6, #4
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	2502      	movs	r5, #2
 8007bf6:	2e00      	cmp	r6, #0
 8007bf8:	d17e      	bne.n	8007cf8 <_dtoa_r+0x4d8>
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1d0      	bne.n	8007ba0 <_dtoa_r+0x380>
 8007bfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c00:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 8084 	beq.w	8007d12 <_dtoa_r+0x4f2>
 8007c0a:	4b96      	ldr	r3, [pc, #600]	; (8007e64 <_dtoa_r+0x644>)
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	4640      	mov	r0, r8
 8007c10:	4649      	mov	r1, r9
 8007c12:	f7f8 ff63 	bl	8000adc <__aeabi_dcmplt>
 8007c16:	2800      	cmp	r0, #0
 8007c18:	d07b      	beq.n	8007d12 <_dtoa_r+0x4f2>
 8007c1a:	9b04      	ldr	r3, [sp, #16]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d078      	beq.n	8007d12 <_dtoa_r+0x4f2>
 8007c20:	9b01      	ldr	r3, [sp, #4]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	dd39      	ble.n	8007c9a <_dtoa_r+0x47a>
 8007c26:	4b90      	ldr	r3, [pc, #576]	; (8007e68 <_dtoa_r+0x648>)
 8007c28:	2200      	movs	r2, #0
 8007c2a:	4640      	mov	r0, r8
 8007c2c:	4649      	mov	r1, r9
 8007c2e:	f7f8 fce3 	bl	80005f8 <__aeabi_dmul>
 8007c32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c36:	9e01      	ldr	r6, [sp, #4]
 8007c38:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8007c3c:	3501      	adds	r5, #1
 8007c3e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007c42:	4628      	mov	r0, r5
 8007c44:	f7f8 fc6e 	bl	8000524 <__aeabi_i2d>
 8007c48:	4642      	mov	r2, r8
 8007c4a:	464b      	mov	r3, r9
 8007c4c:	f7f8 fcd4 	bl	80005f8 <__aeabi_dmul>
 8007c50:	4b86      	ldr	r3, [pc, #536]	; (8007e6c <_dtoa_r+0x64c>)
 8007c52:	2200      	movs	r2, #0
 8007c54:	f7f8 fb1a 	bl	800028c <__adddf3>
 8007c58:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007c5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c60:	9303      	str	r3, [sp, #12]
 8007c62:	2e00      	cmp	r6, #0
 8007c64:	d158      	bne.n	8007d18 <_dtoa_r+0x4f8>
 8007c66:	4b82      	ldr	r3, [pc, #520]	; (8007e70 <_dtoa_r+0x650>)
 8007c68:	2200      	movs	r2, #0
 8007c6a:	4640      	mov	r0, r8
 8007c6c:	4649      	mov	r1, r9
 8007c6e:	f7f8 fb0b 	bl	8000288 <__aeabi_dsub>
 8007c72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c76:	4680      	mov	r8, r0
 8007c78:	4689      	mov	r9, r1
 8007c7a:	f7f8 ff4d 	bl	8000b18 <__aeabi_dcmpgt>
 8007c7e:	2800      	cmp	r0, #0
 8007c80:	f040 8296 	bne.w	80081b0 <_dtoa_r+0x990>
 8007c84:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007c88:	4640      	mov	r0, r8
 8007c8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c8e:	4649      	mov	r1, r9
 8007c90:	f7f8 ff24 	bl	8000adc <__aeabi_dcmplt>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	f040 8289 	bne.w	80081ac <_dtoa_r+0x98c>
 8007c9a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007c9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f2c0 814e 	blt.w	8007f42 <_dtoa_r+0x722>
 8007ca6:	f1bb 0f0e 	cmp.w	fp, #14
 8007caa:	f300 814a 	bgt.w	8007f42 <_dtoa_r+0x722>
 8007cae:	4b6b      	ldr	r3, [pc, #428]	; (8007e5c <_dtoa_r+0x63c>)
 8007cb0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007cb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f280 80dc 	bge.w	8007e78 <_dtoa_r+0x658>
 8007cc0:	9b04      	ldr	r3, [sp, #16]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f300 80d8 	bgt.w	8007e78 <_dtoa_r+0x658>
 8007cc8:	f040 826f 	bne.w	80081aa <_dtoa_r+0x98a>
 8007ccc:	4b68      	ldr	r3, [pc, #416]	; (8007e70 <_dtoa_r+0x650>)
 8007cce:	2200      	movs	r2, #0
 8007cd0:	4640      	mov	r0, r8
 8007cd2:	4649      	mov	r1, r9
 8007cd4:	f7f8 fc90 	bl	80005f8 <__aeabi_dmul>
 8007cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cdc:	f7f8 ff12 	bl	8000b04 <__aeabi_dcmpge>
 8007ce0:	9e04      	ldr	r6, [sp, #16]
 8007ce2:	4637      	mov	r7, r6
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	f040 8245 	bne.w	8008174 <_dtoa_r+0x954>
 8007cea:	9d00      	ldr	r5, [sp, #0]
 8007cec:	2331      	movs	r3, #49	; 0x31
 8007cee:	f805 3b01 	strb.w	r3, [r5], #1
 8007cf2:	f10b 0b01 	add.w	fp, fp, #1
 8007cf6:	e241      	b.n	800817c <_dtoa_r+0x95c>
 8007cf8:	07f2      	lsls	r2, r6, #31
 8007cfa:	d505      	bpl.n	8007d08 <_dtoa_r+0x4e8>
 8007cfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d00:	f7f8 fc7a 	bl	80005f8 <__aeabi_dmul>
 8007d04:	3501      	adds	r5, #1
 8007d06:	2301      	movs	r3, #1
 8007d08:	1076      	asrs	r6, r6, #1
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	e773      	b.n	8007bf6 <_dtoa_r+0x3d6>
 8007d0e:	2502      	movs	r5, #2
 8007d10:	e775      	b.n	8007bfe <_dtoa_r+0x3de>
 8007d12:	9e04      	ldr	r6, [sp, #16]
 8007d14:	465f      	mov	r7, fp
 8007d16:	e792      	b.n	8007c3e <_dtoa_r+0x41e>
 8007d18:	9900      	ldr	r1, [sp, #0]
 8007d1a:	4b50      	ldr	r3, [pc, #320]	; (8007e5c <_dtoa_r+0x63c>)
 8007d1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d20:	4431      	add	r1, r6
 8007d22:	9102      	str	r1, [sp, #8]
 8007d24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d26:	eeb0 9a47 	vmov.f32	s18, s14
 8007d2a:	eef0 9a67 	vmov.f32	s19, s15
 8007d2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007d32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d36:	2900      	cmp	r1, #0
 8007d38:	d044      	beq.n	8007dc4 <_dtoa_r+0x5a4>
 8007d3a:	494e      	ldr	r1, [pc, #312]	; (8007e74 <_dtoa_r+0x654>)
 8007d3c:	2000      	movs	r0, #0
 8007d3e:	f7f8 fd85 	bl	800084c <__aeabi_ddiv>
 8007d42:	ec53 2b19 	vmov	r2, r3, d9
 8007d46:	f7f8 fa9f 	bl	8000288 <__aeabi_dsub>
 8007d4a:	9d00      	ldr	r5, [sp, #0]
 8007d4c:	ec41 0b19 	vmov	d9, r0, r1
 8007d50:	4649      	mov	r1, r9
 8007d52:	4640      	mov	r0, r8
 8007d54:	f7f8 ff00 	bl	8000b58 <__aeabi_d2iz>
 8007d58:	4606      	mov	r6, r0
 8007d5a:	f7f8 fbe3 	bl	8000524 <__aeabi_i2d>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	460b      	mov	r3, r1
 8007d62:	4640      	mov	r0, r8
 8007d64:	4649      	mov	r1, r9
 8007d66:	f7f8 fa8f 	bl	8000288 <__aeabi_dsub>
 8007d6a:	3630      	adds	r6, #48	; 0x30
 8007d6c:	f805 6b01 	strb.w	r6, [r5], #1
 8007d70:	ec53 2b19 	vmov	r2, r3, d9
 8007d74:	4680      	mov	r8, r0
 8007d76:	4689      	mov	r9, r1
 8007d78:	f7f8 feb0 	bl	8000adc <__aeabi_dcmplt>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	d164      	bne.n	8007e4a <_dtoa_r+0x62a>
 8007d80:	4642      	mov	r2, r8
 8007d82:	464b      	mov	r3, r9
 8007d84:	4937      	ldr	r1, [pc, #220]	; (8007e64 <_dtoa_r+0x644>)
 8007d86:	2000      	movs	r0, #0
 8007d88:	f7f8 fa7e 	bl	8000288 <__aeabi_dsub>
 8007d8c:	ec53 2b19 	vmov	r2, r3, d9
 8007d90:	f7f8 fea4 	bl	8000adc <__aeabi_dcmplt>
 8007d94:	2800      	cmp	r0, #0
 8007d96:	f040 80b6 	bne.w	8007f06 <_dtoa_r+0x6e6>
 8007d9a:	9b02      	ldr	r3, [sp, #8]
 8007d9c:	429d      	cmp	r5, r3
 8007d9e:	f43f af7c 	beq.w	8007c9a <_dtoa_r+0x47a>
 8007da2:	4b31      	ldr	r3, [pc, #196]	; (8007e68 <_dtoa_r+0x648>)
 8007da4:	ec51 0b19 	vmov	r0, r1, d9
 8007da8:	2200      	movs	r2, #0
 8007daa:	f7f8 fc25 	bl	80005f8 <__aeabi_dmul>
 8007dae:	4b2e      	ldr	r3, [pc, #184]	; (8007e68 <_dtoa_r+0x648>)
 8007db0:	ec41 0b19 	vmov	d9, r0, r1
 8007db4:	2200      	movs	r2, #0
 8007db6:	4640      	mov	r0, r8
 8007db8:	4649      	mov	r1, r9
 8007dba:	f7f8 fc1d 	bl	80005f8 <__aeabi_dmul>
 8007dbe:	4680      	mov	r8, r0
 8007dc0:	4689      	mov	r9, r1
 8007dc2:	e7c5      	b.n	8007d50 <_dtoa_r+0x530>
 8007dc4:	ec51 0b17 	vmov	r0, r1, d7
 8007dc8:	f7f8 fc16 	bl	80005f8 <__aeabi_dmul>
 8007dcc:	9b02      	ldr	r3, [sp, #8]
 8007dce:	9d00      	ldr	r5, [sp, #0]
 8007dd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007dd2:	ec41 0b19 	vmov	d9, r0, r1
 8007dd6:	4649      	mov	r1, r9
 8007dd8:	4640      	mov	r0, r8
 8007dda:	f7f8 febd 	bl	8000b58 <__aeabi_d2iz>
 8007dde:	4606      	mov	r6, r0
 8007de0:	f7f8 fba0 	bl	8000524 <__aeabi_i2d>
 8007de4:	3630      	adds	r6, #48	; 0x30
 8007de6:	4602      	mov	r2, r0
 8007de8:	460b      	mov	r3, r1
 8007dea:	4640      	mov	r0, r8
 8007dec:	4649      	mov	r1, r9
 8007dee:	f7f8 fa4b 	bl	8000288 <__aeabi_dsub>
 8007df2:	f805 6b01 	strb.w	r6, [r5], #1
 8007df6:	9b02      	ldr	r3, [sp, #8]
 8007df8:	429d      	cmp	r5, r3
 8007dfa:	4680      	mov	r8, r0
 8007dfc:	4689      	mov	r9, r1
 8007dfe:	f04f 0200 	mov.w	r2, #0
 8007e02:	d124      	bne.n	8007e4e <_dtoa_r+0x62e>
 8007e04:	4b1b      	ldr	r3, [pc, #108]	; (8007e74 <_dtoa_r+0x654>)
 8007e06:	ec51 0b19 	vmov	r0, r1, d9
 8007e0a:	f7f8 fa3f 	bl	800028c <__adddf3>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	460b      	mov	r3, r1
 8007e12:	4640      	mov	r0, r8
 8007e14:	4649      	mov	r1, r9
 8007e16:	f7f8 fe7f 	bl	8000b18 <__aeabi_dcmpgt>
 8007e1a:	2800      	cmp	r0, #0
 8007e1c:	d173      	bne.n	8007f06 <_dtoa_r+0x6e6>
 8007e1e:	ec53 2b19 	vmov	r2, r3, d9
 8007e22:	4914      	ldr	r1, [pc, #80]	; (8007e74 <_dtoa_r+0x654>)
 8007e24:	2000      	movs	r0, #0
 8007e26:	f7f8 fa2f 	bl	8000288 <__aeabi_dsub>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	4640      	mov	r0, r8
 8007e30:	4649      	mov	r1, r9
 8007e32:	f7f8 fe53 	bl	8000adc <__aeabi_dcmplt>
 8007e36:	2800      	cmp	r0, #0
 8007e38:	f43f af2f 	beq.w	8007c9a <_dtoa_r+0x47a>
 8007e3c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007e3e:	1e6b      	subs	r3, r5, #1
 8007e40:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e46:	2b30      	cmp	r3, #48	; 0x30
 8007e48:	d0f8      	beq.n	8007e3c <_dtoa_r+0x61c>
 8007e4a:	46bb      	mov	fp, r7
 8007e4c:	e04a      	b.n	8007ee4 <_dtoa_r+0x6c4>
 8007e4e:	4b06      	ldr	r3, [pc, #24]	; (8007e68 <_dtoa_r+0x648>)
 8007e50:	f7f8 fbd2 	bl	80005f8 <__aeabi_dmul>
 8007e54:	4680      	mov	r8, r0
 8007e56:	4689      	mov	r9, r1
 8007e58:	e7bd      	b.n	8007dd6 <_dtoa_r+0x5b6>
 8007e5a:	bf00      	nop
 8007e5c:	0800a438 	.word	0x0800a438
 8007e60:	0800a410 	.word	0x0800a410
 8007e64:	3ff00000 	.word	0x3ff00000
 8007e68:	40240000 	.word	0x40240000
 8007e6c:	401c0000 	.word	0x401c0000
 8007e70:	40140000 	.word	0x40140000
 8007e74:	3fe00000 	.word	0x3fe00000
 8007e78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007e7c:	9d00      	ldr	r5, [sp, #0]
 8007e7e:	4642      	mov	r2, r8
 8007e80:	464b      	mov	r3, r9
 8007e82:	4630      	mov	r0, r6
 8007e84:	4639      	mov	r1, r7
 8007e86:	f7f8 fce1 	bl	800084c <__aeabi_ddiv>
 8007e8a:	f7f8 fe65 	bl	8000b58 <__aeabi_d2iz>
 8007e8e:	9001      	str	r0, [sp, #4]
 8007e90:	f7f8 fb48 	bl	8000524 <__aeabi_i2d>
 8007e94:	4642      	mov	r2, r8
 8007e96:	464b      	mov	r3, r9
 8007e98:	f7f8 fbae 	bl	80005f8 <__aeabi_dmul>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	4639      	mov	r1, r7
 8007ea4:	f7f8 f9f0 	bl	8000288 <__aeabi_dsub>
 8007ea8:	9e01      	ldr	r6, [sp, #4]
 8007eaa:	9f04      	ldr	r7, [sp, #16]
 8007eac:	3630      	adds	r6, #48	; 0x30
 8007eae:	f805 6b01 	strb.w	r6, [r5], #1
 8007eb2:	9e00      	ldr	r6, [sp, #0]
 8007eb4:	1bae      	subs	r6, r5, r6
 8007eb6:	42b7      	cmp	r7, r6
 8007eb8:	4602      	mov	r2, r0
 8007eba:	460b      	mov	r3, r1
 8007ebc:	d134      	bne.n	8007f28 <_dtoa_r+0x708>
 8007ebe:	f7f8 f9e5 	bl	800028c <__adddf3>
 8007ec2:	4642      	mov	r2, r8
 8007ec4:	464b      	mov	r3, r9
 8007ec6:	4606      	mov	r6, r0
 8007ec8:	460f      	mov	r7, r1
 8007eca:	f7f8 fe25 	bl	8000b18 <__aeabi_dcmpgt>
 8007ece:	b9c8      	cbnz	r0, 8007f04 <_dtoa_r+0x6e4>
 8007ed0:	4642      	mov	r2, r8
 8007ed2:	464b      	mov	r3, r9
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	4639      	mov	r1, r7
 8007ed8:	f7f8 fdf6 	bl	8000ac8 <__aeabi_dcmpeq>
 8007edc:	b110      	cbz	r0, 8007ee4 <_dtoa_r+0x6c4>
 8007ede:	9b01      	ldr	r3, [sp, #4]
 8007ee0:	07db      	lsls	r3, r3, #31
 8007ee2:	d40f      	bmi.n	8007f04 <_dtoa_r+0x6e4>
 8007ee4:	4651      	mov	r1, sl
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f000 fbcc 	bl	8008684 <_Bfree>
 8007eec:	2300      	movs	r3, #0
 8007eee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ef0:	702b      	strb	r3, [r5, #0]
 8007ef2:	f10b 0301 	add.w	r3, fp, #1
 8007ef6:	6013      	str	r3, [r2, #0]
 8007ef8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f43f ace2 	beq.w	80078c4 <_dtoa_r+0xa4>
 8007f00:	601d      	str	r5, [r3, #0]
 8007f02:	e4df      	b.n	80078c4 <_dtoa_r+0xa4>
 8007f04:	465f      	mov	r7, fp
 8007f06:	462b      	mov	r3, r5
 8007f08:	461d      	mov	r5, r3
 8007f0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f0e:	2a39      	cmp	r2, #57	; 0x39
 8007f10:	d106      	bne.n	8007f20 <_dtoa_r+0x700>
 8007f12:	9a00      	ldr	r2, [sp, #0]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d1f7      	bne.n	8007f08 <_dtoa_r+0x6e8>
 8007f18:	9900      	ldr	r1, [sp, #0]
 8007f1a:	2230      	movs	r2, #48	; 0x30
 8007f1c:	3701      	adds	r7, #1
 8007f1e:	700a      	strb	r2, [r1, #0]
 8007f20:	781a      	ldrb	r2, [r3, #0]
 8007f22:	3201      	adds	r2, #1
 8007f24:	701a      	strb	r2, [r3, #0]
 8007f26:	e790      	b.n	8007e4a <_dtoa_r+0x62a>
 8007f28:	4ba3      	ldr	r3, [pc, #652]	; (80081b8 <_dtoa_r+0x998>)
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f7f8 fb64 	bl	80005f8 <__aeabi_dmul>
 8007f30:	2200      	movs	r2, #0
 8007f32:	2300      	movs	r3, #0
 8007f34:	4606      	mov	r6, r0
 8007f36:	460f      	mov	r7, r1
 8007f38:	f7f8 fdc6 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	d09e      	beq.n	8007e7e <_dtoa_r+0x65e>
 8007f40:	e7d0      	b.n	8007ee4 <_dtoa_r+0x6c4>
 8007f42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f44:	2a00      	cmp	r2, #0
 8007f46:	f000 80ca 	beq.w	80080de <_dtoa_r+0x8be>
 8007f4a:	9a07      	ldr	r2, [sp, #28]
 8007f4c:	2a01      	cmp	r2, #1
 8007f4e:	f300 80ad 	bgt.w	80080ac <_dtoa_r+0x88c>
 8007f52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f54:	2a00      	cmp	r2, #0
 8007f56:	f000 80a5 	beq.w	80080a4 <_dtoa_r+0x884>
 8007f5a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f5e:	9e08      	ldr	r6, [sp, #32]
 8007f60:	9d05      	ldr	r5, [sp, #20]
 8007f62:	9a05      	ldr	r2, [sp, #20]
 8007f64:	441a      	add	r2, r3
 8007f66:	9205      	str	r2, [sp, #20]
 8007f68:	9a06      	ldr	r2, [sp, #24]
 8007f6a:	2101      	movs	r1, #1
 8007f6c:	441a      	add	r2, r3
 8007f6e:	4620      	mov	r0, r4
 8007f70:	9206      	str	r2, [sp, #24]
 8007f72:	f000 fc3d 	bl	80087f0 <__i2b>
 8007f76:	4607      	mov	r7, r0
 8007f78:	b165      	cbz	r5, 8007f94 <_dtoa_r+0x774>
 8007f7a:	9b06      	ldr	r3, [sp, #24]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	dd09      	ble.n	8007f94 <_dtoa_r+0x774>
 8007f80:	42ab      	cmp	r3, r5
 8007f82:	9a05      	ldr	r2, [sp, #20]
 8007f84:	bfa8      	it	ge
 8007f86:	462b      	movge	r3, r5
 8007f88:	1ad2      	subs	r2, r2, r3
 8007f8a:	9205      	str	r2, [sp, #20]
 8007f8c:	9a06      	ldr	r2, [sp, #24]
 8007f8e:	1aed      	subs	r5, r5, r3
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	9306      	str	r3, [sp, #24]
 8007f94:	9b08      	ldr	r3, [sp, #32]
 8007f96:	b1f3      	cbz	r3, 8007fd6 <_dtoa_r+0x7b6>
 8007f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f000 80a3 	beq.w	80080e6 <_dtoa_r+0x8c6>
 8007fa0:	2e00      	cmp	r6, #0
 8007fa2:	dd10      	ble.n	8007fc6 <_dtoa_r+0x7a6>
 8007fa4:	4639      	mov	r1, r7
 8007fa6:	4632      	mov	r2, r6
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f000 fce1 	bl	8008970 <__pow5mult>
 8007fae:	4652      	mov	r2, sl
 8007fb0:	4601      	mov	r1, r0
 8007fb2:	4607      	mov	r7, r0
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	f000 fc31 	bl	800881c <__multiply>
 8007fba:	4651      	mov	r1, sl
 8007fbc:	4680      	mov	r8, r0
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	f000 fb60 	bl	8008684 <_Bfree>
 8007fc4:	46c2      	mov	sl, r8
 8007fc6:	9b08      	ldr	r3, [sp, #32]
 8007fc8:	1b9a      	subs	r2, r3, r6
 8007fca:	d004      	beq.n	8007fd6 <_dtoa_r+0x7b6>
 8007fcc:	4651      	mov	r1, sl
 8007fce:	4620      	mov	r0, r4
 8007fd0:	f000 fcce 	bl	8008970 <__pow5mult>
 8007fd4:	4682      	mov	sl, r0
 8007fd6:	2101      	movs	r1, #1
 8007fd8:	4620      	mov	r0, r4
 8007fda:	f000 fc09 	bl	80087f0 <__i2b>
 8007fde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	4606      	mov	r6, r0
 8007fe4:	f340 8081 	ble.w	80080ea <_dtoa_r+0x8ca>
 8007fe8:	461a      	mov	r2, r3
 8007fea:	4601      	mov	r1, r0
 8007fec:	4620      	mov	r0, r4
 8007fee:	f000 fcbf 	bl	8008970 <__pow5mult>
 8007ff2:	9b07      	ldr	r3, [sp, #28]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	4606      	mov	r6, r0
 8007ff8:	dd7a      	ble.n	80080f0 <_dtoa_r+0x8d0>
 8007ffa:	f04f 0800 	mov.w	r8, #0
 8007ffe:	6933      	ldr	r3, [r6, #16]
 8008000:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008004:	6918      	ldr	r0, [r3, #16]
 8008006:	f000 fba5 	bl	8008754 <__hi0bits>
 800800a:	f1c0 0020 	rsb	r0, r0, #32
 800800e:	9b06      	ldr	r3, [sp, #24]
 8008010:	4418      	add	r0, r3
 8008012:	f010 001f 	ands.w	r0, r0, #31
 8008016:	f000 8094 	beq.w	8008142 <_dtoa_r+0x922>
 800801a:	f1c0 0320 	rsb	r3, r0, #32
 800801e:	2b04      	cmp	r3, #4
 8008020:	f340 8085 	ble.w	800812e <_dtoa_r+0x90e>
 8008024:	9b05      	ldr	r3, [sp, #20]
 8008026:	f1c0 001c 	rsb	r0, r0, #28
 800802a:	4403      	add	r3, r0
 800802c:	9305      	str	r3, [sp, #20]
 800802e:	9b06      	ldr	r3, [sp, #24]
 8008030:	4403      	add	r3, r0
 8008032:	4405      	add	r5, r0
 8008034:	9306      	str	r3, [sp, #24]
 8008036:	9b05      	ldr	r3, [sp, #20]
 8008038:	2b00      	cmp	r3, #0
 800803a:	dd05      	ble.n	8008048 <_dtoa_r+0x828>
 800803c:	4651      	mov	r1, sl
 800803e:	461a      	mov	r2, r3
 8008040:	4620      	mov	r0, r4
 8008042:	f000 fcef 	bl	8008a24 <__lshift>
 8008046:	4682      	mov	sl, r0
 8008048:	9b06      	ldr	r3, [sp, #24]
 800804a:	2b00      	cmp	r3, #0
 800804c:	dd05      	ble.n	800805a <_dtoa_r+0x83a>
 800804e:	4631      	mov	r1, r6
 8008050:	461a      	mov	r2, r3
 8008052:	4620      	mov	r0, r4
 8008054:	f000 fce6 	bl	8008a24 <__lshift>
 8008058:	4606      	mov	r6, r0
 800805a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800805c:	2b00      	cmp	r3, #0
 800805e:	d072      	beq.n	8008146 <_dtoa_r+0x926>
 8008060:	4631      	mov	r1, r6
 8008062:	4650      	mov	r0, sl
 8008064:	f000 fd4a 	bl	8008afc <__mcmp>
 8008068:	2800      	cmp	r0, #0
 800806a:	da6c      	bge.n	8008146 <_dtoa_r+0x926>
 800806c:	2300      	movs	r3, #0
 800806e:	4651      	mov	r1, sl
 8008070:	220a      	movs	r2, #10
 8008072:	4620      	mov	r0, r4
 8008074:	f000 fb28 	bl	80086c8 <__multadd>
 8008078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800807a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800807e:	4682      	mov	sl, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 81b0 	beq.w	80083e6 <_dtoa_r+0xbc6>
 8008086:	2300      	movs	r3, #0
 8008088:	4639      	mov	r1, r7
 800808a:	220a      	movs	r2, #10
 800808c:	4620      	mov	r0, r4
 800808e:	f000 fb1b 	bl	80086c8 <__multadd>
 8008092:	9b01      	ldr	r3, [sp, #4]
 8008094:	2b00      	cmp	r3, #0
 8008096:	4607      	mov	r7, r0
 8008098:	f300 8096 	bgt.w	80081c8 <_dtoa_r+0x9a8>
 800809c:	9b07      	ldr	r3, [sp, #28]
 800809e:	2b02      	cmp	r3, #2
 80080a0:	dc59      	bgt.n	8008156 <_dtoa_r+0x936>
 80080a2:	e091      	b.n	80081c8 <_dtoa_r+0x9a8>
 80080a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80080aa:	e758      	b.n	8007f5e <_dtoa_r+0x73e>
 80080ac:	9b04      	ldr	r3, [sp, #16]
 80080ae:	1e5e      	subs	r6, r3, #1
 80080b0:	9b08      	ldr	r3, [sp, #32]
 80080b2:	42b3      	cmp	r3, r6
 80080b4:	bfbf      	itttt	lt
 80080b6:	9b08      	ldrlt	r3, [sp, #32]
 80080b8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80080ba:	9608      	strlt	r6, [sp, #32]
 80080bc:	1af3      	sublt	r3, r6, r3
 80080be:	bfb4      	ite	lt
 80080c0:	18d2      	addlt	r2, r2, r3
 80080c2:	1b9e      	subge	r6, r3, r6
 80080c4:	9b04      	ldr	r3, [sp, #16]
 80080c6:	bfbc      	itt	lt
 80080c8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80080ca:	2600      	movlt	r6, #0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	bfb7      	itett	lt
 80080d0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80080d4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80080d8:	1a9d      	sublt	r5, r3, r2
 80080da:	2300      	movlt	r3, #0
 80080dc:	e741      	b.n	8007f62 <_dtoa_r+0x742>
 80080de:	9e08      	ldr	r6, [sp, #32]
 80080e0:	9d05      	ldr	r5, [sp, #20]
 80080e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80080e4:	e748      	b.n	8007f78 <_dtoa_r+0x758>
 80080e6:	9a08      	ldr	r2, [sp, #32]
 80080e8:	e770      	b.n	8007fcc <_dtoa_r+0x7ac>
 80080ea:	9b07      	ldr	r3, [sp, #28]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	dc19      	bgt.n	8008124 <_dtoa_r+0x904>
 80080f0:	9b02      	ldr	r3, [sp, #8]
 80080f2:	b9bb      	cbnz	r3, 8008124 <_dtoa_r+0x904>
 80080f4:	9b03      	ldr	r3, [sp, #12]
 80080f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080fa:	b99b      	cbnz	r3, 8008124 <_dtoa_r+0x904>
 80080fc:	9b03      	ldr	r3, [sp, #12]
 80080fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008102:	0d1b      	lsrs	r3, r3, #20
 8008104:	051b      	lsls	r3, r3, #20
 8008106:	b183      	cbz	r3, 800812a <_dtoa_r+0x90a>
 8008108:	9b05      	ldr	r3, [sp, #20]
 800810a:	3301      	adds	r3, #1
 800810c:	9305      	str	r3, [sp, #20]
 800810e:	9b06      	ldr	r3, [sp, #24]
 8008110:	3301      	adds	r3, #1
 8008112:	9306      	str	r3, [sp, #24]
 8008114:	f04f 0801 	mov.w	r8, #1
 8008118:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800811a:	2b00      	cmp	r3, #0
 800811c:	f47f af6f 	bne.w	8007ffe <_dtoa_r+0x7de>
 8008120:	2001      	movs	r0, #1
 8008122:	e774      	b.n	800800e <_dtoa_r+0x7ee>
 8008124:	f04f 0800 	mov.w	r8, #0
 8008128:	e7f6      	b.n	8008118 <_dtoa_r+0x8f8>
 800812a:	4698      	mov	r8, r3
 800812c:	e7f4      	b.n	8008118 <_dtoa_r+0x8f8>
 800812e:	d082      	beq.n	8008036 <_dtoa_r+0x816>
 8008130:	9a05      	ldr	r2, [sp, #20]
 8008132:	331c      	adds	r3, #28
 8008134:	441a      	add	r2, r3
 8008136:	9205      	str	r2, [sp, #20]
 8008138:	9a06      	ldr	r2, [sp, #24]
 800813a:	441a      	add	r2, r3
 800813c:	441d      	add	r5, r3
 800813e:	9206      	str	r2, [sp, #24]
 8008140:	e779      	b.n	8008036 <_dtoa_r+0x816>
 8008142:	4603      	mov	r3, r0
 8008144:	e7f4      	b.n	8008130 <_dtoa_r+0x910>
 8008146:	9b04      	ldr	r3, [sp, #16]
 8008148:	2b00      	cmp	r3, #0
 800814a:	dc37      	bgt.n	80081bc <_dtoa_r+0x99c>
 800814c:	9b07      	ldr	r3, [sp, #28]
 800814e:	2b02      	cmp	r3, #2
 8008150:	dd34      	ble.n	80081bc <_dtoa_r+0x99c>
 8008152:	9b04      	ldr	r3, [sp, #16]
 8008154:	9301      	str	r3, [sp, #4]
 8008156:	9b01      	ldr	r3, [sp, #4]
 8008158:	b963      	cbnz	r3, 8008174 <_dtoa_r+0x954>
 800815a:	4631      	mov	r1, r6
 800815c:	2205      	movs	r2, #5
 800815e:	4620      	mov	r0, r4
 8008160:	f000 fab2 	bl	80086c8 <__multadd>
 8008164:	4601      	mov	r1, r0
 8008166:	4606      	mov	r6, r0
 8008168:	4650      	mov	r0, sl
 800816a:	f000 fcc7 	bl	8008afc <__mcmp>
 800816e:	2800      	cmp	r0, #0
 8008170:	f73f adbb 	bgt.w	8007cea <_dtoa_r+0x4ca>
 8008174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008176:	9d00      	ldr	r5, [sp, #0]
 8008178:	ea6f 0b03 	mvn.w	fp, r3
 800817c:	f04f 0800 	mov.w	r8, #0
 8008180:	4631      	mov	r1, r6
 8008182:	4620      	mov	r0, r4
 8008184:	f000 fa7e 	bl	8008684 <_Bfree>
 8008188:	2f00      	cmp	r7, #0
 800818a:	f43f aeab 	beq.w	8007ee4 <_dtoa_r+0x6c4>
 800818e:	f1b8 0f00 	cmp.w	r8, #0
 8008192:	d005      	beq.n	80081a0 <_dtoa_r+0x980>
 8008194:	45b8      	cmp	r8, r7
 8008196:	d003      	beq.n	80081a0 <_dtoa_r+0x980>
 8008198:	4641      	mov	r1, r8
 800819a:	4620      	mov	r0, r4
 800819c:	f000 fa72 	bl	8008684 <_Bfree>
 80081a0:	4639      	mov	r1, r7
 80081a2:	4620      	mov	r0, r4
 80081a4:	f000 fa6e 	bl	8008684 <_Bfree>
 80081a8:	e69c      	b.n	8007ee4 <_dtoa_r+0x6c4>
 80081aa:	2600      	movs	r6, #0
 80081ac:	4637      	mov	r7, r6
 80081ae:	e7e1      	b.n	8008174 <_dtoa_r+0x954>
 80081b0:	46bb      	mov	fp, r7
 80081b2:	4637      	mov	r7, r6
 80081b4:	e599      	b.n	8007cea <_dtoa_r+0x4ca>
 80081b6:	bf00      	nop
 80081b8:	40240000 	.word	0x40240000
 80081bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081be:	2b00      	cmp	r3, #0
 80081c0:	f000 80c8 	beq.w	8008354 <_dtoa_r+0xb34>
 80081c4:	9b04      	ldr	r3, [sp, #16]
 80081c6:	9301      	str	r3, [sp, #4]
 80081c8:	2d00      	cmp	r5, #0
 80081ca:	dd05      	ble.n	80081d8 <_dtoa_r+0x9b8>
 80081cc:	4639      	mov	r1, r7
 80081ce:	462a      	mov	r2, r5
 80081d0:	4620      	mov	r0, r4
 80081d2:	f000 fc27 	bl	8008a24 <__lshift>
 80081d6:	4607      	mov	r7, r0
 80081d8:	f1b8 0f00 	cmp.w	r8, #0
 80081dc:	d05b      	beq.n	8008296 <_dtoa_r+0xa76>
 80081de:	6879      	ldr	r1, [r7, #4]
 80081e0:	4620      	mov	r0, r4
 80081e2:	f000 fa0f 	bl	8008604 <_Balloc>
 80081e6:	4605      	mov	r5, r0
 80081e8:	b928      	cbnz	r0, 80081f6 <_dtoa_r+0x9d6>
 80081ea:	4b83      	ldr	r3, [pc, #524]	; (80083f8 <_dtoa_r+0xbd8>)
 80081ec:	4602      	mov	r2, r0
 80081ee:	f240 21ef 	movw	r1, #751	; 0x2ef
 80081f2:	f7ff bb2e 	b.w	8007852 <_dtoa_r+0x32>
 80081f6:	693a      	ldr	r2, [r7, #16]
 80081f8:	3202      	adds	r2, #2
 80081fa:	0092      	lsls	r2, r2, #2
 80081fc:	f107 010c 	add.w	r1, r7, #12
 8008200:	300c      	adds	r0, #12
 8008202:	f7ff fa75 	bl	80076f0 <memcpy>
 8008206:	2201      	movs	r2, #1
 8008208:	4629      	mov	r1, r5
 800820a:	4620      	mov	r0, r4
 800820c:	f000 fc0a 	bl	8008a24 <__lshift>
 8008210:	9b00      	ldr	r3, [sp, #0]
 8008212:	3301      	adds	r3, #1
 8008214:	9304      	str	r3, [sp, #16]
 8008216:	e9dd 2300 	ldrd	r2, r3, [sp]
 800821a:	4413      	add	r3, r2
 800821c:	9308      	str	r3, [sp, #32]
 800821e:	9b02      	ldr	r3, [sp, #8]
 8008220:	f003 0301 	and.w	r3, r3, #1
 8008224:	46b8      	mov	r8, r7
 8008226:	9306      	str	r3, [sp, #24]
 8008228:	4607      	mov	r7, r0
 800822a:	9b04      	ldr	r3, [sp, #16]
 800822c:	4631      	mov	r1, r6
 800822e:	3b01      	subs	r3, #1
 8008230:	4650      	mov	r0, sl
 8008232:	9301      	str	r3, [sp, #4]
 8008234:	f7ff fa6a 	bl	800770c <quorem>
 8008238:	4641      	mov	r1, r8
 800823a:	9002      	str	r0, [sp, #8]
 800823c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008240:	4650      	mov	r0, sl
 8008242:	f000 fc5b 	bl	8008afc <__mcmp>
 8008246:	463a      	mov	r2, r7
 8008248:	9005      	str	r0, [sp, #20]
 800824a:	4631      	mov	r1, r6
 800824c:	4620      	mov	r0, r4
 800824e:	f000 fc71 	bl	8008b34 <__mdiff>
 8008252:	68c2      	ldr	r2, [r0, #12]
 8008254:	4605      	mov	r5, r0
 8008256:	bb02      	cbnz	r2, 800829a <_dtoa_r+0xa7a>
 8008258:	4601      	mov	r1, r0
 800825a:	4650      	mov	r0, sl
 800825c:	f000 fc4e 	bl	8008afc <__mcmp>
 8008260:	4602      	mov	r2, r0
 8008262:	4629      	mov	r1, r5
 8008264:	4620      	mov	r0, r4
 8008266:	9209      	str	r2, [sp, #36]	; 0x24
 8008268:	f000 fa0c 	bl	8008684 <_Bfree>
 800826c:	9b07      	ldr	r3, [sp, #28]
 800826e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008270:	9d04      	ldr	r5, [sp, #16]
 8008272:	ea43 0102 	orr.w	r1, r3, r2
 8008276:	9b06      	ldr	r3, [sp, #24]
 8008278:	4319      	orrs	r1, r3
 800827a:	d110      	bne.n	800829e <_dtoa_r+0xa7e>
 800827c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008280:	d029      	beq.n	80082d6 <_dtoa_r+0xab6>
 8008282:	9b05      	ldr	r3, [sp, #20]
 8008284:	2b00      	cmp	r3, #0
 8008286:	dd02      	ble.n	800828e <_dtoa_r+0xa6e>
 8008288:	9b02      	ldr	r3, [sp, #8]
 800828a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800828e:	9b01      	ldr	r3, [sp, #4]
 8008290:	f883 9000 	strb.w	r9, [r3]
 8008294:	e774      	b.n	8008180 <_dtoa_r+0x960>
 8008296:	4638      	mov	r0, r7
 8008298:	e7ba      	b.n	8008210 <_dtoa_r+0x9f0>
 800829a:	2201      	movs	r2, #1
 800829c:	e7e1      	b.n	8008262 <_dtoa_r+0xa42>
 800829e:	9b05      	ldr	r3, [sp, #20]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	db04      	blt.n	80082ae <_dtoa_r+0xa8e>
 80082a4:	9907      	ldr	r1, [sp, #28]
 80082a6:	430b      	orrs	r3, r1
 80082a8:	9906      	ldr	r1, [sp, #24]
 80082aa:	430b      	orrs	r3, r1
 80082ac:	d120      	bne.n	80082f0 <_dtoa_r+0xad0>
 80082ae:	2a00      	cmp	r2, #0
 80082b0:	dded      	ble.n	800828e <_dtoa_r+0xa6e>
 80082b2:	4651      	mov	r1, sl
 80082b4:	2201      	movs	r2, #1
 80082b6:	4620      	mov	r0, r4
 80082b8:	f000 fbb4 	bl	8008a24 <__lshift>
 80082bc:	4631      	mov	r1, r6
 80082be:	4682      	mov	sl, r0
 80082c0:	f000 fc1c 	bl	8008afc <__mcmp>
 80082c4:	2800      	cmp	r0, #0
 80082c6:	dc03      	bgt.n	80082d0 <_dtoa_r+0xab0>
 80082c8:	d1e1      	bne.n	800828e <_dtoa_r+0xa6e>
 80082ca:	f019 0f01 	tst.w	r9, #1
 80082ce:	d0de      	beq.n	800828e <_dtoa_r+0xa6e>
 80082d0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80082d4:	d1d8      	bne.n	8008288 <_dtoa_r+0xa68>
 80082d6:	9a01      	ldr	r2, [sp, #4]
 80082d8:	2339      	movs	r3, #57	; 0x39
 80082da:	7013      	strb	r3, [r2, #0]
 80082dc:	462b      	mov	r3, r5
 80082de:	461d      	mov	r5, r3
 80082e0:	3b01      	subs	r3, #1
 80082e2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80082e6:	2a39      	cmp	r2, #57	; 0x39
 80082e8:	d06c      	beq.n	80083c4 <_dtoa_r+0xba4>
 80082ea:	3201      	adds	r2, #1
 80082ec:	701a      	strb	r2, [r3, #0]
 80082ee:	e747      	b.n	8008180 <_dtoa_r+0x960>
 80082f0:	2a00      	cmp	r2, #0
 80082f2:	dd07      	ble.n	8008304 <_dtoa_r+0xae4>
 80082f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80082f8:	d0ed      	beq.n	80082d6 <_dtoa_r+0xab6>
 80082fa:	9a01      	ldr	r2, [sp, #4]
 80082fc:	f109 0301 	add.w	r3, r9, #1
 8008300:	7013      	strb	r3, [r2, #0]
 8008302:	e73d      	b.n	8008180 <_dtoa_r+0x960>
 8008304:	9b04      	ldr	r3, [sp, #16]
 8008306:	9a08      	ldr	r2, [sp, #32]
 8008308:	f803 9c01 	strb.w	r9, [r3, #-1]
 800830c:	4293      	cmp	r3, r2
 800830e:	d043      	beq.n	8008398 <_dtoa_r+0xb78>
 8008310:	4651      	mov	r1, sl
 8008312:	2300      	movs	r3, #0
 8008314:	220a      	movs	r2, #10
 8008316:	4620      	mov	r0, r4
 8008318:	f000 f9d6 	bl	80086c8 <__multadd>
 800831c:	45b8      	cmp	r8, r7
 800831e:	4682      	mov	sl, r0
 8008320:	f04f 0300 	mov.w	r3, #0
 8008324:	f04f 020a 	mov.w	r2, #10
 8008328:	4641      	mov	r1, r8
 800832a:	4620      	mov	r0, r4
 800832c:	d107      	bne.n	800833e <_dtoa_r+0xb1e>
 800832e:	f000 f9cb 	bl	80086c8 <__multadd>
 8008332:	4680      	mov	r8, r0
 8008334:	4607      	mov	r7, r0
 8008336:	9b04      	ldr	r3, [sp, #16]
 8008338:	3301      	adds	r3, #1
 800833a:	9304      	str	r3, [sp, #16]
 800833c:	e775      	b.n	800822a <_dtoa_r+0xa0a>
 800833e:	f000 f9c3 	bl	80086c8 <__multadd>
 8008342:	4639      	mov	r1, r7
 8008344:	4680      	mov	r8, r0
 8008346:	2300      	movs	r3, #0
 8008348:	220a      	movs	r2, #10
 800834a:	4620      	mov	r0, r4
 800834c:	f000 f9bc 	bl	80086c8 <__multadd>
 8008350:	4607      	mov	r7, r0
 8008352:	e7f0      	b.n	8008336 <_dtoa_r+0xb16>
 8008354:	9b04      	ldr	r3, [sp, #16]
 8008356:	9301      	str	r3, [sp, #4]
 8008358:	9d00      	ldr	r5, [sp, #0]
 800835a:	4631      	mov	r1, r6
 800835c:	4650      	mov	r0, sl
 800835e:	f7ff f9d5 	bl	800770c <quorem>
 8008362:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008366:	9b00      	ldr	r3, [sp, #0]
 8008368:	f805 9b01 	strb.w	r9, [r5], #1
 800836c:	1aea      	subs	r2, r5, r3
 800836e:	9b01      	ldr	r3, [sp, #4]
 8008370:	4293      	cmp	r3, r2
 8008372:	dd07      	ble.n	8008384 <_dtoa_r+0xb64>
 8008374:	4651      	mov	r1, sl
 8008376:	2300      	movs	r3, #0
 8008378:	220a      	movs	r2, #10
 800837a:	4620      	mov	r0, r4
 800837c:	f000 f9a4 	bl	80086c8 <__multadd>
 8008380:	4682      	mov	sl, r0
 8008382:	e7ea      	b.n	800835a <_dtoa_r+0xb3a>
 8008384:	9b01      	ldr	r3, [sp, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	bfc8      	it	gt
 800838a:	461d      	movgt	r5, r3
 800838c:	9b00      	ldr	r3, [sp, #0]
 800838e:	bfd8      	it	le
 8008390:	2501      	movle	r5, #1
 8008392:	441d      	add	r5, r3
 8008394:	f04f 0800 	mov.w	r8, #0
 8008398:	4651      	mov	r1, sl
 800839a:	2201      	movs	r2, #1
 800839c:	4620      	mov	r0, r4
 800839e:	f000 fb41 	bl	8008a24 <__lshift>
 80083a2:	4631      	mov	r1, r6
 80083a4:	4682      	mov	sl, r0
 80083a6:	f000 fba9 	bl	8008afc <__mcmp>
 80083aa:	2800      	cmp	r0, #0
 80083ac:	dc96      	bgt.n	80082dc <_dtoa_r+0xabc>
 80083ae:	d102      	bne.n	80083b6 <_dtoa_r+0xb96>
 80083b0:	f019 0f01 	tst.w	r9, #1
 80083b4:	d192      	bne.n	80082dc <_dtoa_r+0xabc>
 80083b6:	462b      	mov	r3, r5
 80083b8:	461d      	mov	r5, r3
 80083ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083be:	2a30      	cmp	r2, #48	; 0x30
 80083c0:	d0fa      	beq.n	80083b8 <_dtoa_r+0xb98>
 80083c2:	e6dd      	b.n	8008180 <_dtoa_r+0x960>
 80083c4:	9a00      	ldr	r2, [sp, #0]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d189      	bne.n	80082de <_dtoa_r+0xabe>
 80083ca:	f10b 0b01 	add.w	fp, fp, #1
 80083ce:	2331      	movs	r3, #49	; 0x31
 80083d0:	e796      	b.n	8008300 <_dtoa_r+0xae0>
 80083d2:	4b0a      	ldr	r3, [pc, #40]	; (80083fc <_dtoa_r+0xbdc>)
 80083d4:	f7ff ba99 	b.w	800790a <_dtoa_r+0xea>
 80083d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083da:	2b00      	cmp	r3, #0
 80083dc:	f47f aa6d 	bne.w	80078ba <_dtoa_r+0x9a>
 80083e0:	4b07      	ldr	r3, [pc, #28]	; (8008400 <_dtoa_r+0xbe0>)
 80083e2:	f7ff ba92 	b.w	800790a <_dtoa_r+0xea>
 80083e6:	9b01      	ldr	r3, [sp, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	dcb5      	bgt.n	8008358 <_dtoa_r+0xb38>
 80083ec:	9b07      	ldr	r3, [sp, #28]
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	f73f aeb1 	bgt.w	8008156 <_dtoa_r+0x936>
 80083f4:	e7b0      	b.n	8008358 <_dtoa_r+0xb38>
 80083f6:	bf00      	nop
 80083f8:	0800a3a0 	.word	0x0800a3a0
 80083fc:	0800a300 	.word	0x0800a300
 8008400:	0800a324 	.word	0x0800a324

08008404 <_free_r>:
 8008404:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008406:	2900      	cmp	r1, #0
 8008408:	d044      	beq.n	8008494 <_free_r+0x90>
 800840a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800840e:	9001      	str	r0, [sp, #4]
 8008410:	2b00      	cmp	r3, #0
 8008412:	f1a1 0404 	sub.w	r4, r1, #4
 8008416:	bfb8      	it	lt
 8008418:	18e4      	addlt	r4, r4, r3
 800841a:	f000 f8e7 	bl	80085ec <__malloc_lock>
 800841e:	4a1e      	ldr	r2, [pc, #120]	; (8008498 <_free_r+0x94>)
 8008420:	9801      	ldr	r0, [sp, #4]
 8008422:	6813      	ldr	r3, [r2, #0]
 8008424:	b933      	cbnz	r3, 8008434 <_free_r+0x30>
 8008426:	6063      	str	r3, [r4, #4]
 8008428:	6014      	str	r4, [r2, #0]
 800842a:	b003      	add	sp, #12
 800842c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008430:	f000 b8e2 	b.w	80085f8 <__malloc_unlock>
 8008434:	42a3      	cmp	r3, r4
 8008436:	d908      	bls.n	800844a <_free_r+0x46>
 8008438:	6825      	ldr	r5, [r4, #0]
 800843a:	1961      	adds	r1, r4, r5
 800843c:	428b      	cmp	r3, r1
 800843e:	bf01      	itttt	eq
 8008440:	6819      	ldreq	r1, [r3, #0]
 8008442:	685b      	ldreq	r3, [r3, #4]
 8008444:	1949      	addeq	r1, r1, r5
 8008446:	6021      	streq	r1, [r4, #0]
 8008448:	e7ed      	b.n	8008426 <_free_r+0x22>
 800844a:	461a      	mov	r2, r3
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	b10b      	cbz	r3, 8008454 <_free_r+0x50>
 8008450:	42a3      	cmp	r3, r4
 8008452:	d9fa      	bls.n	800844a <_free_r+0x46>
 8008454:	6811      	ldr	r1, [r2, #0]
 8008456:	1855      	adds	r5, r2, r1
 8008458:	42a5      	cmp	r5, r4
 800845a:	d10b      	bne.n	8008474 <_free_r+0x70>
 800845c:	6824      	ldr	r4, [r4, #0]
 800845e:	4421      	add	r1, r4
 8008460:	1854      	adds	r4, r2, r1
 8008462:	42a3      	cmp	r3, r4
 8008464:	6011      	str	r1, [r2, #0]
 8008466:	d1e0      	bne.n	800842a <_free_r+0x26>
 8008468:	681c      	ldr	r4, [r3, #0]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	6053      	str	r3, [r2, #4]
 800846e:	440c      	add	r4, r1
 8008470:	6014      	str	r4, [r2, #0]
 8008472:	e7da      	b.n	800842a <_free_r+0x26>
 8008474:	d902      	bls.n	800847c <_free_r+0x78>
 8008476:	230c      	movs	r3, #12
 8008478:	6003      	str	r3, [r0, #0]
 800847a:	e7d6      	b.n	800842a <_free_r+0x26>
 800847c:	6825      	ldr	r5, [r4, #0]
 800847e:	1961      	adds	r1, r4, r5
 8008480:	428b      	cmp	r3, r1
 8008482:	bf04      	itt	eq
 8008484:	6819      	ldreq	r1, [r3, #0]
 8008486:	685b      	ldreq	r3, [r3, #4]
 8008488:	6063      	str	r3, [r4, #4]
 800848a:	bf04      	itt	eq
 800848c:	1949      	addeq	r1, r1, r5
 800848e:	6021      	streq	r1, [r4, #0]
 8008490:	6054      	str	r4, [r2, #4]
 8008492:	e7ca      	b.n	800842a <_free_r+0x26>
 8008494:	b003      	add	sp, #12
 8008496:	bd30      	pop	{r4, r5, pc}
 8008498:	20000514 	.word	0x20000514

0800849c <malloc>:
 800849c:	4b02      	ldr	r3, [pc, #8]	; (80084a8 <malloc+0xc>)
 800849e:	4601      	mov	r1, r0
 80084a0:	6818      	ldr	r0, [r3, #0]
 80084a2:	f000 b823 	b.w	80084ec <_malloc_r>
 80084a6:	bf00      	nop
 80084a8:	2000006c 	.word	0x2000006c

080084ac <sbrk_aligned>:
 80084ac:	b570      	push	{r4, r5, r6, lr}
 80084ae:	4e0e      	ldr	r6, [pc, #56]	; (80084e8 <sbrk_aligned+0x3c>)
 80084b0:	460c      	mov	r4, r1
 80084b2:	6831      	ldr	r1, [r6, #0]
 80084b4:	4605      	mov	r5, r0
 80084b6:	b911      	cbnz	r1, 80084be <sbrk_aligned+0x12>
 80084b8:	f000 fe40 	bl	800913c <_sbrk_r>
 80084bc:	6030      	str	r0, [r6, #0]
 80084be:	4621      	mov	r1, r4
 80084c0:	4628      	mov	r0, r5
 80084c2:	f000 fe3b 	bl	800913c <_sbrk_r>
 80084c6:	1c43      	adds	r3, r0, #1
 80084c8:	d00a      	beq.n	80084e0 <sbrk_aligned+0x34>
 80084ca:	1cc4      	adds	r4, r0, #3
 80084cc:	f024 0403 	bic.w	r4, r4, #3
 80084d0:	42a0      	cmp	r0, r4
 80084d2:	d007      	beq.n	80084e4 <sbrk_aligned+0x38>
 80084d4:	1a21      	subs	r1, r4, r0
 80084d6:	4628      	mov	r0, r5
 80084d8:	f000 fe30 	bl	800913c <_sbrk_r>
 80084dc:	3001      	adds	r0, #1
 80084de:	d101      	bne.n	80084e4 <sbrk_aligned+0x38>
 80084e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80084e4:	4620      	mov	r0, r4
 80084e6:	bd70      	pop	{r4, r5, r6, pc}
 80084e8:	20000518 	.word	0x20000518

080084ec <_malloc_r>:
 80084ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084f0:	1ccd      	adds	r5, r1, #3
 80084f2:	f025 0503 	bic.w	r5, r5, #3
 80084f6:	3508      	adds	r5, #8
 80084f8:	2d0c      	cmp	r5, #12
 80084fa:	bf38      	it	cc
 80084fc:	250c      	movcc	r5, #12
 80084fe:	2d00      	cmp	r5, #0
 8008500:	4607      	mov	r7, r0
 8008502:	db01      	blt.n	8008508 <_malloc_r+0x1c>
 8008504:	42a9      	cmp	r1, r5
 8008506:	d905      	bls.n	8008514 <_malloc_r+0x28>
 8008508:	230c      	movs	r3, #12
 800850a:	603b      	str	r3, [r7, #0]
 800850c:	2600      	movs	r6, #0
 800850e:	4630      	mov	r0, r6
 8008510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008514:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80085e8 <_malloc_r+0xfc>
 8008518:	f000 f868 	bl	80085ec <__malloc_lock>
 800851c:	f8d8 3000 	ldr.w	r3, [r8]
 8008520:	461c      	mov	r4, r3
 8008522:	bb5c      	cbnz	r4, 800857c <_malloc_r+0x90>
 8008524:	4629      	mov	r1, r5
 8008526:	4638      	mov	r0, r7
 8008528:	f7ff ffc0 	bl	80084ac <sbrk_aligned>
 800852c:	1c43      	adds	r3, r0, #1
 800852e:	4604      	mov	r4, r0
 8008530:	d155      	bne.n	80085de <_malloc_r+0xf2>
 8008532:	f8d8 4000 	ldr.w	r4, [r8]
 8008536:	4626      	mov	r6, r4
 8008538:	2e00      	cmp	r6, #0
 800853a:	d145      	bne.n	80085c8 <_malloc_r+0xdc>
 800853c:	2c00      	cmp	r4, #0
 800853e:	d048      	beq.n	80085d2 <_malloc_r+0xe6>
 8008540:	6823      	ldr	r3, [r4, #0]
 8008542:	4631      	mov	r1, r6
 8008544:	4638      	mov	r0, r7
 8008546:	eb04 0903 	add.w	r9, r4, r3
 800854a:	f000 fdf7 	bl	800913c <_sbrk_r>
 800854e:	4581      	cmp	r9, r0
 8008550:	d13f      	bne.n	80085d2 <_malloc_r+0xe6>
 8008552:	6821      	ldr	r1, [r4, #0]
 8008554:	1a6d      	subs	r5, r5, r1
 8008556:	4629      	mov	r1, r5
 8008558:	4638      	mov	r0, r7
 800855a:	f7ff ffa7 	bl	80084ac <sbrk_aligned>
 800855e:	3001      	adds	r0, #1
 8008560:	d037      	beq.n	80085d2 <_malloc_r+0xe6>
 8008562:	6823      	ldr	r3, [r4, #0]
 8008564:	442b      	add	r3, r5
 8008566:	6023      	str	r3, [r4, #0]
 8008568:	f8d8 3000 	ldr.w	r3, [r8]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d038      	beq.n	80085e2 <_malloc_r+0xf6>
 8008570:	685a      	ldr	r2, [r3, #4]
 8008572:	42a2      	cmp	r2, r4
 8008574:	d12b      	bne.n	80085ce <_malloc_r+0xe2>
 8008576:	2200      	movs	r2, #0
 8008578:	605a      	str	r2, [r3, #4]
 800857a:	e00f      	b.n	800859c <_malloc_r+0xb0>
 800857c:	6822      	ldr	r2, [r4, #0]
 800857e:	1b52      	subs	r2, r2, r5
 8008580:	d41f      	bmi.n	80085c2 <_malloc_r+0xd6>
 8008582:	2a0b      	cmp	r2, #11
 8008584:	d917      	bls.n	80085b6 <_malloc_r+0xca>
 8008586:	1961      	adds	r1, r4, r5
 8008588:	42a3      	cmp	r3, r4
 800858a:	6025      	str	r5, [r4, #0]
 800858c:	bf18      	it	ne
 800858e:	6059      	strne	r1, [r3, #4]
 8008590:	6863      	ldr	r3, [r4, #4]
 8008592:	bf08      	it	eq
 8008594:	f8c8 1000 	streq.w	r1, [r8]
 8008598:	5162      	str	r2, [r4, r5]
 800859a:	604b      	str	r3, [r1, #4]
 800859c:	4638      	mov	r0, r7
 800859e:	f104 060b 	add.w	r6, r4, #11
 80085a2:	f000 f829 	bl	80085f8 <__malloc_unlock>
 80085a6:	f026 0607 	bic.w	r6, r6, #7
 80085aa:	1d23      	adds	r3, r4, #4
 80085ac:	1af2      	subs	r2, r6, r3
 80085ae:	d0ae      	beq.n	800850e <_malloc_r+0x22>
 80085b0:	1b9b      	subs	r3, r3, r6
 80085b2:	50a3      	str	r3, [r4, r2]
 80085b4:	e7ab      	b.n	800850e <_malloc_r+0x22>
 80085b6:	42a3      	cmp	r3, r4
 80085b8:	6862      	ldr	r2, [r4, #4]
 80085ba:	d1dd      	bne.n	8008578 <_malloc_r+0x8c>
 80085bc:	f8c8 2000 	str.w	r2, [r8]
 80085c0:	e7ec      	b.n	800859c <_malloc_r+0xb0>
 80085c2:	4623      	mov	r3, r4
 80085c4:	6864      	ldr	r4, [r4, #4]
 80085c6:	e7ac      	b.n	8008522 <_malloc_r+0x36>
 80085c8:	4634      	mov	r4, r6
 80085ca:	6876      	ldr	r6, [r6, #4]
 80085cc:	e7b4      	b.n	8008538 <_malloc_r+0x4c>
 80085ce:	4613      	mov	r3, r2
 80085d0:	e7cc      	b.n	800856c <_malloc_r+0x80>
 80085d2:	230c      	movs	r3, #12
 80085d4:	603b      	str	r3, [r7, #0]
 80085d6:	4638      	mov	r0, r7
 80085d8:	f000 f80e 	bl	80085f8 <__malloc_unlock>
 80085dc:	e797      	b.n	800850e <_malloc_r+0x22>
 80085de:	6025      	str	r5, [r4, #0]
 80085e0:	e7dc      	b.n	800859c <_malloc_r+0xb0>
 80085e2:	605b      	str	r3, [r3, #4]
 80085e4:	deff      	udf	#255	; 0xff
 80085e6:	bf00      	nop
 80085e8:	20000514 	.word	0x20000514

080085ec <__malloc_lock>:
 80085ec:	4801      	ldr	r0, [pc, #4]	; (80085f4 <__malloc_lock+0x8>)
 80085ee:	f7ff b87d 	b.w	80076ec <__retarget_lock_acquire_recursive>
 80085f2:	bf00      	nop
 80085f4:	20000510 	.word	0x20000510

080085f8 <__malloc_unlock>:
 80085f8:	4801      	ldr	r0, [pc, #4]	; (8008600 <__malloc_unlock+0x8>)
 80085fa:	f7ff b878 	b.w	80076ee <__retarget_lock_release_recursive>
 80085fe:	bf00      	nop
 8008600:	20000510 	.word	0x20000510

08008604 <_Balloc>:
 8008604:	b570      	push	{r4, r5, r6, lr}
 8008606:	69c6      	ldr	r6, [r0, #28]
 8008608:	4604      	mov	r4, r0
 800860a:	460d      	mov	r5, r1
 800860c:	b976      	cbnz	r6, 800862c <_Balloc+0x28>
 800860e:	2010      	movs	r0, #16
 8008610:	f7ff ff44 	bl	800849c <malloc>
 8008614:	4602      	mov	r2, r0
 8008616:	61e0      	str	r0, [r4, #28]
 8008618:	b920      	cbnz	r0, 8008624 <_Balloc+0x20>
 800861a:	4b18      	ldr	r3, [pc, #96]	; (800867c <_Balloc+0x78>)
 800861c:	4818      	ldr	r0, [pc, #96]	; (8008680 <_Balloc+0x7c>)
 800861e:	216b      	movs	r1, #107	; 0x6b
 8008620:	f000 fd9c 	bl	800915c <__assert_func>
 8008624:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008628:	6006      	str	r6, [r0, #0]
 800862a:	60c6      	str	r6, [r0, #12]
 800862c:	69e6      	ldr	r6, [r4, #28]
 800862e:	68f3      	ldr	r3, [r6, #12]
 8008630:	b183      	cbz	r3, 8008654 <_Balloc+0x50>
 8008632:	69e3      	ldr	r3, [r4, #28]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800863a:	b9b8      	cbnz	r0, 800866c <_Balloc+0x68>
 800863c:	2101      	movs	r1, #1
 800863e:	fa01 f605 	lsl.w	r6, r1, r5
 8008642:	1d72      	adds	r2, r6, #5
 8008644:	0092      	lsls	r2, r2, #2
 8008646:	4620      	mov	r0, r4
 8008648:	f000 fda6 	bl	8009198 <_calloc_r>
 800864c:	b160      	cbz	r0, 8008668 <_Balloc+0x64>
 800864e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008652:	e00e      	b.n	8008672 <_Balloc+0x6e>
 8008654:	2221      	movs	r2, #33	; 0x21
 8008656:	2104      	movs	r1, #4
 8008658:	4620      	mov	r0, r4
 800865a:	f000 fd9d 	bl	8009198 <_calloc_r>
 800865e:	69e3      	ldr	r3, [r4, #28]
 8008660:	60f0      	str	r0, [r6, #12]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1e4      	bne.n	8008632 <_Balloc+0x2e>
 8008668:	2000      	movs	r0, #0
 800866a:	bd70      	pop	{r4, r5, r6, pc}
 800866c:	6802      	ldr	r2, [r0, #0]
 800866e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008672:	2300      	movs	r3, #0
 8008674:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008678:	e7f7      	b.n	800866a <_Balloc+0x66>
 800867a:	bf00      	nop
 800867c:	0800a331 	.word	0x0800a331
 8008680:	0800a3b1 	.word	0x0800a3b1

08008684 <_Bfree>:
 8008684:	b570      	push	{r4, r5, r6, lr}
 8008686:	69c6      	ldr	r6, [r0, #28]
 8008688:	4605      	mov	r5, r0
 800868a:	460c      	mov	r4, r1
 800868c:	b976      	cbnz	r6, 80086ac <_Bfree+0x28>
 800868e:	2010      	movs	r0, #16
 8008690:	f7ff ff04 	bl	800849c <malloc>
 8008694:	4602      	mov	r2, r0
 8008696:	61e8      	str	r0, [r5, #28]
 8008698:	b920      	cbnz	r0, 80086a4 <_Bfree+0x20>
 800869a:	4b09      	ldr	r3, [pc, #36]	; (80086c0 <_Bfree+0x3c>)
 800869c:	4809      	ldr	r0, [pc, #36]	; (80086c4 <_Bfree+0x40>)
 800869e:	218f      	movs	r1, #143	; 0x8f
 80086a0:	f000 fd5c 	bl	800915c <__assert_func>
 80086a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086a8:	6006      	str	r6, [r0, #0]
 80086aa:	60c6      	str	r6, [r0, #12]
 80086ac:	b13c      	cbz	r4, 80086be <_Bfree+0x3a>
 80086ae:	69eb      	ldr	r3, [r5, #28]
 80086b0:	6862      	ldr	r2, [r4, #4]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086b8:	6021      	str	r1, [r4, #0]
 80086ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80086be:	bd70      	pop	{r4, r5, r6, pc}
 80086c0:	0800a331 	.word	0x0800a331
 80086c4:	0800a3b1 	.word	0x0800a3b1

080086c8 <__multadd>:
 80086c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086cc:	690d      	ldr	r5, [r1, #16]
 80086ce:	4607      	mov	r7, r0
 80086d0:	460c      	mov	r4, r1
 80086d2:	461e      	mov	r6, r3
 80086d4:	f101 0c14 	add.w	ip, r1, #20
 80086d8:	2000      	movs	r0, #0
 80086da:	f8dc 3000 	ldr.w	r3, [ip]
 80086de:	b299      	uxth	r1, r3
 80086e0:	fb02 6101 	mla	r1, r2, r1, r6
 80086e4:	0c1e      	lsrs	r6, r3, #16
 80086e6:	0c0b      	lsrs	r3, r1, #16
 80086e8:	fb02 3306 	mla	r3, r2, r6, r3
 80086ec:	b289      	uxth	r1, r1
 80086ee:	3001      	adds	r0, #1
 80086f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80086f4:	4285      	cmp	r5, r0
 80086f6:	f84c 1b04 	str.w	r1, [ip], #4
 80086fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80086fe:	dcec      	bgt.n	80086da <__multadd+0x12>
 8008700:	b30e      	cbz	r6, 8008746 <__multadd+0x7e>
 8008702:	68a3      	ldr	r3, [r4, #8]
 8008704:	42ab      	cmp	r3, r5
 8008706:	dc19      	bgt.n	800873c <__multadd+0x74>
 8008708:	6861      	ldr	r1, [r4, #4]
 800870a:	4638      	mov	r0, r7
 800870c:	3101      	adds	r1, #1
 800870e:	f7ff ff79 	bl	8008604 <_Balloc>
 8008712:	4680      	mov	r8, r0
 8008714:	b928      	cbnz	r0, 8008722 <__multadd+0x5a>
 8008716:	4602      	mov	r2, r0
 8008718:	4b0c      	ldr	r3, [pc, #48]	; (800874c <__multadd+0x84>)
 800871a:	480d      	ldr	r0, [pc, #52]	; (8008750 <__multadd+0x88>)
 800871c:	21ba      	movs	r1, #186	; 0xba
 800871e:	f000 fd1d 	bl	800915c <__assert_func>
 8008722:	6922      	ldr	r2, [r4, #16]
 8008724:	3202      	adds	r2, #2
 8008726:	f104 010c 	add.w	r1, r4, #12
 800872a:	0092      	lsls	r2, r2, #2
 800872c:	300c      	adds	r0, #12
 800872e:	f7fe ffdf 	bl	80076f0 <memcpy>
 8008732:	4621      	mov	r1, r4
 8008734:	4638      	mov	r0, r7
 8008736:	f7ff ffa5 	bl	8008684 <_Bfree>
 800873a:	4644      	mov	r4, r8
 800873c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008740:	3501      	adds	r5, #1
 8008742:	615e      	str	r6, [r3, #20]
 8008744:	6125      	str	r5, [r4, #16]
 8008746:	4620      	mov	r0, r4
 8008748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800874c:	0800a3a0 	.word	0x0800a3a0
 8008750:	0800a3b1 	.word	0x0800a3b1

08008754 <__hi0bits>:
 8008754:	0c03      	lsrs	r3, r0, #16
 8008756:	041b      	lsls	r3, r3, #16
 8008758:	b9d3      	cbnz	r3, 8008790 <__hi0bits+0x3c>
 800875a:	0400      	lsls	r0, r0, #16
 800875c:	2310      	movs	r3, #16
 800875e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008762:	bf04      	itt	eq
 8008764:	0200      	lsleq	r0, r0, #8
 8008766:	3308      	addeq	r3, #8
 8008768:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800876c:	bf04      	itt	eq
 800876e:	0100      	lsleq	r0, r0, #4
 8008770:	3304      	addeq	r3, #4
 8008772:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008776:	bf04      	itt	eq
 8008778:	0080      	lsleq	r0, r0, #2
 800877a:	3302      	addeq	r3, #2
 800877c:	2800      	cmp	r0, #0
 800877e:	db05      	blt.n	800878c <__hi0bits+0x38>
 8008780:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008784:	f103 0301 	add.w	r3, r3, #1
 8008788:	bf08      	it	eq
 800878a:	2320      	moveq	r3, #32
 800878c:	4618      	mov	r0, r3
 800878e:	4770      	bx	lr
 8008790:	2300      	movs	r3, #0
 8008792:	e7e4      	b.n	800875e <__hi0bits+0xa>

08008794 <__lo0bits>:
 8008794:	6803      	ldr	r3, [r0, #0]
 8008796:	f013 0207 	ands.w	r2, r3, #7
 800879a:	d00c      	beq.n	80087b6 <__lo0bits+0x22>
 800879c:	07d9      	lsls	r1, r3, #31
 800879e:	d422      	bmi.n	80087e6 <__lo0bits+0x52>
 80087a0:	079a      	lsls	r2, r3, #30
 80087a2:	bf49      	itett	mi
 80087a4:	085b      	lsrmi	r3, r3, #1
 80087a6:	089b      	lsrpl	r3, r3, #2
 80087a8:	6003      	strmi	r3, [r0, #0]
 80087aa:	2201      	movmi	r2, #1
 80087ac:	bf5c      	itt	pl
 80087ae:	6003      	strpl	r3, [r0, #0]
 80087b0:	2202      	movpl	r2, #2
 80087b2:	4610      	mov	r0, r2
 80087b4:	4770      	bx	lr
 80087b6:	b299      	uxth	r1, r3
 80087b8:	b909      	cbnz	r1, 80087be <__lo0bits+0x2a>
 80087ba:	0c1b      	lsrs	r3, r3, #16
 80087bc:	2210      	movs	r2, #16
 80087be:	b2d9      	uxtb	r1, r3
 80087c0:	b909      	cbnz	r1, 80087c6 <__lo0bits+0x32>
 80087c2:	3208      	adds	r2, #8
 80087c4:	0a1b      	lsrs	r3, r3, #8
 80087c6:	0719      	lsls	r1, r3, #28
 80087c8:	bf04      	itt	eq
 80087ca:	091b      	lsreq	r3, r3, #4
 80087cc:	3204      	addeq	r2, #4
 80087ce:	0799      	lsls	r1, r3, #30
 80087d0:	bf04      	itt	eq
 80087d2:	089b      	lsreq	r3, r3, #2
 80087d4:	3202      	addeq	r2, #2
 80087d6:	07d9      	lsls	r1, r3, #31
 80087d8:	d403      	bmi.n	80087e2 <__lo0bits+0x4e>
 80087da:	085b      	lsrs	r3, r3, #1
 80087dc:	f102 0201 	add.w	r2, r2, #1
 80087e0:	d003      	beq.n	80087ea <__lo0bits+0x56>
 80087e2:	6003      	str	r3, [r0, #0]
 80087e4:	e7e5      	b.n	80087b2 <__lo0bits+0x1e>
 80087e6:	2200      	movs	r2, #0
 80087e8:	e7e3      	b.n	80087b2 <__lo0bits+0x1e>
 80087ea:	2220      	movs	r2, #32
 80087ec:	e7e1      	b.n	80087b2 <__lo0bits+0x1e>
	...

080087f0 <__i2b>:
 80087f0:	b510      	push	{r4, lr}
 80087f2:	460c      	mov	r4, r1
 80087f4:	2101      	movs	r1, #1
 80087f6:	f7ff ff05 	bl	8008604 <_Balloc>
 80087fa:	4602      	mov	r2, r0
 80087fc:	b928      	cbnz	r0, 800880a <__i2b+0x1a>
 80087fe:	4b05      	ldr	r3, [pc, #20]	; (8008814 <__i2b+0x24>)
 8008800:	4805      	ldr	r0, [pc, #20]	; (8008818 <__i2b+0x28>)
 8008802:	f240 1145 	movw	r1, #325	; 0x145
 8008806:	f000 fca9 	bl	800915c <__assert_func>
 800880a:	2301      	movs	r3, #1
 800880c:	6144      	str	r4, [r0, #20]
 800880e:	6103      	str	r3, [r0, #16]
 8008810:	bd10      	pop	{r4, pc}
 8008812:	bf00      	nop
 8008814:	0800a3a0 	.word	0x0800a3a0
 8008818:	0800a3b1 	.word	0x0800a3b1

0800881c <__multiply>:
 800881c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008820:	4691      	mov	r9, r2
 8008822:	690a      	ldr	r2, [r1, #16]
 8008824:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008828:	429a      	cmp	r2, r3
 800882a:	bfb8      	it	lt
 800882c:	460b      	movlt	r3, r1
 800882e:	460c      	mov	r4, r1
 8008830:	bfbc      	itt	lt
 8008832:	464c      	movlt	r4, r9
 8008834:	4699      	movlt	r9, r3
 8008836:	6927      	ldr	r7, [r4, #16]
 8008838:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800883c:	68a3      	ldr	r3, [r4, #8]
 800883e:	6861      	ldr	r1, [r4, #4]
 8008840:	eb07 060a 	add.w	r6, r7, sl
 8008844:	42b3      	cmp	r3, r6
 8008846:	b085      	sub	sp, #20
 8008848:	bfb8      	it	lt
 800884a:	3101      	addlt	r1, #1
 800884c:	f7ff feda 	bl	8008604 <_Balloc>
 8008850:	b930      	cbnz	r0, 8008860 <__multiply+0x44>
 8008852:	4602      	mov	r2, r0
 8008854:	4b44      	ldr	r3, [pc, #272]	; (8008968 <__multiply+0x14c>)
 8008856:	4845      	ldr	r0, [pc, #276]	; (800896c <__multiply+0x150>)
 8008858:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800885c:	f000 fc7e 	bl	800915c <__assert_func>
 8008860:	f100 0514 	add.w	r5, r0, #20
 8008864:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008868:	462b      	mov	r3, r5
 800886a:	2200      	movs	r2, #0
 800886c:	4543      	cmp	r3, r8
 800886e:	d321      	bcc.n	80088b4 <__multiply+0x98>
 8008870:	f104 0314 	add.w	r3, r4, #20
 8008874:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008878:	f109 0314 	add.w	r3, r9, #20
 800887c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008880:	9202      	str	r2, [sp, #8]
 8008882:	1b3a      	subs	r2, r7, r4
 8008884:	3a15      	subs	r2, #21
 8008886:	f022 0203 	bic.w	r2, r2, #3
 800888a:	3204      	adds	r2, #4
 800888c:	f104 0115 	add.w	r1, r4, #21
 8008890:	428f      	cmp	r7, r1
 8008892:	bf38      	it	cc
 8008894:	2204      	movcc	r2, #4
 8008896:	9201      	str	r2, [sp, #4]
 8008898:	9a02      	ldr	r2, [sp, #8]
 800889a:	9303      	str	r3, [sp, #12]
 800889c:	429a      	cmp	r2, r3
 800889e:	d80c      	bhi.n	80088ba <__multiply+0x9e>
 80088a0:	2e00      	cmp	r6, #0
 80088a2:	dd03      	ble.n	80088ac <__multiply+0x90>
 80088a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d05b      	beq.n	8008964 <__multiply+0x148>
 80088ac:	6106      	str	r6, [r0, #16]
 80088ae:	b005      	add	sp, #20
 80088b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b4:	f843 2b04 	str.w	r2, [r3], #4
 80088b8:	e7d8      	b.n	800886c <__multiply+0x50>
 80088ba:	f8b3 a000 	ldrh.w	sl, [r3]
 80088be:	f1ba 0f00 	cmp.w	sl, #0
 80088c2:	d024      	beq.n	800890e <__multiply+0xf2>
 80088c4:	f104 0e14 	add.w	lr, r4, #20
 80088c8:	46a9      	mov	r9, r5
 80088ca:	f04f 0c00 	mov.w	ip, #0
 80088ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 80088d2:	f8d9 1000 	ldr.w	r1, [r9]
 80088d6:	fa1f fb82 	uxth.w	fp, r2
 80088da:	b289      	uxth	r1, r1
 80088dc:	fb0a 110b 	mla	r1, sl, fp, r1
 80088e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80088e4:	f8d9 2000 	ldr.w	r2, [r9]
 80088e8:	4461      	add	r1, ip
 80088ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80088ee:	fb0a c20b 	mla	r2, sl, fp, ip
 80088f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80088f6:	b289      	uxth	r1, r1
 80088f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80088fc:	4577      	cmp	r7, lr
 80088fe:	f849 1b04 	str.w	r1, [r9], #4
 8008902:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008906:	d8e2      	bhi.n	80088ce <__multiply+0xb2>
 8008908:	9a01      	ldr	r2, [sp, #4]
 800890a:	f845 c002 	str.w	ip, [r5, r2]
 800890e:	9a03      	ldr	r2, [sp, #12]
 8008910:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008914:	3304      	adds	r3, #4
 8008916:	f1b9 0f00 	cmp.w	r9, #0
 800891a:	d021      	beq.n	8008960 <__multiply+0x144>
 800891c:	6829      	ldr	r1, [r5, #0]
 800891e:	f104 0c14 	add.w	ip, r4, #20
 8008922:	46ae      	mov	lr, r5
 8008924:	f04f 0a00 	mov.w	sl, #0
 8008928:	f8bc b000 	ldrh.w	fp, [ip]
 800892c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008930:	fb09 220b 	mla	r2, r9, fp, r2
 8008934:	4452      	add	r2, sl
 8008936:	b289      	uxth	r1, r1
 8008938:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800893c:	f84e 1b04 	str.w	r1, [lr], #4
 8008940:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008944:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008948:	f8be 1000 	ldrh.w	r1, [lr]
 800894c:	fb09 110a 	mla	r1, r9, sl, r1
 8008950:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008954:	4567      	cmp	r7, ip
 8008956:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800895a:	d8e5      	bhi.n	8008928 <__multiply+0x10c>
 800895c:	9a01      	ldr	r2, [sp, #4]
 800895e:	50a9      	str	r1, [r5, r2]
 8008960:	3504      	adds	r5, #4
 8008962:	e799      	b.n	8008898 <__multiply+0x7c>
 8008964:	3e01      	subs	r6, #1
 8008966:	e79b      	b.n	80088a0 <__multiply+0x84>
 8008968:	0800a3a0 	.word	0x0800a3a0
 800896c:	0800a3b1 	.word	0x0800a3b1

08008970 <__pow5mult>:
 8008970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008974:	4615      	mov	r5, r2
 8008976:	f012 0203 	ands.w	r2, r2, #3
 800897a:	4606      	mov	r6, r0
 800897c:	460f      	mov	r7, r1
 800897e:	d007      	beq.n	8008990 <__pow5mult+0x20>
 8008980:	4c25      	ldr	r4, [pc, #148]	; (8008a18 <__pow5mult+0xa8>)
 8008982:	3a01      	subs	r2, #1
 8008984:	2300      	movs	r3, #0
 8008986:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800898a:	f7ff fe9d 	bl	80086c8 <__multadd>
 800898e:	4607      	mov	r7, r0
 8008990:	10ad      	asrs	r5, r5, #2
 8008992:	d03d      	beq.n	8008a10 <__pow5mult+0xa0>
 8008994:	69f4      	ldr	r4, [r6, #28]
 8008996:	b97c      	cbnz	r4, 80089b8 <__pow5mult+0x48>
 8008998:	2010      	movs	r0, #16
 800899a:	f7ff fd7f 	bl	800849c <malloc>
 800899e:	4602      	mov	r2, r0
 80089a0:	61f0      	str	r0, [r6, #28]
 80089a2:	b928      	cbnz	r0, 80089b0 <__pow5mult+0x40>
 80089a4:	4b1d      	ldr	r3, [pc, #116]	; (8008a1c <__pow5mult+0xac>)
 80089a6:	481e      	ldr	r0, [pc, #120]	; (8008a20 <__pow5mult+0xb0>)
 80089a8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80089ac:	f000 fbd6 	bl	800915c <__assert_func>
 80089b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089b4:	6004      	str	r4, [r0, #0]
 80089b6:	60c4      	str	r4, [r0, #12]
 80089b8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80089bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089c0:	b94c      	cbnz	r4, 80089d6 <__pow5mult+0x66>
 80089c2:	f240 2171 	movw	r1, #625	; 0x271
 80089c6:	4630      	mov	r0, r6
 80089c8:	f7ff ff12 	bl	80087f0 <__i2b>
 80089cc:	2300      	movs	r3, #0
 80089ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80089d2:	4604      	mov	r4, r0
 80089d4:	6003      	str	r3, [r0, #0]
 80089d6:	f04f 0900 	mov.w	r9, #0
 80089da:	07eb      	lsls	r3, r5, #31
 80089dc:	d50a      	bpl.n	80089f4 <__pow5mult+0x84>
 80089de:	4639      	mov	r1, r7
 80089e0:	4622      	mov	r2, r4
 80089e2:	4630      	mov	r0, r6
 80089e4:	f7ff ff1a 	bl	800881c <__multiply>
 80089e8:	4639      	mov	r1, r7
 80089ea:	4680      	mov	r8, r0
 80089ec:	4630      	mov	r0, r6
 80089ee:	f7ff fe49 	bl	8008684 <_Bfree>
 80089f2:	4647      	mov	r7, r8
 80089f4:	106d      	asrs	r5, r5, #1
 80089f6:	d00b      	beq.n	8008a10 <__pow5mult+0xa0>
 80089f8:	6820      	ldr	r0, [r4, #0]
 80089fa:	b938      	cbnz	r0, 8008a0c <__pow5mult+0x9c>
 80089fc:	4622      	mov	r2, r4
 80089fe:	4621      	mov	r1, r4
 8008a00:	4630      	mov	r0, r6
 8008a02:	f7ff ff0b 	bl	800881c <__multiply>
 8008a06:	6020      	str	r0, [r4, #0]
 8008a08:	f8c0 9000 	str.w	r9, [r0]
 8008a0c:	4604      	mov	r4, r0
 8008a0e:	e7e4      	b.n	80089da <__pow5mult+0x6a>
 8008a10:	4638      	mov	r0, r7
 8008a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a16:	bf00      	nop
 8008a18:	0800a500 	.word	0x0800a500
 8008a1c:	0800a331 	.word	0x0800a331
 8008a20:	0800a3b1 	.word	0x0800a3b1

08008a24 <__lshift>:
 8008a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a28:	460c      	mov	r4, r1
 8008a2a:	6849      	ldr	r1, [r1, #4]
 8008a2c:	6923      	ldr	r3, [r4, #16]
 8008a2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a32:	68a3      	ldr	r3, [r4, #8]
 8008a34:	4607      	mov	r7, r0
 8008a36:	4691      	mov	r9, r2
 8008a38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a3c:	f108 0601 	add.w	r6, r8, #1
 8008a40:	42b3      	cmp	r3, r6
 8008a42:	db0b      	blt.n	8008a5c <__lshift+0x38>
 8008a44:	4638      	mov	r0, r7
 8008a46:	f7ff fddd 	bl	8008604 <_Balloc>
 8008a4a:	4605      	mov	r5, r0
 8008a4c:	b948      	cbnz	r0, 8008a62 <__lshift+0x3e>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	4b28      	ldr	r3, [pc, #160]	; (8008af4 <__lshift+0xd0>)
 8008a52:	4829      	ldr	r0, [pc, #164]	; (8008af8 <__lshift+0xd4>)
 8008a54:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008a58:	f000 fb80 	bl	800915c <__assert_func>
 8008a5c:	3101      	adds	r1, #1
 8008a5e:	005b      	lsls	r3, r3, #1
 8008a60:	e7ee      	b.n	8008a40 <__lshift+0x1c>
 8008a62:	2300      	movs	r3, #0
 8008a64:	f100 0114 	add.w	r1, r0, #20
 8008a68:	f100 0210 	add.w	r2, r0, #16
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	4553      	cmp	r3, sl
 8008a70:	db33      	blt.n	8008ada <__lshift+0xb6>
 8008a72:	6920      	ldr	r0, [r4, #16]
 8008a74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a78:	f104 0314 	add.w	r3, r4, #20
 8008a7c:	f019 091f 	ands.w	r9, r9, #31
 8008a80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a88:	d02b      	beq.n	8008ae2 <__lshift+0xbe>
 8008a8a:	f1c9 0e20 	rsb	lr, r9, #32
 8008a8e:	468a      	mov	sl, r1
 8008a90:	2200      	movs	r2, #0
 8008a92:	6818      	ldr	r0, [r3, #0]
 8008a94:	fa00 f009 	lsl.w	r0, r0, r9
 8008a98:	4310      	orrs	r0, r2
 8008a9a:	f84a 0b04 	str.w	r0, [sl], #4
 8008a9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aa2:	459c      	cmp	ip, r3
 8008aa4:	fa22 f20e 	lsr.w	r2, r2, lr
 8008aa8:	d8f3      	bhi.n	8008a92 <__lshift+0x6e>
 8008aaa:	ebac 0304 	sub.w	r3, ip, r4
 8008aae:	3b15      	subs	r3, #21
 8008ab0:	f023 0303 	bic.w	r3, r3, #3
 8008ab4:	3304      	adds	r3, #4
 8008ab6:	f104 0015 	add.w	r0, r4, #21
 8008aba:	4584      	cmp	ip, r0
 8008abc:	bf38      	it	cc
 8008abe:	2304      	movcc	r3, #4
 8008ac0:	50ca      	str	r2, [r1, r3]
 8008ac2:	b10a      	cbz	r2, 8008ac8 <__lshift+0xa4>
 8008ac4:	f108 0602 	add.w	r6, r8, #2
 8008ac8:	3e01      	subs	r6, #1
 8008aca:	4638      	mov	r0, r7
 8008acc:	612e      	str	r6, [r5, #16]
 8008ace:	4621      	mov	r1, r4
 8008ad0:	f7ff fdd8 	bl	8008684 <_Bfree>
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ada:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ade:	3301      	adds	r3, #1
 8008ae0:	e7c5      	b.n	8008a6e <__lshift+0x4a>
 8008ae2:	3904      	subs	r1, #4
 8008ae4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ae8:	f841 2f04 	str.w	r2, [r1, #4]!
 8008aec:	459c      	cmp	ip, r3
 8008aee:	d8f9      	bhi.n	8008ae4 <__lshift+0xc0>
 8008af0:	e7ea      	b.n	8008ac8 <__lshift+0xa4>
 8008af2:	bf00      	nop
 8008af4:	0800a3a0 	.word	0x0800a3a0
 8008af8:	0800a3b1 	.word	0x0800a3b1

08008afc <__mcmp>:
 8008afc:	b530      	push	{r4, r5, lr}
 8008afe:	6902      	ldr	r2, [r0, #16]
 8008b00:	690c      	ldr	r4, [r1, #16]
 8008b02:	1b12      	subs	r2, r2, r4
 8008b04:	d10e      	bne.n	8008b24 <__mcmp+0x28>
 8008b06:	f100 0314 	add.w	r3, r0, #20
 8008b0a:	3114      	adds	r1, #20
 8008b0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008b10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008b14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008b18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008b1c:	42a5      	cmp	r5, r4
 8008b1e:	d003      	beq.n	8008b28 <__mcmp+0x2c>
 8008b20:	d305      	bcc.n	8008b2e <__mcmp+0x32>
 8008b22:	2201      	movs	r2, #1
 8008b24:	4610      	mov	r0, r2
 8008b26:	bd30      	pop	{r4, r5, pc}
 8008b28:	4283      	cmp	r3, r0
 8008b2a:	d3f3      	bcc.n	8008b14 <__mcmp+0x18>
 8008b2c:	e7fa      	b.n	8008b24 <__mcmp+0x28>
 8008b2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b32:	e7f7      	b.n	8008b24 <__mcmp+0x28>

08008b34 <__mdiff>:
 8008b34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b38:	460c      	mov	r4, r1
 8008b3a:	4606      	mov	r6, r0
 8008b3c:	4611      	mov	r1, r2
 8008b3e:	4620      	mov	r0, r4
 8008b40:	4690      	mov	r8, r2
 8008b42:	f7ff ffdb 	bl	8008afc <__mcmp>
 8008b46:	1e05      	subs	r5, r0, #0
 8008b48:	d110      	bne.n	8008b6c <__mdiff+0x38>
 8008b4a:	4629      	mov	r1, r5
 8008b4c:	4630      	mov	r0, r6
 8008b4e:	f7ff fd59 	bl	8008604 <_Balloc>
 8008b52:	b930      	cbnz	r0, 8008b62 <__mdiff+0x2e>
 8008b54:	4b3a      	ldr	r3, [pc, #232]	; (8008c40 <__mdiff+0x10c>)
 8008b56:	4602      	mov	r2, r0
 8008b58:	f240 2137 	movw	r1, #567	; 0x237
 8008b5c:	4839      	ldr	r0, [pc, #228]	; (8008c44 <__mdiff+0x110>)
 8008b5e:	f000 fafd 	bl	800915c <__assert_func>
 8008b62:	2301      	movs	r3, #1
 8008b64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b6c:	bfa4      	itt	ge
 8008b6e:	4643      	movge	r3, r8
 8008b70:	46a0      	movge	r8, r4
 8008b72:	4630      	mov	r0, r6
 8008b74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008b78:	bfa6      	itte	ge
 8008b7a:	461c      	movge	r4, r3
 8008b7c:	2500      	movge	r5, #0
 8008b7e:	2501      	movlt	r5, #1
 8008b80:	f7ff fd40 	bl	8008604 <_Balloc>
 8008b84:	b920      	cbnz	r0, 8008b90 <__mdiff+0x5c>
 8008b86:	4b2e      	ldr	r3, [pc, #184]	; (8008c40 <__mdiff+0x10c>)
 8008b88:	4602      	mov	r2, r0
 8008b8a:	f240 2145 	movw	r1, #581	; 0x245
 8008b8e:	e7e5      	b.n	8008b5c <__mdiff+0x28>
 8008b90:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008b94:	6926      	ldr	r6, [r4, #16]
 8008b96:	60c5      	str	r5, [r0, #12]
 8008b98:	f104 0914 	add.w	r9, r4, #20
 8008b9c:	f108 0514 	add.w	r5, r8, #20
 8008ba0:	f100 0e14 	add.w	lr, r0, #20
 8008ba4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008ba8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008bac:	f108 0210 	add.w	r2, r8, #16
 8008bb0:	46f2      	mov	sl, lr
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	f859 3b04 	ldr.w	r3, [r9], #4
 8008bb8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008bbc:	fa11 f88b 	uxtah	r8, r1, fp
 8008bc0:	b299      	uxth	r1, r3
 8008bc2:	0c1b      	lsrs	r3, r3, #16
 8008bc4:	eba8 0801 	sub.w	r8, r8, r1
 8008bc8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008bcc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008bd0:	fa1f f888 	uxth.w	r8, r8
 8008bd4:	1419      	asrs	r1, r3, #16
 8008bd6:	454e      	cmp	r6, r9
 8008bd8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008bdc:	f84a 3b04 	str.w	r3, [sl], #4
 8008be0:	d8e8      	bhi.n	8008bb4 <__mdiff+0x80>
 8008be2:	1b33      	subs	r3, r6, r4
 8008be4:	3b15      	subs	r3, #21
 8008be6:	f023 0303 	bic.w	r3, r3, #3
 8008bea:	3304      	adds	r3, #4
 8008bec:	3415      	adds	r4, #21
 8008bee:	42a6      	cmp	r6, r4
 8008bf0:	bf38      	it	cc
 8008bf2:	2304      	movcc	r3, #4
 8008bf4:	441d      	add	r5, r3
 8008bf6:	4473      	add	r3, lr
 8008bf8:	469e      	mov	lr, r3
 8008bfa:	462e      	mov	r6, r5
 8008bfc:	4566      	cmp	r6, ip
 8008bfe:	d30e      	bcc.n	8008c1e <__mdiff+0xea>
 8008c00:	f10c 0203 	add.w	r2, ip, #3
 8008c04:	1b52      	subs	r2, r2, r5
 8008c06:	f022 0203 	bic.w	r2, r2, #3
 8008c0a:	3d03      	subs	r5, #3
 8008c0c:	45ac      	cmp	ip, r5
 8008c0e:	bf38      	it	cc
 8008c10:	2200      	movcc	r2, #0
 8008c12:	4413      	add	r3, r2
 8008c14:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008c18:	b17a      	cbz	r2, 8008c3a <__mdiff+0x106>
 8008c1a:	6107      	str	r7, [r0, #16]
 8008c1c:	e7a4      	b.n	8008b68 <__mdiff+0x34>
 8008c1e:	f856 8b04 	ldr.w	r8, [r6], #4
 8008c22:	fa11 f288 	uxtah	r2, r1, r8
 8008c26:	1414      	asrs	r4, r2, #16
 8008c28:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008c2c:	b292      	uxth	r2, r2
 8008c2e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008c32:	f84e 2b04 	str.w	r2, [lr], #4
 8008c36:	1421      	asrs	r1, r4, #16
 8008c38:	e7e0      	b.n	8008bfc <__mdiff+0xc8>
 8008c3a:	3f01      	subs	r7, #1
 8008c3c:	e7ea      	b.n	8008c14 <__mdiff+0xe0>
 8008c3e:	bf00      	nop
 8008c40:	0800a3a0 	.word	0x0800a3a0
 8008c44:	0800a3b1 	.word	0x0800a3b1

08008c48 <__d2b>:
 8008c48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c4c:	460f      	mov	r7, r1
 8008c4e:	2101      	movs	r1, #1
 8008c50:	ec59 8b10 	vmov	r8, r9, d0
 8008c54:	4616      	mov	r6, r2
 8008c56:	f7ff fcd5 	bl	8008604 <_Balloc>
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	b930      	cbnz	r0, 8008c6c <__d2b+0x24>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	4b24      	ldr	r3, [pc, #144]	; (8008cf4 <__d2b+0xac>)
 8008c62:	4825      	ldr	r0, [pc, #148]	; (8008cf8 <__d2b+0xb0>)
 8008c64:	f240 310f 	movw	r1, #783	; 0x30f
 8008c68:	f000 fa78 	bl	800915c <__assert_func>
 8008c6c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008c70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c74:	bb2d      	cbnz	r5, 8008cc2 <__d2b+0x7a>
 8008c76:	9301      	str	r3, [sp, #4]
 8008c78:	f1b8 0300 	subs.w	r3, r8, #0
 8008c7c:	d026      	beq.n	8008ccc <__d2b+0x84>
 8008c7e:	4668      	mov	r0, sp
 8008c80:	9300      	str	r3, [sp, #0]
 8008c82:	f7ff fd87 	bl	8008794 <__lo0bits>
 8008c86:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008c8a:	b1e8      	cbz	r0, 8008cc8 <__d2b+0x80>
 8008c8c:	f1c0 0320 	rsb	r3, r0, #32
 8008c90:	fa02 f303 	lsl.w	r3, r2, r3
 8008c94:	430b      	orrs	r3, r1
 8008c96:	40c2      	lsrs	r2, r0
 8008c98:	6163      	str	r3, [r4, #20]
 8008c9a:	9201      	str	r2, [sp, #4]
 8008c9c:	9b01      	ldr	r3, [sp, #4]
 8008c9e:	61a3      	str	r3, [r4, #24]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	bf14      	ite	ne
 8008ca4:	2202      	movne	r2, #2
 8008ca6:	2201      	moveq	r2, #1
 8008ca8:	6122      	str	r2, [r4, #16]
 8008caa:	b1bd      	cbz	r5, 8008cdc <__d2b+0x94>
 8008cac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008cb0:	4405      	add	r5, r0
 8008cb2:	603d      	str	r5, [r7, #0]
 8008cb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008cb8:	6030      	str	r0, [r6, #0]
 8008cba:	4620      	mov	r0, r4
 8008cbc:	b003      	add	sp, #12
 8008cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cc6:	e7d6      	b.n	8008c76 <__d2b+0x2e>
 8008cc8:	6161      	str	r1, [r4, #20]
 8008cca:	e7e7      	b.n	8008c9c <__d2b+0x54>
 8008ccc:	a801      	add	r0, sp, #4
 8008cce:	f7ff fd61 	bl	8008794 <__lo0bits>
 8008cd2:	9b01      	ldr	r3, [sp, #4]
 8008cd4:	6163      	str	r3, [r4, #20]
 8008cd6:	3020      	adds	r0, #32
 8008cd8:	2201      	movs	r2, #1
 8008cda:	e7e5      	b.n	8008ca8 <__d2b+0x60>
 8008cdc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ce0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008ce4:	6038      	str	r0, [r7, #0]
 8008ce6:	6918      	ldr	r0, [r3, #16]
 8008ce8:	f7ff fd34 	bl	8008754 <__hi0bits>
 8008cec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008cf0:	e7e2      	b.n	8008cb8 <__d2b+0x70>
 8008cf2:	bf00      	nop
 8008cf4:	0800a3a0 	.word	0x0800a3a0
 8008cf8:	0800a3b1 	.word	0x0800a3b1

08008cfc <__ssputs_r>:
 8008cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d00:	688e      	ldr	r6, [r1, #8]
 8008d02:	461f      	mov	r7, r3
 8008d04:	42be      	cmp	r6, r7
 8008d06:	680b      	ldr	r3, [r1, #0]
 8008d08:	4682      	mov	sl, r0
 8008d0a:	460c      	mov	r4, r1
 8008d0c:	4690      	mov	r8, r2
 8008d0e:	d82c      	bhi.n	8008d6a <__ssputs_r+0x6e>
 8008d10:	898a      	ldrh	r2, [r1, #12]
 8008d12:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d16:	d026      	beq.n	8008d66 <__ssputs_r+0x6a>
 8008d18:	6965      	ldr	r5, [r4, #20]
 8008d1a:	6909      	ldr	r1, [r1, #16]
 8008d1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d20:	eba3 0901 	sub.w	r9, r3, r1
 8008d24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d28:	1c7b      	adds	r3, r7, #1
 8008d2a:	444b      	add	r3, r9
 8008d2c:	106d      	asrs	r5, r5, #1
 8008d2e:	429d      	cmp	r5, r3
 8008d30:	bf38      	it	cc
 8008d32:	461d      	movcc	r5, r3
 8008d34:	0553      	lsls	r3, r2, #21
 8008d36:	d527      	bpl.n	8008d88 <__ssputs_r+0x8c>
 8008d38:	4629      	mov	r1, r5
 8008d3a:	f7ff fbd7 	bl	80084ec <_malloc_r>
 8008d3e:	4606      	mov	r6, r0
 8008d40:	b360      	cbz	r0, 8008d9c <__ssputs_r+0xa0>
 8008d42:	6921      	ldr	r1, [r4, #16]
 8008d44:	464a      	mov	r2, r9
 8008d46:	f7fe fcd3 	bl	80076f0 <memcpy>
 8008d4a:	89a3      	ldrh	r3, [r4, #12]
 8008d4c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d54:	81a3      	strh	r3, [r4, #12]
 8008d56:	6126      	str	r6, [r4, #16]
 8008d58:	6165      	str	r5, [r4, #20]
 8008d5a:	444e      	add	r6, r9
 8008d5c:	eba5 0509 	sub.w	r5, r5, r9
 8008d60:	6026      	str	r6, [r4, #0]
 8008d62:	60a5      	str	r5, [r4, #8]
 8008d64:	463e      	mov	r6, r7
 8008d66:	42be      	cmp	r6, r7
 8008d68:	d900      	bls.n	8008d6c <__ssputs_r+0x70>
 8008d6a:	463e      	mov	r6, r7
 8008d6c:	6820      	ldr	r0, [r4, #0]
 8008d6e:	4632      	mov	r2, r6
 8008d70:	4641      	mov	r1, r8
 8008d72:	f000 f9c9 	bl	8009108 <memmove>
 8008d76:	68a3      	ldr	r3, [r4, #8]
 8008d78:	1b9b      	subs	r3, r3, r6
 8008d7a:	60a3      	str	r3, [r4, #8]
 8008d7c:	6823      	ldr	r3, [r4, #0]
 8008d7e:	4433      	add	r3, r6
 8008d80:	6023      	str	r3, [r4, #0]
 8008d82:	2000      	movs	r0, #0
 8008d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d88:	462a      	mov	r2, r5
 8008d8a:	f000 fa2d 	bl	80091e8 <_realloc_r>
 8008d8e:	4606      	mov	r6, r0
 8008d90:	2800      	cmp	r0, #0
 8008d92:	d1e0      	bne.n	8008d56 <__ssputs_r+0x5a>
 8008d94:	6921      	ldr	r1, [r4, #16]
 8008d96:	4650      	mov	r0, sl
 8008d98:	f7ff fb34 	bl	8008404 <_free_r>
 8008d9c:	230c      	movs	r3, #12
 8008d9e:	f8ca 3000 	str.w	r3, [sl]
 8008da2:	89a3      	ldrh	r3, [r4, #12]
 8008da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008da8:	81a3      	strh	r3, [r4, #12]
 8008daa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dae:	e7e9      	b.n	8008d84 <__ssputs_r+0x88>

08008db0 <_svfiprintf_r>:
 8008db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db4:	4698      	mov	r8, r3
 8008db6:	898b      	ldrh	r3, [r1, #12]
 8008db8:	061b      	lsls	r3, r3, #24
 8008dba:	b09d      	sub	sp, #116	; 0x74
 8008dbc:	4607      	mov	r7, r0
 8008dbe:	460d      	mov	r5, r1
 8008dc0:	4614      	mov	r4, r2
 8008dc2:	d50e      	bpl.n	8008de2 <_svfiprintf_r+0x32>
 8008dc4:	690b      	ldr	r3, [r1, #16]
 8008dc6:	b963      	cbnz	r3, 8008de2 <_svfiprintf_r+0x32>
 8008dc8:	2140      	movs	r1, #64	; 0x40
 8008dca:	f7ff fb8f 	bl	80084ec <_malloc_r>
 8008dce:	6028      	str	r0, [r5, #0]
 8008dd0:	6128      	str	r0, [r5, #16]
 8008dd2:	b920      	cbnz	r0, 8008dde <_svfiprintf_r+0x2e>
 8008dd4:	230c      	movs	r3, #12
 8008dd6:	603b      	str	r3, [r7, #0]
 8008dd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ddc:	e0d0      	b.n	8008f80 <_svfiprintf_r+0x1d0>
 8008dde:	2340      	movs	r3, #64	; 0x40
 8008de0:	616b      	str	r3, [r5, #20]
 8008de2:	2300      	movs	r3, #0
 8008de4:	9309      	str	r3, [sp, #36]	; 0x24
 8008de6:	2320      	movs	r3, #32
 8008de8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008dec:	f8cd 800c 	str.w	r8, [sp, #12]
 8008df0:	2330      	movs	r3, #48	; 0x30
 8008df2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008f98 <_svfiprintf_r+0x1e8>
 8008df6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008dfa:	f04f 0901 	mov.w	r9, #1
 8008dfe:	4623      	mov	r3, r4
 8008e00:	469a      	mov	sl, r3
 8008e02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e06:	b10a      	cbz	r2, 8008e0c <_svfiprintf_r+0x5c>
 8008e08:	2a25      	cmp	r2, #37	; 0x25
 8008e0a:	d1f9      	bne.n	8008e00 <_svfiprintf_r+0x50>
 8008e0c:	ebba 0b04 	subs.w	fp, sl, r4
 8008e10:	d00b      	beq.n	8008e2a <_svfiprintf_r+0x7a>
 8008e12:	465b      	mov	r3, fp
 8008e14:	4622      	mov	r2, r4
 8008e16:	4629      	mov	r1, r5
 8008e18:	4638      	mov	r0, r7
 8008e1a:	f7ff ff6f 	bl	8008cfc <__ssputs_r>
 8008e1e:	3001      	adds	r0, #1
 8008e20:	f000 80a9 	beq.w	8008f76 <_svfiprintf_r+0x1c6>
 8008e24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e26:	445a      	add	r2, fp
 8008e28:	9209      	str	r2, [sp, #36]	; 0x24
 8008e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f000 80a1 	beq.w	8008f76 <_svfiprintf_r+0x1c6>
 8008e34:	2300      	movs	r3, #0
 8008e36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e3e:	f10a 0a01 	add.w	sl, sl, #1
 8008e42:	9304      	str	r3, [sp, #16]
 8008e44:	9307      	str	r3, [sp, #28]
 8008e46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e4a:	931a      	str	r3, [sp, #104]	; 0x68
 8008e4c:	4654      	mov	r4, sl
 8008e4e:	2205      	movs	r2, #5
 8008e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e54:	4850      	ldr	r0, [pc, #320]	; (8008f98 <_svfiprintf_r+0x1e8>)
 8008e56:	f7f7 f9bb 	bl	80001d0 <memchr>
 8008e5a:	9a04      	ldr	r2, [sp, #16]
 8008e5c:	b9d8      	cbnz	r0, 8008e96 <_svfiprintf_r+0xe6>
 8008e5e:	06d0      	lsls	r0, r2, #27
 8008e60:	bf44      	itt	mi
 8008e62:	2320      	movmi	r3, #32
 8008e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e68:	0711      	lsls	r1, r2, #28
 8008e6a:	bf44      	itt	mi
 8008e6c:	232b      	movmi	r3, #43	; 0x2b
 8008e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e72:	f89a 3000 	ldrb.w	r3, [sl]
 8008e76:	2b2a      	cmp	r3, #42	; 0x2a
 8008e78:	d015      	beq.n	8008ea6 <_svfiprintf_r+0xf6>
 8008e7a:	9a07      	ldr	r2, [sp, #28]
 8008e7c:	4654      	mov	r4, sl
 8008e7e:	2000      	movs	r0, #0
 8008e80:	f04f 0c0a 	mov.w	ip, #10
 8008e84:	4621      	mov	r1, r4
 8008e86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e8a:	3b30      	subs	r3, #48	; 0x30
 8008e8c:	2b09      	cmp	r3, #9
 8008e8e:	d94d      	bls.n	8008f2c <_svfiprintf_r+0x17c>
 8008e90:	b1b0      	cbz	r0, 8008ec0 <_svfiprintf_r+0x110>
 8008e92:	9207      	str	r2, [sp, #28]
 8008e94:	e014      	b.n	8008ec0 <_svfiprintf_r+0x110>
 8008e96:	eba0 0308 	sub.w	r3, r0, r8
 8008e9a:	fa09 f303 	lsl.w	r3, r9, r3
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	9304      	str	r3, [sp, #16]
 8008ea2:	46a2      	mov	sl, r4
 8008ea4:	e7d2      	b.n	8008e4c <_svfiprintf_r+0x9c>
 8008ea6:	9b03      	ldr	r3, [sp, #12]
 8008ea8:	1d19      	adds	r1, r3, #4
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	9103      	str	r1, [sp, #12]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	bfbb      	ittet	lt
 8008eb2:	425b      	neglt	r3, r3
 8008eb4:	f042 0202 	orrlt.w	r2, r2, #2
 8008eb8:	9307      	strge	r3, [sp, #28]
 8008eba:	9307      	strlt	r3, [sp, #28]
 8008ebc:	bfb8      	it	lt
 8008ebe:	9204      	strlt	r2, [sp, #16]
 8008ec0:	7823      	ldrb	r3, [r4, #0]
 8008ec2:	2b2e      	cmp	r3, #46	; 0x2e
 8008ec4:	d10c      	bne.n	8008ee0 <_svfiprintf_r+0x130>
 8008ec6:	7863      	ldrb	r3, [r4, #1]
 8008ec8:	2b2a      	cmp	r3, #42	; 0x2a
 8008eca:	d134      	bne.n	8008f36 <_svfiprintf_r+0x186>
 8008ecc:	9b03      	ldr	r3, [sp, #12]
 8008ece:	1d1a      	adds	r2, r3, #4
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	9203      	str	r2, [sp, #12]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	bfb8      	it	lt
 8008ed8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008edc:	3402      	adds	r4, #2
 8008ede:	9305      	str	r3, [sp, #20]
 8008ee0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008fa8 <_svfiprintf_r+0x1f8>
 8008ee4:	7821      	ldrb	r1, [r4, #0]
 8008ee6:	2203      	movs	r2, #3
 8008ee8:	4650      	mov	r0, sl
 8008eea:	f7f7 f971 	bl	80001d0 <memchr>
 8008eee:	b138      	cbz	r0, 8008f00 <_svfiprintf_r+0x150>
 8008ef0:	9b04      	ldr	r3, [sp, #16]
 8008ef2:	eba0 000a 	sub.w	r0, r0, sl
 8008ef6:	2240      	movs	r2, #64	; 0x40
 8008ef8:	4082      	lsls	r2, r0
 8008efa:	4313      	orrs	r3, r2
 8008efc:	3401      	adds	r4, #1
 8008efe:	9304      	str	r3, [sp, #16]
 8008f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f04:	4825      	ldr	r0, [pc, #148]	; (8008f9c <_svfiprintf_r+0x1ec>)
 8008f06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f0a:	2206      	movs	r2, #6
 8008f0c:	f7f7 f960 	bl	80001d0 <memchr>
 8008f10:	2800      	cmp	r0, #0
 8008f12:	d038      	beq.n	8008f86 <_svfiprintf_r+0x1d6>
 8008f14:	4b22      	ldr	r3, [pc, #136]	; (8008fa0 <_svfiprintf_r+0x1f0>)
 8008f16:	bb1b      	cbnz	r3, 8008f60 <_svfiprintf_r+0x1b0>
 8008f18:	9b03      	ldr	r3, [sp, #12]
 8008f1a:	3307      	adds	r3, #7
 8008f1c:	f023 0307 	bic.w	r3, r3, #7
 8008f20:	3308      	adds	r3, #8
 8008f22:	9303      	str	r3, [sp, #12]
 8008f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f26:	4433      	add	r3, r6
 8008f28:	9309      	str	r3, [sp, #36]	; 0x24
 8008f2a:	e768      	b.n	8008dfe <_svfiprintf_r+0x4e>
 8008f2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f30:	460c      	mov	r4, r1
 8008f32:	2001      	movs	r0, #1
 8008f34:	e7a6      	b.n	8008e84 <_svfiprintf_r+0xd4>
 8008f36:	2300      	movs	r3, #0
 8008f38:	3401      	adds	r4, #1
 8008f3a:	9305      	str	r3, [sp, #20]
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	f04f 0c0a 	mov.w	ip, #10
 8008f42:	4620      	mov	r0, r4
 8008f44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f48:	3a30      	subs	r2, #48	; 0x30
 8008f4a:	2a09      	cmp	r2, #9
 8008f4c:	d903      	bls.n	8008f56 <_svfiprintf_r+0x1a6>
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d0c6      	beq.n	8008ee0 <_svfiprintf_r+0x130>
 8008f52:	9105      	str	r1, [sp, #20]
 8008f54:	e7c4      	b.n	8008ee0 <_svfiprintf_r+0x130>
 8008f56:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f5a:	4604      	mov	r4, r0
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e7f0      	b.n	8008f42 <_svfiprintf_r+0x192>
 8008f60:	ab03      	add	r3, sp, #12
 8008f62:	9300      	str	r3, [sp, #0]
 8008f64:	462a      	mov	r2, r5
 8008f66:	4b0f      	ldr	r3, [pc, #60]	; (8008fa4 <_svfiprintf_r+0x1f4>)
 8008f68:	a904      	add	r1, sp, #16
 8008f6a:	4638      	mov	r0, r7
 8008f6c:	f7fd fe68 	bl	8006c40 <_printf_float>
 8008f70:	1c42      	adds	r2, r0, #1
 8008f72:	4606      	mov	r6, r0
 8008f74:	d1d6      	bne.n	8008f24 <_svfiprintf_r+0x174>
 8008f76:	89ab      	ldrh	r3, [r5, #12]
 8008f78:	065b      	lsls	r3, r3, #25
 8008f7a:	f53f af2d 	bmi.w	8008dd8 <_svfiprintf_r+0x28>
 8008f7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f80:	b01d      	add	sp, #116	; 0x74
 8008f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f86:	ab03      	add	r3, sp, #12
 8008f88:	9300      	str	r3, [sp, #0]
 8008f8a:	462a      	mov	r2, r5
 8008f8c:	4b05      	ldr	r3, [pc, #20]	; (8008fa4 <_svfiprintf_r+0x1f4>)
 8008f8e:	a904      	add	r1, sp, #16
 8008f90:	4638      	mov	r0, r7
 8008f92:	f7fe f8f9 	bl	8007188 <_printf_i>
 8008f96:	e7eb      	b.n	8008f70 <_svfiprintf_r+0x1c0>
 8008f98:	0800a50c 	.word	0x0800a50c
 8008f9c:	0800a516 	.word	0x0800a516
 8008fa0:	08006c41 	.word	0x08006c41
 8008fa4:	08008cfd 	.word	0x08008cfd
 8008fa8:	0800a512 	.word	0x0800a512

08008fac <__sflush_r>:
 8008fac:	898a      	ldrh	r2, [r1, #12]
 8008fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb2:	4605      	mov	r5, r0
 8008fb4:	0710      	lsls	r0, r2, #28
 8008fb6:	460c      	mov	r4, r1
 8008fb8:	d458      	bmi.n	800906c <__sflush_r+0xc0>
 8008fba:	684b      	ldr	r3, [r1, #4]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	dc05      	bgt.n	8008fcc <__sflush_r+0x20>
 8008fc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	dc02      	bgt.n	8008fcc <__sflush_r+0x20>
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fce:	2e00      	cmp	r6, #0
 8008fd0:	d0f9      	beq.n	8008fc6 <__sflush_r+0x1a>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008fd8:	682f      	ldr	r7, [r5, #0]
 8008fda:	6a21      	ldr	r1, [r4, #32]
 8008fdc:	602b      	str	r3, [r5, #0]
 8008fde:	d032      	beq.n	8009046 <__sflush_r+0x9a>
 8008fe0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008fe2:	89a3      	ldrh	r3, [r4, #12]
 8008fe4:	075a      	lsls	r2, r3, #29
 8008fe6:	d505      	bpl.n	8008ff4 <__sflush_r+0x48>
 8008fe8:	6863      	ldr	r3, [r4, #4]
 8008fea:	1ac0      	subs	r0, r0, r3
 8008fec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008fee:	b10b      	cbz	r3, 8008ff4 <__sflush_r+0x48>
 8008ff0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ff2:	1ac0      	subs	r0, r0, r3
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ffa:	6a21      	ldr	r1, [r4, #32]
 8008ffc:	4628      	mov	r0, r5
 8008ffe:	47b0      	blx	r6
 8009000:	1c43      	adds	r3, r0, #1
 8009002:	89a3      	ldrh	r3, [r4, #12]
 8009004:	d106      	bne.n	8009014 <__sflush_r+0x68>
 8009006:	6829      	ldr	r1, [r5, #0]
 8009008:	291d      	cmp	r1, #29
 800900a:	d82b      	bhi.n	8009064 <__sflush_r+0xb8>
 800900c:	4a29      	ldr	r2, [pc, #164]	; (80090b4 <__sflush_r+0x108>)
 800900e:	410a      	asrs	r2, r1
 8009010:	07d6      	lsls	r6, r2, #31
 8009012:	d427      	bmi.n	8009064 <__sflush_r+0xb8>
 8009014:	2200      	movs	r2, #0
 8009016:	6062      	str	r2, [r4, #4]
 8009018:	04d9      	lsls	r1, r3, #19
 800901a:	6922      	ldr	r2, [r4, #16]
 800901c:	6022      	str	r2, [r4, #0]
 800901e:	d504      	bpl.n	800902a <__sflush_r+0x7e>
 8009020:	1c42      	adds	r2, r0, #1
 8009022:	d101      	bne.n	8009028 <__sflush_r+0x7c>
 8009024:	682b      	ldr	r3, [r5, #0]
 8009026:	b903      	cbnz	r3, 800902a <__sflush_r+0x7e>
 8009028:	6560      	str	r0, [r4, #84]	; 0x54
 800902a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800902c:	602f      	str	r7, [r5, #0]
 800902e:	2900      	cmp	r1, #0
 8009030:	d0c9      	beq.n	8008fc6 <__sflush_r+0x1a>
 8009032:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009036:	4299      	cmp	r1, r3
 8009038:	d002      	beq.n	8009040 <__sflush_r+0x94>
 800903a:	4628      	mov	r0, r5
 800903c:	f7ff f9e2 	bl	8008404 <_free_r>
 8009040:	2000      	movs	r0, #0
 8009042:	6360      	str	r0, [r4, #52]	; 0x34
 8009044:	e7c0      	b.n	8008fc8 <__sflush_r+0x1c>
 8009046:	2301      	movs	r3, #1
 8009048:	4628      	mov	r0, r5
 800904a:	47b0      	blx	r6
 800904c:	1c41      	adds	r1, r0, #1
 800904e:	d1c8      	bne.n	8008fe2 <__sflush_r+0x36>
 8009050:	682b      	ldr	r3, [r5, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d0c5      	beq.n	8008fe2 <__sflush_r+0x36>
 8009056:	2b1d      	cmp	r3, #29
 8009058:	d001      	beq.n	800905e <__sflush_r+0xb2>
 800905a:	2b16      	cmp	r3, #22
 800905c:	d101      	bne.n	8009062 <__sflush_r+0xb6>
 800905e:	602f      	str	r7, [r5, #0]
 8009060:	e7b1      	b.n	8008fc6 <__sflush_r+0x1a>
 8009062:	89a3      	ldrh	r3, [r4, #12]
 8009064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009068:	81a3      	strh	r3, [r4, #12]
 800906a:	e7ad      	b.n	8008fc8 <__sflush_r+0x1c>
 800906c:	690f      	ldr	r7, [r1, #16]
 800906e:	2f00      	cmp	r7, #0
 8009070:	d0a9      	beq.n	8008fc6 <__sflush_r+0x1a>
 8009072:	0793      	lsls	r3, r2, #30
 8009074:	680e      	ldr	r6, [r1, #0]
 8009076:	bf08      	it	eq
 8009078:	694b      	ldreq	r3, [r1, #20]
 800907a:	600f      	str	r7, [r1, #0]
 800907c:	bf18      	it	ne
 800907e:	2300      	movne	r3, #0
 8009080:	eba6 0807 	sub.w	r8, r6, r7
 8009084:	608b      	str	r3, [r1, #8]
 8009086:	f1b8 0f00 	cmp.w	r8, #0
 800908a:	dd9c      	ble.n	8008fc6 <__sflush_r+0x1a>
 800908c:	6a21      	ldr	r1, [r4, #32]
 800908e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009090:	4643      	mov	r3, r8
 8009092:	463a      	mov	r2, r7
 8009094:	4628      	mov	r0, r5
 8009096:	47b0      	blx	r6
 8009098:	2800      	cmp	r0, #0
 800909a:	dc06      	bgt.n	80090aa <__sflush_r+0xfe>
 800909c:	89a3      	ldrh	r3, [r4, #12]
 800909e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090a2:	81a3      	strh	r3, [r4, #12]
 80090a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090a8:	e78e      	b.n	8008fc8 <__sflush_r+0x1c>
 80090aa:	4407      	add	r7, r0
 80090ac:	eba8 0800 	sub.w	r8, r8, r0
 80090b0:	e7e9      	b.n	8009086 <__sflush_r+0xda>
 80090b2:	bf00      	nop
 80090b4:	dfbffffe 	.word	0xdfbffffe

080090b8 <_fflush_r>:
 80090b8:	b538      	push	{r3, r4, r5, lr}
 80090ba:	690b      	ldr	r3, [r1, #16]
 80090bc:	4605      	mov	r5, r0
 80090be:	460c      	mov	r4, r1
 80090c0:	b913      	cbnz	r3, 80090c8 <_fflush_r+0x10>
 80090c2:	2500      	movs	r5, #0
 80090c4:	4628      	mov	r0, r5
 80090c6:	bd38      	pop	{r3, r4, r5, pc}
 80090c8:	b118      	cbz	r0, 80090d2 <_fflush_r+0x1a>
 80090ca:	6a03      	ldr	r3, [r0, #32]
 80090cc:	b90b      	cbnz	r3, 80090d2 <_fflush_r+0x1a>
 80090ce:	f7fe f9f7 	bl	80074c0 <__sinit>
 80090d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d0f3      	beq.n	80090c2 <_fflush_r+0xa>
 80090da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090dc:	07d0      	lsls	r0, r2, #31
 80090de:	d404      	bmi.n	80090ea <_fflush_r+0x32>
 80090e0:	0599      	lsls	r1, r3, #22
 80090e2:	d402      	bmi.n	80090ea <_fflush_r+0x32>
 80090e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090e6:	f7fe fb01 	bl	80076ec <__retarget_lock_acquire_recursive>
 80090ea:	4628      	mov	r0, r5
 80090ec:	4621      	mov	r1, r4
 80090ee:	f7ff ff5d 	bl	8008fac <__sflush_r>
 80090f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090f4:	07da      	lsls	r2, r3, #31
 80090f6:	4605      	mov	r5, r0
 80090f8:	d4e4      	bmi.n	80090c4 <_fflush_r+0xc>
 80090fa:	89a3      	ldrh	r3, [r4, #12]
 80090fc:	059b      	lsls	r3, r3, #22
 80090fe:	d4e1      	bmi.n	80090c4 <_fflush_r+0xc>
 8009100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009102:	f7fe faf4 	bl	80076ee <__retarget_lock_release_recursive>
 8009106:	e7dd      	b.n	80090c4 <_fflush_r+0xc>

08009108 <memmove>:
 8009108:	4288      	cmp	r0, r1
 800910a:	b510      	push	{r4, lr}
 800910c:	eb01 0402 	add.w	r4, r1, r2
 8009110:	d902      	bls.n	8009118 <memmove+0x10>
 8009112:	4284      	cmp	r4, r0
 8009114:	4623      	mov	r3, r4
 8009116:	d807      	bhi.n	8009128 <memmove+0x20>
 8009118:	1e43      	subs	r3, r0, #1
 800911a:	42a1      	cmp	r1, r4
 800911c:	d008      	beq.n	8009130 <memmove+0x28>
 800911e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009122:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009126:	e7f8      	b.n	800911a <memmove+0x12>
 8009128:	4402      	add	r2, r0
 800912a:	4601      	mov	r1, r0
 800912c:	428a      	cmp	r2, r1
 800912e:	d100      	bne.n	8009132 <memmove+0x2a>
 8009130:	bd10      	pop	{r4, pc}
 8009132:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009136:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800913a:	e7f7      	b.n	800912c <memmove+0x24>

0800913c <_sbrk_r>:
 800913c:	b538      	push	{r3, r4, r5, lr}
 800913e:	4d06      	ldr	r5, [pc, #24]	; (8009158 <_sbrk_r+0x1c>)
 8009140:	2300      	movs	r3, #0
 8009142:	4604      	mov	r4, r0
 8009144:	4608      	mov	r0, r1
 8009146:	602b      	str	r3, [r5, #0]
 8009148:	f7f9 ff44 	bl	8002fd4 <_sbrk>
 800914c:	1c43      	adds	r3, r0, #1
 800914e:	d102      	bne.n	8009156 <_sbrk_r+0x1a>
 8009150:	682b      	ldr	r3, [r5, #0]
 8009152:	b103      	cbz	r3, 8009156 <_sbrk_r+0x1a>
 8009154:	6023      	str	r3, [r4, #0]
 8009156:	bd38      	pop	{r3, r4, r5, pc}
 8009158:	2000050c 	.word	0x2000050c

0800915c <__assert_func>:
 800915c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800915e:	4614      	mov	r4, r2
 8009160:	461a      	mov	r2, r3
 8009162:	4b09      	ldr	r3, [pc, #36]	; (8009188 <__assert_func+0x2c>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4605      	mov	r5, r0
 8009168:	68d8      	ldr	r0, [r3, #12]
 800916a:	b14c      	cbz	r4, 8009180 <__assert_func+0x24>
 800916c:	4b07      	ldr	r3, [pc, #28]	; (800918c <__assert_func+0x30>)
 800916e:	9100      	str	r1, [sp, #0]
 8009170:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009174:	4906      	ldr	r1, [pc, #24]	; (8009190 <__assert_func+0x34>)
 8009176:	462b      	mov	r3, r5
 8009178:	f000 f872 	bl	8009260 <fiprintf>
 800917c:	f000 f882 	bl	8009284 <abort>
 8009180:	4b04      	ldr	r3, [pc, #16]	; (8009194 <__assert_func+0x38>)
 8009182:	461c      	mov	r4, r3
 8009184:	e7f3      	b.n	800916e <__assert_func+0x12>
 8009186:	bf00      	nop
 8009188:	2000006c 	.word	0x2000006c
 800918c:	0800a527 	.word	0x0800a527
 8009190:	0800a534 	.word	0x0800a534
 8009194:	0800a562 	.word	0x0800a562

08009198 <_calloc_r>:
 8009198:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800919a:	fba1 2402 	umull	r2, r4, r1, r2
 800919e:	b94c      	cbnz	r4, 80091b4 <_calloc_r+0x1c>
 80091a0:	4611      	mov	r1, r2
 80091a2:	9201      	str	r2, [sp, #4]
 80091a4:	f7ff f9a2 	bl	80084ec <_malloc_r>
 80091a8:	9a01      	ldr	r2, [sp, #4]
 80091aa:	4605      	mov	r5, r0
 80091ac:	b930      	cbnz	r0, 80091bc <_calloc_r+0x24>
 80091ae:	4628      	mov	r0, r5
 80091b0:	b003      	add	sp, #12
 80091b2:	bd30      	pop	{r4, r5, pc}
 80091b4:	220c      	movs	r2, #12
 80091b6:	6002      	str	r2, [r0, #0]
 80091b8:	2500      	movs	r5, #0
 80091ba:	e7f8      	b.n	80091ae <_calloc_r+0x16>
 80091bc:	4621      	mov	r1, r4
 80091be:	f7fe fa18 	bl	80075f2 <memset>
 80091c2:	e7f4      	b.n	80091ae <_calloc_r+0x16>

080091c4 <__ascii_mbtowc>:
 80091c4:	b082      	sub	sp, #8
 80091c6:	b901      	cbnz	r1, 80091ca <__ascii_mbtowc+0x6>
 80091c8:	a901      	add	r1, sp, #4
 80091ca:	b142      	cbz	r2, 80091de <__ascii_mbtowc+0x1a>
 80091cc:	b14b      	cbz	r3, 80091e2 <__ascii_mbtowc+0x1e>
 80091ce:	7813      	ldrb	r3, [r2, #0]
 80091d0:	600b      	str	r3, [r1, #0]
 80091d2:	7812      	ldrb	r2, [r2, #0]
 80091d4:	1e10      	subs	r0, r2, #0
 80091d6:	bf18      	it	ne
 80091d8:	2001      	movne	r0, #1
 80091da:	b002      	add	sp, #8
 80091dc:	4770      	bx	lr
 80091de:	4610      	mov	r0, r2
 80091e0:	e7fb      	b.n	80091da <__ascii_mbtowc+0x16>
 80091e2:	f06f 0001 	mvn.w	r0, #1
 80091e6:	e7f8      	b.n	80091da <__ascii_mbtowc+0x16>

080091e8 <_realloc_r>:
 80091e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091ec:	4680      	mov	r8, r0
 80091ee:	4614      	mov	r4, r2
 80091f0:	460e      	mov	r6, r1
 80091f2:	b921      	cbnz	r1, 80091fe <_realloc_r+0x16>
 80091f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091f8:	4611      	mov	r1, r2
 80091fa:	f7ff b977 	b.w	80084ec <_malloc_r>
 80091fe:	b92a      	cbnz	r2, 800920c <_realloc_r+0x24>
 8009200:	f7ff f900 	bl	8008404 <_free_r>
 8009204:	4625      	mov	r5, r4
 8009206:	4628      	mov	r0, r5
 8009208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800920c:	f000 f841 	bl	8009292 <_malloc_usable_size_r>
 8009210:	4284      	cmp	r4, r0
 8009212:	4607      	mov	r7, r0
 8009214:	d802      	bhi.n	800921c <_realloc_r+0x34>
 8009216:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800921a:	d812      	bhi.n	8009242 <_realloc_r+0x5a>
 800921c:	4621      	mov	r1, r4
 800921e:	4640      	mov	r0, r8
 8009220:	f7ff f964 	bl	80084ec <_malloc_r>
 8009224:	4605      	mov	r5, r0
 8009226:	2800      	cmp	r0, #0
 8009228:	d0ed      	beq.n	8009206 <_realloc_r+0x1e>
 800922a:	42bc      	cmp	r4, r7
 800922c:	4622      	mov	r2, r4
 800922e:	4631      	mov	r1, r6
 8009230:	bf28      	it	cs
 8009232:	463a      	movcs	r2, r7
 8009234:	f7fe fa5c 	bl	80076f0 <memcpy>
 8009238:	4631      	mov	r1, r6
 800923a:	4640      	mov	r0, r8
 800923c:	f7ff f8e2 	bl	8008404 <_free_r>
 8009240:	e7e1      	b.n	8009206 <_realloc_r+0x1e>
 8009242:	4635      	mov	r5, r6
 8009244:	e7df      	b.n	8009206 <_realloc_r+0x1e>

08009246 <__ascii_wctomb>:
 8009246:	b149      	cbz	r1, 800925c <__ascii_wctomb+0x16>
 8009248:	2aff      	cmp	r2, #255	; 0xff
 800924a:	bf85      	ittet	hi
 800924c:	238a      	movhi	r3, #138	; 0x8a
 800924e:	6003      	strhi	r3, [r0, #0]
 8009250:	700a      	strbls	r2, [r1, #0]
 8009252:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009256:	bf98      	it	ls
 8009258:	2001      	movls	r0, #1
 800925a:	4770      	bx	lr
 800925c:	4608      	mov	r0, r1
 800925e:	4770      	bx	lr

08009260 <fiprintf>:
 8009260:	b40e      	push	{r1, r2, r3}
 8009262:	b503      	push	{r0, r1, lr}
 8009264:	4601      	mov	r1, r0
 8009266:	ab03      	add	r3, sp, #12
 8009268:	4805      	ldr	r0, [pc, #20]	; (8009280 <fiprintf+0x20>)
 800926a:	f853 2b04 	ldr.w	r2, [r3], #4
 800926e:	6800      	ldr	r0, [r0, #0]
 8009270:	9301      	str	r3, [sp, #4]
 8009272:	f000 f83f 	bl	80092f4 <_vfiprintf_r>
 8009276:	b002      	add	sp, #8
 8009278:	f85d eb04 	ldr.w	lr, [sp], #4
 800927c:	b003      	add	sp, #12
 800927e:	4770      	bx	lr
 8009280:	2000006c 	.word	0x2000006c

08009284 <abort>:
 8009284:	b508      	push	{r3, lr}
 8009286:	2006      	movs	r0, #6
 8009288:	f000 fa0c 	bl	80096a4 <raise>
 800928c:	2001      	movs	r0, #1
 800928e:	f7f9 fe29 	bl	8002ee4 <_exit>

08009292 <_malloc_usable_size_r>:
 8009292:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009296:	1f18      	subs	r0, r3, #4
 8009298:	2b00      	cmp	r3, #0
 800929a:	bfbc      	itt	lt
 800929c:	580b      	ldrlt	r3, [r1, r0]
 800929e:	18c0      	addlt	r0, r0, r3
 80092a0:	4770      	bx	lr

080092a2 <__sfputc_r>:
 80092a2:	6893      	ldr	r3, [r2, #8]
 80092a4:	3b01      	subs	r3, #1
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	b410      	push	{r4}
 80092aa:	6093      	str	r3, [r2, #8]
 80092ac:	da08      	bge.n	80092c0 <__sfputc_r+0x1e>
 80092ae:	6994      	ldr	r4, [r2, #24]
 80092b0:	42a3      	cmp	r3, r4
 80092b2:	db01      	blt.n	80092b8 <__sfputc_r+0x16>
 80092b4:	290a      	cmp	r1, #10
 80092b6:	d103      	bne.n	80092c0 <__sfputc_r+0x1e>
 80092b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092bc:	f000 b934 	b.w	8009528 <__swbuf_r>
 80092c0:	6813      	ldr	r3, [r2, #0]
 80092c2:	1c58      	adds	r0, r3, #1
 80092c4:	6010      	str	r0, [r2, #0]
 80092c6:	7019      	strb	r1, [r3, #0]
 80092c8:	4608      	mov	r0, r1
 80092ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <__sfputs_r>:
 80092d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092d2:	4606      	mov	r6, r0
 80092d4:	460f      	mov	r7, r1
 80092d6:	4614      	mov	r4, r2
 80092d8:	18d5      	adds	r5, r2, r3
 80092da:	42ac      	cmp	r4, r5
 80092dc:	d101      	bne.n	80092e2 <__sfputs_r+0x12>
 80092de:	2000      	movs	r0, #0
 80092e0:	e007      	b.n	80092f2 <__sfputs_r+0x22>
 80092e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092e6:	463a      	mov	r2, r7
 80092e8:	4630      	mov	r0, r6
 80092ea:	f7ff ffda 	bl	80092a2 <__sfputc_r>
 80092ee:	1c43      	adds	r3, r0, #1
 80092f0:	d1f3      	bne.n	80092da <__sfputs_r+0xa>
 80092f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080092f4 <_vfiprintf_r>:
 80092f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f8:	460d      	mov	r5, r1
 80092fa:	b09d      	sub	sp, #116	; 0x74
 80092fc:	4614      	mov	r4, r2
 80092fe:	4698      	mov	r8, r3
 8009300:	4606      	mov	r6, r0
 8009302:	b118      	cbz	r0, 800930c <_vfiprintf_r+0x18>
 8009304:	6a03      	ldr	r3, [r0, #32]
 8009306:	b90b      	cbnz	r3, 800930c <_vfiprintf_r+0x18>
 8009308:	f7fe f8da 	bl	80074c0 <__sinit>
 800930c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800930e:	07d9      	lsls	r1, r3, #31
 8009310:	d405      	bmi.n	800931e <_vfiprintf_r+0x2a>
 8009312:	89ab      	ldrh	r3, [r5, #12]
 8009314:	059a      	lsls	r2, r3, #22
 8009316:	d402      	bmi.n	800931e <_vfiprintf_r+0x2a>
 8009318:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800931a:	f7fe f9e7 	bl	80076ec <__retarget_lock_acquire_recursive>
 800931e:	89ab      	ldrh	r3, [r5, #12]
 8009320:	071b      	lsls	r3, r3, #28
 8009322:	d501      	bpl.n	8009328 <_vfiprintf_r+0x34>
 8009324:	692b      	ldr	r3, [r5, #16]
 8009326:	b99b      	cbnz	r3, 8009350 <_vfiprintf_r+0x5c>
 8009328:	4629      	mov	r1, r5
 800932a:	4630      	mov	r0, r6
 800932c:	f000 f93a 	bl	80095a4 <__swsetup_r>
 8009330:	b170      	cbz	r0, 8009350 <_vfiprintf_r+0x5c>
 8009332:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009334:	07dc      	lsls	r4, r3, #31
 8009336:	d504      	bpl.n	8009342 <_vfiprintf_r+0x4e>
 8009338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800933c:	b01d      	add	sp, #116	; 0x74
 800933e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009342:	89ab      	ldrh	r3, [r5, #12]
 8009344:	0598      	lsls	r0, r3, #22
 8009346:	d4f7      	bmi.n	8009338 <_vfiprintf_r+0x44>
 8009348:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800934a:	f7fe f9d0 	bl	80076ee <__retarget_lock_release_recursive>
 800934e:	e7f3      	b.n	8009338 <_vfiprintf_r+0x44>
 8009350:	2300      	movs	r3, #0
 8009352:	9309      	str	r3, [sp, #36]	; 0x24
 8009354:	2320      	movs	r3, #32
 8009356:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800935a:	f8cd 800c 	str.w	r8, [sp, #12]
 800935e:	2330      	movs	r3, #48	; 0x30
 8009360:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009514 <_vfiprintf_r+0x220>
 8009364:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009368:	f04f 0901 	mov.w	r9, #1
 800936c:	4623      	mov	r3, r4
 800936e:	469a      	mov	sl, r3
 8009370:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009374:	b10a      	cbz	r2, 800937a <_vfiprintf_r+0x86>
 8009376:	2a25      	cmp	r2, #37	; 0x25
 8009378:	d1f9      	bne.n	800936e <_vfiprintf_r+0x7a>
 800937a:	ebba 0b04 	subs.w	fp, sl, r4
 800937e:	d00b      	beq.n	8009398 <_vfiprintf_r+0xa4>
 8009380:	465b      	mov	r3, fp
 8009382:	4622      	mov	r2, r4
 8009384:	4629      	mov	r1, r5
 8009386:	4630      	mov	r0, r6
 8009388:	f7ff ffa2 	bl	80092d0 <__sfputs_r>
 800938c:	3001      	adds	r0, #1
 800938e:	f000 80a9 	beq.w	80094e4 <_vfiprintf_r+0x1f0>
 8009392:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009394:	445a      	add	r2, fp
 8009396:	9209      	str	r2, [sp, #36]	; 0x24
 8009398:	f89a 3000 	ldrb.w	r3, [sl]
 800939c:	2b00      	cmp	r3, #0
 800939e:	f000 80a1 	beq.w	80094e4 <_vfiprintf_r+0x1f0>
 80093a2:	2300      	movs	r3, #0
 80093a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093ac:	f10a 0a01 	add.w	sl, sl, #1
 80093b0:	9304      	str	r3, [sp, #16]
 80093b2:	9307      	str	r3, [sp, #28]
 80093b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093b8:	931a      	str	r3, [sp, #104]	; 0x68
 80093ba:	4654      	mov	r4, sl
 80093bc:	2205      	movs	r2, #5
 80093be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093c2:	4854      	ldr	r0, [pc, #336]	; (8009514 <_vfiprintf_r+0x220>)
 80093c4:	f7f6 ff04 	bl	80001d0 <memchr>
 80093c8:	9a04      	ldr	r2, [sp, #16]
 80093ca:	b9d8      	cbnz	r0, 8009404 <_vfiprintf_r+0x110>
 80093cc:	06d1      	lsls	r1, r2, #27
 80093ce:	bf44      	itt	mi
 80093d0:	2320      	movmi	r3, #32
 80093d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093d6:	0713      	lsls	r3, r2, #28
 80093d8:	bf44      	itt	mi
 80093da:	232b      	movmi	r3, #43	; 0x2b
 80093dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093e0:	f89a 3000 	ldrb.w	r3, [sl]
 80093e4:	2b2a      	cmp	r3, #42	; 0x2a
 80093e6:	d015      	beq.n	8009414 <_vfiprintf_r+0x120>
 80093e8:	9a07      	ldr	r2, [sp, #28]
 80093ea:	4654      	mov	r4, sl
 80093ec:	2000      	movs	r0, #0
 80093ee:	f04f 0c0a 	mov.w	ip, #10
 80093f2:	4621      	mov	r1, r4
 80093f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093f8:	3b30      	subs	r3, #48	; 0x30
 80093fa:	2b09      	cmp	r3, #9
 80093fc:	d94d      	bls.n	800949a <_vfiprintf_r+0x1a6>
 80093fe:	b1b0      	cbz	r0, 800942e <_vfiprintf_r+0x13a>
 8009400:	9207      	str	r2, [sp, #28]
 8009402:	e014      	b.n	800942e <_vfiprintf_r+0x13a>
 8009404:	eba0 0308 	sub.w	r3, r0, r8
 8009408:	fa09 f303 	lsl.w	r3, r9, r3
 800940c:	4313      	orrs	r3, r2
 800940e:	9304      	str	r3, [sp, #16]
 8009410:	46a2      	mov	sl, r4
 8009412:	e7d2      	b.n	80093ba <_vfiprintf_r+0xc6>
 8009414:	9b03      	ldr	r3, [sp, #12]
 8009416:	1d19      	adds	r1, r3, #4
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	9103      	str	r1, [sp, #12]
 800941c:	2b00      	cmp	r3, #0
 800941e:	bfbb      	ittet	lt
 8009420:	425b      	neglt	r3, r3
 8009422:	f042 0202 	orrlt.w	r2, r2, #2
 8009426:	9307      	strge	r3, [sp, #28]
 8009428:	9307      	strlt	r3, [sp, #28]
 800942a:	bfb8      	it	lt
 800942c:	9204      	strlt	r2, [sp, #16]
 800942e:	7823      	ldrb	r3, [r4, #0]
 8009430:	2b2e      	cmp	r3, #46	; 0x2e
 8009432:	d10c      	bne.n	800944e <_vfiprintf_r+0x15a>
 8009434:	7863      	ldrb	r3, [r4, #1]
 8009436:	2b2a      	cmp	r3, #42	; 0x2a
 8009438:	d134      	bne.n	80094a4 <_vfiprintf_r+0x1b0>
 800943a:	9b03      	ldr	r3, [sp, #12]
 800943c:	1d1a      	adds	r2, r3, #4
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	9203      	str	r2, [sp, #12]
 8009442:	2b00      	cmp	r3, #0
 8009444:	bfb8      	it	lt
 8009446:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800944a:	3402      	adds	r4, #2
 800944c:	9305      	str	r3, [sp, #20]
 800944e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009524 <_vfiprintf_r+0x230>
 8009452:	7821      	ldrb	r1, [r4, #0]
 8009454:	2203      	movs	r2, #3
 8009456:	4650      	mov	r0, sl
 8009458:	f7f6 feba 	bl	80001d0 <memchr>
 800945c:	b138      	cbz	r0, 800946e <_vfiprintf_r+0x17a>
 800945e:	9b04      	ldr	r3, [sp, #16]
 8009460:	eba0 000a 	sub.w	r0, r0, sl
 8009464:	2240      	movs	r2, #64	; 0x40
 8009466:	4082      	lsls	r2, r0
 8009468:	4313      	orrs	r3, r2
 800946a:	3401      	adds	r4, #1
 800946c:	9304      	str	r3, [sp, #16]
 800946e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009472:	4829      	ldr	r0, [pc, #164]	; (8009518 <_vfiprintf_r+0x224>)
 8009474:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009478:	2206      	movs	r2, #6
 800947a:	f7f6 fea9 	bl	80001d0 <memchr>
 800947e:	2800      	cmp	r0, #0
 8009480:	d03f      	beq.n	8009502 <_vfiprintf_r+0x20e>
 8009482:	4b26      	ldr	r3, [pc, #152]	; (800951c <_vfiprintf_r+0x228>)
 8009484:	bb1b      	cbnz	r3, 80094ce <_vfiprintf_r+0x1da>
 8009486:	9b03      	ldr	r3, [sp, #12]
 8009488:	3307      	adds	r3, #7
 800948a:	f023 0307 	bic.w	r3, r3, #7
 800948e:	3308      	adds	r3, #8
 8009490:	9303      	str	r3, [sp, #12]
 8009492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009494:	443b      	add	r3, r7
 8009496:	9309      	str	r3, [sp, #36]	; 0x24
 8009498:	e768      	b.n	800936c <_vfiprintf_r+0x78>
 800949a:	fb0c 3202 	mla	r2, ip, r2, r3
 800949e:	460c      	mov	r4, r1
 80094a0:	2001      	movs	r0, #1
 80094a2:	e7a6      	b.n	80093f2 <_vfiprintf_r+0xfe>
 80094a4:	2300      	movs	r3, #0
 80094a6:	3401      	adds	r4, #1
 80094a8:	9305      	str	r3, [sp, #20]
 80094aa:	4619      	mov	r1, r3
 80094ac:	f04f 0c0a 	mov.w	ip, #10
 80094b0:	4620      	mov	r0, r4
 80094b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094b6:	3a30      	subs	r2, #48	; 0x30
 80094b8:	2a09      	cmp	r2, #9
 80094ba:	d903      	bls.n	80094c4 <_vfiprintf_r+0x1d0>
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d0c6      	beq.n	800944e <_vfiprintf_r+0x15a>
 80094c0:	9105      	str	r1, [sp, #20]
 80094c2:	e7c4      	b.n	800944e <_vfiprintf_r+0x15a>
 80094c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80094c8:	4604      	mov	r4, r0
 80094ca:	2301      	movs	r3, #1
 80094cc:	e7f0      	b.n	80094b0 <_vfiprintf_r+0x1bc>
 80094ce:	ab03      	add	r3, sp, #12
 80094d0:	9300      	str	r3, [sp, #0]
 80094d2:	462a      	mov	r2, r5
 80094d4:	4b12      	ldr	r3, [pc, #72]	; (8009520 <_vfiprintf_r+0x22c>)
 80094d6:	a904      	add	r1, sp, #16
 80094d8:	4630      	mov	r0, r6
 80094da:	f7fd fbb1 	bl	8006c40 <_printf_float>
 80094de:	4607      	mov	r7, r0
 80094e0:	1c78      	adds	r0, r7, #1
 80094e2:	d1d6      	bne.n	8009492 <_vfiprintf_r+0x19e>
 80094e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094e6:	07d9      	lsls	r1, r3, #31
 80094e8:	d405      	bmi.n	80094f6 <_vfiprintf_r+0x202>
 80094ea:	89ab      	ldrh	r3, [r5, #12]
 80094ec:	059a      	lsls	r2, r3, #22
 80094ee:	d402      	bmi.n	80094f6 <_vfiprintf_r+0x202>
 80094f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094f2:	f7fe f8fc 	bl	80076ee <__retarget_lock_release_recursive>
 80094f6:	89ab      	ldrh	r3, [r5, #12]
 80094f8:	065b      	lsls	r3, r3, #25
 80094fa:	f53f af1d 	bmi.w	8009338 <_vfiprintf_r+0x44>
 80094fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009500:	e71c      	b.n	800933c <_vfiprintf_r+0x48>
 8009502:	ab03      	add	r3, sp, #12
 8009504:	9300      	str	r3, [sp, #0]
 8009506:	462a      	mov	r2, r5
 8009508:	4b05      	ldr	r3, [pc, #20]	; (8009520 <_vfiprintf_r+0x22c>)
 800950a:	a904      	add	r1, sp, #16
 800950c:	4630      	mov	r0, r6
 800950e:	f7fd fe3b 	bl	8007188 <_printf_i>
 8009512:	e7e4      	b.n	80094de <_vfiprintf_r+0x1ea>
 8009514:	0800a50c 	.word	0x0800a50c
 8009518:	0800a516 	.word	0x0800a516
 800951c:	08006c41 	.word	0x08006c41
 8009520:	080092d1 	.word	0x080092d1
 8009524:	0800a512 	.word	0x0800a512

08009528 <__swbuf_r>:
 8009528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800952a:	460e      	mov	r6, r1
 800952c:	4614      	mov	r4, r2
 800952e:	4605      	mov	r5, r0
 8009530:	b118      	cbz	r0, 800953a <__swbuf_r+0x12>
 8009532:	6a03      	ldr	r3, [r0, #32]
 8009534:	b90b      	cbnz	r3, 800953a <__swbuf_r+0x12>
 8009536:	f7fd ffc3 	bl	80074c0 <__sinit>
 800953a:	69a3      	ldr	r3, [r4, #24]
 800953c:	60a3      	str	r3, [r4, #8]
 800953e:	89a3      	ldrh	r3, [r4, #12]
 8009540:	071a      	lsls	r2, r3, #28
 8009542:	d525      	bpl.n	8009590 <__swbuf_r+0x68>
 8009544:	6923      	ldr	r3, [r4, #16]
 8009546:	b31b      	cbz	r3, 8009590 <__swbuf_r+0x68>
 8009548:	6823      	ldr	r3, [r4, #0]
 800954a:	6922      	ldr	r2, [r4, #16]
 800954c:	1a98      	subs	r0, r3, r2
 800954e:	6963      	ldr	r3, [r4, #20]
 8009550:	b2f6      	uxtb	r6, r6
 8009552:	4283      	cmp	r3, r0
 8009554:	4637      	mov	r7, r6
 8009556:	dc04      	bgt.n	8009562 <__swbuf_r+0x3a>
 8009558:	4621      	mov	r1, r4
 800955a:	4628      	mov	r0, r5
 800955c:	f7ff fdac 	bl	80090b8 <_fflush_r>
 8009560:	b9e0      	cbnz	r0, 800959c <__swbuf_r+0x74>
 8009562:	68a3      	ldr	r3, [r4, #8]
 8009564:	3b01      	subs	r3, #1
 8009566:	60a3      	str	r3, [r4, #8]
 8009568:	6823      	ldr	r3, [r4, #0]
 800956a:	1c5a      	adds	r2, r3, #1
 800956c:	6022      	str	r2, [r4, #0]
 800956e:	701e      	strb	r6, [r3, #0]
 8009570:	6962      	ldr	r2, [r4, #20]
 8009572:	1c43      	adds	r3, r0, #1
 8009574:	429a      	cmp	r2, r3
 8009576:	d004      	beq.n	8009582 <__swbuf_r+0x5a>
 8009578:	89a3      	ldrh	r3, [r4, #12]
 800957a:	07db      	lsls	r3, r3, #31
 800957c:	d506      	bpl.n	800958c <__swbuf_r+0x64>
 800957e:	2e0a      	cmp	r6, #10
 8009580:	d104      	bne.n	800958c <__swbuf_r+0x64>
 8009582:	4621      	mov	r1, r4
 8009584:	4628      	mov	r0, r5
 8009586:	f7ff fd97 	bl	80090b8 <_fflush_r>
 800958a:	b938      	cbnz	r0, 800959c <__swbuf_r+0x74>
 800958c:	4638      	mov	r0, r7
 800958e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009590:	4621      	mov	r1, r4
 8009592:	4628      	mov	r0, r5
 8009594:	f000 f806 	bl	80095a4 <__swsetup_r>
 8009598:	2800      	cmp	r0, #0
 800959a:	d0d5      	beq.n	8009548 <__swbuf_r+0x20>
 800959c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80095a0:	e7f4      	b.n	800958c <__swbuf_r+0x64>
	...

080095a4 <__swsetup_r>:
 80095a4:	b538      	push	{r3, r4, r5, lr}
 80095a6:	4b2a      	ldr	r3, [pc, #168]	; (8009650 <__swsetup_r+0xac>)
 80095a8:	4605      	mov	r5, r0
 80095aa:	6818      	ldr	r0, [r3, #0]
 80095ac:	460c      	mov	r4, r1
 80095ae:	b118      	cbz	r0, 80095b8 <__swsetup_r+0x14>
 80095b0:	6a03      	ldr	r3, [r0, #32]
 80095b2:	b90b      	cbnz	r3, 80095b8 <__swsetup_r+0x14>
 80095b4:	f7fd ff84 	bl	80074c0 <__sinit>
 80095b8:	89a3      	ldrh	r3, [r4, #12]
 80095ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095be:	0718      	lsls	r0, r3, #28
 80095c0:	d422      	bmi.n	8009608 <__swsetup_r+0x64>
 80095c2:	06d9      	lsls	r1, r3, #27
 80095c4:	d407      	bmi.n	80095d6 <__swsetup_r+0x32>
 80095c6:	2309      	movs	r3, #9
 80095c8:	602b      	str	r3, [r5, #0]
 80095ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80095ce:	81a3      	strh	r3, [r4, #12]
 80095d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095d4:	e034      	b.n	8009640 <__swsetup_r+0x9c>
 80095d6:	0758      	lsls	r0, r3, #29
 80095d8:	d512      	bpl.n	8009600 <__swsetup_r+0x5c>
 80095da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095dc:	b141      	cbz	r1, 80095f0 <__swsetup_r+0x4c>
 80095de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095e2:	4299      	cmp	r1, r3
 80095e4:	d002      	beq.n	80095ec <__swsetup_r+0x48>
 80095e6:	4628      	mov	r0, r5
 80095e8:	f7fe ff0c 	bl	8008404 <_free_r>
 80095ec:	2300      	movs	r3, #0
 80095ee:	6363      	str	r3, [r4, #52]	; 0x34
 80095f0:	89a3      	ldrh	r3, [r4, #12]
 80095f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80095f6:	81a3      	strh	r3, [r4, #12]
 80095f8:	2300      	movs	r3, #0
 80095fa:	6063      	str	r3, [r4, #4]
 80095fc:	6923      	ldr	r3, [r4, #16]
 80095fe:	6023      	str	r3, [r4, #0]
 8009600:	89a3      	ldrh	r3, [r4, #12]
 8009602:	f043 0308 	orr.w	r3, r3, #8
 8009606:	81a3      	strh	r3, [r4, #12]
 8009608:	6923      	ldr	r3, [r4, #16]
 800960a:	b94b      	cbnz	r3, 8009620 <__swsetup_r+0x7c>
 800960c:	89a3      	ldrh	r3, [r4, #12]
 800960e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009612:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009616:	d003      	beq.n	8009620 <__swsetup_r+0x7c>
 8009618:	4621      	mov	r1, r4
 800961a:	4628      	mov	r0, r5
 800961c:	f000 f884 	bl	8009728 <__smakebuf_r>
 8009620:	89a0      	ldrh	r0, [r4, #12]
 8009622:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009626:	f010 0301 	ands.w	r3, r0, #1
 800962a:	d00a      	beq.n	8009642 <__swsetup_r+0x9e>
 800962c:	2300      	movs	r3, #0
 800962e:	60a3      	str	r3, [r4, #8]
 8009630:	6963      	ldr	r3, [r4, #20]
 8009632:	425b      	negs	r3, r3
 8009634:	61a3      	str	r3, [r4, #24]
 8009636:	6923      	ldr	r3, [r4, #16]
 8009638:	b943      	cbnz	r3, 800964c <__swsetup_r+0xa8>
 800963a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800963e:	d1c4      	bne.n	80095ca <__swsetup_r+0x26>
 8009640:	bd38      	pop	{r3, r4, r5, pc}
 8009642:	0781      	lsls	r1, r0, #30
 8009644:	bf58      	it	pl
 8009646:	6963      	ldrpl	r3, [r4, #20]
 8009648:	60a3      	str	r3, [r4, #8]
 800964a:	e7f4      	b.n	8009636 <__swsetup_r+0x92>
 800964c:	2000      	movs	r0, #0
 800964e:	e7f7      	b.n	8009640 <__swsetup_r+0x9c>
 8009650:	2000006c 	.word	0x2000006c

08009654 <_raise_r>:
 8009654:	291f      	cmp	r1, #31
 8009656:	b538      	push	{r3, r4, r5, lr}
 8009658:	4604      	mov	r4, r0
 800965a:	460d      	mov	r5, r1
 800965c:	d904      	bls.n	8009668 <_raise_r+0x14>
 800965e:	2316      	movs	r3, #22
 8009660:	6003      	str	r3, [r0, #0]
 8009662:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009666:	bd38      	pop	{r3, r4, r5, pc}
 8009668:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800966a:	b112      	cbz	r2, 8009672 <_raise_r+0x1e>
 800966c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009670:	b94b      	cbnz	r3, 8009686 <_raise_r+0x32>
 8009672:	4620      	mov	r0, r4
 8009674:	f000 f830 	bl	80096d8 <_getpid_r>
 8009678:	462a      	mov	r2, r5
 800967a:	4601      	mov	r1, r0
 800967c:	4620      	mov	r0, r4
 800967e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009682:	f000 b817 	b.w	80096b4 <_kill_r>
 8009686:	2b01      	cmp	r3, #1
 8009688:	d00a      	beq.n	80096a0 <_raise_r+0x4c>
 800968a:	1c59      	adds	r1, r3, #1
 800968c:	d103      	bne.n	8009696 <_raise_r+0x42>
 800968e:	2316      	movs	r3, #22
 8009690:	6003      	str	r3, [r0, #0]
 8009692:	2001      	movs	r0, #1
 8009694:	e7e7      	b.n	8009666 <_raise_r+0x12>
 8009696:	2400      	movs	r4, #0
 8009698:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800969c:	4628      	mov	r0, r5
 800969e:	4798      	blx	r3
 80096a0:	2000      	movs	r0, #0
 80096a2:	e7e0      	b.n	8009666 <_raise_r+0x12>

080096a4 <raise>:
 80096a4:	4b02      	ldr	r3, [pc, #8]	; (80096b0 <raise+0xc>)
 80096a6:	4601      	mov	r1, r0
 80096a8:	6818      	ldr	r0, [r3, #0]
 80096aa:	f7ff bfd3 	b.w	8009654 <_raise_r>
 80096ae:	bf00      	nop
 80096b0:	2000006c 	.word	0x2000006c

080096b4 <_kill_r>:
 80096b4:	b538      	push	{r3, r4, r5, lr}
 80096b6:	4d07      	ldr	r5, [pc, #28]	; (80096d4 <_kill_r+0x20>)
 80096b8:	2300      	movs	r3, #0
 80096ba:	4604      	mov	r4, r0
 80096bc:	4608      	mov	r0, r1
 80096be:	4611      	mov	r1, r2
 80096c0:	602b      	str	r3, [r5, #0]
 80096c2:	f7f9 fbff 	bl	8002ec4 <_kill>
 80096c6:	1c43      	adds	r3, r0, #1
 80096c8:	d102      	bne.n	80096d0 <_kill_r+0x1c>
 80096ca:	682b      	ldr	r3, [r5, #0]
 80096cc:	b103      	cbz	r3, 80096d0 <_kill_r+0x1c>
 80096ce:	6023      	str	r3, [r4, #0]
 80096d0:	bd38      	pop	{r3, r4, r5, pc}
 80096d2:	bf00      	nop
 80096d4:	2000050c 	.word	0x2000050c

080096d8 <_getpid_r>:
 80096d8:	f7f9 bbec 	b.w	8002eb4 <_getpid>

080096dc <__swhatbuf_r>:
 80096dc:	b570      	push	{r4, r5, r6, lr}
 80096de:	460c      	mov	r4, r1
 80096e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096e4:	2900      	cmp	r1, #0
 80096e6:	b096      	sub	sp, #88	; 0x58
 80096e8:	4615      	mov	r5, r2
 80096ea:	461e      	mov	r6, r3
 80096ec:	da0d      	bge.n	800970a <__swhatbuf_r+0x2e>
 80096ee:	89a3      	ldrh	r3, [r4, #12]
 80096f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80096f4:	f04f 0100 	mov.w	r1, #0
 80096f8:	bf0c      	ite	eq
 80096fa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80096fe:	2340      	movne	r3, #64	; 0x40
 8009700:	2000      	movs	r0, #0
 8009702:	6031      	str	r1, [r6, #0]
 8009704:	602b      	str	r3, [r5, #0]
 8009706:	b016      	add	sp, #88	; 0x58
 8009708:	bd70      	pop	{r4, r5, r6, pc}
 800970a:	466a      	mov	r2, sp
 800970c:	f000 f848 	bl	80097a0 <_fstat_r>
 8009710:	2800      	cmp	r0, #0
 8009712:	dbec      	blt.n	80096ee <__swhatbuf_r+0x12>
 8009714:	9901      	ldr	r1, [sp, #4]
 8009716:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800971a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800971e:	4259      	negs	r1, r3
 8009720:	4159      	adcs	r1, r3
 8009722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009726:	e7eb      	b.n	8009700 <__swhatbuf_r+0x24>

08009728 <__smakebuf_r>:
 8009728:	898b      	ldrh	r3, [r1, #12]
 800972a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800972c:	079d      	lsls	r5, r3, #30
 800972e:	4606      	mov	r6, r0
 8009730:	460c      	mov	r4, r1
 8009732:	d507      	bpl.n	8009744 <__smakebuf_r+0x1c>
 8009734:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009738:	6023      	str	r3, [r4, #0]
 800973a:	6123      	str	r3, [r4, #16]
 800973c:	2301      	movs	r3, #1
 800973e:	6163      	str	r3, [r4, #20]
 8009740:	b002      	add	sp, #8
 8009742:	bd70      	pop	{r4, r5, r6, pc}
 8009744:	ab01      	add	r3, sp, #4
 8009746:	466a      	mov	r2, sp
 8009748:	f7ff ffc8 	bl	80096dc <__swhatbuf_r>
 800974c:	9900      	ldr	r1, [sp, #0]
 800974e:	4605      	mov	r5, r0
 8009750:	4630      	mov	r0, r6
 8009752:	f7fe fecb 	bl	80084ec <_malloc_r>
 8009756:	b948      	cbnz	r0, 800976c <__smakebuf_r+0x44>
 8009758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800975c:	059a      	lsls	r2, r3, #22
 800975e:	d4ef      	bmi.n	8009740 <__smakebuf_r+0x18>
 8009760:	f023 0303 	bic.w	r3, r3, #3
 8009764:	f043 0302 	orr.w	r3, r3, #2
 8009768:	81a3      	strh	r3, [r4, #12]
 800976a:	e7e3      	b.n	8009734 <__smakebuf_r+0xc>
 800976c:	89a3      	ldrh	r3, [r4, #12]
 800976e:	6020      	str	r0, [r4, #0]
 8009770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009774:	81a3      	strh	r3, [r4, #12]
 8009776:	9b00      	ldr	r3, [sp, #0]
 8009778:	6163      	str	r3, [r4, #20]
 800977a:	9b01      	ldr	r3, [sp, #4]
 800977c:	6120      	str	r0, [r4, #16]
 800977e:	b15b      	cbz	r3, 8009798 <__smakebuf_r+0x70>
 8009780:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009784:	4630      	mov	r0, r6
 8009786:	f000 f81d 	bl	80097c4 <_isatty_r>
 800978a:	b128      	cbz	r0, 8009798 <__smakebuf_r+0x70>
 800978c:	89a3      	ldrh	r3, [r4, #12]
 800978e:	f023 0303 	bic.w	r3, r3, #3
 8009792:	f043 0301 	orr.w	r3, r3, #1
 8009796:	81a3      	strh	r3, [r4, #12]
 8009798:	89a3      	ldrh	r3, [r4, #12]
 800979a:	431d      	orrs	r5, r3
 800979c:	81a5      	strh	r5, [r4, #12]
 800979e:	e7cf      	b.n	8009740 <__smakebuf_r+0x18>

080097a0 <_fstat_r>:
 80097a0:	b538      	push	{r3, r4, r5, lr}
 80097a2:	4d07      	ldr	r5, [pc, #28]	; (80097c0 <_fstat_r+0x20>)
 80097a4:	2300      	movs	r3, #0
 80097a6:	4604      	mov	r4, r0
 80097a8:	4608      	mov	r0, r1
 80097aa:	4611      	mov	r1, r2
 80097ac:	602b      	str	r3, [r5, #0]
 80097ae:	f7f9 fbe8 	bl	8002f82 <_fstat>
 80097b2:	1c43      	adds	r3, r0, #1
 80097b4:	d102      	bne.n	80097bc <_fstat_r+0x1c>
 80097b6:	682b      	ldr	r3, [r5, #0]
 80097b8:	b103      	cbz	r3, 80097bc <_fstat_r+0x1c>
 80097ba:	6023      	str	r3, [r4, #0]
 80097bc:	bd38      	pop	{r3, r4, r5, pc}
 80097be:	bf00      	nop
 80097c0:	2000050c 	.word	0x2000050c

080097c4 <_isatty_r>:
 80097c4:	b538      	push	{r3, r4, r5, lr}
 80097c6:	4d06      	ldr	r5, [pc, #24]	; (80097e0 <_isatty_r+0x1c>)
 80097c8:	2300      	movs	r3, #0
 80097ca:	4604      	mov	r4, r0
 80097cc:	4608      	mov	r0, r1
 80097ce:	602b      	str	r3, [r5, #0]
 80097d0:	f7f9 fbe7 	bl	8002fa2 <_isatty>
 80097d4:	1c43      	adds	r3, r0, #1
 80097d6:	d102      	bne.n	80097de <_isatty_r+0x1a>
 80097d8:	682b      	ldr	r3, [r5, #0]
 80097da:	b103      	cbz	r3, 80097de <_isatty_r+0x1a>
 80097dc:	6023      	str	r3, [r4, #0]
 80097de:	bd38      	pop	{r3, r4, r5, pc}
 80097e0:	2000050c 	.word	0x2000050c

080097e4 <atan2f>:
 80097e4:	f000 b886 	b.w	80098f4 <__ieee754_atan2f>

080097e8 <powf>:
 80097e8:	b508      	push	{r3, lr}
 80097ea:	ed2d 8b04 	vpush	{d8-d9}
 80097ee:	eeb0 8a60 	vmov.f32	s16, s1
 80097f2:	eeb0 9a40 	vmov.f32	s18, s0
 80097f6:	f000 f91d 	bl	8009a34 <__ieee754_powf>
 80097fa:	eeb4 8a48 	vcmp.f32	s16, s16
 80097fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009802:	eef0 8a40 	vmov.f32	s17, s0
 8009806:	d63e      	bvs.n	8009886 <powf+0x9e>
 8009808:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800980c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009810:	d112      	bne.n	8009838 <powf+0x50>
 8009812:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800981a:	d039      	beq.n	8009890 <powf+0xa8>
 800981c:	eeb0 0a48 	vmov.f32	s0, s16
 8009820:	f000 f858 	bl	80098d4 <finitef>
 8009824:	b378      	cbz	r0, 8009886 <powf+0x9e>
 8009826:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800982a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800982e:	d52a      	bpl.n	8009886 <powf+0x9e>
 8009830:	f7fd ff32 	bl	8007698 <__errno>
 8009834:	2322      	movs	r3, #34	; 0x22
 8009836:	e014      	b.n	8009862 <powf+0x7a>
 8009838:	f000 f84c 	bl	80098d4 <finitef>
 800983c:	b998      	cbnz	r0, 8009866 <powf+0x7e>
 800983e:	eeb0 0a49 	vmov.f32	s0, s18
 8009842:	f000 f847 	bl	80098d4 <finitef>
 8009846:	b170      	cbz	r0, 8009866 <powf+0x7e>
 8009848:	eeb0 0a48 	vmov.f32	s0, s16
 800984c:	f000 f842 	bl	80098d4 <finitef>
 8009850:	b148      	cbz	r0, 8009866 <powf+0x7e>
 8009852:	eef4 8a68 	vcmp.f32	s17, s17
 8009856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800985a:	d7e9      	bvc.n	8009830 <powf+0x48>
 800985c:	f7fd ff1c 	bl	8007698 <__errno>
 8009860:	2321      	movs	r3, #33	; 0x21
 8009862:	6003      	str	r3, [r0, #0]
 8009864:	e00f      	b.n	8009886 <powf+0x9e>
 8009866:	eef5 8a40 	vcmp.f32	s17, #0.0
 800986a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800986e:	d10a      	bne.n	8009886 <powf+0x9e>
 8009870:	eeb0 0a49 	vmov.f32	s0, s18
 8009874:	f000 f82e 	bl	80098d4 <finitef>
 8009878:	b128      	cbz	r0, 8009886 <powf+0x9e>
 800987a:	eeb0 0a48 	vmov.f32	s0, s16
 800987e:	f000 f829 	bl	80098d4 <finitef>
 8009882:	2800      	cmp	r0, #0
 8009884:	d1d4      	bne.n	8009830 <powf+0x48>
 8009886:	eeb0 0a68 	vmov.f32	s0, s17
 800988a:	ecbd 8b04 	vpop	{d8-d9}
 800988e:	bd08      	pop	{r3, pc}
 8009890:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8009894:	e7f7      	b.n	8009886 <powf+0x9e>
	...

08009898 <sqrtf>:
 8009898:	b508      	push	{r3, lr}
 800989a:	ed2d 8b02 	vpush	{d8}
 800989e:	eeb0 8a40 	vmov.f32	s16, s0
 80098a2:	f000 f824 	bl	80098ee <__ieee754_sqrtf>
 80098a6:	eeb4 8a48 	vcmp.f32	s16, s16
 80098aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ae:	d60c      	bvs.n	80098ca <sqrtf+0x32>
 80098b0:	eddf 8a07 	vldr	s17, [pc, #28]	; 80098d0 <sqrtf+0x38>
 80098b4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80098b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098bc:	d505      	bpl.n	80098ca <sqrtf+0x32>
 80098be:	f7fd feeb 	bl	8007698 <__errno>
 80098c2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80098c6:	2321      	movs	r3, #33	; 0x21
 80098c8:	6003      	str	r3, [r0, #0]
 80098ca:	ecbd 8b02 	vpop	{d8}
 80098ce:	bd08      	pop	{r3, pc}
 80098d0:	00000000 	.word	0x00000000

080098d4 <finitef>:
 80098d4:	b082      	sub	sp, #8
 80098d6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80098da:	9801      	ldr	r0, [sp, #4]
 80098dc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80098e0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80098e4:	bfac      	ite	ge
 80098e6:	2000      	movge	r0, #0
 80098e8:	2001      	movlt	r0, #1
 80098ea:	b002      	add	sp, #8
 80098ec:	4770      	bx	lr

080098ee <__ieee754_sqrtf>:
 80098ee:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80098f2:	4770      	bx	lr

080098f4 <__ieee754_atan2f>:
 80098f4:	ee10 2a90 	vmov	r2, s1
 80098f8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80098fc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009900:	b510      	push	{r4, lr}
 8009902:	eef0 7a40 	vmov.f32	s15, s0
 8009906:	dc06      	bgt.n	8009916 <__ieee754_atan2f+0x22>
 8009908:	ee10 0a10 	vmov	r0, s0
 800990c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8009910:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009914:	dd04      	ble.n	8009920 <__ieee754_atan2f+0x2c>
 8009916:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800991a:	eeb0 0a67 	vmov.f32	s0, s15
 800991e:	bd10      	pop	{r4, pc}
 8009920:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8009924:	d103      	bne.n	800992e <__ieee754_atan2f+0x3a>
 8009926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800992a:	f000 bb4d 	b.w	8009fc8 <atanf>
 800992e:	1794      	asrs	r4, r2, #30
 8009930:	f004 0402 	and.w	r4, r4, #2
 8009934:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8009938:	b943      	cbnz	r3, 800994c <__ieee754_atan2f+0x58>
 800993a:	2c02      	cmp	r4, #2
 800993c:	d05e      	beq.n	80099fc <__ieee754_atan2f+0x108>
 800993e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009a10 <__ieee754_atan2f+0x11c>
 8009942:	2c03      	cmp	r4, #3
 8009944:	bf08      	it	eq
 8009946:	eef0 7a47 	vmoveq.f32	s15, s14
 800994a:	e7e6      	b.n	800991a <__ieee754_atan2f+0x26>
 800994c:	b941      	cbnz	r1, 8009960 <__ieee754_atan2f+0x6c>
 800994e:	eddf 7a31 	vldr	s15, [pc, #196]	; 8009a14 <__ieee754_atan2f+0x120>
 8009952:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8009a18 <__ieee754_atan2f+0x124>
 8009956:	2800      	cmp	r0, #0
 8009958:	bfb8      	it	lt
 800995a:	eef0 7a47 	vmovlt.f32	s15, s14
 800995e:	e7dc      	b.n	800991a <__ieee754_atan2f+0x26>
 8009960:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009964:	d110      	bne.n	8009988 <__ieee754_atan2f+0x94>
 8009966:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800996a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800996e:	d107      	bne.n	8009980 <__ieee754_atan2f+0x8c>
 8009970:	2c02      	cmp	r4, #2
 8009972:	d846      	bhi.n	8009a02 <__ieee754_atan2f+0x10e>
 8009974:	4b29      	ldr	r3, [pc, #164]	; (8009a1c <__ieee754_atan2f+0x128>)
 8009976:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800997a:	edd3 7a00 	vldr	s15, [r3]
 800997e:	e7cc      	b.n	800991a <__ieee754_atan2f+0x26>
 8009980:	2c02      	cmp	r4, #2
 8009982:	d841      	bhi.n	8009a08 <__ieee754_atan2f+0x114>
 8009984:	4b26      	ldr	r3, [pc, #152]	; (8009a20 <__ieee754_atan2f+0x12c>)
 8009986:	e7f6      	b.n	8009976 <__ieee754_atan2f+0x82>
 8009988:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800998c:	d0df      	beq.n	800994e <__ieee754_atan2f+0x5a>
 800998e:	1a5b      	subs	r3, r3, r1
 8009990:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8009994:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8009998:	da1a      	bge.n	80099d0 <__ieee754_atan2f+0xdc>
 800999a:	2a00      	cmp	r2, #0
 800999c:	da01      	bge.n	80099a2 <__ieee754_atan2f+0xae>
 800999e:	313c      	adds	r1, #60	; 0x3c
 80099a0:	db19      	blt.n	80099d6 <__ieee754_atan2f+0xe2>
 80099a2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80099a6:	f000 fbe3 	bl	800a170 <fabsf>
 80099aa:	f000 fb0d 	bl	8009fc8 <atanf>
 80099ae:	eef0 7a40 	vmov.f32	s15, s0
 80099b2:	2c01      	cmp	r4, #1
 80099b4:	d012      	beq.n	80099dc <__ieee754_atan2f+0xe8>
 80099b6:	2c02      	cmp	r4, #2
 80099b8:	d017      	beq.n	80099ea <__ieee754_atan2f+0xf6>
 80099ba:	2c00      	cmp	r4, #0
 80099bc:	d0ad      	beq.n	800991a <__ieee754_atan2f+0x26>
 80099be:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009a24 <__ieee754_atan2f+0x130>
 80099c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80099c6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8009a28 <__ieee754_atan2f+0x134>
 80099ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80099ce:	e7a4      	b.n	800991a <__ieee754_atan2f+0x26>
 80099d0:	eddf 7a10 	vldr	s15, [pc, #64]	; 8009a14 <__ieee754_atan2f+0x120>
 80099d4:	e7ed      	b.n	80099b2 <__ieee754_atan2f+0xbe>
 80099d6:	eddf 7a15 	vldr	s15, [pc, #84]	; 8009a2c <__ieee754_atan2f+0x138>
 80099da:	e7ea      	b.n	80099b2 <__ieee754_atan2f+0xbe>
 80099dc:	ee17 3a90 	vmov	r3, s15
 80099e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80099e4:	ee07 3a90 	vmov	s15, r3
 80099e8:	e797      	b.n	800991a <__ieee754_atan2f+0x26>
 80099ea:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8009a24 <__ieee754_atan2f+0x130>
 80099ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80099f2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8009a28 <__ieee754_atan2f+0x134>
 80099f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099fa:	e78e      	b.n	800991a <__ieee754_atan2f+0x26>
 80099fc:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8009a28 <__ieee754_atan2f+0x134>
 8009a00:	e78b      	b.n	800991a <__ieee754_atan2f+0x26>
 8009a02:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8009a30 <__ieee754_atan2f+0x13c>
 8009a06:	e788      	b.n	800991a <__ieee754_atan2f+0x26>
 8009a08:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009a2c <__ieee754_atan2f+0x138>
 8009a0c:	e785      	b.n	800991a <__ieee754_atan2f+0x26>
 8009a0e:	bf00      	nop
 8009a10:	c0490fdb 	.word	0xc0490fdb
 8009a14:	3fc90fdb 	.word	0x3fc90fdb
 8009a18:	bfc90fdb 	.word	0xbfc90fdb
 8009a1c:	0800a664 	.word	0x0800a664
 8009a20:	0800a670 	.word	0x0800a670
 8009a24:	33bbbd2e 	.word	0x33bbbd2e
 8009a28:	40490fdb 	.word	0x40490fdb
 8009a2c:	00000000 	.word	0x00000000
 8009a30:	3f490fdb 	.word	0x3f490fdb

08009a34 <__ieee754_powf>:
 8009a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a38:	ee10 4a90 	vmov	r4, s1
 8009a3c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8009a40:	ed2d 8b02 	vpush	{d8}
 8009a44:	ee10 7a10 	vmov	r7, s0
 8009a48:	eeb0 8a40 	vmov.f32	s16, s0
 8009a4c:	eef0 8a60 	vmov.f32	s17, s1
 8009a50:	d10c      	bne.n	8009a6c <__ieee754_powf+0x38>
 8009a52:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 8009a56:	007f      	lsls	r7, r7, #1
 8009a58:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 8009a5c:	f240 8292 	bls.w	8009f84 <__ieee754_powf+0x550>
 8009a60:	ee38 0a28 	vadd.f32	s0, s16, s17
 8009a64:	ecbd 8b02 	vpop	{d8}
 8009a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a6c:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 8009a70:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8009a74:	dcf4      	bgt.n	8009a60 <__ieee754_powf+0x2c>
 8009a76:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8009a7a:	dd08      	ble.n	8009a8e <__ieee754_powf+0x5a>
 8009a7c:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8009a80:	d1ee      	bne.n	8009a60 <__ieee754_powf+0x2c>
 8009a82:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8009a86:	0064      	lsls	r4, r4, #1
 8009a88:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8009a8c:	e7e6      	b.n	8009a5c <__ieee754_powf+0x28>
 8009a8e:	2f00      	cmp	r7, #0
 8009a90:	da20      	bge.n	8009ad4 <__ieee754_powf+0xa0>
 8009a92:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8009a96:	da2d      	bge.n	8009af4 <__ieee754_powf+0xc0>
 8009a98:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8009a9c:	f2c0 827b 	blt.w	8009f96 <__ieee754_powf+0x562>
 8009aa0:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8009aa4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8009aa8:	fa48 f603 	asr.w	r6, r8, r3
 8009aac:	fa06 f303 	lsl.w	r3, r6, r3
 8009ab0:	4543      	cmp	r3, r8
 8009ab2:	f040 8270 	bne.w	8009f96 <__ieee754_powf+0x562>
 8009ab6:	f006 0601 	and.w	r6, r6, #1
 8009aba:	f1c6 0602 	rsb	r6, r6, #2
 8009abe:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8009ac2:	d11f      	bne.n	8009b04 <__ieee754_powf+0xd0>
 8009ac4:	2c00      	cmp	r4, #0
 8009ac6:	f280 8263 	bge.w	8009f90 <__ieee754_powf+0x55c>
 8009aca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009ace:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8009ad2:	e7c7      	b.n	8009a64 <__ieee754_powf+0x30>
 8009ad4:	2600      	movs	r6, #0
 8009ad6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8009ada:	d1f0      	bne.n	8009abe <__ieee754_powf+0x8a>
 8009adc:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8009ae0:	f000 8250 	beq.w	8009f84 <__ieee754_powf+0x550>
 8009ae4:	dd08      	ble.n	8009af8 <__ieee754_powf+0xc4>
 8009ae6:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8009dec <__ieee754_powf+0x3b8>
 8009aea:	2c00      	cmp	r4, #0
 8009aec:	bfa8      	it	ge
 8009aee:	eeb0 0a68 	vmovge.f32	s0, s17
 8009af2:	e7b7      	b.n	8009a64 <__ieee754_powf+0x30>
 8009af4:	2602      	movs	r6, #2
 8009af6:	e7ee      	b.n	8009ad6 <__ieee754_powf+0xa2>
 8009af8:	2c00      	cmp	r4, #0
 8009afa:	f280 8246 	bge.w	8009f8a <__ieee754_powf+0x556>
 8009afe:	eeb1 0a68 	vneg.f32	s0, s17
 8009b02:	e7af      	b.n	8009a64 <__ieee754_powf+0x30>
 8009b04:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8009b08:	d102      	bne.n	8009b10 <__ieee754_powf+0xdc>
 8009b0a:	ee28 0a08 	vmul.f32	s0, s16, s16
 8009b0e:	e7a9      	b.n	8009a64 <__ieee754_powf+0x30>
 8009b10:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8009b14:	eeb0 0a48 	vmov.f32	s0, s16
 8009b18:	d107      	bne.n	8009b2a <__ieee754_powf+0xf6>
 8009b1a:	2f00      	cmp	r7, #0
 8009b1c:	db05      	blt.n	8009b2a <__ieee754_powf+0xf6>
 8009b1e:	ecbd 8b02 	vpop	{d8}
 8009b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b26:	f7ff bee2 	b.w	80098ee <__ieee754_sqrtf>
 8009b2a:	f000 fb21 	bl	800a170 <fabsf>
 8009b2e:	b125      	cbz	r5, 8009b3a <__ieee754_powf+0x106>
 8009b30:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 8009b34:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8009b38:	d115      	bne.n	8009b66 <__ieee754_powf+0x132>
 8009b3a:	2c00      	cmp	r4, #0
 8009b3c:	bfbc      	itt	lt
 8009b3e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8009b42:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8009b46:	2f00      	cmp	r7, #0
 8009b48:	da8c      	bge.n	8009a64 <__ieee754_powf+0x30>
 8009b4a:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8009b4e:	4335      	orrs	r5, r6
 8009b50:	d104      	bne.n	8009b5c <__ieee754_powf+0x128>
 8009b52:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009b56:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8009b5a:	e783      	b.n	8009a64 <__ieee754_powf+0x30>
 8009b5c:	2e01      	cmp	r6, #1
 8009b5e:	d181      	bne.n	8009a64 <__ieee754_powf+0x30>
 8009b60:	eeb1 0a40 	vneg.f32	s0, s0
 8009b64:	e77e      	b.n	8009a64 <__ieee754_powf+0x30>
 8009b66:	0ff8      	lsrs	r0, r7, #31
 8009b68:	3801      	subs	r0, #1
 8009b6a:	ea56 0300 	orrs.w	r3, r6, r0
 8009b6e:	d104      	bne.n	8009b7a <__ieee754_powf+0x146>
 8009b70:	ee38 8a48 	vsub.f32	s16, s16, s16
 8009b74:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8009b78:	e774      	b.n	8009a64 <__ieee754_powf+0x30>
 8009b7a:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8009b7e:	dd73      	ble.n	8009c68 <__ieee754_powf+0x234>
 8009b80:	4b9b      	ldr	r3, [pc, #620]	; (8009df0 <__ieee754_powf+0x3bc>)
 8009b82:	429d      	cmp	r5, r3
 8009b84:	dc08      	bgt.n	8009b98 <__ieee754_powf+0x164>
 8009b86:	2c00      	cmp	r4, #0
 8009b88:	da0b      	bge.n	8009ba2 <__ieee754_powf+0x16e>
 8009b8a:	2000      	movs	r0, #0
 8009b8c:	ecbd 8b02 	vpop	{d8}
 8009b90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b94:	f000 bb76 	b.w	800a284 <__math_oflowf>
 8009b98:	4b96      	ldr	r3, [pc, #600]	; (8009df4 <__ieee754_powf+0x3c0>)
 8009b9a:	429d      	cmp	r5, r3
 8009b9c:	dd08      	ble.n	8009bb0 <__ieee754_powf+0x17c>
 8009b9e:	2c00      	cmp	r4, #0
 8009ba0:	dcf3      	bgt.n	8009b8a <__ieee754_powf+0x156>
 8009ba2:	2000      	movs	r0, #0
 8009ba4:	ecbd 8b02 	vpop	{d8}
 8009ba8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bac:	f000 bb64 	b.w	800a278 <__math_uflowf>
 8009bb0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009bb4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009bb8:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8009df8 <__ieee754_powf+0x3c4>
 8009bbc:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8009bc0:	eee0 6a67 	vfms.f32	s13, s0, s15
 8009bc4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009bc8:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8009bcc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009bd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009bd4:	eddf 7a89 	vldr	s15, [pc, #548]	; 8009dfc <__ieee754_powf+0x3c8>
 8009bd8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8009bdc:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8009e00 <__ieee754_powf+0x3cc>
 8009be0:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009be4:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8009e04 <__ieee754_powf+0x3d0>
 8009be8:	eef0 6a67 	vmov.f32	s13, s15
 8009bec:	eee0 6a07 	vfma.f32	s13, s0, s14
 8009bf0:	ee16 3a90 	vmov	r3, s13
 8009bf4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009bf8:	f023 030f 	bic.w	r3, r3, #15
 8009bfc:	ee06 3a90 	vmov	s13, r3
 8009c00:	eee0 6a47 	vfms.f32	s13, s0, s14
 8009c04:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009c08:	3e01      	subs	r6, #1
 8009c0a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8009c0e:	4306      	orrs	r6, r0
 8009c10:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009c14:	f024 040f 	bic.w	r4, r4, #15
 8009c18:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8009c1c:	bf08      	it	eq
 8009c1e:	eeb0 8a47 	vmoveq.f32	s16, s14
 8009c22:	ee07 4a10 	vmov	s14, r4
 8009c26:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8009c2a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8009c2e:	ee07 3a90 	vmov	s15, r3
 8009c32:	eee7 0a27 	vfma.f32	s1, s14, s15
 8009c36:	ee07 4a10 	vmov	s14, r4
 8009c3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c3e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8009c42:	ee17 1a10 	vmov	r1, s14
 8009c46:	2900      	cmp	r1, #0
 8009c48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009c4c:	f340 817c 	ble.w	8009f48 <__ieee754_powf+0x514>
 8009c50:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8009c54:	f340 80f8 	ble.w	8009e48 <__ieee754_powf+0x414>
 8009c58:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c60:	bf4c      	ite	mi
 8009c62:	2001      	movmi	r0, #1
 8009c64:	2000      	movpl	r0, #0
 8009c66:	e791      	b.n	8009b8c <__ieee754_powf+0x158>
 8009c68:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 8009c6c:	bf01      	itttt	eq
 8009c6e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8009e08 <__ieee754_powf+0x3d4>
 8009c72:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8009c76:	f06f 0317 	mvneq.w	r3, #23
 8009c7a:	ee17 5a90 	vmoveq	r5, s15
 8009c7e:	ea4f 52e5 	mov.w	r2, r5, asr #23
 8009c82:	bf18      	it	ne
 8009c84:	2300      	movne	r3, #0
 8009c86:	3a7f      	subs	r2, #127	; 0x7f
 8009c88:	441a      	add	r2, r3
 8009c8a:	4b60      	ldr	r3, [pc, #384]	; (8009e0c <__ieee754_powf+0x3d8>)
 8009c8c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8009c90:	429d      	cmp	r5, r3
 8009c92:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8009c96:	dd06      	ble.n	8009ca6 <__ieee754_powf+0x272>
 8009c98:	4b5d      	ldr	r3, [pc, #372]	; (8009e10 <__ieee754_powf+0x3dc>)
 8009c9a:	429d      	cmp	r5, r3
 8009c9c:	f340 80a4 	ble.w	8009de8 <__ieee754_powf+0x3b4>
 8009ca0:	3201      	adds	r2, #1
 8009ca2:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8009ca6:	2500      	movs	r5, #0
 8009ca8:	4b5a      	ldr	r3, [pc, #360]	; (8009e14 <__ieee754_powf+0x3e0>)
 8009caa:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8009cae:	ee07 1a10 	vmov	s14, r1
 8009cb2:	edd3 5a00 	vldr	s11, [r3]
 8009cb6:	4b58      	ldr	r3, [pc, #352]	; (8009e18 <__ieee754_powf+0x3e4>)
 8009cb8:	ee75 7a87 	vadd.f32	s15, s11, s14
 8009cbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cc0:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8009cc4:	1049      	asrs	r1, r1, #1
 8009cc6:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8009cca:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8009cce:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8009cd2:	ee37 6a65 	vsub.f32	s12, s14, s11
 8009cd6:	ee07 1a90 	vmov	s15, r1
 8009cda:	ee26 5a24 	vmul.f32	s10, s12, s9
 8009cde:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8009ce2:	ee15 7a10 	vmov	r7, s10
 8009ce6:	401f      	ands	r7, r3
 8009ce8:	ee06 7a90 	vmov	s13, r7
 8009cec:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8009cf0:	ee37 7a65 	vsub.f32	s14, s14, s11
 8009cf4:	ee65 7a05 	vmul.f32	s15, s10, s10
 8009cf8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8009cfc:	eddf 5a47 	vldr	s11, [pc, #284]	; 8009e1c <__ieee754_powf+0x3e8>
 8009d00:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8009e20 <__ieee754_powf+0x3ec>
 8009d04:	eee7 5a87 	vfma.f32	s11, s15, s14
 8009d08:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8009e24 <__ieee754_powf+0x3f0>
 8009d0c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009d10:	eddf 5a39 	vldr	s11, [pc, #228]	; 8009df8 <__ieee754_powf+0x3c4>
 8009d14:	eee7 5a27 	vfma.f32	s11, s14, s15
 8009d18:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8009e28 <__ieee754_powf+0x3f4>
 8009d1c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009d20:	eddf 5a42 	vldr	s11, [pc, #264]	; 8009e2c <__ieee754_powf+0x3f8>
 8009d24:	ee26 6a24 	vmul.f32	s12, s12, s9
 8009d28:	eee7 5a27 	vfma.f32	s11, s14, s15
 8009d2c:	ee35 7a26 	vadd.f32	s14, s10, s13
 8009d30:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8009d34:	ee27 7a06 	vmul.f32	s14, s14, s12
 8009d38:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8009d3c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8009d40:	eef0 5a67 	vmov.f32	s11, s15
 8009d44:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8009d48:	ee75 5a87 	vadd.f32	s11, s11, s14
 8009d4c:	ee15 1a90 	vmov	r1, s11
 8009d50:	4019      	ands	r1, r3
 8009d52:	ee05 1a90 	vmov	s11, r1
 8009d56:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8009d5a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8009d5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d62:	ee67 7a85 	vmul.f32	s15, s15, s10
 8009d66:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009d6a:	eeb0 6a67 	vmov.f32	s12, s15
 8009d6e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8009d72:	ee16 1a10 	vmov	r1, s12
 8009d76:	4019      	ands	r1, r3
 8009d78:	ee07 1a10 	vmov	s14, r1
 8009d7c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8009d80:	ee06 1a10 	vmov	s12, r1
 8009d84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d88:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8009e30 <__ieee754_powf+0x3fc>
 8009d8c:	4929      	ldr	r1, [pc, #164]	; (8009e34 <__ieee754_powf+0x400>)
 8009d8e:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8009e38 <__ieee754_powf+0x404>
 8009d92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009d96:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8009e3c <__ieee754_powf+0x408>
 8009d9a:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009d9e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8009da2:	ed91 7a00 	vldr	s14, [r1]
 8009da6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009daa:	ee07 2a10 	vmov	s14, r2
 8009dae:	eef0 6a67 	vmov.f32	s13, s15
 8009db2:	4a23      	ldr	r2, [pc, #140]	; (8009e40 <__ieee754_powf+0x40c>)
 8009db4:	eee6 6a25 	vfma.f32	s13, s12, s11
 8009db8:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8009dbc:	ed92 5a00 	vldr	s10, [r2]
 8009dc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009dc4:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009dc8:	ee76 6a87 	vadd.f32	s13, s13, s14
 8009dcc:	ee16 2a90 	vmov	r2, s13
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	ee06 3a90 	vmov	s13, r3
 8009dd6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009dda:	ee37 7a45 	vsub.f32	s14, s14, s10
 8009dde:	eea6 7a65 	vfms.f32	s14, s12, s11
 8009de2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009de6:	e70f      	b.n	8009c08 <__ieee754_powf+0x1d4>
 8009de8:	2501      	movs	r5, #1
 8009dea:	e75d      	b.n	8009ca8 <__ieee754_powf+0x274>
 8009dec:	00000000 	.word	0x00000000
 8009df0:	3f7ffff3 	.word	0x3f7ffff3
 8009df4:	3f800007 	.word	0x3f800007
 8009df8:	3eaaaaab 	.word	0x3eaaaaab
 8009dfc:	3fb8aa3b 	.word	0x3fb8aa3b
 8009e00:	36eca570 	.word	0x36eca570
 8009e04:	3fb8aa00 	.word	0x3fb8aa00
 8009e08:	4b800000 	.word	0x4b800000
 8009e0c:	001cc471 	.word	0x001cc471
 8009e10:	005db3d6 	.word	0x005db3d6
 8009e14:	0800a67c 	.word	0x0800a67c
 8009e18:	fffff000 	.word	0xfffff000
 8009e1c:	3e6c3255 	.word	0x3e6c3255
 8009e20:	3e53f142 	.word	0x3e53f142
 8009e24:	3e8ba305 	.word	0x3e8ba305
 8009e28:	3edb6db7 	.word	0x3edb6db7
 8009e2c:	3f19999a 	.word	0x3f19999a
 8009e30:	3f76384f 	.word	0x3f76384f
 8009e34:	0800a68c 	.word	0x0800a68c
 8009e38:	3f763800 	.word	0x3f763800
 8009e3c:	369dc3a0 	.word	0x369dc3a0
 8009e40:	0800a684 	.word	0x0800a684
 8009e44:	3338aa3c 	.word	0x3338aa3c
 8009e48:	f040 8093 	bne.w	8009f72 <__ieee754_powf+0x53e>
 8009e4c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8009e44 <__ieee754_powf+0x410>
 8009e50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009e54:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8009e58:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e60:	f73f aefa 	bgt.w	8009c58 <__ieee754_powf+0x224>
 8009e64:	15db      	asrs	r3, r3, #23
 8009e66:	3b7e      	subs	r3, #126	; 0x7e
 8009e68:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8009e6c:	4118      	asrs	r0, r3
 8009e6e:	4408      	add	r0, r1
 8009e70:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009e74:	4a49      	ldr	r2, [pc, #292]	; (8009f9c <__ieee754_powf+0x568>)
 8009e76:	3b7f      	subs	r3, #127	; 0x7f
 8009e78:	411a      	asrs	r2, r3
 8009e7a:	4002      	ands	r2, r0
 8009e7c:	ee07 2a10 	vmov	s14, r2
 8009e80:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8009e84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8009e88:	f1c3 0317 	rsb	r3, r3, #23
 8009e8c:	4118      	asrs	r0, r3
 8009e8e:	2900      	cmp	r1, #0
 8009e90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009e94:	bfb8      	it	lt
 8009e96:	4240      	neglt	r0, r0
 8009e98:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8009e9c:	eddf 6a40 	vldr	s13, [pc, #256]	; 8009fa0 <__ieee754_powf+0x56c>
 8009ea0:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8009fa4 <__ieee754_powf+0x570>
 8009ea4:	ee17 3a10 	vmov	r3, s14
 8009ea8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009eac:	f023 030f 	bic.w	r3, r3, #15
 8009eb0:	ee07 3a10 	vmov	s14, r3
 8009eb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009eb8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009ebc:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009ec0:	eddf 7a39 	vldr	s15, [pc, #228]	; 8009fa8 <__ieee754_powf+0x574>
 8009ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ec8:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8009ecc:	eef0 6a67 	vmov.f32	s13, s15
 8009ed0:	eee7 6a06 	vfma.f32	s13, s14, s12
 8009ed4:	eef0 5a66 	vmov.f32	s11, s13
 8009ed8:	eee7 5a46 	vfms.f32	s11, s14, s12
 8009edc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8009ee0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009ee4:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8009fac <__ieee754_powf+0x578>
 8009ee8:	eddf 5a31 	vldr	s11, [pc, #196]	; 8009fb0 <__ieee754_powf+0x57c>
 8009eec:	eea7 6a25 	vfma.f32	s12, s14, s11
 8009ef0:	eddf 5a30 	vldr	s11, [pc, #192]	; 8009fb4 <__ieee754_powf+0x580>
 8009ef4:	eee6 5a07 	vfma.f32	s11, s12, s14
 8009ef8:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8009fb8 <__ieee754_powf+0x584>
 8009efc:	eea5 6a87 	vfma.f32	s12, s11, s14
 8009f00:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009fbc <__ieee754_powf+0x588>
 8009f04:	eee6 5a07 	vfma.f32	s11, s12, s14
 8009f08:	eeb0 6a66 	vmov.f32	s12, s13
 8009f0c:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8009f10:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009f14:	ee66 5a86 	vmul.f32	s11, s13, s12
 8009f18:	ee36 6a47 	vsub.f32	s12, s12, s14
 8009f1c:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8009f20:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8009f24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f28:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009f2c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009f30:	ee10 3a10 	vmov	r3, s0
 8009f34:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8009f38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009f3c:	da1f      	bge.n	8009f7e <__ieee754_powf+0x54a>
 8009f3e:	f000 f91f 	bl	800a180 <scalbnf>
 8009f42:	ee20 0a08 	vmul.f32	s0, s0, s16
 8009f46:	e58d      	b.n	8009a64 <__ieee754_powf+0x30>
 8009f48:	4a1d      	ldr	r2, [pc, #116]	; (8009fc0 <__ieee754_powf+0x58c>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	dd07      	ble.n	8009f5e <__ieee754_powf+0x52a>
 8009f4e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f56:	bf4c      	ite	mi
 8009f58:	2001      	movmi	r0, #1
 8009f5a:	2000      	movpl	r0, #0
 8009f5c:	e622      	b.n	8009ba4 <__ieee754_powf+0x170>
 8009f5e:	d108      	bne.n	8009f72 <__ieee754_powf+0x53e>
 8009f60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009f64:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8009f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f6c:	f6ff af7a 	blt.w	8009e64 <__ieee754_powf+0x430>
 8009f70:	e7ed      	b.n	8009f4e <__ieee754_powf+0x51a>
 8009f72:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8009f76:	f73f af75 	bgt.w	8009e64 <__ieee754_powf+0x430>
 8009f7a:	2000      	movs	r0, #0
 8009f7c:	e78c      	b.n	8009e98 <__ieee754_powf+0x464>
 8009f7e:	ee00 3a10 	vmov	s0, r3
 8009f82:	e7de      	b.n	8009f42 <__ieee754_powf+0x50e>
 8009f84:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009f88:	e56c      	b.n	8009a64 <__ieee754_powf+0x30>
 8009f8a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8009fc4 <__ieee754_powf+0x590>
 8009f8e:	e569      	b.n	8009a64 <__ieee754_powf+0x30>
 8009f90:	eeb0 0a48 	vmov.f32	s0, s16
 8009f94:	e566      	b.n	8009a64 <__ieee754_powf+0x30>
 8009f96:	2600      	movs	r6, #0
 8009f98:	e591      	b.n	8009abe <__ieee754_powf+0x8a>
 8009f9a:	bf00      	nop
 8009f9c:	ff800000 	.word	0xff800000
 8009fa0:	3f317218 	.word	0x3f317218
 8009fa4:	3f317200 	.word	0x3f317200
 8009fa8:	35bfbe8c 	.word	0x35bfbe8c
 8009fac:	b5ddea0e 	.word	0xb5ddea0e
 8009fb0:	3331bb4c 	.word	0x3331bb4c
 8009fb4:	388ab355 	.word	0x388ab355
 8009fb8:	bb360b61 	.word	0xbb360b61
 8009fbc:	3e2aaaab 	.word	0x3e2aaaab
 8009fc0:	43160000 	.word	0x43160000
 8009fc4:	00000000 	.word	0x00000000

08009fc8 <atanf>:
 8009fc8:	b538      	push	{r3, r4, r5, lr}
 8009fca:	ee10 5a10 	vmov	r5, s0
 8009fce:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8009fd2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8009fd6:	eef0 7a40 	vmov.f32	s15, s0
 8009fda:	db10      	blt.n	8009ffe <atanf+0x36>
 8009fdc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009fe0:	dd04      	ble.n	8009fec <atanf+0x24>
 8009fe2:	ee70 7a00 	vadd.f32	s15, s0, s0
 8009fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8009fea:	bd38      	pop	{r3, r4, r5, pc}
 8009fec:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800a124 <atanf+0x15c>
 8009ff0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800a128 <atanf+0x160>
 8009ff4:	2d00      	cmp	r5, #0
 8009ff6:	bfd8      	it	le
 8009ff8:	eef0 7a47 	vmovle.f32	s15, s14
 8009ffc:	e7f3      	b.n	8009fe6 <atanf+0x1e>
 8009ffe:	4b4b      	ldr	r3, [pc, #300]	; (800a12c <atanf+0x164>)
 800a000:	429c      	cmp	r4, r3
 800a002:	dc10      	bgt.n	800a026 <atanf+0x5e>
 800a004:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800a008:	da0a      	bge.n	800a020 <atanf+0x58>
 800a00a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800a130 <atanf+0x168>
 800a00e:	ee30 7a07 	vadd.f32	s14, s0, s14
 800a012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a016:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800a01a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a01e:	dce2      	bgt.n	8009fe6 <atanf+0x1e>
 800a020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a024:	e013      	b.n	800a04e <atanf+0x86>
 800a026:	f000 f8a3 	bl	800a170 <fabsf>
 800a02a:	4b42      	ldr	r3, [pc, #264]	; (800a134 <atanf+0x16c>)
 800a02c:	429c      	cmp	r4, r3
 800a02e:	dc4f      	bgt.n	800a0d0 <atanf+0x108>
 800a030:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800a034:	429c      	cmp	r4, r3
 800a036:	dc41      	bgt.n	800a0bc <atanf+0xf4>
 800a038:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800a03c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a040:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a044:	2300      	movs	r3, #0
 800a046:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a04a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a04e:	1c5a      	adds	r2, r3, #1
 800a050:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800a054:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800a138 <atanf+0x170>
 800a058:	eddf 5a38 	vldr	s11, [pc, #224]	; 800a13c <atanf+0x174>
 800a05c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800a140 <atanf+0x178>
 800a060:	ee66 6a06 	vmul.f32	s13, s12, s12
 800a064:	eee6 5a87 	vfma.f32	s11, s13, s14
 800a068:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a144 <atanf+0x17c>
 800a06c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a070:	eddf 5a35 	vldr	s11, [pc, #212]	; 800a148 <atanf+0x180>
 800a074:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a078:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a14c <atanf+0x184>
 800a07c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a080:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a150 <atanf+0x188>
 800a084:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a088:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800a154 <atanf+0x18c>
 800a08c:	eea6 5a87 	vfma.f32	s10, s13, s14
 800a090:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800a158 <atanf+0x190>
 800a094:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a098:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800a15c <atanf+0x194>
 800a09c:	eea7 5a26 	vfma.f32	s10, s14, s13
 800a0a0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800a160 <atanf+0x198>
 800a0a4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a0a8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a0ac:	eea5 7a86 	vfma.f32	s14, s11, s12
 800a0b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a0b4:	d121      	bne.n	800a0fa <atanf+0x132>
 800a0b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a0ba:	e794      	b.n	8009fe6 <atanf+0x1e>
 800a0bc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a0c0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a0c4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a0ce:	e7be      	b.n	800a04e <atanf+0x86>
 800a0d0:	4b24      	ldr	r3, [pc, #144]	; (800a164 <atanf+0x19c>)
 800a0d2:	429c      	cmp	r4, r3
 800a0d4:	dc0b      	bgt.n	800a0ee <atanf+0x126>
 800a0d6:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800a0da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0de:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a0e2:	2302      	movs	r3, #2
 800a0e4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a0e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0ec:	e7af      	b.n	800a04e <atanf+0x86>
 800a0ee:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a0f2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	e7a9      	b.n	800a04e <atanf+0x86>
 800a0fa:	4a1b      	ldr	r2, [pc, #108]	; (800a168 <atanf+0x1a0>)
 800a0fc:	491b      	ldr	r1, [pc, #108]	; (800a16c <atanf+0x1a4>)
 800a0fe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a102:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a106:	edd3 6a00 	vldr	s13, [r3]
 800a10a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800a10e:	2d00      	cmp	r5, #0
 800a110:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a114:	edd2 7a00 	vldr	s15, [r2]
 800a118:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a11c:	bfb8      	it	lt
 800a11e:	eef1 7a67 	vneglt.f32	s15, s15
 800a122:	e760      	b.n	8009fe6 <atanf+0x1e>
 800a124:	3fc90fdb 	.word	0x3fc90fdb
 800a128:	bfc90fdb 	.word	0xbfc90fdb
 800a12c:	3edfffff 	.word	0x3edfffff
 800a130:	7149f2ca 	.word	0x7149f2ca
 800a134:	3f97ffff 	.word	0x3f97ffff
 800a138:	3c8569d7 	.word	0x3c8569d7
 800a13c:	3d4bda59 	.word	0x3d4bda59
 800a140:	bd6ef16b 	.word	0xbd6ef16b
 800a144:	3d886b35 	.word	0x3d886b35
 800a148:	3dba2e6e 	.word	0x3dba2e6e
 800a14c:	3e124925 	.word	0x3e124925
 800a150:	3eaaaaab 	.word	0x3eaaaaab
 800a154:	bd15a221 	.word	0xbd15a221
 800a158:	bd9d8795 	.word	0xbd9d8795
 800a15c:	bde38e38 	.word	0xbde38e38
 800a160:	be4ccccd 	.word	0xbe4ccccd
 800a164:	401bffff 	.word	0x401bffff
 800a168:	0800a694 	.word	0x0800a694
 800a16c:	0800a6a4 	.word	0x0800a6a4

0800a170 <fabsf>:
 800a170:	ee10 3a10 	vmov	r3, s0
 800a174:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a178:	ee00 3a10 	vmov	s0, r3
 800a17c:	4770      	bx	lr
	...

0800a180 <scalbnf>:
 800a180:	ee10 3a10 	vmov	r3, s0
 800a184:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800a188:	d02b      	beq.n	800a1e2 <scalbnf+0x62>
 800a18a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a18e:	d302      	bcc.n	800a196 <scalbnf+0x16>
 800a190:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a194:	4770      	bx	lr
 800a196:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800a19a:	d123      	bne.n	800a1e4 <scalbnf+0x64>
 800a19c:	4b24      	ldr	r3, [pc, #144]	; (800a230 <scalbnf+0xb0>)
 800a19e:	eddf 7a25 	vldr	s15, [pc, #148]	; 800a234 <scalbnf+0xb4>
 800a1a2:	4298      	cmp	r0, r3
 800a1a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a1a8:	db17      	blt.n	800a1da <scalbnf+0x5a>
 800a1aa:	ee10 3a10 	vmov	r3, s0
 800a1ae:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a1b2:	3a19      	subs	r2, #25
 800a1b4:	f24c 3150 	movw	r1, #50000	; 0xc350
 800a1b8:	4288      	cmp	r0, r1
 800a1ba:	dd15      	ble.n	800a1e8 <scalbnf+0x68>
 800a1bc:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800a238 <scalbnf+0xb8>
 800a1c0:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800a23c <scalbnf+0xbc>
 800a1c4:	ee10 3a10 	vmov	r3, s0
 800a1c8:	eeb0 7a67 	vmov.f32	s14, s15
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	bfb8      	it	lt
 800a1d0:	eef0 7a66 	vmovlt.f32	s15, s13
 800a1d4:	ee27 0a87 	vmul.f32	s0, s15, s14
 800a1d8:	4770      	bx	lr
 800a1da:	eddf 7a19 	vldr	s15, [pc, #100]	; 800a240 <scalbnf+0xc0>
 800a1de:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a1e2:	4770      	bx	lr
 800a1e4:	0dd2      	lsrs	r2, r2, #23
 800a1e6:	e7e5      	b.n	800a1b4 <scalbnf+0x34>
 800a1e8:	4410      	add	r0, r2
 800a1ea:	28fe      	cmp	r0, #254	; 0xfe
 800a1ec:	dce6      	bgt.n	800a1bc <scalbnf+0x3c>
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	dd06      	ble.n	800a200 <scalbnf+0x80>
 800a1f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a1f6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a1fa:	ee00 3a10 	vmov	s0, r3
 800a1fe:	4770      	bx	lr
 800a200:	f110 0f16 	cmn.w	r0, #22
 800a204:	da09      	bge.n	800a21a <scalbnf+0x9a>
 800a206:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800a240 <scalbnf+0xc0>
 800a20a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800a244 <scalbnf+0xc4>
 800a20e:	ee10 3a10 	vmov	r3, s0
 800a212:	eeb0 7a67 	vmov.f32	s14, s15
 800a216:	2b00      	cmp	r3, #0
 800a218:	e7d9      	b.n	800a1ce <scalbnf+0x4e>
 800a21a:	3019      	adds	r0, #25
 800a21c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a220:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a224:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800a248 <scalbnf+0xc8>
 800a228:	ee07 3a90 	vmov	s15, r3
 800a22c:	e7d7      	b.n	800a1de <scalbnf+0x5e>
 800a22e:	bf00      	nop
 800a230:	ffff3cb0 	.word	0xffff3cb0
 800a234:	4c000000 	.word	0x4c000000
 800a238:	7149f2ca 	.word	0x7149f2ca
 800a23c:	f149f2ca 	.word	0xf149f2ca
 800a240:	0da24260 	.word	0x0da24260
 800a244:	8da24260 	.word	0x8da24260
 800a248:	33000000 	.word	0x33000000

0800a24c <with_errnof>:
 800a24c:	b513      	push	{r0, r1, r4, lr}
 800a24e:	4604      	mov	r4, r0
 800a250:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a254:	f7fd fa20 	bl	8007698 <__errno>
 800a258:	ed9d 0a01 	vldr	s0, [sp, #4]
 800a25c:	6004      	str	r4, [r0, #0]
 800a25e:	b002      	add	sp, #8
 800a260:	bd10      	pop	{r4, pc}

0800a262 <xflowf>:
 800a262:	b130      	cbz	r0, 800a272 <xflowf+0x10>
 800a264:	eef1 7a40 	vneg.f32	s15, s0
 800a268:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a26c:	2022      	movs	r0, #34	; 0x22
 800a26e:	f7ff bfed 	b.w	800a24c <with_errnof>
 800a272:	eef0 7a40 	vmov.f32	s15, s0
 800a276:	e7f7      	b.n	800a268 <xflowf+0x6>

0800a278 <__math_uflowf>:
 800a278:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a280 <__math_uflowf+0x8>
 800a27c:	f7ff bff1 	b.w	800a262 <xflowf>
 800a280:	10000000 	.word	0x10000000

0800a284 <__math_oflowf>:
 800a284:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a28c <__math_oflowf+0x8>
 800a288:	f7ff bfeb 	b.w	800a262 <xflowf>
 800a28c:	70000000 	.word	0x70000000

0800a290 <_init>:
 800a290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a292:	bf00      	nop
 800a294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a296:	bc08      	pop	{r3}
 800a298:	469e      	mov	lr, r3
 800a29a:	4770      	bx	lr

0800a29c <_fini>:
 800a29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a29e:	bf00      	nop
 800a2a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2a2:	bc08      	pop	{r3}
 800a2a4:	469e      	mov	lr, r3
 800a2a6:	4770      	bx	lr
