
ReactionWheel_F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  0800a270  0800a270  0001a270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a67c  0800a67c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a67c  0800a67c  0001a67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a684  0800a684  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a684  0800a684  0001a684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a688  0800a688  0001a688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a68c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          0000032c  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000508  20000508  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .comment      000000b8  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000155db  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003646  00000000  00000000  0003589f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000df0  00000000  00000000  00038ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a5d  00000000  00000000  00039cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000251cd  00000000  00000000  0003a735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< Updated upstream
 19 .debug_line   00017fc1  00000000  00000000  0005f902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cb863  00000000  00000000  000778c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004a74  00000000  00000000  00143128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00147b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000880  00000000  00000000  00147c05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000020  00000000  00000000  00148485  2**0
=======
 19 .debug_line   000181b9  00000000  00000000  0005f902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cb86b  00000000  00000000  00077abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004a74  00000000  00000000  00143328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00147d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000880  00000000  00000000  00147e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000020  00000000  00000000  0014868d  2**0
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a258 	.word	0x0800a258

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800a258 	.word	0x0800a258

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <App_Config>:
 */

#include "Application.h"

/* Start global function definition */
Config_Bus_t App_Config(Config_HAL_Bus_t Config_HAL_Bus){
 8000f44:	b084      	sub	sp, #16
 8000f46:	b5b0      	push	{r4, r5, r7, lr}
 8000f48:	b0a8      	sub	sp, #160	; 0xa0
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000f4e:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 8000f52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Config_Bus_t Config_Bus;

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);  // Move this later
 8000f56:	2201      	movs	r2, #1
 8000f58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5c:	481c      	ldr	r0, [pc, #112]	; (8000fd0 <App_Config+0x8c>)
 8000f5e:	f003 fb47 	bl	80045f0 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000f62:	20c8      	movs	r0, #200	; 0xc8
 8000f64:	f002 f8fe 	bl	8003164 <HAL_Delay>

	Config_Bus.Config_HAL_Bus = Config_HAL_Bus;
 8000f68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f6c:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8000f70:	224c      	movs	r2, #76	; 0x4c
 8000f72:	4618      	mov	r0, r3
 8000f74:	f006 fba0 	bl	80076b8 <memcpy>
	Config_Bus.Config_MPU6050_Bus = Config_MPU6050(Config_HAL_Bus.hi2c);
 8000f78:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 f8ab 	bl	80010dc <Config_MPU6050>
 8000f86:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8000f8a:	463d      	mov	r5, r7
 8000f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f94:	682b      	ldr	r3, [r5, #0]
 8000f96:	6023      	str	r3, [r4, #0]

	Config_DSP();
 8000f98:	f000 f886 	bl	80010a8 <Config_DSP>
	Config_VESC(Config_HAL_Bus.hcan);
 8000f9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 fab3 	bl	800150c <Config_VESC>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fac:	4808      	ldr	r0, [pc, #32]	; (8000fd0 <App_Config+0x8c>)
 8000fae:	f003 fb1f 	bl	80045f0 <HAL_GPIO_WritePin>
	return Config_Bus;
 8000fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fba:	2270      	movs	r2, #112	; 0x70
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f006 fb7b 	bl	80076b8 <memcpy>
}
 8000fc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000fc4:	37a0      	adds	r7, #160	; 0xa0
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000fcc:	b004      	add	sp, #16
 8000fce:	4770      	bx	lr
 8000fd0:	40020c00 	.word	0x40020c00

08000fd4 <App_Main>:

void App_Main(Config_Bus_t Config_Bus){
 8000fd4:	b084      	sub	sp, #16
 8000fd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd8:	b0b9      	sub	sp, #228	; 0xe4
 8000fda:	af1c      	add	r7, sp, #112	; 0x70
 8000fdc:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8000fe0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HI_Bus_t HI_Bus;
	IP_Bus_t IP_Bus;
	CT_Bus_t CT_Bus;
	OP_Bus_t OP_Bus;

	HI_Bus = IO_HardwareInputs(Config_Bus);
 8000fe4:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8000fe8:	4668      	mov	r0, sp
 8000fea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000fee:	2264      	movs	r2, #100	; 0x64
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f006 fb61 	bl	80076b8 <memcpy>
 8000ff6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ffa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ffc:	4620      	mov	r0, r4
 8000ffe:	f000 ffcb 	bl	8001f98 <IO_HardwareInputs>
	IP_Bus = PR_InputProcessing(Config_Bus, HI_Bus);
 8001002:	f107 054c 	add.w	r5, r7, #76	; 0x4c
 8001006:	ac19      	add	r4, sp, #100	; 0x64
 8001008:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800100c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001010:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001014:	4668      	mov	r0, sp
 8001016:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800101a:	2264      	movs	r2, #100	; 0x64
 800101c:	4619      	mov	r1, r3
 800101e:	f006 fb4b 	bl	80076b8 <memcpy>
 8001022:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001026:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001028:	4628      	mov	r0, r5
 800102a:	f001 fba9 	bl	8002780 <PR_InputProcessing>
	CT_Bus = CT_Control(IP_Bus);
 800102e:	f107 050c 	add.w	r5, r7, #12
 8001032:	466c      	mov	r4, sp
 8001034:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001038:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800103c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001040:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001044:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001046:	4628      	mov	r0, r5
 8001048:	f000 fabe 	bl	80015c8 <CT_Control>
	OP_Bus = PR_OutputProcessing(CT_Bus);
 800104c:	463e      	mov	r6, r7
 800104e:	466d      	mov	r5, sp
 8001050:	f107 0418 	add.w	r4, r7, #24
 8001054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001058:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800105a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800105c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800105e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001060:	6823      	ldr	r3, [r4, #0]
 8001062:	602b      	str	r3, [r5, #0]
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	cb0e      	ldmia	r3, {r1, r2, r3}
 800106a:	4630      	mov	r0, r6
 800106c:	f001 fbbb 	bl	80027e6 <PR_OutputProcessing>
	IO_HardwareOutputs(Config_Bus, OP_Bus);
 8001070:	ac18      	add	r4, sp, #96	; 0x60
 8001072:	463b      	mov	r3, r7
 8001074:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001078:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800107c:	4668      	mov	r0, sp
 800107e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001082:	2260      	movs	r2, #96	; 0x60
 8001084:	4619      	mov	r1, r3
 8001086:	f006 fb17 	bl	80076b8 <memcpy>
 800108a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800108e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001090:	f000 ffa8 	bl	8001fe4 <IO_HardwareOutputs>

	HAL_Delay(4);
 8001094:	2004      	movs	r0, #4
 8001096:	f002 f865 	bl	8003164 <HAL_Delay>
}
 800109a:	bf00      	nop
 800109c:	3774      	adds	r7, #116	; 0x74
 800109e:	46bd      	mov	sp, r7
 80010a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80010a4:	b004      	add	sp, #16
 80010a6:	4770      	bx	lr

080010a8 <Config_DSP>:

static const float iirAccelCoeffs[IIR_NUM_COEFF] = {0.010432413371093418, 0.020864826742186836, 0.010432413371093418, 1.6909963768874425, -0.7327260303718163};
/*End global variable definitions */


void Config_DSP(void){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df1_init_f32(&S_AccelRoll, IIR_NUM_STAGES, (float32_t *) &iirAccelCoeffs[0], (float32_t *) &FiltAccelRollState[0]);
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <Config_DSP+0x20>)
 80010ae:	4a07      	ldr	r2, [pc, #28]	; (80010cc <Config_DSP+0x24>)
 80010b0:	2101      	movs	r1, #1
 80010b2:	4807      	ldr	r0, [pc, #28]	; (80010d0 <Config_DSP+0x28>)
 80010b4:	f005 fbfe 	bl	80068b4 <arm_biquad_cascade_df1_init_f32>
	arm_biquad_cascade_df1_init_f32(&S_AccelPitch, IIR_NUM_STAGES, (float32_t *) &iirAccelCoeffs[0], (float32_t *) &FiltAccelPitchState[0]);
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <Config_DSP+0x2c>)
 80010ba:	4a04      	ldr	r2, [pc, #16]	; (80010cc <Config_DSP+0x24>)
 80010bc:	2101      	movs	r1, #1
 80010be:	4806      	ldr	r0, [pc, #24]	; (80010d8 <Config_DSP+0x30>)
 80010c0:	f005 fbf8 	bl	80068b4 <arm_biquad_cascade_df1_init_f32>
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000210 	.word	0x20000210
 80010cc:	0800a288 	.word	0x0800a288
 80010d0:	200001f8 	.word	0x200001f8
 80010d4:	20000220 	.word	0x20000220
 80010d8:	20000204 	.word	0x20000204

080010dc <Config_MPU6050>:
static MPU6050_IMUSensitivityData_t MPU6050_GetSens(const AFS_SEL_enum_t accelRange, const FS_SEL_enum_t gyroRange);
static MPU6050_IMUOffsetData_t MPU6050_CalibrateOffsets(I2C_HandleTypeDef *hi2c, Config_MPU6050_Bus_t Config_MPU6050_Bus);
/* Start static function prototypes */

/* Start global function definitions */
Config_MPU6050_Bus_t Config_MPU6050(I2C_HandleTypeDef *hi2c){
 80010dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010de:	b0a3      	sub	sp, #140	; 0x8c
 80010e0:	af08      	add	r7, sp, #32
 80010e2:	6278      	str	r0, [r7, #36]	; 0x24
 80010e4:	6239      	str	r1, [r7, #32]
	Config_MPU6050_Bus_t Config_MPU6050_Bus;

	MPU6050_Init(hi2c);
 80010e6:	6a38      	ldr	r0, [r7, #32]
 80010e8:	f000 f840 	bl	800116c <MPU6050_Init>

	Config_MPU6050_Bus.Sensitivity = MPU6050_GetSens(accelRange, gyroRange);
 80010ec:	2301      	movs	r3, #1
 80010ee:	2201      	movs	r2, #1
 80010f0:	4611      	mov	r1, r2
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f8ac 	bl	8001250 <MPU6050_GetSens>
 80010f8:	eeb0 7a40 	vmov.f32	s14, s0
 80010fc:	eef0 7a60 	vmov.f32	s15, s1
 8001100:	ed87 7a11 	vstr	s14, [r7, #68]	; 0x44
 8001104:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

	Config_MPU6050_Bus.Offsets = (MPU6050_IMUOffsetData_t) {0, 0, 0, 0, 0, 0, 0};
 8001108:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
 8001118:	615a      	str	r2, [r3, #20]
 800111a:	619a      	str	r2, [r3, #24]
	Config_MPU6050_Bus.Offsets = MPU6050_CalibrateOffsets(hi2c, Config_MPU6050_Bus);
 800111c:	463e      	mov	r6, r7
 800111e:	466d      	mov	r5, sp
 8001120:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001128:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800112c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001130:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001134:	cb0c      	ldmia	r3, {r2, r3}
 8001136:	6a39      	ldr	r1, [r7, #32]
 8001138:	4630      	mov	r0, r6
 800113a:	f000 f8f1 	bl	8001320 <MPU6050_CalibrateOffsets>
 800113e:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001142:	463d      	mov	r5, r7
 8001144:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001148:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800114c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return Config_MPU6050_Bus;
 8001150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001152:	461d      	mov	r5, r3
 8001154:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800115a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800115c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800115e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001160:	6823      	ldr	r3, [r4, #0]
 8001162:	602b      	str	r3, [r5, #0]
}
 8001164:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001166:	376c      	adds	r7, #108	; 0x6c
 8001168:	46bd      	mov	sp, r7
 800116a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800116c <MPU6050_Init>:
/* End global function definitions */

/* Start static function definitions */
static void MPU6050_Init(I2C_HandleTypeDef *hi2c){
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af04      	add	r7, sp, #16
 8001172:	6078      	str	r0, [r7, #4]
	static uint8_t regData;
	static uint8_t numReg = 1;

	/* I2C device check */
	// Raise error later
	HAL_StatusTypeDef deviceCheck = HAL_I2C_IsDeviceReady(hi2c, MPU6050_ADDR, 1, I2C_TIMEOUT);
 8001174:	2332      	movs	r3, #50	; 0x32
 8001176:	2201      	movs	r2, #1
 8001178:	21d0      	movs	r1, #208	; 0xd0
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f003 feb6 	bl	8004eec <HAL_I2C_IsDeviceReady>
 8001180:	4603      	mov	r3, r0
 8001182:	73fb      	strb	r3, [r7, #15]

	if (deviceCheck != HAL_OK){
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MPU6050_Init+0x22>
		Error_Handler();
 800118a:	f001 fcff 	bl	8002b8c <Error_Handler>
	}

	/* Wake IMU */
	regData = CLKSEL;
 800118e:	4b2e      	ldr	r3, [pc, #184]	; (8001248 <MPU6050_Init+0xdc>)
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, PWR_MGMT1_REG, REG_LEN, &regData, numReg, I2C_TIMEOUT);
 8001194:	4b2d      	ldr	r3, [pc, #180]	; (800124c <MPU6050_Init+0xe0>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b29b      	uxth	r3, r3
 800119a:	2232      	movs	r2, #50	; 0x32
 800119c:	9202      	str	r2, [sp, #8]
 800119e:	9301      	str	r3, [sp, #4]
 80011a0:	4b29      	ldr	r3, [pc, #164]	; (8001248 <MPU6050_Init+0xdc>)
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	226b      	movs	r2, #107	; 0x6b
 80011a8:	21d0      	movs	r1, #208	; 0xd0
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f003 fb7e 	bl	80048ac <HAL_I2C_Mem_Write>

	/* Calculate SMPLRT_DIV from desired sample rate */
	regData = SMPLRT_DIV;
 80011b0:	4b25      	ldr	r3, [pc, #148]	; (8001248 <MPU6050_Init+0xdc>)
 80011b2:	2207      	movs	r2, #7
 80011b4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, SMPRT_DIV_REG, REG_LEN, &regData, numReg, I2C_TIMEOUT);
 80011b6:	4b25      	ldr	r3, [pc, #148]	; (800124c <MPU6050_Init+0xe0>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	2232      	movs	r2, #50	; 0x32
 80011be:	9202      	str	r2, [sp, #8]
 80011c0:	9301      	str	r3, [sp, #4]
 80011c2:	4b21      	ldr	r3, [pc, #132]	; (8001248 <MPU6050_Init+0xdc>)
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2301      	movs	r3, #1
 80011c8:	2219      	movs	r2, #25
 80011ca:	21d0      	movs	r1, #208	; 0xd0
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f003 fb6d 	bl	80048ac <HAL_I2C_Mem_Write>

	/* Set gyro config */
	regData = (uint8_t) (gyroRange << 3);
 80011d2:	2301      	movs	r3, #1
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <MPU6050_Init+0xdc>)
 80011da:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, GYRO_CONFIG_REG, REG_LEN, &regData, numReg, I2C_TIMEOUT);
 80011dc:	4b1b      	ldr	r3, [pc, #108]	; (800124c <MPU6050_Init+0xe0>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	2232      	movs	r2, #50	; 0x32
 80011e4:	9202      	str	r2, [sp, #8]
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	4b17      	ldr	r3, [pc, #92]	; (8001248 <MPU6050_Init+0xdc>)
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2301      	movs	r3, #1
 80011ee:	221b      	movs	r2, #27
 80011f0:	21d0      	movs	r1, #208	; 0xd0
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f003 fb5a 	bl	80048ac <HAL_I2C_Mem_Write>

	/* Set accel config */
	regData = (uint8_t) (accelRange << 3);
 80011f8:	2301      	movs	r3, #1
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MPU6050_Init+0xdc>)
 8001200:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, ACCEL_CONFIG_REG, REG_LEN, &regData, numReg, I2C_TIMEOUT);
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <MPU6050_Init+0xe0>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	b29b      	uxth	r3, r3
 8001208:	2232      	movs	r2, #50	; 0x32
 800120a:	9202      	str	r2, [sp, #8]
 800120c:	9301      	str	r3, [sp, #4]
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MPU6050_Init+0xdc>)
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	2301      	movs	r3, #1
 8001214:	221c      	movs	r2, #28
 8001216:	21d0      	movs	r1, #208	; 0xd0
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f003 fb47 	bl	80048ac <HAL_I2C_Mem_Write>

	/*Configure low pass filter*/
	regData = DLPF_CFG;
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <MPU6050_Init+0xdc>)
 8001220:	2200      	movs	r2, #0
 8001222:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, CONFIG_REG, REG_LEN, &regData, numReg, I2C_TIMEOUT);
 8001224:	4b09      	ldr	r3, [pc, #36]	; (800124c <MPU6050_Init+0xe0>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b29b      	uxth	r3, r3
 800122a:	2232      	movs	r2, #50	; 0x32
 800122c:	9202      	str	r2, [sp, #8]
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <MPU6050_Init+0xdc>)
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2301      	movs	r3, #1
 8001236:	221a      	movs	r2, #26
 8001238:	21d0      	movs	r1, #208	; 0xd0
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f003 fb36 	bl	80048ac <HAL_I2C_Mem_Write>
}
 8001240:	bf00      	nop
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000230 	.word	0x20000230
 800124c:	20000004 	.word	0x20000004

08001250 <MPU6050_GetSens>:

static MPU6050_IMUSensitivityData_t MPU6050_GetSens(const AFS_SEL_enum_t accelRange, const FS_SEL_enum_t gyroRange){
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	460a      	mov	r2, r1
 800125a:	73fb      	strb	r3, [r7, #15]
 800125c:	4613      	mov	r3, r2
 800125e:	73bb      	strb	r3, [r7, #14]
	MPU6050_IMUSensitivityData_t IMUSensitivity;

	/* Determine sensor sensitivity based on sensor range */
	switch (accelRange){
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	2b03      	cmp	r3, #3
 8001264:	d81a      	bhi.n	800129c <MPU6050_GetSens+0x4c>
 8001266:	a201      	add	r2, pc, #4	; (adr r2, 800126c <MPU6050_GetSens+0x1c>)
 8001268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800126c:	0800127d 	.word	0x0800127d
 8001270:	08001285 	.word	0x08001285
 8001274:	0800128d 	.word	0x0800128d
 8001278:	08001295 	.word	0x08001295
	case g2:
		IMUSensitivity.AccelSens = 16384.0;
 800127c:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 8001280:	613b      	str	r3, [r7, #16]
		break;
 8001282:	e010      	b.n	80012a6 <MPU6050_GetSens+0x56>
	case g4:
		IMUSensitivity.AccelSens = 8192.0;
 8001284:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 8001288:	613b      	str	r3, [r7, #16]
		break;
 800128a:	e00c      	b.n	80012a6 <MPU6050_GetSens+0x56>
	case g8:
		IMUSensitivity.AccelSens = 4096.0;
 800128c:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8001290:	613b      	str	r3, [r7, #16]
		break;
 8001292:	e008      	b.n	80012a6 <MPU6050_GetSens+0x56>
	case g16:
		IMUSensitivity.AccelSens = 2048.0;
 8001294:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 8001298:	613b      	str	r3, [r7, #16]
		break;
 800129a:	e004      	b.n	80012a6 <MPU6050_GetSens+0x56>
	default:
		IMUSensitivity.AccelSens = 0;
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
		Error_Handler();
 80012a2:	f001 fc73 	bl	8002b8c <Error_Handler>
	}

	/* Determine sensor sensitivity based on sensor range */
	switch (gyroRange){
 80012a6:	7bbb      	ldrb	r3, [r7, #14]
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	d817      	bhi.n	80012dc <MPU6050_GetSens+0x8c>
 80012ac:	a201      	add	r2, pc, #4	; (adr r2, 80012b4 <MPU6050_GetSens+0x64>)
 80012ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b2:	bf00      	nop
 80012b4:	080012c5 	.word	0x080012c5
 80012b8:	080012cb 	.word	0x080012cb
 80012bc:	080012d1 	.word	0x080012d1
 80012c0:	080012d7 	.word	0x080012d7
	case w250:
		IMUSensitivity.GyroSens = 131.0;
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <MPU6050_GetSens+0xc0>)
 80012c6:	617b      	str	r3, [r7, #20]
		break;
 80012c8:	e00d      	b.n	80012e6 <MPU6050_GetSens+0x96>
	case w500:
		IMUSensitivity.GyroSens = 65.5;
 80012ca:	4b12      	ldr	r3, [pc, #72]	; (8001314 <MPU6050_GetSens+0xc4>)
 80012cc:	617b      	str	r3, [r7, #20]
		break;
 80012ce:	e00a      	b.n	80012e6 <MPU6050_GetSens+0x96>
	case w1000:
		IMUSensitivity.GyroSens = 32.8;
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MPU6050_GetSens+0xc8>)
 80012d2:	617b      	str	r3, [r7, #20]
		break;
 80012d4:	e007      	b.n	80012e6 <MPU6050_GetSens+0x96>
	case w2000:
		IMUSensitivity.GyroSens = 16.4;
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <MPU6050_GetSens+0xcc>)
 80012d8:	617b      	str	r3, [r7, #20]
		break;
 80012da:	e004      	b.n	80012e6 <MPU6050_GetSens+0x96>
	default:
		IMUSensitivity.GyroSens = 0;
 80012dc:	f04f 0300 	mov.w	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
		Error_Handler();
 80012e2:	f001 fc53 	bl	8002b8c <Error_Handler>
	}

	return IMUSensitivity;
 80012e6:	f107 0318 	add.w	r3, r7, #24
 80012ea:	f107 0210 	add.w	r2, r7, #16
 80012ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	ee07 2a10 	vmov	s14, r2
 80012fe:	ee07 3a90 	vmov	s15, r3
}
 8001302:	eeb0 0a47 	vmov.f32	s0, s14
 8001306:	eef0 0a67 	vmov.f32	s1, s15
 800130a:	3720      	adds	r7, #32
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	43030000 	.word	0x43030000
 8001314:	42830000 	.word	0x42830000
 8001318:	42033333 	.word	0x42033333
 800131c:	41833333 	.word	0x41833333

08001320 <MPU6050_CalibrateOffsets>:

static MPU6050_IMUOffsetData_t MPU6050_CalibrateOffsets(I2C_HandleTypeDef *hi2c, Config_MPU6050_Bus_t Config_MPU6050_Bus){
 8001320:	b082      	sub	sp, #8
 8001322:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001324:	b0a5      	sub	sp, #148	; 0x94
 8001326:	af0a      	add	r7, sp, #40	; 0x28
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	6039      	str	r1, [r7, #0]
 800132c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001330:	e881 000c 	stmia.w	r1, {r2, r3}
	MPU6050_IMUOffsetData_t IMUOffsets;
	HI_MPU6050_Bus_t HI_MPU6050_Bus;
	IP_MPU6050_Bus_t IP_MPU6050_Bus;

	uint32_t numSamples = 2000;
 8001334:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001338:	64bb      	str	r3, [r7, #72]	; 0x48

	float sumAx = 0;
 800133a:	f04f 0300 	mov.w	r3, #0
 800133e:	667b      	str	r3, [r7, #100]	; 0x64
	float sumAy = 0;
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	663b      	str	r3, [r7, #96]	; 0x60
	float sumAz = 0;
 8001346:	f04f 0300 	mov.w	r3, #0
 800134a:	65fb      	str	r3, [r7, #92]	; 0x5c
	float sumWx = 0;
 800134c:	f04f 0300 	mov.w	r3, #0
 8001350:	65bb      	str	r3, [r7, #88]	; 0x58
	float sumWy = 0;
 8001352:	f04f 0300 	mov.w	r3, #0
 8001356:	657b      	str	r3, [r7, #84]	; 0x54
	float sumWz = 0;
 8001358:	f04f 0300 	mov.w	r3, #0
 800135c:	653b      	str	r3, [r7, #80]	; 0x50

	for(uint32_t i = 0; i < numSamples; i++){
 800135e:	2300      	movs	r3, #0
 8001360:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001362:	e04c      	b.n	80013fe <MPU6050_CalibrateOffsets+0xde>
		HI_MPU6050_Bus = HI_MPU6050(hi2c);
 8001364:	f107 0320 	add.w	r3, r7, #32
 8001368:	6839      	ldr	r1, [r7, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f000 fe83 	bl	8002076 <HI_MPU6050>
		IP_MPU6050_Bus = IP_MPU6050(HI_MPU6050_Bus, Config_MPU6050_Bus);
 8001370:	f107 0608 	add.w	r6, r7, #8
 8001374:	466c      	mov	r4, sp
 8001376:	f107 0580 	add.w	r5, r7, #128	; 0x80
 800137a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800137c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800137e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001382:	682b      	ldr	r3, [r5, #0]
 8001384:	6023      	str	r3, [r4, #0]
 8001386:	f107 0320 	add.w	r3, r7, #32
 800138a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800138c:	4630      	mov	r0, r6
 800138e:	f000 ffa0 	bl	80022d2 <IP_MPU6050>

		sumAx += IP_MPU6050_Bus.accel.XOUT_ms2;
 8001392:	edd7 7a02 	vldr	s15, [r7, #8]
 8001396:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800139a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800139e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		sumAy += IP_MPU6050_Bus.accel.YOUT_ms2;
 80013a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80013a6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80013aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ae:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		sumAz += IP_MPU6050_Bus.accel.ZOUT_ms2;
 80013b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80013b6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80013ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013be:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

		sumWx += IP_MPU6050_Bus.gyro.XOUT_dps;
 80013c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80013c6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80013ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ce:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		sumWy += IP_MPU6050_Bus.gyro.YOUT_dps;
 80013d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80013d6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80013da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013de:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		sumWz += IP_MPU6050_Bus.gyro.ZOUT_dps;
 80013e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80013e6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80013ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ee:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

		HAL_Delay(5);
 80013f2:	2005      	movs	r0, #5
 80013f4:	f001 feb6 	bl	8003164 <HAL_Delay>
	for(uint32_t i = 0; i < numSamples; i++){
 80013f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013fa:	3301      	adds	r3, #1
 80013fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001402:	429a      	cmp	r2, r3
 8001404:	d3ae      	bcc.n	8001364 <MPU6050_CalibrateOffsets+0x44>
	}

	IMUOffsets.AxOffset = 0 - (sumAx / numSamples);
 8001406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001408:	ee07 3a90 	vmov	s15, r3
 800140c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001410:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8001414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001418:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001508 <MPU6050_CalibrateOffsets+0x1e8>
 800141c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001420:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	IMUOffsets.AyOffset = (9.80665 * sin(0 * PI / 180)) - (sumAy / numSamples);
 8001424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001426:	ee07 3a90 	vmov	s15, r3
 800142a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800142e:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8001432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001436:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001508 <MPU6050_CalibrateOffsets+0x1e8>
 800143a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	IMUOffsets.AzOffset = (9.80665 * cos(0 * PI / 180)) - (sumAz / numSamples);
 8001442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001444:	ee07 3a90 	vmov	s15, r3
 8001448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800144c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001450:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001454:	ee16 0a90 	vmov	r0, s13
 8001458:	f7ff f876 	bl	8000548 <__aeabi_f2d>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	a127      	add	r1, pc, #156	; (adr r1, 8001500 <MPU6050_CalibrateOffsets+0x1e0>)
 8001462:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001466:	f7fe ff0f 	bl	8000288 <__aeabi_dsub>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4610      	mov	r0, r2
 8001470:	4619      	mov	r1, r3
 8001472:	f7ff fb99 	bl	8000ba8 <__aeabi_d2f>
 8001476:	4603      	mov	r3, r0
 8001478:	637b      	str	r3, [r7, #52]	; 0x34

	IMUOffsets.WxOffset = 0 - (sumWx / numSamples);
 800147a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800147c:	ee07 3a90 	vmov	s15, r3
 8001480:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001484:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800148c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001508 <MPU6050_CalibrateOffsets+0x1e8>
 8001490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001494:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	IMUOffsets.WyOffset = 0 - (sumWy / numSamples);
 8001498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800149a:	ee07 3a90 	vmov	s15, r3
 800149e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014a2:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80014a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014aa:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001508 <MPU6050_CalibrateOffsets+0x1e8>
 80014ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	IMUOffsets.WzOffset = 0 - (sumWz / numSamples);
 80014b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014b8:	ee07 3a90 	vmov	s15, r3
 80014bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014c0:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80014c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014c8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001508 <MPU6050_CalibrateOffsets+0x1e8>
 80014cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014d0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	IMUOffsets.SensCalibrated_bool = 1;
 80014d4:	2301      	movs	r3, #1
 80014d6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	return IMUOffsets;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	461d      	mov	r5, r3
 80014de:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80014e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80014ea:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	376c      	adds	r7, #108	; 0x6c
 80014f2:	46bd      	mov	sp, r7
 80014f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80014f8:	b002      	add	sp, #8
 80014fa:	4770      	bx	lr
 80014fc:	f3af 8000 	nop.w
 8001500:	3a92a305 	.word	0x3a92a305
 8001504:	40239d01 	.word	0x40239d01
 8001508:	00000000 	.word	0x00000000

0800150c <Config_VESC>:
CAN_RxHeaderTypeDef RxHeader;
uint8_t RxData[8];
/* End global variables */

/* Start global function definitions */
void Config_VESC(CAN_HandleTypeDef *hcan){
 800150c:	b580      	push	{r7, lr}
 800150e:	b08e      	sub	sp, #56	; 0x38
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001514:	2301      	movs	r3, #1
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
	canfilterconfig.FilterBank = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800151c:	2300      	movs	r3, #0
 800151e:	61fb      	str	r3, [r7, #28]
	canfilterconfig.FilterIdHigh = 0x0000;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterIdLow = ((CAN_ID1 << 3) ^ (CAN_IDE1 << 2)) ^ (CAN_RTR1 << 1);
 8001524:	f644 030c 	movw	r3, #18444	; 0x480c
 8001528:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterMaskIdHigh = 0x0000;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8001532:	2301      	movs	r3, #1
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001536:	2301      	movs	r3, #1
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28

	HAL_CAN_ConfigFilter(hcan, &canfilterconfig);
 800153a:	f107 030c 	add.w	r3, r7, #12
 800153e:	4619      	mov	r1, r3
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f002 f829 	bl	8003598 <HAL_CAN_ConfigFilter>

	void (*pCAN_RxCallback)(CAN_HandleTypeDef *_hcan) = &CAN_HAL_RxFifo0MsgPendingCallback;
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <Config_VESC+0x90>)
 8001548:	637b      	str	r3, [r7, #52]	; 0x34

	if(HAL_CAN_RegisterCallback(hcan, HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID, pCAN_RxCallback) != HAL_OK){
 800154a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800154c:	2106      	movs	r1, #6
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f001 ff72 	bl	8003438 <HAL_CAN_RegisterCallback>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <Config_VESC+0x52>
	  Error_Handler();
 800155a:	f001 fb17 	bl	8002b8c <Error_Handler>
	}

	HAL_CAN_Start(hcan);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f002 f8fa 	bl	8003758 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001564:	2102      	movs	r1, #2
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f002 fb27 	bl	8003bba <HAL_CAN_ActivateNotification>

	TxHeader.DLC = 4;
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <Config_VESC+0x94>)
 800156e:	2204      	movs	r2, #4
 8001570:	611a      	str	r2, [r3, #16]
	TxHeader.ExtId = 0x301;
 8001572:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <Config_VESC+0x94>)
 8001574:	f240 3201 	movw	r2, #769	; 0x301
 8001578:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_EXT;
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <Config_VESC+0x94>)
 800157c:	2204      	movs	r2, #4
 800157e:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8001580:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <Config_VESC+0x94>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0;
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <Config_VESC+0x94>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
	TxHeader.TransmitGlobalTime = DISABLE;
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <Config_VESC+0x94>)
 800158e:	2200      	movs	r2, #0
 8001590:	751a      	strb	r2, [r3, #20]
}
 8001592:	bf00      	nop
 8001594:	3738      	adds	r7, #56	; 0x38
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	080015a5 	.word	0x080015a5
 80015a0:	20000234 	.word	0x20000234

080015a4 <CAN_HAL_RxFifo0MsgPendingCallback>:

void CAN_HAL_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <CAN_HAL_RxFifo0MsgPendingCallback+0x1c>)
 80015ae:	4a05      	ldr	r2, [pc, #20]	; (80015c4 <CAN_HAL_RxFifo0MsgPendingCallback+0x20>)
 80015b0:	2100      	movs	r1, #0
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f002 f9ef 	bl	8003996 <HAL_CAN_GetRxMessage>
}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	2000026c 	.word	0x2000026c
 80015c4:	20000250 	.word	0x20000250

080015c8 <CT_Control>:
static VS_Bus_t CT_VirtualSensors(IP_Bus_t IP_Bus);
static CT_Bus_t CT_Controllers(IP_Bus_t IP_Bus, VS_Bus_t VS_Bus);
/* End Static function prototypes */

/* Start global function definitions */
CT_Bus_t CT_Control(IP_Bus_t IP_Bus){
 80015c8:	b084      	sub	sp, #16
 80015ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015cc:	b0af      	sub	sp, #188	; 0xbc
 80015ce:	af10      	add	r7, sp, #64	; 0x40
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80015d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	VS_Bus_t VS_Bus;
	CT_Bus_t CT_Bus;

	VS_Bus = CT_VirtualSensors(IP_Bus);
 80015da:	f107 0548 	add.w	r5, r7, #72	; 0x48
 80015de:	466c      	mov	r4, sp
 80015e0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80015e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80015ec:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015f2:	4628      	mov	r0, r5
 80015f4:	f000 f82f 	bl	8001656 <CT_VirtualSensors>
	CT_Bus = CT_Controllers(IP_Bus, VS_Bus);
 80015f8:	f107 0608 	add.w	r6, r7, #8
 80015fc:	ad03      	add	r5, sp, #12
 80015fe:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001608:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800160a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800160e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001612:	466c      	mov	r4, sp
 8001614:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001618:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800161c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001620:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001624:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001626:	4630      	mov	r0, r6
 8001628:	f000 f84a 	bl	80016c0 <CT_Controllers>

	return CT_Bus;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	461d      	mov	r5, r3
 8001630:	f107 0408 	add.w	r4, r7, #8
 8001634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800163a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800163c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800163e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001640:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001644:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	377c      	adds	r7, #124	; 0x7c
 800164c:	46bd      	mov	sp, r7
 800164e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001652:	b004      	add	sp, #16
 8001654:	4770      	bx	lr

08001656 <CT_VirtualSensors>:
/* End global function definitions */

/* Start Static function definitions */
static VS_Bus_t CT_VirtualSensors(IP_Bus_t IP_Bus){
 8001656:	b084      	sub	sp, #16
 8001658:	b5b0      	push	{r4, r5, r7, lr}
 800165a:	b09e      	sub	sp, #120	; 0x78
 800165c:	af04      	add	r7, sp, #16
 800165e:	6378      	str	r0, [r7, #52]	; 0x34
 8001660:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8001664:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	VS_Bus_t VS_Bus;

	VS_Bus.VS_Orientation_Bus = EstimateOrientation(IP_Bus.IP_MPU6050_Bus);
 8001668:	463d      	mov	r5, r7
 800166a:	466c      	mov	r4, sp
 800166c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001670:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001674:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001678:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800167c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800167e:	4628      	mov	r0, r5
 8001680:	f000 f96e 	bl	8001960 <EstimateOrientation>
 8001684:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001688:	463d      	mov	r5, r7
 800168a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800168c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800168e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001692:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001696:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	return VS_Bus;
 800169a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800169c:	461d      	mov	r5, r3
 800169e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80016a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016ae:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80016b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80016b4:	3768      	adds	r7, #104	; 0x68
 80016b6:	46bd      	mov	sp, r7
 80016b8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80016bc:	b004      	add	sp, #16
 80016be:	4770      	bx	lr

080016c0 <CT_Controllers>:

static CT_Bus_t CT_Controllers(IP_Bus_t IP_Bus, VS_Bus_t VS_Bus){
 80016c0:	b084      	sub	sp, #16
 80016c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c4:	b0a5      	sub	sp, #148	; 0x94
 80016c6:	af10      	add	r7, sp, #64	; 0x40
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80016ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	CT_Bus_t CT_Bus;

	CT_Bus.VS_Bus = VS_Bus;
 80016d2:	f107 0410 	add.w	r4, r7, #16
 80016d6:	f107 0584 	add.w	r5, r7, #132	; 0x84
 80016da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80016e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	CT_Bus.CT_Log_Bus = CT_Logging(IP_Bus.IP_MPU6050_Bus, VS_Bus.VS_Orientation_Bus);
 80016ea:	463e      	mov	r6, r7
 80016ec:	ad03      	add	r5, sp, #12
 80016ee:	f107 0484 	add.w	r4, r7, #132	; 0x84
 80016f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016fe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001702:	466c      	mov	r4, sp
 8001704:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001708:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800170c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001710:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001714:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001716:	4630      	mov	r0, r6
 8001718:	f000 f8b0 	bl	800187c <CT_Logging>
 800171c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001720:	463a      	mov	r2, r7
 8001722:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001726:	e883 0003 	stmia.w	r3, {r0, r1}
	CT_Bus.CT_Balance_Bus = CT_BalanceController(0, VS_Bus.VS_Orientation_Bus.CompFiltOrientation.roll_deg);
 800172a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800172e:	463b      	mov	r3, r7
 8001730:	eeb0 0a67 	vmov.f32	s0, s15
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f000 f81c 	bl	8001774 <CT_BalanceController>
 800173c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001740:	463a      	mov	r2, r7
 8001742:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001746:	e883 0003 	stmia.w	r3, {r0, r1}

	return CT_Bus;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	461d      	mov	r5, r3
 800174e:	f107 0410 	add.w	r4, r7, #16
 8001752:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001754:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001756:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001758:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800175a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800175c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800175e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001762:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	3754      	adds	r7, #84	; 0x54
 800176a:	46bd      	mov	sp, r7
 800176c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001770:	b004      	add	sp, #16
 8001772:	4770      	bx	lr

08001774 <CT_BalanceController>:
/* Start Static function prototypes */
static int8_t signf(float x);
/* End Static function prototypes */

/* Start Global Function Definitions */
CT_Balance_Bus_t CT_BalanceController(uint8_t BalanceEnable_bool, float RollAng_deg){
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	; 0x28
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	460b      	mov	r3, r1
 800177e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001782:	72fb      	strb	r3, [r7, #11]
	CT_Balance_Bus_t CT_Balance_Bus;

	uint32_t MaxMotorSpeed_rpm = 11000;
 8001784:	f642 23f8 	movw	r3, #11000	; 0x2af8
 8001788:	623b      	str	r3, [r7, #32]
	uint32_t MaxRollAng_deg = 45;
 800178a:	232d      	movs	r3, #45	; 0x2d
 800178c:	61fb      	str	r3, [r7, #28]

	// Limit throttle request to -1 / 1
	float ThrottleReq_pct = RollAng_deg / MaxRollAng_deg;
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	ee07 3a90 	vmov	s15, r3
 8001794:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001798:	edd7 6a01 	vldr	s13, [r7, #4]
 800179c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017a0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	if(fabsf(ThrottleReq_pct) > 1){
 80017a4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80017a8:	eef0 7ae7 	vabs.f32	s15, s15
 80017ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b8:	dd0a      	ble.n	80017d0 <CT_BalanceController+0x5c>
		ThrottleReq_pct = 1 * signf(ThrottleReq_pct);
 80017ba:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80017be:	f000 f839 	bl	8001834 <signf>
 80017c2:	4603      	mov	r3, r0
 80017c4:	ee07 3a90 	vmov	s15, r3
 80017c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017cc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	}

	// Throttle deadzone
	if(fabsf(RollAng_deg) < 2){
 80017d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80017d4:	eef0 7ae7 	vabs.f32	s15, s15
 80017d8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80017dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e4:	d502      	bpl.n	80017ec <CT_BalanceController+0x78>
		BalanceEnable_bool = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	72fb      	strb	r3, [r7, #11]
 80017ea:	e001      	b.n	80017f0 <CT_BalanceController+0x7c>
	} else{
		BalanceEnable_bool = 1;
 80017ec:	2301      	movs	r3, #1
 80017ee:	72fb      	strb	r3, [r7, #11]
	}

	// Zero out throttle if not enabled
	if(!BalanceEnable_bool){
 80017f0:	7afb      	ldrb	r3, [r7, #11]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d102      	bne.n	80017fc <CT_BalanceController+0x88>
		ThrottleReq_pct = 0;
 80017f6:	f04f 0300 	mov.w	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
	}

	CT_Balance_Bus.MotorSpeedReq_rpm = ThrottleReq_pct * MaxMotorSpeed_rpm;
 80017fc:	6a3b      	ldr	r3, [r7, #32]
 80017fe:	ee07 3a90 	vmov	s15, r3
 8001802:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001806:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800180a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800180e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001812:	ee17 3a90 	vmov	r3, s15
 8001816:	617b      	str	r3, [r7, #20]
	CT_Balance_Bus.ThrottleReq_pct = ThrottleReq_pct;
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	61bb      	str	r3, [r7, #24]

	return CT_Balance_Bus;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	461a      	mov	r2, r3
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001828:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800182c:	68f8      	ldr	r0, [r7, #12]
 800182e:	3728      	adds	r7, #40	; 0x28
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <signf>:
/* End Global Function Definitions */

/* Start Static Function Definitions */
static int8_t signf(float x){
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	ed87 0a01 	vstr	s0, [r7, #4]
	int8_t sign;

	if (x > 0){
 800183e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001842:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184a:	dd02      	ble.n	8001852 <signf+0x1e>
		sign = 1;
 800184c:	2301      	movs	r3, #1
 800184e:	73fb      	strb	r3, [r7, #15]
 8001850:	e00b      	b.n	800186a <signf+0x36>
	}
	else if (x < 0) {
 8001852:	edd7 7a01 	vldr	s15, [r7, #4]
 8001856:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800185a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185e:	d502      	bpl.n	8001866 <signf+0x32>
		sign = -1;
 8001860:	23ff      	movs	r3, #255	; 0xff
 8001862:	73fb      	strb	r3, [r7, #15]
 8001864:	e001      	b.n	800186a <signf+0x36>
	}
	else {
		sign = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	73fb      	strb	r3, [r7, #15]
	}

	return sign;
 800186a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
	...

0800187c <CT_Logging>:
/* Start Function Prototypes */
static StringPacket_t MakeLogString(uint8_t *msg, uint16_t msgLen, IP_MPU6050_Bus_t IP_MPU6050_Bus, VS_Orientation_Bus_t VS_Orientation_Bus);
/* End Function Prototypes */

/* Start Global Function Definitions */
CT_Log_Bus_t CT_Logging(IP_MPU6050_Bus_t IP_MPU6050_Bus, VS_Orientation_Bus_t VS_Orientation_Bus){
 800187c:	b084      	sub	sp, #16
 800187e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001880:	b099      	sub	sp, #100	; 0x64
 8001882:	af12      	add	r7, sp, #72	; 0x48
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800188a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	StringPacket_t StringPacket;
	CT_Log_Bus_t Log_Bus;

	StringPacket = MakeLogString(msg, msgLen, IP_MPU6050_Bus, VS_Orientation_Bus);
 800188e:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <CT_Logging+0x74>)
 8001890:	f8b3 c000 	ldrh.w	ip, [r3]
 8001894:	f107 0610 	add.w	r6, r7, #16
 8001898:	ad05      	add	r5, sp, #20
 800189a:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800189e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018aa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80018ae:	466d      	mov	r5, sp
 80018b0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80018b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018b8:	6823      	ldr	r3, [r4, #0]
 80018ba:	602b      	str	r3, [r5, #0]
 80018bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018be:	4662      	mov	r2, ip
 80018c0:	490c      	ldr	r1, [pc, #48]	; (80018f4 <CT_Logging+0x78>)
 80018c2:	4630      	mov	r0, r6
 80018c4:	f000 f818 	bl	80018f8 <MakeLogString>

	Log_Bus.pData = StringPacket.pData;
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	60bb      	str	r3, [r7, #8]
	Log_Bus.Size = StringPacket.Size;
 80018cc:	8abb      	ldrh	r3, [r7, #20]
 80018ce:	81bb      	strh	r3, [r7, #12]

	return Log_Bus;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	461a      	mov	r2, r3
 80018d4:	f107 0308 	add.w	r3, r7, #8
 80018d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018dc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	371c      	adds	r7, #28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80018ea:	b004      	add	sp, #16
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20000006 	.word	0x20000006
 80018f4:	20000274 	.word	0x20000274

080018f8 <MakeLogString>:
/* End Global Function Definitions */

/* Start Static Function Definitions */
static StringPacket_t MakeLogString(uint8_t *msg, uint16_t msgLen, IP_MPU6050_Bus_t IP_MPU6050_Bus, VS_Orientation_Bus_t VS_Orientation_Bus){
 80018f8:	b082      	sub	sp, #8
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b08a      	sub	sp, #40	; 0x28
 80018fe:	af02      	add	r7, sp, #8
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001906:	4613      	mov	r3, r2
 8001908:	80fb      	strh	r3, [r7, #6]
	StringPacket_t StringPacket;

	uint32_t tick = HAL_GetTick();
 800190a:	f001 fc1f 	bl	800314c <HAL_GetTick>
 800190e:	61f8      	str	r0, [r7, #28]

	memset(msg, '\0', msgLen);  // Set unused indexes to null char
 8001910:	88fb      	ldrh	r3, [r7, #6]
 8001912:	461a      	mov	r2, r3
 8001914:	2100      	movs	r1, #0
 8001916:	68b8      	ldr	r0, [r7, #8]
 8001918:	f005 fe4f 	bl	80075ba <memset>
//	sprintf((char*) msg, "TK:%lu,AX:%.3f,AY:%.3f,AZ:%.3f,WX:%.3f,WY:%.3f,WZ:%.3f\n\r",
//			tick,
//			IP_MPU6050_Bus.accel.XOUT_ms2, IP_MPU6050_Bus.accel.YOUT_ms2, IP_MPU6050_Bus.accel.ZOUT_ms2,
//			IP_MPU6050_Bus.gyro.XOUT_dps, IP_MPU6050_Bus.gyro.YOUT_dps, IP_MPU6050_Bus.gyro.ZOUT_dps);

	sprintf((char*) msg, "TK:%lu,compRoll:%.5f\n\r", tick, VS_Orientation_Bus.CompFiltOrientation.roll_deg);
 800191c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fe12 	bl	8000548 <__aeabi_f2d>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	e9cd 2300 	strd	r2, r3, [sp]
 800192c:	69fa      	ldr	r2, [r7, #28]
 800192e:	490b      	ldr	r1, [pc, #44]	; (800195c <MakeLogString+0x64>)
 8001930:	68b8      	ldr	r0, [r7, #8]
 8001932:	f005 fddf 	bl	80074f4 <siprintf>

	StringPacket.pData = msg;
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	617b      	str	r3, [r7, #20]
	StringPacket.Size = msgLen;
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	833b      	strh	r3, [r7, #24]

	return StringPacket;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	461a      	mov	r2, r3
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	e893 0003 	ldmia.w	r3, {r0, r1}
 800194a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	3720      	adds	r7, #32
 8001952:	46bd      	mov	sp, r7
 8001954:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001958:	b002      	add	sp, #8
 800195a:	4770      	bx	lr
 800195c:	0800a270 	.word	0x0800a270

08001960 <EstimateOrientation>:
static VS_OrientationData_t AccelLowPassFilt(VS_OrientationData_t AccelOrientation);
static VS_OrientationData_t ComplimentaryFilter(VS_OrientationData_t GyroOrientation, VS_OrientationData_t FiltAccelOrientation);
/* End Static Function Prototypes */

/* Start Global Function Definitions */
VS_Orientation_Bus_t EstimateOrientation(IP_MPU6050_Bus_t IP_MPU6050_Bus){
 8001960:	b084      	sub	sp, #16
 8001962:	b5b0      	push	{r4, r5, r7, lr}
 8001964:	b08e      	sub	sp, #56	; 0x38
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800196e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	VS_Orientation_Bus_t VS_Orientation_Bus;

	VS_Orientation_Bus.AccelOrientation = CalcAccelAngle(IP_MPU6050_Bus.accel);
 8001972:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8001976:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800197a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800197e:	eeb0 0a66 	vmov.f32	s0, s13
 8001982:	eef0 0a47 	vmov.f32	s1, s14
 8001986:	eeb0 1a67 	vmov.f32	s2, s15
 800198a:	f000 f891 	bl	8001ab0 <CalcAccelAngle>
 800198e:	eef0 6a40 	vmov.f32	s13, s0
 8001992:	eeb0 7a60 	vmov.f32	s14, s1
 8001996:	eef0 7a41 	vmov.f32	s15, s2
 800199a:	edc7 6a02 	vstr	s13, [r7, #8]
 800199e:	ed87 7a03 	vstr	s14, [r7, #12]
 80019a2:	edc7 7a04 	vstr	s15, [r7, #16]

	ResetGyroIntegrators(VS_Orientation_Bus.AccelOrientation.roll_deg, VS_Orientation_Bus.AccelOrientation.pitch_deg);
 80019a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80019aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80019ae:	eef0 0a47 	vmov.f32	s1, s14
 80019b2:	eeb0 0a67 	vmov.f32	s0, s15
 80019b6:	f000 f9a7 	bl	8001d08 <ResetGyroIntegrators>

	VS_Orientation_Bus.FiltAccelOrientation = AccelLowPassFilt(VS_Orientation_Bus.AccelOrientation);
 80019ba:	edd7 6a02 	vldr	s13, [r7, #8]
 80019be:	ed97 7a03 	vldr	s14, [r7, #12]
 80019c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80019c6:	eeb0 0a66 	vmov.f32	s0, s13
 80019ca:	eef0 0a47 	vmov.f32	s1, s14
 80019ce:	eeb0 1a67 	vmov.f32	s2, s15
 80019d2:	f000 fa35 	bl	8001e40 <AccelLowPassFilt>
 80019d6:	eef0 6a40 	vmov.f32	s13, s0
 80019da:	eeb0 7a60 	vmov.f32	s14, s1
 80019de:	eef0 7a41 	vmov.f32	s15, s2
 80019e2:	edc7 6a08 	vstr	s13, [r7, #32]
 80019e6:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 80019ea:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	VS_Orientation_Bus.GyroOrientation = CalcGyroAngle(IP_MPU6050_Bus.gyro, VS_Orientation_Bus.FiltAccelOrientation);
 80019ee:	ed97 5a08 	vldr	s10, [r7, #32]
 80019f2:	edd7 5a09 	vldr	s11, [r7, #36]	; 0x24
 80019f6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80019fa:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80019fe:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001a02:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a06:	eef0 1a45 	vmov.f32	s3, s10
 8001a0a:	eeb0 2a65 	vmov.f32	s4, s11
 8001a0e:	eef0 2a46 	vmov.f32	s5, s12
 8001a12:	eeb0 0a66 	vmov.f32	s0, s13
 8001a16:	eef0 0a47 	vmov.f32	s1, s14
 8001a1a:	eeb0 1a67 	vmov.f32	s2, s15
 8001a1e:	f000 f8e1 	bl	8001be4 <CalcGyroAngle>
 8001a22:	eef0 6a40 	vmov.f32	s13, s0
 8001a26:	eeb0 7a60 	vmov.f32	s14, s1
 8001a2a:	eef0 7a41 	vmov.f32	s15, s2
 8001a2e:	edc7 6a05 	vstr	s13, [r7, #20]
 8001a32:	ed87 7a06 	vstr	s14, [r7, #24]
 8001a36:	edc7 7a07 	vstr	s15, [r7, #28]

	VS_Orientation_Bus.CompFiltOrientation = ComplimentaryFilter(VS_Orientation_Bus.GyroOrientation, VS_Orientation_Bus.FiltAccelOrientation);
 8001a3a:	ed97 5a08 	vldr	s10, [r7, #32]
 8001a3e:	edd7 5a09 	vldr	s11, [r7, #36]	; 0x24
 8001a42:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8001a46:	edd7 6a05 	vldr	s13, [r7, #20]
 8001a4a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a4e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a52:	eef0 1a45 	vmov.f32	s3, s10
 8001a56:	eeb0 2a65 	vmov.f32	s4, s11
 8001a5a:	eef0 2a46 	vmov.f32	s5, s12
 8001a5e:	eeb0 0a66 	vmov.f32	s0, s13
 8001a62:	eef0 0a47 	vmov.f32	s1, s14
 8001a66:	eeb0 1a67 	vmov.f32	s2, s15
 8001a6a:	f000 fa2f 	bl	8001ecc <ComplimentaryFilter>
 8001a6e:	eef0 6a40 	vmov.f32	s13, s0
 8001a72:	eeb0 7a60 	vmov.f32	s14, s1
 8001a76:	eef0 7a41 	vmov.f32	s15, s2
 8001a7a:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8001a7e:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8001a82:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	return VS_Orientation_Bus;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	461d      	mov	r5, r3
 8001a8a:	f107 0408 	add.w	r4, r7, #8
 8001a8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a96:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a9a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	3738      	adds	r7, #56	; 0x38
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001aa8:	b004      	add	sp, #16
 8001aaa:	4770      	bx	lr
 8001aac:	0000      	movs	r0, r0
	...

08001ab0 <CalcAccelAngle>:
/* End Global Function Definitions */

/* Start Static Function Definitions */
static VS_OrientationData_t CalcAccelAngle(MPU6050_AccelData_t MPU6050_AccelData){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	ed2d 8b02 	vpush	{d8}
 8001ab6:	b090      	sub	sp, #64	; 0x40
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	eef0 6a40 	vmov.f32	s13, s0
 8001abe:	eeb0 7a60 	vmov.f32	s14, s1
 8001ac2:	eef0 7a41 	vmov.f32	s15, s2
 8001ac6:	edc7 6a05 	vstr	s13, [r7, #20]
 8001aca:	ed87 7a06 	vstr	s14, [r7, #24]
 8001ace:	edc7 7a07 	vstr	s15, [r7, #28]
	VS_OrientationData_t AccelOrientation;

	float roll_rad = atan2f(MPU6050_AccelData.YOUT_ms2, MPU6050_AccelData.ZOUT_ms2);
 8001ad2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ad6:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ada:	eef0 0a47 	vmov.f32	s1, s14
 8001ade:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae2:	f007 fe63 	bl	80097ac <atan2f>
 8001ae6:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
	float pitch_rad = atan2f(-1 * MPU6050_AccelData.XOUT_ms2, sqrtf(powf(MPU6050_AccelData.YOUT_ms2, 2) + powf(MPU6050_AccelData.ZOUT_ms2, 2)));
 8001aea:	edd7 7a05 	vldr	s15, [r7, #20]
 8001aee:	eeb1 8a67 	vneg.f32	s16, s15
 8001af2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001af6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001afa:	eeb0 0a67 	vmov.f32	s0, s15
 8001afe:	f007 fe57 	bl	80097b0 <powf>
 8001b02:	eef0 8a40 	vmov.f32	s17, s0
 8001b06:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b0a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001b0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b12:	f007 fe4d 	bl	80097b0 <powf>
 8001b16:	eef0 7a40 	vmov.f32	s15, s0
 8001b1a:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8001b1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b22:	f007 fe9d 	bl	8009860 <sqrtf>
 8001b26:	eef0 7a40 	vmov.f32	s15, s0
 8001b2a:	eef0 0a67 	vmov.f32	s1, s15
 8001b2e:	eeb0 0a48 	vmov.f32	s0, s16
 8001b32:	f007 fe3b 	bl	80097ac <atan2f>
 8001b36:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

	AccelOrientation.roll_deg = roll_rad * 180 / M_PI;
 8001b3a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b3e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001be0 <CalcAccelAngle+0x130>
 8001b42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b46:	ee17 0a90 	vmov	r0, s15
 8001b4a:	f7fe fcfd 	bl	8000548 <__aeabi_f2d>
 8001b4e:	a322      	add	r3, pc, #136	; (adr r3, 8001bd8 <CalcAccelAngle+0x128>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	f7fe fe7a 	bl	800084c <__aeabi_ddiv>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f7ff f822 	bl	8000ba8 <__aeabi_d2f>
 8001b64:	4603      	mov	r3, r0
 8001b66:	623b      	str	r3, [r7, #32]
	AccelOrientation.pitch_deg = pitch_rad * 180 / M_PI;
 8001b68:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001b6c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001be0 <CalcAccelAngle+0x130>
 8001b70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b74:	ee17 0a90 	vmov	r0, s15
 8001b78:	f7fe fce6 	bl	8000548 <__aeabi_f2d>
 8001b7c:	a316      	add	r3, pc, #88	; (adr r3, 8001bd8 <CalcAccelAngle+0x128>)
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	f7fe fe63 	bl	800084c <__aeabi_ddiv>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f7ff f80b 	bl	8000ba8 <__aeabi_d2f>
 8001b92:	4603      	mov	r3, r0
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
	AccelOrientation.yaw_deg = 0;  // No accurate way to calculate this
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28

	return AccelOrientation;
 8001b9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba0:	f107 0220 	add.w	r2, r7, #32
 8001ba4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ba6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001baa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb0:	ee06 1a90 	vmov	s13, r1
 8001bb4:	ee07 2a10 	vmov	s14, r2
 8001bb8:	ee07 3a90 	vmov	s15, r3
}
 8001bbc:	eeb0 0a66 	vmov.f32	s0, s13
 8001bc0:	eef0 0a47 	vmov.f32	s1, s14
 8001bc4:	eeb0 1a67 	vmov.f32	s2, s15
 8001bc8:	3740      	adds	r7, #64	; 0x40
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	ecbd 8b02 	vpop	{d8}
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	f3af 8000 	nop.w
 8001bd8:	54442d18 	.word	0x54442d18
 8001bdc:	400921fb 	.word	0x400921fb
 8001be0:	43340000 	.word	0x43340000

08001be4 <CalcGyroAngle>:

static VS_OrientationData_t CalcGyroAngle(MPU6050_GyroData_t MPU6050_GyroData, VS_OrientationData_t FiltAccelOrientation){
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b092      	sub	sp, #72	; 0x48
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	eeb0 5a40 	vmov.f32	s10, s0
 8001bee:	eef0 5a60 	vmov.f32	s11, s1
 8001bf2:	eeb0 6a41 	vmov.f32	s12, s2
 8001bf6:	eef0 6a61 	vmov.f32	s13, s3
 8001bfa:	eeb0 7a42 	vmov.f32	s14, s4
 8001bfe:	eef0 7a62 	vmov.f32	s15, s5
 8001c02:	ed87 5a07 	vstr	s10, [r7, #28]
 8001c06:	edc7 5a08 	vstr	s11, [r7, #32]
 8001c0a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001c0e:	edc7 6a04 	vstr	s13, [r7, #16]
 8001c12:	ed87 7a05 	vstr	s14, [r7, #20]
 8001c16:	edc7 7a06 	vstr	s15, [r7, #24]
	VS_OrientationData_t GyroOrientation;
	uint32_t currentTick = HAL_GetTick();
 8001c1a:	f001 fa97 	bl	800314c <HAL_GetTick>
 8001c1e:	6478      	str	r0, [r7, #68]	; 0x44
	float dt = ((float) currentTick - (float) lastTick) / 1000;
 8001c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c22:	ee07 3a90 	vmov	s15, r3
 8001c26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c2a:	4b31      	ldr	r3, [pc, #196]	; (8001cf0 <CalcGyroAngle+0x10c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	ee07 3a90 	vmov	s15, r3
 8001c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c3a:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001cf4 <CalcGyroAngle+0x110>
 8001c3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c42:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	// Integrator reset logic
	if(resetGyroRoll_bool){
 8001c46:	4b2c      	ldr	r3, [pc, #176]	; (8001cf8 <CalcGyroAngle+0x114>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d005      	beq.n	8001c5a <CalcGyroAngle+0x76>
		lastRollAng_deg = FiltAccelOrientation.roll_deg;
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	4a2a      	ldr	r2, [pc, #168]	; (8001cfc <CalcGyroAngle+0x118>)
 8001c52:	6013      	str	r3, [r2, #0]
		resetGyroRoll_bool = 0;
 8001c54:	4b28      	ldr	r3, [pc, #160]	; (8001cf8 <CalcGyroAngle+0x114>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	701a      	strb	r2, [r3, #0]
	}

	if(resetGyroPitch_bool){
 8001c5a:	4b29      	ldr	r3, [pc, #164]	; (8001d00 <CalcGyroAngle+0x11c>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d006      	beq.n	8001c70 <CalcGyroAngle+0x8c>
		lastPitchAng_deg = 0;
 8001c62:	4b28      	ldr	r3, [pc, #160]	; (8001d04 <CalcGyroAngle+0x120>)
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
		resetGyroPitch_bool = 0;
 8001c6a:	4b25      	ldr	r3, [pc, #148]	; (8001d00 <CalcGyroAngle+0x11c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	701a      	strb	r2, [r3, #0]
	}

	// Integrate angular velocities
	GyroOrientation.roll_deg = lastRollAng_deg + MPU6050_GyroData.XOUT_dps * dt;
 8001c70:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c74:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001c78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c7c:	4b1f      	ldr	r3, [pc, #124]	; (8001cfc <CalcGyroAngle+0x118>)
 8001c7e:	edd3 7a00 	vldr	s15, [r3]
 8001c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c86:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	GyroOrientation.pitch_deg = lastPitchAng_deg + MPU6050_GyroData.YOUT_dps * dt;
 8001c8a:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c8e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001c92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c96:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <CalcGyroAngle+0x120>)
 8001c98:	edd3 7a00 	vldr	s15, [r3]
 8001c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	GyroOrientation.yaw_deg = 0;  // No accurate way to calculate this
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	633b      	str	r3, [r7, #48]	; 0x30

	// Store previous values
	lastTick = currentTick;
 8001caa:	4a11      	ldr	r2, [pc, #68]	; (8001cf0 <CalcGyroAngle+0x10c>)
 8001cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cae:	6013      	str	r3, [r2, #0]
	lastRollAng_deg = GyroOrientation.roll_deg;
 8001cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb2:	4a12      	ldr	r2, [pc, #72]	; (8001cfc <CalcGyroAngle+0x118>)
 8001cb4:	6013      	str	r3, [r2, #0]
	lastPitchAng_deg = GyroOrientation.pitch_deg;
 8001cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb8:	4a12      	ldr	r2, [pc, #72]	; (8001d04 <CalcGyroAngle+0x120>)
 8001cba:	6013      	str	r3, [r2, #0]

	return GyroOrientation;
 8001cbc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cc0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cc4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001cca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001ccc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cd0:	ee06 1a90 	vmov	s13, r1
 8001cd4:	ee07 2a10 	vmov	s14, r2
 8001cd8:	ee07 3a90 	vmov	s15, r3
}
 8001cdc:	eeb0 0a66 	vmov.f32	s0, s13
 8001ce0:	eef0 0a47 	vmov.f32	s1, s14
 8001ce4:	eeb0 1a67 	vmov.f32	s2, s15
 8001ce8:	3748      	adds	r7, #72	; 0x48
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200002a8 	.word	0x200002a8
 8001cf4:	447a0000 	.word	0x447a0000
 8001cf8:	2000029c 	.word	0x2000029c
 8001cfc:	200002ac 	.word	0x200002ac
 8001d00:	2000029d 	.word	0x2000029d
 8001d04:	200002b0 	.word	0x200002b0

08001d08 <ResetGyroIntegrators>:

static void ResetGyroIntegrators(float accelRoll_deg, float accelPitch_deg){
 8001d08:	b480      	push	{r7}
 8001d0a:	b08b      	sub	sp, #44	; 0x2c
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d12:	edc7 0a00 	vstr	s1, [r7]
	// Reset gyro integrators if accel values are near 45 for X consecutive cycles

	float resetAccelTolerance_deg = 1.0;
 8001d16:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
	float resetAccelRollAngle_deg = 0;
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
	float resetAccelPitchAngle_deg = 0;// Angle of system when integrator can be reset
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	61fb      	str	r3, [r7, #28]
	uint8_t resetAccelCntThreshold = 20;
 8001d28:	2314      	movs	r3, #20
 8001d2a:	76fb      	strb	r3, [r7, #27]

	float zeroAccelRollUpperThreshold = resetAccelRollAngle_deg + resetAccelTolerance_deg;
 8001d2c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d30:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d38:	edc7 7a05 	vstr	s15, [r7, #20]
	float zeroAccelRollLowerThreshold = resetAccelRollAngle_deg - resetAccelTolerance_deg;
 8001d3c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d40:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d48:	edc7 7a04 	vstr	s15, [r7, #16]

	float zeroAccelPitchUpperThreshold = resetAccelPitchAngle_deg + resetAccelTolerance_deg;
 8001d4c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d50:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d58:	edc7 7a03 	vstr	s15, [r7, #12]
	float zeroAccelPitchLowerThreshold = resetAccelPitchAngle_deg - resetAccelTolerance_deg;
 8001d5c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d60:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d68:	edc7 7a02 	vstr	s15, [r7, #8]

	if (fabsf(accelRoll_deg) < zeroAccelRollUpperThreshold && fabsf(accelRoll_deg) > zeroAccelRollLowerThreshold){
 8001d6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d70:	eef0 7ae7 	vabs.f32	s15, s15
 8001d74:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d80:	dd10      	ble.n	8001da4 <ResetGyroIntegrators+0x9c>
 8001d82:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d86:	eef0 7ae7 	vabs.f32	s15, s15
 8001d8a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d96:	d505      	bpl.n	8001da4 <ResetGyroIntegrators+0x9c>
		resetAccelRollCount++;
 8001d98:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <ResetGyroIntegrators+0x128>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	4a24      	ldr	r2, [pc, #144]	; (8001e30 <ResetGyroIntegrators+0x128>)
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	e002      	b.n	8001daa <ResetGyroIntegrators+0xa2>
	}else{
		resetAccelRollCount = 0;
 8001da4:	4b22      	ldr	r3, [pc, #136]	; (8001e30 <ResetGyroIntegrators+0x128>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
	}

	if (fabsf(accelPitch_deg) < zeroAccelPitchUpperThreshold && fabsf(accelPitch_deg) > zeroAccelPitchLowerThreshold){
 8001daa:	edd7 7a00 	vldr	s15, [r7]
 8001dae:	eef0 7ae7 	vabs.f32	s15, s15
 8001db2:	ed97 7a03 	vldr	s14, [r7, #12]
 8001db6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbe:	dd10      	ble.n	8001de2 <ResetGyroIntegrators+0xda>
 8001dc0:	edd7 7a00 	vldr	s15, [r7]
 8001dc4:	eef0 7ae7 	vabs.f32	s15, s15
 8001dc8:	ed97 7a02 	vldr	s14, [r7, #8]
 8001dcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd4:	d505      	bpl.n	8001de2 <ResetGyroIntegrators+0xda>
		resetAccelPitchCount++;
 8001dd6:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <ResetGyroIntegrators+0x12c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	4a15      	ldr	r2, [pc, #84]	; (8001e34 <ResetGyroIntegrators+0x12c>)
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	e002      	b.n	8001de8 <ResetGyroIntegrators+0xe0>
	}else{
		resetAccelPitchCount = 0;
 8001de2:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <ResetGyroIntegrators+0x12c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
	}

	if (resetAccelRollCount == resetAccelCntThreshold){
 8001de8:	7efa      	ldrb	r2, [r7, #27]
 8001dea:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <ResetGyroIntegrators+0x128>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d106      	bne.n	8001e00 <ResetGyroIntegrators+0xf8>
		resetGyroRoll_bool = 1;
 8001df2:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <ResetGyroIntegrators+0x130>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	701a      	strb	r2, [r3, #0]
		resetAccelRollCount = 0;
 8001df8:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <ResetGyroIntegrators+0x128>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	e002      	b.n	8001e06 <ResetGyroIntegrators+0xfe>
	}else{
		resetGyroRoll_bool = 0;
 8001e00:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <ResetGyroIntegrators+0x130>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	701a      	strb	r2, [r3, #0]
	}

	if (resetAccelPitchCount == resetAccelCntThreshold){
 8001e06:	7efa      	ldrb	r2, [r7, #27]
 8001e08:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <ResetGyroIntegrators+0x12c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d106      	bne.n	8001e1e <ResetGyroIntegrators+0x116>
		resetGyroPitch_bool = 1;
 8001e10:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <ResetGyroIntegrators+0x134>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	701a      	strb	r2, [r3, #0]
		resetAccelPitchCount = 0;
 8001e16:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <ResetGyroIntegrators+0x12c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
	}else{
		resetGyroPitch_bool = 0;
	}
}
 8001e1c:	e002      	b.n	8001e24 <ResetGyroIntegrators+0x11c>
		resetGyroPitch_bool = 0;
 8001e1e:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <ResetGyroIntegrators+0x134>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	701a      	strb	r2, [r3, #0]
}
 8001e24:	bf00      	nop
 8001e26:	372c      	adds	r7, #44	; 0x2c
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	200002a0 	.word	0x200002a0
 8001e34:	200002a4 	.word	0x200002a4
 8001e38:	2000029c 	.word	0x2000029c
 8001e3c:	2000029d 	.word	0x2000029d

08001e40 <AccelLowPassFilt>:

static VS_OrientationData_t AccelLowPassFilt(VS_OrientationData_t AccelOrientation){
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08e      	sub	sp, #56	; 0x38
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	eef0 6a40 	vmov.f32	s13, s0
 8001e4a:	eeb0 7a60 	vmov.f32	s14, s1
 8001e4e:	eef0 7a41 	vmov.f32	s15, s2
 8001e52:	edc7 6a05 	vstr	s13, [r7, #20]
 8001e56:	ed87 7a06 	vstr	s14, [r7, #24]
 8001e5a:	edc7 7a07 	vstr	s15, [r7, #28]
	VS_OrientationData_t FiltAccelOrientation;

	arm_biquad_cascade_df1_f32(&S_AccelRoll, &AccelOrientation.roll_deg, &FiltAccelOrientation.roll_deg, blockSize);
 8001e5e:	4b18      	ldr	r3, [pc, #96]	; (8001ec0 <AccelLowPassFilt+0x80>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f107 0220 	add.w	r2, r7, #32
 8001e66:	f107 0114 	add.w	r1, r7, #20
 8001e6a:	4816      	ldr	r0, [pc, #88]	; (8001ec4 <AccelLowPassFilt+0x84>)
 8001e6c:	f004 fd2e 	bl	80068cc <arm_biquad_cascade_df1_f32>
	arm_biquad_cascade_df1_f32(&S_AccelPitch, &AccelOrientation.pitch_deg, &FiltAccelOrientation.pitch_deg, blockSize);
 8001e70:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <AccelLowPassFilt+0x80>)
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	f107 0320 	add.w	r3, r7, #32
 8001e78:	1d1a      	adds	r2, r3, #4
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	1d19      	adds	r1, r3, #4
 8001e80:	4603      	mov	r3, r0
 8001e82:	4811      	ldr	r0, [pc, #68]	; (8001ec8 <AccelLowPassFilt+0x88>)
 8001e84:	f004 fd22 	bl	80068cc <arm_biquad_cascade_df1_f32>

	FiltAccelOrientation.yaw_deg = 0;
 8001e88:	f04f 0300 	mov.w	r3, #0
 8001e8c:	62bb      	str	r3, [r7, #40]	; 0x28

	return FiltAccelOrientation;
 8001e8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e92:	f107 0220 	add.w	r2, r7, #32
 8001e96:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001e9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea2:	ee06 1a90 	vmov	s13, r1
 8001ea6:	ee07 2a10 	vmov	s14, r2
 8001eaa:	ee07 3a90 	vmov	s15, r3
}
 8001eae:	eeb0 0a66 	vmov.f32	s0, s13
 8001eb2:	eef0 0a47 	vmov.f32	s1, s14
 8001eb6:	eeb0 1a67 	vmov.f32	s2, s15
 8001eba:	3738      	adds	r7, #56	; 0x38
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20000000 	.word	0x20000000
 8001ec4:	200001f8 	.word	0x200001f8
 8001ec8:	20000204 	.word	0x20000204

08001ecc <ComplimentaryFilter>:

static VS_OrientationData_t ComplimentaryFilter(VS_OrientationData_t GyroOrientation, VS_OrientationData_t FiltAccelOrientation){
 8001ecc:	b480      	push	{r7}
 8001ece:	b093      	sub	sp, #76	; 0x4c
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	eeb0 5a40 	vmov.f32	s10, s0
 8001ed6:	eef0 5a60 	vmov.f32	s11, s1
 8001eda:	eeb0 6a41 	vmov.f32	s12, s2
 8001ede:	eef0 6a61 	vmov.f32	s13, s3
 8001ee2:	eeb0 7a42 	vmov.f32	s14, s4
 8001ee6:	eef0 7a62 	vmov.f32	s15, s5
 8001eea:	ed87 5a07 	vstr	s10, [r7, #28]
 8001eee:	edc7 5a08 	vstr	s11, [r7, #32]
 8001ef2:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001ef6:	edc7 6a04 	vstr	s13, [r7, #16]
 8001efa:	ed87 7a05 	vstr	s14, [r7, #20]
 8001efe:	edc7 7a06 	vstr	s15, [r7, #24]
	VS_OrientationData_t CompFiltOrientation;

	float alpha = .90;
 8001f02:	4b24      	ldr	r3, [pc, #144]	; (8001f94 <ComplimentaryFilter+0xc8>)
 8001f04:	647b      	str	r3, [r7, #68]	; 0x44

	CompFiltOrientation.roll_deg = GyroOrientation.roll_deg * alpha + FiltAccelOrientation.roll_deg * (1 - alpha);
 8001f06:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f0a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f12:	edd7 6a04 	vldr	s13, [r7, #16]
 8001f16:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001f1a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f1e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001f22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f2a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	CompFiltOrientation.pitch_deg = GyroOrientation.pitch_deg * alpha + FiltAccelOrientation.pitch_deg * (1 - alpha);
 8001f2e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f32:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f3a:	edd7 6a05 	vldr	s13, [r7, #20]
 8001f3e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001f42:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f46:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001f4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f52:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	CompFiltOrientation.yaw_deg = 0;
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	637b      	str	r3, [r7, #52]	; 0x34

	return CompFiltOrientation;
 8001f5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f60:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001f64:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001f6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f70:	ee06 1a90 	vmov	s13, r1
 8001f74:	ee07 2a10 	vmov	s14, r2
 8001f78:	ee07 3a90 	vmov	s15, r3
}
 8001f7c:	eeb0 0a66 	vmov.f32	s0, s13
 8001f80:	eef0 0a47 	vmov.f32	s1, s14
 8001f84:	eeb0 1a67 	vmov.f32	s2, s15
 8001f88:	374c      	adds	r7, #76	; 0x4c
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	3f666666 	.word	0x3f666666

08001f98 <IO_HardwareInputs>:
 *      Author: aloehr
 */
#include "IO.h"

/* Start global function definitions */
HI_Bus_t IO_HardwareInputs(Config_Bus_t Config_Bus){
 8001f98:	b084      	sub	sp, #16
 8001f9a:	b590      	push	{r4, r7, lr}
 8001f9c:	b08b      	sub	sp, #44	; 0x2c
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6178      	str	r0, [r7, #20]
 8001fa2:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001fa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HI_Bus_t HI_Bus;

	HI_Bus.HI_MPU6050_Bus = HI_MPU6050(Config_Bus.Config_HAL_Bus.hi2c);
 8001faa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fac:	463b      	mov	r3, r7
 8001fae:	4611      	mov	r1, r2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f000 f860 	bl	8002076 <HI_MPU6050>
 8001fb6:	f107 031c 	add.w	r3, r7, #28
 8001fba:	463a      	mov	r2, r7
 8001fbc:	6810      	ldr	r0, [r2, #0]
 8001fbe:	6851      	ldr	r1, [r2, #4]
 8001fc0:	6892      	ldr	r2, [r2, #8]
 8001fc2:	c307      	stmia	r3!, {r0, r1, r2}

	return HI_Bus;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	461c      	mov	r4, r3
 8001fc8:	f107 031c 	add.w	r3, r7, #28
 8001fcc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001fce:	6020      	str	r0, [r4, #0]
 8001fd0:	6061      	str	r1, [r4, #4]
 8001fd2:	60a2      	str	r2, [r4, #8]
}
 8001fd4:	6978      	ldr	r0, [r7, #20]
 8001fd6:	372c      	adds	r7, #44	; 0x2c
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001fde:	b004      	add	sp, #16
 8001fe0:	4770      	bx	lr
	...

08001fe4 <IO_HardwareOutputs>:

void IO_HardwareOutputs(Config_Bus_t Config_Bus, OP_Bus_t OP_Bus){
 8001fe4:	b084      	sub	sp, #16
 8001fe6:	b5b0      	push	{r4, r5, r7, lr}
 8001fe8:	b090      	sub	sp, #64	; 0x40
 8001fea:	af10      	add	r7, sp, #64	; 0x40
 8001fec:	f107 0410 	add.w	r4, r7, #16
 8001ff0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ffa:	4813      	ldr	r0, [pc, #76]	; (8002048 <IO_HardwareOutputs+0x64>)
 8001ffc:	f002 faf8 	bl	80045f0 <HAL_GPIO_WritePin>

	HO_VESC(Config_Bus.Config_HAL_Bus.hcan, OP_Bus.OP_VESC_Bus.pTxData);
 8002000:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002002:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f000 f931 	bl	8002270 <HO_VESC>
	HO_HCO5(Config_Bus.Config_HAL_Bus.huart2, OP_Bus.OP_HC05_Bus.pData, OP_Bus.OP_HC05_Bus.Size);
 800200e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002012:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8002016:	920e      	str	r2, [sp, #56]	; 0x38
 8002018:	930d      	str	r3, [sp, #52]	; 0x34
 800201a:	466d      	mov	r5, sp
 800201c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8002020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002026:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800202a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800202c:	6823      	ldr	r3, [r4, #0]
 800202e:	602b      	str	r3, [r5, #0]
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002036:	f000 f809 	bl	800204c <HO_HCO5>
}
 800203a:	bf00      	nop
 800203c:	46bd      	mov	sp, r7
 800203e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002042:	b004      	add	sp, #16
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40020c00 	.word	0x40020c00

0800204c <HO_HCO5>:
/* Start Defines */
#define UART_TIMEOUT 50 //MS
/* End Defines */

/* Start Global Function Definitions */
void HO_HCO5(UART_HandleTypeDef huart, const uint8_t *pData, uint16_t Size){
 800204c:	b084      	sub	sp, #16
 800204e:	b580      	push	{r7, lr}
 8002050:	af00      	add	r7, sp, #0
 8002052:	f107 0c08 	add.w	ip, r7, #8
 8002056:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart, pData, Size, (uint32_t) UART_TIMEOUT);
 800205a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800205e:	2332      	movs	r3, #50	; 0x32
 8002060:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002062:	f107 0008 	add.w	r0, r7, #8
 8002066:	f004 f8b0 	bl	80061ca <HAL_UART_Transmit>
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002072:	b004      	add	sp, #16
 8002074:	4770      	bx	lr

08002076 <HI_MPU6050>:
static MPU6050_RawIMUDataSet_t MPU6050_GetRawAccel(I2C_HandleTypeDef *hi2c);
static MPU6050_RawIMUDataSet_t MPU6050_GetRawGyro(I2C_HandleTypeDef *hi2c);
/* End function prototypes */

/* Start global function definitions */
HI_MPU6050_Bus_t HI_MPU6050(I2C_HandleTypeDef *hi2c){
 8002076:	b590      	push	{r4, r7, lr}
 8002078:	b089      	sub	sp, #36	; 0x24
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
	HI_MPU6050_Bus_t HI_MPU6050_Bus;

	HI_MPU6050_Bus.RawAccel = MPU6050_GetRawAccel(hi2c);
 8002080:	463b      	mov	r3, r7
 8002082:	68b9      	ldr	r1, [r7, #8]
 8002084:	4618      	mov	r0, r3
 8002086:	f000 f81f 	bl	80020c8 <MPU6050_GetRawAccel>
 800208a:	f107 0314 	add.w	r3, r7, #20
 800208e:	463a      	mov	r2, r7
 8002090:	6810      	ldr	r0, [r2, #0]
 8002092:	6018      	str	r0, [r3, #0]
 8002094:	8892      	ldrh	r2, [r2, #4]
 8002096:	809a      	strh	r2, [r3, #4]
	HI_MPU6050_Bus.RawGyro = MPU6050_GetRawGyro(hi2c);
 8002098:	463b      	mov	r3, r7
 800209a:	68b9      	ldr	r1, [r7, #8]
 800209c:	4618      	mov	r0, r3
 800209e:	f000 f87d 	bl	800219c <MPU6050_GetRawGyro>
 80020a2:	f107 031a 	add.w	r3, r7, #26
 80020a6:	463a      	mov	r2, r7
 80020a8:	6811      	ldr	r1, [r2, #0]
 80020aa:	6019      	str	r1, [r3, #0]
 80020ac:	8892      	ldrh	r2, [r2, #4]
 80020ae:	809a      	strh	r2, [r3, #4]

	return HI_MPU6050_Bus;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	461c      	mov	r4, r3
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80020ba:	6020      	str	r0, [r4, #0]
 80020bc:	6061      	str	r1, [r4, #4]
 80020be:	60a2      	str	r2, [r4, #8]
}
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	3724      	adds	r7, #36	; 0x24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd90      	pop	{r4, r7, pc}

080020c8 <MPU6050_GetRawAccel>:
/* End global function definitions */

/* Start static function definitions */
static MPU6050_RawIMUDataSet_t MPU6050_GetRawAccel(I2C_HandleTypeDef *hi2c){
 80020c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80020cc:	b08d      	sub	sp, #52	; 0x34
 80020ce:	af04      	add	r7, sp, #16
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	6039      	str	r1, [r7, #0]
 80020d4:	466b      	mov	r3, sp
 80020d6:	461e      	mov	r6, r3
	MPU6050_RawIMUDataSet_t RawAccel;
	uint8_t	numReg = 6;
 80020d8:	2306      	movs	r3, #6
 80020da:	77fb      	strb	r3, [r7, #31]
	uint8_t regData[numReg];
 80020dc:	7ff9      	ldrb	r1, [r7, #31]
 80020de:	460b      	mov	r3, r1
 80020e0:	3b01      	subs	r3, #1
 80020e2:	61bb      	str	r3, [r7, #24]
 80020e4:	b2cb      	uxtb	r3, r1
 80020e6:	2200      	movs	r2, #0
 80020e8:	4698      	mov	r8, r3
 80020ea:	4691      	mov	r9, r2
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	f04f 0300 	mov.w	r3, #0
 80020f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002100:	b2cb      	uxtb	r3, r1
 8002102:	2200      	movs	r2, #0
 8002104:	461c      	mov	r4, r3
 8002106:	4615      	mov	r5, r2
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	f04f 0300 	mov.w	r3, #0
 8002110:	00eb      	lsls	r3, r5, #3
 8002112:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002116:	00e2      	lsls	r2, r4, #3
 8002118:	460b      	mov	r3, r1
 800211a:	3307      	adds	r3, #7
 800211c:	08db      	lsrs	r3, r3, #3
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	ebad 0d03 	sub.w	sp, sp, r3
 8002124:	ab04      	add	r3, sp, #16
 8002126:	3300      	adds	r3, #0
 8002128:	617b      	str	r3, [r7, #20]

	/* Read accel measurement registers and store in regData array */
	HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, ACCEL_OUT_START_REG, REG_LEN, (uint8_t*) &regData, numReg, I2C_TIMEOUT);
 800212a:	7ffb      	ldrb	r3, [r7, #31]
 800212c:	b29b      	uxth	r3, r3
 800212e:	2232      	movs	r2, #50	; 0x32
 8002130:	9202      	str	r2, [sp, #8]
 8002132:	9301      	str	r3, [sp, #4]
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	2301      	movs	r3, #1
 800213a:	223b      	movs	r2, #59	; 0x3b
 800213c:	21d0      	movs	r1, #208	; 0xd0
 800213e:	6838      	ldr	r0, [r7, #0]
 8002140:	f002 fcae 	bl	8004aa0 <HAL_I2C_Mem_Read>

	/* Combine high and low bits to 16 bit integer, update struct contents*/
	RawAccel.XOUT_na = (int16_t) ((regData[0] << 8) | (regData[1]));
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	021b      	lsls	r3, r3, #8
 800214a:	b21a      	sxth	r2, r3
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	785b      	ldrb	r3, [r3, #1]
 8002150:	b21b      	sxth	r3, r3
 8002152:	4313      	orrs	r3, r2
 8002154:	b21b      	sxth	r3, r3
 8002156:	81bb      	strh	r3, [r7, #12]
	RawAccel.YOUT_na = (int16_t) ((regData[2] << 8) | (regData[3]));
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	789b      	ldrb	r3, [r3, #2]
 800215c:	021b      	lsls	r3, r3, #8
 800215e:	b21a      	sxth	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	78db      	ldrb	r3, [r3, #3]
 8002164:	b21b      	sxth	r3, r3
 8002166:	4313      	orrs	r3, r2
 8002168:	b21b      	sxth	r3, r3
 800216a:	81fb      	strh	r3, [r7, #14]
	RawAccel.ZOUT_na = (int16_t) ((regData[4] << 8) | (regData[5]));
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	791b      	ldrb	r3, [r3, #4]
 8002170:	021b      	lsls	r3, r3, #8
 8002172:	b21a      	sxth	r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	795b      	ldrb	r3, [r3, #5]
 8002178:	b21b      	sxth	r3, r3
 800217a:	4313      	orrs	r3, r2
 800217c:	b21b      	sxth	r3, r3
 800217e:	823b      	strh	r3, [r7, #16]

	/* Return RawAccel struct*/
	return RawAccel;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	461a      	mov	r2, r3
 8002184:	f107 030c 	add.w	r3, r7, #12
 8002188:	6818      	ldr	r0, [r3, #0]
 800218a:	6010      	str	r0, [r2, #0]
 800218c:	889b      	ldrh	r3, [r3, #4]
 800218e:	8093      	strh	r3, [r2, #4]
 8002190:	46b5      	mov	sp, r6
}
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	3724      	adds	r7, #36	; 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800219c <MPU6050_GetRawGyro>:

static MPU6050_RawIMUDataSet_t MPU6050_GetRawGyro(I2C_HandleTypeDef *hi2c){
 800219c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80021a0:	b08d      	sub	sp, #52	; 0x34
 80021a2:	af04      	add	r7, sp, #16
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	6039      	str	r1, [r7, #0]
 80021a8:	466b      	mov	r3, sp
 80021aa:	461e      	mov	r6, r3
	MPU6050_RawIMUDataSet_t RawGyro;
	uint8_t	numReg = 6;
 80021ac:	2306      	movs	r3, #6
 80021ae:	77fb      	strb	r3, [r7, #31]
	uint8_t regData[numReg];
 80021b0:	7ff9      	ldrb	r1, [r7, #31]
 80021b2:	460b      	mov	r3, r1
 80021b4:	3b01      	subs	r3, #1
 80021b6:	61bb      	str	r3, [r7, #24]
 80021b8:	b2cb      	uxtb	r3, r1
 80021ba:	2200      	movs	r2, #0
 80021bc:	4698      	mov	r8, r3
 80021be:	4691      	mov	r9, r2
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	f04f 0300 	mov.w	r3, #0
 80021c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021d4:	b2cb      	uxtb	r3, r1
 80021d6:	2200      	movs	r2, #0
 80021d8:	461c      	mov	r4, r3
 80021da:	4615      	mov	r5, r2
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	f04f 0300 	mov.w	r3, #0
 80021e4:	00eb      	lsls	r3, r5, #3
 80021e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021ea:	00e2      	lsls	r2, r4, #3
 80021ec:	460b      	mov	r3, r1
 80021ee:	3307      	adds	r3, #7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	ebad 0d03 	sub.w	sp, sp, r3
 80021f8:	ab04      	add	r3, sp, #16
 80021fa:	3300      	adds	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]

	/* Read gyro measurement registers and store in regData array */
	HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, GYRO_OUT_START_REG, REG_LEN, (uint8_t*) &regData, numReg, I2C_TIMEOUT);
 80021fe:	7ffb      	ldrb	r3, [r7, #31]
 8002200:	b29b      	uxth	r3, r3
 8002202:	2232      	movs	r2, #50	; 0x32
 8002204:	9202      	str	r2, [sp, #8]
 8002206:	9301      	str	r3, [sp, #4]
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2301      	movs	r3, #1
 800220e:	2243      	movs	r2, #67	; 0x43
 8002210:	21d0      	movs	r1, #208	; 0xd0
 8002212:	6838      	ldr	r0, [r7, #0]
 8002214:	f002 fc44 	bl	8004aa0 <HAL_I2C_Mem_Read>

	/* Combine high and low bits to 16 bit integer, update struct contents*/
	RawGyro.XOUT_na = (int16_t) ((regData[0] << 8) | (regData[1]));
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	021b      	lsls	r3, r3, #8
 800221e:	b21a      	sxth	r2, r3
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	785b      	ldrb	r3, [r3, #1]
 8002224:	b21b      	sxth	r3, r3
 8002226:	4313      	orrs	r3, r2
 8002228:	b21b      	sxth	r3, r3
 800222a:	81bb      	strh	r3, [r7, #12]
	RawGyro.YOUT_na = (int16_t) ((regData[2] << 8) | (regData[3]));
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	789b      	ldrb	r3, [r3, #2]
 8002230:	021b      	lsls	r3, r3, #8
 8002232:	b21a      	sxth	r2, r3
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	78db      	ldrb	r3, [r3, #3]
 8002238:	b21b      	sxth	r3, r3
 800223a:	4313      	orrs	r3, r2
 800223c:	b21b      	sxth	r3, r3
 800223e:	81fb      	strh	r3, [r7, #14]
	RawGyro.ZOUT_na = (int16_t) ((regData[4] << 8) | (regData[5]));
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	791b      	ldrb	r3, [r3, #4]
 8002244:	021b      	lsls	r3, r3, #8
 8002246:	b21a      	sxth	r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	795b      	ldrb	r3, [r3, #5]
 800224c:	b21b      	sxth	r3, r3
 800224e:	4313      	orrs	r3, r2
 8002250:	b21b      	sxth	r3, r3
 8002252:	823b      	strh	r3, [r7, #16]

	/* Return RawGyro struct*/
	return RawGyro;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	461a      	mov	r2, r3
 8002258:	f107 030c 	add.w	r3, r7, #12
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	6010      	str	r0, [r2, #0]
 8002260:	889b      	ldrh	r3, [r3, #4]
 8002262:	8093      	strh	r3, [r2, #4]
 8002264:	46b5      	mov	sp, r6
}
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	3724      	adds	r7, #36	; 0x24
 800226a:	46bd      	mov	sp, r7
 800226c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002270 <HO_VESC>:
 */

#include "IO_VESC.h"

/* Start global function definitions */
void HO_VESC(CAN_HandleTypeDef *hcan, uint8_t *TxData){
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800227a:	4b07      	ldr	r3, [pc, #28]	; (8002298 <HO_VESC+0x28>)
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	4907      	ldr	r1, [pc, #28]	; (800229c <HO_VESC+0x2c>)
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f001 faad 	bl	80037e0 <HAL_CAN_AddTxMessage>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <HO_VESC+0x20>
		Error_Handler();
 800228c:	f000 fc7e 	bl	8002b8c <Error_Handler>
	}
}
 8002290:	bf00      	nop
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	2000024c 	.word	0x2000024c
 800229c:	20000234 	.word	0x20000234

080022a0 <OP_HC05>:
 *  Created on: Jul 8, 2023
 *      Author: aloehr
 */
#include "PR_HC05.h"

OP_HC05_Bus_t OP_HC05(CT_Log_Bus_t CT_Log_Bus){
 80022a0:	b480      	push	{r7}
 80022a2:	b087      	sub	sp, #28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	1d3b      	adds	r3, r7, #4
 80022aa:	e883 0006 	stmia.w	r3, {r1, r2}
	OP_HC05_Bus_t OP_HC05_Bus;

	OP_HC05_Bus.pData = CT_Log_Bus.pData;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	613b      	str	r3, [r7, #16]
	OP_HC05_Bus.Size = CT_Log_Bus.Size;
 80022b2:	893b      	ldrh	r3, [r7, #8]
 80022b4:	82bb      	strh	r3, [r7, #20]

	return OP_HC05_Bus;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	461a      	mov	r2, r3
 80022ba:	f107 0310 	add.w	r3, r7, #16
 80022be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80022c2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	371c      	adds	r7, #28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <IP_MPU6050>:
static MPU6050_AccelData_t MPU6050_CalcAccel(MPU6050_RawIMUDataSet_t RawAccel, float accelSens, MPU6050_IMUOffsetData_t IMUOffsets);
static MPU6050_GyroData_t MPU6050_CalcGyro(MPU6050_RawIMUDataSet_t RawGyro, float gyroSens, MPU6050_IMUOffsetData_t IMUOffsets);
/* End Function Prototypes */

/* Start Global Function Definition */
IP_MPU6050_Bus_t IP_MPU6050(HI_MPU6050_Bus_t HI_MPU6050_Bus, Config_MPU6050_Bus_t Config_MPU6050_Bus){
 80022d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022d4:	b091      	sub	sp, #68	; 0x44
 80022d6:	af06      	add	r7, sp, #24
 80022d8:	60f8      	str	r0, [r7, #12]
 80022da:	4638      	mov	r0, r7
 80022dc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	IP_MPU6050_Bus_t IP_MPU6050_Bus;

	IP_MPU6050_Bus.accel = MPU6050_CalcAccel(HI_MPU6050_Bus.RawAccel, Config_MPU6050_Bus.Sensitivity.AccelSens, Config_MPU6050_Bus.Offsets);
 80022e0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80022e4:	466d      	mov	r5, sp
 80022e6:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80022ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ee:	6823      	ldr	r3, [r4, #0]
 80022f0:	602b      	str	r3, [r5, #0]
 80022f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022f6:	cb0c      	ldmia	r3, {r2, r3}
 80022f8:	eeb0 0a67 	vmov.f32	s0, s15
 80022fc:	4639      	mov	r1, r7
 80022fe:	c903      	ldmia	r1, {r0, r1}
 8002300:	f000 f852 	bl	80023a8 <MPU6050_CalcAccel>
 8002304:	eef0 6a40 	vmov.f32	s13, s0
 8002308:	eeb0 7a60 	vmov.f32	s14, s1
 800230c:	eef0 7a41 	vmov.f32	s15, s2
 8002310:	edc7 6a04 	vstr	s13, [r7, #16]
 8002314:	ed87 7a05 	vstr	s14, [r7, #20]
 8002318:	edc7 7a06 	vstr	s15, [r7, #24]
	IP_MPU6050_Bus.gyro = MPU6050_CalcGyro(HI_MPU6050_Bus.RawGyro, Config_MPU6050_Bus.Sensitivity.GyroSens, Config_MPU6050_Bus.Offsets);
 800231c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002320:	f8d7 3006 	ldr.w	r3, [r7, #6]
 8002324:	469c      	mov	ip, r3
 8002326:	897b      	ldrh	r3, [r7, #10]
 8002328:	2600      	movs	r6, #0
 800232a:	f363 060f 	bfi	r6, r3, #0, #16
 800232e:	466d      	mov	r5, sp
 8002330:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8002334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002336:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002338:	6823      	ldr	r3, [r4, #0]
 800233a:	602b      	str	r3, [r5, #0]
 800233c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002340:	cb0c      	ldmia	r3, {r2, r3}
 8002342:	eeb0 0a67 	vmov.f32	s0, s15
 8002346:	4660      	mov	r0, ip
 8002348:	4631      	mov	r1, r6
 800234a:	f000 f895 	bl	8002478 <MPU6050_CalcGyro>
 800234e:	eef0 6a40 	vmov.f32	s13, s0
 8002352:	eeb0 7a60 	vmov.f32	s14, s1
 8002356:	eef0 7a41 	vmov.f32	s15, s2
 800235a:	edc7 6a07 	vstr	s13, [r7, #28]
 800235e:	ed87 7a08 	vstr	s14, [r7, #32]
 8002362:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	if(Config_MPU6050_Bus.Offsets.SensCalibrated_bool){
 8002366:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00e      	beq.n	800238c <IP_MPU6050+0xba>
		IP_MPU6050_Bus = MPU6050_IMUDataClamp(IP_MPU6050_Bus);
 800236e:	f107 0510 	add.w	r5, r7, #16
 8002372:	466c      	mov	r4, sp
 8002374:	f107 031c 	add.w	r3, r7, #28
 8002378:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800237c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002380:	f107 0310 	add.w	r3, r7, #16
 8002384:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002386:	4628      	mov	r0, r5
 8002388:	f000 f914 	bl	80025b4 <MPU6050_IMUDataClamp>
	}

	return IP_MPU6050_Bus;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	461d      	mov	r5, r3
 8002390:	f107 0410 	add.w	r4, r7, #16
 8002394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002396:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002398:	e894 0003 	ldmia.w	r4, {r0, r1}
 800239c:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	372c      	adds	r7, #44	; 0x2c
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023a8 <MPU6050_CalcAccel>:
/* End Global Function Definition */

/* Start Static Function Definition */
static MPU6050_AccelData_t MPU6050_CalcAccel(MPU6050_RawIMUDataSet_t RawAccel, float accelSens, MPU6050_IMUOffsetData_t IMUOffsets){
 80023a8:	b082      	sub	sp, #8
 80023aa:	b490      	push	{r4, r7}
 80023ac:	b08e      	sub	sp, #56	; 0x38
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	f107 0418 	add.w	r4, r7, #24
 80023b4:	e884 0003 	stmia.w	r4, {r0, r1}
 80023b8:	ed87 0a05 	vstr	s0, [r7, #20]
 80023bc:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80023c0:	e881 000c 	stmia.w	r1, {r2, r3}
	MPU6050_AccelData_t Accel;

	/* Convert bits to g's, store in Accel struct*/
	Accel.XOUT_ms2 = (RawAccel.XOUT_na / accelSens) * g + IMUOffsets.AxOffset;
 80023c4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80023c8:	ee07 3a90 	vmov	s15, r3
 80023cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80023d0:	ed97 7a05 	vldr	s14, [r7, #20]
 80023d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023d8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002474 <MPU6050_CalcAccel+0xcc>
 80023dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023e0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80023e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023e8:	edc7 7a08 	vstr	s15, [r7, #32]
	Accel.YOUT_ms2 = (RawAccel.YOUT_na / accelSens) * g + IMUOffsets.AyOffset;
 80023ec:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80023f0:	ee07 3a90 	vmov	s15, r3
 80023f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80023f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80023fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002400:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002474 <MPU6050_CalcAccel+0xcc>
 8002404:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002408:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800240c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002410:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	Accel.ZOUT_ms2 = (RawAccel.ZOUT_na / accelSens) * g + IMUOffsets.AzOffset;
 8002414:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002418:	ee07 3a90 	vmov	s15, r3
 800241c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002420:	ed97 7a05 	vldr	s14, [r7, #20]
 8002424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002428:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002474 <MPU6050_CalcAccel+0xcc>
 800242c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002430:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002434:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002438:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	/* Return Accel struct */
	return Accel;
 800243c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002440:	f107 0220 	add.w	r2, r7, #32
 8002444:	ca07      	ldmia	r2, {r0, r1, r2}
 8002446:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800244a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800244c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800244e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002450:	ee06 1a90 	vmov	s13, r1
 8002454:	ee07 2a10 	vmov	s14, r2
 8002458:	ee07 3a90 	vmov	s15, r3
}
 800245c:	eeb0 0a66 	vmov.f32	s0, s13
 8002460:	eef0 0a47 	vmov.f32	s1, s14
 8002464:	eeb0 1a67 	vmov.f32	s2, s15
 8002468:	3738      	adds	r7, #56	; 0x38
 800246a:	46bd      	mov	sp, r7
 800246c:	bc90      	pop	{r4, r7}
 800246e:	b002      	add	sp, #8
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	411ce7d5 	.word	0x411ce7d5

08002478 <MPU6050_CalcGyro>:

static MPU6050_GyroData_t MPU6050_CalcGyro(MPU6050_RawIMUDataSet_t RawGyro, float gyroSens, MPU6050_IMUOffsetData_t IMUOffsets){
 8002478:	b082      	sub	sp, #8
 800247a:	b490      	push	{r4, r7}
 800247c:	b08e      	sub	sp, #56	; 0x38
 800247e:	af00      	add	r7, sp, #0
 8002480:	f107 0418 	add.w	r4, r7, #24
 8002484:	e884 0003 	stmia.w	r4, {r0, r1}
 8002488:	ed87 0a05 	vstr	s0, [r7, #20]
 800248c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002490:	e881 000c 	stmia.w	r1, {r2, r3}
	MPU6050_GyroData_t Gyro;

	/* Convert bits to deg/s, store in Gyro struct*/
	Gyro.XOUT_dps = RawGyro.XOUT_na / gyroSens + IMUOffsets.WxOffset;
 8002494:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002498:	ee07 3a90 	vmov	s15, r3
 800249c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80024a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80024a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024a8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80024ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024b0:	edc7 7a08 	vstr	s15, [r7, #32]
	Gyro.YOUT_dps = RawGyro.YOUT_na / gyroSens + IMUOffsets.WyOffset;
 80024b4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80024b8:	ee07 3a90 	vmov	s15, r3
 80024bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80024c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80024c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024c8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80024cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	Gyro.ZOUT_dps = RawGyro.ZOUT_na / gyroSens + IMUOffsets.WzOffset;
 80024d4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80024d8:	ee07 3a90 	vmov	s15, r3
 80024dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80024e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80024e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024e8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80024ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	/* Return Gyro struct */
	return Gyro;
 80024f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024f8:	f107 0220 	add.w	r2, r7, #32
 80024fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80024fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002502:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002508:	ee06 1a90 	vmov	s13, r1
 800250c:	ee07 2a10 	vmov	s14, r2
 8002510:	ee07 3a90 	vmov	s15, r3
}
 8002514:	eeb0 0a66 	vmov.f32	s0, s13
 8002518:	eef0 0a47 	vmov.f32	s1, s14
 800251c:	eeb0 1a67 	vmov.f32	s2, s15
 8002520:	3738      	adds	r7, #56	; 0x38
 8002522:	46bd      	mov	sp, r7
 8002524:	bc90      	pop	{r4, r7}
 8002526:	b002      	add	sp, #8
 8002528:	4770      	bx	lr

0800252a <clamp>:

static float clamp(float data, float clampVal, float threshold, uint8_t mode){
 800252a:	b480      	push	{r7}
 800252c:	b087      	sub	sp, #28
 800252e:	af00      	add	r7, sp, #0
 8002530:	ed87 0a03 	vstr	s0, [r7, #12]
 8002534:	edc7 0a02 	vstr	s1, [r7, #8]
 8002538:	ed87 1a01 	vstr	s2, [r7, #4]
 800253c:	4603      	mov	r3, r0
 800253e:	70fb      	strb	r3, [r7, #3]
	// mode = 0: Clamp to clampVal if data below threshold
	// mode = 1: Clamp to clampVal if data above threshold
	float result;

	uint8_t applyClamp_bool = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	74fb      	strb	r3, [r7, #19]

	// Check mode and if clamp is required
	switch(mode){
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <clamp+0x26>
 800254a:	2b01      	cmp	r3, #1
 800254c:	d010      	beq.n	8002570 <clamp+0x46>
 800254e:	e01f      	b.n	8002590 <clamp+0x66>
	case 0:
		applyClamp_bool = (fabsf(data) < threshold);
 8002550:	edd7 7a03 	vldr	s15, [r7, #12]
 8002554:	eef0 7ae7 	vabs.f32	s15, s15
 8002558:	ed97 7a01 	vldr	s14, [r7, #4]
 800255c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002564:	bfcc      	ite	gt
 8002566:	2301      	movgt	r3, #1
 8002568:	2300      	movle	r3, #0
 800256a:	b2db      	uxtb	r3, r3
 800256c:	74fb      	strb	r3, [r7, #19]
		break;
 800256e:	e00f      	b.n	8002590 <clamp+0x66>

	case 1:
		applyClamp_bool = (fabsf(data) > threshold);
 8002570:	edd7 7a03 	vldr	s15, [r7, #12]
 8002574:	eef0 7ae7 	vabs.f32	s15, s15
 8002578:	ed97 7a01 	vldr	s14, [r7, #4]
 800257c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002584:	bf4c      	ite	mi
 8002586:	2301      	movmi	r3, #1
 8002588:	2300      	movpl	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	74fb      	strb	r3, [r7, #19]
		break;
 800258e:	bf00      	nop
	}

	// Apply clamp if above criteria are met
	if(applyClamp_bool){
 8002590:	7cfb      	ldrb	r3, [r7, #19]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d002      	beq.n	800259c <clamp+0x72>
		result = clampVal;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	e001      	b.n	80025a0 <clamp+0x76>
	} else{
		result = data;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	617b      	str	r3, [r7, #20]
	}

	return result;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	ee07 3a90 	vmov	s15, r3
}
 80025a6:	eeb0 0a67 	vmov.f32	s0, s15
 80025aa:	371c      	adds	r7, #28
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <MPU6050_IMUDataClamp>:

static IP_MPU6050_Bus_t MPU6050_IMUDataClamp(IP_MPU6050_Bus_t MPU6050_Bus){
 80025b4:	b084      	sub	sp, #16
 80025b6:	b5b0      	push	{r4, r5, r7, lr}
 80025b8:	b08c      	sub	sp, #48	; 0x30
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80025c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	IP_MPU6050_Bus_t Result_Bus;

	float clampVal = 0;
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	float clampThreshold = .05;
 80025cc:	4b3d      	ldr	r3, [pc, #244]	; (80026c4 <MPU6050_IMUDataClamp+0x110>)
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t clampMode = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	Result_Bus.accel.XOUT_ms2 = clamp(MPU6050_Bus.accel.XOUT_ms2, clampVal, clampThreshold, clampMode);
 80025d6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80025da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025de:	4618      	mov	r0, r3
 80025e0:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 80025e4:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 80025e8:	eeb0 0a67 	vmov.f32	s0, s15
 80025ec:	f7ff ff9d 	bl	800252a <clamp>
 80025f0:	eef0 7a40 	vmov.f32	s15, s0
 80025f4:	edc7 7a03 	vstr	s15, [r7, #12]
	Result_Bus.accel.YOUT_ms2 = clamp(MPU6050_Bus.accel.YOUT_ms2, clampVal, clampThreshold, clampMode);
 80025f8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80025fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002600:	4618      	mov	r0, r3
 8002602:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 8002606:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 800260a:	eeb0 0a67 	vmov.f32	s0, s15
 800260e:	f7ff ff8c 	bl	800252a <clamp>
 8002612:	eef0 7a40 	vmov.f32	s15, s0
 8002616:	edc7 7a04 	vstr	s15, [r7, #16]
	Result_Bus.accel.ZOUT_ms2 = clamp(MPU6050_Bus.accel.ZOUT_ms2, clampVal, clampThreshold, clampMode);
 800261a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800261e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002622:	4618      	mov	r0, r3
 8002624:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 8002628:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 800262c:	eeb0 0a67 	vmov.f32	s0, s15
 8002630:	f7ff ff7b 	bl	800252a <clamp>
 8002634:	eef0 7a40 	vmov.f32	s15, s0
 8002638:	edc7 7a05 	vstr	s15, [r7, #20]

	Result_Bus.gyro.XOUT_dps = clamp(MPU6050_Bus.gyro.XOUT_dps , clampVal, clampThreshold, clampMode);
 800263c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002644:	4618      	mov	r0, r3
 8002646:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 800264a:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 800264e:	eeb0 0a67 	vmov.f32	s0, s15
 8002652:	f7ff ff6a 	bl	800252a <clamp>
 8002656:	eef0 7a40 	vmov.f32	s15, s0
 800265a:	edc7 7a06 	vstr	s15, [r7, #24]
	Result_Bus.gyro.YOUT_dps = clamp(MPU6050_Bus.gyro.YOUT_dps , clampVal, clampThreshold, clampMode);
 800265e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002662:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002666:	4618      	mov	r0, r3
 8002668:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 800266c:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8002670:	eeb0 0a67 	vmov.f32	s0, s15
 8002674:	f7ff ff59 	bl	800252a <clamp>
 8002678:	eef0 7a40 	vmov.f32	s15, s0
 800267c:	edc7 7a07 	vstr	s15, [r7, #28]
	Result_Bus.gyro.ZOUT_dps = clamp(MPU6050_Bus.gyro.ZOUT_dps , clampVal, clampThreshold, clampMode);
 8002680:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002684:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002688:	4618      	mov	r0, r3
 800268a:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 800268e:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8002692:	eeb0 0a67 	vmov.f32	s0, s15
 8002696:	f7ff ff48 	bl	800252a <clamp>
 800269a:	eef0 7a40 	vmov.f32	s15, s0
 800269e:	edc7 7a08 	vstr	s15, [r7, #32]

	return Result_Bus;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	461d      	mov	r5, r3
 80026a6:	f107 040c 	add.w	r4, r7, #12
 80026aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026b2:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	3730      	adds	r7, #48	; 0x30
 80026ba:	46bd      	mov	sp, r7
 80026bc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80026c0:	b004      	add	sp, #16
 80026c2:	4770      	bx	lr
 80026c4:	3d4ccccd 	.word	0x3d4ccccd

080026c8 <OP_VESC>:
static void CANPackMotorSpeed(int32_t speed);
static int8_t llsign(uint32_t x);
/* End function prototypes */

/* Start global function definitions */
OP_VESC_Bus_t OP_VESC(int32_t MotorSpeed_rpm){
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
	OP_VESC_Bus_t OP_VESC_Bus;

	int32_t MotorSpeed_erpm = MotorSpeed_rpm * (NUM_POLE_PAIRS);
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	1a9b      	subs	r3, r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]

	// Limit speed request
	if(llabs(MotorSpeed_erpm) > MAX_SPEED_ERPM){
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bfb8      	it	lt
 80026e0:	425b      	neglt	r3, r3
 80026e2:	4a0b      	ldr	r2, [pc, #44]	; (8002710 <OP_VESC+0x48>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d909      	bls.n	80026fc <OP_VESC+0x34>
		MotorSpeed_erpm = MAX_SPEED_ERPM * llsign(MotorSpeed_erpm);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 f834 	bl	8002758 <llsign>
 80026f0:	4603      	mov	r3, r0
 80026f2:	461a      	mov	r2, r3
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <OP_VESC+0x48>)
 80026f6:	fb02 f303 	mul.w	r3, r2, r3
 80026fa:	60fb      	str	r3, [r7, #12]
	}

	CANPackMotorSpeed(MotorSpeed_erpm);
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 f80b 	bl	8002718 <CANPackMotorSpeed>

	OP_VESC_Bus.pTxData = SpeedReqPayload;
 8002702:	4b04      	ldr	r3, [pc, #16]	; (8002714 <OP_VESC+0x4c>)
 8002704:	60bb      	str	r3, [r7, #8]

	return OP_VESC_Bus;
 8002706:	68bb      	ldr	r3, [r7, #8]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	00012cc8 	.word	0x00012cc8
 8002714:	200002b4 	.word	0x200002b4

08002718 <CANPackMotorSpeed>:

/* End global function definitions */

/* Start static function definitions */
static void CANPackMotorSpeed(int32_t speed){
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
	SpeedReqPayload[0] = speed >> 24;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	161b      	asrs	r3, r3, #24
 8002724:	b2da      	uxtb	r2, r3
 8002726:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <CANPackMotorSpeed+0x3c>)
 8002728:	701a      	strb	r2, [r3, #0]
	SpeedReqPayload[1] = (speed >> 16) & 0xFF;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	141b      	asrs	r3, r3, #16
 800272e:	b2da      	uxtb	r2, r3
 8002730:	4b08      	ldr	r3, [pc, #32]	; (8002754 <CANPackMotorSpeed+0x3c>)
 8002732:	705a      	strb	r2, [r3, #1]
	SpeedReqPayload[2] = (speed >> 8) & 0xFF;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	121b      	asrs	r3, r3, #8
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <CANPackMotorSpeed+0x3c>)
 800273c:	709a      	strb	r2, [r3, #2]
	SpeedReqPayload[3] = speed & 0xFF;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4b04      	ldr	r3, [pc, #16]	; (8002754 <CANPackMotorSpeed+0x3c>)
 8002744:	70da      	strb	r2, [r3, #3]
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	200002b4 	.word	0x200002b4

08002758 <llsign>:

static int8_t llsign(uint32_t x){
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
	int8_t sign;

	if (x > 0){
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <llsign+0x14>
		sign = 1;
 8002766:	2301      	movs	r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
 800276a:	e001      	b.n	8002770 <llsign+0x18>
	}
	else if (x < 0) {
		sign = -1;
	}
	else {
		sign = 0;
 800276c:	2300      	movs	r3, #0
 800276e:	73fb      	strb	r3, [r7, #15]
	}

	return sign;
 8002770:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <PR_InputProcessing>:
 */

#include "Processing.h"

/* Start global function definitions */
IP_Bus_t PR_InputProcessing(Config_Bus_t Config_Bus, HI_Bus_t HI_Bus){
 8002780:	b084      	sub	sp, #16
 8002782:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002784:	b099      	sub	sp, #100	; 0x64
 8002786:	af0a      	add	r7, sp, #40	; 0x28
 8002788:	61f8      	str	r0, [r7, #28]
 800278a:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800278e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	IP_Bus_t IP_Bus;

	IP_Bus.IP_MPU6050_Bus = IP_MPU6050(HI_Bus.HI_MPU6050_Bus, Config_Bus.Config_MPU6050_Bus);
 8002792:	463e      	mov	r6, r7
 8002794:	466d      	mov	r5, sp
 8002796:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 800279a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800279c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800279e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027a2:	6823      	ldr	r3, [r4, #0]
 80027a4:	602b      	str	r3, [r5, #0]
 80027a6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80027aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027ac:	4630      	mov	r0, r6
 80027ae:	f7ff fd90 	bl	80022d2 <IP_MPU6050>
 80027b2:	f107 0420 	add.w	r4, r7, #32
 80027b6:	463d      	mov	r5, r7
 80027b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80027c0:	e884 0003 	stmia.w	r4, {r0, r1}

	return IP_Bus;
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	461d      	mov	r5, r3
 80027c8:	f107 0420 	add.w	r4, r7, #32
 80027cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027d4:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80027d8:	69f8      	ldr	r0, [r7, #28]
 80027da:	373c      	adds	r7, #60	; 0x3c
 80027dc:	46bd      	mov	sp, r7
 80027de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80027e2:	b004      	add	sp, #16
 80027e4:	4770      	bx	lr

080027e6 <PR_OutputProcessing>:

OP_Bus_t PR_OutputProcessing(CT_Bus_t CT_Bus){
 80027e6:	b084      	sub	sp, #16
 80027e8:	b590      	push	{r4, r7, lr}
 80027ea:	b089      	sub	sp, #36	; 0x24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80027f4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	OP_Bus_t OP_Bus;

	OP_Bus.OP_HC05_Bus = OP_HC05(CT_Bus.CT_Log_Bus);
 80027f8:	4638      	mov	r0, r7
 80027fa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80027fe:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002802:	f7ff fd4d 	bl	80022a0 <OP_HC05>
 8002806:	f107 0314 	add.w	r3, r7, #20
 800280a:	463a      	mov	r2, r7
 800280c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002810:	e883 0003 	stmia.w	r3, {r0, r1}
	OP_Bus.OP_VESC_Bus = OP_VESC(CT_Bus.CT_Balance_Bus.MotorSpeedReq_rpm);
 8002814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff ff56 	bl	80026c8 <OP_VESC>
 800281c:	61f8      	str	r0, [r7, #28]

	return OP_Bus;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	461c      	mov	r4, r3
 8002822:	f107 0314 	add.w	r3, r7, #20
 8002826:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800282a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	3724      	adds	r7, #36	; 0x24
 8002832:	46bd      	mov	sp, r7
 8002834:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002838:	b004      	add	sp, #16
 800283a:	4770      	bx	lr

0800283c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800283c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800283e:	b0c9      	sub	sp, #292	; 0x124
 8002840:	af18      	add	r7, sp, #96	; 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002842:	f000 fc1d 	bl	8003080 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002846:	f000 f83b 	bl	80028c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800284a:	f000 f931 	bl	8002ab0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800284e:	f000 f905 	bl	8002a5c <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8002852:	f000 f89f 	bl	8002994 <MX_CAN1_Init>
  MX_I2C3_Init();
 8002856:	f000 f8d3 	bl	8002a00 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  // Make these all pointers later
  // Req for CAN or else you won't actually be updating the CAN peripheral. This will cause an infinite loop in RxInterupt
  Config_HAL_Bus_t Config_HAL_Bus = {&hi2c3, huart2, &hcan1};
 800285a:	4b16      	ldr	r3, [pc, #88]	; (80028b4 <main+0x78>)
 800285c:	677b      	str	r3, [r7, #116]	; 0x74
 800285e:	4a16      	ldr	r2, [pc, #88]	; (80028b8 <main+0x7c>)
 8002860:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002864:	4611      	mov	r1, r2
 8002866:	2244      	movs	r2, #68	; 0x44
 8002868:	4618      	mov	r0, r3
 800286a:	f004 ff25 	bl	80076b8 <memcpy>
 800286e:	4b13      	ldr	r3, [pc, #76]	; (80028bc <main+0x80>)
 8002870:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  Config_Bus_t Config_Bus;
  Config_Bus = App_Config(Config_HAL_Bus);
 8002874:	1d3e      	adds	r6, r7, #4
 8002876:	466d      	mov	r5, sp
 8002878:	f107 0480 	add.w	r4, r7, #128	; 0x80
 800287c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800287e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002880:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002882:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002884:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002886:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002888:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800288c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002890:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002894:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002896:	4630      	mov	r0, r6
 8002898:	f7fe fb54 	bl	8000f44 <App_Config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  App_Main(Config_Bus);
 800289c:	4668      	mov	r0, sp
 800289e:	f107 0314 	add.w	r3, r7, #20
 80028a2:	2260      	movs	r2, #96	; 0x60
 80028a4:	4619      	mov	r1, r3
 80028a6:	f004 ff07 	bl	80076b8 <memcpy>
 80028aa:	1d3b      	adds	r3, r7, #4
 80028ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028ae:	f7fe fb91 	bl	8000fd4 <App_Main>
 80028b2:	e7f3      	b.n	800289c <main+0x60>
 80028b4:	2000031c 	.word	0x2000031c
 80028b8:	20000370 	.word	0x20000370
 80028bc:	200002b8 	.word	0x200002b8

080028c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b094      	sub	sp, #80	; 0x50
 80028c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028c6:	f107 0320 	add.w	r3, r7, #32
 80028ca:	2230      	movs	r2, #48	; 0x30
 80028cc:	2100      	movs	r1, #0
 80028ce:	4618      	mov	r0, r3
 80028d0:	f004 fe73 	bl	80075ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028d4:	f107 030c 	add.w	r3, r7, #12
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028e4:	2300      	movs	r3, #0
 80028e6:	60bb      	str	r3, [r7, #8]
 80028e8:	4b28      	ldr	r3, [pc, #160]	; (800298c <SystemClock_Config+0xcc>)
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	4a27      	ldr	r2, [pc, #156]	; (800298c <SystemClock_Config+0xcc>)
 80028ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f2:	6413      	str	r3, [r2, #64]	; 0x40
 80028f4:	4b25      	ldr	r3, [pc, #148]	; (800298c <SystemClock_Config+0xcc>)
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002900:	2300      	movs	r3, #0
 8002902:	607b      	str	r3, [r7, #4]
 8002904:	4b22      	ldr	r3, [pc, #136]	; (8002990 <SystemClock_Config+0xd0>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a21      	ldr	r2, [pc, #132]	; (8002990 <SystemClock_Config+0xd0>)
 800290a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800290e:	6013      	str	r3, [r2, #0]
 8002910:	4b1f      	ldr	r3, [pc, #124]	; (8002990 <SystemClock_Config+0xd0>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002918:	607b      	str	r3, [r7, #4]
 800291a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800291c:	2301      	movs	r3, #1
 800291e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002920:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002926:	2302      	movs	r3, #2
 8002928:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800292a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800292e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002930:	2308      	movs	r3, #8
 8002932:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002934:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002938:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800293a:	2302      	movs	r3, #2
 800293c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800293e:	2307      	movs	r3, #7
 8002940:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002942:	f107 0320 	add.w	r3, r7, #32
 8002946:	4618      	mov	r0, r3
 8002948:	f002 ff5a 	bl	8005800 <HAL_RCC_OscConfig>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002952:	f000 f91b 	bl	8002b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002956:	230f      	movs	r3, #15
 8002958:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800295a:	2302      	movs	r3, #2
 800295c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002962:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002966:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800296c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800296e:	f107 030c 	add.w	r3, r7, #12
 8002972:	2105      	movs	r1, #5
 8002974:	4618      	mov	r0, r3
 8002976:	f003 f9bb 	bl	8005cf0 <HAL_RCC_ClockConfig>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002980:	f000 f904 	bl	8002b8c <Error_Handler>
  }
}
 8002984:	bf00      	nop
 8002986:	3750      	adds	r7, #80	; 0x50
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40023800 	.word	0x40023800
 8002990:	40007000 	.word	0x40007000

08002994 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002998:	4b17      	ldr	r3, [pc, #92]	; (80029f8 <MX_CAN1_Init+0x64>)
 800299a:	4a18      	ldr	r2, [pc, #96]	; (80029fc <MX_CAN1_Init+0x68>)
 800299c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800299e:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <MX_CAN1_Init+0x64>)
 80029a0:	2206      	movs	r2, #6
 80029a2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80029a4:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <MX_CAN1_Init+0x64>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80029aa:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <MX_CAN1_Init+0x64>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80029b0:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <MX_CAN1_Init+0x64>)
 80029b2:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80029b6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80029b8:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <MX_CAN1_Init+0x64>)
 80029ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80029be:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80029c0:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <MX_CAN1_Init+0x64>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80029c6:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <MX_CAN1_Init+0x64>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80029cc:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <MX_CAN1_Init+0x64>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80029d2:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <MX_CAN1_Init+0x64>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80029d8:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <MX_CAN1_Init+0x64>)
 80029da:	2200      	movs	r2, #0
 80029dc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <MX_CAN1_Init+0x64>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80029e4:	4804      	ldr	r0, [pc, #16]	; (80029f8 <MX_CAN1_Init+0x64>)
 80029e6:	f000 fbe1 	bl	80031ac <HAL_CAN_Init>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80029f0:	f000 f8cc 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80029f4:	bf00      	nop
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	200002b8 	.word	0x200002b8
 80029fc:	40006400 	.word	0x40006400

08002a00 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002a04:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <MX_I2C3_Init+0x50>)
 8002a06:	4a13      	ldr	r2, [pc, #76]	; (8002a54 <MX_I2C3_Init+0x54>)
 8002a08:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8002a0a:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <MX_I2C3_Init+0x50>)
 8002a0c:	4a12      	ldr	r2, [pc, #72]	; (8002a58 <MX_I2C3_Init+0x58>)
 8002a0e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a10:	4b0f      	ldr	r3, [pc, #60]	; (8002a50 <MX_I2C3_Init+0x50>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002a16:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <MX_I2C3_Init+0x50>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <MX_I2C3_Init+0x50>)
 8002a1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a22:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a24:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <MX_I2C3_Init+0x50>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002a2a:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <MX_I2C3_Init+0x50>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a30:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <MX_I2C3_Init+0x50>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a36:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <MX_I2C3_Init+0x50>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002a3c:	4804      	ldr	r0, [pc, #16]	; (8002a50 <MX_I2C3_Init+0x50>)
 8002a3e:	f001 fdf1 	bl	8004624 <HAL_I2C_Init>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002a48:	f000 f8a0 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002a4c:	bf00      	nop
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	2000031c 	.word	0x2000031c
 8002a54:	40005c00 	.word	0x40005c00
 8002a58:	00061a80 	.word	0x00061a80

08002a5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a60:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <MX_USART2_UART_Init+0x4c>)
 8002a62:	4a12      	ldr	r2, [pc, #72]	; (8002aac <MX_USART2_UART_Init+0x50>)
 8002a64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8002a66:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <MX_USART2_UART_Init+0x4c>)
 8002a68:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8002a6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a6e:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <MX_USART2_UART_Init+0x4c>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a74:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <MX_USART2_UART_Init+0x4c>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a7a:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <MX_USART2_UART_Init+0x4c>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a80:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <MX_USART2_UART_Init+0x4c>)
 8002a82:	220c      	movs	r2, #12
 8002a84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a86:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <MX_USART2_UART_Init+0x4c>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <MX_USART2_UART_Init+0x4c>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a92:	4805      	ldr	r0, [pc, #20]	; (8002aa8 <MX_USART2_UART_Init+0x4c>)
 8002a94:	f003 fb4c 	bl	8006130 <HAL_UART_Init>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a9e:	f000 f875 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002aa2:	bf00      	nop
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000370 	.word	0x20000370
 8002aac:	40004400 	.word	0x40004400

08002ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08a      	sub	sp, #40	; 0x28
 8002ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab6:	f107 0314 	add.w	r3, r7, #20
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	605a      	str	r2, [r3, #4]
 8002ac0:	609a      	str	r2, [r3, #8]
 8002ac2:	60da      	str	r2, [r3, #12]
 8002ac4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	4b2e      	ldr	r3, [pc, #184]	; (8002b84 <MX_GPIO_Init+0xd4>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	4a2d      	ldr	r2, [pc, #180]	; (8002b84 <MX_GPIO_Init+0xd4>)
 8002ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad6:	4b2b      	ldr	r3, [pc, #172]	; (8002b84 <MX_GPIO_Init+0xd4>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	4b27      	ldr	r3, [pc, #156]	; (8002b84 <MX_GPIO_Init+0xd4>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	4a26      	ldr	r2, [pc, #152]	; (8002b84 <MX_GPIO_Init+0xd4>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	6313      	str	r3, [r2, #48]	; 0x30
 8002af2:	4b24      	ldr	r3, [pc, #144]	; (8002b84 <MX_GPIO_Init+0xd4>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <MX_GPIO_Init+0xd4>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	4a1f      	ldr	r2, [pc, #124]	; (8002b84 <MX_GPIO_Init+0xd4>)
 8002b08:	f043 0308 	orr.w	r3, r3, #8
 8002b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0e:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <MX_GPIO_Init+0xd4>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	607b      	str	r3, [r7, #4]
 8002b1e:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <MX_GPIO_Init+0xd4>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	4a18      	ldr	r2, [pc, #96]	; (8002b84 <MX_GPIO_Init+0xd4>)
 8002b24:	f043 0304 	orr.w	r3, r3, #4
 8002b28:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2a:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <MX_GPIO_Init+0xd4>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	607b      	str	r3, [r7, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	603b      	str	r3, [r7, #0]
 8002b3a:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <MX_GPIO_Init+0xd4>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	4a11      	ldr	r2, [pc, #68]	; (8002b84 <MX_GPIO_Init+0xd4>)
 8002b40:	f043 0302 	orr.w	r3, r3, #2
 8002b44:	6313      	str	r3, [r2, #48]	; 0x30
 8002b46:	4b0f      	ldr	r3, [pc, #60]	; (8002b84 <MX_GPIO_Init+0xd4>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	603b      	str	r3, [r7, #0]
 8002b50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_Led_Pin|Orange_Led_Pin|Red_Led_Pin, GPIO_PIN_RESET);
 8002b52:	2200      	movs	r2, #0
 8002b54:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8002b58:	480b      	ldr	r0, [pc, #44]	; (8002b88 <MX_GPIO_Init+0xd8>)
 8002b5a:	f001 fd49 	bl	80045f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Green_Led_Pin Orange_Led_Pin Red_Led_Pin */
  GPIO_InitStruct.Pin = Green_Led_Pin|Orange_Led_Pin|Red_Led_Pin;
 8002b5e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b64:	2301      	movs	r3, #1
 8002b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b70:	f107 0314 	add.w	r3, r7, #20
 8002b74:	4619      	mov	r1, r3
 8002b76:	4804      	ldr	r0, [pc, #16]	; (8002b88 <MX_GPIO_Init+0xd8>)
 8002b78:	f001 fb9e 	bl	80042b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b7c:	bf00      	nop
 8002b7e:	3728      	adds	r7, #40	; 0x28
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40020c00 	.word	0x40020c00

08002b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8002b90:	2200      	movs	r2, #0
 8002b92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b96:	4809      	ldr	r0, [pc, #36]	; (8002bbc <Error_Handler+0x30>)
 8002b98:	f001 fd2a 	bl	80045f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ba2:	4806      	ldr	r0, [pc, #24]	; (8002bbc <Error_Handler+0x30>)
 8002ba4:	f001 fd24 	bl	80045f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bae:	4803      	ldr	r0, [pc, #12]	; (8002bbc <Error_Handler+0x30>)
 8002bb0:	f001 fd1e 	bl	80045f0 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bb4:	b672      	cpsid	i
}
 8002bb6:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bb8:	e7fe      	b.n	8002bb8 <Error_Handler+0x2c>
 8002bba:	bf00      	nop
 8002bbc:	40020c00 	.word	0x40020c00

08002bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	607b      	str	r3, [r7, #4]
 8002bca:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <HAL_MspInit+0x4c>)
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bce:	4a0f      	ldr	r2, [pc, #60]	; (8002c0c <HAL_MspInit+0x4c>)
 8002bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bd6:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <HAL_MspInit+0x4c>)
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bde:	607b      	str	r3, [r7, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	603b      	str	r3, [r7, #0]
 8002be6:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <HAL_MspInit+0x4c>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	4a08      	ldr	r2, [pc, #32]	; (8002c0c <HAL_MspInit+0x4c>)
 8002bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf2:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <HAL_MspInit+0x4c>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002bfe:	2007      	movs	r0, #7
 8002c00:	f001 fb18 	bl	8004234 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c04:	bf00      	nop
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40023800 	.word	0x40023800

08002c10 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08a      	sub	sp, #40	; 0x28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c18:	f107 0314 	add.w	r3, r7, #20
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	60da      	str	r2, [r3, #12]
 8002c26:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a1d      	ldr	r2, [pc, #116]	; (8002ca4 <HAL_CAN_MspInit+0x94>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d134      	bne.n	8002c9c <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	4b1c      	ldr	r3, [pc, #112]	; (8002ca8 <HAL_CAN_MspInit+0x98>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	4a1b      	ldr	r2, [pc, #108]	; (8002ca8 <HAL_CAN_MspInit+0x98>)
 8002c3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c40:	6413      	str	r3, [r2, #64]	; 0x40
 8002c42:	4b19      	ldr	r3, [pc, #100]	; (8002ca8 <HAL_CAN_MspInit+0x98>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	4b15      	ldr	r3, [pc, #84]	; (8002ca8 <HAL_CAN_MspInit+0x98>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	4a14      	ldr	r2, [pc, #80]	; (8002ca8 <HAL_CAN_MspInit+0x98>)
 8002c58:	f043 0302 	orr.w	r3, r3, #2
 8002c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5e:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <HAL_CAN_MspInit+0x98>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c70:	2302      	movs	r3, #2
 8002c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002c7c:	2309      	movs	r3, #9
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c80:	f107 0314 	add.w	r3, r7, #20
 8002c84:	4619      	mov	r1, r3
 8002c86:	4809      	ldr	r0, [pc, #36]	; (8002cac <HAL_CAN_MspInit+0x9c>)
 8002c88:	f001 fb16 	bl	80042b8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2100      	movs	r1, #0
 8002c90:	2014      	movs	r0, #20
 8002c92:	f001 fada 	bl	800424a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002c96:	2014      	movs	r0, #20
 8002c98:	f001 faf3 	bl	8004282 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002c9c:	bf00      	nop
 8002c9e:	3728      	adds	r7, #40	; 0x28
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40006400 	.word	0x40006400
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40020400 	.word	0x40020400

08002cb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08a      	sub	sp, #40	; 0x28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb8:	f107 0314 	add.w	r3, r7, #20
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	60da      	str	r2, [r3, #12]
 8002cc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a29      	ldr	r2, [pc, #164]	; (8002d74 <HAL_I2C_MspInit+0xc4>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d14b      	bne.n	8002d6a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	4b28      	ldr	r3, [pc, #160]	; (8002d78 <HAL_I2C_MspInit+0xc8>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	4a27      	ldr	r2, [pc, #156]	; (8002d78 <HAL_I2C_MspInit+0xc8>)
 8002cdc:	f043 0304 	orr.w	r3, r3, #4
 8002ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce2:	4b25      	ldr	r3, [pc, #148]	; (8002d78 <HAL_I2C_MspInit+0xc8>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	613b      	str	r3, [r7, #16]
 8002cec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	4b21      	ldr	r3, [pc, #132]	; (8002d78 <HAL_I2C_MspInit+0xc8>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	4a20      	ldr	r2, [pc, #128]	; (8002d78 <HAL_I2C_MspInit+0xc8>)
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfe:	4b1e      	ldr	r3, [pc, #120]	; (8002d78 <HAL_I2C_MspInit+0xc8>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d10:	2312      	movs	r3, #18
 8002d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d1c:	2304      	movs	r3, #4
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d20:	f107 0314 	add.w	r3, r7, #20
 8002d24:	4619      	mov	r1, r3
 8002d26:	4815      	ldr	r0, [pc, #84]	; (8002d7c <HAL_I2C_MspInit+0xcc>)
 8002d28:	f001 fac6 	bl	80042b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d32:	2312      	movs	r3, #18
 8002d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d3e:	2304      	movs	r3, #4
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d42:	f107 0314 	add.w	r3, r7, #20
 8002d46:	4619      	mov	r1, r3
 8002d48:	480d      	ldr	r0, [pc, #52]	; (8002d80 <HAL_I2C_MspInit+0xd0>)
 8002d4a:	f001 fab5 	bl	80042b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <HAL_I2C_MspInit+0xc8>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	4a08      	ldr	r2, [pc, #32]	; (8002d78 <HAL_I2C_MspInit+0xc8>)
 8002d58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <HAL_I2C_MspInit+0xc8>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002d6a:	bf00      	nop
 8002d6c:	3728      	adds	r7, #40	; 0x28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40005c00 	.word	0x40005c00
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40020800 	.word	0x40020800
 8002d80:	40020000 	.word	0x40020000

08002d84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08a      	sub	sp, #40	; 0x28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d8c:	f107 0314 	add.w	r3, r7, #20
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	60da      	str	r2, [r3, #12]
 8002d9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a19      	ldr	r2, [pc, #100]	; (8002e08 <HAL_UART_MspInit+0x84>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d12b      	bne.n	8002dfe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	613b      	str	r3, [r7, #16]
 8002daa:	4b18      	ldr	r3, [pc, #96]	; (8002e0c <HAL_UART_MspInit+0x88>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	4a17      	ldr	r2, [pc, #92]	; (8002e0c <HAL_UART_MspInit+0x88>)
 8002db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db4:	6413      	str	r3, [r2, #64]	; 0x40
 8002db6:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <HAL_UART_MspInit+0x88>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <HAL_UART_MspInit+0x88>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	4a10      	ldr	r2, [pc, #64]	; (8002e0c <HAL_UART_MspInit+0x88>)
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd2:	4b0e      	ldr	r3, [pc, #56]	; (8002e0c <HAL_UART_MspInit+0x88>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002dde:	230c      	movs	r3, #12
 8002de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de2:	2302      	movs	r3, #2
 8002de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dea:	2303      	movs	r3, #3
 8002dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dee:	2307      	movs	r3, #7
 8002df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df2:	f107 0314 	add.w	r3, r7, #20
 8002df6:	4619      	mov	r1, r3
 8002df8:	4805      	ldr	r0, [pc, #20]	; (8002e10 <HAL_UART_MspInit+0x8c>)
 8002dfa:	f001 fa5d 	bl	80042b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002dfe:	bf00      	nop
 8002e00:	3728      	adds	r7, #40	; 0x28
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40004400 	.word	0x40004400
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40020000 	.word	0x40020000

08002e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e18:	e7fe      	b.n	8002e18 <NMI_Handler+0x4>

08002e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e1e:	e7fe      	b.n	8002e1e <HardFault_Handler+0x4>

08002e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e24:	e7fe      	b.n	8002e24 <MemManage_Handler+0x4>

08002e26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e26:	b480      	push	{r7}
 8002e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e2a:	e7fe      	b.n	8002e2a <BusFault_Handler+0x4>

08002e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e30:	e7fe      	b.n	8002e30 <UsageFault_Handler+0x4>

08002e32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e32:	b480      	push	{r7}
 8002e34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e36:	bf00      	nop
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e44:	bf00      	nop
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e52:	bf00      	nop
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e60:	f000 f960 	bl	8003124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e64:	bf00      	nop
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002e6c:	4802      	ldr	r0, [pc, #8]	; (8002e78 <CAN1_RX0_IRQHandler+0x10>)
 8002e6e:	f000 feca 	bl	8003c06 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	200002b8 	.word	0x200002b8

08002e7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return 1;
 8002e80:	2301      	movs	r3, #1
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <_kill>:

int _kill(int pid, int sig)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e96:	f004 fbe3 	bl	8007660 <__errno>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2216      	movs	r2, #22
 8002e9e:	601a      	str	r2, [r3, #0]
  return -1;
 8002ea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <_exit>:

void _exit (int status)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002eb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7ff ffe7 	bl	8002e8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ebe:	e7fe      	b.n	8002ebe <_exit+0x12>

08002ec0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	e00a      	b.n	8002ee8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ed2:	f3af 8000 	nop.w
 8002ed6:	4601      	mov	r1, r0
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	1c5a      	adds	r2, r3, #1
 8002edc:	60ba      	str	r2, [r7, #8]
 8002ede:	b2ca      	uxtb	r2, r1
 8002ee0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	dbf0      	blt.n	8002ed2 <_read+0x12>
  }

  return len;
 8002ef0:	687b      	ldr	r3, [r7, #4]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b086      	sub	sp, #24
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	60f8      	str	r0, [r7, #12]
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	e009      	b.n	8002f20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	60ba      	str	r2, [r7, #8]
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	dbf1      	blt.n	8002f0c <_write+0x12>
  }
  return len;
 8002f28:	687b      	ldr	r3, [r7, #4]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <_close>:

int _close(int file)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f5a:	605a      	str	r2, [r3, #4]
  return 0;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <_isatty>:

int _isatty(int file)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f72:	2301      	movs	r3, #1
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
	...

08002f9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fa4:	4a14      	ldr	r2, [pc, #80]	; (8002ff8 <_sbrk+0x5c>)
 8002fa6:	4b15      	ldr	r3, [pc, #84]	; (8002ffc <_sbrk+0x60>)
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fb0:	4b13      	ldr	r3, [pc, #76]	; (8003000 <_sbrk+0x64>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d102      	bne.n	8002fbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fb8:	4b11      	ldr	r3, [pc, #68]	; (8003000 <_sbrk+0x64>)
 8002fba:	4a12      	ldr	r2, [pc, #72]	; (8003004 <_sbrk+0x68>)
 8002fbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fbe:	4b10      	ldr	r3, [pc, #64]	; (8003000 <_sbrk+0x64>)
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d207      	bcs.n	8002fdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fcc:	f004 fb48 	bl	8007660 <__errno>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	220c      	movs	r2, #12
 8002fd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fda:	e009      	b.n	8002ff0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fdc:	4b08      	ldr	r3, [pc, #32]	; (8003000 <_sbrk+0x64>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fe2:	4b07      	ldr	r3, [pc, #28]	; (8003000 <_sbrk+0x64>)
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4413      	add	r3, r2
 8002fea:	4a05      	ldr	r2, [pc, #20]	; (8003000 <_sbrk+0x64>)
 8002fec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fee:	68fb      	ldr	r3, [r7, #12]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	20020000 	.word	0x20020000
 8002ffc:	00000400 	.word	0x00000400
 8003000:	200003b4 	.word	0x200003b4
 8003004:	20000508 	.word	0x20000508

08003008 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800300c:	4b06      	ldr	r3, [pc, #24]	; (8003028 <SystemInit+0x20>)
 800300e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003012:	4a05      	ldr	r2, [pc, #20]	; (8003028 <SystemInit+0x20>)
 8003014:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003018:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800301c:	bf00      	nop
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800302c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003064 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003030:	480d      	ldr	r0, [pc, #52]	; (8003068 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003032:	490e      	ldr	r1, [pc, #56]	; (800306c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003034:	4a0e      	ldr	r2, [pc, #56]	; (8003070 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003038:	e002      	b.n	8003040 <LoopCopyDataInit>

0800303a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800303a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800303c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800303e:	3304      	adds	r3, #4

08003040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003044:	d3f9      	bcc.n	800303a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003046:	4a0b      	ldr	r2, [pc, #44]	; (8003074 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003048:	4c0b      	ldr	r4, [pc, #44]	; (8003078 <LoopFillZerobss+0x26>)
  movs r3, #0
 800304a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800304c:	e001      	b.n	8003052 <LoopFillZerobss>

0800304e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800304e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003050:	3204      	adds	r2, #4

08003052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003054:	d3fb      	bcc.n	800304e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003056:	f7ff ffd7 	bl	8003008 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800305a:	f004 fb07 	bl	800766c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800305e:	f7ff fbed 	bl	800283c <main>
  bx  lr    
 8003062:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003064:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800306c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003070:	0800a68c 	.word	0x0800a68c
  ldr r2, =_sbss
 8003074:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003078:	20000508 	.word	0x20000508

0800307c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800307c:	e7fe      	b.n	800307c <ADC_IRQHandler>
	...

08003080 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003084:	4b0e      	ldr	r3, [pc, #56]	; (80030c0 <HAL_Init+0x40>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a0d      	ldr	r2, [pc, #52]	; (80030c0 <HAL_Init+0x40>)
 800308a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800308e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003090:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_Init+0x40>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a0a      	ldr	r2, [pc, #40]	; (80030c0 <HAL_Init+0x40>)
 8003096:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800309a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800309c:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <HAL_Init+0x40>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a07      	ldr	r2, [pc, #28]	; (80030c0 <HAL_Init+0x40>)
 80030a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030a8:	2003      	movs	r0, #3
 80030aa:	f001 f8c3 	bl	8004234 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ae:	2000      	movs	r0, #0
 80030b0:	f000 f808 	bl	80030c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030b4:	f7ff fd84 	bl	8002bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40023c00 	.word	0x40023c00

080030c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030cc:	4b12      	ldr	r3, [pc, #72]	; (8003118 <HAL_InitTick+0x54>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4b12      	ldr	r3, [pc, #72]	; (800311c <HAL_InitTick+0x58>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	4619      	mov	r1, r3
 80030d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030da:	fbb3 f3f1 	udiv	r3, r3, r1
 80030de:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e2:	4618      	mov	r0, r3
 80030e4:	f001 f8db 	bl	800429e <HAL_SYSTICK_Config>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e00e      	b.n	8003110 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b0f      	cmp	r3, #15
 80030f6:	d80a      	bhi.n	800310e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030f8:	2200      	movs	r2, #0
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003100:	f001 f8a3 	bl	800424a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003104:	4a06      	ldr	r2, [pc, #24]	; (8003120 <HAL_InitTick+0x5c>)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	e000      	b.n	8003110 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
}
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	20000008 	.word	0x20000008
 800311c:	20000010 	.word	0x20000010
 8003120:	2000000c 	.word	0x2000000c

08003124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003128:	4b06      	ldr	r3, [pc, #24]	; (8003144 <HAL_IncTick+0x20>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	461a      	mov	r2, r3
 800312e:	4b06      	ldr	r3, [pc, #24]	; (8003148 <HAL_IncTick+0x24>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4413      	add	r3, r2
 8003134:	4a04      	ldr	r2, [pc, #16]	; (8003148 <HAL_IncTick+0x24>)
 8003136:	6013      	str	r3, [r2, #0]
}
 8003138:	bf00      	nop
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	20000010 	.word	0x20000010
 8003148:	200003b8 	.word	0x200003b8

0800314c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  return uwTick;
 8003150:	4b03      	ldr	r3, [pc, #12]	; (8003160 <HAL_GetTick+0x14>)
 8003152:	681b      	ldr	r3, [r3, #0]
}
 8003154:	4618      	mov	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	200003b8 	.word	0x200003b8

08003164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800316c:	f7ff ffee 	bl	800314c <HAL_GetTick>
 8003170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800317c:	d005      	beq.n	800318a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800317e:	4b0a      	ldr	r3, [pc, #40]	; (80031a8 <HAL_Delay+0x44>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	461a      	mov	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4413      	add	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800318a:	bf00      	nop
 800318c:	f7ff ffde 	bl	800314c <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	429a      	cmp	r2, r3
 800319a:	d8f7      	bhi.n	800318c <HAL_Delay+0x28>
  {
  }
}
 800319c:	bf00      	nop
 800319e:	bf00      	nop
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000010 	.word	0x20000010

080031ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e11c      	b.n	80033f8 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d131      	bne.n	800322e <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a8c      	ldr	r2, [pc, #560]	; (8003400 <HAL_CAN_Init+0x254>)
 80031ce:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a8c      	ldr	r2, [pc, #560]	; (8003404 <HAL_CAN_Init+0x258>)
 80031d4:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a8b      	ldr	r2, [pc, #556]	; (8003408 <HAL_CAN_Init+0x25c>)
 80031da:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a8b      	ldr	r2, [pc, #556]	; (800340c <HAL_CAN_Init+0x260>)
 80031e0:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a8a      	ldr	r2, [pc, #552]	; (8003410 <HAL_CAN_Init+0x264>)
 80031e6:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a8a      	ldr	r2, [pc, #552]	; (8003414 <HAL_CAN_Init+0x268>)
 80031ec:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a89      	ldr	r2, [pc, #548]	; (8003418 <HAL_CAN_Init+0x26c>)
 80031f2:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a89      	ldr	r2, [pc, #548]	; (800341c <HAL_CAN_Init+0x270>)
 80031f8:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a88      	ldr	r2, [pc, #544]	; (8003420 <HAL_CAN_Init+0x274>)
 80031fe:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a88      	ldr	r2, [pc, #544]	; (8003424 <HAL_CAN_Init+0x278>)
 8003204:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a87      	ldr	r2, [pc, #540]	; (8003428 <HAL_CAN_Init+0x27c>)
 800320a:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a87      	ldr	r2, [pc, #540]	; (800342c <HAL_CAN_Init+0x280>)
 8003210:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a86      	ldr	r2, [pc, #536]	; (8003430 <HAL_CAN_Init+0x284>)
 8003216:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321c:	2b00      	cmp	r3, #0
 800321e:	d102      	bne.n	8003226 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a84      	ldr	r2, [pc, #528]	; (8003434 <HAL_CAN_Init+0x288>)
 8003224:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f042 0201 	orr.w	r2, r2, #1
 800323c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800323e:	f7ff ff85 	bl	800314c <HAL_GetTick>
 8003242:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003244:	e012      	b.n	800326c <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003246:	f7ff ff81 	bl	800314c <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b0a      	cmp	r3, #10
 8003252:	d90b      	bls.n	800326c <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2205      	movs	r2, #5
 8003264:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0c5      	b.n	80033f8 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0e5      	beq.n	8003246 <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0202 	bic.w	r2, r2, #2
 8003288:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800328a:	f7ff ff5f 	bl	800314c <HAL_GetTick>
 800328e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003290:	e012      	b.n	80032b8 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003292:	f7ff ff5b 	bl	800314c <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b0a      	cmp	r3, #10
 800329e:	d90b      	bls.n	80032b8 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2205      	movs	r2, #5
 80032b0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e09f      	b.n	80033f8 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1e5      	bne.n	8003292 <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	7e1b      	ldrb	r3, [r3, #24]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d108      	bne.n	80032e0 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	e007      	b.n	80032f0 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	7e5b      	ldrb	r3, [r3, #25]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d108      	bne.n	800330a <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	e007      	b.n	800331a <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003318:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	7e9b      	ldrb	r3, [r3, #26]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d108      	bne.n	8003334 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f042 0220 	orr.w	r2, r2, #32
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	e007      	b.n	8003344 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0220 	bic.w	r2, r2, #32
 8003342:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	7edb      	ldrb	r3, [r3, #27]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d108      	bne.n	800335e <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0210 	bic.w	r2, r2, #16
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	e007      	b.n	800336e <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f042 0210 	orr.w	r2, r2, #16
 800336c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	7f1b      	ldrb	r3, [r3, #28]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d108      	bne.n	8003388 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f042 0208 	orr.w	r2, r2, #8
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	e007      	b.n	8003398 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0208 	bic.w	r2, r2, #8
 8003396:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	7f5b      	ldrb	r3, [r3, #29]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d108      	bne.n	80033b2 <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0204 	orr.w	r2, r2, #4
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	e007      	b.n	80033c2 <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 0204 	bic.w	r2, r2, #4
 80033c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	ea42 0103 	orr.w	r1, r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	1e5a      	subs	r2, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	08004009 	.word	0x08004009
 8003404:	0800401d 	.word	0x0800401d
 8003408:	08004031 	.word	0x08004031
 800340c:	08004045 	.word	0x08004045
 8003410:	08003f91 	.word	0x08003f91
 8003414:	08003fa5 	.word	0x08003fa5
 8003418:	08003fb9 	.word	0x08003fb9
 800341c:	08003fcd 	.word	0x08003fcd
 8003420:	08003fe1 	.word	0x08003fe1
 8003424:	08003ff5 	.word	0x08003ff5
 8003428:	08004059 	.word	0x08004059
 800342c:	0800406d 	.word	0x0800406d
 8003430:	08004081 	.word	0x08004081
 8003434:	08002c11 	.word	0x08002c11

08003438 <HAL_CAN_RegisterCallback>:
  *           @arg @ref HAL_CAN_MSPDEINIT_CB_ID MspDeInit callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_RegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef CallbackID, void (* pCallback)(CAN_HandleTypeDef *_hcan))
{
 8003438:	b480      	push	{r7}
 800343a:	b087      	sub	sp, #28
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	460b      	mov	r3, r1
 8003442:	607a      	str	r2, [r7, #4]
 8003444:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d107      	bne.n	8003460 <HAL_CAN_RegisterCallback+0x28>
  {
    /* Update the error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e094      	b.n	800358a <HAL_CAN_RegisterCallback+0x152>
  }

  if (hcan->State == HAL_CAN_STATE_READY)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b01      	cmp	r3, #1
 800346a:	d168      	bne.n	800353e <HAL_CAN_RegisterCallback+0x106>
  {
    switch (CallbackID)
 800346c:	7afb      	ldrb	r3, [r7, #11]
 800346e:	2b0e      	cmp	r3, #14
 8003470:	d85c      	bhi.n	800352c <HAL_CAN_RegisterCallback+0xf4>
 8003472:	a201      	add	r2, pc, #4	; (adr r2, 8003478 <HAL_CAN_RegisterCallback+0x40>)
 8003474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003478:	080034b5 	.word	0x080034b5
 800347c:	080034bd 	.word	0x080034bd
 8003480:	080034c5 	.word	0x080034c5
 8003484:	080034cd 	.word	0x080034cd
 8003488:	080034d5 	.word	0x080034d5
 800348c:	080034dd 	.word	0x080034dd
 8003490:	080034e5 	.word	0x080034e5
 8003494:	080034ed 	.word	0x080034ed
 8003498:	080034f5 	.word	0x080034f5
 800349c:	080034fd 	.word	0x080034fd
 80034a0:	08003505 	.word	0x08003505
 80034a4:	0800350d 	.word	0x0800350d
 80034a8:	08003515 	.word	0x08003515
 80034ac:	0800351d 	.word	0x0800351d
 80034b0:	08003525 	.word	0x08003525
    {
      case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
        hcan->TxMailbox0CompleteCallback = pCallback;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 80034ba:	e065      	b.n	8003588 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
        hcan->TxMailbox1CompleteCallback = pCallback;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 80034c2:	e061      	b.n	8003588 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
        hcan->TxMailbox2CompleteCallback = pCallback;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 80034ca:	e05d      	b.n	8003588 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
        hcan->TxMailbox0AbortCallback = pCallback;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 80034d2:	e059      	b.n	8003588 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
        hcan->TxMailbox1AbortCallback = pCallback;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 80034da:	e055      	b.n	8003588 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
        hcan->TxMailbox2AbortCallback = pCallback;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	63da      	str	r2, [r3, #60]	; 0x3c
        break;
 80034e2:	e051      	b.n	8003588 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
        hcan->RxFifo0MsgPendingCallback = pCallback;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	641a      	str	r2, [r3, #64]	; 0x40
        break;
 80034ea:	e04d      	b.n	8003588 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO0_FULL_CB_ID :
        hcan->RxFifo0FullCallback = pCallback;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 80034f2:	e049      	b.n	8003588 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
        hcan->RxFifo1MsgPendingCallback = pCallback;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80034fa:	e045      	b.n	8003588 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO1_FULL_CB_ID :
        hcan->RxFifo1FullCallback = pCallback;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8003502:	e041      	b.n	8003588 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_SLEEP_CB_ID :
        hcan->SleepCallback = pCallback;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800350a:	e03d      	b.n	8003588 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
        hcan->WakeUpFromRxMsgCallback = pCallback;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8003512:	e039      	b.n	8003588 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_ERROR_CB_ID :
        hcan->ErrorCallback = pCallback;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800351a:	e035      	b.n	8003588 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPINIT_CB_ID :
        hcan->MspInitCallback = pCallback;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8003522:	e031      	b.n	8003588 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPDEINIT_CB_ID :
        hcan->MspDeInitCallback = pCallback;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800352a:	e02d      	b.n	8003588 <HAL_CAN_RegisterCallback+0x150>

      default :
        /* Update the error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	625a      	str	r2, [r3, #36]	; 0x24

        /* Return error status */
        status =  HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	75fb      	strb	r3, [r7, #23]
        break;
 800353c:	e024      	b.n	8003588 <HAL_CAN_RegisterCallback+0x150>
    }
  }
  else if (hcan->State == HAL_CAN_STATE_RESET)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d116      	bne.n	8003578 <HAL_CAN_RegisterCallback+0x140>
  {
    switch (CallbackID)
 800354a:	7afb      	ldrb	r3, [r7, #11]
 800354c:	2b0d      	cmp	r3, #13
 800354e:	d002      	beq.n	8003556 <HAL_CAN_RegisterCallback+0x11e>
 8003550:	2b0e      	cmp	r3, #14
 8003552:	d004      	beq.n	800355e <HAL_CAN_RegisterCallback+0x126>
 8003554:	e007      	b.n	8003566 <HAL_CAN_RegisterCallback+0x12e>
    {
      case HAL_CAN_MSPINIT_CB_ID :
        hcan->MspInitCallback = pCallback;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800355c:	e014      	b.n	8003588 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPDEINIT_CB_ID :
        hcan->MspDeInitCallback = pCallback;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8003564:	e010      	b.n	8003588 <HAL_CAN_RegisterCallback+0x150>

      default :
        /* Update the error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	625a      	str	r2, [r3, #36]	; 0x24

        /* Return error status */
        status =  HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	75fb      	strb	r3, [r7, #23]
        break;
 8003576:	e007      	b.n	8003588 <HAL_CAN_RegisterCallback+0x150>
    }
  }
  else
  {
    /* Update the error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return error status */
    status =  HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003588:	7dfb      	ldrb	r3, [r7, #23]
}
 800358a:	4618      	mov	r0, r3
 800358c:	371c      	adds	r7, #28
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop

08003598 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003598:	b480      	push	{r7}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035ae:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80035b0:	7cfb      	ldrb	r3, [r7, #19]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d003      	beq.n	80035be <HAL_CAN_ConfigFilter+0x26>
 80035b6:	7cfb      	ldrb	r3, [r7, #19]
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	f040 80be 	bne.w	800373a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80035be:	4b65      	ldr	r3, [pc, #404]	; (8003754 <HAL_CAN_ConfigFilter+0x1bc>)
 80035c0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80035c8:	f043 0201 	orr.w	r2, r3, #1
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80035d8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	021b      	lsls	r3, r3, #8
 80035ee:	431a      	orrs	r2, r3
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	f003 031f 	and.w	r3, r3, #31
 80035fe:	2201      	movs	r2, #1
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	43db      	mvns	r3, r3
 8003610:	401a      	ands	r2, r3
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d123      	bne.n	8003668 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	43db      	mvns	r3, r3
 800362a:	401a      	ands	r2, r3
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003642:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	3248      	adds	r2, #72	; 0x48
 8003648:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800365c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800365e:	6979      	ldr	r1, [r7, #20]
 8003660:	3348      	adds	r3, #72	; 0x48
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	440b      	add	r3, r1
 8003666:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d122      	bne.n	80036b6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	431a      	orrs	r2, r3
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003690:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	3248      	adds	r2, #72	; 0x48
 8003696:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80036aa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80036ac:	6979      	ldr	r1, [r7, #20]
 80036ae:	3348      	adds	r3, #72	; 0x48
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	440b      	add	r3, r1
 80036b4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d109      	bne.n	80036d2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	43db      	mvns	r3, r3
 80036c8:	401a      	ands	r2, r3
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80036d0:	e007      	b.n	80036e2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	431a      	orrs	r2, r3
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d109      	bne.n	80036fe <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	43db      	mvns	r3, r3
 80036f4:	401a      	ands	r2, r3
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80036fc:	e007      	b.n	800370e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	431a      	orrs	r2, r3
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d107      	bne.n	8003726 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	431a      	orrs	r2, r3
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800372c:	f023 0201 	bic.w	r2, r3, #1
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003736:	2300      	movs	r3, #0
 8003738:	e006      	b.n	8003748 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
  }
}
 8003748:	4618      	mov	r0, r3
 800374a:	371c      	adds	r7, #28
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	40006400 	.word	0x40006400

08003758 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b01      	cmp	r3, #1
 800376a:	d12e      	bne.n	80037ca <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0201 	bic.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003784:	f7ff fce2 	bl	800314c <HAL_GetTick>
 8003788:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800378a:	e012      	b.n	80037b2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800378c:	f7ff fcde 	bl	800314c <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b0a      	cmp	r3, #10
 8003798:	d90b      	bls.n	80037b2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2205      	movs	r2, #5
 80037aa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e012      	b.n	80037d8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1e5      	bne.n	800378c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	e006      	b.n	80037d8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
  }
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b089      	sub	sp, #36	; 0x24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
 80037ec:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037f4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80037fe:	7ffb      	ldrb	r3, [r7, #31]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d003      	beq.n	800380c <HAL_CAN_AddTxMessage+0x2c>
 8003804:	7ffb      	ldrb	r3, [r7, #31]
 8003806:	2b02      	cmp	r3, #2
 8003808:	f040 80b8 	bne.w	800397c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10a      	bne.n	800382c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800381c:	2b00      	cmp	r3, #0
 800381e:	d105      	bne.n	800382c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 80a0 	beq.w	800396c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	0e1b      	lsrs	r3, r3, #24
 8003830:	f003 0303 	and.w	r3, r3, #3
 8003834:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2b02      	cmp	r3, #2
 800383a:	d907      	bls.n	800384c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e09e      	b.n	800398a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800384c:	2201      	movs	r2, #1
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	409a      	lsls	r2, r3
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10d      	bne.n	800387a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003868:	68f9      	ldr	r1, [r7, #12]
 800386a:	6809      	ldr	r1, [r1, #0]
 800386c:	431a      	orrs	r2, r3
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	3318      	adds	r3, #24
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	440b      	add	r3, r1
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	e00f      	b.n	800389a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003884:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800388a:	68f9      	ldr	r1, [r7, #12]
 800388c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800388e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	3318      	adds	r3, #24
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	440b      	add	r3, r1
 8003898:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6819      	ldr	r1, [r3, #0]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	3318      	adds	r3, #24
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	440b      	add	r3, r1
 80038aa:	3304      	adds	r3, #4
 80038ac:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	7d1b      	ldrb	r3, [r3, #20]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d111      	bne.n	80038da <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	3318      	adds	r3, #24
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	4413      	add	r3, r2
 80038c2:	3304      	adds	r3, #4
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	6811      	ldr	r1, [r2, #0]
 80038ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	3318      	adds	r3, #24
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	440b      	add	r3, r1
 80038d6:	3304      	adds	r3, #4
 80038d8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3307      	adds	r3, #7
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	061a      	lsls	r2, r3, #24
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3306      	adds	r3, #6
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	041b      	lsls	r3, r3, #16
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3305      	adds	r3, #5
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	021b      	lsls	r3, r3, #8
 80038f4:	4313      	orrs	r3, r2
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	3204      	adds	r2, #4
 80038fa:	7812      	ldrb	r2, [r2, #0]
 80038fc:	4610      	mov	r0, r2
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	6811      	ldr	r1, [r2, #0]
 8003902:	ea43 0200 	orr.w	r2, r3, r0
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	440b      	add	r3, r1
 800390c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003910:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3303      	adds	r3, #3
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	061a      	lsls	r2, r3, #24
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3302      	adds	r3, #2
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	041b      	lsls	r3, r3, #16
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3301      	adds	r3, #1
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	021b      	lsls	r3, r3, #8
 800392c:	4313      	orrs	r3, r2
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	7812      	ldrb	r2, [r2, #0]
 8003932:	4610      	mov	r0, r2
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	6811      	ldr	r1, [r2, #0]
 8003938:	ea43 0200 	orr.w	r2, r3, r0
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	440b      	add	r3, r1
 8003942:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003946:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	3318      	adds	r3, #24
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	4413      	add	r3, r2
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	6811      	ldr	r1, [r2, #0]
 800395a:	f043 0201 	orr.w	r2, r3, #1
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	3318      	adds	r3, #24
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	440b      	add	r3, r1
 8003966:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003968:	2300      	movs	r3, #0
 800396a:	e00e      	b.n	800398a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e006      	b.n	800398a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
  }
}
 800398a:	4618      	mov	r0, r3
 800398c:	3724      	adds	r7, #36	; 0x24
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003996:	b480      	push	{r7}
 8003998:	b087      	sub	sp, #28
 800399a:	af00      	add	r7, sp, #0
 800399c:	60f8      	str	r0, [r7, #12]
 800399e:	60b9      	str	r1, [r7, #8]
 80039a0:	607a      	str	r2, [r7, #4]
 80039a2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039aa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80039ac:	7dfb      	ldrb	r3, [r7, #23]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d003      	beq.n	80039ba <HAL_CAN_GetRxMessage+0x24>
 80039b2:	7dfb      	ldrb	r3, [r7, #23]
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	f040 80f3 	bne.w	8003ba0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10e      	bne.n	80039de <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d116      	bne.n	80039fc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e0e7      	b.n	8003bae <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	f003 0303 	and.w	r3, r3, #3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d107      	bne.n	80039fc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0d8      	b.n	8003bae <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	331b      	adds	r3, #27
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	4413      	add	r3, r2
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0204 	and.w	r2, r3, #4
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10c      	bne.n	8003a34 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	331b      	adds	r3, #27
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	4413      	add	r3, r2
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	0d5b      	lsrs	r3, r3, #21
 8003a2a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	e00b      	b.n	8003a4c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	331b      	adds	r3, #27
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	4413      	add	r3, r2
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	08db      	lsrs	r3, r3, #3
 8003a44:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	331b      	adds	r3, #27
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	4413      	add	r3, r2
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0202 	and.w	r2, r3, #2
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	331b      	adds	r3, #27
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	4413      	add	r3, r2
 8003a6e:	3304      	adds	r3, #4
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 020f 	and.w	r2, r3, #15
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	331b      	adds	r3, #27
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	4413      	add	r3, r2
 8003a86:	3304      	adds	r3, #4
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	0a1b      	lsrs	r3, r3, #8
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	331b      	adds	r3, #27
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	4413      	add	r3, r2
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	0c1b      	lsrs	r3, r3, #16
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	0a1a      	lsrs	r2, r3, #8
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	0c1a      	lsrs	r2, r3, #16
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	3302      	adds	r3, #2
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	0e1a      	lsrs	r2, r3, #24
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	3303      	adds	r3, #3
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	3304      	adds	r3, #4
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	0a1a      	lsrs	r2, r3, #8
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	3305      	adds	r3, #5
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	011b      	lsls	r3, r3, #4
 8003b48:	4413      	add	r3, r2
 8003b4a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	0c1a      	lsrs	r2, r3, #16
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	3306      	adds	r3, #6
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	0e1a      	lsrs	r2, r3, #24
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	3307      	adds	r3, #7
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d108      	bne.n	8003b8c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68da      	ldr	r2, [r3, #12]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f042 0220 	orr.w	r2, r2, #32
 8003b88:	60da      	str	r2, [r3, #12]
 8003b8a:	e007      	b.n	8003b9c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691a      	ldr	r2, [r3, #16]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0220 	orr.w	r2, r2, #32
 8003b9a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	e006      	b.n	8003bae <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
  }
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	371c      	adds	r7, #28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b085      	sub	sp, #20
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bca:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d002      	beq.n	8003bd8 <HAL_CAN_ActivateNotification+0x1e>
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d109      	bne.n	8003bec <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6959      	ldr	r1, [r3, #20]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	e006      	b.n	8003bfa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
  }
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b08a      	sub	sp, #40	; 0x28
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 8083 	beq.w	8003d54 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d025      	beq.n	8003ca4 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d004      	beq.n	8003c74 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	4798      	blx	r3
 8003c72:	e017      	b.n	8003ca4 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	f003 0304 	and.w	r3, r3, #4
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d004      	beq.n	8003c88 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24
 8003c86:	e00d      	b.n	8003ca4 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d004      	beq.n	8003c9c <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
 8003c9a:	e003      	b.n	8003ca4 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d026      	beq.n	8003cfc <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cb6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d004      	beq.n	8003ccc <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	4798      	blx	r3
 8003cca:	e017      	b.n	8003cfc <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d004      	beq.n	8003ce0 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cde:	e00d      	b.n	8003cfc <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d004      	beq.n	8003cf4 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf2:	e003      	b.n	8003cfc <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d026      	beq.n	8003d54 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d0e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d004      	beq.n	8003d24 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	4798      	blx	r3
 8003d22:	e017      	b.n	8003d54 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d004      	beq.n	8003d38 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
 8003d36:	e00d      	b.n	8003d54 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d004      	beq.n	8003d4c <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4a:	e003      	b.n	8003d54 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00c      	beq.n	8003d78 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f003 0310 	and.w	r3, r3, #16
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d007      	beq.n	8003d78 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2210      	movs	r2, #16
 8003d76:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00c      	beq.n	8003d9c <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d007      	beq.n	8003d9c <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2208      	movs	r2, #8
 8003d92:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f003 0303 	and.w	r3, r3, #3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00c      	beq.n	8003de0 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f003 0310 	and.w	r3, r3, #16
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d007      	beq.n	8003de0 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2210      	movs	r2, #16
 8003dde:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00c      	beq.n	8003e04 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d007      	beq.n	8003e04 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2208      	movs	r2, #8
 8003dfa:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003e24:	6a3b      	ldr	r3, [r7, #32]
 8003e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00c      	beq.n	8003e48 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	f003 0310 	and.w	r3, r3, #16
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d007      	beq.n	8003e48 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2210      	movs	r2, #16
 8003e3e:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00c      	beq.n	8003e6c <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d007      	beq.n	8003e6c <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2208      	movs	r2, #8
 8003e62:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d07b      	beq.n	8003f6e <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d072      	beq.n	8003f66 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d008      	beq.n	8003e9c <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	f043 0301 	orr.w	r3, r3, #1
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d008      	beq.n	8003eb8 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	f043 0302 	orr.w	r3, r3, #2
 8003eb6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d008      	beq.n	8003ed4 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	f043 0304 	orr.w	r3, r3, #4
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d043      	beq.n	8003f66 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d03e      	beq.n	8003f66 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003eee:	2b60      	cmp	r3, #96	; 0x60
 8003ef0:	d02b      	beq.n	8003f4a <HAL_CAN_IRQHandler+0x344>
 8003ef2:	2b60      	cmp	r3, #96	; 0x60
 8003ef4:	d82e      	bhi.n	8003f54 <HAL_CAN_IRQHandler+0x34e>
 8003ef6:	2b50      	cmp	r3, #80	; 0x50
 8003ef8:	d022      	beq.n	8003f40 <HAL_CAN_IRQHandler+0x33a>
 8003efa:	2b50      	cmp	r3, #80	; 0x50
 8003efc:	d82a      	bhi.n	8003f54 <HAL_CAN_IRQHandler+0x34e>
 8003efe:	2b40      	cmp	r3, #64	; 0x40
 8003f00:	d019      	beq.n	8003f36 <HAL_CAN_IRQHandler+0x330>
 8003f02:	2b40      	cmp	r3, #64	; 0x40
 8003f04:	d826      	bhi.n	8003f54 <HAL_CAN_IRQHandler+0x34e>
 8003f06:	2b30      	cmp	r3, #48	; 0x30
 8003f08:	d010      	beq.n	8003f2c <HAL_CAN_IRQHandler+0x326>
 8003f0a:	2b30      	cmp	r3, #48	; 0x30
 8003f0c:	d822      	bhi.n	8003f54 <HAL_CAN_IRQHandler+0x34e>
 8003f0e:	2b10      	cmp	r3, #16
 8003f10:	d002      	beq.n	8003f18 <HAL_CAN_IRQHandler+0x312>
 8003f12:	2b20      	cmp	r3, #32
 8003f14:	d005      	beq.n	8003f22 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003f16:	e01d      	b.n	8003f54 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	f043 0308 	orr.w	r3, r3, #8
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f20:	e019      	b.n	8003f56 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	f043 0310 	orr.w	r3, r3, #16
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f2a:	e014      	b.n	8003f56 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	f043 0320 	orr.w	r3, r3, #32
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f34:	e00f      	b.n	8003f56 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f3e:	e00a      	b.n	8003f56 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f46:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f48:	e005      	b.n	8003f56 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f50:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f52:	e000      	b.n	8003f56 <HAL_CAN_IRQHandler+0x350>
            break;
 8003f54:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	699a      	ldr	r2, [r3, #24]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f64:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2204      	movs	r2, #4
 8003f6c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d009      	beq.n	8003f88 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003f88:	bf00      	nop
 8003f8a:	3728      	adds	r7, #40	; 0x28
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040a4:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <__NVIC_SetPriorityGrouping+0x44>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040b0:	4013      	ands	r3, r2
 80040b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040c6:	4a04      	ldr	r2, [pc, #16]	; (80040d8 <__NVIC_SetPriorityGrouping+0x44>)
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	60d3      	str	r3, [r2, #12]
}
 80040cc:	bf00      	nop
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	e000ed00 	.word	0xe000ed00

080040dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040e0:	4b04      	ldr	r3, [pc, #16]	; (80040f4 <__NVIC_GetPriorityGrouping+0x18>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	0a1b      	lsrs	r3, r3, #8
 80040e6:	f003 0307 	and.w	r3, r3, #7
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	e000ed00 	.word	0xe000ed00

080040f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	4603      	mov	r3, r0
 8004100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004106:	2b00      	cmp	r3, #0
 8004108:	db0b      	blt.n	8004122 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800410a:	79fb      	ldrb	r3, [r7, #7]
 800410c:	f003 021f 	and.w	r2, r3, #31
 8004110:	4907      	ldr	r1, [pc, #28]	; (8004130 <__NVIC_EnableIRQ+0x38>)
 8004112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	2001      	movs	r0, #1
 800411a:	fa00 f202 	lsl.w	r2, r0, r2
 800411e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	e000e100 	.word	0xe000e100

08004134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	4603      	mov	r3, r0
 800413c:	6039      	str	r1, [r7, #0]
 800413e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004144:	2b00      	cmp	r3, #0
 8004146:	db0a      	blt.n	800415e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	b2da      	uxtb	r2, r3
 800414c:	490c      	ldr	r1, [pc, #48]	; (8004180 <__NVIC_SetPriority+0x4c>)
 800414e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004152:	0112      	lsls	r2, r2, #4
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	440b      	add	r3, r1
 8004158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800415c:	e00a      	b.n	8004174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	b2da      	uxtb	r2, r3
 8004162:	4908      	ldr	r1, [pc, #32]	; (8004184 <__NVIC_SetPriority+0x50>)
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	f003 030f 	and.w	r3, r3, #15
 800416a:	3b04      	subs	r3, #4
 800416c:	0112      	lsls	r2, r2, #4
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	440b      	add	r3, r1
 8004172:	761a      	strb	r2, [r3, #24]
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	e000e100 	.word	0xe000e100
 8004184:	e000ed00 	.word	0xe000ed00

08004188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004188:	b480      	push	{r7}
 800418a:	b089      	sub	sp, #36	; 0x24
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	f1c3 0307 	rsb	r3, r3, #7
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	bf28      	it	cs
 80041a6:	2304      	movcs	r3, #4
 80041a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	3304      	adds	r3, #4
 80041ae:	2b06      	cmp	r3, #6
 80041b0:	d902      	bls.n	80041b8 <NVIC_EncodePriority+0x30>
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	3b03      	subs	r3, #3
 80041b6:	e000      	b.n	80041ba <NVIC_EncodePriority+0x32>
 80041b8:	2300      	movs	r3, #0
 80041ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	43da      	mvns	r2, r3
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	401a      	ands	r2, r3
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	fa01 f303 	lsl.w	r3, r1, r3
 80041da:	43d9      	mvns	r1, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041e0:	4313      	orrs	r3, r2
         );
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3724      	adds	r7, #36	; 0x24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
	...

080041f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004200:	d301      	bcc.n	8004206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004202:	2301      	movs	r3, #1
 8004204:	e00f      	b.n	8004226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004206:	4a0a      	ldr	r2, [pc, #40]	; (8004230 <SysTick_Config+0x40>)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3b01      	subs	r3, #1
 800420c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800420e:	210f      	movs	r1, #15
 8004210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004214:	f7ff ff8e 	bl	8004134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004218:	4b05      	ldr	r3, [pc, #20]	; (8004230 <SysTick_Config+0x40>)
 800421a:	2200      	movs	r2, #0
 800421c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800421e:	4b04      	ldr	r3, [pc, #16]	; (8004230 <SysTick_Config+0x40>)
 8004220:	2207      	movs	r2, #7
 8004222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	e000e010 	.word	0xe000e010

08004234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7ff ff29 	bl	8004094 <__NVIC_SetPriorityGrouping>
}
 8004242:	bf00      	nop
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800424a:	b580      	push	{r7, lr}
 800424c:	b086      	sub	sp, #24
 800424e:	af00      	add	r7, sp, #0
 8004250:	4603      	mov	r3, r0
 8004252:	60b9      	str	r1, [r7, #8]
 8004254:	607a      	str	r2, [r7, #4]
 8004256:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004258:	2300      	movs	r3, #0
 800425a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800425c:	f7ff ff3e 	bl	80040dc <__NVIC_GetPriorityGrouping>
 8004260:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	68b9      	ldr	r1, [r7, #8]
 8004266:	6978      	ldr	r0, [r7, #20]
 8004268:	f7ff ff8e 	bl	8004188 <NVIC_EncodePriority>
 800426c:	4602      	mov	r2, r0
 800426e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004272:	4611      	mov	r1, r2
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff ff5d 	bl	8004134 <__NVIC_SetPriority>
}
 800427a:	bf00      	nop
 800427c:	3718      	adds	r7, #24
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b082      	sub	sp, #8
 8004286:	af00      	add	r7, sp, #0
 8004288:	4603      	mov	r3, r0
 800428a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800428c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff ff31 	bl	80040f8 <__NVIC_EnableIRQ>
}
 8004296:	bf00      	nop
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b082      	sub	sp, #8
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7ff ffa2 	bl	80041f0 <SysTick_Config>
 80042ac:	4603      	mov	r3, r0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b089      	sub	sp, #36	; 0x24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042ce:	2300      	movs	r3, #0
 80042d0:	61fb      	str	r3, [r7, #28]
 80042d2:	e16b      	b.n	80045ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042d4:	2201      	movs	r2, #1
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	4013      	ands	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	f040 815a 	bne.w	80045a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d005      	beq.n	800430a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004306:	2b02      	cmp	r3, #2
 8004308:	d130      	bne.n	800436c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	2203      	movs	r2, #3
 8004316:	fa02 f303 	lsl.w	r3, r2, r3
 800431a:	43db      	mvns	r3, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4013      	ands	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	4313      	orrs	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004340:	2201      	movs	r2, #1
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	43db      	mvns	r3, r3
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	4013      	ands	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	091b      	lsrs	r3, r3, #4
 8004356:	f003 0201 	and.w	r2, r3, #1
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	4313      	orrs	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f003 0303 	and.w	r3, r3, #3
 8004374:	2b03      	cmp	r3, #3
 8004376:	d017      	beq.n	80043a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	2203      	movs	r2, #3
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	43db      	mvns	r3, r3
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	4013      	ands	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	4313      	orrs	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f003 0303 	and.w	r3, r3, #3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d123      	bne.n	80043fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	08da      	lsrs	r2, r3, #3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3208      	adds	r2, #8
 80043bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	220f      	movs	r2, #15
 80043cc:	fa02 f303 	lsl.w	r3, r2, r3
 80043d0:	43db      	mvns	r3, r3
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	4013      	ands	r3, r2
 80043d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	08da      	lsrs	r2, r3, #3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3208      	adds	r2, #8
 80043f6:	69b9      	ldr	r1, [r7, #24]
 80043f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	2203      	movs	r2, #3
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	43db      	mvns	r3, r3
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	4013      	ands	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f003 0203 	and.w	r2, r3, #3
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	4313      	orrs	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 80b4 	beq.w	80045a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800443e:	2300      	movs	r3, #0
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	4b60      	ldr	r3, [pc, #384]	; (80045c4 <HAL_GPIO_Init+0x30c>)
 8004444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004446:	4a5f      	ldr	r2, [pc, #380]	; (80045c4 <HAL_GPIO_Init+0x30c>)
 8004448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800444c:	6453      	str	r3, [r2, #68]	; 0x44
 800444e:	4b5d      	ldr	r3, [pc, #372]	; (80045c4 <HAL_GPIO_Init+0x30c>)
 8004450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800445a:	4a5b      	ldr	r2, [pc, #364]	; (80045c8 <HAL_GPIO_Init+0x310>)
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	089b      	lsrs	r3, r3, #2
 8004460:	3302      	adds	r3, #2
 8004462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	220f      	movs	r2, #15
 8004472:	fa02 f303 	lsl.w	r3, r2, r3
 8004476:	43db      	mvns	r3, r3
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	4013      	ands	r3, r2
 800447c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a52      	ldr	r2, [pc, #328]	; (80045cc <HAL_GPIO_Init+0x314>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d02b      	beq.n	80044de <HAL_GPIO_Init+0x226>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a51      	ldr	r2, [pc, #324]	; (80045d0 <HAL_GPIO_Init+0x318>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d025      	beq.n	80044da <HAL_GPIO_Init+0x222>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a50      	ldr	r2, [pc, #320]	; (80045d4 <HAL_GPIO_Init+0x31c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d01f      	beq.n	80044d6 <HAL_GPIO_Init+0x21e>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a4f      	ldr	r2, [pc, #316]	; (80045d8 <HAL_GPIO_Init+0x320>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d019      	beq.n	80044d2 <HAL_GPIO_Init+0x21a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a4e      	ldr	r2, [pc, #312]	; (80045dc <HAL_GPIO_Init+0x324>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d013      	beq.n	80044ce <HAL_GPIO_Init+0x216>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a4d      	ldr	r2, [pc, #308]	; (80045e0 <HAL_GPIO_Init+0x328>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d00d      	beq.n	80044ca <HAL_GPIO_Init+0x212>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a4c      	ldr	r2, [pc, #304]	; (80045e4 <HAL_GPIO_Init+0x32c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d007      	beq.n	80044c6 <HAL_GPIO_Init+0x20e>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a4b      	ldr	r2, [pc, #300]	; (80045e8 <HAL_GPIO_Init+0x330>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d101      	bne.n	80044c2 <HAL_GPIO_Init+0x20a>
 80044be:	2307      	movs	r3, #7
 80044c0:	e00e      	b.n	80044e0 <HAL_GPIO_Init+0x228>
 80044c2:	2308      	movs	r3, #8
 80044c4:	e00c      	b.n	80044e0 <HAL_GPIO_Init+0x228>
 80044c6:	2306      	movs	r3, #6
 80044c8:	e00a      	b.n	80044e0 <HAL_GPIO_Init+0x228>
 80044ca:	2305      	movs	r3, #5
 80044cc:	e008      	b.n	80044e0 <HAL_GPIO_Init+0x228>
 80044ce:	2304      	movs	r3, #4
 80044d0:	e006      	b.n	80044e0 <HAL_GPIO_Init+0x228>
 80044d2:	2303      	movs	r3, #3
 80044d4:	e004      	b.n	80044e0 <HAL_GPIO_Init+0x228>
 80044d6:	2302      	movs	r3, #2
 80044d8:	e002      	b.n	80044e0 <HAL_GPIO_Init+0x228>
 80044da:	2301      	movs	r3, #1
 80044dc:	e000      	b.n	80044e0 <HAL_GPIO_Init+0x228>
 80044de:	2300      	movs	r3, #0
 80044e0:	69fa      	ldr	r2, [r7, #28]
 80044e2:	f002 0203 	and.w	r2, r2, #3
 80044e6:	0092      	lsls	r2, r2, #2
 80044e8:	4093      	lsls	r3, r2
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044f0:	4935      	ldr	r1, [pc, #212]	; (80045c8 <HAL_GPIO_Init+0x310>)
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	089b      	lsrs	r3, r3, #2
 80044f6:	3302      	adds	r3, #2
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044fe:	4b3b      	ldr	r3, [pc, #236]	; (80045ec <HAL_GPIO_Init+0x334>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	43db      	mvns	r3, r3
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	4013      	ands	r3, r2
 800450c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	4313      	orrs	r3, r2
 8004520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004522:	4a32      	ldr	r2, [pc, #200]	; (80045ec <HAL_GPIO_Init+0x334>)
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004528:	4b30      	ldr	r3, [pc, #192]	; (80045ec <HAL_GPIO_Init+0x334>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	43db      	mvns	r3, r3
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	4013      	ands	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	4313      	orrs	r3, r2
 800454a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800454c:	4a27      	ldr	r2, [pc, #156]	; (80045ec <HAL_GPIO_Init+0x334>)
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004552:	4b26      	ldr	r3, [pc, #152]	; (80045ec <HAL_GPIO_Init+0x334>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	43db      	mvns	r3, r3
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	4013      	ands	r3, r2
 8004560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	4313      	orrs	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004576:	4a1d      	ldr	r2, [pc, #116]	; (80045ec <HAL_GPIO_Init+0x334>)
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800457c:	4b1b      	ldr	r3, [pc, #108]	; (80045ec <HAL_GPIO_Init+0x334>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	43db      	mvns	r3, r3
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	4013      	ands	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045a0:	4a12      	ldr	r2, [pc, #72]	; (80045ec <HAL_GPIO_Init+0x334>)
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	3301      	adds	r3, #1
 80045aa:	61fb      	str	r3, [r7, #28]
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	2b0f      	cmp	r3, #15
 80045b0:	f67f ae90 	bls.w	80042d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045b4:	bf00      	nop
 80045b6:	bf00      	nop
 80045b8:	3724      	adds	r7, #36	; 0x24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40023800 	.word	0x40023800
 80045c8:	40013800 	.word	0x40013800
 80045cc:	40020000 	.word	0x40020000
 80045d0:	40020400 	.word	0x40020400
 80045d4:	40020800 	.word	0x40020800
 80045d8:	40020c00 	.word	0x40020c00
 80045dc:	40021000 	.word	0x40021000
 80045e0:	40021400 	.word	0x40021400
 80045e4:	40021800 	.word	0x40021800
 80045e8:	40021c00 	.word	0x40021c00
 80045ec:	40013c00 	.word	0x40013c00

080045f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	460b      	mov	r3, r1
 80045fa:	807b      	strh	r3, [r7, #2]
 80045fc:	4613      	mov	r3, r2
 80045fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004600:	787b      	ldrb	r3, [r7, #1]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004606:	887a      	ldrh	r2, [r7, #2]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800460c:	e003      	b.n	8004616 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800460e:	887b      	ldrh	r3, [r7, #2]
 8004610:	041a      	lsls	r2, r3, #16
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	619a      	str	r2, [r3, #24]
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
	...

08004624 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e12b      	b.n	800488e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d106      	bne.n	8004650 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7fe fb30 	bl	8002cb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2224      	movs	r2, #36	; 0x24
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 0201 	bic.w	r2, r2, #1
 8004666:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004676:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004686:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004688:	f001 fd2a 	bl	80060e0 <HAL_RCC_GetPCLK1Freq>
 800468c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	4a81      	ldr	r2, [pc, #516]	; (8004898 <HAL_I2C_Init+0x274>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d807      	bhi.n	80046a8 <HAL_I2C_Init+0x84>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4a80      	ldr	r2, [pc, #512]	; (800489c <HAL_I2C_Init+0x278>)
 800469c:	4293      	cmp	r3, r2
 800469e:	bf94      	ite	ls
 80046a0:	2301      	movls	r3, #1
 80046a2:	2300      	movhi	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	e006      	b.n	80046b6 <HAL_I2C_Init+0x92>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4a7d      	ldr	r2, [pc, #500]	; (80048a0 <HAL_I2C_Init+0x27c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	bf94      	ite	ls
 80046b0:	2301      	movls	r3, #1
 80046b2:	2300      	movhi	r3, #0
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e0e7      	b.n	800488e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4a78      	ldr	r2, [pc, #480]	; (80048a4 <HAL_I2C_Init+0x280>)
 80046c2:	fba2 2303 	umull	r2, r3, r2, r3
 80046c6:	0c9b      	lsrs	r3, r3, #18
 80046c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	430a      	orrs	r2, r1
 80046dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	4a6a      	ldr	r2, [pc, #424]	; (8004898 <HAL_I2C_Init+0x274>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d802      	bhi.n	80046f8 <HAL_I2C_Init+0xd4>
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	3301      	adds	r3, #1
 80046f6:	e009      	b.n	800470c <HAL_I2C_Init+0xe8>
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80046fe:	fb02 f303 	mul.w	r3, r2, r3
 8004702:	4a69      	ldr	r2, [pc, #420]	; (80048a8 <HAL_I2C_Init+0x284>)
 8004704:	fba2 2303 	umull	r2, r3, r2, r3
 8004708:	099b      	lsrs	r3, r3, #6
 800470a:	3301      	adds	r3, #1
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6812      	ldr	r2, [r2, #0]
 8004710:	430b      	orrs	r3, r1
 8004712:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800471e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	495c      	ldr	r1, [pc, #368]	; (8004898 <HAL_I2C_Init+0x274>)
 8004728:	428b      	cmp	r3, r1
 800472a:	d819      	bhi.n	8004760 <HAL_I2C_Init+0x13c>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	1e59      	subs	r1, r3, #1
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	fbb1 f3f3 	udiv	r3, r1, r3
 800473a:	1c59      	adds	r1, r3, #1
 800473c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004740:	400b      	ands	r3, r1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <HAL_I2C_Init+0x138>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	1e59      	subs	r1, r3, #1
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	fbb1 f3f3 	udiv	r3, r1, r3
 8004754:	3301      	adds	r3, #1
 8004756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800475a:	e051      	b.n	8004800 <HAL_I2C_Init+0x1dc>
 800475c:	2304      	movs	r3, #4
 800475e:	e04f      	b.n	8004800 <HAL_I2C_Init+0x1dc>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d111      	bne.n	800478c <HAL_I2C_Init+0x168>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	1e58      	subs	r0, r3, #1
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6859      	ldr	r1, [r3, #4]
 8004770:	460b      	mov	r3, r1
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	440b      	add	r3, r1
 8004776:	fbb0 f3f3 	udiv	r3, r0, r3
 800477a:	3301      	adds	r3, #1
 800477c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004780:	2b00      	cmp	r3, #0
 8004782:	bf0c      	ite	eq
 8004784:	2301      	moveq	r3, #1
 8004786:	2300      	movne	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	e012      	b.n	80047b2 <HAL_I2C_Init+0x18e>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	1e58      	subs	r0, r3, #1
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6859      	ldr	r1, [r3, #4]
 8004794:	460b      	mov	r3, r1
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	440b      	add	r3, r1
 800479a:	0099      	lsls	r1, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	fbb0 f3f3 	udiv	r3, r0, r3
 80047a2:	3301      	adds	r3, #1
 80047a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	bf0c      	ite	eq
 80047ac:	2301      	moveq	r3, #1
 80047ae:	2300      	movne	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <HAL_I2C_Init+0x196>
 80047b6:	2301      	movs	r3, #1
 80047b8:	e022      	b.n	8004800 <HAL_I2C_Init+0x1dc>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10e      	bne.n	80047e0 <HAL_I2C_Init+0x1bc>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	1e58      	subs	r0, r3, #1
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6859      	ldr	r1, [r3, #4]
 80047ca:	460b      	mov	r3, r1
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	440b      	add	r3, r1
 80047d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80047d4:	3301      	adds	r3, #1
 80047d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047de:	e00f      	b.n	8004800 <HAL_I2C_Init+0x1dc>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	1e58      	subs	r0, r3, #1
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6859      	ldr	r1, [r3, #4]
 80047e8:	460b      	mov	r3, r1
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	0099      	lsls	r1, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80047f6:	3301      	adds	r3, #1
 80047f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004800:	6879      	ldr	r1, [r7, #4]
 8004802:	6809      	ldr	r1, [r1, #0]
 8004804:	4313      	orrs	r3, r2
 8004806:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	69da      	ldr	r2, [r3, #28]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	431a      	orrs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800482e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6911      	ldr	r1, [r2, #16]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	68d2      	ldr	r2, [r2, #12]
 800483a:	4311      	orrs	r1, r2
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6812      	ldr	r2, [r2, #0]
 8004840:	430b      	orrs	r3, r1
 8004842:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	695a      	ldr	r2, [r3, #20]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0201 	orr.w	r2, r2, #1
 800486e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	000186a0 	.word	0x000186a0
 800489c:	001e847f 	.word	0x001e847f
 80048a0:	003d08ff 	.word	0x003d08ff
 80048a4:	431bde83 	.word	0x431bde83
 80048a8:	10624dd3 	.word	0x10624dd3

080048ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b088      	sub	sp, #32
 80048b0:	af02      	add	r7, sp, #8
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	4608      	mov	r0, r1
 80048b6:	4611      	mov	r1, r2
 80048b8:	461a      	mov	r2, r3
 80048ba:	4603      	mov	r3, r0
 80048bc:	817b      	strh	r3, [r7, #10]
 80048be:	460b      	mov	r3, r1
 80048c0:	813b      	strh	r3, [r7, #8]
 80048c2:	4613      	mov	r3, r2
 80048c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048c6:	f7fe fc41 	bl	800314c <HAL_GetTick>
 80048ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b20      	cmp	r3, #32
 80048d6:	f040 80d9 	bne.w	8004a8c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	2319      	movs	r3, #25
 80048e0:	2201      	movs	r2, #1
 80048e2:	496d      	ldr	r1, [pc, #436]	; (8004a98 <HAL_I2C_Mem_Write+0x1ec>)
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 fdad 	bl	8005444 <I2C_WaitOnFlagUntilTimeout>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80048f0:	2302      	movs	r3, #2
 80048f2:	e0cc      	b.n	8004a8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d101      	bne.n	8004902 <HAL_I2C_Mem_Write+0x56>
 80048fe:	2302      	movs	r3, #2
 8004900:	e0c5      	b.n	8004a8e <HAL_I2C_Mem_Write+0x1e2>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	2b01      	cmp	r3, #1
 8004916:	d007      	beq.n	8004928 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0201 	orr.w	r2, r2, #1
 8004926:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004936:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2221      	movs	r2, #33	; 0x21
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2240      	movs	r2, #64	; 0x40
 8004944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6a3a      	ldr	r2, [r7, #32]
 8004952:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004958:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495e:	b29a      	uxth	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4a4d      	ldr	r2, [pc, #308]	; (8004a9c <HAL_I2C_Mem_Write+0x1f0>)
 8004968:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800496a:	88f8      	ldrh	r0, [r7, #6]
 800496c:	893a      	ldrh	r2, [r7, #8]
 800496e:	8979      	ldrh	r1, [r7, #10]
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	9301      	str	r3, [sp, #4]
 8004974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	4603      	mov	r3, r0
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 fbe4 	bl	8005148 <I2C_RequestMemoryWrite>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d052      	beq.n	8004a2c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e081      	b.n	8004a8e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 fe2e 	bl	80055f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00d      	beq.n	80049b6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d107      	bne.n	80049b2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e06b      	b.n	8004a8e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	781a      	ldrb	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	d11b      	bne.n	8004a2c <HAL_I2C_Mem_Write+0x180>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d017      	beq.n	8004a2c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	781a      	ldrb	r2, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a16:	3b01      	subs	r3, #1
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	3b01      	subs	r3, #1
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1aa      	bne.n	800498a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 fe1a 	bl	8005672 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00d      	beq.n	8004a60 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d107      	bne.n	8004a5c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a5a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e016      	b.n	8004a8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	e000      	b.n	8004a8e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004a8c:	2302      	movs	r3, #2
  }
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3718      	adds	r7, #24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	00100002 	.word	0x00100002
 8004a9c:	ffff0000 	.word	0xffff0000

08004aa0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b08c      	sub	sp, #48	; 0x30
 8004aa4:	af02      	add	r7, sp, #8
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	4608      	mov	r0, r1
 8004aaa:	4611      	mov	r1, r2
 8004aac:	461a      	mov	r2, r3
 8004aae:	4603      	mov	r3, r0
 8004ab0:	817b      	strh	r3, [r7, #10]
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	813b      	strh	r3, [r7, #8]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004aba:	f7fe fb47 	bl	800314c <HAL_GetTick>
 8004abe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b20      	cmp	r3, #32
 8004aca:	f040 8208 	bne.w	8004ede <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	2319      	movs	r3, #25
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	497b      	ldr	r1, [pc, #492]	; (8004cc4 <HAL_I2C_Mem_Read+0x224>)
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 fcb3 	bl	8005444 <I2C_WaitOnFlagUntilTimeout>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e1fb      	b.n	8004ee0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d101      	bne.n	8004af6 <HAL_I2C_Mem_Read+0x56>
 8004af2:	2302      	movs	r3, #2
 8004af4:	e1f4      	b.n	8004ee0 <HAL_I2C_Mem_Read+0x440>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d007      	beq.n	8004b1c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2222      	movs	r2, #34	; 0x22
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2240      	movs	r2, #64	; 0x40
 8004b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4a5b      	ldr	r2, [pc, #364]	; (8004cc8 <HAL_I2C_Mem_Read+0x228>)
 8004b5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b5e:	88f8      	ldrh	r0, [r7, #6]
 8004b60:	893a      	ldrh	r2, [r7, #8]
 8004b62:	8979      	ldrh	r1, [r7, #10]
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	9301      	str	r3, [sp, #4]
 8004b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 fb80 	bl	8005274 <I2C_RequestMemoryRead>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e1b0      	b.n	8004ee0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d113      	bne.n	8004bae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b86:	2300      	movs	r3, #0
 8004b88:	623b      	str	r3, [r7, #32]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	623b      	str	r3, [r7, #32]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	623b      	str	r3, [r7, #32]
 8004b9a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	e184      	b.n	8004eb8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d11b      	bne.n	8004bee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61fb      	str	r3, [r7, #28]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	61fb      	str	r3, [r7, #28]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	61fb      	str	r3, [r7, #28]
 8004bda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	e164      	b.n	8004eb8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d11b      	bne.n	8004c2e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c04:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c16:	2300      	movs	r3, #0
 8004c18:	61bb      	str	r3, [r7, #24]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	61bb      	str	r3, [r7, #24]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	61bb      	str	r3, [r7, #24]
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	e144      	b.n	8004eb8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c2e:	2300      	movs	r3, #0
 8004c30:	617b      	str	r3, [r7, #20]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	617b      	str	r3, [r7, #20]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	617b      	str	r3, [r7, #20]
 8004c42:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c44:	e138      	b.n	8004eb8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c4a:	2b03      	cmp	r3, #3
 8004c4c:	f200 80f1 	bhi.w	8004e32 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d123      	bne.n	8004ca0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f000 fd49 	bl	80056f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e139      	b.n	8004ee0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691a      	ldr	r2, [r3, #16]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	3b01      	subs	r3, #1
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c9e:	e10b      	b.n	8004eb8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d14e      	bne.n	8004d46 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cae:	2200      	movs	r2, #0
 8004cb0:	4906      	ldr	r1, [pc, #24]	; (8004ccc <HAL_I2C_Mem_Read+0x22c>)
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 fbc6 	bl	8005444 <I2C_WaitOnFlagUntilTimeout>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d008      	beq.n	8004cd0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e10e      	b.n	8004ee0 <HAL_I2C_Mem_Read+0x440>
 8004cc2:	bf00      	nop
 8004cc4:	00100002 	.word	0x00100002
 8004cc8:	ffff0000 	.word	0xffff0000
 8004ccc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691a      	ldr	r2, [r3, #16]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cea:	b2d2      	uxtb	r2, r2
 8004cec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	691a      	ldr	r2, [r3, #16]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d44:	e0b8      	b.n	8004eb8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	4966      	ldr	r1, [pc, #408]	; (8004ee8 <HAL_I2C_Mem_Read+0x448>)
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 fb77 	bl	8005444 <I2C_WaitOnFlagUntilTimeout>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e0bf      	b.n	8004ee0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	691a      	ldr	r2, [r3, #16]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	1c5a      	adds	r2, r3, #1
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da8:	2200      	movs	r2, #0
 8004daa:	494f      	ldr	r1, [pc, #316]	; (8004ee8 <HAL_I2C_Mem_Read+0x448>)
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f000 fb49 	bl	8005444 <I2C_WaitOnFlagUntilTimeout>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e091      	b.n	8004ee0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	691a      	ldr	r2, [r3, #16]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e30:	e042      	b.n	8004eb8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 fc5c 	bl	80056f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e04c      	b.n	8004ee0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e50:	b2d2      	uxtb	r2, r2
 8004e52:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	1c5a      	adds	r2, r3, #1
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	3b01      	subs	r3, #1
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	f003 0304 	and.w	r3, r3, #4
 8004e82:	2b04      	cmp	r3, #4
 8004e84:	d118      	bne.n	8004eb8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	691a      	ldr	r2, [r3, #16]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	b2d2      	uxtb	r2, r2
 8004e92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	1c5a      	adds	r2, r3, #1
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f47f aec2 	bne.w	8004c46 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	e000      	b.n	8004ee0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004ede:	2302      	movs	r3, #2
  }
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3728      	adds	r7, #40	; 0x28
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	00010004 	.word	0x00010004

08004eec <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08a      	sub	sp, #40	; 0x28
 8004ef0:	af02      	add	r7, sp, #8
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	607a      	str	r2, [r7, #4]
 8004ef6:	603b      	str	r3, [r7, #0]
 8004ef8:	460b      	mov	r3, r1
 8004efa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004efc:	f7fe f926 	bl	800314c <HAL_GetTick>
 8004f00:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b20      	cmp	r3, #32
 8004f10:	f040 8111 	bne.w	8005136 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	2319      	movs	r3, #25
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	4988      	ldr	r1, [pc, #544]	; (8005140 <HAL_I2C_IsDeviceReady+0x254>)
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 fa90 	bl	8005444 <I2C_WaitOnFlagUntilTimeout>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	e104      	b.n	8005138 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d101      	bne.n	8004f3c <HAL_I2C_IsDeviceReady+0x50>
 8004f38:	2302      	movs	r3, #2
 8004f3a:	e0fd      	b.n	8005138 <HAL_I2C_IsDeviceReady+0x24c>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d007      	beq.n	8004f62 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f042 0201 	orr.w	r2, r2, #1
 8004f60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2224      	movs	r2, #36	; 0x24
 8004f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4a70      	ldr	r2, [pc, #448]	; (8005144 <HAL_I2C_IsDeviceReady+0x258>)
 8004f84:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f94:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 fa4e 	bl	8005444 <I2C_WaitOnFlagUntilTimeout>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00d      	beq.n	8004fca <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fbc:	d103      	bne.n	8004fc6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fc4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e0b6      	b.n	8005138 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fca:	897b      	ldrh	r3, [r7, #10]
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	461a      	mov	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fd8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004fda:	f7fe f8b7 	bl	800314c <HAL_GetTick>
 8004fde:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	bf0c      	ite	eq
 8004fee:	2301      	moveq	r3, #1
 8004ff0:	2300      	movne	r3, #0
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005004:	bf0c      	ite	eq
 8005006:	2301      	moveq	r3, #1
 8005008:	2300      	movne	r3, #0
 800500a:	b2db      	uxtb	r3, r3
 800500c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800500e:	e025      	b.n	800505c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005010:	f7fe f89c 	bl	800314c <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	429a      	cmp	r2, r3
 800501e:	d302      	bcc.n	8005026 <HAL_I2C_IsDeviceReady+0x13a>
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d103      	bne.n	800502e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	22a0      	movs	r2, #160	; 0xa0
 800502a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b02      	cmp	r3, #2
 800503a:	bf0c      	ite	eq
 800503c:	2301      	moveq	r3, #1
 800503e:	2300      	movne	r3, #0
 8005040:	b2db      	uxtb	r3, r3
 8005042:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800504e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005052:	bf0c      	ite	eq
 8005054:	2301      	moveq	r3, #1
 8005056:	2300      	movne	r3, #0
 8005058:	b2db      	uxtb	r3, r3
 800505a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2ba0      	cmp	r3, #160	; 0xa0
 8005066:	d005      	beq.n	8005074 <HAL_I2C_IsDeviceReady+0x188>
 8005068:	7dfb      	ldrb	r3, [r7, #23]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d102      	bne.n	8005074 <HAL_I2C_IsDeviceReady+0x188>
 800506e:	7dbb      	ldrb	r3, [r7, #22]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d0cd      	beq.n	8005010 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2220      	movs	r2, #32
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b02      	cmp	r3, #2
 8005088:	d129      	bne.n	80050de <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005098:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800509a:	2300      	movs	r3, #0
 800509c:	613b      	str	r3, [r7, #16]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	613b      	str	r3, [r7, #16]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	613b      	str	r3, [r7, #16]
 80050ae:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	2319      	movs	r3, #25
 80050b6:	2201      	movs	r2, #1
 80050b8:	4921      	ldr	r1, [pc, #132]	; (8005140 <HAL_I2C_IsDeviceReady+0x254>)
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 f9c2 	bl	8005444 <I2C_WaitOnFlagUntilTimeout>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e036      	b.n	8005138 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2220      	movs	r2, #32
 80050ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80050da:	2300      	movs	r3, #0
 80050dc:	e02c      	b.n	8005138 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ec:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050f6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	2319      	movs	r3, #25
 80050fe:	2201      	movs	r2, #1
 8005100:	490f      	ldr	r1, [pc, #60]	; (8005140 <HAL_I2C_IsDeviceReady+0x254>)
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 f99e 	bl	8005444 <I2C_WaitOnFlagUntilTimeout>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e012      	b.n	8005138 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	3301      	adds	r3, #1
 8005116:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	429a      	cmp	r2, r3
 800511e:	f4ff af32 	bcc.w	8004f86 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2220      	movs	r2, #32
 8005126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e000      	b.n	8005138 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005136:	2302      	movs	r3, #2
  }
}
 8005138:	4618      	mov	r0, r3
 800513a:	3720      	adds	r7, #32
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	00100002 	.word	0x00100002
 8005144:	ffff0000 	.word	0xffff0000

08005148 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b088      	sub	sp, #32
 800514c:	af02      	add	r7, sp, #8
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	4608      	mov	r0, r1
 8005152:	4611      	mov	r1, r2
 8005154:	461a      	mov	r2, r3
 8005156:	4603      	mov	r3, r0
 8005158:	817b      	strh	r3, [r7, #10]
 800515a:	460b      	mov	r3, r1
 800515c:	813b      	strh	r3, [r7, #8]
 800515e:	4613      	mov	r3, r2
 8005160:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005170:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	2200      	movs	r2, #0
 800517a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 f960 	bl	8005444 <I2C_WaitOnFlagUntilTimeout>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00d      	beq.n	80051a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005198:	d103      	bne.n	80051a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e05f      	b.n	8005266 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051a6:	897b      	ldrh	r3, [r7, #10]
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	461a      	mov	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	6a3a      	ldr	r2, [r7, #32]
 80051ba:	492d      	ldr	r1, [pc, #180]	; (8005270 <I2C_RequestMemoryWrite+0x128>)
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 f998 	bl	80054f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e04c      	b.n	8005266 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051cc:	2300      	movs	r3, #0
 80051ce:	617b      	str	r3, [r7, #20]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e4:	6a39      	ldr	r1, [r7, #32]
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f000 fa02 	bl	80055f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00d      	beq.n	800520e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d107      	bne.n	800520a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005208:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e02b      	b.n	8005266 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800520e:	88fb      	ldrh	r3, [r7, #6]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d105      	bne.n	8005220 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005214:	893b      	ldrh	r3, [r7, #8]
 8005216:	b2da      	uxtb	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	611a      	str	r2, [r3, #16]
 800521e:	e021      	b.n	8005264 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005220:	893b      	ldrh	r3, [r7, #8]
 8005222:	0a1b      	lsrs	r3, r3, #8
 8005224:	b29b      	uxth	r3, r3
 8005226:	b2da      	uxtb	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800522e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005230:	6a39      	ldr	r1, [r7, #32]
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f000 f9dc 	bl	80055f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00d      	beq.n	800525a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	2b04      	cmp	r3, #4
 8005244:	d107      	bne.n	8005256 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005254:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e005      	b.n	8005266 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800525a:	893b      	ldrh	r3, [r7, #8]
 800525c:	b2da      	uxtb	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	00010002 	.word	0x00010002

08005274 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b088      	sub	sp, #32
 8005278:	af02      	add	r7, sp, #8
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	4608      	mov	r0, r1
 800527e:	4611      	mov	r1, r2
 8005280:	461a      	mov	r2, r3
 8005282:	4603      	mov	r3, r0
 8005284:	817b      	strh	r3, [r7, #10]
 8005286:	460b      	mov	r3, r1
 8005288:	813b      	strh	r3, [r7, #8]
 800528a:	4613      	mov	r3, r2
 800528c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800529c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 f8c2 	bl	8005444 <I2C_WaitOnFlagUntilTimeout>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00d      	beq.n	80052e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052d4:	d103      	bne.n	80052de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e0aa      	b.n	8005438 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052e2:	897b      	ldrh	r3, [r7, #10]
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	461a      	mov	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	6a3a      	ldr	r2, [r7, #32]
 80052f6:	4952      	ldr	r1, [pc, #328]	; (8005440 <I2C_RequestMemoryRead+0x1cc>)
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f000 f8fa 	bl	80054f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e097      	b.n	8005438 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005308:	2300      	movs	r3, #0
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800531e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005320:	6a39      	ldr	r1, [r7, #32]
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 f964 	bl	80055f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00d      	beq.n	800534a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	2b04      	cmp	r3, #4
 8005334:	d107      	bne.n	8005346 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005344:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e076      	b.n	8005438 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800534a:	88fb      	ldrh	r3, [r7, #6]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d105      	bne.n	800535c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005350:	893b      	ldrh	r3, [r7, #8]
 8005352:	b2da      	uxtb	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	611a      	str	r2, [r3, #16]
 800535a:	e021      	b.n	80053a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800535c:	893b      	ldrh	r3, [r7, #8]
 800535e:	0a1b      	lsrs	r3, r3, #8
 8005360:	b29b      	uxth	r3, r3
 8005362:	b2da      	uxtb	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800536a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800536c:	6a39      	ldr	r1, [r7, #32]
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 f93e 	bl	80055f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00d      	beq.n	8005396 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	2b04      	cmp	r3, #4
 8005380:	d107      	bne.n	8005392 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005390:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e050      	b.n	8005438 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005396:	893b      	ldrh	r3, [r7, #8]
 8005398:	b2da      	uxtb	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a2:	6a39      	ldr	r1, [r7, #32]
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 f923 	bl	80055f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00d      	beq.n	80053cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b4:	2b04      	cmp	r3, #4
 80053b6:	d107      	bne.n	80053c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e035      	b.n	8005438 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 f82b 	bl	8005444 <I2C_WaitOnFlagUntilTimeout>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00d      	beq.n	8005410 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005402:	d103      	bne.n	800540c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f44f 7200 	mov.w	r2, #512	; 0x200
 800540a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e013      	b.n	8005438 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005410:	897b      	ldrh	r3, [r7, #10]
 8005412:	b2db      	uxtb	r3, r3
 8005414:	f043 0301 	orr.w	r3, r3, #1
 8005418:	b2da      	uxtb	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	6a3a      	ldr	r2, [r7, #32]
 8005424:	4906      	ldr	r1, [pc, #24]	; (8005440 <I2C_RequestMemoryRead+0x1cc>)
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 f863 	bl	80054f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e000      	b.n	8005438 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	00010002 	.word	0x00010002

08005444 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	603b      	str	r3, [r7, #0]
 8005450:	4613      	mov	r3, r2
 8005452:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005454:	e025      	b.n	80054a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800545c:	d021      	beq.n	80054a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800545e:	f7fd fe75 	bl	800314c <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	429a      	cmp	r2, r3
 800546c:	d302      	bcc.n	8005474 <I2C_WaitOnFlagUntilTimeout+0x30>
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d116      	bne.n	80054a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2220      	movs	r2, #32
 800547e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	f043 0220 	orr.w	r2, r3, #32
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e023      	b.n	80054ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	0c1b      	lsrs	r3, r3, #16
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d10d      	bne.n	80054c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	43da      	mvns	r2, r3
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4013      	ands	r3, r2
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	bf0c      	ite	eq
 80054be:	2301      	moveq	r3, #1
 80054c0:	2300      	movne	r3, #0
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	461a      	mov	r2, r3
 80054c6:	e00c      	b.n	80054e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	43da      	mvns	r2, r3
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	4013      	ands	r3, r2
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	bf0c      	ite	eq
 80054da:	2301      	moveq	r3, #1
 80054dc:	2300      	movne	r3, #0
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	461a      	mov	r2, r3
 80054e2:	79fb      	ldrb	r3, [r7, #7]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d0b6      	beq.n	8005456 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b084      	sub	sp, #16
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	60f8      	str	r0, [r7, #12]
 80054fa:	60b9      	str	r1, [r7, #8]
 80054fc:	607a      	str	r2, [r7, #4]
 80054fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005500:	e051      	b.n	80055a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800550c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005510:	d123      	bne.n	800555a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005520:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800552a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2220      	movs	r2, #32
 8005536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	f043 0204 	orr.w	r2, r3, #4
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e046      	b.n	80055e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005560:	d021      	beq.n	80055a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005562:	f7fd fdf3 	bl	800314c <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	429a      	cmp	r2, r3
 8005570:	d302      	bcc.n	8005578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d116      	bne.n	80055a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2220      	movs	r2, #32
 8005582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	f043 0220 	orr.w	r2, r3, #32
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e020      	b.n	80055e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	0c1b      	lsrs	r3, r3, #16
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d10c      	bne.n	80055ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	43da      	mvns	r2, r3
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	4013      	ands	r3, r2
 80055bc:	b29b      	uxth	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	bf14      	ite	ne
 80055c2:	2301      	movne	r3, #1
 80055c4:	2300      	moveq	r3, #0
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	e00b      	b.n	80055e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	43da      	mvns	r2, r3
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	4013      	ands	r3, r2
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	bf14      	ite	ne
 80055dc:	2301      	movne	r3, #1
 80055de:	2300      	moveq	r3, #0
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d18d      	bne.n	8005502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055fc:	e02d      	b.n	800565a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f000 f8ce 	bl	80057a0 <I2C_IsAcknowledgeFailed>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e02d      	b.n	800566a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005614:	d021      	beq.n	800565a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005616:	f7fd fd99 	bl	800314c <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	429a      	cmp	r2, r3
 8005624:	d302      	bcc.n	800562c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d116      	bne.n	800565a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2220      	movs	r2, #32
 8005636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	f043 0220 	orr.w	r2, r3, #32
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e007      	b.n	800566a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005664:	2b80      	cmp	r3, #128	; 0x80
 8005666:	d1ca      	bne.n	80055fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b084      	sub	sp, #16
 8005676:	af00      	add	r7, sp, #0
 8005678:	60f8      	str	r0, [r7, #12]
 800567a:	60b9      	str	r1, [r7, #8]
 800567c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800567e:	e02d      	b.n	80056dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 f88d 	bl	80057a0 <I2C_IsAcknowledgeFailed>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d001      	beq.n	8005690 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e02d      	b.n	80056ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005696:	d021      	beq.n	80056dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005698:	f7fd fd58 	bl	800314c <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d302      	bcc.n	80056ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d116      	bne.n	80056dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2220      	movs	r2, #32
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c8:	f043 0220 	orr.w	r2, r3, #32
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e007      	b.n	80056ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	f003 0304 	and.w	r3, r3, #4
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	d1ca      	bne.n	8005680 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005700:	e042      	b.n	8005788 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	f003 0310 	and.w	r3, r3, #16
 800570c:	2b10      	cmp	r3, #16
 800570e:	d119      	bne.n	8005744 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f06f 0210 	mvn.w	r2, #16
 8005718:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2220      	movs	r2, #32
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e029      	b.n	8005798 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005744:	f7fd fd02 	bl	800314c <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	429a      	cmp	r2, r3
 8005752:	d302      	bcc.n	800575a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d116      	bne.n	8005788 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2220      	movs	r2, #32
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005774:	f043 0220 	orr.w	r2, r3, #32
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e007      	b.n	8005798 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005792:	2b40      	cmp	r3, #64	; 0x40
 8005794:	d1b5      	bne.n	8005702 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057b6:	d11b      	bne.n	80057f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057dc:	f043 0204 	orr.w	r2, r3, #4
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e000      	b.n	80057f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
	...

08005800 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e267      	b.n	8005ce2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b00      	cmp	r3, #0
 800581c:	d075      	beq.n	800590a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800581e:	4b88      	ldr	r3, [pc, #544]	; (8005a40 <HAL_RCC_OscConfig+0x240>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 030c 	and.w	r3, r3, #12
 8005826:	2b04      	cmp	r3, #4
 8005828:	d00c      	beq.n	8005844 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800582a:	4b85      	ldr	r3, [pc, #532]	; (8005a40 <HAL_RCC_OscConfig+0x240>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005832:	2b08      	cmp	r3, #8
 8005834:	d112      	bne.n	800585c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005836:	4b82      	ldr	r3, [pc, #520]	; (8005a40 <HAL_RCC_OscConfig+0x240>)
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800583e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005842:	d10b      	bne.n	800585c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005844:	4b7e      	ldr	r3, [pc, #504]	; (8005a40 <HAL_RCC_OscConfig+0x240>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d05b      	beq.n	8005908 <HAL_RCC_OscConfig+0x108>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d157      	bne.n	8005908 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e242      	b.n	8005ce2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005864:	d106      	bne.n	8005874 <HAL_RCC_OscConfig+0x74>
 8005866:	4b76      	ldr	r3, [pc, #472]	; (8005a40 <HAL_RCC_OscConfig+0x240>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a75      	ldr	r2, [pc, #468]	; (8005a40 <HAL_RCC_OscConfig+0x240>)
 800586c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005870:	6013      	str	r3, [r2, #0]
 8005872:	e01d      	b.n	80058b0 <HAL_RCC_OscConfig+0xb0>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800587c:	d10c      	bne.n	8005898 <HAL_RCC_OscConfig+0x98>
 800587e:	4b70      	ldr	r3, [pc, #448]	; (8005a40 <HAL_RCC_OscConfig+0x240>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a6f      	ldr	r2, [pc, #444]	; (8005a40 <HAL_RCC_OscConfig+0x240>)
 8005884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005888:	6013      	str	r3, [r2, #0]
 800588a:	4b6d      	ldr	r3, [pc, #436]	; (8005a40 <HAL_RCC_OscConfig+0x240>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a6c      	ldr	r2, [pc, #432]	; (8005a40 <HAL_RCC_OscConfig+0x240>)
 8005890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005894:	6013      	str	r3, [r2, #0]
 8005896:	e00b      	b.n	80058b0 <HAL_RCC_OscConfig+0xb0>
 8005898:	4b69      	ldr	r3, [pc, #420]	; (8005a40 <HAL_RCC_OscConfig+0x240>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a68      	ldr	r2, [pc, #416]	; (8005a40 <HAL_RCC_OscConfig+0x240>)
 800589e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058a2:	6013      	str	r3, [r2, #0]
 80058a4:	4b66      	ldr	r3, [pc, #408]	; (8005a40 <HAL_RCC_OscConfig+0x240>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a65      	ldr	r2, [pc, #404]	; (8005a40 <HAL_RCC_OscConfig+0x240>)
 80058aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d013      	beq.n	80058e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b8:	f7fd fc48 	bl	800314c <HAL_GetTick>
 80058bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058be:	e008      	b.n	80058d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058c0:	f7fd fc44 	bl	800314c <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b64      	cmp	r3, #100	; 0x64
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e207      	b.n	8005ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058d2:	4b5b      	ldr	r3, [pc, #364]	; (8005a40 <HAL_RCC_OscConfig+0x240>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0f0      	beq.n	80058c0 <HAL_RCC_OscConfig+0xc0>
 80058de:	e014      	b.n	800590a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e0:	f7fd fc34 	bl	800314c <HAL_GetTick>
 80058e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058e6:	e008      	b.n	80058fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058e8:	f7fd fc30 	bl	800314c <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b64      	cmp	r3, #100	; 0x64
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e1f3      	b.n	8005ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058fa:	4b51      	ldr	r3, [pc, #324]	; (8005a40 <HAL_RCC_OscConfig+0x240>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1f0      	bne.n	80058e8 <HAL_RCC_OscConfig+0xe8>
 8005906:	e000      	b.n	800590a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d063      	beq.n	80059de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005916:	4b4a      	ldr	r3, [pc, #296]	; (8005a40 <HAL_RCC_OscConfig+0x240>)
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f003 030c 	and.w	r3, r3, #12
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00b      	beq.n	800593a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005922:	4b47      	ldr	r3, [pc, #284]	; (8005a40 <HAL_RCC_OscConfig+0x240>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800592a:	2b08      	cmp	r3, #8
 800592c:	d11c      	bne.n	8005968 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800592e:	4b44      	ldr	r3, [pc, #272]	; (8005a40 <HAL_RCC_OscConfig+0x240>)
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d116      	bne.n	8005968 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800593a:	4b41      	ldr	r3, [pc, #260]	; (8005a40 <HAL_RCC_OscConfig+0x240>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d005      	beq.n	8005952 <HAL_RCC_OscConfig+0x152>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d001      	beq.n	8005952 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e1c7      	b.n	8005ce2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005952:	4b3b      	ldr	r3, [pc, #236]	; (8005a40 <HAL_RCC_OscConfig+0x240>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	4937      	ldr	r1, [pc, #220]	; (8005a40 <HAL_RCC_OscConfig+0x240>)
 8005962:	4313      	orrs	r3, r2
 8005964:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005966:	e03a      	b.n	80059de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d020      	beq.n	80059b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005970:	4b34      	ldr	r3, [pc, #208]	; (8005a44 <HAL_RCC_OscConfig+0x244>)
 8005972:	2201      	movs	r2, #1
 8005974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005976:	f7fd fbe9 	bl	800314c <HAL_GetTick>
 800597a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800597c:	e008      	b.n	8005990 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800597e:	f7fd fbe5 	bl	800314c <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b02      	cmp	r3, #2
 800598a:	d901      	bls.n	8005990 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e1a8      	b.n	8005ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005990:	4b2b      	ldr	r3, [pc, #172]	; (8005a40 <HAL_RCC_OscConfig+0x240>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d0f0      	beq.n	800597e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800599c:	4b28      	ldr	r3, [pc, #160]	; (8005a40 <HAL_RCC_OscConfig+0x240>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	00db      	lsls	r3, r3, #3
 80059aa:	4925      	ldr	r1, [pc, #148]	; (8005a40 <HAL_RCC_OscConfig+0x240>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	600b      	str	r3, [r1, #0]
 80059b0:	e015      	b.n	80059de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059b2:	4b24      	ldr	r3, [pc, #144]	; (8005a44 <HAL_RCC_OscConfig+0x244>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b8:	f7fd fbc8 	bl	800314c <HAL_GetTick>
 80059bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059be:	e008      	b.n	80059d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059c0:	f7fd fbc4 	bl	800314c <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d901      	bls.n	80059d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e187      	b.n	8005ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059d2:	4b1b      	ldr	r3, [pc, #108]	; (8005a40 <HAL_RCC_OscConfig+0x240>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1f0      	bne.n	80059c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0308 	and.w	r3, r3, #8
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d036      	beq.n	8005a58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d016      	beq.n	8005a20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059f2:	4b15      	ldr	r3, [pc, #84]	; (8005a48 <HAL_RCC_OscConfig+0x248>)
 80059f4:	2201      	movs	r2, #1
 80059f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059f8:	f7fd fba8 	bl	800314c <HAL_GetTick>
 80059fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059fe:	e008      	b.n	8005a12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a00:	f7fd fba4 	bl	800314c <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e167      	b.n	8005ce2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a12:	4b0b      	ldr	r3, [pc, #44]	; (8005a40 <HAL_RCC_OscConfig+0x240>)
 8005a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d0f0      	beq.n	8005a00 <HAL_RCC_OscConfig+0x200>
 8005a1e:	e01b      	b.n	8005a58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a20:	4b09      	ldr	r3, [pc, #36]	; (8005a48 <HAL_RCC_OscConfig+0x248>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a26:	f7fd fb91 	bl	800314c <HAL_GetTick>
 8005a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a2c:	e00e      	b.n	8005a4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a2e:	f7fd fb8d 	bl	800314c <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d907      	bls.n	8005a4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e150      	b.n	8005ce2 <HAL_RCC_OscConfig+0x4e2>
 8005a40:	40023800 	.word	0x40023800
 8005a44:	42470000 	.word	0x42470000
 8005a48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a4c:	4b88      	ldr	r3, [pc, #544]	; (8005c70 <HAL_RCC_OscConfig+0x470>)
 8005a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1ea      	bne.n	8005a2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 8097 	beq.w	8005b94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a66:	2300      	movs	r3, #0
 8005a68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a6a:	4b81      	ldr	r3, [pc, #516]	; (8005c70 <HAL_RCC_OscConfig+0x470>)
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10f      	bne.n	8005a96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a76:	2300      	movs	r3, #0
 8005a78:	60bb      	str	r3, [r7, #8]
 8005a7a:	4b7d      	ldr	r3, [pc, #500]	; (8005c70 <HAL_RCC_OscConfig+0x470>)
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	4a7c      	ldr	r2, [pc, #496]	; (8005c70 <HAL_RCC_OscConfig+0x470>)
 8005a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a84:	6413      	str	r3, [r2, #64]	; 0x40
 8005a86:	4b7a      	ldr	r3, [pc, #488]	; (8005c70 <HAL_RCC_OscConfig+0x470>)
 8005a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a8e:	60bb      	str	r3, [r7, #8]
 8005a90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a92:	2301      	movs	r3, #1
 8005a94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a96:	4b77      	ldr	r3, [pc, #476]	; (8005c74 <HAL_RCC_OscConfig+0x474>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d118      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005aa2:	4b74      	ldr	r3, [pc, #464]	; (8005c74 <HAL_RCC_OscConfig+0x474>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a73      	ldr	r2, [pc, #460]	; (8005c74 <HAL_RCC_OscConfig+0x474>)
 8005aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005aae:	f7fd fb4d 	bl	800314c <HAL_GetTick>
 8005ab2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ab4:	e008      	b.n	8005ac8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ab6:	f7fd fb49 	bl	800314c <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e10c      	b.n	8005ce2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ac8:	4b6a      	ldr	r3, [pc, #424]	; (8005c74 <HAL_RCC_OscConfig+0x474>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d0f0      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d106      	bne.n	8005aea <HAL_RCC_OscConfig+0x2ea>
 8005adc:	4b64      	ldr	r3, [pc, #400]	; (8005c70 <HAL_RCC_OscConfig+0x470>)
 8005ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae0:	4a63      	ldr	r2, [pc, #396]	; (8005c70 <HAL_RCC_OscConfig+0x470>)
 8005ae2:	f043 0301 	orr.w	r3, r3, #1
 8005ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ae8:	e01c      	b.n	8005b24 <HAL_RCC_OscConfig+0x324>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	2b05      	cmp	r3, #5
 8005af0:	d10c      	bne.n	8005b0c <HAL_RCC_OscConfig+0x30c>
 8005af2:	4b5f      	ldr	r3, [pc, #380]	; (8005c70 <HAL_RCC_OscConfig+0x470>)
 8005af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af6:	4a5e      	ldr	r2, [pc, #376]	; (8005c70 <HAL_RCC_OscConfig+0x470>)
 8005af8:	f043 0304 	orr.w	r3, r3, #4
 8005afc:	6713      	str	r3, [r2, #112]	; 0x70
 8005afe:	4b5c      	ldr	r3, [pc, #368]	; (8005c70 <HAL_RCC_OscConfig+0x470>)
 8005b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b02:	4a5b      	ldr	r2, [pc, #364]	; (8005c70 <HAL_RCC_OscConfig+0x470>)
 8005b04:	f043 0301 	orr.w	r3, r3, #1
 8005b08:	6713      	str	r3, [r2, #112]	; 0x70
 8005b0a:	e00b      	b.n	8005b24 <HAL_RCC_OscConfig+0x324>
 8005b0c:	4b58      	ldr	r3, [pc, #352]	; (8005c70 <HAL_RCC_OscConfig+0x470>)
 8005b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b10:	4a57      	ldr	r2, [pc, #348]	; (8005c70 <HAL_RCC_OscConfig+0x470>)
 8005b12:	f023 0301 	bic.w	r3, r3, #1
 8005b16:	6713      	str	r3, [r2, #112]	; 0x70
 8005b18:	4b55      	ldr	r3, [pc, #340]	; (8005c70 <HAL_RCC_OscConfig+0x470>)
 8005b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1c:	4a54      	ldr	r2, [pc, #336]	; (8005c70 <HAL_RCC_OscConfig+0x470>)
 8005b1e:	f023 0304 	bic.w	r3, r3, #4
 8005b22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d015      	beq.n	8005b58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b2c:	f7fd fb0e 	bl	800314c <HAL_GetTick>
 8005b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b32:	e00a      	b.n	8005b4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b34:	f7fd fb0a 	bl	800314c <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e0cb      	b.n	8005ce2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b4a:	4b49      	ldr	r3, [pc, #292]	; (8005c70 <HAL_RCC_OscConfig+0x470>)
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d0ee      	beq.n	8005b34 <HAL_RCC_OscConfig+0x334>
 8005b56:	e014      	b.n	8005b82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b58:	f7fd faf8 	bl	800314c <HAL_GetTick>
 8005b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b5e:	e00a      	b.n	8005b76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b60:	f7fd faf4 	bl	800314c <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e0b5      	b.n	8005ce2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b76:	4b3e      	ldr	r3, [pc, #248]	; (8005c70 <HAL_RCC_OscConfig+0x470>)
 8005b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1ee      	bne.n	8005b60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b82:	7dfb      	ldrb	r3, [r7, #23]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d105      	bne.n	8005b94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b88:	4b39      	ldr	r3, [pc, #228]	; (8005c70 <HAL_RCC_OscConfig+0x470>)
 8005b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8c:	4a38      	ldr	r2, [pc, #224]	; (8005c70 <HAL_RCC_OscConfig+0x470>)
 8005b8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 80a1 	beq.w	8005ce0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b9e:	4b34      	ldr	r3, [pc, #208]	; (8005c70 <HAL_RCC_OscConfig+0x470>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 030c 	and.w	r3, r3, #12
 8005ba6:	2b08      	cmp	r3, #8
 8005ba8:	d05c      	beq.n	8005c64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d141      	bne.n	8005c36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bb2:	4b31      	ldr	r3, [pc, #196]	; (8005c78 <HAL_RCC_OscConfig+0x478>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bb8:	f7fd fac8 	bl	800314c <HAL_GetTick>
 8005bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bbe:	e008      	b.n	8005bd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bc0:	f7fd fac4 	bl	800314c <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d901      	bls.n	8005bd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e087      	b.n	8005ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bd2:	4b27      	ldr	r3, [pc, #156]	; (8005c70 <HAL_RCC_OscConfig+0x470>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1f0      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	69da      	ldr	r2, [r3, #28]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	431a      	orrs	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	019b      	lsls	r3, r3, #6
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf4:	085b      	lsrs	r3, r3, #1
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	041b      	lsls	r3, r3, #16
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c00:	061b      	lsls	r3, r3, #24
 8005c02:	491b      	ldr	r1, [pc, #108]	; (8005c70 <HAL_RCC_OscConfig+0x470>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c08:	4b1b      	ldr	r3, [pc, #108]	; (8005c78 <HAL_RCC_OscConfig+0x478>)
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c0e:	f7fd fa9d 	bl	800314c <HAL_GetTick>
 8005c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c14:	e008      	b.n	8005c28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c16:	f7fd fa99 	bl	800314c <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d901      	bls.n	8005c28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e05c      	b.n	8005ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c28:	4b11      	ldr	r3, [pc, #68]	; (8005c70 <HAL_RCC_OscConfig+0x470>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d0f0      	beq.n	8005c16 <HAL_RCC_OscConfig+0x416>
 8005c34:	e054      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c36:	4b10      	ldr	r3, [pc, #64]	; (8005c78 <HAL_RCC_OscConfig+0x478>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c3c:	f7fd fa86 	bl	800314c <HAL_GetTick>
 8005c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c42:	e008      	b.n	8005c56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c44:	f7fd fa82 	bl	800314c <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d901      	bls.n	8005c56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e045      	b.n	8005ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c56:	4b06      	ldr	r3, [pc, #24]	; (8005c70 <HAL_RCC_OscConfig+0x470>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1f0      	bne.n	8005c44 <HAL_RCC_OscConfig+0x444>
 8005c62:	e03d      	b.n	8005ce0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d107      	bne.n	8005c7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e038      	b.n	8005ce2 <HAL_RCC_OscConfig+0x4e2>
 8005c70:	40023800 	.word	0x40023800
 8005c74:	40007000 	.word	0x40007000
 8005c78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c7c:	4b1b      	ldr	r3, [pc, #108]	; (8005cec <HAL_RCC_OscConfig+0x4ec>)
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d028      	beq.n	8005cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d121      	bne.n	8005cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d11a      	bne.n	8005cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005cac:	4013      	ands	r3, r2
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005cb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d111      	bne.n	8005cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc2:	085b      	lsrs	r3, r3, #1
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d107      	bne.n	8005cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d001      	beq.n	8005ce0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e000      	b.n	8005ce2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3718      	adds	r7, #24
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	40023800 	.word	0x40023800

08005cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e0cc      	b.n	8005e9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d04:	4b68      	ldr	r3, [pc, #416]	; (8005ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d90c      	bls.n	8005d2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d12:	4b65      	ldr	r3, [pc, #404]	; (8005ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	b2d2      	uxtb	r2, r2
 8005d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d1a:	4b63      	ldr	r3, [pc, #396]	; (8005ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0307 	and.w	r3, r3, #7
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d001      	beq.n	8005d2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e0b8      	b.n	8005e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0302 	and.w	r3, r3, #2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d020      	beq.n	8005d7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d005      	beq.n	8005d50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d44:	4b59      	ldr	r3, [pc, #356]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	4a58      	ldr	r2, [pc, #352]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005d4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0308 	and.w	r3, r3, #8
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d005      	beq.n	8005d68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d5c:	4b53      	ldr	r3, [pc, #332]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	4a52      	ldr	r2, [pc, #328]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005d62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d68:	4b50      	ldr	r3, [pc, #320]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	494d      	ldr	r1, [pc, #308]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d044      	beq.n	8005e10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d107      	bne.n	8005d9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d8e:	4b47      	ldr	r3, [pc, #284]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d119      	bne.n	8005dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e07f      	b.n	8005e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d003      	beq.n	8005dae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005daa:	2b03      	cmp	r3, #3
 8005dac:	d107      	bne.n	8005dbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dae:	4b3f      	ldr	r3, [pc, #252]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d109      	bne.n	8005dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e06f      	b.n	8005e9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dbe:	4b3b      	ldr	r3, [pc, #236]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e067      	b.n	8005e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dce:	4b37      	ldr	r3, [pc, #220]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f023 0203 	bic.w	r2, r3, #3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	4934      	ldr	r1, [pc, #208]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005de0:	f7fd f9b4 	bl	800314c <HAL_GetTick>
 8005de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005de6:	e00a      	b.n	8005dfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005de8:	f7fd f9b0 	bl	800314c <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d901      	bls.n	8005dfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e04f      	b.n	8005e9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dfe:	4b2b      	ldr	r3, [pc, #172]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f003 020c 	and.w	r2, r3, #12
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d1eb      	bne.n	8005de8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e10:	4b25      	ldr	r3, [pc, #148]	; (8005ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0307 	and.w	r3, r3, #7
 8005e18:	683a      	ldr	r2, [r7, #0]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d20c      	bcs.n	8005e38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e1e:	4b22      	ldr	r3, [pc, #136]	; (8005ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	b2d2      	uxtb	r2, r2
 8005e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e26:	4b20      	ldr	r3, [pc, #128]	; (8005ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0307 	and.w	r3, r3, #7
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d001      	beq.n	8005e38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e032      	b.n	8005e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d008      	beq.n	8005e56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e44:	4b19      	ldr	r3, [pc, #100]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	4916      	ldr	r1, [pc, #88]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0308 	and.w	r3, r3, #8
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d009      	beq.n	8005e76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e62:	4b12      	ldr	r3, [pc, #72]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	00db      	lsls	r3, r3, #3
 8005e70:	490e      	ldr	r1, [pc, #56]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e76:	f000 f821 	bl	8005ebc <HAL_RCC_GetSysClockFreq>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	4b0b      	ldr	r3, [pc, #44]	; (8005eac <HAL_RCC_ClockConfig+0x1bc>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	091b      	lsrs	r3, r3, #4
 8005e82:	f003 030f 	and.w	r3, r3, #15
 8005e86:	490a      	ldr	r1, [pc, #40]	; (8005eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005e88:	5ccb      	ldrb	r3, [r1, r3]
 8005e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e8e:	4a09      	ldr	r2, [pc, #36]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e92:	4b09      	ldr	r3, [pc, #36]	; (8005eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fd f914 	bl	80030c4 <HAL_InitTick>

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	40023c00 	.word	0x40023c00
 8005eac:	40023800 	.word	0x40023800
 8005eb0:	0800a2a0 	.word	0x0800a2a0
 8005eb4:	20000008 	.word	0x20000008
 8005eb8:	2000000c 	.word	0x2000000c

08005ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ec0:	b094      	sub	sp, #80	; 0x50
 8005ec2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ec8:	2300      	movs	r3, #0
 8005eca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ecc:	2300      	movs	r3, #0
 8005ece:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ed4:	4b79      	ldr	r3, [pc, #484]	; (80060bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f003 030c 	and.w	r3, r3, #12
 8005edc:	2b08      	cmp	r3, #8
 8005ede:	d00d      	beq.n	8005efc <HAL_RCC_GetSysClockFreq+0x40>
 8005ee0:	2b08      	cmp	r3, #8
 8005ee2:	f200 80e1 	bhi.w	80060a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <HAL_RCC_GetSysClockFreq+0x34>
 8005eea:	2b04      	cmp	r3, #4
 8005eec:	d003      	beq.n	8005ef6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005eee:	e0db      	b.n	80060a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ef0:	4b73      	ldr	r3, [pc, #460]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ef2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005ef4:	e0db      	b.n	80060ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ef6:	4b73      	ldr	r3, [pc, #460]	; (80060c4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005ef8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005efa:	e0d8      	b.n	80060ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005efc:	4b6f      	ldr	r3, [pc, #444]	; (80060bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f04:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f06:	4b6d      	ldr	r3, [pc, #436]	; (80060bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d063      	beq.n	8005fda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f12:	4b6a      	ldr	r3, [pc, #424]	; (80060bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	099b      	lsrs	r3, r3, #6
 8005f18:	2200      	movs	r2, #0
 8005f1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f24:	633b      	str	r3, [r7, #48]	; 0x30
 8005f26:	2300      	movs	r3, #0
 8005f28:	637b      	str	r3, [r7, #52]	; 0x34
 8005f2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005f2e:	4622      	mov	r2, r4
 8005f30:	462b      	mov	r3, r5
 8005f32:	f04f 0000 	mov.w	r0, #0
 8005f36:	f04f 0100 	mov.w	r1, #0
 8005f3a:	0159      	lsls	r1, r3, #5
 8005f3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f40:	0150      	lsls	r0, r2, #5
 8005f42:	4602      	mov	r2, r0
 8005f44:	460b      	mov	r3, r1
 8005f46:	4621      	mov	r1, r4
 8005f48:	1a51      	subs	r1, r2, r1
 8005f4a:	6139      	str	r1, [r7, #16]
 8005f4c:	4629      	mov	r1, r5
 8005f4e:	eb63 0301 	sbc.w	r3, r3, r1
 8005f52:	617b      	str	r3, [r7, #20]
 8005f54:	f04f 0200 	mov.w	r2, #0
 8005f58:	f04f 0300 	mov.w	r3, #0
 8005f5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f60:	4659      	mov	r1, fp
 8005f62:	018b      	lsls	r3, r1, #6
 8005f64:	4651      	mov	r1, sl
 8005f66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f6a:	4651      	mov	r1, sl
 8005f6c:	018a      	lsls	r2, r1, #6
 8005f6e:	4651      	mov	r1, sl
 8005f70:	ebb2 0801 	subs.w	r8, r2, r1
 8005f74:	4659      	mov	r1, fp
 8005f76:	eb63 0901 	sbc.w	r9, r3, r1
 8005f7a:	f04f 0200 	mov.w	r2, #0
 8005f7e:	f04f 0300 	mov.w	r3, #0
 8005f82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f8e:	4690      	mov	r8, r2
 8005f90:	4699      	mov	r9, r3
 8005f92:	4623      	mov	r3, r4
 8005f94:	eb18 0303 	adds.w	r3, r8, r3
 8005f98:	60bb      	str	r3, [r7, #8]
 8005f9a:	462b      	mov	r3, r5
 8005f9c:	eb49 0303 	adc.w	r3, r9, r3
 8005fa0:	60fb      	str	r3, [r7, #12]
 8005fa2:	f04f 0200 	mov.w	r2, #0
 8005fa6:	f04f 0300 	mov.w	r3, #0
 8005faa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005fae:	4629      	mov	r1, r5
 8005fb0:	024b      	lsls	r3, r1, #9
 8005fb2:	4621      	mov	r1, r4
 8005fb4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005fb8:	4621      	mov	r1, r4
 8005fba:	024a      	lsls	r2, r1, #9
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005fcc:	f7fa fe3c 	bl	8000c48 <__aeabi_uldivmod>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fd8:	e058      	b.n	800608c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fda:	4b38      	ldr	r3, [pc, #224]	; (80060bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	099b      	lsrs	r3, r3, #6
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	4611      	mov	r1, r2
 8005fe6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005fea:	623b      	str	r3, [r7, #32]
 8005fec:	2300      	movs	r3, #0
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24
 8005ff0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ff4:	4642      	mov	r2, r8
 8005ff6:	464b      	mov	r3, r9
 8005ff8:	f04f 0000 	mov.w	r0, #0
 8005ffc:	f04f 0100 	mov.w	r1, #0
 8006000:	0159      	lsls	r1, r3, #5
 8006002:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006006:	0150      	lsls	r0, r2, #5
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	4641      	mov	r1, r8
 800600e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006012:	4649      	mov	r1, r9
 8006014:	eb63 0b01 	sbc.w	fp, r3, r1
 8006018:	f04f 0200 	mov.w	r2, #0
 800601c:	f04f 0300 	mov.w	r3, #0
 8006020:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006024:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006028:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800602c:	ebb2 040a 	subs.w	r4, r2, sl
 8006030:	eb63 050b 	sbc.w	r5, r3, fp
 8006034:	f04f 0200 	mov.w	r2, #0
 8006038:	f04f 0300 	mov.w	r3, #0
 800603c:	00eb      	lsls	r3, r5, #3
 800603e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006042:	00e2      	lsls	r2, r4, #3
 8006044:	4614      	mov	r4, r2
 8006046:	461d      	mov	r5, r3
 8006048:	4643      	mov	r3, r8
 800604a:	18e3      	adds	r3, r4, r3
 800604c:	603b      	str	r3, [r7, #0]
 800604e:	464b      	mov	r3, r9
 8006050:	eb45 0303 	adc.w	r3, r5, r3
 8006054:	607b      	str	r3, [r7, #4]
 8006056:	f04f 0200 	mov.w	r2, #0
 800605a:	f04f 0300 	mov.w	r3, #0
 800605e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006062:	4629      	mov	r1, r5
 8006064:	028b      	lsls	r3, r1, #10
 8006066:	4621      	mov	r1, r4
 8006068:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800606c:	4621      	mov	r1, r4
 800606e:	028a      	lsls	r2, r1, #10
 8006070:	4610      	mov	r0, r2
 8006072:	4619      	mov	r1, r3
 8006074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006076:	2200      	movs	r2, #0
 8006078:	61bb      	str	r3, [r7, #24]
 800607a:	61fa      	str	r2, [r7, #28]
 800607c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006080:	f7fa fde2 	bl	8000c48 <__aeabi_uldivmod>
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	4613      	mov	r3, r2
 800608a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800608c:	4b0b      	ldr	r3, [pc, #44]	; (80060bc <HAL_RCC_GetSysClockFreq+0x200>)
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	0c1b      	lsrs	r3, r3, #16
 8006092:	f003 0303 	and.w	r3, r3, #3
 8006096:	3301      	adds	r3, #1
 8006098:	005b      	lsls	r3, r3, #1
 800609a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800609c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800609e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060a6:	e002      	b.n	80060ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060a8:	4b05      	ldr	r3, [pc, #20]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80060aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3750      	adds	r7, #80	; 0x50
 80060b4:	46bd      	mov	sp, r7
 80060b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060ba:	bf00      	nop
 80060bc:	40023800 	.word	0x40023800
 80060c0:	00f42400 	.word	0x00f42400
 80060c4:	007a1200 	.word	0x007a1200

080060c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060c8:	b480      	push	{r7}
 80060ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060cc:	4b03      	ldr	r3, [pc, #12]	; (80060dc <HAL_RCC_GetHCLKFreq+0x14>)
 80060ce:	681b      	ldr	r3, [r3, #0]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	20000008 	.word	0x20000008

080060e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80060e4:	f7ff fff0 	bl	80060c8 <HAL_RCC_GetHCLKFreq>
 80060e8:	4602      	mov	r2, r0
 80060ea:	4b05      	ldr	r3, [pc, #20]	; (8006100 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	0a9b      	lsrs	r3, r3, #10
 80060f0:	f003 0307 	and.w	r3, r3, #7
 80060f4:	4903      	ldr	r1, [pc, #12]	; (8006104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060f6:	5ccb      	ldrb	r3, [r1, r3]
 80060f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	40023800 	.word	0x40023800
 8006104:	0800a2b0 	.word	0x0800a2b0

08006108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800610c:	f7ff ffdc 	bl	80060c8 <HAL_RCC_GetHCLKFreq>
 8006110:	4602      	mov	r2, r0
 8006112:	4b05      	ldr	r3, [pc, #20]	; (8006128 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	0b5b      	lsrs	r3, r3, #13
 8006118:	f003 0307 	and.w	r3, r3, #7
 800611c:	4903      	ldr	r1, [pc, #12]	; (800612c <HAL_RCC_GetPCLK2Freq+0x24>)
 800611e:	5ccb      	ldrb	r3, [r1, r3]
 8006120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006124:	4618      	mov	r0, r3
 8006126:	bd80      	pop	{r7, pc}
 8006128:	40023800 	.word	0x40023800
 800612c:	0800a2b0 	.word	0x0800a2b0

08006130 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e03f      	b.n	80061c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d106      	bne.n	800615c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7fc fe14 	bl	8002d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2224      	movs	r2, #36	; 0x24
 8006160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68da      	ldr	r2, [r3, #12]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006172:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 f929 	bl	80063cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	691a      	ldr	r2, [r3, #16]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006188:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	695a      	ldr	r2, [r3, #20]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006198:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2220      	movs	r2, #32
 80061bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b08a      	sub	sp, #40	; 0x28
 80061ce:	af02      	add	r7, sp, #8
 80061d0:	60f8      	str	r0, [r7, #12]
 80061d2:	60b9      	str	r1, [r7, #8]
 80061d4:	603b      	str	r3, [r7, #0]
 80061d6:	4613      	mov	r3, r2
 80061d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80061da:	2300      	movs	r3, #0
 80061dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b20      	cmp	r3, #32
 80061e8:	d17c      	bne.n	80062e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <HAL_UART_Transmit+0x2c>
 80061f0:	88fb      	ldrh	r3, [r7, #6]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e075      	b.n	80062e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006200:	2b01      	cmp	r3, #1
 8006202:	d101      	bne.n	8006208 <HAL_UART_Transmit+0x3e>
 8006204:	2302      	movs	r3, #2
 8006206:	e06e      	b.n	80062e6 <HAL_UART_Transmit+0x11c>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2221      	movs	r2, #33	; 0x21
 800621a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800621e:	f7fc ff95 	bl	800314c <HAL_GetTick>
 8006222:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	88fa      	ldrh	r2, [r7, #6]
 8006228:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	88fa      	ldrh	r2, [r7, #6]
 800622e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006238:	d108      	bne.n	800624c <HAL_UART_Transmit+0x82>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d104      	bne.n	800624c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006242:	2300      	movs	r3, #0
 8006244:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	61bb      	str	r3, [r7, #24]
 800624a:	e003      	b.n	8006254 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006250:	2300      	movs	r3, #0
 8006252:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800625c:	e02a      	b.n	80062b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2200      	movs	r2, #0
 8006266:	2180      	movs	r1, #128	; 0x80
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 f840 	bl	80062ee <UART_WaitOnFlagUntilTimeout>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e036      	b.n	80062e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10b      	bne.n	8006296 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800628c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	3302      	adds	r3, #2
 8006292:	61bb      	str	r3, [r7, #24]
 8006294:	e007      	b.n	80062a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	781a      	ldrb	r2, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	3301      	adds	r3, #1
 80062a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	3b01      	subs	r3, #1
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1cf      	bne.n	800625e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	9300      	str	r3, [sp, #0]
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2200      	movs	r2, #0
 80062c6:	2140      	movs	r1, #64	; 0x40
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f000 f810 	bl	80062ee <UART_WaitOnFlagUntilTimeout>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d001      	beq.n	80062d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e006      	b.n	80062e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2220      	movs	r2, #32
 80062dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80062e0:	2300      	movs	r3, #0
 80062e2:	e000      	b.n	80062e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80062e4:	2302      	movs	r3, #2
  }
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3720      	adds	r7, #32
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b090      	sub	sp, #64	; 0x40
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	60f8      	str	r0, [r7, #12]
 80062f6:	60b9      	str	r1, [r7, #8]
 80062f8:	603b      	str	r3, [r7, #0]
 80062fa:	4613      	mov	r3, r2
 80062fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062fe:	e050      	b.n	80063a2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006302:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006306:	d04c      	beq.n	80063a2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800630a:	2b00      	cmp	r3, #0
 800630c:	d007      	beq.n	800631e <UART_WaitOnFlagUntilTimeout+0x30>
 800630e:	f7fc ff1d 	bl	800314c <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800631a:	429a      	cmp	r2, r3
 800631c:	d241      	bcs.n	80063a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	330c      	adds	r3, #12
 8006324:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006328:	e853 3f00 	ldrex	r3, [r3]
 800632c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006334:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	330c      	adds	r3, #12
 800633c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800633e:	637a      	str	r2, [r7, #52]	; 0x34
 8006340:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006342:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006344:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006346:	e841 2300 	strex	r3, r2, [r1]
 800634a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800634c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1e5      	bne.n	800631e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	3314      	adds	r3, #20
 8006358:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	e853 3f00 	ldrex	r3, [r3]
 8006360:	613b      	str	r3, [r7, #16]
   return(result);
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	f023 0301 	bic.w	r3, r3, #1
 8006368:	63bb      	str	r3, [r7, #56]	; 0x38
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	3314      	adds	r3, #20
 8006370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006372:	623a      	str	r2, [r7, #32]
 8006374:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006376:	69f9      	ldr	r1, [r7, #28]
 8006378:	6a3a      	ldr	r2, [r7, #32]
 800637a:	e841 2300 	strex	r3, r2, [r1]
 800637e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1e5      	bne.n	8006352 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2220      	movs	r2, #32
 800638a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2220      	movs	r2, #32
 8006392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e00f      	b.n	80063c2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	4013      	ands	r3, r2
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	bf0c      	ite	eq
 80063b2:	2301      	moveq	r3, #1
 80063b4:	2300      	movne	r3, #0
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	461a      	mov	r2, r3
 80063ba:	79fb      	ldrb	r3, [r7, #7]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d09f      	beq.n	8006300 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3740      	adds	r7, #64	; 0x40
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
	...

080063cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063d0:	b0c0      	sub	sp, #256	; 0x100
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80063e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e8:	68d9      	ldr	r1, [r3, #12]
 80063ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	ea40 0301 	orr.w	r3, r0, r1
 80063f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	431a      	orrs	r2, r3
 8006404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	431a      	orrs	r2, r3
 800640c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	4313      	orrs	r3, r2
 8006414:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006424:	f021 010c 	bic.w	r1, r1, #12
 8006428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006432:	430b      	orrs	r3, r1
 8006434:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006446:	6999      	ldr	r1, [r3, #24]
 8006448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	ea40 0301 	orr.w	r3, r0, r1
 8006452:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	4b8f      	ldr	r3, [pc, #572]	; (8006698 <UART_SetConfig+0x2cc>)
 800645c:	429a      	cmp	r2, r3
 800645e:	d005      	beq.n	800646c <UART_SetConfig+0xa0>
 8006460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	4b8d      	ldr	r3, [pc, #564]	; (800669c <UART_SetConfig+0x2d0>)
 8006468:	429a      	cmp	r2, r3
 800646a:	d104      	bne.n	8006476 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800646c:	f7ff fe4c 	bl	8006108 <HAL_RCC_GetPCLK2Freq>
 8006470:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006474:	e003      	b.n	800647e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006476:	f7ff fe33 	bl	80060e0 <HAL_RCC_GetPCLK1Freq>
 800647a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800647e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006482:	69db      	ldr	r3, [r3, #28]
 8006484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006488:	f040 810c 	bne.w	80066a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800648c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006490:	2200      	movs	r2, #0
 8006492:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006496:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800649a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800649e:	4622      	mov	r2, r4
 80064a0:	462b      	mov	r3, r5
 80064a2:	1891      	adds	r1, r2, r2
 80064a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80064a6:	415b      	adcs	r3, r3
 80064a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80064ae:	4621      	mov	r1, r4
 80064b0:	eb12 0801 	adds.w	r8, r2, r1
 80064b4:	4629      	mov	r1, r5
 80064b6:	eb43 0901 	adc.w	r9, r3, r1
 80064ba:	f04f 0200 	mov.w	r2, #0
 80064be:	f04f 0300 	mov.w	r3, #0
 80064c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064ce:	4690      	mov	r8, r2
 80064d0:	4699      	mov	r9, r3
 80064d2:	4623      	mov	r3, r4
 80064d4:	eb18 0303 	adds.w	r3, r8, r3
 80064d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80064dc:	462b      	mov	r3, r5
 80064de:	eb49 0303 	adc.w	r3, r9, r3
 80064e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80064f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80064f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80064fa:	460b      	mov	r3, r1
 80064fc:	18db      	adds	r3, r3, r3
 80064fe:	653b      	str	r3, [r7, #80]	; 0x50
 8006500:	4613      	mov	r3, r2
 8006502:	eb42 0303 	adc.w	r3, r2, r3
 8006506:	657b      	str	r3, [r7, #84]	; 0x54
 8006508:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800650c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006510:	f7fa fb9a 	bl	8000c48 <__aeabi_uldivmod>
 8006514:	4602      	mov	r2, r0
 8006516:	460b      	mov	r3, r1
 8006518:	4b61      	ldr	r3, [pc, #388]	; (80066a0 <UART_SetConfig+0x2d4>)
 800651a:	fba3 2302 	umull	r2, r3, r3, r2
 800651e:	095b      	lsrs	r3, r3, #5
 8006520:	011c      	lsls	r4, r3, #4
 8006522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006526:	2200      	movs	r2, #0
 8006528:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800652c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006530:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006534:	4642      	mov	r2, r8
 8006536:	464b      	mov	r3, r9
 8006538:	1891      	adds	r1, r2, r2
 800653a:	64b9      	str	r1, [r7, #72]	; 0x48
 800653c:	415b      	adcs	r3, r3
 800653e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006540:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006544:	4641      	mov	r1, r8
 8006546:	eb12 0a01 	adds.w	sl, r2, r1
 800654a:	4649      	mov	r1, r9
 800654c:	eb43 0b01 	adc.w	fp, r3, r1
 8006550:	f04f 0200 	mov.w	r2, #0
 8006554:	f04f 0300 	mov.w	r3, #0
 8006558:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800655c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006560:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006564:	4692      	mov	sl, r2
 8006566:	469b      	mov	fp, r3
 8006568:	4643      	mov	r3, r8
 800656a:	eb1a 0303 	adds.w	r3, sl, r3
 800656e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006572:	464b      	mov	r3, r9
 8006574:	eb4b 0303 	adc.w	r3, fp, r3
 8006578:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800657c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006588:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800658c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006590:	460b      	mov	r3, r1
 8006592:	18db      	adds	r3, r3, r3
 8006594:	643b      	str	r3, [r7, #64]	; 0x40
 8006596:	4613      	mov	r3, r2
 8006598:	eb42 0303 	adc.w	r3, r2, r3
 800659c:	647b      	str	r3, [r7, #68]	; 0x44
 800659e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80065a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80065a6:	f7fa fb4f 	bl	8000c48 <__aeabi_uldivmod>
 80065aa:	4602      	mov	r2, r0
 80065ac:	460b      	mov	r3, r1
 80065ae:	4611      	mov	r1, r2
 80065b0:	4b3b      	ldr	r3, [pc, #236]	; (80066a0 <UART_SetConfig+0x2d4>)
 80065b2:	fba3 2301 	umull	r2, r3, r3, r1
 80065b6:	095b      	lsrs	r3, r3, #5
 80065b8:	2264      	movs	r2, #100	; 0x64
 80065ba:	fb02 f303 	mul.w	r3, r2, r3
 80065be:	1acb      	subs	r3, r1, r3
 80065c0:	00db      	lsls	r3, r3, #3
 80065c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80065c6:	4b36      	ldr	r3, [pc, #216]	; (80066a0 <UART_SetConfig+0x2d4>)
 80065c8:	fba3 2302 	umull	r2, r3, r3, r2
 80065cc:	095b      	lsrs	r3, r3, #5
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065d4:	441c      	add	r4, r3
 80065d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065da:	2200      	movs	r2, #0
 80065dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80065e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80065e8:	4642      	mov	r2, r8
 80065ea:	464b      	mov	r3, r9
 80065ec:	1891      	adds	r1, r2, r2
 80065ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80065f0:	415b      	adcs	r3, r3
 80065f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80065f8:	4641      	mov	r1, r8
 80065fa:	1851      	adds	r1, r2, r1
 80065fc:	6339      	str	r1, [r7, #48]	; 0x30
 80065fe:	4649      	mov	r1, r9
 8006600:	414b      	adcs	r3, r1
 8006602:	637b      	str	r3, [r7, #52]	; 0x34
 8006604:	f04f 0200 	mov.w	r2, #0
 8006608:	f04f 0300 	mov.w	r3, #0
 800660c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006610:	4659      	mov	r1, fp
 8006612:	00cb      	lsls	r3, r1, #3
 8006614:	4651      	mov	r1, sl
 8006616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800661a:	4651      	mov	r1, sl
 800661c:	00ca      	lsls	r2, r1, #3
 800661e:	4610      	mov	r0, r2
 8006620:	4619      	mov	r1, r3
 8006622:	4603      	mov	r3, r0
 8006624:	4642      	mov	r2, r8
 8006626:	189b      	adds	r3, r3, r2
 8006628:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800662c:	464b      	mov	r3, r9
 800662e:	460a      	mov	r2, r1
 8006630:	eb42 0303 	adc.w	r3, r2, r3
 8006634:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006644:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006648:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800664c:	460b      	mov	r3, r1
 800664e:	18db      	adds	r3, r3, r3
 8006650:	62bb      	str	r3, [r7, #40]	; 0x28
 8006652:	4613      	mov	r3, r2
 8006654:	eb42 0303 	adc.w	r3, r2, r3
 8006658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800665a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800665e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006662:	f7fa faf1 	bl	8000c48 <__aeabi_uldivmod>
 8006666:	4602      	mov	r2, r0
 8006668:	460b      	mov	r3, r1
 800666a:	4b0d      	ldr	r3, [pc, #52]	; (80066a0 <UART_SetConfig+0x2d4>)
 800666c:	fba3 1302 	umull	r1, r3, r3, r2
 8006670:	095b      	lsrs	r3, r3, #5
 8006672:	2164      	movs	r1, #100	; 0x64
 8006674:	fb01 f303 	mul.w	r3, r1, r3
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	00db      	lsls	r3, r3, #3
 800667c:	3332      	adds	r3, #50	; 0x32
 800667e:	4a08      	ldr	r2, [pc, #32]	; (80066a0 <UART_SetConfig+0x2d4>)
 8006680:	fba2 2303 	umull	r2, r3, r2, r3
 8006684:	095b      	lsrs	r3, r3, #5
 8006686:	f003 0207 	and.w	r2, r3, #7
 800668a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4422      	add	r2, r4
 8006692:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006694:	e106      	b.n	80068a4 <UART_SetConfig+0x4d8>
 8006696:	bf00      	nop
 8006698:	40011000 	.word	0x40011000
 800669c:	40011400 	.word	0x40011400
 80066a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066a8:	2200      	movs	r2, #0
 80066aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80066ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80066b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80066b6:	4642      	mov	r2, r8
 80066b8:	464b      	mov	r3, r9
 80066ba:	1891      	adds	r1, r2, r2
 80066bc:	6239      	str	r1, [r7, #32]
 80066be:	415b      	adcs	r3, r3
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24
 80066c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80066c6:	4641      	mov	r1, r8
 80066c8:	1854      	adds	r4, r2, r1
 80066ca:	4649      	mov	r1, r9
 80066cc:	eb43 0501 	adc.w	r5, r3, r1
 80066d0:	f04f 0200 	mov.w	r2, #0
 80066d4:	f04f 0300 	mov.w	r3, #0
 80066d8:	00eb      	lsls	r3, r5, #3
 80066da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066de:	00e2      	lsls	r2, r4, #3
 80066e0:	4614      	mov	r4, r2
 80066e2:	461d      	mov	r5, r3
 80066e4:	4643      	mov	r3, r8
 80066e6:	18e3      	adds	r3, r4, r3
 80066e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80066ec:	464b      	mov	r3, r9
 80066ee:	eb45 0303 	adc.w	r3, r5, r3
 80066f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80066f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006702:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006706:	f04f 0200 	mov.w	r2, #0
 800670a:	f04f 0300 	mov.w	r3, #0
 800670e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006712:	4629      	mov	r1, r5
 8006714:	008b      	lsls	r3, r1, #2
 8006716:	4621      	mov	r1, r4
 8006718:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800671c:	4621      	mov	r1, r4
 800671e:	008a      	lsls	r2, r1, #2
 8006720:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006724:	f7fa fa90 	bl	8000c48 <__aeabi_uldivmod>
 8006728:	4602      	mov	r2, r0
 800672a:	460b      	mov	r3, r1
 800672c:	4b60      	ldr	r3, [pc, #384]	; (80068b0 <UART_SetConfig+0x4e4>)
 800672e:	fba3 2302 	umull	r2, r3, r3, r2
 8006732:	095b      	lsrs	r3, r3, #5
 8006734:	011c      	lsls	r4, r3, #4
 8006736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800673a:	2200      	movs	r2, #0
 800673c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006740:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006744:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006748:	4642      	mov	r2, r8
 800674a:	464b      	mov	r3, r9
 800674c:	1891      	adds	r1, r2, r2
 800674e:	61b9      	str	r1, [r7, #24]
 8006750:	415b      	adcs	r3, r3
 8006752:	61fb      	str	r3, [r7, #28]
 8006754:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006758:	4641      	mov	r1, r8
 800675a:	1851      	adds	r1, r2, r1
 800675c:	6139      	str	r1, [r7, #16]
 800675e:	4649      	mov	r1, r9
 8006760:	414b      	adcs	r3, r1
 8006762:	617b      	str	r3, [r7, #20]
 8006764:	f04f 0200 	mov.w	r2, #0
 8006768:	f04f 0300 	mov.w	r3, #0
 800676c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006770:	4659      	mov	r1, fp
 8006772:	00cb      	lsls	r3, r1, #3
 8006774:	4651      	mov	r1, sl
 8006776:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800677a:	4651      	mov	r1, sl
 800677c:	00ca      	lsls	r2, r1, #3
 800677e:	4610      	mov	r0, r2
 8006780:	4619      	mov	r1, r3
 8006782:	4603      	mov	r3, r0
 8006784:	4642      	mov	r2, r8
 8006786:	189b      	adds	r3, r3, r2
 8006788:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800678c:	464b      	mov	r3, r9
 800678e:	460a      	mov	r2, r1
 8006790:	eb42 0303 	adc.w	r3, r2, r3
 8006794:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80067a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80067a4:	f04f 0200 	mov.w	r2, #0
 80067a8:	f04f 0300 	mov.w	r3, #0
 80067ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80067b0:	4649      	mov	r1, r9
 80067b2:	008b      	lsls	r3, r1, #2
 80067b4:	4641      	mov	r1, r8
 80067b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067ba:	4641      	mov	r1, r8
 80067bc:	008a      	lsls	r2, r1, #2
 80067be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80067c2:	f7fa fa41 	bl	8000c48 <__aeabi_uldivmod>
 80067c6:	4602      	mov	r2, r0
 80067c8:	460b      	mov	r3, r1
 80067ca:	4611      	mov	r1, r2
 80067cc:	4b38      	ldr	r3, [pc, #224]	; (80068b0 <UART_SetConfig+0x4e4>)
 80067ce:	fba3 2301 	umull	r2, r3, r3, r1
 80067d2:	095b      	lsrs	r3, r3, #5
 80067d4:	2264      	movs	r2, #100	; 0x64
 80067d6:	fb02 f303 	mul.w	r3, r2, r3
 80067da:	1acb      	subs	r3, r1, r3
 80067dc:	011b      	lsls	r3, r3, #4
 80067de:	3332      	adds	r3, #50	; 0x32
 80067e0:	4a33      	ldr	r2, [pc, #204]	; (80068b0 <UART_SetConfig+0x4e4>)
 80067e2:	fba2 2303 	umull	r2, r3, r2, r3
 80067e6:	095b      	lsrs	r3, r3, #5
 80067e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067ec:	441c      	add	r4, r3
 80067ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067f2:	2200      	movs	r2, #0
 80067f4:	673b      	str	r3, [r7, #112]	; 0x70
 80067f6:	677a      	str	r2, [r7, #116]	; 0x74
 80067f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80067fc:	4642      	mov	r2, r8
 80067fe:	464b      	mov	r3, r9
 8006800:	1891      	adds	r1, r2, r2
 8006802:	60b9      	str	r1, [r7, #8]
 8006804:	415b      	adcs	r3, r3
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800680c:	4641      	mov	r1, r8
 800680e:	1851      	adds	r1, r2, r1
 8006810:	6039      	str	r1, [r7, #0]
 8006812:	4649      	mov	r1, r9
 8006814:	414b      	adcs	r3, r1
 8006816:	607b      	str	r3, [r7, #4]
 8006818:	f04f 0200 	mov.w	r2, #0
 800681c:	f04f 0300 	mov.w	r3, #0
 8006820:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006824:	4659      	mov	r1, fp
 8006826:	00cb      	lsls	r3, r1, #3
 8006828:	4651      	mov	r1, sl
 800682a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800682e:	4651      	mov	r1, sl
 8006830:	00ca      	lsls	r2, r1, #3
 8006832:	4610      	mov	r0, r2
 8006834:	4619      	mov	r1, r3
 8006836:	4603      	mov	r3, r0
 8006838:	4642      	mov	r2, r8
 800683a:	189b      	adds	r3, r3, r2
 800683c:	66bb      	str	r3, [r7, #104]	; 0x68
 800683e:	464b      	mov	r3, r9
 8006840:	460a      	mov	r2, r1
 8006842:	eb42 0303 	adc.w	r3, r2, r3
 8006846:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	663b      	str	r3, [r7, #96]	; 0x60
 8006852:	667a      	str	r2, [r7, #100]	; 0x64
 8006854:	f04f 0200 	mov.w	r2, #0
 8006858:	f04f 0300 	mov.w	r3, #0
 800685c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006860:	4649      	mov	r1, r9
 8006862:	008b      	lsls	r3, r1, #2
 8006864:	4641      	mov	r1, r8
 8006866:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800686a:	4641      	mov	r1, r8
 800686c:	008a      	lsls	r2, r1, #2
 800686e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006872:	f7fa f9e9 	bl	8000c48 <__aeabi_uldivmod>
 8006876:	4602      	mov	r2, r0
 8006878:	460b      	mov	r3, r1
 800687a:	4b0d      	ldr	r3, [pc, #52]	; (80068b0 <UART_SetConfig+0x4e4>)
 800687c:	fba3 1302 	umull	r1, r3, r3, r2
 8006880:	095b      	lsrs	r3, r3, #5
 8006882:	2164      	movs	r1, #100	; 0x64
 8006884:	fb01 f303 	mul.w	r3, r1, r3
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	011b      	lsls	r3, r3, #4
 800688c:	3332      	adds	r3, #50	; 0x32
 800688e:	4a08      	ldr	r2, [pc, #32]	; (80068b0 <UART_SetConfig+0x4e4>)
 8006890:	fba2 2303 	umull	r2, r3, r2, r3
 8006894:	095b      	lsrs	r3, r3, #5
 8006896:	f003 020f 	and.w	r2, r3, #15
 800689a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4422      	add	r2, r4
 80068a2:	609a      	str	r2, [r3, #8]
}
 80068a4:	bf00      	nop
 80068a6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80068aa:	46bd      	mov	sp, r7
 80068ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068b0:	51eb851f 	.word	0x51eb851f

080068b4 <arm_biquad_cascade_df1_init_f32>:
 80068b4:	b510      	push	{r4, lr}
 80068b6:	6082      	str	r2, [r0, #8]
 80068b8:	6001      	str	r1, [r0, #0]
 80068ba:	4604      	mov	r4, r0
 80068bc:	010a      	lsls	r2, r1, #4
 80068be:	4618      	mov	r0, r3
 80068c0:	2100      	movs	r1, #0
 80068c2:	f000 fe7a 	bl	80075ba <memset>
 80068c6:	6060      	str	r0, [r4, #4]
 80068c8:	bd10      	pop	{r4, pc}
 80068ca:	bf00      	nop

080068cc <arm_biquad_cascade_df1_f32>:
 80068cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068d0:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
 80068d4:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80068d8:	f003 0e03 	and.w	lr, r3, #3
 80068dc:	ea4f 190c 	mov.w	r9, ip, lsl #4
 80068e0:	6807      	ldr	r7, [r0, #0]
 80068e2:	eb02 0a09 	add.w	sl, r2, r9
 80068e6:	f10e 38ff 	add.w	r8, lr, #4294967295	; 0xffffffff
 80068ea:	3614      	adds	r6, #20
 80068ec:	3510      	adds	r5, #16
 80068ee:	ed16 4a05 	vldr	s8, [r6, #-20]	; 0xffffffec
 80068f2:	ed16 2a04 	vldr	s4, [r6, #-16]
 80068f6:	ed56 2a03 	vldr	s5, [r6, #-12]
 80068fa:	ed16 3a02 	vldr	s6, [r6, #-8]
 80068fe:	ed56 3a01 	vldr	s7, [r6, #-4]
 8006902:	ed55 5a04 	vldr	s11, [r5, #-16]
 8006906:	ed15 5a03 	vldr	s10, [r5, #-12]
 800690a:	ed15 7a02 	vldr	s14, [r5, #-8]
 800690e:	ed55 7a01 	vldr	s15, [r5, #-4]
 8006912:	f1bc 0f00 	cmp.w	ip, #0
 8006916:	f000 80d4 	beq.w	8006ac2 <arm_biquad_cascade_df1_f32+0x1f6>
 800691a:	f101 0010 	add.w	r0, r1, #16
 800691e:	f102 0310 	add.w	r3, r2, #16
 8006922:	4664      	mov	r4, ip
 8006924:	ed10 6a04 	vldr	s12, [r0, #-16]
 8006928:	ee62 4a25 	vmul.f32	s9, s4, s11
 800692c:	ee64 6a06 	vmul.f32	s13, s8, s12
 8006930:	ee22 5a85 	vmul.f32	s10, s5, s10
 8006934:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006938:	ee63 4a07 	vmul.f32	s9, s6, s14
 800693c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8006940:	ee23 5aa7 	vmul.f32	s10, s7, s15
 8006944:	ee76 7aa4 	vadd.f32	s15, s13, s9
 8006948:	ee22 1a06 	vmul.f32	s2, s4, s12
 800694c:	ee77 7a85 	vadd.f32	s15, s15, s10
 8006950:	ee62 1aa5 	vmul.f32	s3, s5, s11
 8006954:	ed43 7a04 	vstr	s15, [r3, #-16]
 8006958:	ed50 4a03 	vldr	s9, [r0, #-12]
 800695c:	ee64 6a24 	vmul.f32	s13, s8, s9
 8006960:	ee23 5a27 	vmul.f32	s10, s6, s15
 8006964:	ee76 6a81 	vadd.f32	s13, s13, s2
 8006968:	ee63 5a87 	vmul.f32	s11, s7, s14
 800696c:	ee36 7aa1 	vadd.f32	s14, s13, s3
 8006970:	ee62 1a24 	vmul.f32	s3, s4, s9
 8006974:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006978:	ee22 6a86 	vmul.f32	s12, s5, s12
 800697c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8006980:	ee63 7aa7 	vmul.f32	s15, s7, s15
 8006984:	ed03 7a03 	vstr	s14, [r3, #-12]
 8006988:	ed10 5a02 	vldr	s10, [r0, #-8]
 800698c:	ee64 5a05 	vmul.f32	s11, s8, s10
 8006990:	ee63 6a07 	vmul.f32	s13, s6, s14
 8006994:	ee75 5aa1 	vadd.f32	s11, s11, s3
 8006998:	ee62 1a05 	vmul.f32	s3, s4, s10
 800699c:	ee75 5a86 	vadd.f32	s11, s11, s12
 80069a0:	ee62 4aa4 	vmul.f32	s9, s5, s9
 80069a4:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80069a8:	ee23 7a87 	vmul.f32	s14, s7, s14
 80069ac:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80069b0:	3c01      	subs	r4, #1
 80069b2:	ed43 7a02 	vstr	s15, [r3, #-8]
 80069b6:	ed50 5a01 	vldr	s11, [r0, #-4]
 80069ba:	ee24 6a25 	vmul.f32	s12, s8, s11
 80069be:	ee63 6a27 	vmul.f32	s13, s6, s15
 80069c2:	ee36 6a21 	vadd.f32	s12, s12, s3
 80069c6:	f100 0010 	add.w	r0, r0, #16
 80069ca:	ee36 6a24 	vadd.f32	s12, s12, s9
 80069ce:	f103 0310 	add.w	r3, r3, #16
 80069d2:	ee36 6a26 	vadd.f32	s12, s12, s13
 80069d6:	ee36 7a07 	vadd.f32	s14, s12, s14
 80069da:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 80069de:	d1a1      	bne.n	8006924 <arm_biquad_cascade_df1_f32+0x58>
 80069e0:	4449      	add	r1, r9
 80069e2:	4653      	mov	r3, sl
 80069e4:	f1be 0f00 	cmp.w	lr, #0
 80069e8:	d047      	beq.n	8006a7a <arm_biquad_cascade_df1_f32+0x1ae>
 80069ea:	edd1 4a00 	vldr	s9, [r1]
 80069ee:	ee22 6a25 	vmul.f32	s12, s4, s11
 80069f2:	ee64 1a24 	vmul.f32	s3, s8, s9
 80069f6:	ee62 6a85 	vmul.f32	s13, s5, s10
 80069fa:	ee36 5a21 	vadd.f32	s10, s12, s3
 80069fe:	ee23 6a07 	vmul.f32	s12, s6, s14
 8006a02:	ee35 5a26 	vadd.f32	s10, s10, s13
 8006a06:	ee63 7aa7 	vmul.f32	s15, s7, s15
 8006a0a:	ee35 6a06 	vadd.f32	s12, s10, s12
 8006a0e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006a12:	ed83 6a00 	vstr	s12, [r3]
 8006a16:	f1b8 0f00 	cmp.w	r8, #0
 8006a1a:	d040      	beq.n	8006a9e <arm_biquad_cascade_df1_f32+0x1d2>
 8006a1c:	ed91 5a01 	vldr	s10, [r1, #4]
 8006a20:	ee62 7a24 	vmul.f32	s15, s4, s9
 8006a24:	ee65 1a04 	vmul.f32	s3, s10, s8
 8006a28:	ee62 6aa5 	vmul.f32	s13, s5, s11
 8006a2c:	ee77 5aa1 	vadd.f32	s11, s15, s3
 8006a30:	ee63 7a06 	vmul.f32	s15, s6, s12
 8006a34:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8006a38:	ee23 7a87 	vmul.f32	s14, s7, s14
 8006a3c:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8006a40:	f1b8 0f01 	cmp.w	r8, #1
 8006a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a48:	edc3 7a01 	vstr	s15, [r3, #4]
 8006a4c:	d030      	beq.n	8006ab0 <arm_biquad_cascade_df1_f32+0x1e4>
 8006a4e:	edd1 5a02 	vldr	s11, [r1, #8]
 8006a52:	ee25 2a02 	vmul.f32	s4, s10, s4
 8006a56:	ee64 6a25 	vmul.f32	s13, s8, s11
 8006a5a:	ee62 2aa4 	vmul.f32	s5, s5, s9
 8006a5e:	ee76 6a82 	vadd.f32	s13, s13, s4
 8006a62:	ee27 3a83 	vmul.f32	s6, s15, s6
 8006a66:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8006a6a:	ee63 3a86 	vmul.f32	s7, s7, s12
 8006a6e:	ee76 6a83 	vadd.f32	s13, s13, s6
 8006a72:	ee36 7aa3 	vadd.f32	s14, s13, s7
 8006a76:	ed83 7a02 	vstr	s14, [r3, #8]
 8006a7a:	3f01      	subs	r7, #1
 8006a7c:	ed45 5a04 	vstr	s11, [r5, #-16]
 8006a80:	ed05 5a03 	vstr	s10, [r5, #-12]
 8006a84:	ed05 7a02 	vstr	s14, [r5, #-8]
 8006a88:	ed45 7a01 	vstr	s15, [r5, #-4]
 8006a8c:	f106 0614 	add.w	r6, r6, #20
 8006a90:	f105 0510 	add.w	r5, r5, #16
 8006a94:	4611      	mov	r1, r2
 8006a96:	f47f af2a 	bne.w	80068ee <arm_biquad_cascade_df1_f32+0x22>
 8006a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a9e:	eef0 7a47 	vmov.f32	s15, s14
 8006aa2:	eeb0 5a65 	vmov.f32	s10, s11
 8006aa6:	eeb0 7a46 	vmov.f32	s14, s12
 8006aaa:	eef0 5a64 	vmov.f32	s11, s9
 8006aae:	e7e4      	b.n	8006a7a <arm_biquad_cascade_df1_f32+0x1ae>
 8006ab0:	eeb0 7a67 	vmov.f32	s14, s15
 8006ab4:	eef0 5a45 	vmov.f32	s11, s10
 8006ab8:	eef0 7a46 	vmov.f32	s15, s12
 8006abc:	eeb0 5a64 	vmov.f32	s10, s9
 8006ac0:	e7db      	b.n	8006a7a <arm_biquad_cascade_df1_f32+0x1ae>
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	e78e      	b.n	80069e4 <arm_biquad_cascade_df1_f32+0x118>
 8006ac6:	bf00      	nop

08006ac8 <__cvt>:
 8006ac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006acc:	ec55 4b10 	vmov	r4, r5, d0
 8006ad0:	2d00      	cmp	r5, #0
 8006ad2:	460e      	mov	r6, r1
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	462b      	mov	r3, r5
 8006ad8:	bfbb      	ittet	lt
 8006ada:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006ade:	461d      	movlt	r5, r3
 8006ae0:	2300      	movge	r3, #0
 8006ae2:	232d      	movlt	r3, #45	; 0x2d
 8006ae4:	700b      	strb	r3, [r1, #0]
 8006ae6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ae8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006aec:	4691      	mov	r9, r2
 8006aee:	f023 0820 	bic.w	r8, r3, #32
 8006af2:	bfbc      	itt	lt
 8006af4:	4622      	movlt	r2, r4
 8006af6:	4614      	movlt	r4, r2
 8006af8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006afc:	d005      	beq.n	8006b0a <__cvt+0x42>
 8006afe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006b02:	d100      	bne.n	8006b06 <__cvt+0x3e>
 8006b04:	3601      	adds	r6, #1
 8006b06:	2102      	movs	r1, #2
 8006b08:	e000      	b.n	8006b0c <__cvt+0x44>
 8006b0a:	2103      	movs	r1, #3
 8006b0c:	ab03      	add	r3, sp, #12
 8006b0e:	9301      	str	r3, [sp, #4]
 8006b10:	ab02      	add	r3, sp, #8
 8006b12:	9300      	str	r3, [sp, #0]
 8006b14:	ec45 4b10 	vmov	d0, r4, r5
 8006b18:	4653      	mov	r3, sl
 8006b1a:	4632      	mov	r2, r6
 8006b1c:	f000 fe64 	bl	80077e8 <_dtoa_r>
 8006b20:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006b24:	4607      	mov	r7, r0
 8006b26:	d102      	bne.n	8006b2e <__cvt+0x66>
 8006b28:	f019 0f01 	tst.w	r9, #1
 8006b2c:	d022      	beq.n	8006b74 <__cvt+0xac>
 8006b2e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b32:	eb07 0906 	add.w	r9, r7, r6
 8006b36:	d110      	bne.n	8006b5a <__cvt+0x92>
 8006b38:	783b      	ldrb	r3, [r7, #0]
 8006b3a:	2b30      	cmp	r3, #48	; 0x30
 8006b3c:	d10a      	bne.n	8006b54 <__cvt+0x8c>
 8006b3e:	2200      	movs	r2, #0
 8006b40:	2300      	movs	r3, #0
 8006b42:	4620      	mov	r0, r4
 8006b44:	4629      	mov	r1, r5
 8006b46:	f7f9 ffbf 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b4a:	b918      	cbnz	r0, 8006b54 <__cvt+0x8c>
 8006b4c:	f1c6 0601 	rsb	r6, r6, #1
 8006b50:	f8ca 6000 	str.w	r6, [sl]
 8006b54:	f8da 3000 	ldr.w	r3, [sl]
 8006b58:	4499      	add	r9, r3
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	4620      	mov	r0, r4
 8006b60:	4629      	mov	r1, r5
 8006b62:	f7f9 ffb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b66:	b108      	cbz	r0, 8006b6c <__cvt+0xa4>
 8006b68:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b6c:	2230      	movs	r2, #48	; 0x30
 8006b6e:	9b03      	ldr	r3, [sp, #12]
 8006b70:	454b      	cmp	r3, r9
 8006b72:	d307      	bcc.n	8006b84 <__cvt+0xbc>
 8006b74:	9b03      	ldr	r3, [sp, #12]
 8006b76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b78:	1bdb      	subs	r3, r3, r7
 8006b7a:	4638      	mov	r0, r7
 8006b7c:	6013      	str	r3, [r2, #0]
 8006b7e:	b004      	add	sp, #16
 8006b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b84:	1c59      	adds	r1, r3, #1
 8006b86:	9103      	str	r1, [sp, #12]
 8006b88:	701a      	strb	r2, [r3, #0]
 8006b8a:	e7f0      	b.n	8006b6e <__cvt+0xa6>

08006b8c <__exponent>:
 8006b8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2900      	cmp	r1, #0
 8006b92:	bfb8      	it	lt
 8006b94:	4249      	neglt	r1, r1
 8006b96:	f803 2b02 	strb.w	r2, [r3], #2
 8006b9a:	bfb4      	ite	lt
 8006b9c:	222d      	movlt	r2, #45	; 0x2d
 8006b9e:	222b      	movge	r2, #43	; 0x2b
 8006ba0:	2909      	cmp	r1, #9
 8006ba2:	7042      	strb	r2, [r0, #1]
 8006ba4:	dd2a      	ble.n	8006bfc <__exponent+0x70>
 8006ba6:	f10d 0207 	add.w	r2, sp, #7
 8006baa:	4617      	mov	r7, r2
 8006bac:	260a      	movs	r6, #10
 8006bae:	4694      	mov	ip, r2
 8006bb0:	fb91 f5f6 	sdiv	r5, r1, r6
 8006bb4:	fb06 1415 	mls	r4, r6, r5, r1
 8006bb8:	3430      	adds	r4, #48	; 0x30
 8006bba:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	2c63      	cmp	r4, #99	; 0x63
 8006bc2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006bc6:	4629      	mov	r1, r5
 8006bc8:	dcf1      	bgt.n	8006bae <__exponent+0x22>
 8006bca:	3130      	adds	r1, #48	; 0x30
 8006bcc:	f1ac 0402 	sub.w	r4, ip, #2
 8006bd0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006bd4:	1c41      	adds	r1, r0, #1
 8006bd6:	4622      	mov	r2, r4
 8006bd8:	42ba      	cmp	r2, r7
 8006bda:	d30a      	bcc.n	8006bf2 <__exponent+0x66>
 8006bdc:	f10d 0209 	add.w	r2, sp, #9
 8006be0:	eba2 020c 	sub.w	r2, r2, ip
 8006be4:	42bc      	cmp	r4, r7
 8006be6:	bf88      	it	hi
 8006be8:	2200      	movhi	r2, #0
 8006bea:	4413      	add	r3, r2
 8006bec:	1a18      	subs	r0, r3, r0
 8006bee:	b003      	add	sp, #12
 8006bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bf2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006bf6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006bfa:	e7ed      	b.n	8006bd8 <__exponent+0x4c>
 8006bfc:	2330      	movs	r3, #48	; 0x30
 8006bfe:	3130      	adds	r1, #48	; 0x30
 8006c00:	7083      	strb	r3, [r0, #2]
 8006c02:	70c1      	strb	r1, [r0, #3]
 8006c04:	1d03      	adds	r3, r0, #4
 8006c06:	e7f1      	b.n	8006bec <__exponent+0x60>

08006c08 <_printf_float>:
 8006c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c0c:	ed2d 8b02 	vpush	{d8}
 8006c10:	b08d      	sub	sp, #52	; 0x34
 8006c12:	460c      	mov	r4, r1
 8006c14:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006c18:	4616      	mov	r6, r2
 8006c1a:	461f      	mov	r7, r3
 8006c1c:	4605      	mov	r5, r0
 8006c1e:	f000 fcd5 	bl	80075cc <_localeconv_r>
 8006c22:	f8d0 a000 	ldr.w	sl, [r0]
 8006c26:	4650      	mov	r0, sl
 8006c28:	f7f9 fb22 	bl	8000270 <strlen>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	930a      	str	r3, [sp, #40]	; 0x28
 8006c30:	6823      	ldr	r3, [r4, #0]
 8006c32:	9305      	str	r3, [sp, #20]
 8006c34:	f8d8 3000 	ldr.w	r3, [r8]
 8006c38:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006c3c:	3307      	adds	r3, #7
 8006c3e:	f023 0307 	bic.w	r3, r3, #7
 8006c42:	f103 0208 	add.w	r2, r3, #8
 8006c46:	f8c8 2000 	str.w	r2, [r8]
 8006c4a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c52:	9307      	str	r3, [sp, #28]
 8006c54:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c58:	ee08 0a10 	vmov	s16, r0
 8006c5c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006c60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c64:	4b9e      	ldr	r3, [pc, #632]	; (8006ee0 <_printf_float+0x2d8>)
 8006c66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c6a:	f7f9 ff5f 	bl	8000b2c <__aeabi_dcmpun>
 8006c6e:	bb88      	cbnz	r0, 8006cd4 <_printf_float+0xcc>
 8006c70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c74:	4b9a      	ldr	r3, [pc, #616]	; (8006ee0 <_printf_float+0x2d8>)
 8006c76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c7a:	f7f9 ff39 	bl	8000af0 <__aeabi_dcmple>
 8006c7e:	bb48      	cbnz	r0, 8006cd4 <_printf_float+0xcc>
 8006c80:	2200      	movs	r2, #0
 8006c82:	2300      	movs	r3, #0
 8006c84:	4640      	mov	r0, r8
 8006c86:	4649      	mov	r1, r9
 8006c88:	f7f9 ff28 	bl	8000adc <__aeabi_dcmplt>
 8006c8c:	b110      	cbz	r0, 8006c94 <_printf_float+0x8c>
 8006c8e:	232d      	movs	r3, #45	; 0x2d
 8006c90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c94:	4a93      	ldr	r2, [pc, #588]	; (8006ee4 <_printf_float+0x2dc>)
 8006c96:	4b94      	ldr	r3, [pc, #592]	; (8006ee8 <_printf_float+0x2e0>)
 8006c98:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006c9c:	bf94      	ite	ls
 8006c9e:	4690      	movls	r8, r2
 8006ca0:	4698      	movhi	r8, r3
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	6123      	str	r3, [r4, #16]
 8006ca6:	9b05      	ldr	r3, [sp, #20]
 8006ca8:	f023 0304 	bic.w	r3, r3, #4
 8006cac:	6023      	str	r3, [r4, #0]
 8006cae:	f04f 0900 	mov.w	r9, #0
 8006cb2:	9700      	str	r7, [sp, #0]
 8006cb4:	4633      	mov	r3, r6
 8006cb6:	aa0b      	add	r2, sp, #44	; 0x2c
 8006cb8:	4621      	mov	r1, r4
 8006cba:	4628      	mov	r0, r5
 8006cbc:	f000 f9da 	bl	8007074 <_printf_common>
 8006cc0:	3001      	adds	r0, #1
 8006cc2:	f040 8090 	bne.w	8006de6 <_printf_float+0x1de>
 8006cc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cca:	b00d      	add	sp, #52	; 0x34
 8006ccc:	ecbd 8b02 	vpop	{d8}
 8006cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd4:	4642      	mov	r2, r8
 8006cd6:	464b      	mov	r3, r9
 8006cd8:	4640      	mov	r0, r8
 8006cda:	4649      	mov	r1, r9
 8006cdc:	f7f9 ff26 	bl	8000b2c <__aeabi_dcmpun>
 8006ce0:	b140      	cbz	r0, 8006cf4 <_printf_float+0xec>
 8006ce2:	464b      	mov	r3, r9
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	bfbc      	itt	lt
 8006ce8:	232d      	movlt	r3, #45	; 0x2d
 8006cea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006cee:	4a7f      	ldr	r2, [pc, #508]	; (8006eec <_printf_float+0x2e4>)
 8006cf0:	4b7f      	ldr	r3, [pc, #508]	; (8006ef0 <_printf_float+0x2e8>)
 8006cf2:	e7d1      	b.n	8006c98 <_printf_float+0x90>
 8006cf4:	6863      	ldr	r3, [r4, #4]
 8006cf6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006cfa:	9206      	str	r2, [sp, #24]
 8006cfc:	1c5a      	adds	r2, r3, #1
 8006cfe:	d13f      	bne.n	8006d80 <_printf_float+0x178>
 8006d00:	2306      	movs	r3, #6
 8006d02:	6063      	str	r3, [r4, #4]
 8006d04:	9b05      	ldr	r3, [sp, #20]
 8006d06:	6861      	ldr	r1, [r4, #4]
 8006d08:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	9303      	str	r3, [sp, #12]
 8006d10:	ab0a      	add	r3, sp, #40	; 0x28
 8006d12:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006d16:	ab09      	add	r3, sp, #36	; 0x24
 8006d18:	ec49 8b10 	vmov	d0, r8, r9
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	6022      	str	r2, [r4, #0]
 8006d20:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006d24:	4628      	mov	r0, r5
 8006d26:	f7ff fecf 	bl	8006ac8 <__cvt>
 8006d2a:	9b06      	ldr	r3, [sp, #24]
 8006d2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d2e:	2b47      	cmp	r3, #71	; 0x47
 8006d30:	4680      	mov	r8, r0
 8006d32:	d108      	bne.n	8006d46 <_printf_float+0x13e>
 8006d34:	1cc8      	adds	r0, r1, #3
 8006d36:	db02      	blt.n	8006d3e <_printf_float+0x136>
 8006d38:	6863      	ldr	r3, [r4, #4]
 8006d3a:	4299      	cmp	r1, r3
 8006d3c:	dd41      	ble.n	8006dc2 <_printf_float+0x1ba>
 8006d3e:	f1ab 0302 	sub.w	r3, fp, #2
 8006d42:	fa5f fb83 	uxtb.w	fp, r3
 8006d46:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d4a:	d820      	bhi.n	8006d8e <_printf_float+0x186>
 8006d4c:	3901      	subs	r1, #1
 8006d4e:	465a      	mov	r2, fp
 8006d50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006d54:	9109      	str	r1, [sp, #36]	; 0x24
 8006d56:	f7ff ff19 	bl	8006b8c <__exponent>
 8006d5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d5c:	1813      	adds	r3, r2, r0
 8006d5e:	2a01      	cmp	r2, #1
 8006d60:	4681      	mov	r9, r0
 8006d62:	6123      	str	r3, [r4, #16]
 8006d64:	dc02      	bgt.n	8006d6c <_printf_float+0x164>
 8006d66:	6822      	ldr	r2, [r4, #0]
 8006d68:	07d2      	lsls	r2, r2, #31
 8006d6a:	d501      	bpl.n	8006d70 <_printf_float+0x168>
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	6123      	str	r3, [r4, #16]
 8006d70:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d09c      	beq.n	8006cb2 <_printf_float+0xaa>
 8006d78:	232d      	movs	r3, #45	; 0x2d
 8006d7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d7e:	e798      	b.n	8006cb2 <_printf_float+0xaa>
 8006d80:	9a06      	ldr	r2, [sp, #24]
 8006d82:	2a47      	cmp	r2, #71	; 0x47
 8006d84:	d1be      	bne.n	8006d04 <_printf_float+0xfc>
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1bc      	bne.n	8006d04 <_printf_float+0xfc>
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e7b9      	b.n	8006d02 <_printf_float+0xfa>
 8006d8e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006d92:	d118      	bne.n	8006dc6 <_printf_float+0x1be>
 8006d94:	2900      	cmp	r1, #0
 8006d96:	6863      	ldr	r3, [r4, #4]
 8006d98:	dd0b      	ble.n	8006db2 <_printf_float+0x1aa>
 8006d9a:	6121      	str	r1, [r4, #16]
 8006d9c:	b913      	cbnz	r3, 8006da4 <_printf_float+0x19c>
 8006d9e:	6822      	ldr	r2, [r4, #0]
 8006da0:	07d0      	lsls	r0, r2, #31
 8006da2:	d502      	bpl.n	8006daa <_printf_float+0x1a2>
 8006da4:	3301      	adds	r3, #1
 8006da6:	440b      	add	r3, r1
 8006da8:	6123      	str	r3, [r4, #16]
 8006daa:	65a1      	str	r1, [r4, #88]	; 0x58
 8006dac:	f04f 0900 	mov.w	r9, #0
 8006db0:	e7de      	b.n	8006d70 <_printf_float+0x168>
 8006db2:	b913      	cbnz	r3, 8006dba <_printf_float+0x1b2>
 8006db4:	6822      	ldr	r2, [r4, #0]
 8006db6:	07d2      	lsls	r2, r2, #31
 8006db8:	d501      	bpl.n	8006dbe <_printf_float+0x1b6>
 8006dba:	3302      	adds	r3, #2
 8006dbc:	e7f4      	b.n	8006da8 <_printf_float+0x1a0>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e7f2      	b.n	8006da8 <_printf_float+0x1a0>
 8006dc2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dc8:	4299      	cmp	r1, r3
 8006dca:	db05      	blt.n	8006dd8 <_printf_float+0x1d0>
 8006dcc:	6823      	ldr	r3, [r4, #0]
 8006dce:	6121      	str	r1, [r4, #16]
 8006dd0:	07d8      	lsls	r0, r3, #31
 8006dd2:	d5ea      	bpl.n	8006daa <_printf_float+0x1a2>
 8006dd4:	1c4b      	adds	r3, r1, #1
 8006dd6:	e7e7      	b.n	8006da8 <_printf_float+0x1a0>
 8006dd8:	2900      	cmp	r1, #0
 8006dda:	bfd4      	ite	le
 8006ddc:	f1c1 0202 	rsble	r2, r1, #2
 8006de0:	2201      	movgt	r2, #1
 8006de2:	4413      	add	r3, r2
 8006de4:	e7e0      	b.n	8006da8 <_printf_float+0x1a0>
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	055a      	lsls	r2, r3, #21
 8006dea:	d407      	bmi.n	8006dfc <_printf_float+0x1f4>
 8006dec:	6923      	ldr	r3, [r4, #16]
 8006dee:	4642      	mov	r2, r8
 8006df0:	4631      	mov	r1, r6
 8006df2:	4628      	mov	r0, r5
 8006df4:	47b8      	blx	r7
 8006df6:	3001      	adds	r0, #1
 8006df8:	d12c      	bne.n	8006e54 <_printf_float+0x24c>
 8006dfa:	e764      	b.n	8006cc6 <_printf_float+0xbe>
 8006dfc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e00:	f240 80e0 	bls.w	8006fc4 <_printf_float+0x3bc>
 8006e04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e08:	2200      	movs	r2, #0
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	f7f9 fe5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	d034      	beq.n	8006e7e <_printf_float+0x276>
 8006e14:	4a37      	ldr	r2, [pc, #220]	; (8006ef4 <_printf_float+0x2ec>)
 8006e16:	2301      	movs	r3, #1
 8006e18:	4631      	mov	r1, r6
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	47b8      	blx	r7
 8006e1e:	3001      	adds	r0, #1
 8006e20:	f43f af51 	beq.w	8006cc6 <_printf_float+0xbe>
 8006e24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	db02      	blt.n	8006e32 <_printf_float+0x22a>
 8006e2c:	6823      	ldr	r3, [r4, #0]
 8006e2e:	07d8      	lsls	r0, r3, #31
 8006e30:	d510      	bpl.n	8006e54 <_printf_float+0x24c>
 8006e32:	ee18 3a10 	vmov	r3, s16
 8006e36:	4652      	mov	r2, sl
 8006e38:	4631      	mov	r1, r6
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	47b8      	blx	r7
 8006e3e:	3001      	adds	r0, #1
 8006e40:	f43f af41 	beq.w	8006cc6 <_printf_float+0xbe>
 8006e44:	f04f 0800 	mov.w	r8, #0
 8006e48:	f104 091a 	add.w	r9, r4, #26
 8006e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	4543      	cmp	r3, r8
 8006e52:	dc09      	bgt.n	8006e68 <_printf_float+0x260>
 8006e54:	6823      	ldr	r3, [r4, #0]
 8006e56:	079b      	lsls	r3, r3, #30
 8006e58:	f100 8107 	bmi.w	800706a <_printf_float+0x462>
 8006e5c:	68e0      	ldr	r0, [r4, #12]
 8006e5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e60:	4298      	cmp	r0, r3
 8006e62:	bfb8      	it	lt
 8006e64:	4618      	movlt	r0, r3
 8006e66:	e730      	b.n	8006cca <_printf_float+0xc2>
 8006e68:	2301      	movs	r3, #1
 8006e6a:	464a      	mov	r2, r9
 8006e6c:	4631      	mov	r1, r6
 8006e6e:	4628      	mov	r0, r5
 8006e70:	47b8      	blx	r7
 8006e72:	3001      	adds	r0, #1
 8006e74:	f43f af27 	beq.w	8006cc6 <_printf_float+0xbe>
 8006e78:	f108 0801 	add.w	r8, r8, #1
 8006e7c:	e7e6      	b.n	8006e4c <_printf_float+0x244>
 8006e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	dc39      	bgt.n	8006ef8 <_printf_float+0x2f0>
 8006e84:	4a1b      	ldr	r2, [pc, #108]	; (8006ef4 <_printf_float+0x2ec>)
 8006e86:	2301      	movs	r3, #1
 8006e88:	4631      	mov	r1, r6
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	47b8      	blx	r7
 8006e8e:	3001      	adds	r0, #1
 8006e90:	f43f af19 	beq.w	8006cc6 <_printf_float+0xbe>
 8006e94:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	d102      	bne.n	8006ea2 <_printf_float+0x29a>
 8006e9c:	6823      	ldr	r3, [r4, #0]
 8006e9e:	07d9      	lsls	r1, r3, #31
 8006ea0:	d5d8      	bpl.n	8006e54 <_printf_float+0x24c>
 8006ea2:	ee18 3a10 	vmov	r3, s16
 8006ea6:	4652      	mov	r2, sl
 8006ea8:	4631      	mov	r1, r6
 8006eaa:	4628      	mov	r0, r5
 8006eac:	47b8      	blx	r7
 8006eae:	3001      	adds	r0, #1
 8006eb0:	f43f af09 	beq.w	8006cc6 <_printf_float+0xbe>
 8006eb4:	f04f 0900 	mov.w	r9, #0
 8006eb8:	f104 0a1a 	add.w	sl, r4, #26
 8006ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ebe:	425b      	negs	r3, r3
 8006ec0:	454b      	cmp	r3, r9
 8006ec2:	dc01      	bgt.n	8006ec8 <_printf_float+0x2c0>
 8006ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ec6:	e792      	b.n	8006dee <_printf_float+0x1e6>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	4652      	mov	r2, sl
 8006ecc:	4631      	mov	r1, r6
 8006ece:	4628      	mov	r0, r5
 8006ed0:	47b8      	blx	r7
 8006ed2:	3001      	adds	r0, #1
 8006ed4:	f43f aef7 	beq.w	8006cc6 <_printf_float+0xbe>
 8006ed8:	f109 0901 	add.w	r9, r9, #1
 8006edc:	e7ee      	b.n	8006ebc <_printf_float+0x2b4>
 8006ede:	bf00      	nop
 8006ee0:	7fefffff 	.word	0x7fefffff
 8006ee4:	0800a2b8 	.word	0x0800a2b8
 8006ee8:	0800a2bc 	.word	0x0800a2bc
 8006eec:	0800a2c0 	.word	0x0800a2c0
 8006ef0:	0800a2c4 	.word	0x0800a2c4
 8006ef4:	0800a2c8 	.word	0x0800a2c8
 8006ef8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006efa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006efc:	429a      	cmp	r2, r3
 8006efe:	bfa8      	it	ge
 8006f00:	461a      	movge	r2, r3
 8006f02:	2a00      	cmp	r2, #0
 8006f04:	4691      	mov	r9, r2
 8006f06:	dc37      	bgt.n	8006f78 <_printf_float+0x370>
 8006f08:	f04f 0b00 	mov.w	fp, #0
 8006f0c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f10:	f104 021a 	add.w	r2, r4, #26
 8006f14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f16:	9305      	str	r3, [sp, #20]
 8006f18:	eba3 0309 	sub.w	r3, r3, r9
 8006f1c:	455b      	cmp	r3, fp
 8006f1e:	dc33      	bgt.n	8006f88 <_printf_float+0x380>
 8006f20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f24:	429a      	cmp	r2, r3
 8006f26:	db3b      	blt.n	8006fa0 <_printf_float+0x398>
 8006f28:	6823      	ldr	r3, [r4, #0]
 8006f2a:	07da      	lsls	r2, r3, #31
 8006f2c:	d438      	bmi.n	8006fa0 <_printf_float+0x398>
 8006f2e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006f32:	eba2 0903 	sub.w	r9, r2, r3
 8006f36:	9b05      	ldr	r3, [sp, #20]
 8006f38:	1ad2      	subs	r2, r2, r3
 8006f3a:	4591      	cmp	r9, r2
 8006f3c:	bfa8      	it	ge
 8006f3e:	4691      	movge	r9, r2
 8006f40:	f1b9 0f00 	cmp.w	r9, #0
 8006f44:	dc35      	bgt.n	8006fb2 <_printf_float+0x3aa>
 8006f46:	f04f 0800 	mov.w	r8, #0
 8006f4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f4e:	f104 0a1a 	add.w	sl, r4, #26
 8006f52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f56:	1a9b      	subs	r3, r3, r2
 8006f58:	eba3 0309 	sub.w	r3, r3, r9
 8006f5c:	4543      	cmp	r3, r8
 8006f5e:	f77f af79 	ble.w	8006e54 <_printf_float+0x24c>
 8006f62:	2301      	movs	r3, #1
 8006f64:	4652      	mov	r2, sl
 8006f66:	4631      	mov	r1, r6
 8006f68:	4628      	mov	r0, r5
 8006f6a:	47b8      	blx	r7
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	f43f aeaa 	beq.w	8006cc6 <_printf_float+0xbe>
 8006f72:	f108 0801 	add.w	r8, r8, #1
 8006f76:	e7ec      	b.n	8006f52 <_printf_float+0x34a>
 8006f78:	4613      	mov	r3, r2
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	4642      	mov	r2, r8
 8006f7e:	4628      	mov	r0, r5
 8006f80:	47b8      	blx	r7
 8006f82:	3001      	adds	r0, #1
 8006f84:	d1c0      	bne.n	8006f08 <_printf_float+0x300>
 8006f86:	e69e      	b.n	8006cc6 <_printf_float+0xbe>
 8006f88:	2301      	movs	r3, #1
 8006f8a:	4631      	mov	r1, r6
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	9205      	str	r2, [sp, #20]
 8006f90:	47b8      	blx	r7
 8006f92:	3001      	adds	r0, #1
 8006f94:	f43f ae97 	beq.w	8006cc6 <_printf_float+0xbe>
 8006f98:	9a05      	ldr	r2, [sp, #20]
 8006f9a:	f10b 0b01 	add.w	fp, fp, #1
 8006f9e:	e7b9      	b.n	8006f14 <_printf_float+0x30c>
 8006fa0:	ee18 3a10 	vmov	r3, s16
 8006fa4:	4652      	mov	r2, sl
 8006fa6:	4631      	mov	r1, r6
 8006fa8:	4628      	mov	r0, r5
 8006faa:	47b8      	blx	r7
 8006fac:	3001      	adds	r0, #1
 8006fae:	d1be      	bne.n	8006f2e <_printf_float+0x326>
 8006fb0:	e689      	b.n	8006cc6 <_printf_float+0xbe>
 8006fb2:	9a05      	ldr	r2, [sp, #20]
 8006fb4:	464b      	mov	r3, r9
 8006fb6:	4442      	add	r2, r8
 8006fb8:	4631      	mov	r1, r6
 8006fba:	4628      	mov	r0, r5
 8006fbc:	47b8      	blx	r7
 8006fbe:	3001      	adds	r0, #1
 8006fc0:	d1c1      	bne.n	8006f46 <_printf_float+0x33e>
 8006fc2:	e680      	b.n	8006cc6 <_printf_float+0xbe>
 8006fc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fc6:	2a01      	cmp	r2, #1
 8006fc8:	dc01      	bgt.n	8006fce <_printf_float+0x3c6>
 8006fca:	07db      	lsls	r3, r3, #31
 8006fcc:	d53a      	bpl.n	8007044 <_printf_float+0x43c>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	4642      	mov	r2, r8
 8006fd2:	4631      	mov	r1, r6
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	47b8      	blx	r7
 8006fd8:	3001      	adds	r0, #1
 8006fda:	f43f ae74 	beq.w	8006cc6 <_printf_float+0xbe>
 8006fde:	ee18 3a10 	vmov	r3, s16
 8006fe2:	4652      	mov	r2, sl
 8006fe4:	4631      	mov	r1, r6
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	47b8      	blx	r7
 8006fea:	3001      	adds	r0, #1
 8006fec:	f43f ae6b 	beq.w	8006cc6 <_printf_float+0xbe>
 8006ff0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006ffc:	f7f9 fd64 	bl	8000ac8 <__aeabi_dcmpeq>
 8007000:	b9d8      	cbnz	r0, 800703a <_printf_float+0x432>
 8007002:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007006:	f108 0201 	add.w	r2, r8, #1
 800700a:	4631      	mov	r1, r6
 800700c:	4628      	mov	r0, r5
 800700e:	47b8      	blx	r7
 8007010:	3001      	adds	r0, #1
 8007012:	d10e      	bne.n	8007032 <_printf_float+0x42a>
 8007014:	e657      	b.n	8006cc6 <_printf_float+0xbe>
 8007016:	2301      	movs	r3, #1
 8007018:	4652      	mov	r2, sl
 800701a:	4631      	mov	r1, r6
 800701c:	4628      	mov	r0, r5
 800701e:	47b8      	blx	r7
 8007020:	3001      	adds	r0, #1
 8007022:	f43f ae50 	beq.w	8006cc6 <_printf_float+0xbe>
 8007026:	f108 0801 	add.w	r8, r8, #1
 800702a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800702c:	3b01      	subs	r3, #1
 800702e:	4543      	cmp	r3, r8
 8007030:	dcf1      	bgt.n	8007016 <_printf_float+0x40e>
 8007032:	464b      	mov	r3, r9
 8007034:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007038:	e6da      	b.n	8006df0 <_printf_float+0x1e8>
 800703a:	f04f 0800 	mov.w	r8, #0
 800703e:	f104 0a1a 	add.w	sl, r4, #26
 8007042:	e7f2      	b.n	800702a <_printf_float+0x422>
 8007044:	2301      	movs	r3, #1
 8007046:	4642      	mov	r2, r8
 8007048:	e7df      	b.n	800700a <_printf_float+0x402>
 800704a:	2301      	movs	r3, #1
 800704c:	464a      	mov	r2, r9
 800704e:	4631      	mov	r1, r6
 8007050:	4628      	mov	r0, r5
 8007052:	47b8      	blx	r7
 8007054:	3001      	adds	r0, #1
 8007056:	f43f ae36 	beq.w	8006cc6 <_printf_float+0xbe>
 800705a:	f108 0801 	add.w	r8, r8, #1
 800705e:	68e3      	ldr	r3, [r4, #12]
 8007060:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007062:	1a5b      	subs	r3, r3, r1
 8007064:	4543      	cmp	r3, r8
 8007066:	dcf0      	bgt.n	800704a <_printf_float+0x442>
 8007068:	e6f8      	b.n	8006e5c <_printf_float+0x254>
 800706a:	f04f 0800 	mov.w	r8, #0
 800706e:	f104 0919 	add.w	r9, r4, #25
 8007072:	e7f4      	b.n	800705e <_printf_float+0x456>

08007074 <_printf_common>:
 8007074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007078:	4616      	mov	r6, r2
 800707a:	4699      	mov	r9, r3
 800707c:	688a      	ldr	r2, [r1, #8]
 800707e:	690b      	ldr	r3, [r1, #16]
 8007080:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007084:	4293      	cmp	r3, r2
 8007086:	bfb8      	it	lt
 8007088:	4613      	movlt	r3, r2
 800708a:	6033      	str	r3, [r6, #0]
 800708c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007090:	4607      	mov	r7, r0
 8007092:	460c      	mov	r4, r1
 8007094:	b10a      	cbz	r2, 800709a <_printf_common+0x26>
 8007096:	3301      	adds	r3, #1
 8007098:	6033      	str	r3, [r6, #0]
 800709a:	6823      	ldr	r3, [r4, #0]
 800709c:	0699      	lsls	r1, r3, #26
 800709e:	bf42      	ittt	mi
 80070a0:	6833      	ldrmi	r3, [r6, #0]
 80070a2:	3302      	addmi	r3, #2
 80070a4:	6033      	strmi	r3, [r6, #0]
 80070a6:	6825      	ldr	r5, [r4, #0]
 80070a8:	f015 0506 	ands.w	r5, r5, #6
 80070ac:	d106      	bne.n	80070bc <_printf_common+0x48>
 80070ae:	f104 0a19 	add.w	sl, r4, #25
 80070b2:	68e3      	ldr	r3, [r4, #12]
 80070b4:	6832      	ldr	r2, [r6, #0]
 80070b6:	1a9b      	subs	r3, r3, r2
 80070b8:	42ab      	cmp	r3, r5
 80070ba:	dc26      	bgt.n	800710a <_printf_common+0x96>
 80070bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070c0:	1e13      	subs	r3, r2, #0
 80070c2:	6822      	ldr	r2, [r4, #0]
 80070c4:	bf18      	it	ne
 80070c6:	2301      	movne	r3, #1
 80070c8:	0692      	lsls	r2, r2, #26
 80070ca:	d42b      	bmi.n	8007124 <_printf_common+0xb0>
 80070cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070d0:	4649      	mov	r1, r9
 80070d2:	4638      	mov	r0, r7
 80070d4:	47c0      	blx	r8
 80070d6:	3001      	adds	r0, #1
 80070d8:	d01e      	beq.n	8007118 <_printf_common+0xa4>
 80070da:	6823      	ldr	r3, [r4, #0]
 80070dc:	6922      	ldr	r2, [r4, #16]
 80070de:	f003 0306 	and.w	r3, r3, #6
 80070e2:	2b04      	cmp	r3, #4
 80070e4:	bf02      	ittt	eq
 80070e6:	68e5      	ldreq	r5, [r4, #12]
 80070e8:	6833      	ldreq	r3, [r6, #0]
 80070ea:	1aed      	subeq	r5, r5, r3
 80070ec:	68a3      	ldr	r3, [r4, #8]
 80070ee:	bf0c      	ite	eq
 80070f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070f4:	2500      	movne	r5, #0
 80070f6:	4293      	cmp	r3, r2
 80070f8:	bfc4      	itt	gt
 80070fa:	1a9b      	subgt	r3, r3, r2
 80070fc:	18ed      	addgt	r5, r5, r3
 80070fe:	2600      	movs	r6, #0
 8007100:	341a      	adds	r4, #26
 8007102:	42b5      	cmp	r5, r6
 8007104:	d11a      	bne.n	800713c <_printf_common+0xc8>
 8007106:	2000      	movs	r0, #0
 8007108:	e008      	b.n	800711c <_printf_common+0xa8>
 800710a:	2301      	movs	r3, #1
 800710c:	4652      	mov	r2, sl
 800710e:	4649      	mov	r1, r9
 8007110:	4638      	mov	r0, r7
 8007112:	47c0      	blx	r8
 8007114:	3001      	adds	r0, #1
 8007116:	d103      	bne.n	8007120 <_printf_common+0xac>
 8007118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800711c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007120:	3501      	adds	r5, #1
 8007122:	e7c6      	b.n	80070b2 <_printf_common+0x3e>
 8007124:	18e1      	adds	r1, r4, r3
 8007126:	1c5a      	adds	r2, r3, #1
 8007128:	2030      	movs	r0, #48	; 0x30
 800712a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800712e:	4422      	add	r2, r4
 8007130:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007134:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007138:	3302      	adds	r3, #2
 800713a:	e7c7      	b.n	80070cc <_printf_common+0x58>
 800713c:	2301      	movs	r3, #1
 800713e:	4622      	mov	r2, r4
 8007140:	4649      	mov	r1, r9
 8007142:	4638      	mov	r0, r7
 8007144:	47c0      	blx	r8
 8007146:	3001      	adds	r0, #1
 8007148:	d0e6      	beq.n	8007118 <_printf_common+0xa4>
 800714a:	3601      	adds	r6, #1
 800714c:	e7d9      	b.n	8007102 <_printf_common+0x8e>
	...

08007150 <_printf_i>:
 8007150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007154:	7e0f      	ldrb	r7, [r1, #24]
 8007156:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007158:	2f78      	cmp	r7, #120	; 0x78
 800715a:	4691      	mov	r9, r2
 800715c:	4680      	mov	r8, r0
 800715e:	460c      	mov	r4, r1
 8007160:	469a      	mov	sl, r3
 8007162:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007166:	d807      	bhi.n	8007178 <_printf_i+0x28>
 8007168:	2f62      	cmp	r7, #98	; 0x62
 800716a:	d80a      	bhi.n	8007182 <_printf_i+0x32>
 800716c:	2f00      	cmp	r7, #0
 800716e:	f000 80d4 	beq.w	800731a <_printf_i+0x1ca>
 8007172:	2f58      	cmp	r7, #88	; 0x58
 8007174:	f000 80c0 	beq.w	80072f8 <_printf_i+0x1a8>
 8007178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800717c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007180:	e03a      	b.n	80071f8 <_printf_i+0xa8>
 8007182:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007186:	2b15      	cmp	r3, #21
 8007188:	d8f6      	bhi.n	8007178 <_printf_i+0x28>
 800718a:	a101      	add	r1, pc, #4	; (adr r1, 8007190 <_printf_i+0x40>)
 800718c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007190:	080071e9 	.word	0x080071e9
 8007194:	080071fd 	.word	0x080071fd
 8007198:	08007179 	.word	0x08007179
 800719c:	08007179 	.word	0x08007179
 80071a0:	08007179 	.word	0x08007179
 80071a4:	08007179 	.word	0x08007179
 80071a8:	080071fd 	.word	0x080071fd
 80071ac:	08007179 	.word	0x08007179
 80071b0:	08007179 	.word	0x08007179
 80071b4:	08007179 	.word	0x08007179
 80071b8:	08007179 	.word	0x08007179
 80071bc:	08007301 	.word	0x08007301
 80071c0:	08007229 	.word	0x08007229
 80071c4:	080072bb 	.word	0x080072bb
 80071c8:	08007179 	.word	0x08007179
 80071cc:	08007179 	.word	0x08007179
 80071d0:	08007323 	.word	0x08007323
 80071d4:	08007179 	.word	0x08007179
 80071d8:	08007229 	.word	0x08007229
 80071dc:	08007179 	.word	0x08007179
 80071e0:	08007179 	.word	0x08007179
 80071e4:	080072c3 	.word	0x080072c3
 80071e8:	682b      	ldr	r3, [r5, #0]
 80071ea:	1d1a      	adds	r2, r3, #4
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	602a      	str	r2, [r5, #0]
 80071f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071f8:	2301      	movs	r3, #1
 80071fa:	e09f      	b.n	800733c <_printf_i+0x1ec>
 80071fc:	6820      	ldr	r0, [r4, #0]
 80071fe:	682b      	ldr	r3, [r5, #0]
 8007200:	0607      	lsls	r7, r0, #24
 8007202:	f103 0104 	add.w	r1, r3, #4
 8007206:	6029      	str	r1, [r5, #0]
 8007208:	d501      	bpl.n	800720e <_printf_i+0xbe>
 800720a:	681e      	ldr	r6, [r3, #0]
 800720c:	e003      	b.n	8007216 <_printf_i+0xc6>
 800720e:	0646      	lsls	r6, r0, #25
 8007210:	d5fb      	bpl.n	800720a <_printf_i+0xba>
 8007212:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007216:	2e00      	cmp	r6, #0
 8007218:	da03      	bge.n	8007222 <_printf_i+0xd2>
 800721a:	232d      	movs	r3, #45	; 0x2d
 800721c:	4276      	negs	r6, r6
 800721e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007222:	485a      	ldr	r0, [pc, #360]	; (800738c <_printf_i+0x23c>)
 8007224:	230a      	movs	r3, #10
 8007226:	e012      	b.n	800724e <_printf_i+0xfe>
 8007228:	682b      	ldr	r3, [r5, #0]
 800722a:	6820      	ldr	r0, [r4, #0]
 800722c:	1d19      	adds	r1, r3, #4
 800722e:	6029      	str	r1, [r5, #0]
 8007230:	0605      	lsls	r5, r0, #24
 8007232:	d501      	bpl.n	8007238 <_printf_i+0xe8>
 8007234:	681e      	ldr	r6, [r3, #0]
 8007236:	e002      	b.n	800723e <_printf_i+0xee>
 8007238:	0641      	lsls	r1, r0, #25
 800723a:	d5fb      	bpl.n	8007234 <_printf_i+0xe4>
 800723c:	881e      	ldrh	r6, [r3, #0]
 800723e:	4853      	ldr	r0, [pc, #332]	; (800738c <_printf_i+0x23c>)
 8007240:	2f6f      	cmp	r7, #111	; 0x6f
 8007242:	bf0c      	ite	eq
 8007244:	2308      	moveq	r3, #8
 8007246:	230a      	movne	r3, #10
 8007248:	2100      	movs	r1, #0
 800724a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800724e:	6865      	ldr	r5, [r4, #4]
 8007250:	60a5      	str	r5, [r4, #8]
 8007252:	2d00      	cmp	r5, #0
 8007254:	bfa2      	ittt	ge
 8007256:	6821      	ldrge	r1, [r4, #0]
 8007258:	f021 0104 	bicge.w	r1, r1, #4
 800725c:	6021      	strge	r1, [r4, #0]
 800725e:	b90e      	cbnz	r6, 8007264 <_printf_i+0x114>
 8007260:	2d00      	cmp	r5, #0
 8007262:	d04b      	beq.n	80072fc <_printf_i+0x1ac>
 8007264:	4615      	mov	r5, r2
 8007266:	fbb6 f1f3 	udiv	r1, r6, r3
 800726a:	fb03 6711 	mls	r7, r3, r1, r6
 800726e:	5dc7      	ldrb	r7, [r0, r7]
 8007270:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007274:	4637      	mov	r7, r6
 8007276:	42bb      	cmp	r3, r7
 8007278:	460e      	mov	r6, r1
 800727a:	d9f4      	bls.n	8007266 <_printf_i+0x116>
 800727c:	2b08      	cmp	r3, #8
 800727e:	d10b      	bne.n	8007298 <_printf_i+0x148>
 8007280:	6823      	ldr	r3, [r4, #0]
 8007282:	07de      	lsls	r6, r3, #31
 8007284:	d508      	bpl.n	8007298 <_printf_i+0x148>
 8007286:	6923      	ldr	r3, [r4, #16]
 8007288:	6861      	ldr	r1, [r4, #4]
 800728a:	4299      	cmp	r1, r3
 800728c:	bfde      	ittt	le
 800728e:	2330      	movle	r3, #48	; 0x30
 8007290:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007294:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007298:	1b52      	subs	r2, r2, r5
 800729a:	6122      	str	r2, [r4, #16]
 800729c:	f8cd a000 	str.w	sl, [sp]
 80072a0:	464b      	mov	r3, r9
 80072a2:	aa03      	add	r2, sp, #12
 80072a4:	4621      	mov	r1, r4
 80072a6:	4640      	mov	r0, r8
 80072a8:	f7ff fee4 	bl	8007074 <_printf_common>
 80072ac:	3001      	adds	r0, #1
 80072ae:	d14a      	bne.n	8007346 <_printf_i+0x1f6>
 80072b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072b4:	b004      	add	sp, #16
 80072b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	f043 0320 	orr.w	r3, r3, #32
 80072c0:	6023      	str	r3, [r4, #0]
 80072c2:	4833      	ldr	r0, [pc, #204]	; (8007390 <_printf_i+0x240>)
 80072c4:	2778      	movs	r7, #120	; 0x78
 80072c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	6829      	ldr	r1, [r5, #0]
 80072ce:	061f      	lsls	r7, r3, #24
 80072d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80072d4:	d402      	bmi.n	80072dc <_printf_i+0x18c>
 80072d6:	065f      	lsls	r7, r3, #25
 80072d8:	bf48      	it	mi
 80072da:	b2b6      	uxthmi	r6, r6
 80072dc:	07df      	lsls	r7, r3, #31
 80072de:	bf48      	it	mi
 80072e0:	f043 0320 	orrmi.w	r3, r3, #32
 80072e4:	6029      	str	r1, [r5, #0]
 80072e6:	bf48      	it	mi
 80072e8:	6023      	strmi	r3, [r4, #0]
 80072ea:	b91e      	cbnz	r6, 80072f4 <_printf_i+0x1a4>
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	f023 0320 	bic.w	r3, r3, #32
 80072f2:	6023      	str	r3, [r4, #0]
 80072f4:	2310      	movs	r3, #16
 80072f6:	e7a7      	b.n	8007248 <_printf_i+0xf8>
 80072f8:	4824      	ldr	r0, [pc, #144]	; (800738c <_printf_i+0x23c>)
 80072fa:	e7e4      	b.n	80072c6 <_printf_i+0x176>
 80072fc:	4615      	mov	r5, r2
 80072fe:	e7bd      	b.n	800727c <_printf_i+0x12c>
 8007300:	682b      	ldr	r3, [r5, #0]
 8007302:	6826      	ldr	r6, [r4, #0]
 8007304:	6961      	ldr	r1, [r4, #20]
 8007306:	1d18      	adds	r0, r3, #4
 8007308:	6028      	str	r0, [r5, #0]
 800730a:	0635      	lsls	r5, r6, #24
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	d501      	bpl.n	8007314 <_printf_i+0x1c4>
 8007310:	6019      	str	r1, [r3, #0]
 8007312:	e002      	b.n	800731a <_printf_i+0x1ca>
 8007314:	0670      	lsls	r0, r6, #25
 8007316:	d5fb      	bpl.n	8007310 <_printf_i+0x1c0>
 8007318:	8019      	strh	r1, [r3, #0]
 800731a:	2300      	movs	r3, #0
 800731c:	6123      	str	r3, [r4, #16]
 800731e:	4615      	mov	r5, r2
 8007320:	e7bc      	b.n	800729c <_printf_i+0x14c>
 8007322:	682b      	ldr	r3, [r5, #0]
 8007324:	1d1a      	adds	r2, r3, #4
 8007326:	602a      	str	r2, [r5, #0]
 8007328:	681d      	ldr	r5, [r3, #0]
 800732a:	6862      	ldr	r2, [r4, #4]
 800732c:	2100      	movs	r1, #0
 800732e:	4628      	mov	r0, r5
 8007330:	f7f8 ff4e 	bl	80001d0 <memchr>
 8007334:	b108      	cbz	r0, 800733a <_printf_i+0x1ea>
 8007336:	1b40      	subs	r0, r0, r5
 8007338:	6060      	str	r0, [r4, #4]
 800733a:	6863      	ldr	r3, [r4, #4]
 800733c:	6123      	str	r3, [r4, #16]
 800733e:	2300      	movs	r3, #0
 8007340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007344:	e7aa      	b.n	800729c <_printf_i+0x14c>
 8007346:	6923      	ldr	r3, [r4, #16]
 8007348:	462a      	mov	r2, r5
 800734a:	4649      	mov	r1, r9
 800734c:	4640      	mov	r0, r8
 800734e:	47d0      	blx	sl
 8007350:	3001      	adds	r0, #1
 8007352:	d0ad      	beq.n	80072b0 <_printf_i+0x160>
 8007354:	6823      	ldr	r3, [r4, #0]
 8007356:	079b      	lsls	r3, r3, #30
 8007358:	d413      	bmi.n	8007382 <_printf_i+0x232>
 800735a:	68e0      	ldr	r0, [r4, #12]
 800735c:	9b03      	ldr	r3, [sp, #12]
 800735e:	4298      	cmp	r0, r3
 8007360:	bfb8      	it	lt
 8007362:	4618      	movlt	r0, r3
 8007364:	e7a6      	b.n	80072b4 <_printf_i+0x164>
 8007366:	2301      	movs	r3, #1
 8007368:	4632      	mov	r2, r6
 800736a:	4649      	mov	r1, r9
 800736c:	4640      	mov	r0, r8
 800736e:	47d0      	blx	sl
 8007370:	3001      	adds	r0, #1
 8007372:	d09d      	beq.n	80072b0 <_printf_i+0x160>
 8007374:	3501      	adds	r5, #1
 8007376:	68e3      	ldr	r3, [r4, #12]
 8007378:	9903      	ldr	r1, [sp, #12]
 800737a:	1a5b      	subs	r3, r3, r1
 800737c:	42ab      	cmp	r3, r5
 800737e:	dcf2      	bgt.n	8007366 <_printf_i+0x216>
 8007380:	e7eb      	b.n	800735a <_printf_i+0x20a>
 8007382:	2500      	movs	r5, #0
 8007384:	f104 0619 	add.w	r6, r4, #25
 8007388:	e7f5      	b.n	8007376 <_printf_i+0x226>
 800738a:	bf00      	nop
 800738c:	0800a2ca 	.word	0x0800a2ca
 8007390:	0800a2db 	.word	0x0800a2db

08007394 <std>:
 8007394:	2300      	movs	r3, #0
 8007396:	b510      	push	{r4, lr}
 8007398:	4604      	mov	r4, r0
 800739a:	e9c0 3300 	strd	r3, r3, [r0]
 800739e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073a2:	6083      	str	r3, [r0, #8]
 80073a4:	8181      	strh	r1, [r0, #12]
 80073a6:	6643      	str	r3, [r0, #100]	; 0x64
 80073a8:	81c2      	strh	r2, [r0, #14]
 80073aa:	6183      	str	r3, [r0, #24]
 80073ac:	4619      	mov	r1, r3
 80073ae:	2208      	movs	r2, #8
 80073b0:	305c      	adds	r0, #92	; 0x5c
 80073b2:	f000 f902 	bl	80075ba <memset>
 80073b6:	4b05      	ldr	r3, [pc, #20]	; (80073cc <std+0x38>)
 80073b8:	6263      	str	r3, [r4, #36]	; 0x24
 80073ba:	4b05      	ldr	r3, [pc, #20]	; (80073d0 <std+0x3c>)
 80073bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80073be:	4b05      	ldr	r3, [pc, #20]	; (80073d4 <std+0x40>)
 80073c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073c2:	4b05      	ldr	r3, [pc, #20]	; (80073d8 <std+0x44>)
 80073c4:	6224      	str	r4, [r4, #32]
 80073c6:	6323      	str	r3, [r4, #48]	; 0x30
 80073c8:	bd10      	pop	{r4, pc}
 80073ca:	bf00      	nop
 80073cc:	08007535 	.word	0x08007535
 80073d0:	08007557 	.word	0x08007557
 80073d4:	0800758f 	.word	0x0800758f
 80073d8:	080075b3 	.word	0x080075b3

080073dc <stdio_exit_handler>:
 80073dc:	4a02      	ldr	r2, [pc, #8]	; (80073e8 <stdio_exit_handler+0xc>)
 80073de:	4903      	ldr	r1, [pc, #12]	; (80073ec <stdio_exit_handler+0x10>)
 80073e0:	4803      	ldr	r0, [pc, #12]	; (80073f0 <stdio_exit_handler+0x14>)
 80073e2:	f000 b869 	b.w	80074b8 <_fwalk_sglue>
 80073e6:	bf00      	nop
 80073e8:	20000014 	.word	0x20000014
 80073ec:	08009081 	.word	0x08009081
 80073f0:	20000020 	.word	0x20000020

080073f4 <cleanup_stdio>:
 80073f4:	6841      	ldr	r1, [r0, #4]
 80073f6:	4b0c      	ldr	r3, [pc, #48]	; (8007428 <cleanup_stdio+0x34>)
 80073f8:	4299      	cmp	r1, r3
 80073fa:	b510      	push	{r4, lr}
 80073fc:	4604      	mov	r4, r0
 80073fe:	d001      	beq.n	8007404 <cleanup_stdio+0x10>
 8007400:	f001 fe3e 	bl	8009080 <_fflush_r>
 8007404:	68a1      	ldr	r1, [r4, #8]
 8007406:	4b09      	ldr	r3, [pc, #36]	; (800742c <cleanup_stdio+0x38>)
 8007408:	4299      	cmp	r1, r3
 800740a:	d002      	beq.n	8007412 <cleanup_stdio+0x1e>
 800740c:	4620      	mov	r0, r4
 800740e:	f001 fe37 	bl	8009080 <_fflush_r>
 8007412:	68e1      	ldr	r1, [r4, #12]
 8007414:	4b06      	ldr	r3, [pc, #24]	; (8007430 <cleanup_stdio+0x3c>)
 8007416:	4299      	cmp	r1, r3
 8007418:	d004      	beq.n	8007424 <cleanup_stdio+0x30>
 800741a:	4620      	mov	r0, r4
 800741c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007420:	f001 be2e 	b.w	8009080 <_fflush_r>
 8007424:	bd10      	pop	{r4, pc}
 8007426:	bf00      	nop
 8007428:	200003bc 	.word	0x200003bc
 800742c:	20000424 	.word	0x20000424
 8007430:	2000048c 	.word	0x2000048c

08007434 <global_stdio_init.part.0>:
 8007434:	b510      	push	{r4, lr}
 8007436:	4b0b      	ldr	r3, [pc, #44]	; (8007464 <global_stdio_init.part.0+0x30>)
 8007438:	4c0b      	ldr	r4, [pc, #44]	; (8007468 <global_stdio_init.part.0+0x34>)
 800743a:	4a0c      	ldr	r2, [pc, #48]	; (800746c <global_stdio_init.part.0+0x38>)
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	4620      	mov	r0, r4
 8007440:	2200      	movs	r2, #0
 8007442:	2104      	movs	r1, #4
 8007444:	f7ff ffa6 	bl	8007394 <std>
 8007448:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800744c:	2201      	movs	r2, #1
 800744e:	2109      	movs	r1, #9
 8007450:	f7ff ffa0 	bl	8007394 <std>
 8007454:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007458:	2202      	movs	r2, #2
 800745a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800745e:	2112      	movs	r1, #18
 8007460:	f7ff bf98 	b.w	8007394 <std>
 8007464:	200004f4 	.word	0x200004f4
 8007468:	200003bc 	.word	0x200003bc
 800746c:	080073dd 	.word	0x080073dd

08007470 <__sfp_lock_acquire>:
 8007470:	4801      	ldr	r0, [pc, #4]	; (8007478 <__sfp_lock_acquire+0x8>)
 8007472:	f000 b91f 	b.w	80076b4 <__retarget_lock_acquire_recursive>
 8007476:	bf00      	nop
 8007478:	200004fd 	.word	0x200004fd

0800747c <__sfp_lock_release>:
 800747c:	4801      	ldr	r0, [pc, #4]	; (8007484 <__sfp_lock_release+0x8>)
 800747e:	f000 b91a 	b.w	80076b6 <__retarget_lock_release_recursive>
 8007482:	bf00      	nop
 8007484:	200004fd 	.word	0x200004fd

08007488 <__sinit>:
 8007488:	b510      	push	{r4, lr}
 800748a:	4604      	mov	r4, r0
 800748c:	f7ff fff0 	bl	8007470 <__sfp_lock_acquire>
 8007490:	6a23      	ldr	r3, [r4, #32]
 8007492:	b11b      	cbz	r3, 800749c <__sinit+0x14>
 8007494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007498:	f7ff bff0 	b.w	800747c <__sfp_lock_release>
 800749c:	4b04      	ldr	r3, [pc, #16]	; (80074b0 <__sinit+0x28>)
 800749e:	6223      	str	r3, [r4, #32]
 80074a0:	4b04      	ldr	r3, [pc, #16]	; (80074b4 <__sinit+0x2c>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1f5      	bne.n	8007494 <__sinit+0xc>
 80074a8:	f7ff ffc4 	bl	8007434 <global_stdio_init.part.0>
 80074ac:	e7f2      	b.n	8007494 <__sinit+0xc>
 80074ae:	bf00      	nop
 80074b0:	080073f5 	.word	0x080073f5
 80074b4:	200004f4 	.word	0x200004f4

080074b8 <_fwalk_sglue>:
 80074b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074bc:	4607      	mov	r7, r0
 80074be:	4688      	mov	r8, r1
 80074c0:	4614      	mov	r4, r2
 80074c2:	2600      	movs	r6, #0
 80074c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074c8:	f1b9 0901 	subs.w	r9, r9, #1
 80074cc:	d505      	bpl.n	80074da <_fwalk_sglue+0x22>
 80074ce:	6824      	ldr	r4, [r4, #0]
 80074d0:	2c00      	cmp	r4, #0
 80074d2:	d1f7      	bne.n	80074c4 <_fwalk_sglue+0xc>
 80074d4:	4630      	mov	r0, r6
 80074d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074da:	89ab      	ldrh	r3, [r5, #12]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d907      	bls.n	80074f0 <_fwalk_sglue+0x38>
 80074e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074e4:	3301      	adds	r3, #1
 80074e6:	d003      	beq.n	80074f0 <_fwalk_sglue+0x38>
 80074e8:	4629      	mov	r1, r5
 80074ea:	4638      	mov	r0, r7
 80074ec:	47c0      	blx	r8
 80074ee:	4306      	orrs	r6, r0
 80074f0:	3568      	adds	r5, #104	; 0x68
 80074f2:	e7e9      	b.n	80074c8 <_fwalk_sglue+0x10>

080074f4 <siprintf>:
 80074f4:	b40e      	push	{r1, r2, r3}
 80074f6:	b500      	push	{lr}
 80074f8:	b09c      	sub	sp, #112	; 0x70
 80074fa:	ab1d      	add	r3, sp, #116	; 0x74
 80074fc:	9002      	str	r0, [sp, #8]
 80074fe:	9006      	str	r0, [sp, #24]
 8007500:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007504:	4809      	ldr	r0, [pc, #36]	; (800752c <siprintf+0x38>)
 8007506:	9107      	str	r1, [sp, #28]
 8007508:	9104      	str	r1, [sp, #16]
 800750a:	4909      	ldr	r1, [pc, #36]	; (8007530 <siprintf+0x3c>)
 800750c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007510:	9105      	str	r1, [sp, #20]
 8007512:	6800      	ldr	r0, [r0, #0]
 8007514:	9301      	str	r3, [sp, #4]
 8007516:	a902      	add	r1, sp, #8
 8007518:	f001 fc2e 	bl	8008d78 <_svfiprintf_r>
 800751c:	9b02      	ldr	r3, [sp, #8]
 800751e:	2200      	movs	r2, #0
 8007520:	701a      	strb	r2, [r3, #0]
 8007522:	b01c      	add	sp, #112	; 0x70
 8007524:	f85d eb04 	ldr.w	lr, [sp], #4
 8007528:	b003      	add	sp, #12
 800752a:	4770      	bx	lr
 800752c:	2000006c 	.word	0x2000006c
 8007530:	ffff0208 	.word	0xffff0208

08007534 <__sread>:
 8007534:	b510      	push	{r4, lr}
 8007536:	460c      	mov	r4, r1
 8007538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800753c:	f000 f86c 	bl	8007618 <_read_r>
 8007540:	2800      	cmp	r0, #0
 8007542:	bfab      	itete	ge
 8007544:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007546:	89a3      	ldrhlt	r3, [r4, #12]
 8007548:	181b      	addge	r3, r3, r0
 800754a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800754e:	bfac      	ite	ge
 8007550:	6563      	strge	r3, [r4, #84]	; 0x54
 8007552:	81a3      	strhlt	r3, [r4, #12]
 8007554:	bd10      	pop	{r4, pc}

08007556 <__swrite>:
 8007556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800755a:	461f      	mov	r7, r3
 800755c:	898b      	ldrh	r3, [r1, #12]
 800755e:	05db      	lsls	r3, r3, #23
 8007560:	4605      	mov	r5, r0
 8007562:	460c      	mov	r4, r1
 8007564:	4616      	mov	r6, r2
 8007566:	d505      	bpl.n	8007574 <__swrite+0x1e>
 8007568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800756c:	2302      	movs	r3, #2
 800756e:	2200      	movs	r2, #0
 8007570:	f000 f840 	bl	80075f4 <_lseek_r>
 8007574:	89a3      	ldrh	r3, [r4, #12]
 8007576:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800757a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800757e:	81a3      	strh	r3, [r4, #12]
 8007580:	4632      	mov	r2, r6
 8007582:	463b      	mov	r3, r7
 8007584:	4628      	mov	r0, r5
 8007586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800758a:	f000 b857 	b.w	800763c <_write_r>

0800758e <__sseek>:
 800758e:	b510      	push	{r4, lr}
 8007590:	460c      	mov	r4, r1
 8007592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007596:	f000 f82d 	bl	80075f4 <_lseek_r>
 800759a:	1c43      	adds	r3, r0, #1
 800759c:	89a3      	ldrh	r3, [r4, #12]
 800759e:	bf15      	itete	ne
 80075a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80075a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80075a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80075aa:	81a3      	strheq	r3, [r4, #12]
 80075ac:	bf18      	it	ne
 80075ae:	81a3      	strhne	r3, [r4, #12]
 80075b0:	bd10      	pop	{r4, pc}

080075b2 <__sclose>:
 80075b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075b6:	f000 b80d 	b.w	80075d4 <_close_r>

080075ba <memset>:
 80075ba:	4402      	add	r2, r0
 80075bc:	4603      	mov	r3, r0
 80075be:	4293      	cmp	r3, r2
 80075c0:	d100      	bne.n	80075c4 <memset+0xa>
 80075c2:	4770      	bx	lr
 80075c4:	f803 1b01 	strb.w	r1, [r3], #1
 80075c8:	e7f9      	b.n	80075be <memset+0x4>
	...

080075cc <_localeconv_r>:
 80075cc:	4800      	ldr	r0, [pc, #0]	; (80075d0 <_localeconv_r+0x4>)
 80075ce:	4770      	bx	lr
 80075d0:	20000160 	.word	0x20000160

080075d4 <_close_r>:
 80075d4:	b538      	push	{r3, r4, r5, lr}
 80075d6:	4d06      	ldr	r5, [pc, #24]	; (80075f0 <_close_r+0x1c>)
 80075d8:	2300      	movs	r3, #0
 80075da:	4604      	mov	r4, r0
 80075dc:	4608      	mov	r0, r1
 80075de:	602b      	str	r3, [r5, #0]
 80075e0:	f7fb fca7 	bl	8002f32 <_close>
 80075e4:	1c43      	adds	r3, r0, #1
 80075e6:	d102      	bne.n	80075ee <_close_r+0x1a>
 80075e8:	682b      	ldr	r3, [r5, #0]
 80075ea:	b103      	cbz	r3, 80075ee <_close_r+0x1a>
 80075ec:	6023      	str	r3, [r4, #0]
 80075ee:	bd38      	pop	{r3, r4, r5, pc}
 80075f0:	200004f8 	.word	0x200004f8

080075f4 <_lseek_r>:
 80075f4:	b538      	push	{r3, r4, r5, lr}
 80075f6:	4d07      	ldr	r5, [pc, #28]	; (8007614 <_lseek_r+0x20>)
 80075f8:	4604      	mov	r4, r0
 80075fa:	4608      	mov	r0, r1
 80075fc:	4611      	mov	r1, r2
 80075fe:	2200      	movs	r2, #0
 8007600:	602a      	str	r2, [r5, #0]
 8007602:	461a      	mov	r2, r3
 8007604:	f7fb fcbc 	bl	8002f80 <_lseek>
 8007608:	1c43      	adds	r3, r0, #1
 800760a:	d102      	bne.n	8007612 <_lseek_r+0x1e>
 800760c:	682b      	ldr	r3, [r5, #0]
 800760e:	b103      	cbz	r3, 8007612 <_lseek_r+0x1e>
 8007610:	6023      	str	r3, [r4, #0]
 8007612:	bd38      	pop	{r3, r4, r5, pc}
 8007614:	200004f8 	.word	0x200004f8

08007618 <_read_r>:
 8007618:	b538      	push	{r3, r4, r5, lr}
 800761a:	4d07      	ldr	r5, [pc, #28]	; (8007638 <_read_r+0x20>)
 800761c:	4604      	mov	r4, r0
 800761e:	4608      	mov	r0, r1
 8007620:	4611      	mov	r1, r2
 8007622:	2200      	movs	r2, #0
 8007624:	602a      	str	r2, [r5, #0]
 8007626:	461a      	mov	r2, r3
 8007628:	f7fb fc4a 	bl	8002ec0 <_read>
 800762c:	1c43      	adds	r3, r0, #1
 800762e:	d102      	bne.n	8007636 <_read_r+0x1e>
 8007630:	682b      	ldr	r3, [r5, #0]
 8007632:	b103      	cbz	r3, 8007636 <_read_r+0x1e>
 8007634:	6023      	str	r3, [r4, #0]
 8007636:	bd38      	pop	{r3, r4, r5, pc}
 8007638:	200004f8 	.word	0x200004f8

0800763c <_write_r>:
 800763c:	b538      	push	{r3, r4, r5, lr}
 800763e:	4d07      	ldr	r5, [pc, #28]	; (800765c <_write_r+0x20>)
 8007640:	4604      	mov	r4, r0
 8007642:	4608      	mov	r0, r1
 8007644:	4611      	mov	r1, r2
 8007646:	2200      	movs	r2, #0
 8007648:	602a      	str	r2, [r5, #0]
 800764a:	461a      	mov	r2, r3
 800764c:	f7fb fc55 	bl	8002efa <_write>
 8007650:	1c43      	adds	r3, r0, #1
 8007652:	d102      	bne.n	800765a <_write_r+0x1e>
 8007654:	682b      	ldr	r3, [r5, #0]
 8007656:	b103      	cbz	r3, 800765a <_write_r+0x1e>
 8007658:	6023      	str	r3, [r4, #0]
 800765a:	bd38      	pop	{r3, r4, r5, pc}
 800765c:	200004f8 	.word	0x200004f8

08007660 <__errno>:
 8007660:	4b01      	ldr	r3, [pc, #4]	; (8007668 <__errno+0x8>)
 8007662:	6818      	ldr	r0, [r3, #0]
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	2000006c 	.word	0x2000006c

0800766c <__libc_init_array>:
 800766c:	b570      	push	{r4, r5, r6, lr}
 800766e:	4d0d      	ldr	r5, [pc, #52]	; (80076a4 <__libc_init_array+0x38>)
 8007670:	4c0d      	ldr	r4, [pc, #52]	; (80076a8 <__libc_init_array+0x3c>)
 8007672:	1b64      	subs	r4, r4, r5
 8007674:	10a4      	asrs	r4, r4, #2
 8007676:	2600      	movs	r6, #0
 8007678:	42a6      	cmp	r6, r4
 800767a:	d109      	bne.n	8007690 <__libc_init_array+0x24>
 800767c:	4d0b      	ldr	r5, [pc, #44]	; (80076ac <__libc_init_array+0x40>)
 800767e:	4c0c      	ldr	r4, [pc, #48]	; (80076b0 <__libc_init_array+0x44>)
 8007680:	f002 fdea 	bl	800a258 <_init>
 8007684:	1b64      	subs	r4, r4, r5
 8007686:	10a4      	asrs	r4, r4, #2
 8007688:	2600      	movs	r6, #0
 800768a:	42a6      	cmp	r6, r4
 800768c:	d105      	bne.n	800769a <__libc_init_array+0x2e>
 800768e:	bd70      	pop	{r4, r5, r6, pc}
 8007690:	f855 3b04 	ldr.w	r3, [r5], #4
 8007694:	4798      	blx	r3
 8007696:	3601      	adds	r6, #1
 8007698:	e7ee      	b.n	8007678 <__libc_init_array+0xc>
 800769a:	f855 3b04 	ldr.w	r3, [r5], #4
 800769e:	4798      	blx	r3
 80076a0:	3601      	adds	r6, #1
 80076a2:	e7f2      	b.n	800768a <__libc_init_array+0x1e>
 80076a4:	0800a684 	.word	0x0800a684
 80076a8:	0800a684 	.word	0x0800a684
 80076ac:	0800a684 	.word	0x0800a684
 80076b0:	0800a688 	.word	0x0800a688

080076b4 <__retarget_lock_acquire_recursive>:
 80076b4:	4770      	bx	lr

080076b6 <__retarget_lock_release_recursive>:
 80076b6:	4770      	bx	lr

080076b8 <memcpy>:
 80076b8:	440a      	add	r2, r1
 80076ba:	4291      	cmp	r1, r2
 80076bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80076c0:	d100      	bne.n	80076c4 <memcpy+0xc>
 80076c2:	4770      	bx	lr
 80076c4:	b510      	push	{r4, lr}
 80076c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076ce:	4291      	cmp	r1, r2
 80076d0:	d1f9      	bne.n	80076c6 <memcpy+0xe>
 80076d2:	bd10      	pop	{r4, pc}

080076d4 <quorem>:
 80076d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d8:	6903      	ldr	r3, [r0, #16]
 80076da:	690c      	ldr	r4, [r1, #16]
 80076dc:	42a3      	cmp	r3, r4
 80076de:	4607      	mov	r7, r0
 80076e0:	db7e      	blt.n	80077e0 <quorem+0x10c>
 80076e2:	3c01      	subs	r4, #1
 80076e4:	f101 0814 	add.w	r8, r1, #20
 80076e8:	f100 0514 	add.w	r5, r0, #20
 80076ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076f0:	9301      	str	r3, [sp, #4]
 80076f2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80076f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076fa:	3301      	adds	r3, #1
 80076fc:	429a      	cmp	r2, r3
 80076fe:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007702:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007706:	fbb2 f6f3 	udiv	r6, r2, r3
 800770a:	d331      	bcc.n	8007770 <quorem+0x9c>
 800770c:	f04f 0e00 	mov.w	lr, #0
 8007710:	4640      	mov	r0, r8
 8007712:	46ac      	mov	ip, r5
 8007714:	46f2      	mov	sl, lr
 8007716:	f850 2b04 	ldr.w	r2, [r0], #4
 800771a:	b293      	uxth	r3, r2
 800771c:	fb06 e303 	mla	r3, r6, r3, lr
 8007720:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007724:	0c1a      	lsrs	r2, r3, #16
 8007726:	b29b      	uxth	r3, r3
 8007728:	ebaa 0303 	sub.w	r3, sl, r3
 800772c:	f8dc a000 	ldr.w	sl, [ip]
 8007730:	fa13 f38a 	uxtah	r3, r3, sl
 8007734:	fb06 220e 	mla	r2, r6, lr, r2
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	9b00      	ldr	r3, [sp, #0]
 800773c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007740:	b292      	uxth	r2, r2
 8007742:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007746:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800774a:	f8bd 3000 	ldrh.w	r3, [sp]
 800774e:	4581      	cmp	r9, r0
 8007750:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007754:	f84c 3b04 	str.w	r3, [ip], #4
 8007758:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800775c:	d2db      	bcs.n	8007716 <quorem+0x42>
 800775e:	f855 300b 	ldr.w	r3, [r5, fp]
 8007762:	b92b      	cbnz	r3, 8007770 <quorem+0x9c>
 8007764:	9b01      	ldr	r3, [sp, #4]
 8007766:	3b04      	subs	r3, #4
 8007768:	429d      	cmp	r5, r3
 800776a:	461a      	mov	r2, r3
 800776c:	d32c      	bcc.n	80077c8 <quorem+0xf4>
 800776e:	613c      	str	r4, [r7, #16]
 8007770:	4638      	mov	r0, r7
 8007772:	f001 f9a7 	bl	8008ac4 <__mcmp>
 8007776:	2800      	cmp	r0, #0
 8007778:	db22      	blt.n	80077c0 <quorem+0xec>
 800777a:	3601      	adds	r6, #1
 800777c:	4629      	mov	r1, r5
 800777e:	2000      	movs	r0, #0
 8007780:	f858 2b04 	ldr.w	r2, [r8], #4
 8007784:	f8d1 c000 	ldr.w	ip, [r1]
 8007788:	b293      	uxth	r3, r2
 800778a:	1ac3      	subs	r3, r0, r3
 800778c:	0c12      	lsrs	r2, r2, #16
 800778e:	fa13 f38c 	uxtah	r3, r3, ip
 8007792:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007796:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800779a:	b29b      	uxth	r3, r3
 800779c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077a0:	45c1      	cmp	r9, r8
 80077a2:	f841 3b04 	str.w	r3, [r1], #4
 80077a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80077aa:	d2e9      	bcs.n	8007780 <quorem+0xac>
 80077ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077b4:	b922      	cbnz	r2, 80077c0 <quorem+0xec>
 80077b6:	3b04      	subs	r3, #4
 80077b8:	429d      	cmp	r5, r3
 80077ba:	461a      	mov	r2, r3
 80077bc:	d30a      	bcc.n	80077d4 <quorem+0x100>
 80077be:	613c      	str	r4, [r7, #16]
 80077c0:	4630      	mov	r0, r6
 80077c2:	b003      	add	sp, #12
 80077c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077c8:	6812      	ldr	r2, [r2, #0]
 80077ca:	3b04      	subs	r3, #4
 80077cc:	2a00      	cmp	r2, #0
 80077ce:	d1ce      	bne.n	800776e <quorem+0x9a>
 80077d0:	3c01      	subs	r4, #1
 80077d2:	e7c9      	b.n	8007768 <quorem+0x94>
 80077d4:	6812      	ldr	r2, [r2, #0]
 80077d6:	3b04      	subs	r3, #4
 80077d8:	2a00      	cmp	r2, #0
 80077da:	d1f0      	bne.n	80077be <quorem+0xea>
 80077dc:	3c01      	subs	r4, #1
 80077de:	e7eb      	b.n	80077b8 <quorem+0xe4>
 80077e0:	2000      	movs	r0, #0
 80077e2:	e7ee      	b.n	80077c2 <quorem+0xee>
 80077e4:	0000      	movs	r0, r0
	...

080077e8 <_dtoa_r>:
 80077e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ec:	ed2d 8b04 	vpush	{d8-d9}
 80077f0:	69c5      	ldr	r5, [r0, #28]
 80077f2:	b093      	sub	sp, #76	; 0x4c
 80077f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80077f8:	ec57 6b10 	vmov	r6, r7, d0
 80077fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007800:	9107      	str	r1, [sp, #28]
 8007802:	4604      	mov	r4, r0
 8007804:	920a      	str	r2, [sp, #40]	; 0x28
 8007806:	930d      	str	r3, [sp, #52]	; 0x34
 8007808:	b975      	cbnz	r5, 8007828 <_dtoa_r+0x40>
 800780a:	2010      	movs	r0, #16
 800780c:	f000 fe2a 	bl	8008464 <malloc>
 8007810:	4602      	mov	r2, r0
 8007812:	61e0      	str	r0, [r4, #28]
 8007814:	b920      	cbnz	r0, 8007820 <_dtoa_r+0x38>
 8007816:	4bae      	ldr	r3, [pc, #696]	; (8007ad0 <_dtoa_r+0x2e8>)
 8007818:	21ef      	movs	r1, #239	; 0xef
 800781a:	48ae      	ldr	r0, [pc, #696]	; (8007ad4 <_dtoa_r+0x2ec>)
 800781c:	f001 fc82 	bl	8009124 <__assert_func>
 8007820:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007824:	6005      	str	r5, [r0, #0]
 8007826:	60c5      	str	r5, [r0, #12]
 8007828:	69e3      	ldr	r3, [r4, #28]
 800782a:	6819      	ldr	r1, [r3, #0]
 800782c:	b151      	cbz	r1, 8007844 <_dtoa_r+0x5c>
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	604a      	str	r2, [r1, #4]
 8007832:	2301      	movs	r3, #1
 8007834:	4093      	lsls	r3, r2
 8007836:	608b      	str	r3, [r1, #8]
 8007838:	4620      	mov	r0, r4
 800783a:	f000 ff07 	bl	800864c <_Bfree>
 800783e:	69e3      	ldr	r3, [r4, #28]
 8007840:	2200      	movs	r2, #0
 8007842:	601a      	str	r2, [r3, #0]
 8007844:	1e3b      	subs	r3, r7, #0
 8007846:	bfbb      	ittet	lt
 8007848:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800784c:	9303      	strlt	r3, [sp, #12]
 800784e:	2300      	movge	r3, #0
 8007850:	2201      	movlt	r2, #1
 8007852:	bfac      	ite	ge
 8007854:	f8c8 3000 	strge.w	r3, [r8]
 8007858:	f8c8 2000 	strlt.w	r2, [r8]
 800785c:	4b9e      	ldr	r3, [pc, #632]	; (8007ad8 <_dtoa_r+0x2f0>)
 800785e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007862:	ea33 0308 	bics.w	r3, r3, r8
 8007866:	d11b      	bne.n	80078a0 <_dtoa_r+0xb8>
 8007868:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800786a:	f242 730f 	movw	r3, #9999	; 0x270f
 800786e:	6013      	str	r3, [r2, #0]
 8007870:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007874:	4333      	orrs	r3, r6
 8007876:	f000 8593 	beq.w	80083a0 <_dtoa_r+0xbb8>
 800787a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800787c:	b963      	cbnz	r3, 8007898 <_dtoa_r+0xb0>
 800787e:	4b97      	ldr	r3, [pc, #604]	; (8007adc <_dtoa_r+0x2f4>)
 8007880:	e027      	b.n	80078d2 <_dtoa_r+0xea>
 8007882:	4b97      	ldr	r3, [pc, #604]	; (8007ae0 <_dtoa_r+0x2f8>)
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	3308      	adds	r3, #8
 8007888:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800788a:	6013      	str	r3, [r2, #0]
 800788c:	9800      	ldr	r0, [sp, #0]
 800788e:	b013      	add	sp, #76	; 0x4c
 8007890:	ecbd 8b04 	vpop	{d8-d9}
 8007894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007898:	4b90      	ldr	r3, [pc, #576]	; (8007adc <_dtoa_r+0x2f4>)
 800789a:	9300      	str	r3, [sp, #0]
 800789c:	3303      	adds	r3, #3
 800789e:	e7f3      	b.n	8007888 <_dtoa_r+0xa0>
 80078a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80078a4:	2200      	movs	r2, #0
 80078a6:	ec51 0b17 	vmov	r0, r1, d7
 80078aa:	eeb0 8a47 	vmov.f32	s16, s14
 80078ae:	eef0 8a67 	vmov.f32	s17, s15
 80078b2:	2300      	movs	r3, #0
 80078b4:	f7f9 f908 	bl	8000ac8 <__aeabi_dcmpeq>
 80078b8:	4681      	mov	r9, r0
 80078ba:	b160      	cbz	r0, 80078d6 <_dtoa_r+0xee>
 80078bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80078be:	2301      	movs	r3, #1
 80078c0:	6013      	str	r3, [r2, #0]
 80078c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 8568 	beq.w	800839a <_dtoa_r+0xbb2>
 80078ca:	4b86      	ldr	r3, [pc, #536]	; (8007ae4 <_dtoa_r+0x2fc>)
 80078cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80078ce:	6013      	str	r3, [r2, #0]
 80078d0:	3b01      	subs	r3, #1
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	e7da      	b.n	800788c <_dtoa_r+0xa4>
 80078d6:	aa10      	add	r2, sp, #64	; 0x40
 80078d8:	a911      	add	r1, sp, #68	; 0x44
 80078da:	4620      	mov	r0, r4
 80078dc:	eeb0 0a48 	vmov.f32	s0, s16
 80078e0:	eef0 0a68 	vmov.f32	s1, s17
 80078e4:	f001 f994 	bl	8008c10 <__d2b>
 80078e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80078ec:	4682      	mov	sl, r0
 80078ee:	2d00      	cmp	r5, #0
 80078f0:	d07f      	beq.n	80079f2 <_dtoa_r+0x20a>
 80078f2:	ee18 3a90 	vmov	r3, s17
 80078f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078fa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80078fe:	ec51 0b18 	vmov	r0, r1, d8
 8007902:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007906:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800790a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800790e:	4619      	mov	r1, r3
 8007910:	2200      	movs	r2, #0
 8007912:	4b75      	ldr	r3, [pc, #468]	; (8007ae8 <_dtoa_r+0x300>)
 8007914:	f7f8 fcb8 	bl	8000288 <__aeabi_dsub>
 8007918:	a367      	add	r3, pc, #412	; (adr r3, 8007ab8 <_dtoa_r+0x2d0>)
 800791a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791e:	f7f8 fe6b 	bl	80005f8 <__aeabi_dmul>
 8007922:	a367      	add	r3, pc, #412	; (adr r3, 8007ac0 <_dtoa_r+0x2d8>)
 8007924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007928:	f7f8 fcb0 	bl	800028c <__adddf3>
 800792c:	4606      	mov	r6, r0
 800792e:	4628      	mov	r0, r5
 8007930:	460f      	mov	r7, r1
 8007932:	f7f8 fdf7 	bl	8000524 <__aeabi_i2d>
 8007936:	a364      	add	r3, pc, #400	; (adr r3, 8007ac8 <_dtoa_r+0x2e0>)
 8007938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793c:	f7f8 fe5c 	bl	80005f8 <__aeabi_dmul>
 8007940:	4602      	mov	r2, r0
 8007942:	460b      	mov	r3, r1
 8007944:	4630      	mov	r0, r6
 8007946:	4639      	mov	r1, r7
 8007948:	f7f8 fca0 	bl	800028c <__adddf3>
 800794c:	4606      	mov	r6, r0
 800794e:	460f      	mov	r7, r1
 8007950:	f7f9 f902 	bl	8000b58 <__aeabi_d2iz>
 8007954:	2200      	movs	r2, #0
 8007956:	4683      	mov	fp, r0
 8007958:	2300      	movs	r3, #0
 800795a:	4630      	mov	r0, r6
 800795c:	4639      	mov	r1, r7
 800795e:	f7f9 f8bd 	bl	8000adc <__aeabi_dcmplt>
 8007962:	b148      	cbz	r0, 8007978 <_dtoa_r+0x190>
 8007964:	4658      	mov	r0, fp
 8007966:	f7f8 fddd 	bl	8000524 <__aeabi_i2d>
 800796a:	4632      	mov	r2, r6
 800796c:	463b      	mov	r3, r7
 800796e:	f7f9 f8ab 	bl	8000ac8 <__aeabi_dcmpeq>
 8007972:	b908      	cbnz	r0, 8007978 <_dtoa_r+0x190>
 8007974:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007978:	f1bb 0f16 	cmp.w	fp, #22
 800797c:	d857      	bhi.n	8007a2e <_dtoa_r+0x246>
 800797e:	4b5b      	ldr	r3, [pc, #364]	; (8007aec <_dtoa_r+0x304>)
 8007980:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007988:	ec51 0b18 	vmov	r0, r1, d8
 800798c:	f7f9 f8a6 	bl	8000adc <__aeabi_dcmplt>
 8007990:	2800      	cmp	r0, #0
 8007992:	d04e      	beq.n	8007a32 <_dtoa_r+0x24a>
 8007994:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007998:	2300      	movs	r3, #0
 800799a:	930c      	str	r3, [sp, #48]	; 0x30
 800799c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800799e:	1b5b      	subs	r3, r3, r5
 80079a0:	1e5a      	subs	r2, r3, #1
 80079a2:	bf45      	ittet	mi
 80079a4:	f1c3 0301 	rsbmi	r3, r3, #1
 80079a8:	9305      	strmi	r3, [sp, #20]
 80079aa:	2300      	movpl	r3, #0
 80079ac:	2300      	movmi	r3, #0
 80079ae:	9206      	str	r2, [sp, #24]
 80079b0:	bf54      	ite	pl
 80079b2:	9305      	strpl	r3, [sp, #20]
 80079b4:	9306      	strmi	r3, [sp, #24]
 80079b6:	f1bb 0f00 	cmp.w	fp, #0
 80079ba:	db3c      	blt.n	8007a36 <_dtoa_r+0x24e>
 80079bc:	9b06      	ldr	r3, [sp, #24]
 80079be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80079c2:	445b      	add	r3, fp
 80079c4:	9306      	str	r3, [sp, #24]
 80079c6:	2300      	movs	r3, #0
 80079c8:	9308      	str	r3, [sp, #32]
 80079ca:	9b07      	ldr	r3, [sp, #28]
 80079cc:	2b09      	cmp	r3, #9
 80079ce:	d868      	bhi.n	8007aa2 <_dtoa_r+0x2ba>
 80079d0:	2b05      	cmp	r3, #5
 80079d2:	bfc4      	itt	gt
 80079d4:	3b04      	subgt	r3, #4
 80079d6:	9307      	strgt	r3, [sp, #28]
 80079d8:	9b07      	ldr	r3, [sp, #28]
 80079da:	f1a3 0302 	sub.w	r3, r3, #2
 80079de:	bfcc      	ite	gt
 80079e0:	2500      	movgt	r5, #0
 80079e2:	2501      	movle	r5, #1
 80079e4:	2b03      	cmp	r3, #3
 80079e6:	f200 8085 	bhi.w	8007af4 <_dtoa_r+0x30c>
 80079ea:	e8df f003 	tbb	[pc, r3]
 80079ee:	3b2e      	.short	0x3b2e
 80079f0:	5839      	.short	0x5839
 80079f2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80079f6:	441d      	add	r5, r3
 80079f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80079fc:	2b20      	cmp	r3, #32
 80079fe:	bfc1      	itttt	gt
 8007a00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007a04:	fa08 f803 	lslgt.w	r8, r8, r3
 8007a08:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007a0c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007a10:	bfd6      	itet	le
 8007a12:	f1c3 0320 	rsble	r3, r3, #32
 8007a16:	ea48 0003 	orrgt.w	r0, r8, r3
 8007a1a:	fa06 f003 	lslle.w	r0, r6, r3
 8007a1e:	f7f8 fd71 	bl	8000504 <__aeabi_ui2d>
 8007a22:	2201      	movs	r2, #1
 8007a24:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007a28:	3d01      	subs	r5, #1
 8007a2a:	920e      	str	r2, [sp, #56]	; 0x38
 8007a2c:	e76f      	b.n	800790e <_dtoa_r+0x126>
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e7b3      	b.n	800799a <_dtoa_r+0x1b2>
 8007a32:	900c      	str	r0, [sp, #48]	; 0x30
 8007a34:	e7b2      	b.n	800799c <_dtoa_r+0x1b4>
 8007a36:	9b05      	ldr	r3, [sp, #20]
 8007a38:	eba3 030b 	sub.w	r3, r3, fp
 8007a3c:	9305      	str	r3, [sp, #20]
 8007a3e:	f1cb 0300 	rsb	r3, fp, #0
 8007a42:	9308      	str	r3, [sp, #32]
 8007a44:	2300      	movs	r3, #0
 8007a46:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a48:	e7bf      	b.n	80079ca <_dtoa_r+0x1e2>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	dc52      	bgt.n	8007afa <_dtoa_r+0x312>
 8007a54:	2301      	movs	r3, #1
 8007a56:	9301      	str	r3, [sp, #4]
 8007a58:	9304      	str	r3, [sp, #16]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	920a      	str	r2, [sp, #40]	; 0x28
 8007a5e:	e00b      	b.n	8007a78 <_dtoa_r+0x290>
 8007a60:	2301      	movs	r3, #1
 8007a62:	e7f3      	b.n	8007a4c <_dtoa_r+0x264>
 8007a64:	2300      	movs	r3, #0
 8007a66:	9309      	str	r3, [sp, #36]	; 0x24
 8007a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a6a:	445b      	add	r3, fp
 8007a6c:	9301      	str	r3, [sp, #4]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	9304      	str	r3, [sp, #16]
 8007a74:	bfb8      	it	lt
 8007a76:	2301      	movlt	r3, #1
 8007a78:	69e0      	ldr	r0, [r4, #28]
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	2204      	movs	r2, #4
 8007a7e:	f102 0614 	add.w	r6, r2, #20
 8007a82:	429e      	cmp	r6, r3
 8007a84:	d93d      	bls.n	8007b02 <_dtoa_r+0x31a>
 8007a86:	6041      	str	r1, [r0, #4]
 8007a88:	4620      	mov	r0, r4
 8007a8a:	f000 fd9f 	bl	80085cc <_Balloc>
 8007a8e:	9000      	str	r0, [sp, #0]
 8007a90:	2800      	cmp	r0, #0
 8007a92:	d139      	bne.n	8007b08 <_dtoa_r+0x320>
 8007a94:	4b16      	ldr	r3, [pc, #88]	; (8007af0 <_dtoa_r+0x308>)
 8007a96:	4602      	mov	r2, r0
 8007a98:	f240 11af 	movw	r1, #431	; 0x1af
 8007a9c:	e6bd      	b.n	800781a <_dtoa_r+0x32>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e7e1      	b.n	8007a66 <_dtoa_r+0x27e>
 8007aa2:	2501      	movs	r5, #1
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	9307      	str	r3, [sp, #28]
 8007aa8:	9509      	str	r5, [sp, #36]	; 0x24
 8007aaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007aae:	9301      	str	r3, [sp, #4]
 8007ab0:	9304      	str	r3, [sp, #16]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	2312      	movs	r3, #18
 8007ab6:	e7d1      	b.n	8007a5c <_dtoa_r+0x274>
 8007ab8:	636f4361 	.word	0x636f4361
 8007abc:	3fd287a7 	.word	0x3fd287a7
 8007ac0:	8b60c8b3 	.word	0x8b60c8b3
 8007ac4:	3fc68a28 	.word	0x3fc68a28
 8007ac8:	509f79fb 	.word	0x509f79fb
 8007acc:	3fd34413 	.word	0x3fd34413
 8007ad0:	0800a2f9 	.word	0x0800a2f9
 8007ad4:	0800a310 	.word	0x0800a310
 8007ad8:	7ff00000 	.word	0x7ff00000
 8007adc:	0800a2f5 	.word	0x0800a2f5
 8007ae0:	0800a2ec 	.word	0x0800a2ec
 8007ae4:	0800a2c9 	.word	0x0800a2c9
 8007ae8:	3ff80000 	.word	0x3ff80000
 8007aec:	0800a400 	.word	0x0800a400
 8007af0:	0800a368 	.word	0x0800a368
 8007af4:	2301      	movs	r3, #1
 8007af6:	9309      	str	r3, [sp, #36]	; 0x24
 8007af8:	e7d7      	b.n	8007aaa <_dtoa_r+0x2c2>
 8007afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007afc:	9301      	str	r3, [sp, #4]
 8007afe:	9304      	str	r3, [sp, #16]
 8007b00:	e7ba      	b.n	8007a78 <_dtoa_r+0x290>
 8007b02:	3101      	adds	r1, #1
 8007b04:	0052      	lsls	r2, r2, #1
 8007b06:	e7ba      	b.n	8007a7e <_dtoa_r+0x296>
 8007b08:	69e3      	ldr	r3, [r4, #28]
 8007b0a:	9a00      	ldr	r2, [sp, #0]
 8007b0c:	601a      	str	r2, [r3, #0]
 8007b0e:	9b04      	ldr	r3, [sp, #16]
 8007b10:	2b0e      	cmp	r3, #14
 8007b12:	f200 80a8 	bhi.w	8007c66 <_dtoa_r+0x47e>
 8007b16:	2d00      	cmp	r5, #0
 8007b18:	f000 80a5 	beq.w	8007c66 <_dtoa_r+0x47e>
 8007b1c:	f1bb 0f00 	cmp.w	fp, #0
 8007b20:	dd38      	ble.n	8007b94 <_dtoa_r+0x3ac>
 8007b22:	4bc0      	ldr	r3, [pc, #768]	; (8007e24 <_dtoa_r+0x63c>)
 8007b24:	f00b 020f 	and.w	r2, fp, #15
 8007b28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b2c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007b30:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007b34:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007b38:	d019      	beq.n	8007b6e <_dtoa_r+0x386>
 8007b3a:	4bbb      	ldr	r3, [pc, #748]	; (8007e28 <_dtoa_r+0x640>)
 8007b3c:	ec51 0b18 	vmov	r0, r1, d8
 8007b40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b44:	f7f8 fe82 	bl	800084c <__aeabi_ddiv>
 8007b48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b4c:	f008 080f 	and.w	r8, r8, #15
 8007b50:	2503      	movs	r5, #3
 8007b52:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007e28 <_dtoa_r+0x640>
 8007b56:	f1b8 0f00 	cmp.w	r8, #0
 8007b5a:	d10a      	bne.n	8007b72 <_dtoa_r+0x38a>
 8007b5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b60:	4632      	mov	r2, r6
 8007b62:	463b      	mov	r3, r7
 8007b64:	f7f8 fe72 	bl	800084c <__aeabi_ddiv>
 8007b68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b6c:	e02b      	b.n	8007bc6 <_dtoa_r+0x3de>
 8007b6e:	2502      	movs	r5, #2
 8007b70:	e7ef      	b.n	8007b52 <_dtoa_r+0x36a>
 8007b72:	f018 0f01 	tst.w	r8, #1
 8007b76:	d008      	beq.n	8007b8a <_dtoa_r+0x3a2>
 8007b78:	4630      	mov	r0, r6
 8007b7a:	4639      	mov	r1, r7
 8007b7c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007b80:	f7f8 fd3a 	bl	80005f8 <__aeabi_dmul>
 8007b84:	3501      	adds	r5, #1
 8007b86:	4606      	mov	r6, r0
 8007b88:	460f      	mov	r7, r1
 8007b8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007b8e:	f109 0908 	add.w	r9, r9, #8
 8007b92:	e7e0      	b.n	8007b56 <_dtoa_r+0x36e>
 8007b94:	f000 809f 	beq.w	8007cd6 <_dtoa_r+0x4ee>
 8007b98:	f1cb 0600 	rsb	r6, fp, #0
 8007b9c:	4ba1      	ldr	r3, [pc, #644]	; (8007e24 <_dtoa_r+0x63c>)
 8007b9e:	4fa2      	ldr	r7, [pc, #648]	; (8007e28 <_dtoa_r+0x640>)
 8007ba0:	f006 020f 	and.w	r2, r6, #15
 8007ba4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bac:	ec51 0b18 	vmov	r0, r1, d8
 8007bb0:	f7f8 fd22 	bl	80005f8 <__aeabi_dmul>
 8007bb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bb8:	1136      	asrs	r6, r6, #4
 8007bba:	2300      	movs	r3, #0
 8007bbc:	2502      	movs	r5, #2
 8007bbe:	2e00      	cmp	r6, #0
 8007bc0:	d17e      	bne.n	8007cc0 <_dtoa_r+0x4d8>
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1d0      	bne.n	8007b68 <_dtoa_r+0x380>
 8007bc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bc8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f000 8084 	beq.w	8007cda <_dtoa_r+0x4f2>
 8007bd2:	4b96      	ldr	r3, [pc, #600]	; (8007e2c <_dtoa_r+0x644>)
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	4640      	mov	r0, r8
 8007bd8:	4649      	mov	r1, r9
 8007bda:	f7f8 ff7f 	bl	8000adc <__aeabi_dcmplt>
 8007bde:	2800      	cmp	r0, #0
 8007be0:	d07b      	beq.n	8007cda <_dtoa_r+0x4f2>
 8007be2:	9b04      	ldr	r3, [sp, #16]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d078      	beq.n	8007cda <_dtoa_r+0x4f2>
 8007be8:	9b01      	ldr	r3, [sp, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	dd39      	ble.n	8007c62 <_dtoa_r+0x47a>
 8007bee:	4b90      	ldr	r3, [pc, #576]	; (8007e30 <_dtoa_r+0x648>)
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	4640      	mov	r0, r8
 8007bf4:	4649      	mov	r1, r9
 8007bf6:	f7f8 fcff 	bl	80005f8 <__aeabi_dmul>
 8007bfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bfe:	9e01      	ldr	r6, [sp, #4]
 8007c00:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8007c04:	3501      	adds	r5, #1
 8007c06:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	f7f8 fc8a 	bl	8000524 <__aeabi_i2d>
 8007c10:	4642      	mov	r2, r8
 8007c12:	464b      	mov	r3, r9
 8007c14:	f7f8 fcf0 	bl	80005f8 <__aeabi_dmul>
 8007c18:	4b86      	ldr	r3, [pc, #536]	; (8007e34 <_dtoa_r+0x64c>)
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f7f8 fb36 	bl	800028c <__adddf3>
 8007c20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007c24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c28:	9303      	str	r3, [sp, #12]
 8007c2a:	2e00      	cmp	r6, #0
 8007c2c:	d158      	bne.n	8007ce0 <_dtoa_r+0x4f8>
 8007c2e:	4b82      	ldr	r3, [pc, #520]	; (8007e38 <_dtoa_r+0x650>)
 8007c30:	2200      	movs	r2, #0
 8007c32:	4640      	mov	r0, r8
 8007c34:	4649      	mov	r1, r9
 8007c36:	f7f8 fb27 	bl	8000288 <__aeabi_dsub>
 8007c3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c3e:	4680      	mov	r8, r0
 8007c40:	4689      	mov	r9, r1
 8007c42:	f7f8 ff69 	bl	8000b18 <__aeabi_dcmpgt>
 8007c46:	2800      	cmp	r0, #0
 8007c48:	f040 8296 	bne.w	8008178 <_dtoa_r+0x990>
 8007c4c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007c50:	4640      	mov	r0, r8
 8007c52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c56:	4649      	mov	r1, r9
 8007c58:	f7f8 ff40 	bl	8000adc <__aeabi_dcmplt>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	f040 8289 	bne.w	8008174 <_dtoa_r+0x98c>
 8007c62:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007c66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f2c0 814e 	blt.w	8007f0a <_dtoa_r+0x722>
 8007c6e:	f1bb 0f0e 	cmp.w	fp, #14
 8007c72:	f300 814a 	bgt.w	8007f0a <_dtoa_r+0x722>
 8007c76:	4b6b      	ldr	r3, [pc, #428]	; (8007e24 <_dtoa_r+0x63c>)
 8007c78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007c7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f280 80dc 	bge.w	8007e40 <_dtoa_r+0x658>
 8007c88:	9b04      	ldr	r3, [sp, #16]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f300 80d8 	bgt.w	8007e40 <_dtoa_r+0x658>
 8007c90:	f040 826f 	bne.w	8008172 <_dtoa_r+0x98a>
 8007c94:	4b68      	ldr	r3, [pc, #416]	; (8007e38 <_dtoa_r+0x650>)
 8007c96:	2200      	movs	r2, #0
 8007c98:	4640      	mov	r0, r8
 8007c9a:	4649      	mov	r1, r9
 8007c9c:	f7f8 fcac 	bl	80005f8 <__aeabi_dmul>
 8007ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ca4:	f7f8 ff2e 	bl	8000b04 <__aeabi_dcmpge>
 8007ca8:	9e04      	ldr	r6, [sp, #16]
 8007caa:	4637      	mov	r7, r6
 8007cac:	2800      	cmp	r0, #0
 8007cae:	f040 8245 	bne.w	800813c <_dtoa_r+0x954>
 8007cb2:	9d00      	ldr	r5, [sp, #0]
 8007cb4:	2331      	movs	r3, #49	; 0x31
 8007cb6:	f805 3b01 	strb.w	r3, [r5], #1
 8007cba:	f10b 0b01 	add.w	fp, fp, #1
 8007cbe:	e241      	b.n	8008144 <_dtoa_r+0x95c>
 8007cc0:	07f2      	lsls	r2, r6, #31
 8007cc2:	d505      	bpl.n	8007cd0 <_dtoa_r+0x4e8>
 8007cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cc8:	f7f8 fc96 	bl	80005f8 <__aeabi_dmul>
 8007ccc:	3501      	adds	r5, #1
 8007cce:	2301      	movs	r3, #1
 8007cd0:	1076      	asrs	r6, r6, #1
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	e773      	b.n	8007bbe <_dtoa_r+0x3d6>
 8007cd6:	2502      	movs	r5, #2
 8007cd8:	e775      	b.n	8007bc6 <_dtoa_r+0x3de>
 8007cda:	9e04      	ldr	r6, [sp, #16]
 8007cdc:	465f      	mov	r7, fp
 8007cde:	e792      	b.n	8007c06 <_dtoa_r+0x41e>
 8007ce0:	9900      	ldr	r1, [sp, #0]
 8007ce2:	4b50      	ldr	r3, [pc, #320]	; (8007e24 <_dtoa_r+0x63c>)
 8007ce4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007ce8:	4431      	add	r1, r6
 8007cea:	9102      	str	r1, [sp, #8]
 8007cec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cee:	eeb0 9a47 	vmov.f32	s18, s14
 8007cf2:	eef0 9a67 	vmov.f32	s19, s15
 8007cf6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007cfa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007cfe:	2900      	cmp	r1, #0
 8007d00:	d044      	beq.n	8007d8c <_dtoa_r+0x5a4>
 8007d02:	494e      	ldr	r1, [pc, #312]	; (8007e3c <_dtoa_r+0x654>)
 8007d04:	2000      	movs	r0, #0
 8007d06:	f7f8 fda1 	bl	800084c <__aeabi_ddiv>
 8007d0a:	ec53 2b19 	vmov	r2, r3, d9
 8007d0e:	f7f8 fabb 	bl	8000288 <__aeabi_dsub>
 8007d12:	9d00      	ldr	r5, [sp, #0]
 8007d14:	ec41 0b19 	vmov	d9, r0, r1
 8007d18:	4649      	mov	r1, r9
 8007d1a:	4640      	mov	r0, r8
 8007d1c:	f7f8 ff1c 	bl	8000b58 <__aeabi_d2iz>
 8007d20:	4606      	mov	r6, r0
 8007d22:	f7f8 fbff 	bl	8000524 <__aeabi_i2d>
 8007d26:	4602      	mov	r2, r0
 8007d28:	460b      	mov	r3, r1
 8007d2a:	4640      	mov	r0, r8
 8007d2c:	4649      	mov	r1, r9
 8007d2e:	f7f8 faab 	bl	8000288 <__aeabi_dsub>
 8007d32:	3630      	adds	r6, #48	; 0x30
 8007d34:	f805 6b01 	strb.w	r6, [r5], #1
 8007d38:	ec53 2b19 	vmov	r2, r3, d9
 8007d3c:	4680      	mov	r8, r0
 8007d3e:	4689      	mov	r9, r1
 8007d40:	f7f8 fecc 	bl	8000adc <__aeabi_dcmplt>
 8007d44:	2800      	cmp	r0, #0
 8007d46:	d164      	bne.n	8007e12 <_dtoa_r+0x62a>
 8007d48:	4642      	mov	r2, r8
 8007d4a:	464b      	mov	r3, r9
 8007d4c:	4937      	ldr	r1, [pc, #220]	; (8007e2c <_dtoa_r+0x644>)
 8007d4e:	2000      	movs	r0, #0
 8007d50:	f7f8 fa9a 	bl	8000288 <__aeabi_dsub>
 8007d54:	ec53 2b19 	vmov	r2, r3, d9
 8007d58:	f7f8 fec0 	bl	8000adc <__aeabi_dcmplt>
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	f040 80b6 	bne.w	8007ece <_dtoa_r+0x6e6>
 8007d62:	9b02      	ldr	r3, [sp, #8]
 8007d64:	429d      	cmp	r5, r3
 8007d66:	f43f af7c 	beq.w	8007c62 <_dtoa_r+0x47a>
 8007d6a:	4b31      	ldr	r3, [pc, #196]	; (8007e30 <_dtoa_r+0x648>)
 8007d6c:	ec51 0b19 	vmov	r0, r1, d9
 8007d70:	2200      	movs	r2, #0
 8007d72:	f7f8 fc41 	bl	80005f8 <__aeabi_dmul>
 8007d76:	4b2e      	ldr	r3, [pc, #184]	; (8007e30 <_dtoa_r+0x648>)
 8007d78:	ec41 0b19 	vmov	d9, r0, r1
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	4640      	mov	r0, r8
 8007d80:	4649      	mov	r1, r9
 8007d82:	f7f8 fc39 	bl	80005f8 <__aeabi_dmul>
 8007d86:	4680      	mov	r8, r0
 8007d88:	4689      	mov	r9, r1
 8007d8a:	e7c5      	b.n	8007d18 <_dtoa_r+0x530>
 8007d8c:	ec51 0b17 	vmov	r0, r1, d7
 8007d90:	f7f8 fc32 	bl	80005f8 <__aeabi_dmul>
 8007d94:	9b02      	ldr	r3, [sp, #8]
 8007d96:	9d00      	ldr	r5, [sp, #0]
 8007d98:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d9a:	ec41 0b19 	vmov	d9, r0, r1
 8007d9e:	4649      	mov	r1, r9
 8007da0:	4640      	mov	r0, r8
 8007da2:	f7f8 fed9 	bl	8000b58 <__aeabi_d2iz>
 8007da6:	4606      	mov	r6, r0
 8007da8:	f7f8 fbbc 	bl	8000524 <__aeabi_i2d>
 8007dac:	3630      	adds	r6, #48	; 0x30
 8007dae:	4602      	mov	r2, r0
 8007db0:	460b      	mov	r3, r1
 8007db2:	4640      	mov	r0, r8
 8007db4:	4649      	mov	r1, r9
 8007db6:	f7f8 fa67 	bl	8000288 <__aeabi_dsub>
 8007dba:	f805 6b01 	strb.w	r6, [r5], #1
 8007dbe:	9b02      	ldr	r3, [sp, #8]
 8007dc0:	429d      	cmp	r5, r3
 8007dc2:	4680      	mov	r8, r0
 8007dc4:	4689      	mov	r9, r1
 8007dc6:	f04f 0200 	mov.w	r2, #0
 8007dca:	d124      	bne.n	8007e16 <_dtoa_r+0x62e>
 8007dcc:	4b1b      	ldr	r3, [pc, #108]	; (8007e3c <_dtoa_r+0x654>)
 8007dce:	ec51 0b19 	vmov	r0, r1, d9
 8007dd2:	f7f8 fa5b 	bl	800028c <__adddf3>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	460b      	mov	r3, r1
 8007dda:	4640      	mov	r0, r8
 8007ddc:	4649      	mov	r1, r9
 8007dde:	f7f8 fe9b 	bl	8000b18 <__aeabi_dcmpgt>
 8007de2:	2800      	cmp	r0, #0
 8007de4:	d173      	bne.n	8007ece <_dtoa_r+0x6e6>
 8007de6:	ec53 2b19 	vmov	r2, r3, d9
 8007dea:	4914      	ldr	r1, [pc, #80]	; (8007e3c <_dtoa_r+0x654>)
 8007dec:	2000      	movs	r0, #0
 8007dee:	f7f8 fa4b 	bl	8000288 <__aeabi_dsub>
 8007df2:	4602      	mov	r2, r0
 8007df4:	460b      	mov	r3, r1
 8007df6:	4640      	mov	r0, r8
 8007df8:	4649      	mov	r1, r9
 8007dfa:	f7f8 fe6f 	bl	8000adc <__aeabi_dcmplt>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	f43f af2f 	beq.w	8007c62 <_dtoa_r+0x47a>
 8007e04:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007e06:	1e6b      	subs	r3, r5, #1
 8007e08:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e0e:	2b30      	cmp	r3, #48	; 0x30
 8007e10:	d0f8      	beq.n	8007e04 <_dtoa_r+0x61c>
 8007e12:	46bb      	mov	fp, r7
 8007e14:	e04a      	b.n	8007eac <_dtoa_r+0x6c4>
 8007e16:	4b06      	ldr	r3, [pc, #24]	; (8007e30 <_dtoa_r+0x648>)
 8007e18:	f7f8 fbee 	bl	80005f8 <__aeabi_dmul>
 8007e1c:	4680      	mov	r8, r0
 8007e1e:	4689      	mov	r9, r1
 8007e20:	e7bd      	b.n	8007d9e <_dtoa_r+0x5b6>
 8007e22:	bf00      	nop
 8007e24:	0800a400 	.word	0x0800a400
 8007e28:	0800a3d8 	.word	0x0800a3d8
 8007e2c:	3ff00000 	.word	0x3ff00000
 8007e30:	40240000 	.word	0x40240000
 8007e34:	401c0000 	.word	0x401c0000
 8007e38:	40140000 	.word	0x40140000
 8007e3c:	3fe00000 	.word	0x3fe00000
 8007e40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007e44:	9d00      	ldr	r5, [sp, #0]
 8007e46:	4642      	mov	r2, r8
 8007e48:	464b      	mov	r3, r9
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	4639      	mov	r1, r7
 8007e4e:	f7f8 fcfd 	bl	800084c <__aeabi_ddiv>
 8007e52:	f7f8 fe81 	bl	8000b58 <__aeabi_d2iz>
 8007e56:	9001      	str	r0, [sp, #4]
 8007e58:	f7f8 fb64 	bl	8000524 <__aeabi_i2d>
 8007e5c:	4642      	mov	r2, r8
 8007e5e:	464b      	mov	r3, r9
 8007e60:	f7f8 fbca 	bl	80005f8 <__aeabi_dmul>
 8007e64:	4602      	mov	r2, r0
 8007e66:	460b      	mov	r3, r1
 8007e68:	4630      	mov	r0, r6
 8007e6a:	4639      	mov	r1, r7
 8007e6c:	f7f8 fa0c 	bl	8000288 <__aeabi_dsub>
 8007e70:	9e01      	ldr	r6, [sp, #4]
 8007e72:	9f04      	ldr	r7, [sp, #16]
 8007e74:	3630      	adds	r6, #48	; 0x30
 8007e76:	f805 6b01 	strb.w	r6, [r5], #1
 8007e7a:	9e00      	ldr	r6, [sp, #0]
 8007e7c:	1bae      	subs	r6, r5, r6
 8007e7e:	42b7      	cmp	r7, r6
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	d134      	bne.n	8007ef0 <_dtoa_r+0x708>
 8007e86:	f7f8 fa01 	bl	800028c <__adddf3>
 8007e8a:	4642      	mov	r2, r8
 8007e8c:	464b      	mov	r3, r9
 8007e8e:	4606      	mov	r6, r0
 8007e90:	460f      	mov	r7, r1
 8007e92:	f7f8 fe41 	bl	8000b18 <__aeabi_dcmpgt>
 8007e96:	b9c8      	cbnz	r0, 8007ecc <_dtoa_r+0x6e4>
 8007e98:	4642      	mov	r2, r8
 8007e9a:	464b      	mov	r3, r9
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	4639      	mov	r1, r7
 8007ea0:	f7f8 fe12 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ea4:	b110      	cbz	r0, 8007eac <_dtoa_r+0x6c4>
 8007ea6:	9b01      	ldr	r3, [sp, #4]
 8007ea8:	07db      	lsls	r3, r3, #31
 8007eaa:	d40f      	bmi.n	8007ecc <_dtoa_r+0x6e4>
 8007eac:	4651      	mov	r1, sl
 8007eae:	4620      	mov	r0, r4
 8007eb0:	f000 fbcc 	bl	800864c <_Bfree>
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007eb8:	702b      	strb	r3, [r5, #0]
 8007eba:	f10b 0301 	add.w	r3, fp, #1
 8007ebe:	6013      	str	r3, [r2, #0]
 8007ec0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f43f ace2 	beq.w	800788c <_dtoa_r+0xa4>
 8007ec8:	601d      	str	r5, [r3, #0]
 8007eca:	e4df      	b.n	800788c <_dtoa_r+0xa4>
 8007ecc:	465f      	mov	r7, fp
 8007ece:	462b      	mov	r3, r5
 8007ed0:	461d      	mov	r5, r3
 8007ed2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ed6:	2a39      	cmp	r2, #57	; 0x39
 8007ed8:	d106      	bne.n	8007ee8 <_dtoa_r+0x700>
 8007eda:	9a00      	ldr	r2, [sp, #0]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d1f7      	bne.n	8007ed0 <_dtoa_r+0x6e8>
 8007ee0:	9900      	ldr	r1, [sp, #0]
 8007ee2:	2230      	movs	r2, #48	; 0x30
 8007ee4:	3701      	adds	r7, #1
 8007ee6:	700a      	strb	r2, [r1, #0]
 8007ee8:	781a      	ldrb	r2, [r3, #0]
 8007eea:	3201      	adds	r2, #1
 8007eec:	701a      	strb	r2, [r3, #0]
 8007eee:	e790      	b.n	8007e12 <_dtoa_r+0x62a>
 8007ef0:	4ba3      	ldr	r3, [pc, #652]	; (8008180 <_dtoa_r+0x998>)
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f7f8 fb80 	bl	80005f8 <__aeabi_dmul>
 8007ef8:	2200      	movs	r2, #0
 8007efa:	2300      	movs	r3, #0
 8007efc:	4606      	mov	r6, r0
 8007efe:	460f      	mov	r7, r1
 8007f00:	f7f8 fde2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	d09e      	beq.n	8007e46 <_dtoa_r+0x65e>
 8007f08:	e7d0      	b.n	8007eac <_dtoa_r+0x6c4>
 8007f0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f0c:	2a00      	cmp	r2, #0
 8007f0e:	f000 80ca 	beq.w	80080a6 <_dtoa_r+0x8be>
 8007f12:	9a07      	ldr	r2, [sp, #28]
 8007f14:	2a01      	cmp	r2, #1
 8007f16:	f300 80ad 	bgt.w	8008074 <_dtoa_r+0x88c>
 8007f1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f1c:	2a00      	cmp	r2, #0
 8007f1e:	f000 80a5 	beq.w	800806c <_dtoa_r+0x884>
 8007f22:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f26:	9e08      	ldr	r6, [sp, #32]
 8007f28:	9d05      	ldr	r5, [sp, #20]
 8007f2a:	9a05      	ldr	r2, [sp, #20]
 8007f2c:	441a      	add	r2, r3
 8007f2e:	9205      	str	r2, [sp, #20]
 8007f30:	9a06      	ldr	r2, [sp, #24]
 8007f32:	2101      	movs	r1, #1
 8007f34:	441a      	add	r2, r3
 8007f36:	4620      	mov	r0, r4
 8007f38:	9206      	str	r2, [sp, #24]
 8007f3a:	f000 fc3d 	bl	80087b8 <__i2b>
 8007f3e:	4607      	mov	r7, r0
 8007f40:	b165      	cbz	r5, 8007f5c <_dtoa_r+0x774>
 8007f42:	9b06      	ldr	r3, [sp, #24]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	dd09      	ble.n	8007f5c <_dtoa_r+0x774>
 8007f48:	42ab      	cmp	r3, r5
 8007f4a:	9a05      	ldr	r2, [sp, #20]
 8007f4c:	bfa8      	it	ge
 8007f4e:	462b      	movge	r3, r5
 8007f50:	1ad2      	subs	r2, r2, r3
 8007f52:	9205      	str	r2, [sp, #20]
 8007f54:	9a06      	ldr	r2, [sp, #24]
 8007f56:	1aed      	subs	r5, r5, r3
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	9306      	str	r3, [sp, #24]
 8007f5c:	9b08      	ldr	r3, [sp, #32]
 8007f5e:	b1f3      	cbz	r3, 8007f9e <_dtoa_r+0x7b6>
 8007f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f000 80a3 	beq.w	80080ae <_dtoa_r+0x8c6>
 8007f68:	2e00      	cmp	r6, #0
 8007f6a:	dd10      	ble.n	8007f8e <_dtoa_r+0x7a6>
 8007f6c:	4639      	mov	r1, r7
 8007f6e:	4632      	mov	r2, r6
 8007f70:	4620      	mov	r0, r4
 8007f72:	f000 fce1 	bl	8008938 <__pow5mult>
 8007f76:	4652      	mov	r2, sl
 8007f78:	4601      	mov	r1, r0
 8007f7a:	4607      	mov	r7, r0
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	f000 fc31 	bl	80087e4 <__multiply>
 8007f82:	4651      	mov	r1, sl
 8007f84:	4680      	mov	r8, r0
 8007f86:	4620      	mov	r0, r4
 8007f88:	f000 fb60 	bl	800864c <_Bfree>
 8007f8c:	46c2      	mov	sl, r8
 8007f8e:	9b08      	ldr	r3, [sp, #32]
 8007f90:	1b9a      	subs	r2, r3, r6
 8007f92:	d004      	beq.n	8007f9e <_dtoa_r+0x7b6>
 8007f94:	4651      	mov	r1, sl
 8007f96:	4620      	mov	r0, r4
 8007f98:	f000 fcce 	bl	8008938 <__pow5mult>
 8007f9c:	4682      	mov	sl, r0
 8007f9e:	2101      	movs	r1, #1
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f000 fc09 	bl	80087b8 <__i2b>
 8007fa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	4606      	mov	r6, r0
 8007fac:	f340 8081 	ble.w	80080b2 <_dtoa_r+0x8ca>
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	4601      	mov	r1, r0
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	f000 fcbf 	bl	8008938 <__pow5mult>
 8007fba:	9b07      	ldr	r3, [sp, #28]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	4606      	mov	r6, r0
 8007fc0:	dd7a      	ble.n	80080b8 <_dtoa_r+0x8d0>
 8007fc2:	f04f 0800 	mov.w	r8, #0
 8007fc6:	6933      	ldr	r3, [r6, #16]
 8007fc8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007fcc:	6918      	ldr	r0, [r3, #16]
 8007fce:	f000 fba5 	bl	800871c <__hi0bits>
 8007fd2:	f1c0 0020 	rsb	r0, r0, #32
 8007fd6:	9b06      	ldr	r3, [sp, #24]
 8007fd8:	4418      	add	r0, r3
 8007fda:	f010 001f 	ands.w	r0, r0, #31
 8007fde:	f000 8094 	beq.w	800810a <_dtoa_r+0x922>
 8007fe2:	f1c0 0320 	rsb	r3, r0, #32
 8007fe6:	2b04      	cmp	r3, #4
 8007fe8:	f340 8085 	ble.w	80080f6 <_dtoa_r+0x90e>
 8007fec:	9b05      	ldr	r3, [sp, #20]
 8007fee:	f1c0 001c 	rsb	r0, r0, #28
 8007ff2:	4403      	add	r3, r0
 8007ff4:	9305      	str	r3, [sp, #20]
 8007ff6:	9b06      	ldr	r3, [sp, #24]
 8007ff8:	4403      	add	r3, r0
 8007ffa:	4405      	add	r5, r0
 8007ffc:	9306      	str	r3, [sp, #24]
 8007ffe:	9b05      	ldr	r3, [sp, #20]
 8008000:	2b00      	cmp	r3, #0
 8008002:	dd05      	ble.n	8008010 <_dtoa_r+0x828>
 8008004:	4651      	mov	r1, sl
 8008006:	461a      	mov	r2, r3
 8008008:	4620      	mov	r0, r4
 800800a:	f000 fcef 	bl	80089ec <__lshift>
 800800e:	4682      	mov	sl, r0
 8008010:	9b06      	ldr	r3, [sp, #24]
 8008012:	2b00      	cmp	r3, #0
 8008014:	dd05      	ble.n	8008022 <_dtoa_r+0x83a>
 8008016:	4631      	mov	r1, r6
 8008018:	461a      	mov	r2, r3
 800801a:	4620      	mov	r0, r4
 800801c:	f000 fce6 	bl	80089ec <__lshift>
 8008020:	4606      	mov	r6, r0
 8008022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008024:	2b00      	cmp	r3, #0
 8008026:	d072      	beq.n	800810e <_dtoa_r+0x926>
 8008028:	4631      	mov	r1, r6
 800802a:	4650      	mov	r0, sl
 800802c:	f000 fd4a 	bl	8008ac4 <__mcmp>
 8008030:	2800      	cmp	r0, #0
 8008032:	da6c      	bge.n	800810e <_dtoa_r+0x926>
 8008034:	2300      	movs	r3, #0
 8008036:	4651      	mov	r1, sl
 8008038:	220a      	movs	r2, #10
 800803a:	4620      	mov	r0, r4
 800803c:	f000 fb28 	bl	8008690 <__multadd>
 8008040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008042:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008046:	4682      	mov	sl, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 81b0 	beq.w	80083ae <_dtoa_r+0xbc6>
 800804e:	2300      	movs	r3, #0
 8008050:	4639      	mov	r1, r7
 8008052:	220a      	movs	r2, #10
 8008054:	4620      	mov	r0, r4
 8008056:	f000 fb1b 	bl	8008690 <__multadd>
 800805a:	9b01      	ldr	r3, [sp, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	4607      	mov	r7, r0
 8008060:	f300 8096 	bgt.w	8008190 <_dtoa_r+0x9a8>
 8008064:	9b07      	ldr	r3, [sp, #28]
 8008066:	2b02      	cmp	r3, #2
 8008068:	dc59      	bgt.n	800811e <_dtoa_r+0x936>
 800806a:	e091      	b.n	8008190 <_dtoa_r+0x9a8>
 800806c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800806e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008072:	e758      	b.n	8007f26 <_dtoa_r+0x73e>
 8008074:	9b04      	ldr	r3, [sp, #16]
 8008076:	1e5e      	subs	r6, r3, #1
 8008078:	9b08      	ldr	r3, [sp, #32]
 800807a:	42b3      	cmp	r3, r6
 800807c:	bfbf      	itttt	lt
 800807e:	9b08      	ldrlt	r3, [sp, #32]
 8008080:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008082:	9608      	strlt	r6, [sp, #32]
 8008084:	1af3      	sublt	r3, r6, r3
 8008086:	bfb4      	ite	lt
 8008088:	18d2      	addlt	r2, r2, r3
 800808a:	1b9e      	subge	r6, r3, r6
 800808c:	9b04      	ldr	r3, [sp, #16]
 800808e:	bfbc      	itt	lt
 8008090:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008092:	2600      	movlt	r6, #0
 8008094:	2b00      	cmp	r3, #0
 8008096:	bfb7      	itett	lt
 8008098:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800809c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80080a0:	1a9d      	sublt	r5, r3, r2
 80080a2:	2300      	movlt	r3, #0
 80080a4:	e741      	b.n	8007f2a <_dtoa_r+0x742>
 80080a6:	9e08      	ldr	r6, [sp, #32]
 80080a8:	9d05      	ldr	r5, [sp, #20]
 80080aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80080ac:	e748      	b.n	8007f40 <_dtoa_r+0x758>
 80080ae:	9a08      	ldr	r2, [sp, #32]
 80080b0:	e770      	b.n	8007f94 <_dtoa_r+0x7ac>
 80080b2:	9b07      	ldr	r3, [sp, #28]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	dc19      	bgt.n	80080ec <_dtoa_r+0x904>
 80080b8:	9b02      	ldr	r3, [sp, #8]
 80080ba:	b9bb      	cbnz	r3, 80080ec <_dtoa_r+0x904>
 80080bc:	9b03      	ldr	r3, [sp, #12]
 80080be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080c2:	b99b      	cbnz	r3, 80080ec <_dtoa_r+0x904>
 80080c4:	9b03      	ldr	r3, [sp, #12]
 80080c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080ca:	0d1b      	lsrs	r3, r3, #20
 80080cc:	051b      	lsls	r3, r3, #20
 80080ce:	b183      	cbz	r3, 80080f2 <_dtoa_r+0x90a>
 80080d0:	9b05      	ldr	r3, [sp, #20]
 80080d2:	3301      	adds	r3, #1
 80080d4:	9305      	str	r3, [sp, #20]
 80080d6:	9b06      	ldr	r3, [sp, #24]
 80080d8:	3301      	adds	r3, #1
 80080da:	9306      	str	r3, [sp, #24]
 80080dc:	f04f 0801 	mov.w	r8, #1
 80080e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f47f af6f 	bne.w	8007fc6 <_dtoa_r+0x7de>
 80080e8:	2001      	movs	r0, #1
 80080ea:	e774      	b.n	8007fd6 <_dtoa_r+0x7ee>
 80080ec:	f04f 0800 	mov.w	r8, #0
 80080f0:	e7f6      	b.n	80080e0 <_dtoa_r+0x8f8>
 80080f2:	4698      	mov	r8, r3
 80080f4:	e7f4      	b.n	80080e0 <_dtoa_r+0x8f8>
 80080f6:	d082      	beq.n	8007ffe <_dtoa_r+0x816>
 80080f8:	9a05      	ldr	r2, [sp, #20]
 80080fa:	331c      	adds	r3, #28
 80080fc:	441a      	add	r2, r3
 80080fe:	9205      	str	r2, [sp, #20]
 8008100:	9a06      	ldr	r2, [sp, #24]
 8008102:	441a      	add	r2, r3
 8008104:	441d      	add	r5, r3
 8008106:	9206      	str	r2, [sp, #24]
 8008108:	e779      	b.n	8007ffe <_dtoa_r+0x816>
 800810a:	4603      	mov	r3, r0
 800810c:	e7f4      	b.n	80080f8 <_dtoa_r+0x910>
 800810e:	9b04      	ldr	r3, [sp, #16]
 8008110:	2b00      	cmp	r3, #0
 8008112:	dc37      	bgt.n	8008184 <_dtoa_r+0x99c>
 8008114:	9b07      	ldr	r3, [sp, #28]
 8008116:	2b02      	cmp	r3, #2
 8008118:	dd34      	ble.n	8008184 <_dtoa_r+0x99c>
 800811a:	9b04      	ldr	r3, [sp, #16]
 800811c:	9301      	str	r3, [sp, #4]
 800811e:	9b01      	ldr	r3, [sp, #4]
 8008120:	b963      	cbnz	r3, 800813c <_dtoa_r+0x954>
 8008122:	4631      	mov	r1, r6
 8008124:	2205      	movs	r2, #5
 8008126:	4620      	mov	r0, r4
 8008128:	f000 fab2 	bl	8008690 <__multadd>
 800812c:	4601      	mov	r1, r0
 800812e:	4606      	mov	r6, r0
 8008130:	4650      	mov	r0, sl
 8008132:	f000 fcc7 	bl	8008ac4 <__mcmp>
 8008136:	2800      	cmp	r0, #0
 8008138:	f73f adbb 	bgt.w	8007cb2 <_dtoa_r+0x4ca>
 800813c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800813e:	9d00      	ldr	r5, [sp, #0]
 8008140:	ea6f 0b03 	mvn.w	fp, r3
 8008144:	f04f 0800 	mov.w	r8, #0
 8008148:	4631      	mov	r1, r6
 800814a:	4620      	mov	r0, r4
 800814c:	f000 fa7e 	bl	800864c <_Bfree>
 8008150:	2f00      	cmp	r7, #0
 8008152:	f43f aeab 	beq.w	8007eac <_dtoa_r+0x6c4>
 8008156:	f1b8 0f00 	cmp.w	r8, #0
 800815a:	d005      	beq.n	8008168 <_dtoa_r+0x980>
 800815c:	45b8      	cmp	r8, r7
 800815e:	d003      	beq.n	8008168 <_dtoa_r+0x980>
 8008160:	4641      	mov	r1, r8
 8008162:	4620      	mov	r0, r4
 8008164:	f000 fa72 	bl	800864c <_Bfree>
 8008168:	4639      	mov	r1, r7
 800816a:	4620      	mov	r0, r4
 800816c:	f000 fa6e 	bl	800864c <_Bfree>
 8008170:	e69c      	b.n	8007eac <_dtoa_r+0x6c4>
 8008172:	2600      	movs	r6, #0
 8008174:	4637      	mov	r7, r6
 8008176:	e7e1      	b.n	800813c <_dtoa_r+0x954>
 8008178:	46bb      	mov	fp, r7
 800817a:	4637      	mov	r7, r6
 800817c:	e599      	b.n	8007cb2 <_dtoa_r+0x4ca>
 800817e:	bf00      	nop
 8008180:	40240000 	.word	0x40240000
 8008184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008186:	2b00      	cmp	r3, #0
 8008188:	f000 80c8 	beq.w	800831c <_dtoa_r+0xb34>
 800818c:	9b04      	ldr	r3, [sp, #16]
 800818e:	9301      	str	r3, [sp, #4]
 8008190:	2d00      	cmp	r5, #0
 8008192:	dd05      	ble.n	80081a0 <_dtoa_r+0x9b8>
 8008194:	4639      	mov	r1, r7
 8008196:	462a      	mov	r2, r5
 8008198:	4620      	mov	r0, r4
 800819a:	f000 fc27 	bl	80089ec <__lshift>
 800819e:	4607      	mov	r7, r0
 80081a0:	f1b8 0f00 	cmp.w	r8, #0
 80081a4:	d05b      	beq.n	800825e <_dtoa_r+0xa76>
 80081a6:	6879      	ldr	r1, [r7, #4]
 80081a8:	4620      	mov	r0, r4
 80081aa:	f000 fa0f 	bl	80085cc <_Balloc>
 80081ae:	4605      	mov	r5, r0
 80081b0:	b928      	cbnz	r0, 80081be <_dtoa_r+0x9d6>
 80081b2:	4b83      	ldr	r3, [pc, #524]	; (80083c0 <_dtoa_r+0xbd8>)
 80081b4:	4602      	mov	r2, r0
 80081b6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80081ba:	f7ff bb2e 	b.w	800781a <_dtoa_r+0x32>
 80081be:	693a      	ldr	r2, [r7, #16]
 80081c0:	3202      	adds	r2, #2
 80081c2:	0092      	lsls	r2, r2, #2
 80081c4:	f107 010c 	add.w	r1, r7, #12
 80081c8:	300c      	adds	r0, #12
 80081ca:	f7ff fa75 	bl	80076b8 <memcpy>
 80081ce:	2201      	movs	r2, #1
 80081d0:	4629      	mov	r1, r5
 80081d2:	4620      	mov	r0, r4
 80081d4:	f000 fc0a 	bl	80089ec <__lshift>
 80081d8:	9b00      	ldr	r3, [sp, #0]
 80081da:	3301      	adds	r3, #1
 80081dc:	9304      	str	r3, [sp, #16]
 80081de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081e2:	4413      	add	r3, r2
 80081e4:	9308      	str	r3, [sp, #32]
 80081e6:	9b02      	ldr	r3, [sp, #8]
 80081e8:	f003 0301 	and.w	r3, r3, #1
 80081ec:	46b8      	mov	r8, r7
 80081ee:	9306      	str	r3, [sp, #24]
 80081f0:	4607      	mov	r7, r0
 80081f2:	9b04      	ldr	r3, [sp, #16]
 80081f4:	4631      	mov	r1, r6
 80081f6:	3b01      	subs	r3, #1
 80081f8:	4650      	mov	r0, sl
 80081fa:	9301      	str	r3, [sp, #4]
 80081fc:	f7ff fa6a 	bl	80076d4 <quorem>
 8008200:	4641      	mov	r1, r8
 8008202:	9002      	str	r0, [sp, #8]
 8008204:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008208:	4650      	mov	r0, sl
 800820a:	f000 fc5b 	bl	8008ac4 <__mcmp>
 800820e:	463a      	mov	r2, r7
 8008210:	9005      	str	r0, [sp, #20]
 8008212:	4631      	mov	r1, r6
 8008214:	4620      	mov	r0, r4
 8008216:	f000 fc71 	bl	8008afc <__mdiff>
 800821a:	68c2      	ldr	r2, [r0, #12]
 800821c:	4605      	mov	r5, r0
 800821e:	bb02      	cbnz	r2, 8008262 <_dtoa_r+0xa7a>
 8008220:	4601      	mov	r1, r0
 8008222:	4650      	mov	r0, sl
 8008224:	f000 fc4e 	bl	8008ac4 <__mcmp>
 8008228:	4602      	mov	r2, r0
 800822a:	4629      	mov	r1, r5
 800822c:	4620      	mov	r0, r4
 800822e:	9209      	str	r2, [sp, #36]	; 0x24
 8008230:	f000 fa0c 	bl	800864c <_Bfree>
 8008234:	9b07      	ldr	r3, [sp, #28]
 8008236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008238:	9d04      	ldr	r5, [sp, #16]
 800823a:	ea43 0102 	orr.w	r1, r3, r2
 800823e:	9b06      	ldr	r3, [sp, #24]
 8008240:	4319      	orrs	r1, r3
 8008242:	d110      	bne.n	8008266 <_dtoa_r+0xa7e>
 8008244:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008248:	d029      	beq.n	800829e <_dtoa_r+0xab6>
 800824a:	9b05      	ldr	r3, [sp, #20]
 800824c:	2b00      	cmp	r3, #0
 800824e:	dd02      	ble.n	8008256 <_dtoa_r+0xa6e>
 8008250:	9b02      	ldr	r3, [sp, #8]
 8008252:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008256:	9b01      	ldr	r3, [sp, #4]
 8008258:	f883 9000 	strb.w	r9, [r3]
 800825c:	e774      	b.n	8008148 <_dtoa_r+0x960>
 800825e:	4638      	mov	r0, r7
 8008260:	e7ba      	b.n	80081d8 <_dtoa_r+0x9f0>
 8008262:	2201      	movs	r2, #1
 8008264:	e7e1      	b.n	800822a <_dtoa_r+0xa42>
 8008266:	9b05      	ldr	r3, [sp, #20]
 8008268:	2b00      	cmp	r3, #0
 800826a:	db04      	blt.n	8008276 <_dtoa_r+0xa8e>
 800826c:	9907      	ldr	r1, [sp, #28]
 800826e:	430b      	orrs	r3, r1
 8008270:	9906      	ldr	r1, [sp, #24]
 8008272:	430b      	orrs	r3, r1
 8008274:	d120      	bne.n	80082b8 <_dtoa_r+0xad0>
 8008276:	2a00      	cmp	r2, #0
 8008278:	dded      	ble.n	8008256 <_dtoa_r+0xa6e>
 800827a:	4651      	mov	r1, sl
 800827c:	2201      	movs	r2, #1
 800827e:	4620      	mov	r0, r4
 8008280:	f000 fbb4 	bl	80089ec <__lshift>
 8008284:	4631      	mov	r1, r6
 8008286:	4682      	mov	sl, r0
 8008288:	f000 fc1c 	bl	8008ac4 <__mcmp>
 800828c:	2800      	cmp	r0, #0
 800828e:	dc03      	bgt.n	8008298 <_dtoa_r+0xab0>
 8008290:	d1e1      	bne.n	8008256 <_dtoa_r+0xa6e>
 8008292:	f019 0f01 	tst.w	r9, #1
 8008296:	d0de      	beq.n	8008256 <_dtoa_r+0xa6e>
 8008298:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800829c:	d1d8      	bne.n	8008250 <_dtoa_r+0xa68>
 800829e:	9a01      	ldr	r2, [sp, #4]
 80082a0:	2339      	movs	r3, #57	; 0x39
 80082a2:	7013      	strb	r3, [r2, #0]
 80082a4:	462b      	mov	r3, r5
 80082a6:	461d      	mov	r5, r3
 80082a8:	3b01      	subs	r3, #1
 80082aa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80082ae:	2a39      	cmp	r2, #57	; 0x39
 80082b0:	d06c      	beq.n	800838c <_dtoa_r+0xba4>
 80082b2:	3201      	adds	r2, #1
 80082b4:	701a      	strb	r2, [r3, #0]
 80082b6:	e747      	b.n	8008148 <_dtoa_r+0x960>
 80082b8:	2a00      	cmp	r2, #0
 80082ba:	dd07      	ble.n	80082cc <_dtoa_r+0xae4>
 80082bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80082c0:	d0ed      	beq.n	800829e <_dtoa_r+0xab6>
 80082c2:	9a01      	ldr	r2, [sp, #4]
 80082c4:	f109 0301 	add.w	r3, r9, #1
 80082c8:	7013      	strb	r3, [r2, #0]
 80082ca:	e73d      	b.n	8008148 <_dtoa_r+0x960>
 80082cc:	9b04      	ldr	r3, [sp, #16]
 80082ce:	9a08      	ldr	r2, [sp, #32]
 80082d0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d043      	beq.n	8008360 <_dtoa_r+0xb78>
 80082d8:	4651      	mov	r1, sl
 80082da:	2300      	movs	r3, #0
 80082dc:	220a      	movs	r2, #10
 80082de:	4620      	mov	r0, r4
 80082e0:	f000 f9d6 	bl	8008690 <__multadd>
 80082e4:	45b8      	cmp	r8, r7
 80082e6:	4682      	mov	sl, r0
 80082e8:	f04f 0300 	mov.w	r3, #0
 80082ec:	f04f 020a 	mov.w	r2, #10
 80082f0:	4641      	mov	r1, r8
 80082f2:	4620      	mov	r0, r4
 80082f4:	d107      	bne.n	8008306 <_dtoa_r+0xb1e>
 80082f6:	f000 f9cb 	bl	8008690 <__multadd>
 80082fa:	4680      	mov	r8, r0
 80082fc:	4607      	mov	r7, r0
 80082fe:	9b04      	ldr	r3, [sp, #16]
 8008300:	3301      	adds	r3, #1
 8008302:	9304      	str	r3, [sp, #16]
 8008304:	e775      	b.n	80081f2 <_dtoa_r+0xa0a>
 8008306:	f000 f9c3 	bl	8008690 <__multadd>
 800830a:	4639      	mov	r1, r7
 800830c:	4680      	mov	r8, r0
 800830e:	2300      	movs	r3, #0
 8008310:	220a      	movs	r2, #10
 8008312:	4620      	mov	r0, r4
 8008314:	f000 f9bc 	bl	8008690 <__multadd>
 8008318:	4607      	mov	r7, r0
 800831a:	e7f0      	b.n	80082fe <_dtoa_r+0xb16>
 800831c:	9b04      	ldr	r3, [sp, #16]
 800831e:	9301      	str	r3, [sp, #4]
 8008320:	9d00      	ldr	r5, [sp, #0]
 8008322:	4631      	mov	r1, r6
 8008324:	4650      	mov	r0, sl
 8008326:	f7ff f9d5 	bl	80076d4 <quorem>
 800832a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800832e:	9b00      	ldr	r3, [sp, #0]
 8008330:	f805 9b01 	strb.w	r9, [r5], #1
 8008334:	1aea      	subs	r2, r5, r3
 8008336:	9b01      	ldr	r3, [sp, #4]
 8008338:	4293      	cmp	r3, r2
 800833a:	dd07      	ble.n	800834c <_dtoa_r+0xb64>
 800833c:	4651      	mov	r1, sl
 800833e:	2300      	movs	r3, #0
 8008340:	220a      	movs	r2, #10
 8008342:	4620      	mov	r0, r4
 8008344:	f000 f9a4 	bl	8008690 <__multadd>
 8008348:	4682      	mov	sl, r0
 800834a:	e7ea      	b.n	8008322 <_dtoa_r+0xb3a>
 800834c:	9b01      	ldr	r3, [sp, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	bfc8      	it	gt
 8008352:	461d      	movgt	r5, r3
 8008354:	9b00      	ldr	r3, [sp, #0]
 8008356:	bfd8      	it	le
 8008358:	2501      	movle	r5, #1
 800835a:	441d      	add	r5, r3
 800835c:	f04f 0800 	mov.w	r8, #0
 8008360:	4651      	mov	r1, sl
 8008362:	2201      	movs	r2, #1
 8008364:	4620      	mov	r0, r4
 8008366:	f000 fb41 	bl	80089ec <__lshift>
 800836a:	4631      	mov	r1, r6
 800836c:	4682      	mov	sl, r0
 800836e:	f000 fba9 	bl	8008ac4 <__mcmp>
 8008372:	2800      	cmp	r0, #0
 8008374:	dc96      	bgt.n	80082a4 <_dtoa_r+0xabc>
 8008376:	d102      	bne.n	800837e <_dtoa_r+0xb96>
 8008378:	f019 0f01 	tst.w	r9, #1
 800837c:	d192      	bne.n	80082a4 <_dtoa_r+0xabc>
 800837e:	462b      	mov	r3, r5
 8008380:	461d      	mov	r5, r3
 8008382:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008386:	2a30      	cmp	r2, #48	; 0x30
 8008388:	d0fa      	beq.n	8008380 <_dtoa_r+0xb98>
 800838a:	e6dd      	b.n	8008148 <_dtoa_r+0x960>
 800838c:	9a00      	ldr	r2, [sp, #0]
 800838e:	429a      	cmp	r2, r3
 8008390:	d189      	bne.n	80082a6 <_dtoa_r+0xabe>
 8008392:	f10b 0b01 	add.w	fp, fp, #1
 8008396:	2331      	movs	r3, #49	; 0x31
 8008398:	e796      	b.n	80082c8 <_dtoa_r+0xae0>
 800839a:	4b0a      	ldr	r3, [pc, #40]	; (80083c4 <_dtoa_r+0xbdc>)
 800839c:	f7ff ba99 	b.w	80078d2 <_dtoa_r+0xea>
 80083a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f47f aa6d 	bne.w	8007882 <_dtoa_r+0x9a>
 80083a8:	4b07      	ldr	r3, [pc, #28]	; (80083c8 <_dtoa_r+0xbe0>)
 80083aa:	f7ff ba92 	b.w	80078d2 <_dtoa_r+0xea>
 80083ae:	9b01      	ldr	r3, [sp, #4]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	dcb5      	bgt.n	8008320 <_dtoa_r+0xb38>
 80083b4:	9b07      	ldr	r3, [sp, #28]
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	f73f aeb1 	bgt.w	800811e <_dtoa_r+0x936>
 80083bc:	e7b0      	b.n	8008320 <_dtoa_r+0xb38>
 80083be:	bf00      	nop
 80083c0:	0800a368 	.word	0x0800a368
 80083c4:	0800a2c8 	.word	0x0800a2c8
 80083c8:	0800a2ec 	.word	0x0800a2ec

080083cc <_free_r>:
 80083cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083ce:	2900      	cmp	r1, #0
 80083d0:	d044      	beq.n	800845c <_free_r+0x90>
 80083d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083d6:	9001      	str	r0, [sp, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f1a1 0404 	sub.w	r4, r1, #4
 80083de:	bfb8      	it	lt
 80083e0:	18e4      	addlt	r4, r4, r3
 80083e2:	f000 f8e7 	bl	80085b4 <__malloc_lock>
 80083e6:	4a1e      	ldr	r2, [pc, #120]	; (8008460 <_free_r+0x94>)
 80083e8:	9801      	ldr	r0, [sp, #4]
 80083ea:	6813      	ldr	r3, [r2, #0]
 80083ec:	b933      	cbnz	r3, 80083fc <_free_r+0x30>
 80083ee:	6063      	str	r3, [r4, #4]
 80083f0:	6014      	str	r4, [r2, #0]
 80083f2:	b003      	add	sp, #12
 80083f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083f8:	f000 b8e2 	b.w	80085c0 <__malloc_unlock>
 80083fc:	42a3      	cmp	r3, r4
 80083fe:	d908      	bls.n	8008412 <_free_r+0x46>
 8008400:	6825      	ldr	r5, [r4, #0]
 8008402:	1961      	adds	r1, r4, r5
 8008404:	428b      	cmp	r3, r1
 8008406:	bf01      	itttt	eq
 8008408:	6819      	ldreq	r1, [r3, #0]
 800840a:	685b      	ldreq	r3, [r3, #4]
 800840c:	1949      	addeq	r1, r1, r5
 800840e:	6021      	streq	r1, [r4, #0]
 8008410:	e7ed      	b.n	80083ee <_free_r+0x22>
 8008412:	461a      	mov	r2, r3
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	b10b      	cbz	r3, 800841c <_free_r+0x50>
 8008418:	42a3      	cmp	r3, r4
 800841a:	d9fa      	bls.n	8008412 <_free_r+0x46>
 800841c:	6811      	ldr	r1, [r2, #0]
 800841e:	1855      	adds	r5, r2, r1
 8008420:	42a5      	cmp	r5, r4
 8008422:	d10b      	bne.n	800843c <_free_r+0x70>
 8008424:	6824      	ldr	r4, [r4, #0]
 8008426:	4421      	add	r1, r4
 8008428:	1854      	adds	r4, r2, r1
 800842a:	42a3      	cmp	r3, r4
 800842c:	6011      	str	r1, [r2, #0]
 800842e:	d1e0      	bne.n	80083f2 <_free_r+0x26>
 8008430:	681c      	ldr	r4, [r3, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	6053      	str	r3, [r2, #4]
 8008436:	440c      	add	r4, r1
 8008438:	6014      	str	r4, [r2, #0]
 800843a:	e7da      	b.n	80083f2 <_free_r+0x26>
 800843c:	d902      	bls.n	8008444 <_free_r+0x78>
 800843e:	230c      	movs	r3, #12
 8008440:	6003      	str	r3, [r0, #0]
 8008442:	e7d6      	b.n	80083f2 <_free_r+0x26>
 8008444:	6825      	ldr	r5, [r4, #0]
 8008446:	1961      	adds	r1, r4, r5
 8008448:	428b      	cmp	r3, r1
 800844a:	bf04      	itt	eq
 800844c:	6819      	ldreq	r1, [r3, #0]
 800844e:	685b      	ldreq	r3, [r3, #4]
 8008450:	6063      	str	r3, [r4, #4]
 8008452:	bf04      	itt	eq
 8008454:	1949      	addeq	r1, r1, r5
 8008456:	6021      	streq	r1, [r4, #0]
 8008458:	6054      	str	r4, [r2, #4]
 800845a:	e7ca      	b.n	80083f2 <_free_r+0x26>
 800845c:	b003      	add	sp, #12
 800845e:	bd30      	pop	{r4, r5, pc}
 8008460:	20000500 	.word	0x20000500

08008464 <malloc>:
 8008464:	4b02      	ldr	r3, [pc, #8]	; (8008470 <malloc+0xc>)
 8008466:	4601      	mov	r1, r0
 8008468:	6818      	ldr	r0, [r3, #0]
 800846a:	f000 b823 	b.w	80084b4 <_malloc_r>
 800846e:	bf00      	nop
 8008470:	2000006c 	.word	0x2000006c

08008474 <sbrk_aligned>:
 8008474:	b570      	push	{r4, r5, r6, lr}
 8008476:	4e0e      	ldr	r6, [pc, #56]	; (80084b0 <sbrk_aligned+0x3c>)
 8008478:	460c      	mov	r4, r1
 800847a:	6831      	ldr	r1, [r6, #0]
 800847c:	4605      	mov	r5, r0
 800847e:	b911      	cbnz	r1, 8008486 <sbrk_aligned+0x12>
 8008480:	f000 fe40 	bl	8009104 <_sbrk_r>
 8008484:	6030      	str	r0, [r6, #0]
 8008486:	4621      	mov	r1, r4
 8008488:	4628      	mov	r0, r5
 800848a:	f000 fe3b 	bl	8009104 <_sbrk_r>
 800848e:	1c43      	adds	r3, r0, #1
 8008490:	d00a      	beq.n	80084a8 <sbrk_aligned+0x34>
 8008492:	1cc4      	adds	r4, r0, #3
 8008494:	f024 0403 	bic.w	r4, r4, #3
 8008498:	42a0      	cmp	r0, r4
 800849a:	d007      	beq.n	80084ac <sbrk_aligned+0x38>
 800849c:	1a21      	subs	r1, r4, r0
 800849e:	4628      	mov	r0, r5
 80084a0:	f000 fe30 	bl	8009104 <_sbrk_r>
 80084a4:	3001      	adds	r0, #1
 80084a6:	d101      	bne.n	80084ac <sbrk_aligned+0x38>
 80084a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80084ac:	4620      	mov	r0, r4
 80084ae:	bd70      	pop	{r4, r5, r6, pc}
 80084b0:	20000504 	.word	0x20000504

080084b4 <_malloc_r>:
 80084b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084b8:	1ccd      	adds	r5, r1, #3
 80084ba:	f025 0503 	bic.w	r5, r5, #3
 80084be:	3508      	adds	r5, #8
 80084c0:	2d0c      	cmp	r5, #12
 80084c2:	bf38      	it	cc
 80084c4:	250c      	movcc	r5, #12
 80084c6:	2d00      	cmp	r5, #0
 80084c8:	4607      	mov	r7, r0
 80084ca:	db01      	blt.n	80084d0 <_malloc_r+0x1c>
 80084cc:	42a9      	cmp	r1, r5
 80084ce:	d905      	bls.n	80084dc <_malloc_r+0x28>
 80084d0:	230c      	movs	r3, #12
 80084d2:	603b      	str	r3, [r7, #0]
 80084d4:	2600      	movs	r6, #0
 80084d6:	4630      	mov	r0, r6
 80084d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80085b0 <_malloc_r+0xfc>
 80084e0:	f000 f868 	bl	80085b4 <__malloc_lock>
 80084e4:	f8d8 3000 	ldr.w	r3, [r8]
 80084e8:	461c      	mov	r4, r3
 80084ea:	bb5c      	cbnz	r4, 8008544 <_malloc_r+0x90>
 80084ec:	4629      	mov	r1, r5
 80084ee:	4638      	mov	r0, r7
 80084f0:	f7ff ffc0 	bl	8008474 <sbrk_aligned>
 80084f4:	1c43      	adds	r3, r0, #1
 80084f6:	4604      	mov	r4, r0
 80084f8:	d155      	bne.n	80085a6 <_malloc_r+0xf2>
 80084fa:	f8d8 4000 	ldr.w	r4, [r8]
 80084fe:	4626      	mov	r6, r4
 8008500:	2e00      	cmp	r6, #0
 8008502:	d145      	bne.n	8008590 <_malloc_r+0xdc>
 8008504:	2c00      	cmp	r4, #0
 8008506:	d048      	beq.n	800859a <_malloc_r+0xe6>
 8008508:	6823      	ldr	r3, [r4, #0]
 800850a:	4631      	mov	r1, r6
 800850c:	4638      	mov	r0, r7
 800850e:	eb04 0903 	add.w	r9, r4, r3
 8008512:	f000 fdf7 	bl	8009104 <_sbrk_r>
 8008516:	4581      	cmp	r9, r0
 8008518:	d13f      	bne.n	800859a <_malloc_r+0xe6>
 800851a:	6821      	ldr	r1, [r4, #0]
 800851c:	1a6d      	subs	r5, r5, r1
 800851e:	4629      	mov	r1, r5
 8008520:	4638      	mov	r0, r7
 8008522:	f7ff ffa7 	bl	8008474 <sbrk_aligned>
 8008526:	3001      	adds	r0, #1
 8008528:	d037      	beq.n	800859a <_malloc_r+0xe6>
 800852a:	6823      	ldr	r3, [r4, #0]
 800852c:	442b      	add	r3, r5
 800852e:	6023      	str	r3, [r4, #0]
 8008530:	f8d8 3000 	ldr.w	r3, [r8]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d038      	beq.n	80085aa <_malloc_r+0xf6>
 8008538:	685a      	ldr	r2, [r3, #4]
 800853a:	42a2      	cmp	r2, r4
 800853c:	d12b      	bne.n	8008596 <_malloc_r+0xe2>
 800853e:	2200      	movs	r2, #0
 8008540:	605a      	str	r2, [r3, #4]
 8008542:	e00f      	b.n	8008564 <_malloc_r+0xb0>
 8008544:	6822      	ldr	r2, [r4, #0]
 8008546:	1b52      	subs	r2, r2, r5
 8008548:	d41f      	bmi.n	800858a <_malloc_r+0xd6>
 800854a:	2a0b      	cmp	r2, #11
 800854c:	d917      	bls.n	800857e <_malloc_r+0xca>
 800854e:	1961      	adds	r1, r4, r5
 8008550:	42a3      	cmp	r3, r4
 8008552:	6025      	str	r5, [r4, #0]
 8008554:	bf18      	it	ne
 8008556:	6059      	strne	r1, [r3, #4]
 8008558:	6863      	ldr	r3, [r4, #4]
 800855a:	bf08      	it	eq
 800855c:	f8c8 1000 	streq.w	r1, [r8]
 8008560:	5162      	str	r2, [r4, r5]
 8008562:	604b      	str	r3, [r1, #4]
 8008564:	4638      	mov	r0, r7
 8008566:	f104 060b 	add.w	r6, r4, #11
 800856a:	f000 f829 	bl	80085c0 <__malloc_unlock>
 800856e:	f026 0607 	bic.w	r6, r6, #7
 8008572:	1d23      	adds	r3, r4, #4
 8008574:	1af2      	subs	r2, r6, r3
 8008576:	d0ae      	beq.n	80084d6 <_malloc_r+0x22>
 8008578:	1b9b      	subs	r3, r3, r6
 800857a:	50a3      	str	r3, [r4, r2]
 800857c:	e7ab      	b.n	80084d6 <_malloc_r+0x22>
 800857e:	42a3      	cmp	r3, r4
 8008580:	6862      	ldr	r2, [r4, #4]
 8008582:	d1dd      	bne.n	8008540 <_malloc_r+0x8c>
 8008584:	f8c8 2000 	str.w	r2, [r8]
 8008588:	e7ec      	b.n	8008564 <_malloc_r+0xb0>
 800858a:	4623      	mov	r3, r4
 800858c:	6864      	ldr	r4, [r4, #4]
 800858e:	e7ac      	b.n	80084ea <_malloc_r+0x36>
 8008590:	4634      	mov	r4, r6
 8008592:	6876      	ldr	r6, [r6, #4]
 8008594:	e7b4      	b.n	8008500 <_malloc_r+0x4c>
 8008596:	4613      	mov	r3, r2
 8008598:	e7cc      	b.n	8008534 <_malloc_r+0x80>
 800859a:	230c      	movs	r3, #12
 800859c:	603b      	str	r3, [r7, #0]
 800859e:	4638      	mov	r0, r7
 80085a0:	f000 f80e 	bl	80085c0 <__malloc_unlock>
 80085a4:	e797      	b.n	80084d6 <_malloc_r+0x22>
 80085a6:	6025      	str	r5, [r4, #0]
 80085a8:	e7dc      	b.n	8008564 <_malloc_r+0xb0>
 80085aa:	605b      	str	r3, [r3, #4]
 80085ac:	deff      	udf	#255	; 0xff
 80085ae:	bf00      	nop
 80085b0:	20000500 	.word	0x20000500

080085b4 <__malloc_lock>:
 80085b4:	4801      	ldr	r0, [pc, #4]	; (80085bc <__malloc_lock+0x8>)
 80085b6:	f7ff b87d 	b.w	80076b4 <__retarget_lock_acquire_recursive>
 80085ba:	bf00      	nop
 80085bc:	200004fc 	.word	0x200004fc

080085c0 <__malloc_unlock>:
 80085c0:	4801      	ldr	r0, [pc, #4]	; (80085c8 <__malloc_unlock+0x8>)
 80085c2:	f7ff b878 	b.w	80076b6 <__retarget_lock_release_recursive>
 80085c6:	bf00      	nop
 80085c8:	200004fc 	.word	0x200004fc

080085cc <_Balloc>:
 80085cc:	b570      	push	{r4, r5, r6, lr}
 80085ce:	69c6      	ldr	r6, [r0, #28]
 80085d0:	4604      	mov	r4, r0
 80085d2:	460d      	mov	r5, r1
 80085d4:	b976      	cbnz	r6, 80085f4 <_Balloc+0x28>
 80085d6:	2010      	movs	r0, #16
 80085d8:	f7ff ff44 	bl	8008464 <malloc>
 80085dc:	4602      	mov	r2, r0
 80085de:	61e0      	str	r0, [r4, #28]
 80085e0:	b920      	cbnz	r0, 80085ec <_Balloc+0x20>
 80085e2:	4b18      	ldr	r3, [pc, #96]	; (8008644 <_Balloc+0x78>)
 80085e4:	4818      	ldr	r0, [pc, #96]	; (8008648 <_Balloc+0x7c>)
 80085e6:	216b      	movs	r1, #107	; 0x6b
 80085e8:	f000 fd9c 	bl	8009124 <__assert_func>
 80085ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085f0:	6006      	str	r6, [r0, #0]
 80085f2:	60c6      	str	r6, [r0, #12]
 80085f4:	69e6      	ldr	r6, [r4, #28]
 80085f6:	68f3      	ldr	r3, [r6, #12]
 80085f8:	b183      	cbz	r3, 800861c <_Balloc+0x50>
 80085fa:	69e3      	ldr	r3, [r4, #28]
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008602:	b9b8      	cbnz	r0, 8008634 <_Balloc+0x68>
 8008604:	2101      	movs	r1, #1
 8008606:	fa01 f605 	lsl.w	r6, r1, r5
 800860a:	1d72      	adds	r2, r6, #5
 800860c:	0092      	lsls	r2, r2, #2
 800860e:	4620      	mov	r0, r4
 8008610:	f000 fda6 	bl	8009160 <_calloc_r>
 8008614:	b160      	cbz	r0, 8008630 <_Balloc+0x64>
 8008616:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800861a:	e00e      	b.n	800863a <_Balloc+0x6e>
 800861c:	2221      	movs	r2, #33	; 0x21
 800861e:	2104      	movs	r1, #4
 8008620:	4620      	mov	r0, r4
 8008622:	f000 fd9d 	bl	8009160 <_calloc_r>
 8008626:	69e3      	ldr	r3, [r4, #28]
 8008628:	60f0      	str	r0, [r6, #12]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1e4      	bne.n	80085fa <_Balloc+0x2e>
 8008630:	2000      	movs	r0, #0
 8008632:	bd70      	pop	{r4, r5, r6, pc}
 8008634:	6802      	ldr	r2, [r0, #0]
 8008636:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800863a:	2300      	movs	r3, #0
 800863c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008640:	e7f7      	b.n	8008632 <_Balloc+0x66>
 8008642:	bf00      	nop
 8008644:	0800a2f9 	.word	0x0800a2f9
 8008648:	0800a379 	.word	0x0800a379

0800864c <_Bfree>:
 800864c:	b570      	push	{r4, r5, r6, lr}
 800864e:	69c6      	ldr	r6, [r0, #28]
 8008650:	4605      	mov	r5, r0
 8008652:	460c      	mov	r4, r1
 8008654:	b976      	cbnz	r6, 8008674 <_Bfree+0x28>
 8008656:	2010      	movs	r0, #16
 8008658:	f7ff ff04 	bl	8008464 <malloc>
 800865c:	4602      	mov	r2, r0
 800865e:	61e8      	str	r0, [r5, #28]
 8008660:	b920      	cbnz	r0, 800866c <_Bfree+0x20>
 8008662:	4b09      	ldr	r3, [pc, #36]	; (8008688 <_Bfree+0x3c>)
 8008664:	4809      	ldr	r0, [pc, #36]	; (800868c <_Bfree+0x40>)
 8008666:	218f      	movs	r1, #143	; 0x8f
 8008668:	f000 fd5c 	bl	8009124 <__assert_func>
 800866c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008670:	6006      	str	r6, [r0, #0]
 8008672:	60c6      	str	r6, [r0, #12]
 8008674:	b13c      	cbz	r4, 8008686 <_Bfree+0x3a>
 8008676:	69eb      	ldr	r3, [r5, #28]
 8008678:	6862      	ldr	r2, [r4, #4]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008680:	6021      	str	r1, [r4, #0]
 8008682:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008686:	bd70      	pop	{r4, r5, r6, pc}
 8008688:	0800a2f9 	.word	0x0800a2f9
 800868c:	0800a379 	.word	0x0800a379

08008690 <__multadd>:
 8008690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008694:	690d      	ldr	r5, [r1, #16]
 8008696:	4607      	mov	r7, r0
 8008698:	460c      	mov	r4, r1
 800869a:	461e      	mov	r6, r3
 800869c:	f101 0c14 	add.w	ip, r1, #20
 80086a0:	2000      	movs	r0, #0
 80086a2:	f8dc 3000 	ldr.w	r3, [ip]
 80086a6:	b299      	uxth	r1, r3
 80086a8:	fb02 6101 	mla	r1, r2, r1, r6
 80086ac:	0c1e      	lsrs	r6, r3, #16
 80086ae:	0c0b      	lsrs	r3, r1, #16
 80086b0:	fb02 3306 	mla	r3, r2, r6, r3
 80086b4:	b289      	uxth	r1, r1
 80086b6:	3001      	adds	r0, #1
 80086b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80086bc:	4285      	cmp	r5, r0
 80086be:	f84c 1b04 	str.w	r1, [ip], #4
 80086c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80086c6:	dcec      	bgt.n	80086a2 <__multadd+0x12>
 80086c8:	b30e      	cbz	r6, 800870e <__multadd+0x7e>
 80086ca:	68a3      	ldr	r3, [r4, #8]
 80086cc:	42ab      	cmp	r3, r5
 80086ce:	dc19      	bgt.n	8008704 <__multadd+0x74>
 80086d0:	6861      	ldr	r1, [r4, #4]
 80086d2:	4638      	mov	r0, r7
 80086d4:	3101      	adds	r1, #1
 80086d6:	f7ff ff79 	bl	80085cc <_Balloc>
 80086da:	4680      	mov	r8, r0
 80086dc:	b928      	cbnz	r0, 80086ea <__multadd+0x5a>
 80086de:	4602      	mov	r2, r0
 80086e0:	4b0c      	ldr	r3, [pc, #48]	; (8008714 <__multadd+0x84>)
 80086e2:	480d      	ldr	r0, [pc, #52]	; (8008718 <__multadd+0x88>)
 80086e4:	21ba      	movs	r1, #186	; 0xba
 80086e6:	f000 fd1d 	bl	8009124 <__assert_func>
 80086ea:	6922      	ldr	r2, [r4, #16]
 80086ec:	3202      	adds	r2, #2
 80086ee:	f104 010c 	add.w	r1, r4, #12
 80086f2:	0092      	lsls	r2, r2, #2
 80086f4:	300c      	adds	r0, #12
 80086f6:	f7fe ffdf 	bl	80076b8 <memcpy>
 80086fa:	4621      	mov	r1, r4
 80086fc:	4638      	mov	r0, r7
 80086fe:	f7ff ffa5 	bl	800864c <_Bfree>
 8008702:	4644      	mov	r4, r8
 8008704:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008708:	3501      	adds	r5, #1
 800870a:	615e      	str	r6, [r3, #20]
 800870c:	6125      	str	r5, [r4, #16]
 800870e:	4620      	mov	r0, r4
 8008710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008714:	0800a368 	.word	0x0800a368
 8008718:	0800a379 	.word	0x0800a379

0800871c <__hi0bits>:
 800871c:	0c03      	lsrs	r3, r0, #16
 800871e:	041b      	lsls	r3, r3, #16
 8008720:	b9d3      	cbnz	r3, 8008758 <__hi0bits+0x3c>
 8008722:	0400      	lsls	r0, r0, #16
 8008724:	2310      	movs	r3, #16
 8008726:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800872a:	bf04      	itt	eq
 800872c:	0200      	lsleq	r0, r0, #8
 800872e:	3308      	addeq	r3, #8
 8008730:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008734:	bf04      	itt	eq
 8008736:	0100      	lsleq	r0, r0, #4
 8008738:	3304      	addeq	r3, #4
 800873a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800873e:	bf04      	itt	eq
 8008740:	0080      	lsleq	r0, r0, #2
 8008742:	3302      	addeq	r3, #2
 8008744:	2800      	cmp	r0, #0
 8008746:	db05      	blt.n	8008754 <__hi0bits+0x38>
 8008748:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800874c:	f103 0301 	add.w	r3, r3, #1
 8008750:	bf08      	it	eq
 8008752:	2320      	moveq	r3, #32
 8008754:	4618      	mov	r0, r3
 8008756:	4770      	bx	lr
 8008758:	2300      	movs	r3, #0
 800875a:	e7e4      	b.n	8008726 <__hi0bits+0xa>

0800875c <__lo0bits>:
 800875c:	6803      	ldr	r3, [r0, #0]
 800875e:	f013 0207 	ands.w	r2, r3, #7
 8008762:	d00c      	beq.n	800877e <__lo0bits+0x22>
 8008764:	07d9      	lsls	r1, r3, #31
 8008766:	d422      	bmi.n	80087ae <__lo0bits+0x52>
 8008768:	079a      	lsls	r2, r3, #30
 800876a:	bf49      	itett	mi
 800876c:	085b      	lsrmi	r3, r3, #1
 800876e:	089b      	lsrpl	r3, r3, #2
 8008770:	6003      	strmi	r3, [r0, #0]
 8008772:	2201      	movmi	r2, #1
 8008774:	bf5c      	itt	pl
 8008776:	6003      	strpl	r3, [r0, #0]
 8008778:	2202      	movpl	r2, #2
 800877a:	4610      	mov	r0, r2
 800877c:	4770      	bx	lr
 800877e:	b299      	uxth	r1, r3
 8008780:	b909      	cbnz	r1, 8008786 <__lo0bits+0x2a>
 8008782:	0c1b      	lsrs	r3, r3, #16
 8008784:	2210      	movs	r2, #16
 8008786:	b2d9      	uxtb	r1, r3
 8008788:	b909      	cbnz	r1, 800878e <__lo0bits+0x32>
 800878a:	3208      	adds	r2, #8
 800878c:	0a1b      	lsrs	r3, r3, #8
 800878e:	0719      	lsls	r1, r3, #28
 8008790:	bf04      	itt	eq
 8008792:	091b      	lsreq	r3, r3, #4
 8008794:	3204      	addeq	r2, #4
 8008796:	0799      	lsls	r1, r3, #30
 8008798:	bf04      	itt	eq
 800879a:	089b      	lsreq	r3, r3, #2
 800879c:	3202      	addeq	r2, #2
 800879e:	07d9      	lsls	r1, r3, #31
 80087a0:	d403      	bmi.n	80087aa <__lo0bits+0x4e>
 80087a2:	085b      	lsrs	r3, r3, #1
 80087a4:	f102 0201 	add.w	r2, r2, #1
 80087a8:	d003      	beq.n	80087b2 <__lo0bits+0x56>
 80087aa:	6003      	str	r3, [r0, #0]
 80087ac:	e7e5      	b.n	800877a <__lo0bits+0x1e>
 80087ae:	2200      	movs	r2, #0
 80087b0:	e7e3      	b.n	800877a <__lo0bits+0x1e>
 80087b2:	2220      	movs	r2, #32
 80087b4:	e7e1      	b.n	800877a <__lo0bits+0x1e>
	...

080087b8 <__i2b>:
 80087b8:	b510      	push	{r4, lr}
 80087ba:	460c      	mov	r4, r1
 80087bc:	2101      	movs	r1, #1
 80087be:	f7ff ff05 	bl	80085cc <_Balloc>
 80087c2:	4602      	mov	r2, r0
 80087c4:	b928      	cbnz	r0, 80087d2 <__i2b+0x1a>
 80087c6:	4b05      	ldr	r3, [pc, #20]	; (80087dc <__i2b+0x24>)
 80087c8:	4805      	ldr	r0, [pc, #20]	; (80087e0 <__i2b+0x28>)
 80087ca:	f240 1145 	movw	r1, #325	; 0x145
 80087ce:	f000 fca9 	bl	8009124 <__assert_func>
 80087d2:	2301      	movs	r3, #1
 80087d4:	6144      	str	r4, [r0, #20]
 80087d6:	6103      	str	r3, [r0, #16]
 80087d8:	bd10      	pop	{r4, pc}
 80087da:	bf00      	nop
 80087dc:	0800a368 	.word	0x0800a368
 80087e0:	0800a379 	.word	0x0800a379

080087e4 <__multiply>:
 80087e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e8:	4691      	mov	r9, r2
 80087ea:	690a      	ldr	r2, [r1, #16]
 80087ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	bfb8      	it	lt
 80087f4:	460b      	movlt	r3, r1
 80087f6:	460c      	mov	r4, r1
 80087f8:	bfbc      	itt	lt
 80087fa:	464c      	movlt	r4, r9
 80087fc:	4699      	movlt	r9, r3
 80087fe:	6927      	ldr	r7, [r4, #16]
 8008800:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008804:	68a3      	ldr	r3, [r4, #8]
 8008806:	6861      	ldr	r1, [r4, #4]
 8008808:	eb07 060a 	add.w	r6, r7, sl
 800880c:	42b3      	cmp	r3, r6
 800880e:	b085      	sub	sp, #20
 8008810:	bfb8      	it	lt
 8008812:	3101      	addlt	r1, #1
 8008814:	f7ff feda 	bl	80085cc <_Balloc>
 8008818:	b930      	cbnz	r0, 8008828 <__multiply+0x44>
 800881a:	4602      	mov	r2, r0
 800881c:	4b44      	ldr	r3, [pc, #272]	; (8008930 <__multiply+0x14c>)
 800881e:	4845      	ldr	r0, [pc, #276]	; (8008934 <__multiply+0x150>)
 8008820:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008824:	f000 fc7e 	bl	8009124 <__assert_func>
 8008828:	f100 0514 	add.w	r5, r0, #20
 800882c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008830:	462b      	mov	r3, r5
 8008832:	2200      	movs	r2, #0
 8008834:	4543      	cmp	r3, r8
 8008836:	d321      	bcc.n	800887c <__multiply+0x98>
 8008838:	f104 0314 	add.w	r3, r4, #20
 800883c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008840:	f109 0314 	add.w	r3, r9, #20
 8008844:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008848:	9202      	str	r2, [sp, #8]
 800884a:	1b3a      	subs	r2, r7, r4
 800884c:	3a15      	subs	r2, #21
 800884e:	f022 0203 	bic.w	r2, r2, #3
 8008852:	3204      	adds	r2, #4
 8008854:	f104 0115 	add.w	r1, r4, #21
 8008858:	428f      	cmp	r7, r1
 800885a:	bf38      	it	cc
 800885c:	2204      	movcc	r2, #4
 800885e:	9201      	str	r2, [sp, #4]
 8008860:	9a02      	ldr	r2, [sp, #8]
 8008862:	9303      	str	r3, [sp, #12]
 8008864:	429a      	cmp	r2, r3
 8008866:	d80c      	bhi.n	8008882 <__multiply+0x9e>
 8008868:	2e00      	cmp	r6, #0
 800886a:	dd03      	ble.n	8008874 <__multiply+0x90>
 800886c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008870:	2b00      	cmp	r3, #0
 8008872:	d05b      	beq.n	800892c <__multiply+0x148>
 8008874:	6106      	str	r6, [r0, #16]
 8008876:	b005      	add	sp, #20
 8008878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800887c:	f843 2b04 	str.w	r2, [r3], #4
 8008880:	e7d8      	b.n	8008834 <__multiply+0x50>
 8008882:	f8b3 a000 	ldrh.w	sl, [r3]
 8008886:	f1ba 0f00 	cmp.w	sl, #0
 800888a:	d024      	beq.n	80088d6 <__multiply+0xf2>
 800888c:	f104 0e14 	add.w	lr, r4, #20
 8008890:	46a9      	mov	r9, r5
 8008892:	f04f 0c00 	mov.w	ip, #0
 8008896:	f85e 2b04 	ldr.w	r2, [lr], #4
 800889a:	f8d9 1000 	ldr.w	r1, [r9]
 800889e:	fa1f fb82 	uxth.w	fp, r2
 80088a2:	b289      	uxth	r1, r1
 80088a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80088a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80088ac:	f8d9 2000 	ldr.w	r2, [r9]
 80088b0:	4461      	add	r1, ip
 80088b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80088b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80088ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80088be:	b289      	uxth	r1, r1
 80088c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80088c4:	4577      	cmp	r7, lr
 80088c6:	f849 1b04 	str.w	r1, [r9], #4
 80088ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80088ce:	d8e2      	bhi.n	8008896 <__multiply+0xb2>
 80088d0:	9a01      	ldr	r2, [sp, #4]
 80088d2:	f845 c002 	str.w	ip, [r5, r2]
 80088d6:	9a03      	ldr	r2, [sp, #12]
 80088d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80088dc:	3304      	adds	r3, #4
 80088de:	f1b9 0f00 	cmp.w	r9, #0
 80088e2:	d021      	beq.n	8008928 <__multiply+0x144>
 80088e4:	6829      	ldr	r1, [r5, #0]
 80088e6:	f104 0c14 	add.w	ip, r4, #20
 80088ea:	46ae      	mov	lr, r5
 80088ec:	f04f 0a00 	mov.w	sl, #0
 80088f0:	f8bc b000 	ldrh.w	fp, [ip]
 80088f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80088f8:	fb09 220b 	mla	r2, r9, fp, r2
 80088fc:	4452      	add	r2, sl
 80088fe:	b289      	uxth	r1, r1
 8008900:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008904:	f84e 1b04 	str.w	r1, [lr], #4
 8008908:	f85c 1b04 	ldr.w	r1, [ip], #4
 800890c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008910:	f8be 1000 	ldrh.w	r1, [lr]
 8008914:	fb09 110a 	mla	r1, r9, sl, r1
 8008918:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800891c:	4567      	cmp	r7, ip
 800891e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008922:	d8e5      	bhi.n	80088f0 <__multiply+0x10c>
 8008924:	9a01      	ldr	r2, [sp, #4]
 8008926:	50a9      	str	r1, [r5, r2]
 8008928:	3504      	adds	r5, #4
 800892a:	e799      	b.n	8008860 <__multiply+0x7c>
 800892c:	3e01      	subs	r6, #1
 800892e:	e79b      	b.n	8008868 <__multiply+0x84>
 8008930:	0800a368 	.word	0x0800a368
 8008934:	0800a379 	.word	0x0800a379

08008938 <__pow5mult>:
 8008938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800893c:	4615      	mov	r5, r2
 800893e:	f012 0203 	ands.w	r2, r2, #3
 8008942:	4606      	mov	r6, r0
 8008944:	460f      	mov	r7, r1
 8008946:	d007      	beq.n	8008958 <__pow5mult+0x20>
 8008948:	4c25      	ldr	r4, [pc, #148]	; (80089e0 <__pow5mult+0xa8>)
 800894a:	3a01      	subs	r2, #1
 800894c:	2300      	movs	r3, #0
 800894e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008952:	f7ff fe9d 	bl	8008690 <__multadd>
 8008956:	4607      	mov	r7, r0
 8008958:	10ad      	asrs	r5, r5, #2
 800895a:	d03d      	beq.n	80089d8 <__pow5mult+0xa0>
 800895c:	69f4      	ldr	r4, [r6, #28]
 800895e:	b97c      	cbnz	r4, 8008980 <__pow5mult+0x48>
 8008960:	2010      	movs	r0, #16
 8008962:	f7ff fd7f 	bl	8008464 <malloc>
 8008966:	4602      	mov	r2, r0
 8008968:	61f0      	str	r0, [r6, #28]
 800896a:	b928      	cbnz	r0, 8008978 <__pow5mult+0x40>
 800896c:	4b1d      	ldr	r3, [pc, #116]	; (80089e4 <__pow5mult+0xac>)
 800896e:	481e      	ldr	r0, [pc, #120]	; (80089e8 <__pow5mult+0xb0>)
 8008970:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008974:	f000 fbd6 	bl	8009124 <__assert_func>
 8008978:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800897c:	6004      	str	r4, [r0, #0]
 800897e:	60c4      	str	r4, [r0, #12]
 8008980:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008984:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008988:	b94c      	cbnz	r4, 800899e <__pow5mult+0x66>
 800898a:	f240 2171 	movw	r1, #625	; 0x271
 800898e:	4630      	mov	r0, r6
 8008990:	f7ff ff12 	bl	80087b8 <__i2b>
 8008994:	2300      	movs	r3, #0
 8008996:	f8c8 0008 	str.w	r0, [r8, #8]
 800899a:	4604      	mov	r4, r0
 800899c:	6003      	str	r3, [r0, #0]
 800899e:	f04f 0900 	mov.w	r9, #0
 80089a2:	07eb      	lsls	r3, r5, #31
 80089a4:	d50a      	bpl.n	80089bc <__pow5mult+0x84>
 80089a6:	4639      	mov	r1, r7
 80089a8:	4622      	mov	r2, r4
 80089aa:	4630      	mov	r0, r6
 80089ac:	f7ff ff1a 	bl	80087e4 <__multiply>
 80089b0:	4639      	mov	r1, r7
 80089b2:	4680      	mov	r8, r0
 80089b4:	4630      	mov	r0, r6
 80089b6:	f7ff fe49 	bl	800864c <_Bfree>
 80089ba:	4647      	mov	r7, r8
 80089bc:	106d      	asrs	r5, r5, #1
 80089be:	d00b      	beq.n	80089d8 <__pow5mult+0xa0>
 80089c0:	6820      	ldr	r0, [r4, #0]
 80089c2:	b938      	cbnz	r0, 80089d4 <__pow5mult+0x9c>
 80089c4:	4622      	mov	r2, r4
 80089c6:	4621      	mov	r1, r4
 80089c8:	4630      	mov	r0, r6
 80089ca:	f7ff ff0b 	bl	80087e4 <__multiply>
 80089ce:	6020      	str	r0, [r4, #0]
 80089d0:	f8c0 9000 	str.w	r9, [r0]
 80089d4:	4604      	mov	r4, r0
 80089d6:	e7e4      	b.n	80089a2 <__pow5mult+0x6a>
 80089d8:	4638      	mov	r0, r7
 80089da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089de:	bf00      	nop
 80089e0:	0800a4c8 	.word	0x0800a4c8
 80089e4:	0800a2f9 	.word	0x0800a2f9
 80089e8:	0800a379 	.word	0x0800a379

080089ec <__lshift>:
 80089ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089f0:	460c      	mov	r4, r1
 80089f2:	6849      	ldr	r1, [r1, #4]
 80089f4:	6923      	ldr	r3, [r4, #16]
 80089f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80089fa:	68a3      	ldr	r3, [r4, #8]
 80089fc:	4607      	mov	r7, r0
 80089fe:	4691      	mov	r9, r2
 8008a00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a04:	f108 0601 	add.w	r6, r8, #1
 8008a08:	42b3      	cmp	r3, r6
 8008a0a:	db0b      	blt.n	8008a24 <__lshift+0x38>
 8008a0c:	4638      	mov	r0, r7
 8008a0e:	f7ff fddd 	bl	80085cc <_Balloc>
 8008a12:	4605      	mov	r5, r0
 8008a14:	b948      	cbnz	r0, 8008a2a <__lshift+0x3e>
 8008a16:	4602      	mov	r2, r0
 8008a18:	4b28      	ldr	r3, [pc, #160]	; (8008abc <__lshift+0xd0>)
 8008a1a:	4829      	ldr	r0, [pc, #164]	; (8008ac0 <__lshift+0xd4>)
 8008a1c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008a20:	f000 fb80 	bl	8009124 <__assert_func>
 8008a24:	3101      	adds	r1, #1
 8008a26:	005b      	lsls	r3, r3, #1
 8008a28:	e7ee      	b.n	8008a08 <__lshift+0x1c>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	f100 0114 	add.w	r1, r0, #20
 8008a30:	f100 0210 	add.w	r2, r0, #16
 8008a34:	4618      	mov	r0, r3
 8008a36:	4553      	cmp	r3, sl
 8008a38:	db33      	blt.n	8008aa2 <__lshift+0xb6>
 8008a3a:	6920      	ldr	r0, [r4, #16]
 8008a3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a40:	f104 0314 	add.w	r3, r4, #20
 8008a44:	f019 091f 	ands.w	r9, r9, #31
 8008a48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a50:	d02b      	beq.n	8008aaa <__lshift+0xbe>
 8008a52:	f1c9 0e20 	rsb	lr, r9, #32
 8008a56:	468a      	mov	sl, r1
 8008a58:	2200      	movs	r2, #0
 8008a5a:	6818      	ldr	r0, [r3, #0]
 8008a5c:	fa00 f009 	lsl.w	r0, r0, r9
 8008a60:	4310      	orrs	r0, r2
 8008a62:	f84a 0b04 	str.w	r0, [sl], #4
 8008a66:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a6a:	459c      	cmp	ip, r3
 8008a6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a70:	d8f3      	bhi.n	8008a5a <__lshift+0x6e>
 8008a72:	ebac 0304 	sub.w	r3, ip, r4
 8008a76:	3b15      	subs	r3, #21
 8008a78:	f023 0303 	bic.w	r3, r3, #3
 8008a7c:	3304      	adds	r3, #4
 8008a7e:	f104 0015 	add.w	r0, r4, #21
 8008a82:	4584      	cmp	ip, r0
 8008a84:	bf38      	it	cc
 8008a86:	2304      	movcc	r3, #4
 8008a88:	50ca      	str	r2, [r1, r3]
 8008a8a:	b10a      	cbz	r2, 8008a90 <__lshift+0xa4>
 8008a8c:	f108 0602 	add.w	r6, r8, #2
 8008a90:	3e01      	subs	r6, #1
 8008a92:	4638      	mov	r0, r7
 8008a94:	612e      	str	r6, [r5, #16]
 8008a96:	4621      	mov	r1, r4
 8008a98:	f7ff fdd8 	bl	800864c <_Bfree>
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aa2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	e7c5      	b.n	8008a36 <__lshift+0x4a>
 8008aaa:	3904      	subs	r1, #4
 8008aac:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ab0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ab4:	459c      	cmp	ip, r3
 8008ab6:	d8f9      	bhi.n	8008aac <__lshift+0xc0>
 8008ab8:	e7ea      	b.n	8008a90 <__lshift+0xa4>
 8008aba:	bf00      	nop
 8008abc:	0800a368 	.word	0x0800a368
 8008ac0:	0800a379 	.word	0x0800a379

08008ac4 <__mcmp>:
 8008ac4:	b530      	push	{r4, r5, lr}
 8008ac6:	6902      	ldr	r2, [r0, #16]
 8008ac8:	690c      	ldr	r4, [r1, #16]
 8008aca:	1b12      	subs	r2, r2, r4
 8008acc:	d10e      	bne.n	8008aec <__mcmp+0x28>
 8008ace:	f100 0314 	add.w	r3, r0, #20
 8008ad2:	3114      	adds	r1, #20
 8008ad4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008ad8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008adc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008ae0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008ae4:	42a5      	cmp	r5, r4
 8008ae6:	d003      	beq.n	8008af0 <__mcmp+0x2c>
 8008ae8:	d305      	bcc.n	8008af6 <__mcmp+0x32>
 8008aea:	2201      	movs	r2, #1
 8008aec:	4610      	mov	r0, r2
 8008aee:	bd30      	pop	{r4, r5, pc}
 8008af0:	4283      	cmp	r3, r0
 8008af2:	d3f3      	bcc.n	8008adc <__mcmp+0x18>
 8008af4:	e7fa      	b.n	8008aec <__mcmp+0x28>
 8008af6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008afa:	e7f7      	b.n	8008aec <__mcmp+0x28>

08008afc <__mdiff>:
 8008afc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b00:	460c      	mov	r4, r1
 8008b02:	4606      	mov	r6, r0
 8008b04:	4611      	mov	r1, r2
 8008b06:	4620      	mov	r0, r4
 8008b08:	4690      	mov	r8, r2
 8008b0a:	f7ff ffdb 	bl	8008ac4 <__mcmp>
 8008b0e:	1e05      	subs	r5, r0, #0
 8008b10:	d110      	bne.n	8008b34 <__mdiff+0x38>
 8008b12:	4629      	mov	r1, r5
 8008b14:	4630      	mov	r0, r6
 8008b16:	f7ff fd59 	bl	80085cc <_Balloc>
 8008b1a:	b930      	cbnz	r0, 8008b2a <__mdiff+0x2e>
 8008b1c:	4b3a      	ldr	r3, [pc, #232]	; (8008c08 <__mdiff+0x10c>)
 8008b1e:	4602      	mov	r2, r0
 8008b20:	f240 2137 	movw	r1, #567	; 0x237
 8008b24:	4839      	ldr	r0, [pc, #228]	; (8008c0c <__mdiff+0x110>)
 8008b26:	f000 fafd 	bl	8009124 <__assert_func>
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b34:	bfa4      	itt	ge
 8008b36:	4643      	movge	r3, r8
 8008b38:	46a0      	movge	r8, r4
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008b40:	bfa6      	itte	ge
 8008b42:	461c      	movge	r4, r3
 8008b44:	2500      	movge	r5, #0
 8008b46:	2501      	movlt	r5, #1
 8008b48:	f7ff fd40 	bl	80085cc <_Balloc>
 8008b4c:	b920      	cbnz	r0, 8008b58 <__mdiff+0x5c>
 8008b4e:	4b2e      	ldr	r3, [pc, #184]	; (8008c08 <__mdiff+0x10c>)
 8008b50:	4602      	mov	r2, r0
 8008b52:	f240 2145 	movw	r1, #581	; 0x245
 8008b56:	e7e5      	b.n	8008b24 <__mdiff+0x28>
 8008b58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008b5c:	6926      	ldr	r6, [r4, #16]
 8008b5e:	60c5      	str	r5, [r0, #12]
 8008b60:	f104 0914 	add.w	r9, r4, #20
 8008b64:	f108 0514 	add.w	r5, r8, #20
 8008b68:	f100 0e14 	add.w	lr, r0, #20
 8008b6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008b70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008b74:	f108 0210 	add.w	r2, r8, #16
 8008b78:	46f2      	mov	sl, lr
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008b84:	fa11 f88b 	uxtah	r8, r1, fp
 8008b88:	b299      	uxth	r1, r3
 8008b8a:	0c1b      	lsrs	r3, r3, #16
 8008b8c:	eba8 0801 	sub.w	r8, r8, r1
 8008b90:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008b94:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008b98:	fa1f f888 	uxth.w	r8, r8
 8008b9c:	1419      	asrs	r1, r3, #16
 8008b9e:	454e      	cmp	r6, r9
 8008ba0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008ba4:	f84a 3b04 	str.w	r3, [sl], #4
 8008ba8:	d8e8      	bhi.n	8008b7c <__mdiff+0x80>
 8008baa:	1b33      	subs	r3, r6, r4
 8008bac:	3b15      	subs	r3, #21
 8008bae:	f023 0303 	bic.w	r3, r3, #3
 8008bb2:	3304      	adds	r3, #4
 8008bb4:	3415      	adds	r4, #21
 8008bb6:	42a6      	cmp	r6, r4
 8008bb8:	bf38      	it	cc
 8008bba:	2304      	movcc	r3, #4
 8008bbc:	441d      	add	r5, r3
 8008bbe:	4473      	add	r3, lr
 8008bc0:	469e      	mov	lr, r3
 8008bc2:	462e      	mov	r6, r5
 8008bc4:	4566      	cmp	r6, ip
 8008bc6:	d30e      	bcc.n	8008be6 <__mdiff+0xea>
 8008bc8:	f10c 0203 	add.w	r2, ip, #3
 8008bcc:	1b52      	subs	r2, r2, r5
 8008bce:	f022 0203 	bic.w	r2, r2, #3
 8008bd2:	3d03      	subs	r5, #3
 8008bd4:	45ac      	cmp	ip, r5
 8008bd6:	bf38      	it	cc
 8008bd8:	2200      	movcc	r2, #0
 8008bda:	4413      	add	r3, r2
 8008bdc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008be0:	b17a      	cbz	r2, 8008c02 <__mdiff+0x106>
 8008be2:	6107      	str	r7, [r0, #16]
 8008be4:	e7a4      	b.n	8008b30 <__mdiff+0x34>
 8008be6:	f856 8b04 	ldr.w	r8, [r6], #4
 8008bea:	fa11 f288 	uxtah	r2, r1, r8
 8008bee:	1414      	asrs	r4, r2, #16
 8008bf0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008bf4:	b292      	uxth	r2, r2
 8008bf6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008bfa:	f84e 2b04 	str.w	r2, [lr], #4
 8008bfe:	1421      	asrs	r1, r4, #16
 8008c00:	e7e0      	b.n	8008bc4 <__mdiff+0xc8>
 8008c02:	3f01      	subs	r7, #1
 8008c04:	e7ea      	b.n	8008bdc <__mdiff+0xe0>
 8008c06:	bf00      	nop
 8008c08:	0800a368 	.word	0x0800a368
 8008c0c:	0800a379 	.word	0x0800a379

08008c10 <__d2b>:
 8008c10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c14:	460f      	mov	r7, r1
 8008c16:	2101      	movs	r1, #1
 8008c18:	ec59 8b10 	vmov	r8, r9, d0
 8008c1c:	4616      	mov	r6, r2
 8008c1e:	f7ff fcd5 	bl	80085cc <_Balloc>
 8008c22:	4604      	mov	r4, r0
 8008c24:	b930      	cbnz	r0, 8008c34 <__d2b+0x24>
 8008c26:	4602      	mov	r2, r0
 8008c28:	4b24      	ldr	r3, [pc, #144]	; (8008cbc <__d2b+0xac>)
 8008c2a:	4825      	ldr	r0, [pc, #148]	; (8008cc0 <__d2b+0xb0>)
 8008c2c:	f240 310f 	movw	r1, #783	; 0x30f
 8008c30:	f000 fa78 	bl	8009124 <__assert_func>
 8008c34:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008c38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c3c:	bb2d      	cbnz	r5, 8008c8a <__d2b+0x7a>
 8008c3e:	9301      	str	r3, [sp, #4]
 8008c40:	f1b8 0300 	subs.w	r3, r8, #0
 8008c44:	d026      	beq.n	8008c94 <__d2b+0x84>
 8008c46:	4668      	mov	r0, sp
 8008c48:	9300      	str	r3, [sp, #0]
 8008c4a:	f7ff fd87 	bl	800875c <__lo0bits>
 8008c4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008c52:	b1e8      	cbz	r0, 8008c90 <__d2b+0x80>
 8008c54:	f1c0 0320 	rsb	r3, r0, #32
 8008c58:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5c:	430b      	orrs	r3, r1
 8008c5e:	40c2      	lsrs	r2, r0
 8008c60:	6163      	str	r3, [r4, #20]
 8008c62:	9201      	str	r2, [sp, #4]
 8008c64:	9b01      	ldr	r3, [sp, #4]
 8008c66:	61a3      	str	r3, [r4, #24]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	bf14      	ite	ne
 8008c6c:	2202      	movne	r2, #2
 8008c6e:	2201      	moveq	r2, #1
 8008c70:	6122      	str	r2, [r4, #16]
 8008c72:	b1bd      	cbz	r5, 8008ca4 <__d2b+0x94>
 8008c74:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c78:	4405      	add	r5, r0
 8008c7a:	603d      	str	r5, [r7, #0]
 8008c7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c80:	6030      	str	r0, [r6, #0]
 8008c82:	4620      	mov	r0, r4
 8008c84:	b003      	add	sp, #12
 8008c86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c8e:	e7d6      	b.n	8008c3e <__d2b+0x2e>
 8008c90:	6161      	str	r1, [r4, #20]
 8008c92:	e7e7      	b.n	8008c64 <__d2b+0x54>
 8008c94:	a801      	add	r0, sp, #4
 8008c96:	f7ff fd61 	bl	800875c <__lo0bits>
 8008c9a:	9b01      	ldr	r3, [sp, #4]
 8008c9c:	6163      	str	r3, [r4, #20]
 8008c9e:	3020      	adds	r0, #32
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	e7e5      	b.n	8008c70 <__d2b+0x60>
 8008ca4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ca8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008cac:	6038      	str	r0, [r7, #0]
 8008cae:	6918      	ldr	r0, [r3, #16]
 8008cb0:	f7ff fd34 	bl	800871c <__hi0bits>
 8008cb4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008cb8:	e7e2      	b.n	8008c80 <__d2b+0x70>
 8008cba:	bf00      	nop
 8008cbc:	0800a368 	.word	0x0800a368
 8008cc0:	0800a379 	.word	0x0800a379

08008cc4 <__ssputs_r>:
 8008cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc8:	688e      	ldr	r6, [r1, #8]
 8008cca:	461f      	mov	r7, r3
 8008ccc:	42be      	cmp	r6, r7
 8008cce:	680b      	ldr	r3, [r1, #0]
 8008cd0:	4682      	mov	sl, r0
 8008cd2:	460c      	mov	r4, r1
 8008cd4:	4690      	mov	r8, r2
 8008cd6:	d82c      	bhi.n	8008d32 <__ssputs_r+0x6e>
 8008cd8:	898a      	ldrh	r2, [r1, #12]
 8008cda:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008cde:	d026      	beq.n	8008d2e <__ssputs_r+0x6a>
 8008ce0:	6965      	ldr	r5, [r4, #20]
 8008ce2:	6909      	ldr	r1, [r1, #16]
 8008ce4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ce8:	eba3 0901 	sub.w	r9, r3, r1
 8008cec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cf0:	1c7b      	adds	r3, r7, #1
 8008cf2:	444b      	add	r3, r9
 8008cf4:	106d      	asrs	r5, r5, #1
 8008cf6:	429d      	cmp	r5, r3
 8008cf8:	bf38      	it	cc
 8008cfa:	461d      	movcc	r5, r3
 8008cfc:	0553      	lsls	r3, r2, #21
 8008cfe:	d527      	bpl.n	8008d50 <__ssputs_r+0x8c>
 8008d00:	4629      	mov	r1, r5
 8008d02:	f7ff fbd7 	bl	80084b4 <_malloc_r>
 8008d06:	4606      	mov	r6, r0
 8008d08:	b360      	cbz	r0, 8008d64 <__ssputs_r+0xa0>
 8008d0a:	6921      	ldr	r1, [r4, #16]
 8008d0c:	464a      	mov	r2, r9
 8008d0e:	f7fe fcd3 	bl	80076b8 <memcpy>
 8008d12:	89a3      	ldrh	r3, [r4, #12]
 8008d14:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d1c:	81a3      	strh	r3, [r4, #12]
 8008d1e:	6126      	str	r6, [r4, #16]
 8008d20:	6165      	str	r5, [r4, #20]
 8008d22:	444e      	add	r6, r9
 8008d24:	eba5 0509 	sub.w	r5, r5, r9
 8008d28:	6026      	str	r6, [r4, #0]
 8008d2a:	60a5      	str	r5, [r4, #8]
 8008d2c:	463e      	mov	r6, r7
 8008d2e:	42be      	cmp	r6, r7
 8008d30:	d900      	bls.n	8008d34 <__ssputs_r+0x70>
 8008d32:	463e      	mov	r6, r7
 8008d34:	6820      	ldr	r0, [r4, #0]
 8008d36:	4632      	mov	r2, r6
 8008d38:	4641      	mov	r1, r8
 8008d3a:	f000 f9c9 	bl	80090d0 <memmove>
 8008d3e:	68a3      	ldr	r3, [r4, #8]
 8008d40:	1b9b      	subs	r3, r3, r6
 8008d42:	60a3      	str	r3, [r4, #8]
 8008d44:	6823      	ldr	r3, [r4, #0]
 8008d46:	4433      	add	r3, r6
 8008d48:	6023      	str	r3, [r4, #0]
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d50:	462a      	mov	r2, r5
 8008d52:	f000 fa2d 	bl	80091b0 <_realloc_r>
 8008d56:	4606      	mov	r6, r0
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	d1e0      	bne.n	8008d1e <__ssputs_r+0x5a>
 8008d5c:	6921      	ldr	r1, [r4, #16]
 8008d5e:	4650      	mov	r0, sl
 8008d60:	f7ff fb34 	bl	80083cc <_free_r>
 8008d64:	230c      	movs	r3, #12
 8008d66:	f8ca 3000 	str.w	r3, [sl]
 8008d6a:	89a3      	ldrh	r3, [r4, #12]
 8008d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d70:	81a3      	strh	r3, [r4, #12]
 8008d72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d76:	e7e9      	b.n	8008d4c <__ssputs_r+0x88>

08008d78 <_svfiprintf_r>:
 8008d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d7c:	4698      	mov	r8, r3
 8008d7e:	898b      	ldrh	r3, [r1, #12]
 8008d80:	061b      	lsls	r3, r3, #24
 8008d82:	b09d      	sub	sp, #116	; 0x74
 8008d84:	4607      	mov	r7, r0
 8008d86:	460d      	mov	r5, r1
 8008d88:	4614      	mov	r4, r2
 8008d8a:	d50e      	bpl.n	8008daa <_svfiprintf_r+0x32>
 8008d8c:	690b      	ldr	r3, [r1, #16]
 8008d8e:	b963      	cbnz	r3, 8008daa <_svfiprintf_r+0x32>
 8008d90:	2140      	movs	r1, #64	; 0x40
 8008d92:	f7ff fb8f 	bl	80084b4 <_malloc_r>
 8008d96:	6028      	str	r0, [r5, #0]
 8008d98:	6128      	str	r0, [r5, #16]
 8008d9a:	b920      	cbnz	r0, 8008da6 <_svfiprintf_r+0x2e>
 8008d9c:	230c      	movs	r3, #12
 8008d9e:	603b      	str	r3, [r7, #0]
 8008da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008da4:	e0d0      	b.n	8008f48 <_svfiprintf_r+0x1d0>
 8008da6:	2340      	movs	r3, #64	; 0x40
 8008da8:	616b      	str	r3, [r5, #20]
 8008daa:	2300      	movs	r3, #0
 8008dac:	9309      	str	r3, [sp, #36]	; 0x24
 8008dae:	2320      	movs	r3, #32
 8008db0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008db4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008db8:	2330      	movs	r3, #48	; 0x30
 8008dba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008f60 <_svfiprintf_r+0x1e8>
 8008dbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008dc2:	f04f 0901 	mov.w	r9, #1
 8008dc6:	4623      	mov	r3, r4
 8008dc8:	469a      	mov	sl, r3
 8008dca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dce:	b10a      	cbz	r2, 8008dd4 <_svfiprintf_r+0x5c>
 8008dd0:	2a25      	cmp	r2, #37	; 0x25
 8008dd2:	d1f9      	bne.n	8008dc8 <_svfiprintf_r+0x50>
 8008dd4:	ebba 0b04 	subs.w	fp, sl, r4
 8008dd8:	d00b      	beq.n	8008df2 <_svfiprintf_r+0x7a>
 8008dda:	465b      	mov	r3, fp
 8008ddc:	4622      	mov	r2, r4
 8008dde:	4629      	mov	r1, r5
 8008de0:	4638      	mov	r0, r7
 8008de2:	f7ff ff6f 	bl	8008cc4 <__ssputs_r>
 8008de6:	3001      	adds	r0, #1
 8008de8:	f000 80a9 	beq.w	8008f3e <_svfiprintf_r+0x1c6>
 8008dec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dee:	445a      	add	r2, fp
 8008df0:	9209      	str	r2, [sp, #36]	; 0x24
 8008df2:	f89a 3000 	ldrb.w	r3, [sl]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	f000 80a1 	beq.w	8008f3e <_svfiprintf_r+0x1c6>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e06:	f10a 0a01 	add.w	sl, sl, #1
 8008e0a:	9304      	str	r3, [sp, #16]
 8008e0c:	9307      	str	r3, [sp, #28]
 8008e0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e12:	931a      	str	r3, [sp, #104]	; 0x68
 8008e14:	4654      	mov	r4, sl
 8008e16:	2205      	movs	r2, #5
 8008e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e1c:	4850      	ldr	r0, [pc, #320]	; (8008f60 <_svfiprintf_r+0x1e8>)
 8008e1e:	f7f7 f9d7 	bl	80001d0 <memchr>
 8008e22:	9a04      	ldr	r2, [sp, #16]
 8008e24:	b9d8      	cbnz	r0, 8008e5e <_svfiprintf_r+0xe6>
 8008e26:	06d0      	lsls	r0, r2, #27
 8008e28:	bf44      	itt	mi
 8008e2a:	2320      	movmi	r3, #32
 8008e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e30:	0711      	lsls	r1, r2, #28
 8008e32:	bf44      	itt	mi
 8008e34:	232b      	movmi	r3, #43	; 0x2b
 8008e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e3a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e3e:	2b2a      	cmp	r3, #42	; 0x2a
 8008e40:	d015      	beq.n	8008e6e <_svfiprintf_r+0xf6>
 8008e42:	9a07      	ldr	r2, [sp, #28]
 8008e44:	4654      	mov	r4, sl
 8008e46:	2000      	movs	r0, #0
 8008e48:	f04f 0c0a 	mov.w	ip, #10
 8008e4c:	4621      	mov	r1, r4
 8008e4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e52:	3b30      	subs	r3, #48	; 0x30
 8008e54:	2b09      	cmp	r3, #9
 8008e56:	d94d      	bls.n	8008ef4 <_svfiprintf_r+0x17c>
 8008e58:	b1b0      	cbz	r0, 8008e88 <_svfiprintf_r+0x110>
 8008e5a:	9207      	str	r2, [sp, #28]
 8008e5c:	e014      	b.n	8008e88 <_svfiprintf_r+0x110>
 8008e5e:	eba0 0308 	sub.w	r3, r0, r8
 8008e62:	fa09 f303 	lsl.w	r3, r9, r3
 8008e66:	4313      	orrs	r3, r2
 8008e68:	9304      	str	r3, [sp, #16]
 8008e6a:	46a2      	mov	sl, r4
 8008e6c:	e7d2      	b.n	8008e14 <_svfiprintf_r+0x9c>
 8008e6e:	9b03      	ldr	r3, [sp, #12]
 8008e70:	1d19      	adds	r1, r3, #4
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	9103      	str	r1, [sp, #12]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	bfbb      	ittet	lt
 8008e7a:	425b      	neglt	r3, r3
 8008e7c:	f042 0202 	orrlt.w	r2, r2, #2
 8008e80:	9307      	strge	r3, [sp, #28]
 8008e82:	9307      	strlt	r3, [sp, #28]
 8008e84:	bfb8      	it	lt
 8008e86:	9204      	strlt	r2, [sp, #16]
 8008e88:	7823      	ldrb	r3, [r4, #0]
 8008e8a:	2b2e      	cmp	r3, #46	; 0x2e
 8008e8c:	d10c      	bne.n	8008ea8 <_svfiprintf_r+0x130>
 8008e8e:	7863      	ldrb	r3, [r4, #1]
 8008e90:	2b2a      	cmp	r3, #42	; 0x2a
 8008e92:	d134      	bne.n	8008efe <_svfiprintf_r+0x186>
 8008e94:	9b03      	ldr	r3, [sp, #12]
 8008e96:	1d1a      	adds	r2, r3, #4
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	9203      	str	r2, [sp, #12]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	bfb8      	it	lt
 8008ea0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008ea4:	3402      	adds	r4, #2
 8008ea6:	9305      	str	r3, [sp, #20]
 8008ea8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008f70 <_svfiprintf_r+0x1f8>
 8008eac:	7821      	ldrb	r1, [r4, #0]
 8008eae:	2203      	movs	r2, #3
 8008eb0:	4650      	mov	r0, sl
 8008eb2:	f7f7 f98d 	bl	80001d0 <memchr>
 8008eb6:	b138      	cbz	r0, 8008ec8 <_svfiprintf_r+0x150>
 8008eb8:	9b04      	ldr	r3, [sp, #16]
 8008eba:	eba0 000a 	sub.w	r0, r0, sl
 8008ebe:	2240      	movs	r2, #64	; 0x40
 8008ec0:	4082      	lsls	r2, r0
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	3401      	adds	r4, #1
 8008ec6:	9304      	str	r3, [sp, #16]
 8008ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ecc:	4825      	ldr	r0, [pc, #148]	; (8008f64 <_svfiprintf_r+0x1ec>)
 8008ece:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ed2:	2206      	movs	r2, #6
 8008ed4:	f7f7 f97c 	bl	80001d0 <memchr>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d038      	beq.n	8008f4e <_svfiprintf_r+0x1d6>
 8008edc:	4b22      	ldr	r3, [pc, #136]	; (8008f68 <_svfiprintf_r+0x1f0>)
 8008ede:	bb1b      	cbnz	r3, 8008f28 <_svfiprintf_r+0x1b0>
 8008ee0:	9b03      	ldr	r3, [sp, #12]
 8008ee2:	3307      	adds	r3, #7
 8008ee4:	f023 0307 	bic.w	r3, r3, #7
 8008ee8:	3308      	adds	r3, #8
 8008eea:	9303      	str	r3, [sp, #12]
 8008eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eee:	4433      	add	r3, r6
 8008ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ef2:	e768      	b.n	8008dc6 <_svfiprintf_r+0x4e>
 8008ef4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ef8:	460c      	mov	r4, r1
 8008efa:	2001      	movs	r0, #1
 8008efc:	e7a6      	b.n	8008e4c <_svfiprintf_r+0xd4>
 8008efe:	2300      	movs	r3, #0
 8008f00:	3401      	adds	r4, #1
 8008f02:	9305      	str	r3, [sp, #20]
 8008f04:	4619      	mov	r1, r3
 8008f06:	f04f 0c0a 	mov.w	ip, #10
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f10:	3a30      	subs	r2, #48	; 0x30
 8008f12:	2a09      	cmp	r2, #9
 8008f14:	d903      	bls.n	8008f1e <_svfiprintf_r+0x1a6>
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d0c6      	beq.n	8008ea8 <_svfiprintf_r+0x130>
 8008f1a:	9105      	str	r1, [sp, #20]
 8008f1c:	e7c4      	b.n	8008ea8 <_svfiprintf_r+0x130>
 8008f1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f22:	4604      	mov	r4, r0
 8008f24:	2301      	movs	r3, #1
 8008f26:	e7f0      	b.n	8008f0a <_svfiprintf_r+0x192>
 8008f28:	ab03      	add	r3, sp, #12
 8008f2a:	9300      	str	r3, [sp, #0]
 8008f2c:	462a      	mov	r2, r5
 8008f2e:	4b0f      	ldr	r3, [pc, #60]	; (8008f6c <_svfiprintf_r+0x1f4>)
 8008f30:	a904      	add	r1, sp, #16
 8008f32:	4638      	mov	r0, r7
 8008f34:	f7fd fe68 	bl	8006c08 <_printf_float>
 8008f38:	1c42      	adds	r2, r0, #1
 8008f3a:	4606      	mov	r6, r0
 8008f3c:	d1d6      	bne.n	8008eec <_svfiprintf_r+0x174>
 8008f3e:	89ab      	ldrh	r3, [r5, #12]
 8008f40:	065b      	lsls	r3, r3, #25
 8008f42:	f53f af2d 	bmi.w	8008da0 <_svfiprintf_r+0x28>
 8008f46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f48:	b01d      	add	sp, #116	; 0x74
 8008f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f4e:	ab03      	add	r3, sp, #12
 8008f50:	9300      	str	r3, [sp, #0]
 8008f52:	462a      	mov	r2, r5
 8008f54:	4b05      	ldr	r3, [pc, #20]	; (8008f6c <_svfiprintf_r+0x1f4>)
 8008f56:	a904      	add	r1, sp, #16
 8008f58:	4638      	mov	r0, r7
 8008f5a:	f7fe f8f9 	bl	8007150 <_printf_i>
 8008f5e:	e7eb      	b.n	8008f38 <_svfiprintf_r+0x1c0>
 8008f60:	0800a4d4 	.word	0x0800a4d4
 8008f64:	0800a4de 	.word	0x0800a4de
 8008f68:	08006c09 	.word	0x08006c09
 8008f6c:	08008cc5 	.word	0x08008cc5
 8008f70:	0800a4da 	.word	0x0800a4da

08008f74 <__sflush_r>:
 8008f74:	898a      	ldrh	r2, [r1, #12]
 8008f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f7a:	4605      	mov	r5, r0
 8008f7c:	0710      	lsls	r0, r2, #28
 8008f7e:	460c      	mov	r4, r1
 8008f80:	d458      	bmi.n	8009034 <__sflush_r+0xc0>
 8008f82:	684b      	ldr	r3, [r1, #4]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	dc05      	bgt.n	8008f94 <__sflush_r+0x20>
 8008f88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	dc02      	bgt.n	8008f94 <__sflush_r+0x20>
 8008f8e:	2000      	movs	r0, #0
 8008f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f96:	2e00      	cmp	r6, #0
 8008f98:	d0f9      	beq.n	8008f8e <__sflush_r+0x1a>
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008fa0:	682f      	ldr	r7, [r5, #0]
 8008fa2:	6a21      	ldr	r1, [r4, #32]
 8008fa4:	602b      	str	r3, [r5, #0]
 8008fa6:	d032      	beq.n	800900e <__sflush_r+0x9a>
 8008fa8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008faa:	89a3      	ldrh	r3, [r4, #12]
 8008fac:	075a      	lsls	r2, r3, #29
 8008fae:	d505      	bpl.n	8008fbc <__sflush_r+0x48>
 8008fb0:	6863      	ldr	r3, [r4, #4]
 8008fb2:	1ac0      	subs	r0, r0, r3
 8008fb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008fb6:	b10b      	cbz	r3, 8008fbc <__sflush_r+0x48>
 8008fb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fba:	1ac0      	subs	r0, r0, r3
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fc2:	6a21      	ldr	r1, [r4, #32]
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	47b0      	blx	r6
 8008fc8:	1c43      	adds	r3, r0, #1
 8008fca:	89a3      	ldrh	r3, [r4, #12]
 8008fcc:	d106      	bne.n	8008fdc <__sflush_r+0x68>
 8008fce:	6829      	ldr	r1, [r5, #0]
 8008fd0:	291d      	cmp	r1, #29
 8008fd2:	d82b      	bhi.n	800902c <__sflush_r+0xb8>
 8008fd4:	4a29      	ldr	r2, [pc, #164]	; (800907c <__sflush_r+0x108>)
 8008fd6:	410a      	asrs	r2, r1
 8008fd8:	07d6      	lsls	r6, r2, #31
 8008fda:	d427      	bmi.n	800902c <__sflush_r+0xb8>
 8008fdc:	2200      	movs	r2, #0
 8008fde:	6062      	str	r2, [r4, #4]
 8008fe0:	04d9      	lsls	r1, r3, #19
 8008fe2:	6922      	ldr	r2, [r4, #16]
 8008fe4:	6022      	str	r2, [r4, #0]
 8008fe6:	d504      	bpl.n	8008ff2 <__sflush_r+0x7e>
 8008fe8:	1c42      	adds	r2, r0, #1
 8008fea:	d101      	bne.n	8008ff0 <__sflush_r+0x7c>
 8008fec:	682b      	ldr	r3, [r5, #0]
 8008fee:	b903      	cbnz	r3, 8008ff2 <__sflush_r+0x7e>
 8008ff0:	6560      	str	r0, [r4, #84]	; 0x54
 8008ff2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ff4:	602f      	str	r7, [r5, #0]
 8008ff6:	2900      	cmp	r1, #0
 8008ff8:	d0c9      	beq.n	8008f8e <__sflush_r+0x1a>
 8008ffa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ffe:	4299      	cmp	r1, r3
 8009000:	d002      	beq.n	8009008 <__sflush_r+0x94>
 8009002:	4628      	mov	r0, r5
 8009004:	f7ff f9e2 	bl	80083cc <_free_r>
 8009008:	2000      	movs	r0, #0
 800900a:	6360      	str	r0, [r4, #52]	; 0x34
 800900c:	e7c0      	b.n	8008f90 <__sflush_r+0x1c>
 800900e:	2301      	movs	r3, #1
 8009010:	4628      	mov	r0, r5
 8009012:	47b0      	blx	r6
 8009014:	1c41      	adds	r1, r0, #1
 8009016:	d1c8      	bne.n	8008faa <__sflush_r+0x36>
 8009018:	682b      	ldr	r3, [r5, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d0c5      	beq.n	8008faa <__sflush_r+0x36>
 800901e:	2b1d      	cmp	r3, #29
 8009020:	d001      	beq.n	8009026 <__sflush_r+0xb2>
 8009022:	2b16      	cmp	r3, #22
 8009024:	d101      	bne.n	800902a <__sflush_r+0xb6>
 8009026:	602f      	str	r7, [r5, #0]
 8009028:	e7b1      	b.n	8008f8e <__sflush_r+0x1a>
 800902a:	89a3      	ldrh	r3, [r4, #12]
 800902c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009030:	81a3      	strh	r3, [r4, #12]
 8009032:	e7ad      	b.n	8008f90 <__sflush_r+0x1c>
 8009034:	690f      	ldr	r7, [r1, #16]
 8009036:	2f00      	cmp	r7, #0
 8009038:	d0a9      	beq.n	8008f8e <__sflush_r+0x1a>
 800903a:	0793      	lsls	r3, r2, #30
 800903c:	680e      	ldr	r6, [r1, #0]
 800903e:	bf08      	it	eq
 8009040:	694b      	ldreq	r3, [r1, #20]
 8009042:	600f      	str	r7, [r1, #0]
 8009044:	bf18      	it	ne
 8009046:	2300      	movne	r3, #0
 8009048:	eba6 0807 	sub.w	r8, r6, r7
 800904c:	608b      	str	r3, [r1, #8]
 800904e:	f1b8 0f00 	cmp.w	r8, #0
 8009052:	dd9c      	ble.n	8008f8e <__sflush_r+0x1a>
 8009054:	6a21      	ldr	r1, [r4, #32]
 8009056:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009058:	4643      	mov	r3, r8
 800905a:	463a      	mov	r2, r7
 800905c:	4628      	mov	r0, r5
 800905e:	47b0      	blx	r6
 8009060:	2800      	cmp	r0, #0
 8009062:	dc06      	bgt.n	8009072 <__sflush_r+0xfe>
 8009064:	89a3      	ldrh	r3, [r4, #12]
 8009066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800906a:	81a3      	strh	r3, [r4, #12]
 800906c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009070:	e78e      	b.n	8008f90 <__sflush_r+0x1c>
 8009072:	4407      	add	r7, r0
 8009074:	eba8 0800 	sub.w	r8, r8, r0
 8009078:	e7e9      	b.n	800904e <__sflush_r+0xda>
 800907a:	bf00      	nop
 800907c:	dfbffffe 	.word	0xdfbffffe

08009080 <_fflush_r>:
 8009080:	b538      	push	{r3, r4, r5, lr}
 8009082:	690b      	ldr	r3, [r1, #16]
 8009084:	4605      	mov	r5, r0
 8009086:	460c      	mov	r4, r1
 8009088:	b913      	cbnz	r3, 8009090 <_fflush_r+0x10>
 800908a:	2500      	movs	r5, #0
 800908c:	4628      	mov	r0, r5
 800908e:	bd38      	pop	{r3, r4, r5, pc}
 8009090:	b118      	cbz	r0, 800909a <_fflush_r+0x1a>
 8009092:	6a03      	ldr	r3, [r0, #32]
 8009094:	b90b      	cbnz	r3, 800909a <_fflush_r+0x1a>
 8009096:	f7fe f9f7 	bl	8007488 <__sinit>
 800909a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d0f3      	beq.n	800908a <_fflush_r+0xa>
 80090a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090a4:	07d0      	lsls	r0, r2, #31
 80090a6:	d404      	bmi.n	80090b2 <_fflush_r+0x32>
 80090a8:	0599      	lsls	r1, r3, #22
 80090aa:	d402      	bmi.n	80090b2 <_fflush_r+0x32>
 80090ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090ae:	f7fe fb01 	bl	80076b4 <__retarget_lock_acquire_recursive>
 80090b2:	4628      	mov	r0, r5
 80090b4:	4621      	mov	r1, r4
 80090b6:	f7ff ff5d 	bl	8008f74 <__sflush_r>
 80090ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090bc:	07da      	lsls	r2, r3, #31
 80090be:	4605      	mov	r5, r0
 80090c0:	d4e4      	bmi.n	800908c <_fflush_r+0xc>
 80090c2:	89a3      	ldrh	r3, [r4, #12]
 80090c4:	059b      	lsls	r3, r3, #22
 80090c6:	d4e1      	bmi.n	800908c <_fflush_r+0xc>
 80090c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090ca:	f7fe faf4 	bl	80076b6 <__retarget_lock_release_recursive>
 80090ce:	e7dd      	b.n	800908c <_fflush_r+0xc>

080090d0 <memmove>:
 80090d0:	4288      	cmp	r0, r1
 80090d2:	b510      	push	{r4, lr}
 80090d4:	eb01 0402 	add.w	r4, r1, r2
 80090d8:	d902      	bls.n	80090e0 <memmove+0x10>
 80090da:	4284      	cmp	r4, r0
 80090dc:	4623      	mov	r3, r4
 80090de:	d807      	bhi.n	80090f0 <memmove+0x20>
 80090e0:	1e43      	subs	r3, r0, #1
 80090e2:	42a1      	cmp	r1, r4
 80090e4:	d008      	beq.n	80090f8 <memmove+0x28>
 80090e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090ee:	e7f8      	b.n	80090e2 <memmove+0x12>
 80090f0:	4402      	add	r2, r0
 80090f2:	4601      	mov	r1, r0
 80090f4:	428a      	cmp	r2, r1
 80090f6:	d100      	bne.n	80090fa <memmove+0x2a>
 80090f8:	bd10      	pop	{r4, pc}
 80090fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009102:	e7f7      	b.n	80090f4 <memmove+0x24>

08009104 <_sbrk_r>:
 8009104:	b538      	push	{r3, r4, r5, lr}
 8009106:	4d06      	ldr	r5, [pc, #24]	; (8009120 <_sbrk_r+0x1c>)
 8009108:	2300      	movs	r3, #0
 800910a:	4604      	mov	r4, r0
 800910c:	4608      	mov	r0, r1
 800910e:	602b      	str	r3, [r5, #0]
 8009110:	f7f9 ff44 	bl	8002f9c <_sbrk>
 8009114:	1c43      	adds	r3, r0, #1
 8009116:	d102      	bne.n	800911e <_sbrk_r+0x1a>
 8009118:	682b      	ldr	r3, [r5, #0]
 800911a:	b103      	cbz	r3, 800911e <_sbrk_r+0x1a>
 800911c:	6023      	str	r3, [r4, #0]
 800911e:	bd38      	pop	{r3, r4, r5, pc}
 8009120:	200004f8 	.word	0x200004f8

08009124 <__assert_func>:
 8009124:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009126:	4614      	mov	r4, r2
 8009128:	461a      	mov	r2, r3
 800912a:	4b09      	ldr	r3, [pc, #36]	; (8009150 <__assert_func+0x2c>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4605      	mov	r5, r0
 8009130:	68d8      	ldr	r0, [r3, #12]
 8009132:	b14c      	cbz	r4, 8009148 <__assert_func+0x24>
 8009134:	4b07      	ldr	r3, [pc, #28]	; (8009154 <__assert_func+0x30>)
 8009136:	9100      	str	r1, [sp, #0]
 8009138:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800913c:	4906      	ldr	r1, [pc, #24]	; (8009158 <__assert_func+0x34>)
 800913e:	462b      	mov	r3, r5
 8009140:	f000 f872 	bl	8009228 <fiprintf>
 8009144:	f000 f882 	bl	800924c <abort>
 8009148:	4b04      	ldr	r3, [pc, #16]	; (800915c <__assert_func+0x38>)
 800914a:	461c      	mov	r4, r3
 800914c:	e7f3      	b.n	8009136 <__assert_func+0x12>
 800914e:	bf00      	nop
 8009150:	2000006c 	.word	0x2000006c
 8009154:	0800a4ef 	.word	0x0800a4ef
 8009158:	0800a4fc 	.word	0x0800a4fc
 800915c:	0800a52a 	.word	0x0800a52a

08009160 <_calloc_r>:
 8009160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009162:	fba1 2402 	umull	r2, r4, r1, r2
 8009166:	b94c      	cbnz	r4, 800917c <_calloc_r+0x1c>
 8009168:	4611      	mov	r1, r2
 800916a:	9201      	str	r2, [sp, #4]
 800916c:	f7ff f9a2 	bl	80084b4 <_malloc_r>
 8009170:	9a01      	ldr	r2, [sp, #4]
 8009172:	4605      	mov	r5, r0
 8009174:	b930      	cbnz	r0, 8009184 <_calloc_r+0x24>
 8009176:	4628      	mov	r0, r5
 8009178:	b003      	add	sp, #12
 800917a:	bd30      	pop	{r4, r5, pc}
 800917c:	220c      	movs	r2, #12
 800917e:	6002      	str	r2, [r0, #0]
 8009180:	2500      	movs	r5, #0
 8009182:	e7f8      	b.n	8009176 <_calloc_r+0x16>
 8009184:	4621      	mov	r1, r4
 8009186:	f7fe fa18 	bl	80075ba <memset>
 800918a:	e7f4      	b.n	8009176 <_calloc_r+0x16>

0800918c <__ascii_mbtowc>:
 800918c:	b082      	sub	sp, #8
 800918e:	b901      	cbnz	r1, 8009192 <__ascii_mbtowc+0x6>
 8009190:	a901      	add	r1, sp, #4
 8009192:	b142      	cbz	r2, 80091a6 <__ascii_mbtowc+0x1a>
 8009194:	b14b      	cbz	r3, 80091aa <__ascii_mbtowc+0x1e>
 8009196:	7813      	ldrb	r3, [r2, #0]
 8009198:	600b      	str	r3, [r1, #0]
 800919a:	7812      	ldrb	r2, [r2, #0]
 800919c:	1e10      	subs	r0, r2, #0
 800919e:	bf18      	it	ne
 80091a0:	2001      	movne	r0, #1
 80091a2:	b002      	add	sp, #8
 80091a4:	4770      	bx	lr
 80091a6:	4610      	mov	r0, r2
 80091a8:	e7fb      	b.n	80091a2 <__ascii_mbtowc+0x16>
 80091aa:	f06f 0001 	mvn.w	r0, #1
 80091ae:	e7f8      	b.n	80091a2 <__ascii_mbtowc+0x16>

080091b0 <_realloc_r>:
 80091b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091b4:	4680      	mov	r8, r0
 80091b6:	4614      	mov	r4, r2
 80091b8:	460e      	mov	r6, r1
 80091ba:	b921      	cbnz	r1, 80091c6 <_realloc_r+0x16>
 80091bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091c0:	4611      	mov	r1, r2
 80091c2:	f7ff b977 	b.w	80084b4 <_malloc_r>
 80091c6:	b92a      	cbnz	r2, 80091d4 <_realloc_r+0x24>
 80091c8:	f7ff f900 	bl	80083cc <_free_r>
 80091cc:	4625      	mov	r5, r4
 80091ce:	4628      	mov	r0, r5
 80091d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091d4:	f000 f841 	bl	800925a <_malloc_usable_size_r>
 80091d8:	4284      	cmp	r4, r0
 80091da:	4607      	mov	r7, r0
 80091dc:	d802      	bhi.n	80091e4 <_realloc_r+0x34>
 80091de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80091e2:	d812      	bhi.n	800920a <_realloc_r+0x5a>
 80091e4:	4621      	mov	r1, r4
 80091e6:	4640      	mov	r0, r8
 80091e8:	f7ff f964 	bl	80084b4 <_malloc_r>
 80091ec:	4605      	mov	r5, r0
 80091ee:	2800      	cmp	r0, #0
 80091f0:	d0ed      	beq.n	80091ce <_realloc_r+0x1e>
 80091f2:	42bc      	cmp	r4, r7
 80091f4:	4622      	mov	r2, r4
 80091f6:	4631      	mov	r1, r6
 80091f8:	bf28      	it	cs
 80091fa:	463a      	movcs	r2, r7
 80091fc:	f7fe fa5c 	bl	80076b8 <memcpy>
 8009200:	4631      	mov	r1, r6
 8009202:	4640      	mov	r0, r8
 8009204:	f7ff f8e2 	bl	80083cc <_free_r>
 8009208:	e7e1      	b.n	80091ce <_realloc_r+0x1e>
 800920a:	4635      	mov	r5, r6
 800920c:	e7df      	b.n	80091ce <_realloc_r+0x1e>

0800920e <__ascii_wctomb>:
 800920e:	b149      	cbz	r1, 8009224 <__ascii_wctomb+0x16>
 8009210:	2aff      	cmp	r2, #255	; 0xff
 8009212:	bf85      	ittet	hi
 8009214:	238a      	movhi	r3, #138	; 0x8a
 8009216:	6003      	strhi	r3, [r0, #0]
 8009218:	700a      	strbls	r2, [r1, #0]
 800921a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800921e:	bf98      	it	ls
 8009220:	2001      	movls	r0, #1
 8009222:	4770      	bx	lr
 8009224:	4608      	mov	r0, r1
 8009226:	4770      	bx	lr

08009228 <fiprintf>:
 8009228:	b40e      	push	{r1, r2, r3}
 800922a:	b503      	push	{r0, r1, lr}
 800922c:	4601      	mov	r1, r0
 800922e:	ab03      	add	r3, sp, #12
 8009230:	4805      	ldr	r0, [pc, #20]	; (8009248 <fiprintf+0x20>)
 8009232:	f853 2b04 	ldr.w	r2, [r3], #4
 8009236:	6800      	ldr	r0, [r0, #0]
 8009238:	9301      	str	r3, [sp, #4]
 800923a:	f000 f83f 	bl	80092bc <_vfiprintf_r>
 800923e:	b002      	add	sp, #8
 8009240:	f85d eb04 	ldr.w	lr, [sp], #4
 8009244:	b003      	add	sp, #12
 8009246:	4770      	bx	lr
 8009248:	2000006c 	.word	0x2000006c

0800924c <abort>:
 800924c:	b508      	push	{r3, lr}
 800924e:	2006      	movs	r0, #6
 8009250:	f000 fa0c 	bl	800966c <raise>
 8009254:	2001      	movs	r0, #1
 8009256:	f7f9 fe29 	bl	8002eac <_exit>

0800925a <_malloc_usable_size_r>:
 800925a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800925e:	1f18      	subs	r0, r3, #4
 8009260:	2b00      	cmp	r3, #0
 8009262:	bfbc      	itt	lt
 8009264:	580b      	ldrlt	r3, [r1, r0]
 8009266:	18c0      	addlt	r0, r0, r3
 8009268:	4770      	bx	lr

0800926a <__sfputc_r>:
 800926a:	6893      	ldr	r3, [r2, #8]
 800926c:	3b01      	subs	r3, #1
 800926e:	2b00      	cmp	r3, #0
 8009270:	b410      	push	{r4}
 8009272:	6093      	str	r3, [r2, #8]
 8009274:	da08      	bge.n	8009288 <__sfputc_r+0x1e>
 8009276:	6994      	ldr	r4, [r2, #24]
 8009278:	42a3      	cmp	r3, r4
 800927a:	db01      	blt.n	8009280 <__sfputc_r+0x16>
 800927c:	290a      	cmp	r1, #10
 800927e:	d103      	bne.n	8009288 <__sfputc_r+0x1e>
 8009280:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009284:	f000 b934 	b.w	80094f0 <__swbuf_r>
 8009288:	6813      	ldr	r3, [r2, #0]
 800928a:	1c58      	adds	r0, r3, #1
 800928c:	6010      	str	r0, [r2, #0]
 800928e:	7019      	strb	r1, [r3, #0]
 8009290:	4608      	mov	r0, r1
 8009292:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009296:	4770      	bx	lr

08009298 <__sfputs_r>:
 8009298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929a:	4606      	mov	r6, r0
 800929c:	460f      	mov	r7, r1
 800929e:	4614      	mov	r4, r2
 80092a0:	18d5      	adds	r5, r2, r3
 80092a2:	42ac      	cmp	r4, r5
 80092a4:	d101      	bne.n	80092aa <__sfputs_r+0x12>
 80092a6:	2000      	movs	r0, #0
 80092a8:	e007      	b.n	80092ba <__sfputs_r+0x22>
 80092aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092ae:	463a      	mov	r2, r7
 80092b0:	4630      	mov	r0, r6
 80092b2:	f7ff ffda 	bl	800926a <__sfputc_r>
 80092b6:	1c43      	adds	r3, r0, #1
 80092b8:	d1f3      	bne.n	80092a2 <__sfputs_r+0xa>
 80092ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080092bc <_vfiprintf_r>:
 80092bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c0:	460d      	mov	r5, r1
 80092c2:	b09d      	sub	sp, #116	; 0x74
 80092c4:	4614      	mov	r4, r2
 80092c6:	4698      	mov	r8, r3
 80092c8:	4606      	mov	r6, r0
 80092ca:	b118      	cbz	r0, 80092d4 <_vfiprintf_r+0x18>
 80092cc:	6a03      	ldr	r3, [r0, #32]
 80092ce:	b90b      	cbnz	r3, 80092d4 <_vfiprintf_r+0x18>
 80092d0:	f7fe f8da 	bl	8007488 <__sinit>
 80092d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092d6:	07d9      	lsls	r1, r3, #31
 80092d8:	d405      	bmi.n	80092e6 <_vfiprintf_r+0x2a>
 80092da:	89ab      	ldrh	r3, [r5, #12]
 80092dc:	059a      	lsls	r2, r3, #22
 80092de:	d402      	bmi.n	80092e6 <_vfiprintf_r+0x2a>
 80092e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092e2:	f7fe f9e7 	bl	80076b4 <__retarget_lock_acquire_recursive>
 80092e6:	89ab      	ldrh	r3, [r5, #12]
 80092e8:	071b      	lsls	r3, r3, #28
 80092ea:	d501      	bpl.n	80092f0 <_vfiprintf_r+0x34>
 80092ec:	692b      	ldr	r3, [r5, #16]
 80092ee:	b99b      	cbnz	r3, 8009318 <_vfiprintf_r+0x5c>
 80092f0:	4629      	mov	r1, r5
 80092f2:	4630      	mov	r0, r6
 80092f4:	f000 f93a 	bl	800956c <__swsetup_r>
 80092f8:	b170      	cbz	r0, 8009318 <_vfiprintf_r+0x5c>
 80092fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092fc:	07dc      	lsls	r4, r3, #31
 80092fe:	d504      	bpl.n	800930a <_vfiprintf_r+0x4e>
 8009300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009304:	b01d      	add	sp, #116	; 0x74
 8009306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800930a:	89ab      	ldrh	r3, [r5, #12]
 800930c:	0598      	lsls	r0, r3, #22
 800930e:	d4f7      	bmi.n	8009300 <_vfiprintf_r+0x44>
 8009310:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009312:	f7fe f9d0 	bl	80076b6 <__retarget_lock_release_recursive>
 8009316:	e7f3      	b.n	8009300 <_vfiprintf_r+0x44>
 8009318:	2300      	movs	r3, #0
 800931a:	9309      	str	r3, [sp, #36]	; 0x24
 800931c:	2320      	movs	r3, #32
 800931e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009322:	f8cd 800c 	str.w	r8, [sp, #12]
 8009326:	2330      	movs	r3, #48	; 0x30
 8009328:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80094dc <_vfiprintf_r+0x220>
 800932c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009330:	f04f 0901 	mov.w	r9, #1
 8009334:	4623      	mov	r3, r4
 8009336:	469a      	mov	sl, r3
 8009338:	f813 2b01 	ldrb.w	r2, [r3], #1
 800933c:	b10a      	cbz	r2, 8009342 <_vfiprintf_r+0x86>
 800933e:	2a25      	cmp	r2, #37	; 0x25
 8009340:	d1f9      	bne.n	8009336 <_vfiprintf_r+0x7a>
 8009342:	ebba 0b04 	subs.w	fp, sl, r4
 8009346:	d00b      	beq.n	8009360 <_vfiprintf_r+0xa4>
 8009348:	465b      	mov	r3, fp
 800934a:	4622      	mov	r2, r4
 800934c:	4629      	mov	r1, r5
 800934e:	4630      	mov	r0, r6
 8009350:	f7ff ffa2 	bl	8009298 <__sfputs_r>
 8009354:	3001      	adds	r0, #1
 8009356:	f000 80a9 	beq.w	80094ac <_vfiprintf_r+0x1f0>
 800935a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800935c:	445a      	add	r2, fp
 800935e:	9209      	str	r2, [sp, #36]	; 0x24
 8009360:	f89a 3000 	ldrb.w	r3, [sl]
 8009364:	2b00      	cmp	r3, #0
 8009366:	f000 80a1 	beq.w	80094ac <_vfiprintf_r+0x1f0>
 800936a:	2300      	movs	r3, #0
 800936c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009370:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009374:	f10a 0a01 	add.w	sl, sl, #1
 8009378:	9304      	str	r3, [sp, #16]
 800937a:	9307      	str	r3, [sp, #28]
 800937c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009380:	931a      	str	r3, [sp, #104]	; 0x68
 8009382:	4654      	mov	r4, sl
 8009384:	2205      	movs	r2, #5
 8009386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800938a:	4854      	ldr	r0, [pc, #336]	; (80094dc <_vfiprintf_r+0x220>)
 800938c:	f7f6 ff20 	bl	80001d0 <memchr>
 8009390:	9a04      	ldr	r2, [sp, #16]
 8009392:	b9d8      	cbnz	r0, 80093cc <_vfiprintf_r+0x110>
 8009394:	06d1      	lsls	r1, r2, #27
 8009396:	bf44      	itt	mi
 8009398:	2320      	movmi	r3, #32
 800939a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800939e:	0713      	lsls	r3, r2, #28
 80093a0:	bf44      	itt	mi
 80093a2:	232b      	movmi	r3, #43	; 0x2b
 80093a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093a8:	f89a 3000 	ldrb.w	r3, [sl]
 80093ac:	2b2a      	cmp	r3, #42	; 0x2a
 80093ae:	d015      	beq.n	80093dc <_vfiprintf_r+0x120>
 80093b0:	9a07      	ldr	r2, [sp, #28]
 80093b2:	4654      	mov	r4, sl
 80093b4:	2000      	movs	r0, #0
 80093b6:	f04f 0c0a 	mov.w	ip, #10
 80093ba:	4621      	mov	r1, r4
 80093bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093c0:	3b30      	subs	r3, #48	; 0x30
 80093c2:	2b09      	cmp	r3, #9
 80093c4:	d94d      	bls.n	8009462 <_vfiprintf_r+0x1a6>
 80093c6:	b1b0      	cbz	r0, 80093f6 <_vfiprintf_r+0x13a>
 80093c8:	9207      	str	r2, [sp, #28]
 80093ca:	e014      	b.n	80093f6 <_vfiprintf_r+0x13a>
 80093cc:	eba0 0308 	sub.w	r3, r0, r8
 80093d0:	fa09 f303 	lsl.w	r3, r9, r3
 80093d4:	4313      	orrs	r3, r2
 80093d6:	9304      	str	r3, [sp, #16]
 80093d8:	46a2      	mov	sl, r4
 80093da:	e7d2      	b.n	8009382 <_vfiprintf_r+0xc6>
 80093dc:	9b03      	ldr	r3, [sp, #12]
 80093de:	1d19      	adds	r1, r3, #4
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	9103      	str	r1, [sp, #12]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	bfbb      	ittet	lt
 80093e8:	425b      	neglt	r3, r3
 80093ea:	f042 0202 	orrlt.w	r2, r2, #2
 80093ee:	9307      	strge	r3, [sp, #28]
 80093f0:	9307      	strlt	r3, [sp, #28]
 80093f2:	bfb8      	it	lt
 80093f4:	9204      	strlt	r2, [sp, #16]
 80093f6:	7823      	ldrb	r3, [r4, #0]
 80093f8:	2b2e      	cmp	r3, #46	; 0x2e
 80093fa:	d10c      	bne.n	8009416 <_vfiprintf_r+0x15a>
 80093fc:	7863      	ldrb	r3, [r4, #1]
 80093fe:	2b2a      	cmp	r3, #42	; 0x2a
 8009400:	d134      	bne.n	800946c <_vfiprintf_r+0x1b0>
 8009402:	9b03      	ldr	r3, [sp, #12]
 8009404:	1d1a      	adds	r2, r3, #4
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	9203      	str	r2, [sp, #12]
 800940a:	2b00      	cmp	r3, #0
 800940c:	bfb8      	it	lt
 800940e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009412:	3402      	adds	r4, #2
 8009414:	9305      	str	r3, [sp, #20]
 8009416:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80094ec <_vfiprintf_r+0x230>
 800941a:	7821      	ldrb	r1, [r4, #0]
 800941c:	2203      	movs	r2, #3
 800941e:	4650      	mov	r0, sl
 8009420:	f7f6 fed6 	bl	80001d0 <memchr>
 8009424:	b138      	cbz	r0, 8009436 <_vfiprintf_r+0x17a>
 8009426:	9b04      	ldr	r3, [sp, #16]
 8009428:	eba0 000a 	sub.w	r0, r0, sl
 800942c:	2240      	movs	r2, #64	; 0x40
 800942e:	4082      	lsls	r2, r0
 8009430:	4313      	orrs	r3, r2
 8009432:	3401      	adds	r4, #1
 8009434:	9304      	str	r3, [sp, #16]
 8009436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800943a:	4829      	ldr	r0, [pc, #164]	; (80094e0 <_vfiprintf_r+0x224>)
 800943c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009440:	2206      	movs	r2, #6
 8009442:	f7f6 fec5 	bl	80001d0 <memchr>
 8009446:	2800      	cmp	r0, #0
 8009448:	d03f      	beq.n	80094ca <_vfiprintf_r+0x20e>
 800944a:	4b26      	ldr	r3, [pc, #152]	; (80094e4 <_vfiprintf_r+0x228>)
 800944c:	bb1b      	cbnz	r3, 8009496 <_vfiprintf_r+0x1da>
 800944e:	9b03      	ldr	r3, [sp, #12]
 8009450:	3307      	adds	r3, #7
 8009452:	f023 0307 	bic.w	r3, r3, #7
 8009456:	3308      	adds	r3, #8
 8009458:	9303      	str	r3, [sp, #12]
 800945a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800945c:	443b      	add	r3, r7
 800945e:	9309      	str	r3, [sp, #36]	; 0x24
 8009460:	e768      	b.n	8009334 <_vfiprintf_r+0x78>
 8009462:	fb0c 3202 	mla	r2, ip, r2, r3
 8009466:	460c      	mov	r4, r1
 8009468:	2001      	movs	r0, #1
 800946a:	e7a6      	b.n	80093ba <_vfiprintf_r+0xfe>
 800946c:	2300      	movs	r3, #0
 800946e:	3401      	adds	r4, #1
 8009470:	9305      	str	r3, [sp, #20]
 8009472:	4619      	mov	r1, r3
 8009474:	f04f 0c0a 	mov.w	ip, #10
 8009478:	4620      	mov	r0, r4
 800947a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800947e:	3a30      	subs	r2, #48	; 0x30
 8009480:	2a09      	cmp	r2, #9
 8009482:	d903      	bls.n	800948c <_vfiprintf_r+0x1d0>
 8009484:	2b00      	cmp	r3, #0
 8009486:	d0c6      	beq.n	8009416 <_vfiprintf_r+0x15a>
 8009488:	9105      	str	r1, [sp, #20]
 800948a:	e7c4      	b.n	8009416 <_vfiprintf_r+0x15a>
 800948c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009490:	4604      	mov	r4, r0
 8009492:	2301      	movs	r3, #1
 8009494:	e7f0      	b.n	8009478 <_vfiprintf_r+0x1bc>
 8009496:	ab03      	add	r3, sp, #12
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	462a      	mov	r2, r5
 800949c:	4b12      	ldr	r3, [pc, #72]	; (80094e8 <_vfiprintf_r+0x22c>)
 800949e:	a904      	add	r1, sp, #16
 80094a0:	4630      	mov	r0, r6
 80094a2:	f7fd fbb1 	bl	8006c08 <_printf_float>
 80094a6:	4607      	mov	r7, r0
 80094a8:	1c78      	adds	r0, r7, #1
 80094aa:	d1d6      	bne.n	800945a <_vfiprintf_r+0x19e>
 80094ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094ae:	07d9      	lsls	r1, r3, #31
 80094b0:	d405      	bmi.n	80094be <_vfiprintf_r+0x202>
 80094b2:	89ab      	ldrh	r3, [r5, #12]
 80094b4:	059a      	lsls	r2, r3, #22
 80094b6:	d402      	bmi.n	80094be <_vfiprintf_r+0x202>
 80094b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094ba:	f7fe f8fc 	bl	80076b6 <__retarget_lock_release_recursive>
 80094be:	89ab      	ldrh	r3, [r5, #12]
 80094c0:	065b      	lsls	r3, r3, #25
 80094c2:	f53f af1d 	bmi.w	8009300 <_vfiprintf_r+0x44>
 80094c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094c8:	e71c      	b.n	8009304 <_vfiprintf_r+0x48>
 80094ca:	ab03      	add	r3, sp, #12
 80094cc:	9300      	str	r3, [sp, #0]
 80094ce:	462a      	mov	r2, r5
 80094d0:	4b05      	ldr	r3, [pc, #20]	; (80094e8 <_vfiprintf_r+0x22c>)
 80094d2:	a904      	add	r1, sp, #16
 80094d4:	4630      	mov	r0, r6
 80094d6:	f7fd fe3b 	bl	8007150 <_printf_i>
 80094da:	e7e4      	b.n	80094a6 <_vfiprintf_r+0x1ea>
 80094dc:	0800a4d4 	.word	0x0800a4d4
 80094e0:	0800a4de 	.word	0x0800a4de
 80094e4:	08006c09 	.word	0x08006c09
 80094e8:	08009299 	.word	0x08009299
 80094ec:	0800a4da 	.word	0x0800a4da

080094f0 <__swbuf_r>:
 80094f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f2:	460e      	mov	r6, r1
 80094f4:	4614      	mov	r4, r2
 80094f6:	4605      	mov	r5, r0
 80094f8:	b118      	cbz	r0, 8009502 <__swbuf_r+0x12>
 80094fa:	6a03      	ldr	r3, [r0, #32]
 80094fc:	b90b      	cbnz	r3, 8009502 <__swbuf_r+0x12>
 80094fe:	f7fd ffc3 	bl	8007488 <__sinit>
 8009502:	69a3      	ldr	r3, [r4, #24]
 8009504:	60a3      	str	r3, [r4, #8]
 8009506:	89a3      	ldrh	r3, [r4, #12]
 8009508:	071a      	lsls	r2, r3, #28
 800950a:	d525      	bpl.n	8009558 <__swbuf_r+0x68>
 800950c:	6923      	ldr	r3, [r4, #16]
 800950e:	b31b      	cbz	r3, 8009558 <__swbuf_r+0x68>
 8009510:	6823      	ldr	r3, [r4, #0]
 8009512:	6922      	ldr	r2, [r4, #16]
 8009514:	1a98      	subs	r0, r3, r2
 8009516:	6963      	ldr	r3, [r4, #20]
 8009518:	b2f6      	uxtb	r6, r6
 800951a:	4283      	cmp	r3, r0
 800951c:	4637      	mov	r7, r6
 800951e:	dc04      	bgt.n	800952a <__swbuf_r+0x3a>
 8009520:	4621      	mov	r1, r4
 8009522:	4628      	mov	r0, r5
 8009524:	f7ff fdac 	bl	8009080 <_fflush_r>
 8009528:	b9e0      	cbnz	r0, 8009564 <__swbuf_r+0x74>
 800952a:	68a3      	ldr	r3, [r4, #8]
 800952c:	3b01      	subs	r3, #1
 800952e:	60a3      	str	r3, [r4, #8]
 8009530:	6823      	ldr	r3, [r4, #0]
 8009532:	1c5a      	adds	r2, r3, #1
 8009534:	6022      	str	r2, [r4, #0]
 8009536:	701e      	strb	r6, [r3, #0]
 8009538:	6962      	ldr	r2, [r4, #20]
 800953a:	1c43      	adds	r3, r0, #1
 800953c:	429a      	cmp	r2, r3
 800953e:	d004      	beq.n	800954a <__swbuf_r+0x5a>
 8009540:	89a3      	ldrh	r3, [r4, #12]
 8009542:	07db      	lsls	r3, r3, #31
 8009544:	d506      	bpl.n	8009554 <__swbuf_r+0x64>
 8009546:	2e0a      	cmp	r6, #10
 8009548:	d104      	bne.n	8009554 <__swbuf_r+0x64>
 800954a:	4621      	mov	r1, r4
 800954c:	4628      	mov	r0, r5
 800954e:	f7ff fd97 	bl	8009080 <_fflush_r>
 8009552:	b938      	cbnz	r0, 8009564 <__swbuf_r+0x74>
 8009554:	4638      	mov	r0, r7
 8009556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009558:	4621      	mov	r1, r4
 800955a:	4628      	mov	r0, r5
 800955c:	f000 f806 	bl	800956c <__swsetup_r>
 8009560:	2800      	cmp	r0, #0
 8009562:	d0d5      	beq.n	8009510 <__swbuf_r+0x20>
 8009564:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009568:	e7f4      	b.n	8009554 <__swbuf_r+0x64>
	...

0800956c <__swsetup_r>:
 800956c:	b538      	push	{r3, r4, r5, lr}
 800956e:	4b2a      	ldr	r3, [pc, #168]	; (8009618 <__swsetup_r+0xac>)
 8009570:	4605      	mov	r5, r0
 8009572:	6818      	ldr	r0, [r3, #0]
 8009574:	460c      	mov	r4, r1
 8009576:	b118      	cbz	r0, 8009580 <__swsetup_r+0x14>
 8009578:	6a03      	ldr	r3, [r0, #32]
 800957a:	b90b      	cbnz	r3, 8009580 <__swsetup_r+0x14>
 800957c:	f7fd ff84 	bl	8007488 <__sinit>
 8009580:	89a3      	ldrh	r3, [r4, #12]
 8009582:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009586:	0718      	lsls	r0, r3, #28
 8009588:	d422      	bmi.n	80095d0 <__swsetup_r+0x64>
 800958a:	06d9      	lsls	r1, r3, #27
 800958c:	d407      	bmi.n	800959e <__swsetup_r+0x32>
 800958e:	2309      	movs	r3, #9
 8009590:	602b      	str	r3, [r5, #0]
 8009592:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009596:	81a3      	strh	r3, [r4, #12]
 8009598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800959c:	e034      	b.n	8009608 <__swsetup_r+0x9c>
 800959e:	0758      	lsls	r0, r3, #29
 80095a0:	d512      	bpl.n	80095c8 <__swsetup_r+0x5c>
 80095a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095a4:	b141      	cbz	r1, 80095b8 <__swsetup_r+0x4c>
 80095a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095aa:	4299      	cmp	r1, r3
 80095ac:	d002      	beq.n	80095b4 <__swsetup_r+0x48>
 80095ae:	4628      	mov	r0, r5
 80095b0:	f7fe ff0c 	bl	80083cc <_free_r>
 80095b4:	2300      	movs	r3, #0
 80095b6:	6363      	str	r3, [r4, #52]	; 0x34
 80095b8:	89a3      	ldrh	r3, [r4, #12]
 80095ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80095be:	81a3      	strh	r3, [r4, #12]
 80095c0:	2300      	movs	r3, #0
 80095c2:	6063      	str	r3, [r4, #4]
 80095c4:	6923      	ldr	r3, [r4, #16]
 80095c6:	6023      	str	r3, [r4, #0]
 80095c8:	89a3      	ldrh	r3, [r4, #12]
 80095ca:	f043 0308 	orr.w	r3, r3, #8
 80095ce:	81a3      	strh	r3, [r4, #12]
 80095d0:	6923      	ldr	r3, [r4, #16]
 80095d2:	b94b      	cbnz	r3, 80095e8 <__swsetup_r+0x7c>
 80095d4:	89a3      	ldrh	r3, [r4, #12]
 80095d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80095da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095de:	d003      	beq.n	80095e8 <__swsetup_r+0x7c>
 80095e0:	4621      	mov	r1, r4
 80095e2:	4628      	mov	r0, r5
 80095e4:	f000 f884 	bl	80096f0 <__smakebuf_r>
 80095e8:	89a0      	ldrh	r0, [r4, #12]
 80095ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095ee:	f010 0301 	ands.w	r3, r0, #1
 80095f2:	d00a      	beq.n	800960a <__swsetup_r+0x9e>
 80095f4:	2300      	movs	r3, #0
 80095f6:	60a3      	str	r3, [r4, #8]
 80095f8:	6963      	ldr	r3, [r4, #20]
 80095fa:	425b      	negs	r3, r3
 80095fc:	61a3      	str	r3, [r4, #24]
 80095fe:	6923      	ldr	r3, [r4, #16]
 8009600:	b943      	cbnz	r3, 8009614 <__swsetup_r+0xa8>
 8009602:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009606:	d1c4      	bne.n	8009592 <__swsetup_r+0x26>
 8009608:	bd38      	pop	{r3, r4, r5, pc}
 800960a:	0781      	lsls	r1, r0, #30
 800960c:	bf58      	it	pl
 800960e:	6963      	ldrpl	r3, [r4, #20]
 8009610:	60a3      	str	r3, [r4, #8]
 8009612:	e7f4      	b.n	80095fe <__swsetup_r+0x92>
 8009614:	2000      	movs	r0, #0
 8009616:	e7f7      	b.n	8009608 <__swsetup_r+0x9c>
 8009618:	2000006c 	.word	0x2000006c

0800961c <_raise_r>:
 800961c:	291f      	cmp	r1, #31
 800961e:	b538      	push	{r3, r4, r5, lr}
 8009620:	4604      	mov	r4, r0
 8009622:	460d      	mov	r5, r1
 8009624:	d904      	bls.n	8009630 <_raise_r+0x14>
 8009626:	2316      	movs	r3, #22
 8009628:	6003      	str	r3, [r0, #0]
 800962a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800962e:	bd38      	pop	{r3, r4, r5, pc}
 8009630:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009632:	b112      	cbz	r2, 800963a <_raise_r+0x1e>
 8009634:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009638:	b94b      	cbnz	r3, 800964e <_raise_r+0x32>
 800963a:	4620      	mov	r0, r4
 800963c:	f000 f830 	bl	80096a0 <_getpid_r>
 8009640:	462a      	mov	r2, r5
 8009642:	4601      	mov	r1, r0
 8009644:	4620      	mov	r0, r4
 8009646:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800964a:	f000 b817 	b.w	800967c <_kill_r>
 800964e:	2b01      	cmp	r3, #1
 8009650:	d00a      	beq.n	8009668 <_raise_r+0x4c>
 8009652:	1c59      	adds	r1, r3, #1
 8009654:	d103      	bne.n	800965e <_raise_r+0x42>
 8009656:	2316      	movs	r3, #22
 8009658:	6003      	str	r3, [r0, #0]
 800965a:	2001      	movs	r0, #1
 800965c:	e7e7      	b.n	800962e <_raise_r+0x12>
 800965e:	2400      	movs	r4, #0
 8009660:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009664:	4628      	mov	r0, r5
 8009666:	4798      	blx	r3
 8009668:	2000      	movs	r0, #0
 800966a:	e7e0      	b.n	800962e <_raise_r+0x12>

0800966c <raise>:
 800966c:	4b02      	ldr	r3, [pc, #8]	; (8009678 <raise+0xc>)
 800966e:	4601      	mov	r1, r0
 8009670:	6818      	ldr	r0, [r3, #0]
 8009672:	f7ff bfd3 	b.w	800961c <_raise_r>
 8009676:	bf00      	nop
 8009678:	2000006c 	.word	0x2000006c

0800967c <_kill_r>:
 800967c:	b538      	push	{r3, r4, r5, lr}
 800967e:	4d07      	ldr	r5, [pc, #28]	; (800969c <_kill_r+0x20>)
 8009680:	2300      	movs	r3, #0
 8009682:	4604      	mov	r4, r0
 8009684:	4608      	mov	r0, r1
 8009686:	4611      	mov	r1, r2
 8009688:	602b      	str	r3, [r5, #0]
 800968a:	f7f9 fbff 	bl	8002e8c <_kill>
 800968e:	1c43      	adds	r3, r0, #1
 8009690:	d102      	bne.n	8009698 <_kill_r+0x1c>
 8009692:	682b      	ldr	r3, [r5, #0]
 8009694:	b103      	cbz	r3, 8009698 <_kill_r+0x1c>
 8009696:	6023      	str	r3, [r4, #0]
 8009698:	bd38      	pop	{r3, r4, r5, pc}
 800969a:	bf00      	nop
 800969c:	200004f8 	.word	0x200004f8

080096a0 <_getpid_r>:
 80096a0:	f7f9 bbec 	b.w	8002e7c <_getpid>

080096a4 <__swhatbuf_r>:
 80096a4:	b570      	push	{r4, r5, r6, lr}
 80096a6:	460c      	mov	r4, r1
 80096a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096ac:	2900      	cmp	r1, #0
 80096ae:	b096      	sub	sp, #88	; 0x58
 80096b0:	4615      	mov	r5, r2
 80096b2:	461e      	mov	r6, r3
 80096b4:	da0d      	bge.n	80096d2 <__swhatbuf_r+0x2e>
 80096b6:	89a3      	ldrh	r3, [r4, #12]
 80096b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80096bc:	f04f 0100 	mov.w	r1, #0
 80096c0:	bf0c      	ite	eq
 80096c2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80096c6:	2340      	movne	r3, #64	; 0x40
 80096c8:	2000      	movs	r0, #0
 80096ca:	6031      	str	r1, [r6, #0]
 80096cc:	602b      	str	r3, [r5, #0]
 80096ce:	b016      	add	sp, #88	; 0x58
 80096d0:	bd70      	pop	{r4, r5, r6, pc}
 80096d2:	466a      	mov	r2, sp
 80096d4:	f000 f848 	bl	8009768 <_fstat_r>
 80096d8:	2800      	cmp	r0, #0
 80096da:	dbec      	blt.n	80096b6 <__swhatbuf_r+0x12>
 80096dc:	9901      	ldr	r1, [sp, #4]
 80096de:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80096e2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80096e6:	4259      	negs	r1, r3
 80096e8:	4159      	adcs	r1, r3
 80096ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096ee:	e7eb      	b.n	80096c8 <__swhatbuf_r+0x24>

080096f0 <__smakebuf_r>:
 80096f0:	898b      	ldrh	r3, [r1, #12]
 80096f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096f4:	079d      	lsls	r5, r3, #30
 80096f6:	4606      	mov	r6, r0
 80096f8:	460c      	mov	r4, r1
 80096fa:	d507      	bpl.n	800970c <__smakebuf_r+0x1c>
 80096fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009700:	6023      	str	r3, [r4, #0]
 8009702:	6123      	str	r3, [r4, #16]
 8009704:	2301      	movs	r3, #1
 8009706:	6163      	str	r3, [r4, #20]
 8009708:	b002      	add	sp, #8
 800970a:	bd70      	pop	{r4, r5, r6, pc}
 800970c:	ab01      	add	r3, sp, #4
 800970e:	466a      	mov	r2, sp
 8009710:	f7ff ffc8 	bl	80096a4 <__swhatbuf_r>
 8009714:	9900      	ldr	r1, [sp, #0]
 8009716:	4605      	mov	r5, r0
 8009718:	4630      	mov	r0, r6
 800971a:	f7fe fecb 	bl	80084b4 <_malloc_r>
 800971e:	b948      	cbnz	r0, 8009734 <__smakebuf_r+0x44>
 8009720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009724:	059a      	lsls	r2, r3, #22
 8009726:	d4ef      	bmi.n	8009708 <__smakebuf_r+0x18>
 8009728:	f023 0303 	bic.w	r3, r3, #3
 800972c:	f043 0302 	orr.w	r3, r3, #2
 8009730:	81a3      	strh	r3, [r4, #12]
 8009732:	e7e3      	b.n	80096fc <__smakebuf_r+0xc>
 8009734:	89a3      	ldrh	r3, [r4, #12]
 8009736:	6020      	str	r0, [r4, #0]
 8009738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800973c:	81a3      	strh	r3, [r4, #12]
 800973e:	9b00      	ldr	r3, [sp, #0]
 8009740:	6163      	str	r3, [r4, #20]
 8009742:	9b01      	ldr	r3, [sp, #4]
 8009744:	6120      	str	r0, [r4, #16]
 8009746:	b15b      	cbz	r3, 8009760 <__smakebuf_r+0x70>
 8009748:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800974c:	4630      	mov	r0, r6
 800974e:	f000 f81d 	bl	800978c <_isatty_r>
 8009752:	b128      	cbz	r0, 8009760 <__smakebuf_r+0x70>
 8009754:	89a3      	ldrh	r3, [r4, #12]
 8009756:	f023 0303 	bic.w	r3, r3, #3
 800975a:	f043 0301 	orr.w	r3, r3, #1
 800975e:	81a3      	strh	r3, [r4, #12]
 8009760:	89a3      	ldrh	r3, [r4, #12]
 8009762:	431d      	orrs	r5, r3
 8009764:	81a5      	strh	r5, [r4, #12]
 8009766:	e7cf      	b.n	8009708 <__smakebuf_r+0x18>

08009768 <_fstat_r>:
 8009768:	b538      	push	{r3, r4, r5, lr}
 800976a:	4d07      	ldr	r5, [pc, #28]	; (8009788 <_fstat_r+0x20>)
 800976c:	2300      	movs	r3, #0
 800976e:	4604      	mov	r4, r0
 8009770:	4608      	mov	r0, r1
 8009772:	4611      	mov	r1, r2
 8009774:	602b      	str	r3, [r5, #0]
 8009776:	f7f9 fbe8 	bl	8002f4a <_fstat>
 800977a:	1c43      	adds	r3, r0, #1
 800977c:	d102      	bne.n	8009784 <_fstat_r+0x1c>
 800977e:	682b      	ldr	r3, [r5, #0]
 8009780:	b103      	cbz	r3, 8009784 <_fstat_r+0x1c>
 8009782:	6023      	str	r3, [r4, #0]
 8009784:	bd38      	pop	{r3, r4, r5, pc}
 8009786:	bf00      	nop
 8009788:	200004f8 	.word	0x200004f8

0800978c <_isatty_r>:
 800978c:	b538      	push	{r3, r4, r5, lr}
 800978e:	4d06      	ldr	r5, [pc, #24]	; (80097a8 <_isatty_r+0x1c>)
 8009790:	2300      	movs	r3, #0
 8009792:	4604      	mov	r4, r0
 8009794:	4608      	mov	r0, r1
 8009796:	602b      	str	r3, [r5, #0]
 8009798:	f7f9 fbe7 	bl	8002f6a <_isatty>
 800979c:	1c43      	adds	r3, r0, #1
 800979e:	d102      	bne.n	80097a6 <_isatty_r+0x1a>
 80097a0:	682b      	ldr	r3, [r5, #0]
 80097a2:	b103      	cbz	r3, 80097a6 <_isatty_r+0x1a>
 80097a4:	6023      	str	r3, [r4, #0]
 80097a6:	bd38      	pop	{r3, r4, r5, pc}
 80097a8:	200004f8 	.word	0x200004f8

080097ac <atan2f>:
 80097ac:	f000 b886 	b.w	80098bc <__ieee754_atan2f>

080097b0 <powf>:
 80097b0:	b508      	push	{r3, lr}
 80097b2:	ed2d 8b04 	vpush	{d8-d9}
 80097b6:	eeb0 8a60 	vmov.f32	s16, s1
 80097ba:	eeb0 9a40 	vmov.f32	s18, s0
 80097be:	f000 f91d 	bl	80099fc <__ieee754_powf>
 80097c2:	eeb4 8a48 	vcmp.f32	s16, s16
 80097c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ca:	eef0 8a40 	vmov.f32	s17, s0
 80097ce:	d63e      	bvs.n	800984e <powf+0x9e>
 80097d0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80097d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097d8:	d112      	bne.n	8009800 <powf+0x50>
 80097da:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80097de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097e2:	d039      	beq.n	8009858 <powf+0xa8>
 80097e4:	eeb0 0a48 	vmov.f32	s0, s16
 80097e8:	f000 f858 	bl	800989c <finitef>
 80097ec:	b378      	cbz	r0, 800984e <powf+0x9e>
 80097ee:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80097f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097f6:	d52a      	bpl.n	800984e <powf+0x9e>
 80097f8:	f7fd ff32 	bl	8007660 <__errno>
 80097fc:	2322      	movs	r3, #34	; 0x22
 80097fe:	e014      	b.n	800982a <powf+0x7a>
 8009800:	f000 f84c 	bl	800989c <finitef>
 8009804:	b998      	cbnz	r0, 800982e <powf+0x7e>
 8009806:	eeb0 0a49 	vmov.f32	s0, s18
 800980a:	f000 f847 	bl	800989c <finitef>
 800980e:	b170      	cbz	r0, 800982e <powf+0x7e>
 8009810:	eeb0 0a48 	vmov.f32	s0, s16
 8009814:	f000 f842 	bl	800989c <finitef>
 8009818:	b148      	cbz	r0, 800982e <powf+0x7e>
 800981a:	eef4 8a68 	vcmp.f32	s17, s17
 800981e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009822:	d7e9      	bvc.n	80097f8 <powf+0x48>
 8009824:	f7fd ff1c 	bl	8007660 <__errno>
 8009828:	2321      	movs	r3, #33	; 0x21
 800982a:	6003      	str	r3, [r0, #0]
 800982c:	e00f      	b.n	800984e <powf+0x9e>
 800982e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8009832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009836:	d10a      	bne.n	800984e <powf+0x9e>
 8009838:	eeb0 0a49 	vmov.f32	s0, s18
 800983c:	f000 f82e 	bl	800989c <finitef>
 8009840:	b128      	cbz	r0, 800984e <powf+0x9e>
 8009842:	eeb0 0a48 	vmov.f32	s0, s16
 8009846:	f000 f829 	bl	800989c <finitef>
 800984a:	2800      	cmp	r0, #0
 800984c:	d1d4      	bne.n	80097f8 <powf+0x48>
 800984e:	eeb0 0a68 	vmov.f32	s0, s17
 8009852:	ecbd 8b04 	vpop	{d8-d9}
 8009856:	bd08      	pop	{r3, pc}
 8009858:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800985c:	e7f7      	b.n	800984e <powf+0x9e>
	...

08009860 <sqrtf>:
 8009860:	b508      	push	{r3, lr}
 8009862:	ed2d 8b02 	vpush	{d8}
 8009866:	eeb0 8a40 	vmov.f32	s16, s0
 800986a:	f000 f824 	bl	80098b6 <__ieee754_sqrtf>
 800986e:	eeb4 8a48 	vcmp.f32	s16, s16
 8009872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009876:	d60c      	bvs.n	8009892 <sqrtf+0x32>
 8009878:	eddf 8a07 	vldr	s17, [pc, #28]	; 8009898 <sqrtf+0x38>
 800987c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009884:	d505      	bpl.n	8009892 <sqrtf+0x32>
 8009886:	f7fd feeb 	bl	8007660 <__errno>
 800988a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800988e:	2321      	movs	r3, #33	; 0x21
 8009890:	6003      	str	r3, [r0, #0]
 8009892:	ecbd 8b02 	vpop	{d8}
 8009896:	bd08      	pop	{r3, pc}
 8009898:	00000000 	.word	0x00000000

0800989c <finitef>:
 800989c:	b082      	sub	sp, #8
 800989e:	ed8d 0a01 	vstr	s0, [sp, #4]
 80098a2:	9801      	ldr	r0, [sp, #4]
 80098a4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80098a8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80098ac:	bfac      	ite	ge
 80098ae:	2000      	movge	r0, #0
 80098b0:	2001      	movlt	r0, #1
 80098b2:	b002      	add	sp, #8
 80098b4:	4770      	bx	lr

080098b6 <__ieee754_sqrtf>:
 80098b6:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80098ba:	4770      	bx	lr

080098bc <__ieee754_atan2f>:
 80098bc:	ee10 2a90 	vmov	r2, s1
 80098c0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80098c4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80098c8:	b510      	push	{r4, lr}
 80098ca:	eef0 7a40 	vmov.f32	s15, s0
 80098ce:	dc06      	bgt.n	80098de <__ieee754_atan2f+0x22>
 80098d0:	ee10 0a10 	vmov	r0, s0
 80098d4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80098d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80098dc:	dd04      	ble.n	80098e8 <__ieee754_atan2f+0x2c>
 80098de:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80098e2:	eeb0 0a67 	vmov.f32	s0, s15
 80098e6:	bd10      	pop	{r4, pc}
 80098e8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80098ec:	d103      	bne.n	80098f6 <__ieee754_atan2f+0x3a>
 80098ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098f2:	f000 bb4d 	b.w	8009f90 <atanf>
 80098f6:	1794      	asrs	r4, r2, #30
 80098f8:	f004 0402 	and.w	r4, r4, #2
 80098fc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8009900:	b943      	cbnz	r3, 8009914 <__ieee754_atan2f+0x58>
 8009902:	2c02      	cmp	r4, #2
 8009904:	d05e      	beq.n	80099c4 <__ieee754_atan2f+0x108>
 8009906:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80099d8 <__ieee754_atan2f+0x11c>
 800990a:	2c03      	cmp	r4, #3
 800990c:	bf08      	it	eq
 800990e:	eef0 7a47 	vmoveq.f32	s15, s14
 8009912:	e7e6      	b.n	80098e2 <__ieee754_atan2f+0x26>
 8009914:	b941      	cbnz	r1, 8009928 <__ieee754_atan2f+0x6c>
 8009916:	eddf 7a31 	vldr	s15, [pc, #196]	; 80099dc <__ieee754_atan2f+0x120>
 800991a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80099e0 <__ieee754_atan2f+0x124>
 800991e:	2800      	cmp	r0, #0
 8009920:	bfb8      	it	lt
 8009922:	eef0 7a47 	vmovlt.f32	s15, s14
 8009926:	e7dc      	b.n	80098e2 <__ieee754_atan2f+0x26>
 8009928:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800992c:	d110      	bne.n	8009950 <__ieee754_atan2f+0x94>
 800992e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009932:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009936:	d107      	bne.n	8009948 <__ieee754_atan2f+0x8c>
 8009938:	2c02      	cmp	r4, #2
 800993a:	d846      	bhi.n	80099ca <__ieee754_atan2f+0x10e>
 800993c:	4b29      	ldr	r3, [pc, #164]	; (80099e4 <__ieee754_atan2f+0x128>)
 800993e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009942:	edd3 7a00 	vldr	s15, [r3]
 8009946:	e7cc      	b.n	80098e2 <__ieee754_atan2f+0x26>
 8009948:	2c02      	cmp	r4, #2
 800994a:	d841      	bhi.n	80099d0 <__ieee754_atan2f+0x114>
 800994c:	4b26      	ldr	r3, [pc, #152]	; (80099e8 <__ieee754_atan2f+0x12c>)
 800994e:	e7f6      	b.n	800993e <__ieee754_atan2f+0x82>
 8009950:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009954:	d0df      	beq.n	8009916 <__ieee754_atan2f+0x5a>
 8009956:	1a5b      	subs	r3, r3, r1
 8009958:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800995c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8009960:	da1a      	bge.n	8009998 <__ieee754_atan2f+0xdc>
 8009962:	2a00      	cmp	r2, #0
 8009964:	da01      	bge.n	800996a <__ieee754_atan2f+0xae>
 8009966:	313c      	adds	r1, #60	; 0x3c
 8009968:	db19      	blt.n	800999e <__ieee754_atan2f+0xe2>
 800996a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800996e:	f000 fbe3 	bl	800a138 <fabsf>
 8009972:	f000 fb0d 	bl	8009f90 <atanf>
 8009976:	eef0 7a40 	vmov.f32	s15, s0
 800997a:	2c01      	cmp	r4, #1
 800997c:	d012      	beq.n	80099a4 <__ieee754_atan2f+0xe8>
 800997e:	2c02      	cmp	r4, #2
 8009980:	d017      	beq.n	80099b2 <__ieee754_atan2f+0xf6>
 8009982:	2c00      	cmp	r4, #0
 8009984:	d0ad      	beq.n	80098e2 <__ieee754_atan2f+0x26>
 8009986:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80099ec <__ieee754_atan2f+0x130>
 800998a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800998e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80099f0 <__ieee754_atan2f+0x134>
 8009992:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009996:	e7a4      	b.n	80098e2 <__ieee754_atan2f+0x26>
 8009998:	eddf 7a10 	vldr	s15, [pc, #64]	; 80099dc <__ieee754_atan2f+0x120>
 800999c:	e7ed      	b.n	800997a <__ieee754_atan2f+0xbe>
 800999e:	eddf 7a15 	vldr	s15, [pc, #84]	; 80099f4 <__ieee754_atan2f+0x138>
 80099a2:	e7ea      	b.n	800997a <__ieee754_atan2f+0xbe>
 80099a4:	ee17 3a90 	vmov	r3, s15
 80099a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80099ac:	ee07 3a90 	vmov	s15, r3
 80099b0:	e797      	b.n	80098e2 <__ieee754_atan2f+0x26>
 80099b2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80099ec <__ieee754_atan2f+0x130>
 80099b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80099ba:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80099f0 <__ieee754_atan2f+0x134>
 80099be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099c2:	e78e      	b.n	80098e2 <__ieee754_atan2f+0x26>
 80099c4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80099f0 <__ieee754_atan2f+0x134>
 80099c8:	e78b      	b.n	80098e2 <__ieee754_atan2f+0x26>
 80099ca:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80099f8 <__ieee754_atan2f+0x13c>
 80099ce:	e788      	b.n	80098e2 <__ieee754_atan2f+0x26>
 80099d0:	eddf 7a08 	vldr	s15, [pc, #32]	; 80099f4 <__ieee754_atan2f+0x138>
 80099d4:	e785      	b.n	80098e2 <__ieee754_atan2f+0x26>
 80099d6:	bf00      	nop
 80099d8:	c0490fdb 	.word	0xc0490fdb
 80099dc:	3fc90fdb 	.word	0x3fc90fdb
 80099e0:	bfc90fdb 	.word	0xbfc90fdb
 80099e4:	0800a62c 	.word	0x0800a62c
 80099e8:	0800a638 	.word	0x0800a638
 80099ec:	33bbbd2e 	.word	0x33bbbd2e
 80099f0:	40490fdb 	.word	0x40490fdb
 80099f4:	00000000 	.word	0x00000000
 80099f8:	3f490fdb 	.word	0x3f490fdb

080099fc <__ieee754_powf>:
 80099fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a00:	ee10 4a90 	vmov	r4, s1
 8009a04:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8009a08:	ed2d 8b02 	vpush	{d8}
 8009a0c:	ee10 7a10 	vmov	r7, s0
 8009a10:	eeb0 8a40 	vmov.f32	s16, s0
 8009a14:	eef0 8a60 	vmov.f32	s17, s1
 8009a18:	d10c      	bne.n	8009a34 <__ieee754_powf+0x38>
 8009a1a:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 8009a1e:	007f      	lsls	r7, r7, #1
 8009a20:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 8009a24:	f240 8292 	bls.w	8009f4c <__ieee754_powf+0x550>
 8009a28:	ee38 0a28 	vadd.f32	s0, s16, s17
 8009a2c:	ecbd 8b02 	vpop	{d8}
 8009a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a34:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 8009a38:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8009a3c:	dcf4      	bgt.n	8009a28 <__ieee754_powf+0x2c>
 8009a3e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8009a42:	dd08      	ble.n	8009a56 <__ieee754_powf+0x5a>
 8009a44:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8009a48:	d1ee      	bne.n	8009a28 <__ieee754_powf+0x2c>
 8009a4a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8009a4e:	0064      	lsls	r4, r4, #1
 8009a50:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8009a54:	e7e6      	b.n	8009a24 <__ieee754_powf+0x28>
 8009a56:	2f00      	cmp	r7, #0
 8009a58:	da20      	bge.n	8009a9c <__ieee754_powf+0xa0>
 8009a5a:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8009a5e:	da2d      	bge.n	8009abc <__ieee754_powf+0xc0>
 8009a60:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8009a64:	f2c0 827b 	blt.w	8009f5e <__ieee754_powf+0x562>
 8009a68:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8009a6c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8009a70:	fa48 f603 	asr.w	r6, r8, r3
 8009a74:	fa06 f303 	lsl.w	r3, r6, r3
 8009a78:	4543      	cmp	r3, r8
 8009a7a:	f040 8270 	bne.w	8009f5e <__ieee754_powf+0x562>
 8009a7e:	f006 0601 	and.w	r6, r6, #1
 8009a82:	f1c6 0602 	rsb	r6, r6, #2
 8009a86:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8009a8a:	d11f      	bne.n	8009acc <__ieee754_powf+0xd0>
 8009a8c:	2c00      	cmp	r4, #0
 8009a8e:	f280 8263 	bge.w	8009f58 <__ieee754_powf+0x55c>
 8009a92:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009a96:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8009a9a:	e7c7      	b.n	8009a2c <__ieee754_powf+0x30>
 8009a9c:	2600      	movs	r6, #0
 8009a9e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8009aa2:	d1f0      	bne.n	8009a86 <__ieee754_powf+0x8a>
 8009aa4:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8009aa8:	f000 8250 	beq.w	8009f4c <__ieee754_powf+0x550>
 8009aac:	dd08      	ble.n	8009ac0 <__ieee754_powf+0xc4>
 8009aae:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8009db4 <__ieee754_powf+0x3b8>
 8009ab2:	2c00      	cmp	r4, #0
 8009ab4:	bfa8      	it	ge
 8009ab6:	eeb0 0a68 	vmovge.f32	s0, s17
 8009aba:	e7b7      	b.n	8009a2c <__ieee754_powf+0x30>
 8009abc:	2602      	movs	r6, #2
 8009abe:	e7ee      	b.n	8009a9e <__ieee754_powf+0xa2>
 8009ac0:	2c00      	cmp	r4, #0
 8009ac2:	f280 8246 	bge.w	8009f52 <__ieee754_powf+0x556>
 8009ac6:	eeb1 0a68 	vneg.f32	s0, s17
 8009aca:	e7af      	b.n	8009a2c <__ieee754_powf+0x30>
 8009acc:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8009ad0:	d102      	bne.n	8009ad8 <__ieee754_powf+0xdc>
 8009ad2:	ee28 0a08 	vmul.f32	s0, s16, s16
 8009ad6:	e7a9      	b.n	8009a2c <__ieee754_powf+0x30>
 8009ad8:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8009adc:	eeb0 0a48 	vmov.f32	s0, s16
 8009ae0:	d107      	bne.n	8009af2 <__ieee754_powf+0xf6>
 8009ae2:	2f00      	cmp	r7, #0
 8009ae4:	db05      	blt.n	8009af2 <__ieee754_powf+0xf6>
 8009ae6:	ecbd 8b02 	vpop	{d8}
 8009aea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009aee:	f7ff bee2 	b.w	80098b6 <__ieee754_sqrtf>
 8009af2:	f000 fb21 	bl	800a138 <fabsf>
 8009af6:	b125      	cbz	r5, 8009b02 <__ieee754_powf+0x106>
 8009af8:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 8009afc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8009b00:	d115      	bne.n	8009b2e <__ieee754_powf+0x132>
 8009b02:	2c00      	cmp	r4, #0
 8009b04:	bfbc      	itt	lt
 8009b06:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8009b0a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8009b0e:	2f00      	cmp	r7, #0
 8009b10:	da8c      	bge.n	8009a2c <__ieee754_powf+0x30>
 8009b12:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8009b16:	4335      	orrs	r5, r6
 8009b18:	d104      	bne.n	8009b24 <__ieee754_powf+0x128>
 8009b1a:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009b1e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8009b22:	e783      	b.n	8009a2c <__ieee754_powf+0x30>
 8009b24:	2e01      	cmp	r6, #1
 8009b26:	d181      	bne.n	8009a2c <__ieee754_powf+0x30>
 8009b28:	eeb1 0a40 	vneg.f32	s0, s0
 8009b2c:	e77e      	b.n	8009a2c <__ieee754_powf+0x30>
 8009b2e:	0ff8      	lsrs	r0, r7, #31
 8009b30:	3801      	subs	r0, #1
 8009b32:	ea56 0300 	orrs.w	r3, r6, r0
 8009b36:	d104      	bne.n	8009b42 <__ieee754_powf+0x146>
 8009b38:	ee38 8a48 	vsub.f32	s16, s16, s16
 8009b3c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8009b40:	e774      	b.n	8009a2c <__ieee754_powf+0x30>
 8009b42:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8009b46:	dd73      	ble.n	8009c30 <__ieee754_powf+0x234>
 8009b48:	4b9b      	ldr	r3, [pc, #620]	; (8009db8 <__ieee754_powf+0x3bc>)
 8009b4a:	429d      	cmp	r5, r3
 8009b4c:	dc08      	bgt.n	8009b60 <__ieee754_powf+0x164>
 8009b4e:	2c00      	cmp	r4, #0
 8009b50:	da0b      	bge.n	8009b6a <__ieee754_powf+0x16e>
 8009b52:	2000      	movs	r0, #0
 8009b54:	ecbd 8b02 	vpop	{d8}
 8009b58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b5c:	f000 bb76 	b.w	800a24c <__math_oflowf>
 8009b60:	4b96      	ldr	r3, [pc, #600]	; (8009dbc <__ieee754_powf+0x3c0>)
 8009b62:	429d      	cmp	r5, r3
 8009b64:	dd08      	ble.n	8009b78 <__ieee754_powf+0x17c>
 8009b66:	2c00      	cmp	r4, #0
 8009b68:	dcf3      	bgt.n	8009b52 <__ieee754_powf+0x156>
 8009b6a:	2000      	movs	r0, #0
 8009b6c:	ecbd 8b02 	vpop	{d8}
 8009b70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b74:	f000 bb64 	b.w	800a240 <__math_uflowf>
 8009b78:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009b7c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009b80:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8009dc0 <__ieee754_powf+0x3c4>
 8009b84:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8009b88:	eee0 6a67 	vfms.f32	s13, s0, s15
 8009b8c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009b90:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8009b94:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009b98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009b9c:	eddf 7a89 	vldr	s15, [pc, #548]	; 8009dc4 <__ieee754_powf+0x3c8>
 8009ba0:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8009ba4:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8009dc8 <__ieee754_powf+0x3cc>
 8009ba8:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009bac:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8009dcc <__ieee754_powf+0x3d0>
 8009bb0:	eef0 6a67 	vmov.f32	s13, s15
 8009bb4:	eee0 6a07 	vfma.f32	s13, s0, s14
 8009bb8:	ee16 3a90 	vmov	r3, s13
 8009bbc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009bc0:	f023 030f 	bic.w	r3, r3, #15
 8009bc4:	ee06 3a90 	vmov	s13, r3
 8009bc8:	eee0 6a47 	vfms.f32	s13, s0, s14
 8009bcc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009bd0:	3e01      	subs	r6, #1
 8009bd2:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8009bd6:	4306      	orrs	r6, r0
 8009bd8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009bdc:	f024 040f 	bic.w	r4, r4, #15
 8009be0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8009be4:	bf08      	it	eq
 8009be6:	eeb0 8a47 	vmoveq.f32	s16, s14
 8009bea:	ee07 4a10 	vmov	s14, r4
 8009bee:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8009bf2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8009bf6:	ee07 3a90 	vmov	s15, r3
 8009bfa:	eee7 0a27 	vfma.f32	s1, s14, s15
 8009bfe:	ee07 4a10 	vmov	s14, r4
 8009c02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c06:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8009c0a:	ee17 1a10 	vmov	r1, s14
 8009c0e:	2900      	cmp	r1, #0
 8009c10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009c14:	f340 817c 	ble.w	8009f10 <__ieee754_powf+0x514>
 8009c18:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8009c1c:	f340 80f8 	ble.w	8009e10 <__ieee754_powf+0x414>
 8009c20:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c28:	bf4c      	ite	mi
 8009c2a:	2001      	movmi	r0, #1
 8009c2c:	2000      	movpl	r0, #0
 8009c2e:	e791      	b.n	8009b54 <__ieee754_powf+0x158>
 8009c30:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 8009c34:	bf01      	itttt	eq
 8009c36:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8009dd0 <__ieee754_powf+0x3d4>
 8009c3a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8009c3e:	f06f 0317 	mvneq.w	r3, #23
 8009c42:	ee17 5a90 	vmoveq	r5, s15
 8009c46:	ea4f 52e5 	mov.w	r2, r5, asr #23
 8009c4a:	bf18      	it	ne
 8009c4c:	2300      	movne	r3, #0
 8009c4e:	3a7f      	subs	r2, #127	; 0x7f
 8009c50:	441a      	add	r2, r3
 8009c52:	4b60      	ldr	r3, [pc, #384]	; (8009dd4 <__ieee754_powf+0x3d8>)
 8009c54:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8009c58:	429d      	cmp	r5, r3
 8009c5a:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8009c5e:	dd06      	ble.n	8009c6e <__ieee754_powf+0x272>
 8009c60:	4b5d      	ldr	r3, [pc, #372]	; (8009dd8 <__ieee754_powf+0x3dc>)
 8009c62:	429d      	cmp	r5, r3
 8009c64:	f340 80a4 	ble.w	8009db0 <__ieee754_powf+0x3b4>
 8009c68:	3201      	adds	r2, #1
 8009c6a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8009c6e:	2500      	movs	r5, #0
 8009c70:	4b5a      	ldr	r3, [pc, #360]	; (8009ddc <__ieee754_powf+0x3e0>)
 8009c72:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8009c76:	ee07 1a10 	vmov	s14, r1
 8009c7a:	edd3 5a00 	vldr	s11, [r3]
 8009c7e:	4b58      	ldr	r3, [pc, #352]	; (8009de0 <__ieee754_powf+0x3e4>)
 8009c80:	ee75 7a87 	vadd.f32	s15, s11, s14
 8009c84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c88:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8009c8c:	1049      	asrs	r1, r1, #1
 8009c8e:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8009c92:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8009c96:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8009c9a:	ee37 6a65 	vsub.f32	s12, s14, s11
 8009c9e:	ee07 1a90 	vmov	s15, r1
 8009ca2:	ee26 5a24 	vmul.f32	s10, s12, s9
 8009ca6:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8009caa:	ee15 7a10 	vmov	r7, s10
 8009cae:	401f      	ands	r7, r3
 8009cb0:	ee06 7a90 	vmov	s13, r7
 8009cb4:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8009cb8:	ee37 7a65 	vsub.f32	s14, s14, s11
 8009cbc:	ee65 7a05 	vmul.f32	s15, s10, s10
 8009cc0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8009cc4:	eddf 5a47 	vldr	s11, [pc, #284]	; 8009de4 <__ieee754_powf+0x3e8>
 8009cc8:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8009de8 <__ieee754_powf+0x3ec>
 8009ccc:	eee7 5a87 	vfma.f32	s11, s15, s14
 8009cd0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8009dec <__ieee754_powf+0x3f0>
 8009cd4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009cd8:	eddf 5a39 	vldr	s11, [pc, #228]	; 8009dc0 <__ieee754_powf+0x3c4>
 8009cdc:	eee7 5a27 	vfma.f32	s11, s14, s15
 8009ce0:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8009df0 <__ieee754_powf+0x3f4>
 8009ce4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009ce8:	eddf 5a42 	vldr	s11, [pc, #264]	; 8009df4 <__ieee754_powf+0x3f8>
 8009cec:	ee26 6a24 	vmul.f32	s12, s12, s9
 8009cf0:	eee7 5a27 	vfma.f32	s11, s14, s15
 8009cf4:	ee35 7a26 	vadd.f32	s14, s10, s13
 8009cf8:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8009cfc:	ee27 7a06 	vmul.f32	s14, s14, s12
 8009d00:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8009d04:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8009d08:	eef0 5a67 	vmov.f32	s11, s15
 8009d0c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8009d10:	ee75 5a87 	vadd.f32	s11, s11, s14
 8009d14:	ee15 1a90 	vmov	r1, s11
 8009d18:	4019      	ands	r1, r3
 8009d1a:	ee05 1a90 	vmov	s11, r1
 8009d1e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8009d22:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8009d26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d2a:	ee67 7a85 	vmul.f32	s15, s15, s10
 8009d2e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009d32:	eeb0 6a67 	vmov.f32	s12, s15
 8009d36:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8009d3a:	ee16 1a10 	vmov	r1, s12
 8009d3e:	4019      	ands	r1, r3
 8009d40:	ee07 1a10 	vmov	s14, r1
 8009d44:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8009d48:	ee06 1a10 	vmov	s12, r1
 8009d4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d50:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8009df8 <__ieee754_powf+0x3fc>
 8009d54:	4929      	ldr	r1, [pc, #164]	; (8009dfc <__ieee754_powf+0x400>)
 8009d56:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8009e00 <__ieee754_powf+0x404>
 8009d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009d5e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8009e04 <__ieee754_powf+0x408>
 8009d62:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009d66:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8009d6a:	ed91 7a00 	vldr	s14, [r1]
 8009d6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d72:	ee07 2a10 	vmov	s14, r2
 8009d76:	eef0 6a67 	vmov.f32	s13, s15
 8009d7a:	4a23      	ldr	r2, [pc, #140]	; (8009e08 <__ieee754_powf+0x40c>)
 8009d7c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8009d80:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8009d84:	ed92 5a00 	vldr	s10, [r2]
 8009d88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009d8c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009d90:	ee76 6a87 	vadd.f32	s13, s13, s14
 8009d94:	ee16 2a90 	vmov	r2, s13
 8009d98:	4013      	ands	r3, r2
 8009d9a:	ee06 3a90 	vmov	s13, r3
 8009d9e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009da2:	ee37 7a45 	vsub.f32	s14, s14, s10
 8009da6:	eea6 7a65 	vfms.f32	s14, s12, s11
 8009daa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009dae:	e70f      	b.n	8009bd0 <__ieee754_powf+0x1d4>
 8009db0:	2501      	movs	r5, #1
 8009db2:	e75d      	b.n	8009c70 <__ieee754_powf+0x274>
 8009db4:	00000000 	.word	0x00000000
 8009db8:	3f7ffff3 	.word	0x3f7ffff3
 8009dbc:	3f800007 	.word	0x3f800007
 8009dc0:	3eaaaaab 	.word	0x3eaaaaab
 8009dc4:	3fb8aa3b 	.word	0x3fb8aa3b
 8009dc8:	36eca570 	.word	0x36eca570
 8009dcc:	3fb8aa00 	.word	0x3fb8aa00
 8009dd0:	4b800000 	.word	0x4b800000
 8009dd4:	001cc471 	.word	0x001cc471
 8009dd8:	005db3d6 	.word	0x005db3d6
 8009ddc:	0800a644 	.word	0x0800a644
 8009de0:	fffff000 	.word	0xfffff000
 8009de4:	3e6c3255 	.word	0x3e6c3255
 8009de8:	3e53f142 	.word	0x3e53f142
 8009dec:	3e8ba305 	.word	0x3e8ba305
 8009df0:	3edb6db7 	.word	0x3edb6db7
 8009df4:	3f19999a 	.word	0x3f19999a
 8009df8:	3f76384f 	.word	0x3f76384f
 8009dfc:	0800a654 	.word	0x0800a654
 8009e00:	3f763800 	.word	0x3f763800
 8009e04:	369dc3a0 	.word	0x369dc3a0
 8009e08:	0800a64c 	.word	0x0800a64c
 8009e0c:	3338aa3c 	.word	0x3338aa3c
 8009e10:	f040 8093 	bne.w	8009f3a <__ieee754_powf+0x53e>
 8009e14:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8009e0c <__ieee754_powf+0x410>
 8009e18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009e1c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8009e20:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e28:	f73f aefa 	bgt.w	8009c20 <__ieee754_powf+0x224>
 8009e2c:	15db      	asrs	r3, r3, #23
 8009e2e:	3b7e      	subs	r3, #126	; 0x7e
 8009e30:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8009e34:	4118      	asrs	r0, r3
 8009e36:	4408      	add	r0, r1
 8009e38:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009e3c:	4a49      	ldr	r2, [pc, #292]	; (8009f64 <__ieee754_powf+0x568>)
 8009e3e:	3b7f      	subs	r3, #127	; 0x7f
 8009e40:	411a      	asrs	r2, r3
 8009e42:	4002      	ands	r2, r0
 8009e44:	ee07 2a10 	vmov	s14, r2
 8009e48:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8009e4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8009e50:	f1c3 0317 	rsb	r3, r3, #23
 8009e54:	4118      	asrs	r0, r3
 8009e56:	2900      	cmp	r1, #0
 8009e58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009e5c:	bfb8      	it	lt
 8009e5e:	4240      	neglt	r0, r0
 8009e60:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8009e64:	eddf 6a40 	vldr	s13, [pc, #256]	; 8009f68 <__ieee754_powf+0x56c>
 8009e68:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8009f6c <__ieee754_powf+0x570>
 8009e6c:	ee17 3a10 	vmov	r3, s14
 8009e70:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009e74:	f023 030f 	bic.w	r3, r3, #15
 8009e78:	ee07 3a10 	vmov	s14, r3
 8009e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e80:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009e84:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009e88:	eddf 7a39 	vldr	s15, [pc, #228]	; 8009f70 <__ieee754_powf+0x574>
 8009e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e90:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8009e94:	eef0 6a67 	vmov.f32	s13, s15
 8009e98:	eee7 6a06 	vfma.f32	s13, s14, s12
 8009e9c:	eef0 5a66 	vmov.f32	s11, s13
 8009ea0:	eee7 5a46 	vfms.f32	s11, s14, s12
 8009ea4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8009ea8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009eac:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8009f74 <__ieee754_powf+0x578>
 8009eb0:	eddf 5a31 	vldr	s11, [pc, #196]	; 8009f78 <__ieee754_powf+0x57c>
 8009eb4:	eea7 6a25 	vfma.f32	s12, s14, s11
 8009eb8:	eddf 5a30 	vldr	s11, [pc, #192]	; 8009f7c <__ieee754_powf+0x580>
 8009ebc:	eee6 5a07 	vfma.f32	s11, s12, s14
 8009ec0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8009f80 <__ieee754_powf+0x584>
 8009ec4:	eea5 6a87 	vfma.f32	s12, s11, s14
 8009ec8:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009f84 <__ieee754_powf+0x588>
 8009ecc:	eee6 5a07 	vfma.f32	s11, s12, s14
 8009ed0:	eeb0 6a66 	vmov.f32	s12, s13
 8009ed4:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8009ed8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009edc:	ee66 5a86 	vmul.f32	s11, s13, s12
 8009ee0:	ee36 6a47 	vsub.f32	s12, s12, s14
 8009ee4:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8009ee8:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8009eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ef0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009ef4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009ef8:	ee10 3a10 	vmov	r3, s0
 8009efc:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8009f00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009f04:	da1f      	bge.n	8009f46 <__ieee754_powf+0x54a>
 8009f06:	f000 f91f 	bl	800a148 <scalbnf>
 8009f0a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8009f0e:	e58d      	b.n	8009a2c <__ieee754_powf+0x30>
 8009f10:	4a1d      	ldr	r2, [pc, #116]	; (8009f88 <__ieee754_powf+0x58c>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	dd07      	ble.n	8009f26 <__ieee754_powf+0x52a>
 8009f16:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f1e:	bf4c      	ite	mi
 8009f20:	2001      	movmi	r0, #1
 8009f22:	2000      	movpl	r0, #0
 8009f24:	e622      	b.n	8009b6c <__ieee754_powf+0x170>
 8009f26:	d108      	bne.n	8009f3a <__ieee754_powf+0x53e>
 8009f28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009f2c:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8009f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f34:	f6ff af7a 	blt.w	8009e2c <__ieee754_powf+0x430>
 8009f38:	e7ed      	b.n	8009f16 <__ieee754_powf+0x51a>
 8009f3a:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8009f3e:	f73f af75 	bgt.w	8009e2c <__ieee754_powf+0x430>
 8009f42:	2000      	movs	r0, #0
 8009f44:	e78c      	b.n	8009e60 <__ieee754_powf+0x464>
 8009f46:	ee00 3a10 	vmov	s0, r3
 8009f4a:	e7de      	b.n	8009f0a <__ieee754_powf+0x50e>
 8009f4c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009f50:	e56c      	b.n	8009a2c <__ieee754_powf+0x30>
 8009f52:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8009f8c <__ieee754_powf+0x590>
 8009f56:	e569      	b.n	8009a2c <__ieee754_powf+0x30>
 8009f58:	eeb0 0a48 	vmov.f32	s0, s16
 8009f5c:	e566      	b.n	8009a2c <__ieee754_powf+0x30>
 8009f5e:	2600      	movs	r6, #0
 8009f60:	e591      	b.n	8009a86 <__ieee754_powf+0x8a>
 8009f62:	bf00      	nop
 8009f64:	ff800000 	.word	0xff800000
 8009f68:	3f317218 	.word	0x3f317218
 8009f6c:	3f317200 	.word	0x3f317200
 8009f70:	35bfbe8c 	.word	0x35bfbe8c
 8009f74:	b5ddea0e 	.word	0xb5ddea0e
 8009f78:	3331bb4c 	.word	0x3331bb4c
 8009f7c:	388ab355 	.word	0x388ab355
 8009f80:	bb360b61 	.word	0xbb360b61
 8009f84:	3e2aaaab 	.word	0x3e2aaaab
 8009f88:	43160000 	.word	0x43160000
 8009f8c:	00000000 	.word	0x00000000

08009f90 <atanf>:
 8009f90:	b538      	push	{r3, r4, r5, lr}
 8009f92:	ee10 5a10 	vmov	r5, s0
 8009f96:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8009f9a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8009f9e:	eef0 7a40 	vmov.f32	s15, s0
 8009fa2:	db10      	blt.n	8009fc6 <atanf+0x36>
 8009fa4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009fa8:	dd04      	ble.n	8009fb4 <atanf+0x24>
 8009faa:	ee70 7a00 	vadd.f32	s15, s0, s0
 8009fae:	eeb0 0a67 	vmov.f32	s0, s15
 8009fb2:	bd38      	pop	{r3, r4, r5, pc}
 8009fb4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800a0ec <atanf+0x15c>
 8009fb8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800a0f0 <atanf+0x160>
 8009fbc:	2d00      	cmp	r5, #0
 8009fbe:	bfd8      	it	le
 8009fc0:	eef0 7a47 	vmovle.f32	s15, s14
 8009fc4:	e7f3      	b.n	8009fae <atanf+0x1e>
 8009fc6:	4b4b      	ldr	r3, [pc, #300]	; (800a0f4 <atanf+0x164>)
 8009fc8:	429c      	cmp	r4, r3
 8009fca:	dc10      	bgt.n	8009fee <atanf+0x5e>
 8009fcc:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8009fd0:	da0a      	bge.n	8009fe8 <atanf+0x58>
 8009fd2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800a0f8 <atanf+0x168>
 8009fd6:	ee30 7a07 	vadd.f32	s14, s0, s14
 8009fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fde:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fe6:	dce2      	bgt.n	8009fae <atanf+0x1e>
 8009fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009fec:	e013      	b.n	800a016 <atanf+0x86>
 8009fee:	f000 f8a3 	bl	800a138 <fabsf>
 8009ff2:	4b42      	ldr	r3, [pc, #264]	; (800a0fc <atanf+0x16c>)
 8009ff4:	429c      	cmp	r4, r3
 8009ff6:	dc4f      	bgt.n	800a098 <atanf+0x108>
 8009ff8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8009ffc:	429c      	cmp	r4, r3
 8009ffe:	dc41      	bgt.n	800a084 <atanf+0xf4>
 800a000:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800a004:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a008:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a00c:	2300      	movs	r3, #0
 800a00e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a012:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a016:	1c5a      	adds	r2, r3, #1
 800a018:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800a01c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800a100 <atanf+0x170>
 800a020:	eddf 5a38 	vldr	s11, [pc, #224]	; 800a104 <atanf+0x174>
 800a024:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800a108 <atanf+0x178>
 800a028:	ee66 6a06 	vmul.f32	s13, s12, s12
 800a02c:	eee6 5a87 	vfma.f32	s11, s13, s14
 800a030:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a10c <atanf+0x17c>
 800a034:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a038:	eddf 5a35 	vldr	s11, [pc, #212]	; 800a110 <atanf+0x180>
 800a03c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a040:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a114 <atanf+0x184>
 800a044:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a048:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a118 <atanf+0x188>
 800a04c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a050:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800a11c <atanf+0x18c>
 800a054:	eea6 5a87 	vfma.f32	s10, s13, s14
 800a058:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800a120 <atanf+0x190>
 800a05c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a060:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800a124 <atanf+0x194>
 800a064:	eea7 5a26 	vfma.f32	s10, s14, s13
 800a068:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800a128 <atanf+0x198>
 800a06c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a070:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a074:	eea5 7a86 	vfma.f32	s14, s11, s12
 800a078:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a07c:	d121      	bne.n	800a0c2 <atanf+0x132>
 800a07e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a082:	e794      	b.n	8009fae <atanf+0x1e>
 800a084:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a088:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a08c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a090:	2301      	movs	r3, #1
 800a092:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a096:	e7be      	b.n	800a016 <atanf+0x86>
 800a098:	4b24      	ldr	r3, [pc, #144]	; (800a12c <atanf+0x19c>)
 800a09a:	429c      	cmp	r4, r3
 800a09c:	dc0b      	bgt.n	800a0b6 <atanf+0x126>
 800a09e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800a0a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0a6:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a0aa:	2302      	movs	r3, #2
 800a0ac:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a0b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0b4:	e7af      	b.n	800a016 <atanf+0x86>
 800a0b6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a0ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a0be:	2303      	movs	r3, #3
 800a0c0:	e7a9      	b.n	800a016 <atanf+0x86>
 800a0c2:	4a1b      	ldr	r2, [pc, #108]	; (800a130 <atanf+0x1a0>)
 800a0c4:	491b      	ldr	r1, [pc, #108]	; (800a134 <atanf+0x1a4>)
 800a0c6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a0ca:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a0ce:	edd3 6a00 	vldr	s13, [r3]
 800a0d2:	ee37 7a66 	vsub.f32	s14, s14, s13
 800a0d6:	2d00      	cmp	r5, #0
 800a0d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a0dc:	edd2 7a00 	vldr	s15, [r2]
 800a0e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a0e4:	bfb8      	it	lt
 800a0e6:	eef1 7a67 	vneglt.f32	s15, s15
 800a0ea:	e760      	b.n	8009fae <atanf+0x1e>
 800a0ec:	3fc90fdb 	.word	0x3fc90fdb
 800a0f0:	bfc90fdb 	.word	0xbfc90fdb
 800a0f4:	3edfffff 	.word	0x3edfffff
 800a0f8:	7149f2ca 	.word	0x7149f2ca
 800a0fc:	3f97ffff 	.word	0x3f97ffff
 800a100:	3c8569d7 	.word	0x3c8569d7
 800a104:	3d4bda59 	.word	0x3d4bda59
 800a108:	bd6ef16b 	.word	0xbd6ef16b
 800a10c:	3d886b35 	.word	0x3d886b35
 800a110:	3dba2e6e 	.word	0x3dba2e6e
 800a114:	3e124925 	.word	0x3e124925
 800a118:	3eaaaaab 	.word	0x3eaaaaab
 800a11c:	bd15a221 	.word	0xbd15a221
 800a120:	bd9d8795 	.word	0xbd9d8795
 800a124:	bde38e38 	.word	0xbde38e38
 800a128:	be4ccccd 	.word	0xbe4ccccd
 800a12c:	401bffff 	.word	0x401bffff
 800a130:	0800a65c 	.word	0x0800a65c
 800a134:	0800a66c 	.word	0x0800a66c

0800a138 <fabsf>:
 800a138:	ee10 3a10 	vmov	r3, s0
 800a13c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a140:	ee00 3a10 	vmov	s0, r3
 800a144:	4770      	bx	lr
	...

0800a148 <scalbnf>:
 800a148:	ee10 3a10 	vmov	r3, s0
 800a14c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800a150:	d02b      	beq.n	800a1aa <scalbnf+0x62>
 800a152:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a156:	d302      	bcc.n	800a15e <scalbnf+0x16>
 800a158:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a15c:	4770      	bx	lr
 800a15e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800a162:	d123      	bne.n	800a1ac <scalbnf+0x64>
 800a164:	4b24      	ldr	r3, [pc, #144]	; (800a1f8 <scalbnf+0xb0>)
 800a166:	eddf 7a25 	vldr	s15, [pc, #148]	; 800a1fc <scalbnf+0xb4>
 800a16a:	4298      	cmp	r0, r3
 800a16c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a170:	db17      	blt.n	800a1a2 <scalbnf+0x5a>
 800a172:	ee10 3a10 	vmov	r3, s0
 800a176:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a17a:	3a19      	subs	r2, #25
 800a17c:	f24c 3150 	movw	r1, #50000	; 0xc350
 800a180:	4288      	cmp	r0, r1
 800a182:	dd15      	ble.n	800a1b0 <scalbnf+0x68>
 800a184:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800a200 <scalbnf+0xb8>
 800a188:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800a204 <scalbnf+0xbc>
 800a18c:	ee10 3a10 	vmov	r3, s0
 800a190:	eeb0 7a67 	vmov.f32	s14, s15
 800a194:	2b00      	cmp	r3, #0
 800a196:	bfb8      	it	lt
 800a198:	eef0 7a66 	vmovlt.f32	s15, s13
 800a19c:	ee27 0a87 	vmul.f32	s0, s15, s14
 800a1a0:	4770      	bx	lr
 800a1a2:	eddf 7a19 	vldr	s15, [pc, #100]	; 800a208 <scalbnf+0xc0>
 800a1a6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a1aa:	4770      	bx	lr
 800a1ac:	0dd2      	lsrs	r2, r2, #23
 800a1ae:	e7e5      	b.n	800a17c <scalbnf+0x34>
 800a1b0:	4410      	add	r0, r2
 800a1b2:	28fe      	cmp	r0, #254	; 0xfe
 800a1b4:	dce6      	bgt.n	800a184 <scalbnf+0x3c>
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	dd06      	ble.n	800a1c8 <scalbnf+0x80>
 800a1ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a1be:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a1c2:	ee00 3a10 	vmov	s0, r3
 800a1c6:	4770      	bx	lr
 800a1c8:	f110 0f16 	cmn.w	r0, #22
 800a1cc:	da09      	bge.n	800a1e2 <scalbnf+0x9a>
 800a1ce:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800a208 <scalbnf+0xc0>
 800a1d2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800a20c <scalbnf+0xc4>
 800a1d6:	ee10 3a10 	vmov	r3, s0
 800a1da:	eeb0 7a67 	vmov.f32	s14, s15
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	e7d9      	b.n	800a196 <scalbnf+0x4e>
 800a1e2:	3019      	adds	r0, #25
 800a1e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a1e8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a1ec:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800a210 <scalbnf+0xc8>
 800a1f0:	ee07 3a90 	vmov	s15, r3
 800a1f4:	e7d7      	b.n	800a1a6 <scalbnf+0x5e>
 800a1f6:	bf00      	nop
 800a1f8:	ffff3cb0 	.word	0xffff3cb0
 800a1fc:	4c000000 	.word	0x4c000000
 800a200:	7149f2ca 	.word	0x7149f2ca
 800a204:	f149f2ca 	.word	0xf149f2ca
 800a208:	0da24260 	.word	0x0da24260
 800a20c:	8da24260 	.word	0x8da24260
 800a210:	33000000 	.word	0x33000000

0800a214 <with_errnof>:
 800a214:	b513      	push	{r0, r1, r4, lr}
 800a216:	4604      	mov	r4, r0
 800a218:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a21c:	f7fd fa20 	bl	8007660 <__errno>
 800a220:	ed9d 0a01 	vldr	s0, [sp, #4]
 800a224:	6004      	str	r4, [r0, #0]
 800a226:	b002      	add	sp, #8
 800a228:	bd10      	pop	{r4, pc}

0800a22a <xflowf>:
 800a22a:	b130      	cbz	r0, 800a23a <xflowf+0x10>
 800a22c:	eef1 7a40 	vneg.f32	s15, s0
 800a230:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a234:	2022      	movs	r0, #34	; 0x22
 800a236:	f7ff bfed 	b.w	800a214 <with_errnof>
 800a23a:	eef0 7a40 	vmov.f32	s15, s0
 800a23e:	e7f7      	b.n	800a230 <xflowf+0x6>

0800a240 <__math_uflowf>:
 800a240:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a248 <__math_uflowf+0x8>
 800a244:	f7ff bff1 	b.w	800a22a <xflowf>
 800a248:	10000000 	.word	0x10000000

0800a24c <__math_oflowf>:
 800a24c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a254 <__math_oflowf+0x8>
 800a250:	f7ff bfeb 	b.w	800a22a <xflowf>
 800a254:	70000000 	.word	0x70000000

0800a258 <_init>:
 800a258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a25a:	bf00      	nop
 800a25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a25e:	bc08      	pop	{r3}
 800a260:	469e      	mov	lr, r3
 800a262:	4770      	bx	lr

0800a264 <_fini>:
 800a264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a266:	bf00      	nop
 800a268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a26a:	bc08      	pop	{r3}
 800a26c:	469e      	mov	lr, r3
 800a26e:	4770      	bx	lr
